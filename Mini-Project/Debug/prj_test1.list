
prj_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c810  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800c9a0  0800c9a0  0001c9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce9c  0800ce9c  00020248  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce9c  0800ce9c  00020248  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce9c  0800ce9c  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce9c  0800ce9c  0001ce9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cea0  0800cea0  0001cea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800cea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020248  2**0
                  CONTENTS
 10 .bss          00000554  20000248  20000248  00020248  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000079c  2000079c  00020248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d5b2  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003526  00000000  00000000  0003d82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  00040d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001680  00000000  00000000  000424f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021573  00000000  00000000  00043b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e18b  00000000  00000000  000650e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8a24  00000000  00000000  0008326e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014bc92  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b08  00000000  00000000  0014bce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c988 	.word	0x0800c988

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0800c988 	.word	0x0800c988

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f001 f9cc 	bl	8002094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f834 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f000 fa9e 	bl	8001240 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d04:	f000 f906 	bl	8000f14 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d08:	f000 f944 	bl	8000f94 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d0c:	f000 fa76 	bl	80011fc <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000d10:	f000 f890 	bl	8000e34 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000d14:	f000 fa42 	bl	800119c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000d18:	f000 f97a 	bl	8001010 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d1c:	f000 f9c6 	bl	80010ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  programInit();
 8000d20:	f000 fcce 	bl	80016c0 <programInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_IT(&hadc1);
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <main+0x60>)
 8000d26:	f001 fc0f 	bl	8002548 <HAL_ADC_Start_IT>
  HAL_UART_Transmit(&huart3,"TTT to while",12,1000);
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	220c      	movs	r2, #12
 8000d30:	4909      	ldr	r1, [pc, #36]	; (8000d58 <main+0x64>)
 8000d32:	480a      	ldr	r0, [pc, #40]	; (8000d5c <main+0x68>)
 8000d34:	f006 f984 	bl	8007040 <HAL_UART_Transmit>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <main+0x6c>)
 8000d3a:	f004 ff73 	bl	8005c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000d3e:	4809      	ldr	r0, [pc, #36]	; (8000d64 <main+0x70>)
 8000d40:	f004 ff70 	bl	8005c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d44:	2100      	movs	r1, #0
 8000d46:	4807      	ldr	r0, [pc, #28]	; (8000d64 <main+0x70>)
 8000d48:	f005 f838 	bl	8005dbc <HAL_TIM_PWM_Start>

//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0); //B
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);  //A
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);  //C
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);  //D
		programLoop();
 8000d4c:	f000 fcc4 	bl	80016d8 <programLoop>
  {
 8000d50:	e7fc      	b.n	8000d4c <main+0x58>
 8000d52:	bf00      	nop
 8000d54:	20000264 	.word	0x20000264
 8000d58:	0800c9a0 	.word	0x0800c9a0
 8000d5c:	20000404 	.word	0x20000404
 8000d60:	2000036c 	.word	0x2000036c
 8000d64:	200003b8 	.word	0x200003b8

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b09e      	sub	sp, #120	; 0x78
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d72:	2228      	movs	r2, #40	; 0x28
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f007 f98c 	bl	8008094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	223c      	movs	r2, #60	; 0x3c
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f007 f97e 	bl	8008094 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000da0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da6:	2301      	movs	r3, #1
 8000da8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000daa:	2310      	movs	r3, #16
 8000dac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000db8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dbc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 fa08 	bl	80041d8 <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000dce:	f000 fb5b 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000de8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dec:	2101      	movs	r1, #1
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 fa30 	bl	8005254 <HAL_RCC_ClockConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dfa:	f000 fb45 	bl	8001488 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <SystemClock_Config+0xc8>)
 8000e00:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 fc51 	bl	80056c0 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e24:	f000 fb30 	bl	8001488 <Error_Handler>
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3778      	adds	r7, #120	; 0x78
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	000200a4 	.word	0x000200a4

08000e34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e5e:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e64:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e7e:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb0:	4817      	ldr	r0, [pc, #92]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000eb2:	f001 f969 	bl	8002188 <HAL_ADC_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ebc:	f000 fae4 	bl	8001488 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4811      	ldr	r0, [pc, #68]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000ecc:	f002 fa84 	bl	80033d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ed6:	f000 fad7 	bl	8001488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000eda:	2304      	movs	r3, #4
 8000edc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000ef8:	f001 ff82 	bl	8002e00 <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000f02:	f000 fac1 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000264 	.word	0x20000264

08000f14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <MX_I2C1_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <MX_I2C1_Init+0x7c>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f4e:	480e      	ldr	r0, [pc, #56]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f50:	f002 ff4a 	bl	8003de8 <HAL_I2C_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f5a:	f000 fa95 	bl	8001488 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f62:	f002 ffd0 	bl	8003f06 <HAL_I2CEx_ConfigAnalogFilter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f6c:	f000 fa8c 	bl	8001488 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f74:	f003 f812 	bl	8003f9c <HAL_I2CEx_ConfigDigitalFilter>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 fa83 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200002b4 	.word	0x200002b4
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	2000090e 	.word	0x2000090e

08000f94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_SPI1_Init+0x74>)
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <MX_SPI1_Init+0x78>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fae:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fca:	2208      	movs	r2, #8
 8000fcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fee:	2208      	movs	r2, #8
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_SPI1_Init+0x74>)
 8000ff4:	f004 fd14 	bl	8005a20 <HAL_SPI_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ffe:	f000 fa43 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000308 	.word	0x20000308
 800100c:	40013000 	.word	0x40013000

08001010 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001030:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001034:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3000-1;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001038:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800103c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001046:	f240 32e7 	movw	r2, #999	; 0x3e7
 800104a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_TIM2_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001058:	4813      	ldr	r0, [pc, #76]	; (80010a8 <MX_TIM2_Init+0x98>)
 800105a:	f004 fd8c 	bl	8005b76 <HAL_TIM_Base_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001064:	f000 fa10 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	4619      	mov	r1, r3
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001076:	f005 f9d5 	bl	8006424 <HAL_TIM_ConfigClockSource>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001080:	f000 fa02 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001092:	f005 fee9 	bl	8006e68 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800109c:	f000 f9f4 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000036c 	.word	0x2000036c

080010ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	; 0x38
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010de:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <MX_TIM3_Init+0xe8>)
 80010e0:	4a2d      	ldr	r2, [pc, #180]	; (8001198 <MX_TIM3_Init+0xec>)
 80010e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010e4:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <MX_TIM3_Init+0xe8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <MX_TIM3_Init+0xe8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010f0:	4b28      	ldr	r3, [pc, #160]	; (8001194 <MX_TIM3_Init+0xe8>)
 80010f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <MX_TIM3_Init+0xe8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001104:	4823      	ldr	r0, [pc, #140]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001106:	f004 fd36 	bl	8005b76 <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001110:	f000 f9ba 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800111a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111e:	4619      	mov	r1, r3
 8001120:	481c      	ldr	r0, [pc, #112]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001122:	f005 f97f 	bl	8006424 <HAL_TIM_ConfigClockSource>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800112c:	f000 f9ac 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001130:	4818      	ldr	r0, [pc, #96]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001132:	f004 fde1 	bl	8005cf8 <HAL_TIM_PWM_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800113c:	f000 f9a4 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4811      	ldr	r0, [pc, #68]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001150:	f005 fe8a 	bl	8006e68 <HAL_TIMEx_MasterConfigSynchronization>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800115a:	f000 f995 	bl	8001488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115e:	2360      	movs	r3, #96	; 0x60
 8001160:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001176:	f005 f841 	bl	80061fc <HAL_TIM_PWM_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001180:	f000 f982 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001186:	f000 fd53 	bl	8001c30 <HAL_TIM_MspPostInit>

}
 800118a:	bf00      	nop
 800118c:	3738      	adds	r7, #56	; 0x38
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200003b8 	.word	0x200003b8
 8001198:	40000400 	.word	0x40000400

0800119c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011a2:	4a15      	ldr	r2, [pc, #84]	; (80011f8 <MX_USART3_UART_Init+0x5c>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011e0:	f005 fee0 	bl	8006fa4 <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011ea:	f000 f94d 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000404 	.word	0x20000404
 80011f8:	40004800 	.word	0x40004800

080011fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <MX_USB_PCD_Init+0x40>)
 8001204:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 8001208:	2208      	movs	r2, #8
 800120a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 800120e:	2202      	movs	r2, #2
 8001210:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 8001214:	2202      	movs	r2, #2
 8001216:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 8001226:	f002 ff05 	bl	8004034 <HAL_PCD_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001230:	f000 f92a 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000048c 	.word	0x2000048c
 800123c:	40005c00 	.word	0x40005c00

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001256:	4b86      	ldr	r3, [pc, #536]	; (8001470 <MX_GPIO_Init+0x230>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4a85      	ldr	r2, [pc, #532]	; (8001470 <MX_GPIO_Init+0x230>)
 800125c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001260:	6153      	str	r3, [r2, #20]
 8001262:	4b83      	ldr	r3, [pc, #524]	; (8001470 <MX_GPIO_Init+0x230>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	4b80      	ldr	r3, [pc, #512]	; (8001470 <MX_GPIO_Init+0x230>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	4a7f      	ldr	r2, [pc, #508]	; (8001470 <MX_GPIO_Init+0x230>)
 8001274:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001278:	6153      	str	r3, [r2, #20]
 800127a:	4b7d      	ldr	r3, [pc, #500]	; (8001470 <MX_GPIO_Init+0x230>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001286:	4b7a      	ldr	r3, [pc, #488]	; (8001470 <MX_GPIO_Init+0x230>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a79      	ldr	r2, [pc, #484]	; (8001470 <MX_GPIO_Init+0x230>)
 800128c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001290:	6153      	str	r3, [r2, #20]
 8001292:	4b77      	ldr	r3, [pc, #476]	; (8001470 <MX_GPIO_Init+0x230>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b74      	ldr	r3, [pc, #464]	; (8001470 <MX_GPIO_Init+0x230>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4a73      	ldr	r2, [pc, #460]	; (8001470 <MX_GPIO_Init+0x230>)
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	6153      	str	r3, [r2, #20]
 80012aa:	4b71      	ldr	r3, [pc, #452]	; (8001470 <MX_GPIO_Init+0x230>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b6e      	ldr	r3, [pc, #440]	; (8001470 <MX_GPIO_Init+0x230>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	4a6d      	ldr	r2, [pc, #436]	; (8001470 <MX_GPIO_Init+0x230>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6153      	str	r3, [r2, #20]
 80012c2:	4b6b      	ldr	r3, [pc, #428]	; (8001470 <MX_GPIO_Init+0x230>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	4b68      	ldr	r3, [pc, #416]	; (8001470 <MX_GPIO_Init+0x230>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4a67      	ldr	r2, [pc, #412]	; (8001470 <MX_GPIO_Init+0x230>)
 80012d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012d8:	6153      	str	r3, [r2, #20]
 80012da:	4b65      	ldr	r3, [pc, #404]	; (8001470 <MX_GPIO_Init+0x230>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80012e6:	2200      	movs	r2, #0
 80012e8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80012ec:	4861      	ldr	r0, [pc, #388]	; (8001474 <MX_GPIO_Init+0x234>)
 80012ee:	f002 fd31 	bl	8003d54 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2114      	movs	r1, #20
 80012f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fa:	f002 fd2b 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2150      	movs	r1, #80	; 0x50
 8001302:	485d      	ldr	r0, [pc, #372]	; (8001478 <MX_GPIO_Init+0x238>)
 8001304:	f002 fd26 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f242 0105 	movw	r1, #8197	; 0x2005
 800130e:	485b      	ldr	r0, [pc, #364]	; (800147c <MX_GPIO_Init+0x23c>)
 8001310:	f002 fd20 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 800131a:	4859      	ldr	r0, [pc, #356]	; (8001480 <MX_GPIO_Init+0x240>)
 800131c:	f002 fd1a 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT4_Pin;
 8001320:	2324      	movs	r3, #36	; 0x24
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001324:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	484f      	ldr	r0, [pc, #316]	; (8001474 <MX_GPIO_Init+0x234>)
 8001336:	f002 fb93 	bl	8003a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800133a:	f64f 7308 	movw	r3, #65288	; 0xff08
 800133e:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4848      	ldr	r0, [pc, #288]	; (8001474 <MX_GPIO_Init+0x234>)
 8001354:	f002 fb84 	bl	8003a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800135c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001362:	2301      	movs	r3, #1
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	4842      	ldr	r0, [pc, #264]	; (8001478 <MX_GPIO_Init+0x238>)
 800136e:	f002 fb77 	bl	8003a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001372:	2301      	movs	r3, #1
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001388:	f002 fb6a 	bl	8003a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800138c:	2302      	movs	r3, #2
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001390:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001396:	2301      	movs	r3, #1
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f002 fb5c 	bl	8003a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80013a8:	2314      	movs	r3, #20
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c2:	f002 fb4d 	bl	8003a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013c6:	2310      	movs	r3, #16
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	482a      	ldr	r0, [pc, #168]	; (8001484 <MX_GPIO_Init+0x244>)
 80013dc:	f002 fb40 	bl	8003a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80013e0:	2350      	movs	r3, #80	; 0x50
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4820      	ldr	r0, [pc, #128]	; (8001478 <MX_GPIO_Init+0x238>)
 80013f8:	f002 fb32 	bl	8003a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 80013fc:	f242 0305 	movw	r3, #8197	; 0x2005
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4819      	ldr	r0, [pc, #100]	; (800147c <MX_GPIO_Init+0x23c>)
 8001416:	f002 fb23 	bl	8003a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 800141a:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	4813      	ldr	r0, [pc, #76]	; (8001480 <MX_GPIO_Init+0x240>)
 8001434:	f002 fb14 	bl	8003a60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	2006      	movs	r0, #6
 800143e:	f002 fa62 	bl	8003906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001442:	2006      	movs	r0, #6
 8001444:	f002 fa7b 	bl	800393e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2007      	movs	r0, #7
 800144e:	f002 fa5a 	bl	8003906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001452:	2007      	movs	r0, #7
 8001454:	f002 fa73 	bl	800393e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	200a      	movs	r0, #10
 800145e:	f002 fa52 	bl	8003906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001462:	200a      	movs	r0, #10
 8001464:	f002 fa6b 	bl	800393e <HAL_NVIC_EnableIRQ>

}
 8001468:	bf00      	nop
 800146a:	3730      	adds	r7, #48	; 0x30
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	48001000 	.word	0x48001000
 8001478:	48000800 	.word	0x48000800
 800147c:	48000400 	.word	0x48000400
 8001480:	48000c00 	.word	0x48000c00
 8001484:	48001400 	.word	0x48001400

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	e7fe      	b.n	8001490 <Error_Handler+0x8>
	...

08001494 <seven_segment_display_decimal>:
        .digits={0, 0, 0, 0},
        .number = 0};



void seven_segment_display_decimal(uint32_t n) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    if (n < 10) {
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b09      	cmp	r3, #9
 80014a0:	d832      	bhi.n	8001508 <seven_segment_display_decimal+0x74>
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin, (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <seven_segment_display_decimal+0x7c>)
 80014a4:	6a18      	ldr	r0, [r3, #32]
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <seven_segment_display_decimal+0x7c>)
 80014a8:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	f002 fc4d 	bl	8003d54 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin, (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <seven_segment_display_decimal+0x7c>)
 80014bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <seven_segment_display_decimal+0x7c>)
 80014c0:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	085b      	lsrs	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	461a      	mov	r2, r3
 80014d0:	f002 fc40 	bl	8003d54 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin, (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <seven_segment_display_decimal+0x7c>)
 80014d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <seven_segment_display_decimal+0x7c>)
 80014da:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	f002 fc33 	bl	8003d54 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin, (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <seven_segment_display_decimal+0x7c>)
 80014f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <seven_segment_display_decimal+0x7c>)
 80014f4:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	f002 fc26 	bl	8003d54 <HAL_GPIO_WritePin>

//        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
    }
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000010 	.word	0x20000010

08001514 <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i) {
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e00f      	b.n	8001540 <seven_segment_deactivate_digits+0x2c>
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin, GPIO_PIN_SET);
 8001520:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <seven_segment_deactivate_digits+0x3c>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001528:	4a09      	ldr	r2, [pc, #36]	; (8001550 <seven_segment_deactivate_digits+0x3c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4413      	add	r3, r2
 8001530:	889b      	ldrh	r3, [r3, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	4619      	mov	r1, r3
 8001536:	f002 fc0d 	bl	8003d54 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; ++i) {
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3301      	adds	r3, #1
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b03      	cmp	r3, #3
 8001544:	ddec      	ble.n	8001520 <seven_segment_deactivate_digits+0xc>
    }
}
 8001546:	bf00      	nop
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000010 	.word	0x20000010

08001554 <seven_segment_activate_digit>:

int last_time_on = 0;
void seven_segment_activate_digit(uint32_t d) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    if (d < 4) {
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d828      	bhi.n	80015b4 <seven_segment_activate_digit+0x60>
		if(d == (2-state)) {//&& (HAL_GetTick() - last_time_on) > 40){
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <seven_segment_activate_digit+0x68>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f1c3 0202 	rsb	r2, r3, #2
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	d10d      	bne.n	800158c <seven_segment_activate_digit+0x38>
//			HAL_Delay(35);
			HAL_GPIO_TogglePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin);
 8001570:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <seven_segment_activate_digit+0x6c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001578:	4911      	ldr	r1, [pc, #68]	; (80015c0 <seven_segment_activate_digit+0x6c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	889b      	ldrh	r3, [r3, #4]
 8001582:	4619      	mov	r1, r3
 8001584:	4610      	mov	r0, r2
 8001586:	f002 fbfd 	bl	8003d84 <HAL_GPIO_TogglePin>
		}
		else if (d != (2-state)){
			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
		}
    }
}
 800158a:	e013      	b.n	80015b4 <seven_segment_activate_digit+0x60>
		else if (d != (2-state)){
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <seven_segment_activate_digit+0x68>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f1c3 0202 	rsb	r2, r3, #2
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	d00c      	beq.n	80015b4 <seven_segment_activate_digit+0x60>
			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <seven_segment_activate_digit+0x6c>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80015a2:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <seven_segment_activate_digit+0x6c>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4413      	add	r3, r2
 80015aa:	889b      	ldrh	r3, [r3, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	4619      	mov	r1, r3
 80015b0:	f002 fbd0 	bl	8003d54 <HAL_GPIO_WritePin>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000778 	.word	0x20000778
 80015c0:	20000010 	.word	0x20000010

080015c4 <seven_segment_set_num>:

void seven_segment_set_num(int numbers[3]) {
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
        for (uint32_t i = 0; i < 3; ++i) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	e00d      	b.n	80015ee <seven_segment_set_num+0x2a>
            seven_segment.digits[i] = numbers[i];
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <seven_segment_set_num+0x40>)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3310      	adds	r3, #16
 80015e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint32_t i = 0; i < 3; ++i) {
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3301      	adds	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d9ee      	bls.n	80015d2 <seven_segment_set_num+0xe>
    }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000010 	.word	0x20000010

08001608 <seven_segment_refresh>:

void seven_segment_refresh(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
    static uint32_t state_tmp = 2;
    static uint32_t last_time_tmp = 0;
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 800160c:	2120      	movs	r1, #32
 800160e:	4827      	ldr	r0, [pc, #156]	; (80016ac <seven_segment_refresh+0xa4>)
 8001610:	f002 fbb8 	bl	8003d84 <HAL_GPIO_TogglePin>
    if (HAL_GetTick() - last_time_tmp > 5) {
 8001614:	f000 fd98 	bl	8002148 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <seven_segment_refresh+0xa8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b05      	cmp	r3, #5
 8001622:	d940      	bls.n	80016a6 <seven_segment_refresh+0x9e>
        seven_segment_deactivate_digits();
 8001624:	f7ff ff76 	bl	8001514 <seven_segment_deactivate_digits>
        seven_segment_activate_digit(state_tmp);
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <seven_segment_refresh+0xac>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff91 	bl	8001554 <seven_segment_activate_digit>
        seven_segment_display_decimal(seven_segment.digits[state_tmp]);
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <seven_segment_refresh+0xac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <seven_segment_refresh+0xb0>)
 8001638:	3310      	adds	r3, #16
 800163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff28 	bl	8001494 <seven_segment_display_decimal>
        if ((state == 2 && state_tmp == 2) || (state==1 && state_tmp==1) || (state == 0 && state_tmp == 0)){
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <seven_segment_refresh+0xb4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d103      	bne.n	8001654 <seven_segment_refresh+0x4c>
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <seven_segment_refresh+0xac>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d00f      	beq.n	8001674 <seven_segment_refresh+0x6c>
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <seven_segment_refresh+0xb4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d103      	bne.n	8001664 <seven_segment_refresh+0x5c>
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <seven_segment_refresh+0xac>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d007      	beq.n	8001674 <seven_segment_refresh+0x6c>
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <seven_segment_refresh+0xb4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10a      	bne.n	8001682 <seven_segment_refresh+0x7a>
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <seven_segment_refresh+0xac>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d106      	bne.n	8001682 <seven_segment_refresh+0x7a>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001674:	2201      	movs	r2, #1
 8001676:	2104      	movs	r1, #4
 8001678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167c:	f002 fb6a 	bl	8003d54 <HAL_GPIO_WritePin>
 8001680:	e005      	b.n	800168e <seven_segment_refresh+0x86>
        }else{
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2104      	movs	r1, #4
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f002 fb63 	bl	8003d54 <HAL_GPIO_WritePin>
        }
        state_tmp = (state_tmp + 1) % 4; //active each 4 segments
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <seven_segment_refresh+0xac>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3301      	adds	r3, #1
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <seven_segment_refresh+0xac>)
 800169a:	6013      	str	r3, [r2, #0]
        last_time_tmp = HAL_GetTick();
 800169c:	f000 fd54 	bl	8002148 <HAL_GetTick>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a03      	ldr	r2, [pc, #12]	; (80016b0 <seven_segment_refresh+0xa8>)
 80016a4:	6013      	str	r3, [r2, #0]
    }
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	48001000 	.word	0x48001000
 80016b0:	20000780 	.word	0x20000780
 80016b4:	20000064 	.word	0x20000064
 80016b8:	20000010 	.word	0x20000010
 80016bc:	20000778 	.word	0x20000778

080016c0 <programInit>:

void programInit() {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
    seven_segment_set_num(numbers);
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <programInit+0x14>)
 80016c6:	f7ff ff7d 	bl	80015c4 <seven_segment_set_num>
    event();
 80016ca:	f000 f80b 	bl	80016e4 <event>
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000000 	.word	0x20000000

080016d8 <programLoop>:

void programLoop() {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
    seven_segment_refresh();
 80016dc:	f7ff ff94 	bl	8001608 <seven_segment_refresh>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <event>:
		{.port=GPIOE, .pin=GPIO_PIN_14}, //6: D8
		{.port=GPIOE, .pin=GPIO_PIN_15}, //7: D6
		{.port=GPIOE, .pin=GPIO_PIN_8},  //8: D4
}};

void event(){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
	int a=numbers[2];
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <event+0x24>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	60fb      	str	r3, [r7, #12]
	int b=numbers[1];
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <event+0x24>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	60bb      	str	r3, [r7, #8]
	int c=numbers[0];
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <event+0x24>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	607b      	str	r3, [r7, #4]
	seven_segment_deactivate_digits();
 80016fc:	f7ff ff0a 	bl	8001514 <seven_segment_deactivate_digits>

	//TODO: write event there

}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000000 	.word	0x20000000

0800170c <HAL_GPIO_EXTI_Callback>:


int last_time2 = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == GPIO_PIN_4) { //Left button ==> PF4
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	2b10      	cmp	r3, #16
 800171a:	d167      	bne.n	80017ec <HAL_GPIO_EXTI_Callback+0xe0>
			if (HAL_GetTick() - last_time2 > 400){
 800171c:	f000 fd14 	bl	8002148 <HAL_GetTick>
 8001720:	4603      	mov	r3, r0
 8001722:	4a86      	ldr	r2, [pc, #536]	; (800193c <HAL_GPIO_EXTI_Callback+0x230>)
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800172c:	f240 80ff 	bls.w	800192e <HAL_GPIO_EXTI_Callback+0x222>
				if (state == 0){
 8001730:	4b83      	ldr	r3, [pc, #524]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d119      	bne.n	800176c <HAL_GPIO_EXTI_Callback+0x60>
					numbers[state]=(numbers[state] - 1);
 8001738:	4b81      	ldr	r3, [pc, #516]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a81      	ldr	r2, [pc, #516]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 800173e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001742:	4b7f      	ldr	r3, [pc, #508]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3a01      	subs	r2, #1
 8001748:	497e      	ldr	r1, [pc, #504]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (numbers[state] == -1)
 800174e:	4b7c      	ldr	r3, [pc, #496]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7c      	ldr	r2, [pc, #496]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 8001754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d13f      	bne.n	80017de <HAL_GPIO_EXTI_Callback+0xd2>
						numbers[state]=9;
 800175e:	4b78      	ldr	r3, [pc, #480]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a78      	ldr	r2, [pc, #480]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 8001764:	2109      	movs	r1, #9
 8001766:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800176a:	e038      	b.n	80017de <HAL_GPIO_EXTI_Callback+0xd2>

				}else if (state == 1){
 800176c:	4b74      	ldr	r3, [pc, #464]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d118      	bne.n	80017a6 <HAL_GPIO_EXTI_Callback+0x9a>
					numbers[state]=(numbers[state] - 1);
 8001774:	4b72      	ldr	r3, [pc, #456]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a72      	ldr	r2, [pc, #456]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 800177a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800177e:	4b70      	ldr	r3, [pc, #448]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3a01      	subs	r2, #1
 8001784:	496f      	ldr	r1, [pc, #444]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (numbers[state] == 0)
 800178a:	4b6d      	ldr	r3, [pc, #436]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6d      	ldr	r2, [pc, #436]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 8001790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d122      	bne.n	80017de <HAL_GPIO_EXTI_Callback+0xd2>
							numbers[state]=4;
 8001798:	4b69      	ldr	r3, [pc, #420]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a69      	ldr	r2, [pc, #420]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 800179e:	2104      	movs	r1, #4
 80017a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80017a4:	e01b      	b.n	80017de <HAL_GPIO_EXTI_Callback+0xd2>

				}else if (state == 2){
 80017a6:	4b66      	ldr	r3, [pc, #408]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d117      	bne.n	80017de <HAL_GPIO_EXTI_Callback+0xd2>
					numbers[state]=(numbers[state] - 1);
 80017ae:	4b64      	ldr	r3, [pc, #400]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a64      	ldr	r2, [pc, #400]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 80017b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017b8:	4b61      	ldr	r3, [pc, #388]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3a01      	subs	r2, #1
 80017be:	4961      	ldr	r1, [pc, #388]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 80017c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (numbers[state] == 0)
 80017c4:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a5e      	ldr	r2, [pc, #376]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <HAL_GPIO_EXTI_Callback+0xd2>
							numbers[state]=3;
 80017d2:	4b5b      	ldr	r3, [pc, #364]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a5b      	ldr	r2, [pc, #364]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 80017d8:	2103      	movs	r1, #3
 80017da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				last_time2=HAL_GetTick();
 80017de:	f000 fcb3 	bl	8002148 <HAL_GetTick>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b55      	ldr	r3, [pc, #340]	; (800193c <HAL_GPIO_EXTI_Callback+0x230>)
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	e0a0      	b.n	800192e <HAL_GPIO_EXTI_Callback+0x222>
			}
		}

		else if (GPIO_Pin == GPIO_PIN_1){	 //middle button ==> PA1
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d17d      	bne.n	80018ee <HAL_GPIO_EXTI_Callback+0x1e2>
			if (HAL_GetTick() - last_time2 > 400){
 80017f2:	f000 fca9 	bl	8002148 <HAL_GetTick>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a50      	ldr	r2, [pc, #320]	; (800193c <HAL_GPIO_EXTI_Callback+0x230>)
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	1a9b      	subs	r3, r3, r2
 80017fe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001802:	f240 8094 	bls.w	800192e <HAL_GPIO_EXTI_Callback+0x222>
				if (state == 0){
 8001806:	4b4e      	ldr	r3, [pc, #312]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d116      	bne.n	800183c <HAL_GPIO_EXTI_Callback+0x130>
					numbers[state]=(numbers[state] + 1) % 10;
 800180e:	4b4c      	ldr	r3, [pc, #304]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a4c      	ldr	r2, [pc, #304]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 8001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001818:	1c59      	adds	r1, r3, #1
 800181a:	4b49      	ldr	r3, [pc, #292]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_GPIO_EXTI_Callback+0x23c>)
 8001820:	fb83 2301 	smull	r2, r3, r3, r1
 8001824:	109a      	asrs	r2, r3, #2
 8001826:	17cb      	asrs	r3, r1, #31
 8001828:	1ad2      	subs	r2, r2, r3
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	1aca      	subs	r2, r1, r3
 8001834:	4b43      	ldr	r3, [pc, #268]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 8001836:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 800183a:	e04f      	b.n	80018dc <HAL_GPIO_EXTI_Callback+0x1d0>

				}else if (state == 1){
 800183c:	4b40      	ldr	r3, [pc, #256]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d125      	bne.n	8001890 <HAL_GPIO_EXTI_Callback+0x184>
					numbers[state]=(numbers[state] + 1) % 5;
 8001844:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a3e      	ldr	r2, [pc, #248]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184e:	1c59      	adds	r1, r3, #1
 8001850:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <HAL_GPIO_EXTI_Callback+0x23c>)
 8001856:	fb83 2301 	smull	r2, r3, r3, r1
 800185a:	105a      	asrs	r2, r3, #1
 800185c:	17cb      	asrs	r3, r1, #31
 800185e:	1ad2      	subs	r2, r2, r3
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	1aca      	subs	r2, r1, r3
 8001868:	4b36      	ldr	r3, [pc, #216]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 800186a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
					if (numbers[state] == 0)
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a34      	ldr	r2, [pc, #208]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d12f      	bne.n	80018dc <HAL_GPIO_EXTI_Callback+0x1d0>
						numbers[state]++;
 800187c:	4b30      	ldr	r3, [pc, #192]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a30      	ldr	r2, [pc, #192]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 8001882:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001886:	3201      	adds	r2, #1
 8001888:	492e      	ldr	r1, [pc, #184]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800188e:	e025      	b.n	80018dc <HAL_GPIO_EXTI_Callback+0x1d0>

				}else if (state == 2){
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d121      	bne.n	80018dc <HAL_GPIO_EXTI_Callback+0x1d0>
					numbers[state]=(numbers[state] + 1) % 4;
 8001898:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a29      	ldr	r2, [pc, #164]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 800189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a2:	3301      	adds	r3, #1
 80018a4:	4a26      	ldr	r2, [pc, #152]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	4259      	negs	r1, r3
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	f001 0103 	and.w	r1, r1, #3
 80018b2:	bf58      	it	pl
 80018b4:	424b      	negpl	r3, r1
 80018b6:	4923      	ldr	r1, [pc, #140]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 80018b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
					if (numbers[state] == 0)
 80018bc:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a20      	ldr	r2, [pc, #128]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 80018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d108      	bne.n	80018dc <HAL_GPIO_EXTI_Callback+0x1d0>
						numbers[state]++;
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 80018d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018d4:	3201      	adds	r2, #1
 80018d6:	491b      	ldr	r1, [pc, #108]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 80018d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}

				last_time2=HAL_GetTick();
 80018dc:	f000 fc34 	bl	8002148 <HAL_GetTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_GPIO_EXTI_Callback+0x230>)
 80018e6:	601a      	str	r2, [r3, #0]
				event();
 80018e8:	f7ff fefc 	bl	80016e4 <event>
 80018ec:	e01f      	b.n	800192e <HAL_GPIO_EXTI_Callback+0x222>
			}

		}

		else if (GPIO_Pin == GPIO_PIN_0) { //Right button ==> PC0
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d11c      	bne.n	800192e <HAL_GPIO_EXTI_Callback+0x222>
			if (HAL_GetTick() - last_time2 > 400){
 80018f4:	f000 fc28 	bl	8002148 <HAL_GetTick>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a10      	ldr	r2, [pc, #64]	; (800193c <HAL_GPIO_EXTI_Callback+0x230>)
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	1a9b      	subs	r3, r3, r2
 8001900:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001904:	d913      	bls.n	800192e <HAL_GPIO_EXTI_Callback+0x222>
				state = (state + 1) % 3;
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	1c59      	adds	r1, r3, #1
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_GPIO_EXTI_Callback+0x240>)
 800190e:	fb83 3201 	smull	r3, r2, r3, r1
 8001912:	17cb      	asrs	r3, r1, #31
 8001914:	1ad2      	subs	r2, r2, r3
 8001916:	4613      	mov	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	1aca      	subs	r2, r1, r3
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_GPIO_EXTI_Callback+0x234>)
 8001920:	601a      	str	r2, [r3, #0]
				last_time2=HAL_GetTick();
 8001922:	f000 fc11 	bl	8002148 <HAL_GetTick>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <HAL_GPIO_EXTI_Callback+0x230>)
 800192c:	601a      	str	r2, [r3, #0]
				}

			}

		seven_segment_set_num(numbers);
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <HAL_GPIO_EXTI_Callback+0x238>)
 8001930:	f7ff fe48 	bl	80015c4 <seven_segment_set_num>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000077c 	.word	0x2000077c
 8001940:	20000778 	.word	0x20000778
 8001944:	20000000 	.word	0x20000000
 8001948:	66666667 	.word	0x66666667
 800194c:	55555556 	.word	0x55555556

08001950 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b0a0      	sub	sp, #128	; 0x80
 8001954:	af02      	add	r7, sp, #8
 8001956:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001960:	d12a      	bne.n	80019b8 <HAL_ADC_ConvCpltCallback+0x68>
//		  HAL_UART_Transmit(&huart3,"TTT",3,1000);

		int x = HAL_ADC_GetValue(&hadc1);
 8001962:	4817      	ldr	r0, [pc, #92]	; (80019c0 <HAL_ADC_ConvCpltCallback+0x70>)
 8001964:	f000 ff30 	bl	80027c8 <HAL_ADC_GetValue>
 8001968:	4603      	mov	r3, r0
 800196a:	677b      	str	r3, [r7, #116]	; 0x74
		float fx = ((float) x * 100 / 4095);
 800196c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800196e:	ee07 3a90 	vmov	s15, r3
 8001972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001976:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80019c4 <HAL_ADC_ConvCpltCallback+0x74>
 800197a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800197e:	eddf 6a12 	vldr	s13, [pc, #72]	; 80019c8 <HAL_ADC_ConvCpltCallback+0x78>
 8001982:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001986:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		unsigned char data[100];
		int n = sprintf(data, "%d  %.4f\n", x, fx);
 800198a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800198c:	f7fe fddc 	bl	8000548 <__aeabi_f2d>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	f107 0008 	add.w	r0, r7, #8
 8001998:	e9cd 2300 	strd	r2, r3, [sp]
 800199c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800199e:	490b      	ldr	r1, [pc, #44]	; (80019cc <HAL_ADC_ConvCpltCallback+0x7c>)
 80019a0:	f007 fa00 	bl	8008da4 <siprintf>
 80019a4:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart3, data, n, 1000);
 80019a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	f107 0108 	add.w	r1, r7, #8
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	4807      	ldr	r0, [pc, #28]	; (80019d0 <HAL_ADC_ConvCpltCallback+0x80>)
 80019b4:	f005 fb44 	bl	8007040 <HAL_UART_Transmit>
	}
	else if(hadc->Instance == ADC2){

	}

}
 80019b8:	bf00      	nop
 80019ba:	3778      	adds	r7, #120	; 0x78
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000264 	.word	0x20000264
 80019c4:	42c80000 	.word	0x42c80000
 80019c8:	457ff000 	.word	0x457ff000
 80019cc:	0800c9b0 	.word	0x0800c9b0
 80019d0:	20000404 	.word	0x20000404

080019d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_MspInit+0x44>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_MspInit+0x44>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6193      	str	r3, [r2, #24]
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_MspInit+0x44>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_MspInit+0x44>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_MspInit+0x44>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_MspInit+0x44>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001a0a:	2005      	movs	r0, #5
 8001a0c:	f001 ff70 	bl	80038f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a3c:	d12c      	bne.n	8001a98 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_ADC_MspInit+0x84>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_ADC_MspInit+0x84>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a48:	6153      	str	r3, [r2, #20]
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_ADC_MspInit+0x84>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_ADC_MspInit+0x84>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <HAL_ADC_MspInit+0x84>)
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a60:	6153      	str	r3, [r2, #20]
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_ADC_MspInit+0x84>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a6e:	2308      	movs	r3, #8
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a72:	2303      	movs	r3, #3
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a84:	f001 ffec 	bl	8003a60 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	2012      	movs	r0, #18
 8001a8e:	f001 ff3a 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a92:	2012      	movs	r0, #18
 8001a94:	f001 ff53 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	; 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_I2C_MspInit+0x7c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d127      	bne.n	8001b16 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_I2C_MspInit+0x80>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <HAL_I2C_MspInit+0x80>)
 8001acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad0:	6153      	str	r3, [r2, #20]
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_I2C_MspInit+0x80>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001ade:	23c0      	movs	r3, #192	; 0xc0
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae2:	2312      	movs	r3, #18
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aee:	2304      	movs	r3, #4
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	480b      	ldr	r0, [pc, #44]	; (8001b28 <HAL_I2C_MspInit+0x84>)
 8001afa:	f001 ffb1 	bl	8003a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_I2C_MspInit+0x80>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_I2C_MspInit+0x80>)
 8001b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_I2C_MspInit+0x80>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3728      	adds	r7, #40	; 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40005400 	.word	0x40005400
 8001b24:	40021000 	.word	0x40021000
 8001b28:	48000400 	.word	0x48000400

08001b2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <HAL_SPI_MspInit+0x7c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d128      	bne.n	8001ba0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_SPI_MspInit+0x80>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	4a16      	ldr	r2, [pc, #88]	; (8001bac <HAL_SPI_MspInit+0x80>)
 8001b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b58:	6193      	str	r3, [r2, #24]
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_SPI_MspInit+0x80>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_SPI_MspInit+0x80>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <HAL_SPI_MspInit+0x80>)
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b70:	6153      	str	r3, [r2, #20]
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_SPI_MspInit+0x80>)
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001b7e:	23e0      	movs	r3, #224	; 0xe0
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b8e:	2305      	movs	r3, #5
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9c:	f001 ff60 	bl	8003a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	; 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40013000 	.word	0x40013000
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc0:	d114      	bne.n	8001bec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_TIM_Base_MspInit+0x78>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <HAL_TIM_Base_MspInit+0x78>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	61d3      	str	r3, [r2, #28]
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_TIM_Base_MspInit+0x78>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	201c      	movs	r0, #28
 8001be0:	f001 fe91 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001be4:	201c      	movs	r0, #28
 8001be6:	f001 feaa 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bea:	e018      	b.n	8001c1e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <HAL_TIM_Base_MspInit+0x7c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d113      	bne.n	8001c1e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_TIM_Base_MspInit+0x78>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_TIM_Base_MspInit+0x78>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_TIM_Base_MspInit+0x78>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	201d      	movs	r0, #29
 8001c14:	f001 fe77 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c18:	201d      	movs	r0, #29
 8001c1a:	f001 fe90 	bl	800393e <HAL_NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40000400 	.word	0x40000400

08001c30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a11      	ldr	r2, [pc, #68]	; (8001c94 <HAL_TIM_MspPostInit+0x64>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d11b      	bne.n	8001c8a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_TIM_MspPostInit+0x68>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <HAL_TIM_MspPostInit+0x68>)
 8001c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5c:	6153      	str	r3, [r2, #20]
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_TIM_MspPostInit+0x68>)
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	; (8001c9c <HAL_TIM_MspPostInit+0x6c>)
 8001c86:	f001 feeb 	bl	8003a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40000400 	.word	0x40000400
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	48000400 	.word	0x48000400

08001ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <HAL_UART_MspInit+0x8c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d130      	bne.n	8001d24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_UART_MspInit+0x90>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <HAL_UART_MspInit+0x90>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ccc:	61d3      	str	r3, [r2, #28]
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_UART_MspInit+0x90>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_UART_MspInit+0x90>)
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <HAL_UART_MspInit+0x90>)
 8001ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce4:	6153      	str	r3, [r2, #20]
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_UART_MspInit+0x90>)
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cf2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d04:	2307      	movs	r3, #7
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4809      	ldr	r0, [pc, #36]	; (8001d34 <HAL_UART_MspInit+0x94>)
 8001d10:	f001 fea6 	bl	8003a60 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	2027      	movs	r0, #39	; 0x27
 8001d1a:	f001 fdf4 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d1e:	2027      	movs	r0, #39	; 0x27
 8001d20:	f001 fe0d 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d24:	bf00      	nop
 8001d26:	3728      	adds	r7, #40	; 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40004800 	.word	0x40004800
 8001d30:	40021000 	.word	0x40021000
 8001d34:	48000400 	.word	0x48000400

08001d38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	; 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <HAL_PCD_MspInit+0x80>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d129      	bne.n	8001dae <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_PCD_MspInit+0x84>)
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <HAL_PCD_MspInit+0x84>)
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	6153      	str	r3, [r2, #20]
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_PCD_MspInit+0x84>)
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001d72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001d84:	230e      	movs	r3, #14
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d92:	f001 fe65 	bl	8003a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_PCD_MspInit+0x84>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a08      	ldr	r2, [pc, #32]	; (8001dbc <HAL_PCD_MspInit+0x84>)
 8001d9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_PCD_MspInit+0x84>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40005c00 	.word	0x40005c00
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <NMI_Handler+0x4>

08001dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <BusFault_Handler+0x4>

08001dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <UsageFault_Handler+0x4>

08001dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0c:	f000 f988 	bl	8002120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f001 ffcd 	bl	8003db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e26:	2002      	movs	r0, #2
 8001e28:	f001 ffc6 	bl	8003db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001e34:	2010      	movs	r0, #16
 8001e36:	f001 ffbf 	bl	8003db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <ADC1_2_IRQHandler+0x10>)
 8001e46:	f000 fccd 	bl	80027e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000264 	.word	0x20000264

08001e54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <TIM2_IRQHandler+0x10>)
 8001e5a:	f004 f8af 	bl	8005fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000036c 	.word	0x2000036c

08001e68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM3_IRQHandler+0x10>)
 8001e6e:	f004 f8a5 	bl	8005fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200003b8 	.word	0x200003b8

08001e7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <USART3_IRQHandler+0x10>)
 8001e82:	f005 f967 	bl	8007154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000404 	.word	0x20000404

08001e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return 1;
 8001e94:	2301      	movs	r3, #1
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <_kill>:

int _kill(int pid, int sig)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eaa:	f006 f8c9 	bl	8008040 <__errno>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2216      	movs	r2, #22
 8001eb2:	601a      	str	r2, [r3, #0]
  return -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_exit>:

void _exit (int status)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ffe7 	bl	8001ea0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ed2:	e7fe      	b.n	8001ed2 <_exit+0x12>

08001ed4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	e00a      	b.n	8001efc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee6:	f3af 8000 	nop.w
 8001eea:	4601      	mov	r1, r0
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	60ba      	str	r2, [r7, #8]
 8001ef2:	b2ca      	uxtb	r2, r1
 8001ef4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	dbf0      	blt.n	8001ee6 <_read+0x12>
  }

  return len;
 8001f04:	687b      	ldr	r3, [r7, #4]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e009      	b.n	8001f34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	60ba      	str	r2, [r7, #8]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	dbf1      	blt.n	8001f20 <_write+0x12>
  }
  return len;
 8001f3c:	687b      	ldr	r3, [r7, #4]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_close>:

int _close(int file)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <_isatty>:

int _isatty(int file)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f86:	2301      	movs	r3, #1
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb8:	4a14      	ldr	r2, [pc, #80]	; (800200c <_sbrk+0x5c>)
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <_sbrk+0x60>)
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <_sbrk+0x64>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <_sbrk+0x68>)
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d207      	bcs.n	8001ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe0:	f006 f82e 	bl	8008040 <__errno>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	e009      	b.n	8002004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a05      	ldr	r2, [pc, #20]	; (8002014 <_sbrk+0x64>)
 8002000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000a000 	.word	0x2000a000
 8002010:	00000400 	.word	0x00000400
 8002014:	20000784 	.word	0x20000784
 8002018:	200007a0 	.word	0x200007a0

0800201c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <SystemInit+0x20>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	4a05      	ldr	r2, [pc, #20]	; (800203c <SystemInit+0x20>)
 8002028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800202c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002078 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002044:	f7ff ffea 	bl	800201c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <LoopForever+0x6>)
  ldr r1, =_edata
 800204a:	490d      	ldr	r1, [pc, #52]	; (8002080 <LoopForever+0xa>)
  ldr r2, =_sidata
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <LoopForever+0xe>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002060:	4c0a      	ldr	r4, [pc, #40]	; (800208c <LoopForever+0x16>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800206e:	f005 ffed 	bl	800804c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002072:	f7fe fe3f 	bl	8000cf4 <main>

08002076 <LoopForever>:

LoopForever:
    b LoopForever
 8002076:	e7fe      	b.n	8002076 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002078:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800207c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002080:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8002084:	0800cea4 	.word	0x0800cea4
  ldr r2, =_sbss
 8002088:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 800208c:	2000079c 	.word	0x2000079c

08002090 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC3_IRQHandler>
	...

08002094 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_Init+0x28>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a07      	ldr	r2, [pc, #28]	; (80020bc <HAL_Init+0x28>)
 800209e:	f043 0310 	orr.w	r3, r3, #16
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a4:	2003      	movs	r0, #3
 80020a6:	f001 fc23 	bl	80038f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f000 f808 	bl	80020c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b0:	f7ff fc90 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40022000 	.word	0x40022000

080020c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_InitTick+0x54>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_InitTick+0x58>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	f001 fc3b 	bl	800395a <HAL_SYSTICK_Config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00e      	b.n	800210c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b0f      	cmp	r3, #15
 80020f2:	d80a      	bhi.n	800210a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f4:	2200      	movs	r2, #0
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f001 fc03 	bl	8003906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <HAL_InitTick+0x5c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000068 	.word	0x20000068
 8002118:	20000070 	.word	0x20000070
 800211c:	2000006c 	.word	0x2000006c

08002120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_IncTick+0x20>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_IncTick+0x24>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <HAL_IncTick+0x24>)
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000070 	.word	0x20000070
 8002144:	20000788 	.word	0x20000788

08002148 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;  
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_GetTick+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000788 	.word	0x20000788

08002160 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b09a      	sub	sp, #104	; 0x68
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e1c9      	b.n	800253c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d176      	bne.n	80022a8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d152      	bne.n	8002268 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fc1d 	bl	8001a1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d13b      	bne.n	8002268 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f001 fa47 	bl	8003684 <ADC_Disable>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	d12f      	bne.n	8002268 <HAL_ADC_Init+0xe0>
 8002208:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800220c:	2b00      	cmp	r3, #0
 800220e:	d12b      	bne.n	8002268 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002218:	f023 0302 	bic.w	r3, r3, #2
 800221c:	f043 0202 	orr.w	r2, r3, #2
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002232:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002242:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002244:	4b86      	ldr	r3, [pc, #536]	; (8002460 <HAL_ADC_Init+0x2d8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a86      	ldr	r2, [pc, #536]	; (8002464 <HAL_ADC_Init+0x2dc>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0c9a      	lsrs	r2, r3, #18
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800225a:	e002      	b.n	8002262 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3b01      	subs	r3, #1
 8002260:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f9      	bne.n	800225c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002284:	d110      	bne.n	80022a8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f023 0312 	bic.w	r3, r3, #18
 800228e:	f043 0210 	orr.w	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f043 0201 	orr.w	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f040 8136 	bne.w	8002522 <HAL_ADC_Init+0x39a>
 80022b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f040 8131 	bne.w	8002522 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 8129 	bne.w	8002522 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022d8:	f043 0202 	orr.w	r2, r3, #2
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e8:	d004      	beq.n	80022f4 <HAL_ADC_Init+0x16c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a5e      	ldr	r2, [pc, #376]	; (8002468 <HAL_ADC_Init+0x2e0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_Init+0x170>
 80022f4:	4b5d      	ldr	r3, [pc, #372]	; (800246c <HAL_ADC_Init+0x2e4>)
 80022f6:	e000      	b.n	80022fa <HAL_ADC_Init+0x172>
 80022f8:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <HAL_ADC_Init+0x2e8>)
 80022fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002304:	d102      	bne.n	800230c <HAL_ADC_Init+0x184>
 8002306:	4b58      	ldr	r3, [pc, #352]	; (8002468 <HAL_ADC_Init+0x2e0>)
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	e01a      	b.n	8002342 <HAL_ADC_Init+0x1ba>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a55      	ldr	r2, [pc, #340]	; (8002468 <HAL_ADC_Init+0x2e0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d103      	bne.n	800231e <HAL_ADC_Init+0x196>
 8002316:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e011      	b.n	8002342 <HAL_ADC_Init+0x1ba>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a54      	ldr	r2, [pc, #336]	; (8002474 <HAL_ADC_Init+0x2ec>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d102      	bne.n	800232e <HAL_ADC_Init+0x1a6>
 8002328:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_ADC_Init+0x2f0>)
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e009      	b.n	8002342 <HAL_ADC_Init+0x1ba>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a51      	ldr	r2, [pc, #324]	; (8002478 <HAL_ADC_Init+0x2f0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d102      	bne.n	800233e <HAL_ADC_Init+0x1b6>
 8002338:	4b4e      	ldr	r3, [pc, #312]	; (8002474 <HAL_ADC_Init+0x2ec>)
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	e001      	b.n	8002342 <HAL_ADC_Init+0x1ba>
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d108      	bne.n	8002362 <HAL_ADC_Init+0x1da>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_ADC_Init+0x1da>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <HAL_ADC_Init+0x1dc>
 8002362:	2300      	movs	r3, #0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d11c      	bne.n	80023a2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002368:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	d010      	beq.n	8002390 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d107      	bne.n	800238a <HAL_ADC_Init+0x202>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_ADC_Init+0x202>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_ADC_Init+0x204>
 800238a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800238c:	2b00      	cmp	r3, #0
 800238e:	d108      	bne.n	80023a2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	431a      	orrs	r2, r3
 800239e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	7e5b      	ldrb	r3, [r3, #25]
 80023a6:	035b      	lsls	r3, r3, #13
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023ac:	2a01      	cmp	r2, #1
 80023ae:	d002      	beq.n	80023b6 <HAL_ADC_Init+0x22e>
 80023b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023b4:	e000      	b.n	80023b8 <HAL_ADC_Init+0x230>
 80023b6:	2200      	movs	r2, #0
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023c8:	4313      	orrs	r3, r2
 80023ca:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d11b      	bne.n	800240e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7e5b      	ldrb	r3, [r3, #25]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	3b01      	subs	r3, #1
 80023e4:	045a      	lsls	r2, r3, #17
 80023e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ee:	663b      	str	r3, [r7, #96]	; 0x60
 80023f0:	e00d      	b.n	800240e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80023fa:	f043 0220 	orr.w	r2, r3, #32
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f043 0201 	orr.w	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	2b01      	cmp	r3, #1
 8002414:	d03a      	beq.n	800248c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a16      	ldr	r2, [pc, #88]	; (8002474 <HAL_ADC_Init+0x2ec>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d004      	beq.n	800242a <HAL_ADC_Init+0x2a2>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <HAL_ADC_Init+0x2f0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d128      	bne.n	800247c <HAL_ADC_Init+0x2f4>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002432:	d012      	beq.n	800245a <HAL_ADC_Init+0x2d2>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800243c:	d00a      	beq.n	8002454 <HAL_ADC_Init+0x2cc>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002446:	d002      	beq.n	800244e <HAL_ADC_Init+0x2c6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	e018      	b.n	8002480 <HAL_ADC_Init+0x2f8>
 800244e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002452:	e015      	b.n	8002480 <HAL_ADC_Init+0x2f8>
 8002454:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002458:	e012      	b.n	8002480 <HAL_ADC_Init+0x2f8>
 800245a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800245e:	e00f      	b.n	8002480 <HAL_ADC_Init+0x2f8>
 8002460:	20000068 	.word	0x20000068
 8002464:	431bde83 	.word	0x431bde83
 8002468:	50000100 	.word	0x50000100
 800246c:	50000300 	.word	0x50000300
 8002470:	50000700 	.word	0x50000700
 8002474:	50000400 	.word	0x50000400
 8002478:	50000500 	.word	0x50000500
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002484:	4313      	orrs	r3, r2
 8002486:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002488:	4313      	orrs	r3, r2
 800248a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d114      	bne.n	80024c4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024a8:	f023 0302 	bic.w	r3, r3, #2
 80024ac:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7e1b      	ldrb	r3, [r3, #24]
 80024b2:	039a      	lsls	r2, r3, #14
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4313      	orrs	r3, r2
 80024be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024c0:	4313      	orrs	r3, r2
 80024c2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_ADC_Init+0x3bc>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80024d4:	430b      	orrs	r3, r1
 80024d6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d10c      	bne.n	80024fa <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f023 010f 	bic.w	r1, r3, #15
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	1e5a      	subs	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
 80024f8:	e007      	b.n	800250a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 020f 	bic.w	r2, r2, #15
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f023 0303 	bic.w	r3, r3, #3
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
 8002520:	e00a      	b.n	8002538 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f023 0312 	bic.w	r3, r3, #18
 800252a:	f043 0210 	orr.w	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002532:	2301      	movs	r3, #1
 8002534:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002538:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800253c:	4618      	mov	r0, r3
 800253e:	3768      	adds	r7, #104	; 0x68
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	fff0c007 	.word	0xfff0c007

08002548 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 8123 	bne.w	80027aa <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_ADC_Start_IT+0x2a>
 800256e:	2302      	movs	r3, #2
 8002570:	e11e      	b.n	80027b0 <HAL_ADC_Start_IT+0x268>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f001 f81e 	bl	80035bc <ADC_Enable>
 8002580:	4603      	mov	r3, r0
 8002582:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 810a 	bne.w	80027a0 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a8:	d004      	beq.n	80025b4 <HAL_ADC_Start_IT+0x6c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a82      	ldr	r2, [pc, #520]	; (80027b8 <HAL_ADC_Start_IT+0x270>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d106      	bne.n	80025c2 <HAL_ADC_Start_IT+0x7a>
 80025b4:	4b81      	ldr	r3, [pc, #516]	; (80027bc <HAL_ADC_Start_IT+0x274>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d010      	beq.n	80025e2 <HAL_ADC_Start_IT+0x9a>
 80025c0:	e005      	b.n	80025ce <HAL_ADC_Start_IT+0x86>
 80025c2:	4b7f      	ldr	r3, [pc, #508]	; (80027c0 <HAL_ADC_Start_IT+0x278>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_ADC_Start_IT+0x9a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025d6:	d004      	beq.n	80025e2 <HAL_ADC_Start_IT+0x9a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a79      	ldr	r2, [pc, #484]	; (80027c4 <HAL_ADC_Start_IT+0x27c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d115      	bne.n	800260e <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d036      	beq.n	800266a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002604:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800260c:	e02d      	b.n	800266a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002622:	d004      	beq.n	800262e <HAL_ADC_Start_IT+0xe6>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a63      	ldr	r2, [pc, #396]	; (80027b8 <HAL_ADC_Start_IT+0x270>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10a      	bne.n	8002644 <HAL_ADC_Start_IT+0xfc>
 800262e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e008      	b.n	8002656 <HAL_ADC_Start_IT+0x10e>
 8002644:	4b5f      	ldr	r3, [pc, #380]	; (80027c4 <HAL_ADC_Start_IT+0x27c>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002662:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002676:	d106      	bne.n	8002686 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267c:	f023 0206 	bic.w	r2, r3, #6
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	645a      	str	r2, [r3, #68]	; 0x44
 8002684:	e002      	b.n	800268c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	221c      	movs	r2, #28
 800269a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d110      	bne.n	80026c6 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0204 	bic.w	r2, r2, #4
 80026b2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0208 	orr.w	r2, r2, #8
 80026c2:	605a      	str	r2, [r3, #4]
          break;
 80026c4:	e008      	b.n	80026d8 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 020c 	orr.w	r2, r2, #12
 80026d4:	605a      	str	r2, [r3, #4]
          break;
 80026d6:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d107      	bne.n	80026f0 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0210 	bic.w	r2, r2, #16
 80026ee:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f8:	d004      	beq.n	8002704 <HAL_ADC_Start_IT+0x1bc>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2e      	ldr	r2, [pc, #184]	; (80027b8 <HAL_ADC_Start_IT+0x270>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d106      	bne.n	8002712 <HAL_ADC_Start_IT+0x1ca>
 8002704:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <HAL_ADC_Start_IT+0x274>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2b00      	cmp	r3, #0
 800270e:	d03e      	beq.n	800278e <HAL_ADC_Start_IT+0x246>
 8002710:	e005      	b.n	800271e <HAL_ADC_Start_IT+0x1d6>
 8002712:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <HAL_ADC_Start_IT+0x278>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2b00      	cmp	r3, #0
 800271c:	d037      	beq.n	800278e <HAL_ADC_Start_IT+0x246>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002726:	d004      	beq.n	8002732 <HAL_ADC_Start_IT+0x1ea>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <HAL_ADC_Start_IT+0x270>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d106      	bne.n	8002740 <HAL_ADC_Start_IT+0x1f8>
 8002732:	4b22      	ldr	r3, [pc, #136]	; (80027bc <HAL_ADC_Start_IT+0x274>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	2b05      	cmp	r3, #5
 800273c:	d027      	beq.n	800278e <HAL_ADC_Start_IT+0x246>
 800273e:	e005      	b.n	800274c <HAL_ADC_Start_IT+0x204>
 8002740:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <HAL_ADC_Start_IT+0x278>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	2b05      	cmp	r3, #5
 800274a:	d020      	beq.n	800278e <HAL_ADC_Start_IT+0x246>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002754:	d004      	beq.n	8002760 <HAL_ADC_Start_IT+0x218>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <HAL_ADC_Start_IT+0x270>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d106      	bne.n	800276e <HAL_ADC_Start_IT+0x226>
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_ADC_Start_IT+0x274>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2b09      	cmp	r3, #9
 800276a:	d010      	beq.n	800278e <HAL_ADC_Start_IT+0x246>
 800276c:	e005      	b.n	800277a <HAL_ADC_Start_IT+0x232>
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_ADC_Start_IT+0x278>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2b09      	cmp	r3, #9
 8002778:	d009      	beq.n	800278e <HAL_ADC_Start_IT+0x246>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002782:	d004      	beq.n	800278e <HAL_ADC_Start_IT+0x246>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <HAL_ADC_Start_IT+0x27c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10f      	bne.n	80027ae <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0204 	orr.w	r2, r2, #4
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	e006      	b.n	80027ae <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027a8:	e001      	b.n	80027ae <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027aa:	2302      	movs	r3, #2
 80027ac:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	50000100 	.word	0x50000100
 80027bc:	50000300 	.word	0x50000300
 80027c0:	50000700 	.word	0x50000700
 80027c4:	50000400 	.word	0x50000400

080027c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d004      	beq.n	800281c <HAL_ADC_IRQHandler+0x38>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10b      	bne.n	8002834 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80bc 	beq.w	80029a0 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80b6 	beq.w	80029a0 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002854:	d004      	beq.n	8002860 <HAL_ADC_IRQHandler+0x7c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a90      	ldr	r2, [pc, #576]	; (8002a9c <HAL_ADC_IRQHandler+0x2b8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d106      	bne.n	800286e <HAL_ADC_IRQHandler+0x8a>
 8002860:	4b8f      	ldr	r3, [pc, #572]	; (8002aa0 <HAL_ADC_IRQHandler+0x2bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	2b00      	cmp	r3, #0
 800286a:	d03e      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 800286c:	e005      	b.n	800287a <HAL_ADC_IRQHandler+0x96>
 800286e:	4b8d      	ldr	r3, [pc, #564]	; (8002aa4 <HAL_ADC_IRQHandler+0x2c0>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2b00      	cmp	r3, #0
 8002878:	d037      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002882:	d004      	beq.n	800288e <HAL_ADC_IRQHandler+0xaa>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a84      	ldr	r2, [pc, #528]	; (8002a9c <HAL_ADC_IRQHandler+0x2b8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d106      	bne.n	800289c <HAL_ADC_IRQHandler+0xb8>
 800288e:	4b84      	ldr	r3, [pc, #528]	; (8002aa0 <HAL_ADC_IRQHandler+0x2bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2b05      	cmp	r3, #5
 8002898:	d027      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 800289a:	e005      	b.n	80028a8 <HAL_ADC_IRQHandler+0xc4>
 800289c:	4b81      	ldr	r3, [pc, #516]	; (8002aa4 <HAL_ADC_IRQHandler+0x2c0>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d020      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b0:	d004      	beq.n	80028bc <HAL_ADC_IRQHandler+0xd8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a79      	ldr	r2, [pc, #484]	; (8002a9c <HAL_ADC_IRQHandler+0x2b8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d106      	bne.n	80028ca <HAL_ADC_IRQHandler+0xe6>
 80028bc:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <HAL_ADC_IRQHandler+0x2bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	2b09      	cmp	r3, #9
 80028c6:	d010      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 80028c8:	e005      	b.n	80028d6 <HAL_ADC_IRQHandler+0xf2>
 80028ca:	4b76      	ldr	r3, [pc, #472]	; (8002aa4 <HAL_ADC_IRQHandler+0x2c0>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d009      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028de:	d004      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a70      	ldr	r2, [pc, #448]	; (8002aa8 <HAL_ADC_IRQHandler+0x2c4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d104      	bne.n	80028f4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	e00f      	b.n	8002914 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028fc:	d004      	beq.n	8002908 <HAL_ADC_IRQHandler+0x124>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a66      	ldr	r2, [pc, #408]	; (8002a9c <HAL_ADC_IRQHandler+0x2b8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d102      	bne.n	800290e <HAL_ADC_IRQHandler+0x12a>
 8002908:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800290c:	e000      	b.n	8002910 <HAL_ADC_IRQHandler+0x12c>
 800290e:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_ADC_IRQHandler+0x2c4>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800291e:	2b00      	cmp	r3, #0
 8002920:	d137      	bne.n	8002992 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002928:	2b00      	cmp	r3, #0
 800292a:	d132      	bne.n	8002992 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02d      	beq.n	8002992 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d11a      	bne.n	800297a <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 020c 	bic.w	r2, r2, #12
 8002952:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d112      	bne.n	8002992 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
 8002978:	e00b      	b.n	8002992 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f043 0210 	orr.w	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7fe ffdc 	bl	8001950 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	220c      	movs	r2, #12
 800299e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <HAL_ADC_IRQHandler+0x1d0>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10b      	bne.n	80029cc <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8138 	beq.w	8002c30 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8132 	beq.w	8002c30 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e0:	d004      	beq.n	80029ec <HAL_ADC_IRQHandler+0x208>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a2d      	ldr	r2, [pc, #180]	; (8002a9c <HAL_ADC_IRQHandler+0x2b8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d106      	bne.n	80029fa <HAL_ADC_IRQHandler+0x216>
 80029ec:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <HAL_ADC_IRQHandler+0x2bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d03e      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x292>
 80029f8:	e005      	b.n	8002a06 <HAL_ADC_IRQHandler+0x222>
 80029fa:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <HAL_ADC_IRQHandler+0x2c0>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d037      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x292>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a0e:	d004      	beq.n	8002a1a <HAL_ADC_IRQHandler+0x236>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <HAL_ADC_IRQHandler+0x2b8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d106      	bne.n	8002a28 <HAL_ADC_IRQHandler+0x244>
 8002a1a:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <HAL_ADC_IRQHandler+0x2bc>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d027      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x292>
 8002a26:	e005      	b.n	8002a34 <HAL_ADC_IRQHandler+0x250>
 8002a28:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <HAL_ADC_IRQHandler+0x2c0>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d020      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x292>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a3c:	d004      	beq.n	8002a48 <HAL_ADC_IRQHandler+0x264>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <HAL_ADC_IRQHandler+0x2b8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d106      	bne.n	8002a56 <HAL_ADC_IRQHandler+0x272>
 8002a48:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_ADC_IRQHandler+0x2bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2b09      	cmp	r3, #9
 8002a52:	d010      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x292>
 8002a54:	e005      	b.n	8002a62 <HAL_ADC_IRQHandler+0x27e>
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <HAL_ADC_IRQHandler+0x2c0>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	2b09      	cmp	r3, #9
 8002a60:	d009      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x292>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a6a:	d004      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x292>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <HAL_ADC_IRQHandler+0x2c4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d104      	bne.n	8002a80 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	e018      	b.n	8002ab2 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a88:	d004      	beq.n	8002a94 <HAL_ADC_IRQHandler+0x2b0>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a03      	ldr	r2, [pc, #12]	; (8002a9c <HAL_ADC_IRQHandler+0x2b8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d10b      	bne.n	8002aac <HAL_ADC_IRQHandler+0x2c8>
 8002a94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a98:	e009      	b.n	8002aae <HAL_ADC_IRQHandler+0x2ca>
 8002a9a:	bf00      	nop
 8002a9c:	50000100 	.word	0x50000100
 8002aa0:	50000300 	.word	0x50000300
 8002aa4:	50000700 	.word	0x50000700
 8002aa8:	50000400 	.word	0x50000400
 8002aac:	4b92      	ldr	r3, [pc, #584]	; (8002cf8 <HAL_ADC_IRQHandler+0x514>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 80b0 	bne.w	8002c22 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00d      	beq.n	8002ae8 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 80a3 	bne.w	8002c22 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f040 809d 	bne.w	8002c22 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8097 	beq.w	8002c22 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002afc:	d004      	beq.n	8002b08 <HAL_ADC_IRQHandler+0x324>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a7e      	ldr	r2, [pc, #504]	; (8002cfc <HAL_ADC_IRQHandler+0x518>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d106      	bne.n	8002b16 <HAL_ADC_IRQHandler+0x332>
 8002b08:	4b7d      	ldr	r3, [pc, #500]	; (8002d00 <HAL_ADC_IRQHandler+0x51c>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d03e      	beq.n	8002b92 <HAL_ADC_IRQHandler+0x3ae>
 8002b14:	e005      	b.n	8002b22 <HAL_ADC_IRQHandler+0x33e>
 8002b16:	4b7b      	ldr	r3, [pc, #492]	; (8002d04 <HAL_ADC_IRQHandler+0x520>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d037      	beq.n	8002b92 <HAL_ADC_IRQHandler+0x3ae>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b2a:	d004      	beq.n	8002b36 <HAL_ADC_IRQHandler+0x352>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a72      	ldr	r2, [pc, #456]	; (8002cfc <HAL_ADC_IRQHandler+0x518>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d106      	bne.n	8002b44 <HAL_ADC_IRQHandler+0x360>
 8002b36:	4b72      	ldr	r3, [pc, #456]	; (8002d00 <HAL_ADC_IRQHandler+0x51c>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d027      	beq.n	8002b92 <HAL_ADC_IRQHandler+0x3ae>
 8002b42:	e005      	b.n	8002b50 <HAL_ADC_IRQHandler+0x36c>
 8002b44:	4b6f      	ldr	r3, [pc, #444]	; (8002d04 <HAL_ADC_IRQHandler+0x520>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2b06      	cmp	r3, #6
 8002b4e:	d020      	beq.n	8002b92 <HAL_ADC_IRQHandler+0x3ae>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b58:	d004      	beq.n	8002b64 <HAL_ADC_IRQHandler+0x380>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a67      	ldr	r2, [pc, #412]	; (8002cfc <HAL_ADC_IRQHandler+0x518>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d106      	bne.n	8002b72 <HAL_ADC_IRQHandler+0x38e>
 8002b64:	4b66      	ldr	r3, [pc, #408]	; (8002d00 <HAL_ADC_IRQHandler+0x51c>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2b07      	cmp	r3, #7
 8002b6e:	d010      	beq.n	8002b92 <HAL_ADC_IRQHandler+0x3ae>
 8002b70:	e005      	b.n	8002b7e <HAL_ADC_IRQHandler+0x39a>
 8002b72:	4b64      	ldr	r3, [pc, #400]	; (8002d04 <HAL_ADC_IRQHandler+0x520>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	2b07      	cmp	r3, #7
 8002b7c:	d009      	beq.n	8002b92 <HAL_ADC_IRQHandler+0x3ae>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b86:	d004      	beq.n	8002b92 <HAL_ADC_IRQHandler+0x3ae>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a5a      	ldr	r2, [pc, #360]	; (8002cf8 <HAL_ADC_IRQHandler+0x514>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d104      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	e00f      	b.n	8002bbc <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba4:	d004      	beq.n	8002bb0 <HAL_ADC_IRQHandler+0x3cc>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a54      	ldr	r2, [pc, #336]	; (8002cfc <HAL_ADC_IRQHandler+0x518>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d102      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0x3d2>
 8002bb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bb4:	e000      	b.n	8002bb8 <HAL_ADC_IRQHandler+0x3d4>
 8002bb6:	4b50      	ldr	r3, [pc, #320]	; (8002cf8 <HAL_ADC_IRQHandler+0x514>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d12d      	bne.n	8002c22 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11a      	bne.n	8002c0a <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002be2:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d112      	bne.n	8002c22 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f043 0201 	orr.w	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40
 8002c08:	e00b      	b.n	8002c22 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f8c4 	bl	8002db0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2260      	movs	r2, #96	; 0x60
 8002c2e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d011      	beq.n	8002c5e <HAL_ADC_IRQHandler+0x47a>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00c      	beq.n	8002c5e <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff fa85 	bl	8002160 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d012      	beq.n	8002c8e <HAL_ADC_IRQHandler+0x4aa>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00d      	beq.n	8002c8e <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f8aa 	bl	8002dd8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c8c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d012      	beq.n	8002cbe <HAL_ADC_IRQHandler+0x4da>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f89c 	bl	8002dec <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cbc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d04f      	beq.n	8002d68 <HAL_ADC_IRQHandler+0x584>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d04a      	beq.n	8002d68 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d102      	bne.n	8002ce0 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	e02d      	b.n	8002d3c <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ce8:	d004      	beq.n	8002cf4 <HAL_ADC_IRQHandler+0x510>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a03      	ldr	r2, [pc, #12]	; (8002cfc <HAL_ADC_IRQHandler+0x518>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d109      	bne.n	8002d08 <HAL_ADC_IRQHandler+0x524>
 8002cf4:	4b02      	ldr	r3, [pc, #8]	; (8002d00 <HAL_ADC_IRQHandler+0x51c>)
 8002cf6:	e008      	b.n	8002d0a <HAL_ADC_IRQHandler+0x526>
 8002cf8:	50000400 	.word	0x50000400
 8002cfc:	50000100 	.word	0x50000100
 8002d00:	50000300 	.word	0x50000300
 8002d04:	50000700 	.word	0x50000700
 8002d08:	4b28      	ldr	r3, [pc, #160]	; (8002dac <HAL_ADC_IRQHandler+0x5c8>)
 8002d0a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d10a      	bne.n	8002d3c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002d26:	2301      	movs	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	e007      	b.n	8002d3c <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002d38:	2301      	movs	r3, #1
 8002d3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d10e      	bne.n	8002d60 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff fa0a 	bl	8002174 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2210      	movs	r2, #16
 8002d66:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d018      	beq.n	8002da4 <HAL_ADC_IRQHandler+0x5c0>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8c:	f043 0208 	orr.w	r2, r3, #8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d9c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f810 	bl	8002dc4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002da4:	bf00      	nop
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	50000700 	.word	0x50000700

08002db0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b09b      	sub	sp, #108	; 0x6c
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x22>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e2ca      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x5b8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f040 82ae 	bne.w	8003396 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d81c      	bhi.n	8002e7c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	461a      	mov	r2, r3
 8002e56:	231f      	movs	r3, #31
 8002e58:	4093      	lsls	r3, r2
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	4019      	ands	r1, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
 8002e7a:	e063      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b09      	cmp	r3, #9
 8002e82:	d81e      	bhi.n	8002ec2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	3b1e      	subs	r3, #30
 8002e98:	221f      	movs	r2, #31
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	4019      	ands	r1, r3
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	3b1e      	subs	r3, #30
 8002eb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec0:	e040      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b0e      	cmp	r3, #14
 8002ec8:	d81e      	bhi.n	8002f08 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	3b3c      	subs	r3, #60	; 0x3c
 8002ede:	221f      	movs	r2, #31
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	4019      	ands	r1, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	3b3c      	subs	r3, #60	; 0x3c
 8002efa:	fa00 f203 	lsl.w	r2, r0, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38
 8002f06:	e01d      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	3b5a      	subs	r3, #90	; 0x5a
 8002f1c:	221f      	movs	r2, #31
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	4019      	ands	r1, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	3b5a      	subs	r3, #90	; 0x5a
 8002f38:	fa00 f203 	lsl.w	r2, r0, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 80e5 	bne.w	800311e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	d91c      	bls.n	8002f96 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6999      	ldr	r1, [r3, #24]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b1e      	subs	r3, #30
 8002f6e:	2207      	movs	r2, #7
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	4019      	ands	r1, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6898      	ldr	r0, [r3, #8]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	3b1e      	subs	r3, #30
 8002f88:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	619a      	str	r2, [r3, #24]
 8002f94:	e019      	b.n	8002fca <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6959      	ldr	r1, [r3, #20]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	2207      	movs	r2, #7
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	4019      	ands	r1, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6898      	ldr	r0, [r3, #8]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	08db      	lsrs	r3, r3, #3
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d84f      	bhi.n	800308c <HAL_ADC_ConfigChannel+0x28c>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <HAL_ADC_ConfigChannel+0x1f4>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	08003027 	.word	0x08003027
 8002ffc:	08003049 	.word	0x08003049
 8003000:	0800306b 	.word	0x0800306b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800300a:	4b9a      	ldr	r3, [pc, #616]	; (8003274 <HAL_ADC_ConfigChannel+0x474>)
 800300c:	4013      	ands	r3, r2
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	0691      	lsls	r1, r2, #26
 8003014:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003016:	430a      	orrs	r2, r1
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003022:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003024:	e07e      	b.n	8003124 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800302c:	4b91      	ldr	r3, [pc, #580]	; (8003274 <HAL_ADC_ConfigChannel+0x474>)
 800302e:	4013      	ands	r3, r2
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	0691      	lsls	r1, r2, #26
 8003036:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003038:	430a      	orrs	r2, r1
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003044:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003046:	e06d      	b.n	8003124 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800304e:	4b89      	ldr	r3, [pc, #548]	; (8003274 <HAL_ADC_ConfigChannel+0x474>)
 8003050:	4013      	ands	r3, r2
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	0691      	lsls	r1, r2, #26
 8003058:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800305a:	430a      	orrs	r2, r1
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003066:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003068:	e05c      	b.n	8003124 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003070:	4b80      	ldr	r3, [pc, #512]	; (8003274 <HAL_ADC_ConfigChannel+0x474>)
 8003072:	4013      	ands	r3, r2
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	0691      	lsls	r1, r2, #26
 800307a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800307c:	430a      	orrs	r2, r1
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003088:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800308a:	e04b      	b.n	8003124 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003092:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	069b      	lsls	r3, r3, #26
 800309c:	429a      	cmp	r2, r3
 800309e:	d107      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030ae:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	069b      	lsls	r3, r3, #26
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d107      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030d2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	069b      	lsls	r3, r3, #26
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d107      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030f6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	069b      	lsls	r3, r3, #26
 8003108:	429a      	cmp	r2, r3
 800310a:	d10a      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800311a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800311c:	e001      	b.n	8003122 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003122:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d108      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x344>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x344>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_ADC_ConfigChannel+0x346>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 8130 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d00f      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	400a      	ands	r2, r1
 800316e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003172:	e049      	b.n	8003208 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2201      	movs	r2, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b09      	cmp	r3, #9
 8003194:	d91c      	bls.n	80031d0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6999      	ldr	r1, [r3, #24]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	3b1b      	subs	r3, #27
 80031a8:	2207      	movs	r2, #7
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	4019      	ands	r1, r3
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6898      	ldr	r0, [r3, #8]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	3b1b      	subs	r3, #27
 80031c2:	fa00 f203 	lsl.w	r2, r0, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	619a      	str	r2, [r3, #24]
 80031ce:	e01b      	b.n	8003208 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6959      	ldr	r1, [r3, #20]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	2207      	movs	r2, #7
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	4019      	ands	r1, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6898      	ldr	r0, [r3, #8]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003210:	d004      	beq.n	800321c <HAL_ADC_ConfigChannel+0x41c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a18      	ldr	r2, [pc, #96]	; (8003278 <HAL_ADC_ConfigChannel+0x478>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x420>
 800321c:	4b17      	ldr	r3, [pc, #92]	; (800327c <HAL_ADC_ConfigChannel+0x47c>)
 800321e:	e000      	b.n	8003222 <HAL_ADC_ConfigChannel+0x422>
 8003220:	4b17      	ldr	r3, [pc, #92]	; (8003280 <HAL_ADC_ConfigChannel+0x480>)
 8003222:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b10      	cmp	r3, #16
 800322a:	d105      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800322c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003234:	2b00      	cmp	r3, #0
 8003236:	d015      	beq.n	8003264 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800323c:	2b11      	cmp	r3, #17
 800323e:	d105      	bne.n	800324c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00b      	beq.n	8003264 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003250:	2b12      	cmp	r3, #18
 8003252:	f040 80ab 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 80a4 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800326c:	d10a      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x484>
 800326e:	4b02      	ldr	r3, [pc, #8]	; (8003278 <HAL_ADC_ConfigChannel+0x478>)
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	e022      	b.n	80032ba <HAL_ADC_ConfigChannel+0x4ba>
 8003274:	83fff000 	.word	0x83fff000
 8003278:	50000100 	.word	0x50000100
 800327c:	50000300 	.word	0x50000300
 8003280:	50000700 	.word	0x50000700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a4e      	ldr	r2, [pc, #312]	; (80033c4 <HAL_ADC_ConfigChannel+0x5c4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d103      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x496>
 800328e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e011      	b.n	80032ba <HAL_ADC_ConfigChannel+0x4ba>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a4b      	ldr	r2, [pc, #300]	; (80033c8 <HAL_ADC_ConfigChannel+0x5c8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d102      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x4a6>
 80032a0:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_ADC_ConfigChannel+0x5cc>)
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	e009      	b.n	80032ba <HAL_ADC_ConfigChannel+0x4ba>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a48      	ldr	r2, [pc, #288]	; (80033cc <HAL_ADC_ConfigChannel+0x5cc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d102      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x4b6>
 80032b0:	4b45      	ldr	r3, [pc, #276]	; (80033c8 <HAL_ADC_ConfigChannel+0x5c8>)
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e001      	b.n	80032ba <HAL_ADC_ConfigChannel+0x4ba>
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d108      	bne.n	80032da <HAL_ADC_ConfigChannel+0x4da>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_ADC_ConfigChannel+0x4da>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_ADC_ConfigChannel+0x4dc>
 80032da:	2300      	movs	r3, #0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d150      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032e0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d010      	beq.n	8003308 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x502>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x502>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_ADC_ConfigChannel+0x504>
 8003302:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003304:	2b00      	cmp	r3, #0
 8003306:	d13c      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b10      	cmp	r3, #16
 800330e:	d11d      	bne.n	800334c <HAL_ADC_ConfigChannel+0x54c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003318:	d118      	bne.n	800334c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800331a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003324:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003326:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_ADC_ConfigChannel+0x5d0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2a      	ldr	r2, [pc, #168]	; (80033d4 <HAL_ADC_ConfigChannel+0x5d4>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	0c9a      	lsrs	r2, r3, #18
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800333c:	e002      	b.n	8003344 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	3b01      	subs	r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f9      	bne.n	800333e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800334a:	e02e      	b.n	80033aa <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b11      	cmp	r3, #17
 8003352:	d10b      	bne.n	800336c <HAL_ADC_ConfigChannel+0x56c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800335c:	d106      	bne.n	800336c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800335e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003368:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800336a:	e01e      	b.n	80033aa <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b12      	cmp	r3, #18
 8003372:	d11a      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800337c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800337e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003380:	e013      	b.n	80033aa <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f043 0220 	orr.w	r2, r3, #32
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003394:	e00a      	b.n	80033ac <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f043 0220 	orr.w	r2, r3, #32
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80033a8:	e000      	b.n	80033ac <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033aa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	376c      	adds	r7, #108	; 0x6c
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	50000100 	.word	0x50000100
 80033c8:	50000400 	.word	0x50000400
 80033cc:	50000500 	.word	0x50000500
 80033d0:	20000068 	.word	0x20000068
 80033d4:	431bde83 	.word	0x431bde83

080033d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80033d8:	b480      	push	{r7}
 80033da:	b099      	sub	sp, #100	; 0x64
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f0:	d102      	bne.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80033f2:	4b6d      	ldr	r3, [pc, #436]	; (80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	e01a      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a6a      	ldr	r2, [pc, #424]	; (80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d103      	bne.n	800340a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003402:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	e011      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a67      	ldr	r2, [pc, #412]	; (80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d102      	bne.n	800341a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003414:	4b66      	ldr	r3, [pc, #408]	; (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	e009      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a64      	ldr	r2, [pc, #400]	; (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d102      	bne.n	800342a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003424:	4b61      	ldr	r3, [pc, #388]	; (80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	e001      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0b0      	b.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003442:	2302      	movs	r3, #2
 8003444:	e0a9      	b.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	f040 808d 	bne.w	8003578 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 8086 	bne.w	8003578 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003474:	d004      	beq.n	8003480 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a4b      	ldr	r2, [pc, #300]	; (80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d101      	bne.n	8003484 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003480:	4b4c      	ldr	r3, [pc, #304]	; (80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003482:	e000      	b.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003484:	4b4c      	ldr	r3, [pc, #304]	; (80035b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003486:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d040      	beq.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034a2:	035b      	lsls	r3, r3, #13
 80034a4:	430b      	orrs	r3, r1
 80034a6:	431a      	orrs	r2, r3
 80034a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034aa:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d108      	bne.n	80034cc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80034cc:	2300      	movs	r3, #0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d15c      	bne.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d107      	bne.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80034ee:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d14b      	bne.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80034f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034fc:	f023 030f 	bic.w	r3, r3, #15
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	6811      	ldr	r1, [r2, #0]
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	6892      	ldr	r2, [r2, #8]
 8003508:	430a      	orrs	r2, r1
 800350a:	431a      	orrs	r2, r3
 800350c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800350e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003510:	e03c      	b.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800351c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d108      	bne.n	800353e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800353e:	2300      	movs	r3, #0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d123      	bne.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d107      	bne.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003560:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003562:	2b00      	cmp	r3, #0
 8003564:	d112      	bne.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800356e:	f023 030f 	bic.w	r3, r3, #15
 8003572:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003574:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003576:	e009      	b.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800358a:	e000      	b.n	800358e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800358c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003596:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800359a:	4618      	mov	r0, r3
 800359c:	3764      	adds	r7, #100	; 0x64
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	50000100 	.word	0x50000100
 80035ac:	50000400 	.word	0x50000400
 80035b0:	50000500 	.word	0x50000500
 80035b4:	50000300 	.word	0x50000300
 80035b8:	50000700 	.word	0x50000700

080035bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d108      	bne.n	80035e8 <ADC_Enable+0x2c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <ADC_Enable+0x2c>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <ADC_Enable+0x2e>
 80035e8:	2300      	movs	r3, #0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d143      	bne.n	8003676 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	4b22      	ldr	r3, [pc, #136]	; (8003680 <ADC_Enable+0xc4>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00d      	beq.n	8003618 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f043 0210 	orr.w	r2, r3, #16
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	f043 0201 	orr.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e02f      	b.n	8003678 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003628:	f7fe fd8e 	bl	8002148 <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800362e:	e01b      	b.n	8003668 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003630:	f7fe fd8a 	bl	8002148 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d914      	bls.n	8003668 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d00d      	beq.n	8003668 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f043 0210 	orr.w	r2, r3, #16
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	f043 0201 	orr.w	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e007      	b.n	8003678 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d1dc      	bne.n	8003630 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	8000003f 	.word	0x8000003f

08003684 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b01      	cmp	r3, #1
 800369c:	d108      	bne.n	80036b0 <ADC_Disable+0x2c>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <ADC_Disable+0x2c>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <ADC_Disable+0x2e>
 80036b0:	2300      	movs	r3, #0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d047      	beq.n	8003746 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 030d 	and.w	r3, r3, #13
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d10f      	bne.n	80036e4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0202 	orr.w	r2, r2, #2
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2203      	movs	r2, #3
 80036da:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80036dc:	f7fe fd34 	bl	8002148 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80036e2:	e029      	b.n	8003738 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f043 0210 	orr.w	r2, r3, #16
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	f043 0201 	orr.w	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e023      	b.n	8003748 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003700:	f7fe fd22 	bl	8002148 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d914      	bls.n	8003738 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d10d      	bne.n	8003738 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f043 0210 	orr.w	r2, r3, #16
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372c:	f043 0201 	orr.w	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e007      	b.n	8003748 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b01      	cmp	r3, #1
 8003744:	d0dc      	beq.n	8003700 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <__NVIC_SetPriorityGrouping+0x44>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800376c:	4013      	ands	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800377c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003782:	4a04      	ldr	r2, [pc, #16]	; (8003794 <__NVIC_SetPriorityGrouping+0x44>)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	60d3      	str	r3, [r2, #12]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000ed00 	.word	0xe000ed00

08003798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <__NVIC_GetPriorityGrouping+0x18>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	f003 0307 	and.w	r3, r3, #7
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	db0b      	blt.n	80037de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	4907      	ldr	r1, [pc, #28]	; (80037ec <__NVIC_EnableIRQ+0x38>)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	2001      	movs	r0, #1
 80037d6:	fa00 f202 	lsl.w	r2, r0, r2
 80037da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	e000e100 	.word	0xe000e100

080037f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003800:	2b00      	cmp	r3, #0
 8003802:	db0a      	blt.n	800381a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	490c      	ldr	r1, [pc, #48]	; (800383c <__NVIC_SetPriority+0x4c>)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	440b      	add	r3, r1
 8003814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003818:	e00a      	b.n	8003830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4908      	ldr	r1, [pc, #32]	; (8003840 <__NVIC_SetPriority+0x50>)
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	3b04      	subs	r3, #4
 8003828:	0112      	lsls	r2, r2, #4
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	440b      	add	r3, r1
 800382e:	761a      	strb	r2, [r3, #24]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000e100 	.word	0xe000e100
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f1c3 0307 	rsb	r3, r3, #7
 800385e:	2b04      	cmp	r3, #4
 8003860:	bf28      	it	cs
 8003862:	2304      	movcs	r3, #4
 8003864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3304      	adds	r3, #4
 800386a:	2b06      	cmp	r3, #6
 800386c:	d902      	bls.n	8003874 <NVIC_EncodePriority+0x30>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3b03      	subs	r3, #3
 8003872:	e000      	b.n	8003876 <NVIC_EncodePriority+0x32>
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003878:	f04f 32ff 	mov.w	r2, #4294967295
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	401a      	ands	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800388c:	f04f 31ff 	mov.w	r1, #4294967295
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	43d9      	mvns	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	4313      	orrs	r3, r2
         );
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3724      	adds	r7, #36	; 0x24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038bc:	d301      	bcc.n	80038c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038be:	2301      	movs	r3, #1
 80038c0:	e00f      	b.n	80038e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <SysTick_Config+0x40>)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ca:	210f      	movs	r1, #15
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	f7ff ff8e 	bl	80037f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <SysTick_Config+0x40>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <SysTick_Config+0x40>)
 80038dc:	2207      	movs	r2, #7
 80038de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	e000e010 	.word	0xe000e010

080038f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ff29 	bl	8003750 <__NVIC_SetPriorityGrouping>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003918:	f7ff ff3e 	bl	8003798 <__NVIC_GetPriorityGrouping>
 800391c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	6978      	ldr	r0, [r7, #20]
 8003924:	f7ff ff8e 	bl	8003844 <NVIC_EncodePriority>
 8003928:	4602      	mov	r2, r0
 800392a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff5d 	bl	80037f0 <__NVIC_SetPriority>
}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	4603      	mov	r3, r0
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff31 	bl	80037b4 <__NVIC_EnableIRQ>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff ffa2 	bl	80038ac <SysTick_Config>
 8003968:	4603      	mov	r3, r0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003980:	2b02      	cmp	r3, #2
 8003982:	d008      	beq.n	8003996 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2204      	movs	r2, #4
 8003988:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e020      	b.n	80039d8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 020e 	bic.w	r2, r2, #14
 80039a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0201 	bic.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	2101      	movs	r1, #1
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d005      	beq.n	8003a06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2204      	movs	r2, #4
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e027      	b.n	8003a56 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 020e 	bic.w	r2, r2, #14
 8003a14:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	2101      	movs	r1, #1
 8003a30:	fa01 f202 	lsl.w	r2, r1, r2
 8003a34:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
    } 
  }
  return status;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a6e:	e154      	b.n	8003d1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	2101      	movs	r1, #1
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8146 	beq.w	8003d14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d005      	beq.n	8003aa0 <HAL_GPIO_Init+0x40>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d130      	bne.n	8003b02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	f003 0201 	and.w	r2, r3, #1
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d017      	beq.n	8003b3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	2203      	movs	r2, #3
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4013      	ands	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d123      	bne.n	8003b92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	08da      	lsrs	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3208      	adds	r2, #8
 8003b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	220f      	movs	r2, #15
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	08da      	lsrs	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3208      	adds	r2, #8
 8003b8c:	6939      	ldr	r1, [r7, #16]
 8003b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 0203 	and.w	r2, r3, #3
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80a0 	beq.w	8003d14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd4:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <HAL_GPIO_Init+0x2d8>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	4a57      	ldr	r2, [pc, #348]	; (8003d38 <HAL_GPIO_Init+0x2d8>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6193      	str	r3, [r2, #24]
 8003be0:	4b55      	ldr	r3, [pc, #340]	; (8003d38 <HAL_GPIO_Init+0x2d8>)
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bec:	4a53      	ldr	r2, [pc, #332]	; (8003d3c <HAL_GPIO_Init+0x2dc>)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	089b      	lsrs	r3, r3, #2
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	220f      	movs	r2, #15
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c16:	d019      	beq.n	8003c4c <HAL_GPIO_Init+0x1ec>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a49      	ldr	r2, [pc, #292]	; (8003d40 <HAL_GPIO_Init+0x2e0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d013      	beq.n	8003c48 <HAL_GPIO_Init+0x1e8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a48      	ldr	r2, [pc, #288]	; (8003d44 <HAL_GPIO_Init+0x2e4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00d      	beq.n	8003c44 <HAL_GPIO_Init+0x1e4>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a47      	ldr	r2, [pc, #284]	; (8003d48 <HAL_GPIO_Init+0x2e8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <HAL_GPIO_Init+0x1e0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a46      	ldr	r2, [pc, #280]	; (8003d4c <HAL_GPIO_Init+0x2ec>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d101      	bne.n	8003c3c <HAL_GPIO_Init+0x1dc>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	e008      	b.n	8003c4e <HAL_GPIO_Init+0x1ee>
 8003c3c:	2305      	movs	r3, #5
 8003c3e:	e006      	b.n	8003c4e <HAL_GPIO_Init+0x1ee>
 8003c40:	2303      	movs	r3, #3
 8003c42:	e004      	b.n	8003c4e <HAL_GPIO_Init+0x1ee>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e002      	b.n	8003c4e <HAL_GPIO_Init+0x1ee>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_GPIO_Init+0x1ee>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	f002 0203 	and.w	r2, r2, #3
 8003c54:	0092      	lsls	r2, r2, #2
 8003c56:	4093      	lsls	r3, r2
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c5e:	4937      	ldr	r1, [pc, #220]	; (8003d3c <HAL_GPIO_Init+0x2dc>)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	089b      	lsrs	r3, r3, #2
 8003c64:	3302      	adds	r3, #2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c6c:	4b38      	ldr	r3, [pc, #224]	; (8003d50 <HAL_GPIO_Init+0x2f0>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c90:	4a2f      	ldr	r2, [pc, #188]	; (8003d50 <HAL_GPIO_Init+0x2f0>)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c96:	4b2e      	ldr	r3, [pc, #184]	; (8003d50 <HAL_GPIO_Init+0x2f0>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003cba:	4a25      	ldr	r2, [pc, #148]	; (8003d50 <HAL_GPIO_Init+0x2f0>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cc0:	4b23      	ldr	r3, [pc, #140]	; (8003d50 <HAL_GPIO_Init+0x2f0>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ce4:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <HAL_GPIO_Init+0x2f0>)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cea:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <HAL_GPIO_Init+0x2f0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d0e:	4a10      	ldr	r2, [pc, #64]	; (8003d50 <HAL_GPIO_Init+0x2f0>)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	3301      	adds	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f47f aea3 	bne.w	8003a70 <HAL_GPIO_Init+0x10>
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	48000400 	.word	0x48000400
 8003d44:	48000800 	.word	0x48000800
 8003d48:	48000c00 	.word	0x48000c00
 8003d4c:	48001000 	.word	0x48001000
 8003d50:	40010400 	.word	0x40010400

08003d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
 8003d60:	4613      	mov	r3, r2
 8003d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d64:	787b      	ldrb	r3, [r7, #1]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d70:	e002      	b.n	8003d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d96:	887a      	ldrh	r2, [r7, #2]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	041a      	lsls	r2, r3, #16
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	43d9      	mvns	r1, r3
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	400b      	ands	r3, r1
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	619a      	str	r2, [r3, #24]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003dc2:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d006      	beq.n	8003ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dce:	4a05      	ldr	r2, [pc, #20]	; (8003de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dd4:	88fb      	ldrh	r3, [r7, #6]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fd fc98 	bl	800170c <HAL_GPIO_EXTI_Callback>
  }
}
 8003ddc:	bf00      	nop
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40010400 	.word	0x40010400

08003de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e081      	b.n	8003efe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd fe48 	bl	8001aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2224      	movs	r2, #36	; 0x24
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0201 	bic.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d107      	bne.n	8003e62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	e006      	b.n	8003e70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d104      	bne.n	8003e82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ea4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69d9      	ldr	r1, [r3, #28]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1a      	ldr	r2, [r3, #32]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d138      	bne.n	8003f8e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e032      	b.n	8003f90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2224      	movs	r2, #36	; 0x24
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f58:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6819      	ldr	r1, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e000      	b.n	8003f90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f8e:	2302      	movs	r3, #2
  }
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d139      	bne.n	8004026 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e033      	b.n	8004028 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2224      	movs	r2, #36	; 0x24
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e000      	b.n	8004028 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
  }
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004036:	b08b      	sub	sp, #44	; 0x2c
 8004038:	af06      	add	r7, sp, #24
 800403a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e0c4      	b.n	80041d0 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd fe6c 	bl	8001d38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2203      	movs	r2, #3
 8004064:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f003 ffaa 	bl	8007fc6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004072:	2300      	movs	r3, #0
 8004074:	73fb      	strb	r3, [r7, #15]
 8004076:	e040      	b.n	80040fa <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	440b      	add	r3, r1
 8004088:	3301      	adds	r3, #1
 800408a:	2201      	movs	r2, #1
 800408c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	440b      	add	r3, r1
 800409e:	7bfa      	ldrb	r2, [r7, #15]
 80040a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	440b      	add	r3, r1
 80040b2:	3303      	adds	r3, #3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040b8:	7bfa      	ldrb	r2, [r7, #15]
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	440b      	add	r3, r1
 80040c6:	3338      	adds	r3, #56	; 0x38
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040cc:	7bfa      	ldrb	r2, [r7, #15]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	440b      	add	r3, r1
 80040da:	333c      	adds	r3, #60	; 0x3c
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040e0:	7bfa      	ldrb	r2, [r7, #15]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	440b      	add	r3, r1
 80040ee:	3340      	adds	r3, #64	; 0x40
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	3301      	adds	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
 80040fa:	7bfa      	ldrb	r2, [r7, #15]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	429a      	cmp	r2, r3
 8004102:	d3b9      	bcc.n	8004078 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004104:	2300      	movs	r3, #0
 8004106:	73fb      	strb	r3, [r7, #15]
 8004108:	e044      	b.n	8004194 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800410a:	7bfa      	ldrb	r2, [r7, #15]
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	440b      	add	r3, r1
 8004118:	f203 1369 	addw	r3, r3, #361	; 0x169
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004120:	7bfa      	ldrb	r2, [r7, #15]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	440b      	add	r3, r1
 800412e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004132:	7bfa      	ldrb	r2, [r7, #15]
 8004134:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004136:	7bfa      	ldrb	r2, [r7, #15]
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	440b      	add	r3, r1
 8004144:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800414c:	7bfa      	ldrb	r2, [r7, #15]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	440b      	add	r3, r1
 800415a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004162:	7bfa      	ldrb	r2, [r7, #15]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	440b      	add	r3, r1
 8004170:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004178:	7bfa      	ldrb	r2, [r7, #15]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	440b      	add	r3, r1
 8004186:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	3301      	adds	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	429a      	cmp	r2, r3
 800419c:	d3b5      	bcc.n	800410a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	687e      	ldr	r6, [r7, #4]
 80041a6:	466d      	mov	r5, sp
 80041a8:	f106 0410 	add.w	r4, r6, #16
 80041ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	602b      	str	r3, [r5, #0]
 80041b4:	1d33      	adds	r3, r6, #4
 80041b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041b8:	6838      	ldr	r0, [r7, #0]
 80041ba:	f003 ff1f 	bl	8007ffc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80041de:	af00      	add	r7, sp, #0
 80041e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f001 b823 	b.w	8005244 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 817d 	beq.w	800450e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004214:	4bbc      	ldr	r3, [pc, #752]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f003 030c 	and.w	r3, r3, #12
 800421c:	2b04      	cmp	r3, #4
 800421e:	d00c      	beq.n	800423a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004220:	4bb9      	ldr	r3, [pc, #740]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 030c 	and.w	r3, r3, #12
 8004228:	2b08      	cmp	r3, #8
 800422a:	d15c      	bne.n	80042e6 <HAL_RCC_OscConfig+0x10e>
 800422c:	4bb6      	ldr	r3, [pc, #728]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004238:	d155      	bne.n	80042e6 <HAL_RCC_OscConfig+0x10e>
 800423a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800423e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004242:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004246:	fa93 f3a3 	rbit	r3, r3
 800424a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800424e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004252:	fab3 f383 	clz	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d102      	bne.n	800426c <HAL_RCC_OscConfig+0x94>
 8004266:	4ba8      	ldr	r3, [pc, #672]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	e015      	b.n	8004298 <HAL_RCC_OscConfig+0xc0>
 800426c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004270:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004274:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004284:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004288:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800428c:	fa93 f3a3 	rbit	r3, r3
 8004290:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004294:	4b9c      	ldr	r3, [pc, #624]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800429c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80042a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80042a4:	fa92 f2a2 	rbit	r2, r2
 80042a8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80042ac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80042b0:	fab2 f282 	clz	r2, r2
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	f042 0220 	orr.w	r2, r2, #32
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	f002 021f 	and.w	r2, r2, #31
 80042c0:	2101      	movs	r1, #1
 80042c2:	fa01 f202 	lsl.w	r2, r1, r2
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 811f 	beq.w	800450c <HAL_RCC_OscConfig+0x334>
 80042ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f040 8116 	bne.w	800450c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f000 bfaf 	b.w	8005244 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f6:	d106      	bne.n	8004306 <HAL_RCC_OscConfig+0x12e>
 80042f8:	4b83      	ldr	r3, [pc, #524]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a82      	ldr	r2, [pc, #520]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 80042fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	e036      	b.n	8004374 <HAL_RCC_OscConfig+0x19c>
 8004306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10c      	bne.n	8004330 <HAL_RCC_OscConfig+0x158>
 8004316:	4b7c      	ldr	r3, [pc, #496]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a7b      	ldr	r2, [pc, #492]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 800431c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4b79      	ldr	r3, [pc, #484]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a78      	ldr	r2, [pc, #480]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e021      	b.n	8004374 <HAL_RCC_OscConfig+0x19c>
 8004330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x184>
 8004342:	4b71      	ldr	r3, [pc, #452]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a70      	ldr	r2, [pc, #448]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4b6e      	ldr	r3, [pc, #440]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6d      	ldr	r2, [pc, #436]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0x19c>
 800435c:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a69      	ldr	r2, [pc, #420]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b67      	ldr	r3, [pc, #412]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a66      	ldr	r2, [pc, #408]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 800436e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004372:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004374:	4b64      	ldr	r3, [pc, #400]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	f023 020f 	bic.w	r2, r3, #15
 800437c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	495f      	ldr	r1, [pc, #380]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 800438a:	4313      	orrs	r3, r2
 800438c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800438e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d059      	beq.n	8004452 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439e:	f7fd fed3 	bl	8002148 <HAL_GetTick>
 80043a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a6:	e00a      	b.n	80043be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fd fece 	bl	8002148 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b64      	cmp	r3, #100	; 0x64
 80043b6:	d902      	bls.n	80043be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	f000 bf43 	b.w	8005244 <HAL_RCC_OscConfig+0x106c>
 80043be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80043d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d6:	fab3 f383 	clz	r3, r3
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d102      	bne.n	80043f0 <HAL_RCC_OscConfig+0x218>
 80043ea:	4b47      	ldr	r3, [pc, #284]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	e015      	b.n	800441c <HAL_RCC_OscConfig+0x244>
 80043f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80043fc:	fa93 f3a3 	rbit	r3, r3
 8004400:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004404:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004408:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800440c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004410:	fa93 f3a3 	rbit	r3, r3
 8004414:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004418:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004420:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004424:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004428:	fa92 f2a2 	rbit	r2, r2
 800442c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004430:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004434:	fab2 f282 	clz	r2, r2
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	f042 0220 	orr.w	r2, r2, #32
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	f002 021f 	and.w	r2, r2, #31
 8004444:	2101      	movs	r1, #1
 8004446:	fa01 f202 	lsl.w	r2, r1, r2
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0ab      	beq.n	80043a8 <HAL_RCC_OscConfig+0x1d0>
 8004450:	e05d      	b.n	800450e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004452:	f7fd fe79 	bl	8002148 <HAL_GetTick>
 8004456:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445a:	e00a      	b.n	8004472 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800445c:	f7fd fe74 	bl	8002148 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b64      	cmp	r3, #100	; 0x64
 800446a:	d902      	bls.n	8004472 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	f000 bee9 	b.w	8005244 <HAL_RCC_OscConfig+0x106c>
 8004472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004476:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800447e:	fa93 f3a3 	rbit	r3, r3
 8004482:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004486:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448a:	fab3 f383 	clz	r3, r3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	b2db      	uxtb	r3, r3
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d102      	bne.n	80044a4 <HAL_RCC_OscConfig+0x2cc>
 800449e:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	e015      	b.n	80044d0 <HAL_RCC_OscConfig+0x2f8>
 80044a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044a8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80044b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80044c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80044cc:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <HAL_RCC_OscConfig+0x330>)
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044d4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80044d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80044dc:	fa92 f2a2 	rbit	r2, r2
 80044e0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80044e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80044e8:	fab2 f282 	clz	r2, r2
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	f042 0220 	orr.w	r2, r2, #32
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	f002 021f 	and.w	r2, r2, #31
 80044f8:	2101      	movs	r1, #1
 80044fa:	fa01 f202 	lsl.w	r2, r1, r2
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1ab      	bne.n	800445c <HAL_RCC_OscConfig+0x284>
 8004504:	e003      	b.n	800450e <HAL_RCC_OscConfig+0x336>
 8004506:	bf00      	nop
 8004508:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 817d 	beq.w	800481e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004524:	4ba6      	ldr	r3, [pc, #664]	; (80047c0 <HAL_RCC_OscConfig+0x5e8>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004530:	4ba3      	ldr	r3, [pc, #652]	; (80047c0 <HAL_RCC_OscConfig+0x5e8>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b08      	cmp	r3, #8
 800453a:	d172      	bne.n	8004622 <HAL_RCC_OscConfig+0x44a>
 800453c:	4ba0      	ldr	r3, [pc, #640]	; (80047c0 <HAL_RCC_OscConfig+0x5e8>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d16c      	bne.n	8004622 <HAL_RCC_OscConfig+0x44a>
 8004548:	2302      	movs	r3, #2
 800454a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800455a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d102      	bne.n	8004578 <HAL_RCC_OscConfig+0x3a0>
 8004572:	4b93      	ldr	r3, [pc, #588]	; (80047c0 <HAL_RCC_OscConfig+0x5e8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	e013      	b.n	80045a0 <HAL_RCC_OscConfig+0x3c8>
 8004578:	2302      	movs	r3, #2
 800457a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004582:	fa93 f3a3 	rbit	r3, r3
 8004586:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800458a:	2302      	movs	r3, #2
 800458c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004590:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004594:	fa93 f3a3 	rbit	r3, r3
 8004598:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800459c:	4b88      	ldr	r3, [pc, #544]	; (80047c0 <HAL_RCC_OscConfig+0x5e8>)
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	2202      	movs	r2, #2
 80045a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80045a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80045aa:	fa92 f2a2 	rbit	r2, r2
 80045ae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80045b2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80045b6:	fab2 f282 	clz	r2, r2
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	f042 0220 	orr.w	r2, r2, #32
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	f002 021f 	and.w	r2, r2, #31
 80045c6:	2101      	movs	r1, #1
 80045c8:	fa01 f202 	lsl.w	r2, r1, r2
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCC_OscConfig+0x410>
 80045d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d002      	beq.n	80045e8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	f000 be2e 	b.w	8005244 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e8:	4b75      	ldr	r3, [pc, #468]	; (80047c0 <HAL_RCC_OscConfig+0x5e8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	21f8      	movs	r1, #248	; 0xf8
 80045fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004606:	fa91 f1a1 	rbit	r1, r1
 800460a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800460e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004612:	fab1 f181 	clz	r1, r1
 8004616:	b2c9      	uxtb	r1, r1
 8004618:	408b      	lsls	r3, r1
 800461a:	4969      	ldr	r1, [pc, #420]	; (80047c0 <HAL_RCC_OscConfig+0x5e8>)
 800461c:	4313      	orrs	r3, r2
 800461e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004620:	e0fd      	b.n	800481e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 8088 	beq.w	8004744 <HAL_RCC_OscConfig+0x56c>
 8004634:	2301      	movs	r3, #1
 8004636:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800463e:	fa93 f3a3 	rbit	r3, r3
 8004642:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004646:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800464a:	fab3 f383 	clz	r3, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	461a      	mov	r2, r3
 800465c:	2301      	movs	r3, #1
 800465e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004660:	f7fd fd72 	bl	8002148 <HAL_GetTick>
 8004664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004668:	e00a      	b.n	8004680 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800466a:	f7fd fd6d 	bl	8002148 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d902      	bls.n	8004680 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	f000 bde2 	b.w	8005244 <HAL_RCC_OscConfig+0x106c>
 8004680:	2302      	movs	r3, #2
 8004682:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004686:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800468a:	fa93 f3a3 	rbit	r3, r3
 800468e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004692:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	b2db      	uxtb	r3, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d102      	bne.n	80046b0 <HAL_RCC_OscConfig+0x4d8>
 80046aa:	4b45      	ldr	r3, [pc, #276]	; (80047c0 <HAL_RCC_OscConfig+0x5e8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	e013      	b.n	80046d8 <HAL_RCC_OscConfig+0x500>
 80046b0:	2302      	movs	r3, #2
 80046b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80046c2:	2302      	movs	r3, #2
 80046c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80046c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80046cc:	fa93 f3a3 	rbit	r3, r3
 80046d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80046d4:	4b3a      	ldr	r3, [pc, #232]	; (80047c0 <HAL_RCC_OscConfig+0x5e8>)
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2202      	movs	r2, #2
 80046da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80046de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80046e2:	fa92 f2a2 	rbit	r2, r2
 80046e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80046ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80046ee:	fab2 f282 	clz	r2, r2
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	f042 0220 	orr.w	r2, r2, #32
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	f002 021f 	and.w	r2, r2, #31
 80046fe:	2101      	movs	r1, #1
 8004700:	fa01 f202 	lsl.w	r2, r1, r2
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0af      	beq.n	800466a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470a:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <HAL_RCC_OscConfig+0x5e8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	21f8      	movs	r1, #248	; 0xf8
 8004720:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004724:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004728:	fa91 f1a1 	rbit	r1, r1
 800472c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004730:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004734:	fab1 f181 	clz	r1, r1
 8004738:	b2c9      	uxtb	r1, r1
 800473a:	408b      	lsls	r3, r1
 800473c:	4920      	ldr	r1, [pc, #128]	; (80047c0 <HAL_RCC_OscConfig+0x5e8>)
 800473e:	4313      	orrs	r3, r2
 8004740:	600b      	str	r3, [r1, #0]
 8004742:	e06c      	b.n	800481e <HAL_RCC_OscConfig+0x646>
 8004744:	2301      	movs	r3, #1
 8004746:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800474e:	fa93 f3a3 	rbit	r3, r3
 8004752:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004756:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800475a:	fab3 f383 	clz	r3, r3
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004764:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	461a      	mov	r2, r3
 800476c:	2300      	movs	r3, #0
 800476e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fd fcea 	bl	8002148 <HAL_GetTick>
 8004774:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004778:	e00a      	b.n	8004790 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800477a:	f7fd fce5 	bl	8002148 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d902      	bls.n	8004790 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	f000 bd5a 	b.w	8005244 <HAL_RCC_OscConfig+0x106c>
 8004790:	2302      	movs	r3, #2
 8004792:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004796:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800479a:	fa93 f3a3 	rbit	r3, r3
 800479e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80047a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a6:	fab3 f383 	clz	r3, r3
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d104      	bne.n	80047c4 <HAL_RCC_OscConfig+0x5ec>
 80047ba:	4b01      	ldr	r3, [pc, #4]	; (80047c0 <HAL_RCC_OscConfig+0x5e8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	e015      	b.n	80047ec <HAL_RCC_OscConfig+0x614>
 80047c0:	40021000 	.word	0x40021000
 80047c4:	2302      	movs	r3, #2
 80047c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80047d6:	2302      	movs	r3, #2
 80047d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047e0:	fa93 f3a3 	rbit	r3, r3
 80047e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80047e8:	4bc8      	ldr	r3, [pc, #800]	; (8004b0c <HAL_RCC_OscConfig+0x934>)
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2202      	movs	r2, #2
 80047ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80047f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80047f6:	fa92 f2a2 	rbit	r2, r2
 80047fa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80047fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004802:	fab2 f282 	clz	r2, r2
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	f042 0220 	orr.w	r2, r2, #32
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	f002 021f 	and.w	r2, r2, #31
 8004812:	2101      	movs	r1, #1
 8004814:	fa01 f202 	lsl.w	r2, r1, r2
 8004818:	4013      	ands	r3, r2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1ad      	bne.n	800477a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8110 	beq.w	8004a54 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004838:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d079      	beq.n	8004938 <HAL_RCC_OscConfig+0x760>
 8004844:	2301      	movs	r3, #1
 8004846:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800484e:	fa93 f3a3 	rbit	r3, r3
 8004852:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800485a:	fab3 f383 	clz	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	4bab      	ldr	r3, [pc, #684]	; (8004b10 <HAL_RCC_OscConfig+0x938>)
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	461a      	mov	r2, r3
 800486a:	2301      	movs	r3, #1
 800486c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486e:	f7fd fc6b 	bl	8002148 <HAL_GetTick>
 8004872:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004876:	e00a      	b.n	800488e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004878:	f7fd fc66 	bl	8002148 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d902      	bls.n	800488e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	f000 bcdb 	b.w	8005244 <HAL_RCC_OscConfig+0x106c>
 800488e:	2302      	movs	r3, #2
 8004890:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004894:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004898:	fa93 f3a3 	rbit	r3, r3
 800489c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80048a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80048a8:	2202      	movs	r2, #2
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	fa93 f2a3 	rbit	r2, r3
 80048ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048cc:	2202      	movs	r2, #2
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	fa93 f2a3 	rbit	r2, r3
 80048de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e8:	4b88      	ldr	r3, [pc, #544]	; (8004b0c <HAL_RCC_OscConfig+0x934>)
 80048ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80048f4:	2102      	movs	r1, #2
 80048f6:	6019      	str	r1, [r3, #0]
 80048f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	fa93 f1a3 	rbit	r1, r3
 8004906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800490a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800490e:	6019      	str	r1, [r3, #0]
  return result;
 8004910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004914:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	fab3 f383 	clz	r3, r3
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	2101      	movs	r1, #1
 800492c:	fa01 f303 	lsl.w	r3, r1, r3
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0a0      	beq.n	8004878 <HAL_RCC_OscConfig+0x6a0>
 8004936:	e08d      	b.n	8004a54 <HAL_RCC_OscConfig+0x87c>
 8004938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004940:	2201      	movs	r2, #1
 8004942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004948:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	fa93 f2a3 	rbit	r2, r3
 8004952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004956:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800495a:	601a      	str	r2, [r3, #0]
  return result;
 800495c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004960:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004964:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	4b68      	ldr	r3, [pc, #416]	; (8004b10 <HAL_RCC_OscConfig+0x938>)
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	461a      	mov	r2, r3
 8004976:	2300      	movs	r3, #0
 8004978:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497a:	f7fd fbe5 	bl	8002148 <HAL_GetTick>
 800497e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004982:	e00a      	b.n	800499a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004984:	f7fd fbe0 	bl	8002148 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d902      	bls.n	800499a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	f000 bc55 	b.w	8005244 <HAL_RCC_OscConfig+0x106c>
 800499a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80049a2:	2202      	movs	r2, #2
 80049a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	fa93 f2a3 	rbit	r2, r3
 80049b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049c6:	2202      	movs	r2, #2
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	fa93 f2a3 	rbit	r2, r3
 80049d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049ea:	2202      	movs	r2, #2
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	fa93 f2a3 	rbit	r2, r3
 80049fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004a04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a06:	4b41      	ldr	r3, [pc, #260]	; (8004b0c <HAL_RCC_OscConfig+0x934>)
 8004a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a12:	2102      	movs	r1, #2
 8004a14:	6019      	str	r1, [r3, #0]
 8004a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	fa93 f1a3 	rbit	r1, r3
 8004a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a28:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a2c:	6019      	str	r1, [r3, #0]
  return result;
 8004a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a32:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	fab3 f383 	clz	r3, r3
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	2101      	movs	r1, #1
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d197      	bne.n	8004984 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 81a1 	beq.w	8004dac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a70:	4b26      	ldr	r3, [pc, #152]	; (8004b0c <HAL_RCC_OscConfig+0x934>)
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d116      	bne.n	8004aaa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a7c:	4b23      	ldr	r3, [pc, #140]	; (8004b0c <HAL_RCC_OscConfig+0x934>)
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	4a22      	ldr	r2, [pc, #136]	; (8004b0c <HAL_RCC_OscConfig+0x934>)
 8004a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a86:	61d3      	str	r3, [r2, #28]
 8004a88:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_RCC_OscConfig+0x934>)
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a94:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004aa2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aaa:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <HAL_RCC_OscConfig+0x93c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d11a      	bne.n	8004aec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ab6:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <HAL_RCC_OscConfig+0x93c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <HAL_RCC_OscConfig+0x93c>)
 8004abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ac2:	f7fd fb41 	bl	8002148 <HAL_GetTick>
 8004ac6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aca:	e009      	b.n	8004ae0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004acc:	f7fd fb3c 	bl	8002148 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b64      	cmp	r3, #100	; 0x64
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e3b1      	b.n	8005244 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <HAL_RCC_OscConfig+0x93c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ef      	beq.n	8004acc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d10d      	bne.n	8004b18 <HAL_RCC_OscConfig+0x940>
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <HAL_RCC_OscConfig+0x934>)
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	4a02      	ldr	r2, [pc, #8]	; (8004b0c <HAL_RCC_OscConfig+0x934>)
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	6213      	str	r3, [r2, #32]
 8004b08:	e03c      	b.n	8004b84 <HAL_RCC_OscConfig+0x9ac>
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	10908120 	.word	0x10908120
 8004b14:	40007000 	.word	0x40007000
 8004b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10c      	bne.n	8004b42 <HAL_RCC_OscConfig+0x96a>
 8004b28:	4bc1      	ldr	r3, [pc, #772]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	4ac0      	ldr	r2, [pc, #768]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	6213      	str	r3, [r2, #32]
 8004b34:	4bbe      	ldr	r3, [pc, #760]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	4abd      	ldr	r2, [pc, #756]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004b3a:	f023 0304 	bic.w	r3, r3, #4
 8004b3e:	6213      	str	r3, [r2, #32]
 8004b40:	e020      	b.n	8004b84 <HAL_RCC_OscConfig+0x9ac>
 8004b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b05      	cmp	r3, #5
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x994>
 8004b52:	4bb7      	ldr	r3, [pc, #732]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	4ab6      	ldr	r2, [pc, #728]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004b58:	f043 0304 	orr.w	r3, r3, #4
 8004b5c:	6213      	str	r3, [r2, #32]
 8004b5e:	4bb4      	ldr	r3, [pc, #720]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	4ab3      	ldr	r2, [pc, #716]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	6213      	str	r3, [r2, #32]
 8004b6a:	e00b      	b.n	8004b84 <HAL_RCC_OscConfig+0x9ac>
 8004b6c:	4bb0      	ldr	r3, [pc, #704]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	4aaf      	ldr	r2, [pc, #700]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	6213      	str	r3, [r2, #32]
 8004b78:	4bad      	ldr	r3, [pc, #692]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	4aac      	ldr	r2, [pc, #688]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004b7e:	f023 0304 	bic.w	r3, r3, #4
 8004b82:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 8081 	beq.w	8004c98 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b96:	f7fd fad7 	bl	8002148 <HAL_GetTick>
 8004b9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9e:	e00b      	b.n	8004bb8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba0:	f7fd fad2 	bl	8002148 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e345      	b.n	8005244 <HAL_RCC_OscConfig+0x106c>
 8004bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bbc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	fa93 f2a3 	rbit	r2, r3
 8004bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004be4:	2202      	movs	r2, #2
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	fa93 f2a3 	rbit	r2, r3
 8004bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004bfe:	601a      	str	r2, [r3, #0]
  return result;
 8004c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c04:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0a:	fab3 f383 	clz	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f043 0302 	orr.w	r3, r3, #2
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d102      	bne.n	8004c24 <HAL_RCC_OscConfig+0xa4c>
 8004c1e:	4b84      	ldr	r3, [pc, #528]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	e013      	b.n	8004c4c <HAL_RCC_OscConfig+0xa74>
 8004c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c28:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	fa93 f2a3 	rbit	r2, r3
 8004c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c42:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	4b79      	ldr	r3, [pc, #484]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c50:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004c54:	2102      	movs	r1, #2
 8004c56:	6011      	str	r1, [r2, #0]
 8004c58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	fa92 f1a2 	rbit	r1, r2
 8004c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c6a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004c6e:	6011      	str	r1, [r2, #0]
  return result;
 8004c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c74:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	fab2 f282 	clz	r2, r2
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	f002 021f 	and.w	r2, r2, #31
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d084      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x9c8>
 8004c96:	e07f      	b.n	8004d98 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c98:	f7fd fa56 	bl	8002148 <HAL_GetTick>
 8004c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca0:	e00b      	b.n	8004cba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fd fa51 	bl	8002148 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e2c4      	b.n	8005244 <HAL_RCC_OscConfig+0x106c>
 8004cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cbe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	fa93 f2a3 	rbit	r2, r3
 8004cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	fa93 f2a3 	rbit	r2, r3
 8004cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d00:	601a      	str	r2, [r3, #0]
  return result;
 8004d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d06:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d0c:	fab3 f383 	clz	r3, r3
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	f043 0302 	orr.w	r3, r3, #2
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d102      	bne.n	8004d26 <HAL_RCC_OscConfig+0xb4e>
 8004d20:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	e013      	b.n	8004d4e <HAL_RCC_OscConfig+0xb76>
 8004d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d2e:	2202      	movs	r2, #2
 8004d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	fa93 f2a3 	rbit	r2, r3
 8004d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d44:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	4b39      	ldr	r3, [pc, #228]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d52:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004d56:	2102      	movs	r1, #2
 8004d58:	6011      	str	r1, [r2, #0]
 8004d5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d5e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	fa92 f1a2 	rbit	r1, r2
 8004d68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d6c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004d70:	6011      	str	r1, [r2, #0]
  return result;
 8004d72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d76:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004d7a:	6812      	ldr	r2, [r2, #0]
 8004d7c:	fab2 f282 	clz	r2, r2
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	f002 021f 	and.w	r2, r2, #31
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d184      	bne.n	8004ca2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d98:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d105      	bne.n	8004dac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da0:	4b23      	ldr	r3, [pc, #140]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	4a22      	ldr	r2, [pc, #136]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004daa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8242 	beq.w	8005242 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dbe:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <HAL_RCC_OscConfig+0xc58>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	f000 8213 	beq.w	80051f2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	f040 8162 	bne.w	80050a2 <HAL_RCC_OscConfig+0xeca>
 8004dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004de6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	fa93 f2a3 	rbit	r2, r3
 8004dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e02:	601a      	str	r2, [r3, #0]
  return result;
 8004e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e08:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e0c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0e:	fab3 f383 	clz	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2300      	movs	r3, #0
 8004e22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e24:	f7fd f990 	bl	8002148 <HAL_GetTick>
 8004e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e2c:	e00c      	b.n	8004e48 <HAL_RCC_OscConfig+0xc70>
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e34:	f7fd f988 	bl	8002148 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e1fd      	b.n	8005244 <HAL_RCC_OscConfig+0x106c>
 8004e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	fa93 f2a3 	rbit	r2, r3
 8004e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e68:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004e6c:	601a      	str	r2, [r3, #0]
  return result;
 8004e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e72:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004e76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e78:	fab3 f383 	clz	r3, r3
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d102      	bne.n	8004e92 <HAL_RCC_OscConfig+0xcba>
 8004e8c:	4bb0      	ldr	r3, [pc, #704]	; (8005150 <HAL_RCC_OscConfig+0xf78>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	e027      	b.n	8004ee2 <HAL_RCC_OscConfig+0xd0a>
 8004e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e96:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004e9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	fa93 f2a3 	rbit	r2, r3
 8004eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ebc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004ec0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	fa93 f2a3 	rbit	r2, r3
 8004ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	4b9c      	ldr	r3, [pc, #624]	; (8005150 <HAL_RCC_OscConfig+0xf78>)
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ee6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004eea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004eee:	6011      	str	r1, [r2, #0]
 8004ef0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ef4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	fa92 f1a2 	rbit	r1, r2
 8004efe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f02:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f06:	6011      	str	r1, [r2, #0]
  return result;
 8004f08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f0c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	fab2 f282 	clz	r2, r2
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	f042 0220 	orr.w	r2, r2, #32
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	f002 021f 	and.w	r2, r2, #31
 8004f22:	2101      	movs	r1, #1
 8004f24:	fa01 f202 	lsl.w	r2, r1, r2
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d182      	bne.n	8004e34 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f2e:	4b88      	ldr	r3, [pc, #544]	; (8005150 <HAL_RCC_OscConfig+0xf78>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	497f      	ldr	r1, [pc, #508]	; (8005150 <HAL_RCC_OscConfig+0xf78>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	604b      	str	r3, [r1, #4]
 8004f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f5a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004f5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f68:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	fa93 f2a3 	rbit	r2, r3
 8004f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f76:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004f7a:	601a      	str	r2, [r3, #0]
  return result;
 8004f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f80:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004f84:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f86:	fab3 f383 	clz	r3, r3
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	461a      	mov	r2, r3
 8004f98:	2301      	movs	r3, #1
 8004f9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9c:	f7fd f8d4 	bl	8002148 <HAL_GetTick>
 8004fa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fa4:	e009      	b.n	8004fba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7fd f8cf 	bl	8002148 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e144      	b.n	8005244 <HAL_RCC_OscConfig+0x106c>
 8004fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fcc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	fa93 f2a3 	rbit	r2, r3
 8004fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fda:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004fde:	601a      	str	r2, [r3, #0]
  return result;
 8004fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004fe8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fea:	fab3 f383 	clz	r3, r3
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d102      	bne.n	8005004 <HAL_RCC_OscConfig+0xe2c>
 8004ffe:	4b54      	ldr	r3, [pc, #336]	; (8005150 <HAL_RCC_OscConfig+0xf78>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	e027      	b.n	8005054 <HAL_RCC_OscConfig+0xe7c>
 8005004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005008:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800500c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005016:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	fa93 f2a3 	rbit	r2, r3
 8005020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005024:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005032:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	fa93 f2a3 	rbit	r2, r3
 8005046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	4b3f      	ldr	r3, [pc, #252]	; (8005150 <HAL_RCC_OscConfig+0xf78>)
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005058:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800505c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005060:	6011      	str	r1, [r2, #0]
 8005062:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005066:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800506a:	6812      	ldr	r2, [r2, #0]
 800506c:	fa92 f1a2 	rbit	r1, r2
 8005070:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005074:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005078:	6011      	str	r1, [r2, #0]
  return result;
 800507a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800507e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	fab2 f282 	clz	r2, r2
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	f042 0220 	orr.w	r2, r2, #32
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	f002 021f 	and.w	r2, r2, #31
 8005094:	2101      	movs	r1, #1
 8005096:	fa01 f202 	lsl.w	r2, r1, r2
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d082      	beq.n	8004fa6 <HAL_RCC_OscConfig+0xdce>
 80050a0:	e0cf      	b.n	8005242 <HAL_RCC_OscConfig+0x106a>
 80050a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80050aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	fa93 f2a3 	rbit	r2, r3
 80050be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80050c6:	601a      	str	r2, [r3, #0]
  return result;
 80050c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80050d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d2:	fab3 f383 	clz	r3, r3
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	461a      	mov	r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e8:	f7fd f82e 	bl	8002148 <HAL_GetTick>
 80050ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050f0:	e009      	b.n	8005106 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f2:	f7fd f829 	bl	8002148 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e09e      	b.n	8005244 <HAL_RCC_OscConfig+0x106c>
 8005106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800510e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005118:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	fa93 f2a3 	rbit	r2, r3
 8005122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005126:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800512a:	601a      	str	r2, [r3, #0]
  return result;
 800512c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005130:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005134:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005136:	fab3 f383 	clz	r3, r3
 800513a:	b2db      	uxtb	r3, r3
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b01      	cmp	r3, #1
 8005148:	d104      	bne.n	8005154 <HAL_RCC_OscConfig+0xf7c>
 800514a:	4b01      	ldr	r3, [pc, #4]	; (8005150 <HAL_RCC_OscConfig+0xf78>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	e029      	b.n	80051a4 <HAL_RCC_OscConfig+0xfcc>
 8005150:	40021000 	.word	0x40021000
 8005154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005158:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800515c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005166:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	fa93 f2a3 	rbit	r2, r3
 8005170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005174:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	fa93 f2a3 	rbit	r2, r3
 8005196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800519a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	4b2b      	ldr	r3, [pc, #172]	; (8005250 <HAL_RCC_OscConfig+0x1078>)
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051a8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80051ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051b0:	6011      	str	r1, [r2, #0]
 80051b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051b6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	fa92 f1a2 	rbit	r1, r2
 80051c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80051c8:	6011      	str	r1, [r2, #0]
  return result;
 80051ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	fab2 f282 	clz	r2, r2
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	f042 0220 	orr.w	r2, r2, #32
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	f002 021f 	and.w	r2, r2, #31
 80051e4:	2101      	movs	r1, #1
 80051e6:	fa01 f202 	lsl.w	r2, r1, r2
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d180      	bne.n	80050f2 <HAL_RCC_OscConfig+0xf1a>
 80051f0:	e027      	b.n	8005242 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e01e      	b.n	8005244 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005206:	4b12      	ldr	r3, [pc, #72]	; (8005250 <HAL_RCC_OscConfig+0x1078>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800520e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005212:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	429a      	cmp	r2, r3
 8005224:	d10b      	bne.n	800523e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005226:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800522a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800522e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800523a:	429a      	cmp	r2, r3
 800523c:	d001      	beq.n	8005242 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40021000 	.word	0x40021000

08005254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b09e      	sub	sp, #120	; 0x78
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e162      	b.n	8005532 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800526c:	4b90      	ldr	r3, [pc, #576]	; (80054b0 <HAL_RCC_ClockConfig+0x25c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d910      	bls.n	800529c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b8d      	ldr	r3, [pc, #564]	; (80054b0 <HAL_RCC_ClockConfig+0x25c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 0207 	bic.w	r2, r3, #7
 8005282:	498b      	ldr	r1, [pc, #556]	; (80054b0 <HAL_RCC_ClockConfig+0x25c>)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b89      	ldr	r3, [pc, #548]	; (80054b0 <HAL_RCC_ClockConfig+0x25c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e14a      	b.n	8005532 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a8:	4b82      	ldr	r3, [pc, #520]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	497f      	ldr	r1, [pc, #508]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80dc 	beq.w	8005480 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d13c      	bne.n	800534a <HAL_RCC_ClockConfig+0xf6>
 80052d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052d8:	fa93 f3a3 	rbit	r3, r3
 80052dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80052de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e0:	fab3 f383 	clz	r3, r3
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	f043 0301 	orr.w	r3, r3, #1
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d102      	bne.n	80052fa <HAL_RCC_ClockConfig+0xa6>
 80052f4:	4b6f      	ldr	r3, [pc, #444]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	e00f      	b.n	800531a <HAL_RCC_ClockConfig+0xc6>
 80052fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005302:	fa93 f3a3 	rbit	r3, r3
 8005306:	667b      	str	r3, [r7, #100]	; 0x64
 8005308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800530c:	663b      	str	r3, [r7, #96]	; 0x60
 800530e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005310:	fa93 f3a3 	rbit	r3, r3
 8005314:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005316:	4b67      	ldr	r3, [pc, #412]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800531e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005320:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005322:	fa92 f2a2 	rbit	r2, r2
 8005326:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005328:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800532a:	fab2 f282 	clz	r2, r2
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	f042 0220 	orr.w	r2, r2, #32
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	f002 021f 	and.w	r2, r2, #31
 800533a:	2101      	movs	r1, #1
 800533c:	fa01 f202 	lsl.w	r2, r1, r2
 8005340:	4013      	ands	r3, r2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d17b      	bne.n	800543e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e0f3      	b.n	8005532 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d13c      	bne.n	80053cc <HAL_RCC_ClockConfig+0x178>
 8005352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005356:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800535a:	fa93 f3a3 	rbit	r3, r3
 800535e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005362:	fab3 f383 	clz	r3, r3
 8005366:	b2db      	uxtb	r3, r3
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	b2db      	uxtb	r3, r3
 800536c:	f043 0301 	orr.w	r3, r3, #1
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b01      	cmp	r3, #1
 8005374:	d102      	bne.n	800537c <HAL_RCC_ClockConfig+0x128>
 8005376:	4b4f      	ldr	r3, [pc, #316]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	e00f      	b.n	800539c <HAL_RCC_ClockConfig+0x148>
 800537c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005380:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005384:	fa93 f3a3 	rbit	r3, r3
 8005388:	647b      	str	r3, [r7, #68]	; 0x44
 800538a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800538e:	643b      	str	r3, [r7, #64]	; 0x40
 8005390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005392:	fa93 f3a3 	rbit	r3, r3
 8005396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005398:	4b46      	ldr	r3, [pc, #280]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80053a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053a4:	fa92 f2a2 	rbit	r2, r2
 80053a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80053aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053ac:	fab2 f282 	clz	r2, r2
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	f042 0220 	orr.w	r2, r2, #32
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	f002 021f 	and.w	r2, r2, #31
 80053bc:	2101      	movs	r1, #1
 80053be:	fa01 f202 	lsl.w	r2, r1, r2
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d13a      	bne.n	800543e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0b2      	b.n	8005532 <HAL_RCC_ClockConfig+0x2de>
 80053cc:	2302      	movs	r3, #2
 80053ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	fa93 f3a3 	rbit	r3, r3
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053da:	fab3 f383 	clz	r3, r3
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d102      	bne.n	80053f4 <HAL_RCC_ClockConfig+0x1a0>
 80053ee:	4b31      	ldr	r3, [pc, #196]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	e00d      	b.n	8005410 <HAL_RCC_ClockConfig+0x1bc>
 80053f4:	2302      	movs	r3, #2
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	fa93 f3a3 	rbit	r3, r3
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005400:	2302      	movs	r3, #2
 8005402:	623b      	str	r3, [r7, #32]
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	fa93 f3a3 	rbit	r3, r3
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	4b29      	ldr	r3, [pc, #164]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	2202      	movs	r2, #2
 8005412:	61ba      	str	r2, [r7, #24]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	fa92 f2a2 	rbit	r2, r2
 800541a:	617a      	str	r2, [r7, #20]
  return result;
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	fab2 f282 	clz	r2, r2
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	f042 0220 	orr.w	r2, r2, #32
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	f002 021f 	and.w	r2, r2, #31
 800542e:	2101      	movs	r1, #1
 8005430:	fa01 f202 	lsl.w	r2, r1, r2
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e079      	b.n	8005532 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800543e:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f023 0203 	bic.w	r2, r3, #3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	491a      	ldr	r1, [pc, #104]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 800544c:	4313      	orrs	r3, r2
 800544e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005450:	f7fc fe7a 	bl	8002148 <HAL_GetTick>
 8005454:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005456:	e00a      	b.n	800546e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005458:	f7fc fe76 	bl	8002148 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f241 3288 	movw	r2, #5000	; 0x1388
 8005466:	4293      	cmp	r3, r2
 8005468:	d901      	bls.n	800546e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e061      	b.n	8005532 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <HAL_RCC_ClockConfig+0x260>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f003 020c 	and.w	r2, r3, #12
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	429a      	cmp	r2, r3
 800547e:	d1eb      	bne.n	8005458 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005480:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <HAL_RCC_ClockConfig+0x25c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d214      	bcs.n	80054b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548e:	4b08      	ldr	r3, [pc, #32]	; (80054b0 <HAL_RCC_ClockConfig+0x25c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 0207 	bic.w	r2, r3, #7
 8005496:	4906      	ldr	r1, [pc, #24]	; (80054b0 <HAL_RCC_ClockConfig+0x25c>)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800549e:	4b04      	ldr	r3, [pc, #16]	; (80054b0 <HAL_RCC_ClockConfig+0x25c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d005      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e040      	b.n	8005532 <HAL_RCC_ClockConfig+0x2de>
 80054b0:	40022000 	.word	0x40022000
 80054b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d008      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c4:	4b1d      	ldr	r3, [pc, #116]	; (800553c <HAL_RCC_ClockConfig+0x2e8>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	491a      	ldr	r1, [pc, #104]	; (800553c <HAL_RCC_ClockConfig+0x2e8>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054e2:	4b16      	ldr	r3, [pc, #88]	; (800553c <HAL_RCC_ClockConfig+0x2e8>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4912      	ldr	r1, [pc, #72]	; (800553c <HAL_RCC_ClockConfig+0x2e8>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80054f6:	f000 f829 	bl	800554c <HAL_RCC_GetSysClockFreq>
 80054fa:	4601      	mov	r1, r0
 80054fc:	4b0f      	ldr	r3, [pc, #60]	; (800553c <HAL_RCC_ClockConfig+0x2e8>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005504:	22f0      	movs	r2, #240	; 0xf0
 8005506:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	fa92 f2a2 	rbit	r2, r2
 800550e:	60fa      	str	r2, [r7, #12]
  return result;
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	fab2 f282 	clz	r2, r2
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	40d3      	lsrs	r3, r2
 800551a:	4a09      	ldr	r2, [pc, #36]	; (8005540 <HAL_RCC_ClockConfig+0x2ec>)
 800551c:	5cd3      	ldrb	r3, [r2, r3]
 800551e:	fa21 f303 	lsr.w	r3, r1, r3
 8005522:	4a08      	ldr	r2, [pc, #32]	; (8005544 <HAL_RCC_ClockConfig+0x2f0>)
 8005524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005526:	4b08      	ldr	r3, [pc, #32]	; (8005548 <HAL_RCC_ClockConfig+0x2f4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fc fdc8 	bl	80020c0 <HAL_InitTick>
  
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3778      	adds	r7, #120	; 0x78
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
 8005540:	0800c9bc 	.word	0x0800c9bc
 8005544:	20000068 	.word	0x20000068
 8005548:	2000006c 	.word	0x2000006c

0800554c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800554c:	b480      	push	{r7}
 800554e:	b08b      	sub	sp, #44	; 0x2c
 8005550:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	2300      	movs	r3, #0
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	2300      	movs	r3, #0
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005566:	4b29      	ldr	r3, [pc, #164]	; (800560c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 030c 	and.w	r3, r3, #12
 8005572:	2b04      	cmp	r3, #4
 8005574:	d002      	beq.n	800557c <HAL_RCC_GetSysClockFreq+0x30>
 8005576:	2b08      	cmp	r3, #8
 8005578:	d003      	beq.n	8005582 <HAL_RCC_GetSysClockFreq+0x36>
 800557a:	e03c      	b.n	80055f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800557c:	4b24      	ldr	r3, [pc, #144]	; (8005610 <HAL_RCC_GetSysClockFreq+0xc4>)
 800557e:	623b      	str	r3, [r7, #32]
      break;
 8005580:	e03c      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005588:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800558c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	fa92 f2a2 	rbit	r2, r2
 8005594:	607a      	str	r2, [r7, #4]
  return result;
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	fab2 f282 	clz	r2, r2
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	40d3      	lsrs	r3, r2
 80055a0:	4a1c      	ldr	r2, [pc, #112]	; (8005614 <HAL_RCC_GetSysClockFreq+0xc8>)
 80055a2:	5cd3      	ldrb	r3, [r2, r3]
 80055a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80055a6:	4b19      	ldr	r3, [pc, #100]	; (800560c <HAL_RCC_GetSysClockFreq+0xc0>)
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	220f      	movs	r2, #15
 80055b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	fa92 f2a2 	rbit	r2, r2
 80055b8:	60fa      	str	r2, [r7, #12]
  return result;
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	fab2 f282 	clz	r2, r2
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	40d3      	lsrs	r3, r2
 80055c4:	4a14      	ldr	r2, [pc, #80]	; (8005618 <HAL_RCC_GetSysClockFreq+0xcc>)
 80055c6:	5cd3      	ldrb	r3, [r2, r3]
 80055c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80055d4:	4a0e      	ldr	r2, [pc, #56]	; (8005610 <HAL_RCC_GetSysClockFreq+0xc4>)
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	fb02 f303 	mul.w	r3, r2, r3
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
 80055e4:	e004      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	4a0c      	ldr	r2, [pc, #48]	; (800561c <HAL_RCC_GetSysClockFreq+0xd0>)
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	623b      	str	r3, [r7, #32]
      break;
 80055f4:	e002      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055f6:	4b06      	ldr	r3, [pc, #24]	; (8005610 <HAL_RCC_GetSysClockFreq+0xc4>)
 80055f8:	623b      	str	r3, [r7, #32]
      break;
 80055fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055fc:	6a3b      	ldr	r3, [r7, #32]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	372c      	adds	r7, #44	; 0x2c
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000
 8005610:	007a1200 	.word	0x007a1200
 8005614:	0800c9d4 	.word	0x0800c9d4
 8005618:	0800c9e4 	.word	0x0800c9e4
 800561c:	003d0900 	.word	0x003d0900

08005620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005624:	4b03      	ldr	r3, [pc, #12]	; (8005634 <HAL_RCC_GetHCLKFreq+0x14>)
 8005626:	681b      	ldr	r3, [r3, #0]
}
 8005628:	4618      	mov	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20000068 	.word	0x20000068

08005638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800563e:	f7ff ffef 	bl	8005620 <HAL_RCC_GetHCLKFreq>
 8005642:	4601      	mov	r1, r0
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800564c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005650:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	fa92 f2a2 	rbit	r2, r2
 8005658:	603a      	str	r2, [r7, #0]
  return result;
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	fab2 f282 	clz	r2, r2
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	40d3      	lsrs	r3, r2
 8005664:	4a04      	ldr	r2, [pc, #16]	; (8005678 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005666:	5cd3      	ldrb	r3, [r2, r3]
 8005668:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40021000 	.word	0x40021000
 8005678:	0800c9cc 	.word	0x0800c9cc

0800567c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005682:	f7ff ffcd 	bl	8005620 <HAL_RCC_GetHCLKFreq>
 8005686:	4601      	mov	r1, r0
 8005688:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005690:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005694:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	fa92 f2a2 	rbit	r2, r2
 800569c:	603a      	str	r2, [r7, #0]
  return result;
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	fab2 f282 	clz	r2, r2
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	40d3      	lsrs	r3, r2
 80056a8:	4a04      	ldr	r2, [pc, #16]	; (80056bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80056aa:	5cd3      	ldrb	r3, [r2, r3]
 80056ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40021000 	.word	0x40021000
 80056bc:	0800c9cc 	.word	0x0800c9cc

080056c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b092      	sub	sp, #72	; 0x48
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 80d4 	beq.w	800588c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056e4:	4b4e      	ldr	r3, [pc, #312]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10e      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056f0:	4b4b      	ldr	r3, [pc, #300]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	4a4a      	ldr	r2, [pc, #296]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056fa:	61d3      	str	r3, [r2, #28]
 80056fc:	4b48      	ldr	r3, [pc, #288]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570e:	4b45      	ldr	r3, [pc, #276]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d118      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800571a:	4b42      	ldr	r3, [pc, #264]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a41      	ldr	r2, [pc, #260]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005724:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005726:	f7fc fd0f 	bl	8002148 <HAL_GetTick>
 800572a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800572c:	e008      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572e:	f7fc fd0b 	bl	8002148 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b64      	cmp	r3, #100	; 0x64
 800573a:	d901      	bls.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e169      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	4b38      	ldr	r3, [pc, #224]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800574c:	4b34      	ldr	r3, [pc, #208]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005754:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8084 	beq.w	8005866 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005768:	429a      	cmp	r2, r3
 800576a:	d07c      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800576c:	4b2c      	ldr	r3, [pc, #176]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800577a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	fa93 f3a3 	rbit	r3, r3
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005786:	fab3 f383 	clz	r3, r3
 800578a:	b2db      	uxtb	r3, r3
 800578c:	461a      	mov	r2, r3
 800578e:	4b26      	ldr	r3, [pc, #152]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	461a      	mov	r2, r3
 8005796:	2301      	movs	r3, #1
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800579e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	fa93 f3a3 	rbit	r3, r3
 80057a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80057a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057aa:	fab3 f383 	clz	r3, r3
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	461a      	mov	r2, r3
 80057b2:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	461a      	mov	r2, r3
 80057ba:	2300      	movs	r3, #0
 80057bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80057be:	4a18      	ldr	r2, [pc, #96]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80057c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d04b      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ce:	f7fc fcbb 	bl	8002148 <HAL_GetTick>
 80057d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d4:	e00a      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d6:	f7fc fcb7 	bl	8002148 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d901      	bls.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e113      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80057ec:	2302      	movs	r3, #2
 80057ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	fa93 f3a3 	rbit	r3, r3
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
 80057f8:	2302      	movs	r3, #2
 80057fa:	623b      	str	r3, [r7, #32]
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	fa93 f3a3 	rbit	r3, r3
 8005802:	61fb      	str	r3, [r7, #28]
  return result;
 8005804:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005806:	fab3 f383 	clz	r3, r3
 800580a:	b2db      	uxtb	r3, r3
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f043 0302 	orr.w	r3, r3, #2
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d108      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800581a:	4b01      	ldr	r3, [pc, #4]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	e00d      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005820:	40021000 	.word	0x40021000
 8005824:	40007000 	.word	0x40007000
 8005828:	10908100 	.word	0x10908100
 800582c:	2302      	movs	r3, #2
 800582e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	fa93 f3a3 	rbit	r3, r3
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	4b78      	ldr	r3, [pc, #480]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	2202      	movs	r2, #2
 800583e:	613a      	str	r2, [r7, #16]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	fa92 f2a2 	rbit	r2, r2
 8005846:	60fa      	str	r2, [r7, #12]
  return result;
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	fab2 f282 	clz	r2, r2
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	f002 021f 	and.w	r2, r2, #31
 800585a:	2101      	movs	r1, #1
 800585c:	fa01 f202 	lsl.w	r2, r1, r2
 8005860:	4013      	ands	r3, r2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0b7      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005866:	4b6d      	ldr	r3, [pc, #436]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	496a      	ldr	r1, [pc, #424]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005874:	4313      	orrs	r3, r2
 8005876:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005878:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800587c:	2b01      	cmp	r3, #1
 800587e:	d105      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005880:	4b66      	ldr	r3, [pc, #408]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	4a65      	ldr	r2, [pc, #404]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800588a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005898:	4b60      	ldr	r3, [pc, #384]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800589a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589c:	f023 0203 	bic.w	r2, r3, #3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	495d      	ldr	r1, [pc, #372]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d008      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058b6:	4b59      	ldr	r3, [pc, #356]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	4956      	ldr	r1, [pc, #344]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058d4:	4b51      	ldr	r3, [pc, #324]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	494e      	ldr	r1, [pc, #312]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058f2:	4b4a      	ldr	r3, [pc, #296]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	f023 0210 	bic.w	r2, r3, #16
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	4947      	ldr	r1, [pc, #284]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005900:	4313      	orrs	r3, r2
 8005902:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005910:	4b42      	ldr	r3, [pc, #264]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	493f      	ldr	r1, [pc, #252]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800591e:	4313      	orrs	r3, r2
 8005920:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800592e:	4b3b      	ldr	r3, [pc, #236]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	f023 0220 	bic.w	r2, r3, #32
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	4938      	ldr	r1, [pc, #224]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800593c:	4313      	orrs	r3, r2
 800593e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800594c:	4b33      	ldr	r3, [pc, #204]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	4930      	ldr	r1, [pc, #192]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800595a:	4313      	orrs	r3, r2
 800595c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0310 	and.w	r3, r3, #16
 8005966:	2b00      	cmp	r3, #0
 8005968:	d008      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800596a:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	4929      	ldr	r1, [pc, #164]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005978:	4313      	orrs	r3, r2
 800597a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005988:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	4921      	ldr	r1, [pc, #132]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005996:	4313      	orrs	r3, r2
 8005998:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d008      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059a6:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059aa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	491a      	ldr	r1, [pc, #104]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80059c4:	4b15      	ldr	r3, [pc, #84]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	4912      	ldr	r1, [pc, #72]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80059e2:	4b0e      	ldr	r3, [pc, #56]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	490b      	ldr	r1, [pc, #44]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005a00:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0c:	4903      	ldr	r1, [pc, #12]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3748      	adds	r7, #72	; 0x48
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40021000 	.word	0x40021000

08005a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e09d      	b.n	8005b6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d108      	bne.n	8005a4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a42:	d009      	beq.n	8005a58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	61da      	str	r2, [r3, #28]
 8005a4a:	e005      	b.n	8005a58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fc f85a 	bl	8001b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a98:	d902      	bls.n	8005aa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e002      	b.n	8005aa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005aae:	d007      	beq.n	8005ac0 <HAL_SPI_Init+0xa0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ab8:	d002      	beq.n	8005ac0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	ea42 0103 	orr.w	r1, r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	0c1b      	lsrs	r3, r3, #16
 8005b1c:	f003 0204 	and.w	r2, r3, #4
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b3c:	ea42 0103 	orr.w	r1, r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e049      	b.n	8005c1c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7fc f807 	bl	8001bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f000 fd31 	bl	800661c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d001      	beq.n	8005c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e04a      	b.n	8005cd2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a21      	ldr	r2, [pc, #132]	; (8005ce0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d018      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x6c>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c66:	d013      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x6c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ce4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00e      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x6c>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1c      	ldr	r2, [pc, #112]	; (8005ce8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d009      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x6c>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1a      	ldr	r2, [pc, #104]	; (8005cec <HAL_TIM_Base_Start_IT+0xc8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x6c>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a19      	ldr	r2, [pc, #100]	; (8005cf0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d115      	bne.n	8005cbc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	4b17      	ldr	r3, [pc, #92]	; (8005cf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b06      	cmp	r3, #6
 8005ca0:	d015      	beq.n	8005cce <HAL_TIM_Base_Start_IT+0xaa>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca8:	d011      	beq.n	8005cce <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0201 	orr.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cba:	e008      	b.n	8005cce <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	e000      	b.n	8005cd0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40012c00 	.word	0x40012c00
 8005ce4:	40000400 	.word	0x40000400
 8005ce8:	40000800 	.word	0x40000800
 8005cec:	40013400 	.word	0x40013400
 8005cf0:	40014000 	.word	0x40014000
 8005cf4:	00010007 	.word	0x00010007

08005cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e049      	b.n	8005d9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f841 	bl	8005da6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f000 fc70 	bl	800661c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d109      	bne.n	8005de0 <HAL_TIM_PWM_Start+0x24>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	bf14      	ite	ne
 8005dd8:	2301      	movne	r3, #1
 8005dda:	2300      	moveq	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	e03c      	b.n	8005e5a <HAL_TIM_PWM_Start+0x9e>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d109      	bne.n	8005dfa <HAL_TIM_PWM_Start+0x3e>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	bf14      	ite	ne
 8005df2:	2301      	movne	r3, #1
 8005df4:	2300      	moveq	r3, #0
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	e02f      	b.n	8005e5a <HAL_TIM_PWM_Start+0x9e>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d109      	bne.n	8005e14 <HAL_TIM_PWM_Start+0x58>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	bf14      	ite	ne
 8005e0c:	2301      	movne	r3, #1
 8005e0e:	2300      	moveq	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	e022      	b.n	8005e5a <HAL_TIM_PWM_Start+0x9e>
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2b0c      	cmp	r3, #12
 8005e18:	d109      	bne.n	8005e2e <HAL_TIM_PWM_Start+0x72>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	bf14      	ite	ne
 8005e26:	2301      	movne	r3, #1
 8005e28:	2300      	moveq	r3, #0
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	e015      	b.n	8005e5a <HAL_TIM_PWM_Start+0x9e>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b10      	cmp	r3, #16
 8005e32:	d109      	bne.n	8005e48 <HAL_TIM_PWM_Start+0x8c>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	bf14      	ite	ne
 8005e40:	2301      	movne	r3, #1
 8005e42:	2300      	moveq	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	e008      	b.n	8005e5a <HAL_TIM_PWM_Start+0x9e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	bf14      	ite	ne
 8005e54:	2301      	movne	r3, #1
 8005e56:	2300      	moveq	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e097      	b.n	8005f92 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_PWM_Start+0xb6>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e70:	e023      	b.n	8005eba <HAL_TIM_PWM_Start+0xfe>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d104      	bne.n	8005e82 <HAL_TIM_PWM_Start+0xc6>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e80:	e01b      	b.n	8005eba <HAL_TIM_PWM_Start+0xfe>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d104      	bne.n	8005e92 <HAL_TIM_PWM_Start+0xd6>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e90:	e013      	b.n	8005eba <HAL_TIM_PWM_Start+0xfe>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b0c      	cmp	r3, #12
 8005e96:	d104      	bne.n	8005ea2 <HAL_TIM_PWM_Start+0xe6>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ea0:	e00b      	b.n	8005eba <HAL_TIM_PWM_Start+0xfe>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b10      	cmp	r3, #16
 8005ea6:	d104      	bne.n	8005eb2 <HAL_TIM_PWM_Start+0xf6>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eb0:	e003      	b.n	8005eba <HAL_TIM_PWM_Start+0xfe>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 ffaa 	bl	8006e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a33      	ldr	r2, [pc, #204]	; (8005f9c <HAL_TIM_PWM_Start+0x1e0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d013      	beq.n	8005efa <HAL_TIM_PWM_Start+0x13e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a32      	ldr	r2, [pc, #200]	; (8005fa0 <HAL_TIM_PWM_Start+0x1e4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00e      	beq.n	8005efa <HAL_TIM_PWM_Start+0x13e>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a30      	ldr	r2, [pc, #192]	; (8005fa4 <HAL_TIM_PWM_Start+0x1e8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d009      	beq.n	8005efa <HAL_TIM_PWM_Start+0x13e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a2f      	ldr	r2, [pc, #188]	; (8005fa8 <HAL_TIM_PWM_Start+0x1ec>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d004      	beq.n	8005efa <HAL_TIM_PWM_Start+0x13e>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2d      	ldr	r2, [pc, #180]	; (8005fac <HAL_TIM_PWM_Start+0x1f0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d101      	bne.n	8005efe <HAL_TIM_PWM_Start+0x142>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <HAL_TIM_PWM_Start+0x144>
 8005efe:	2300      	movs	r3, #0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a20      	ldr	r2, [pc, #128]	; (8005f9c <HAL_TIM_PWM_Start+0x1e0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d018      	beq.n	8005f50 <HAL_TIM_PWM_Start+0x194>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f26:	d013      	beq.n	8005f50 <HAL_TIM_PWM_Start+0x194>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a20      	ldr	r2, [pc, #128]	; (8005fb0 <HAL_TIM_PWM_Start+0x1f4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00e      	beq.n	8005f50 <HAL_TIM_PWM_Start+0x194>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1f      	ldr	r2, [pc, #124]	; (8005fb4 <HAL_TIM_PWM_Start+0x1f8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d009      	beq.n	8005f50 <HAL_TIM_PWM_Start+0x194>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a17      	ldr	r2, [pc, #92]	; (8005fa0 <HAL_TIM_PWM_Start+0x1e4>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d004      	beq.n	8005f50 <HAL_TIM_PWM_Start+0x194>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a16      	ldr	r2, [pc, #88]	; (8005fa4 <HAL_TIM_PWM_Start+0x1e8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d115      	bne.n	8005f7c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	4b18      	ldr	r3, [pc, #96]	; (8005fb8 <HAL_TIM_PWM_Start+0x1fc>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b06      	cmp	r3, #6
 8005f60:	d015      	beq.n	8005f8e <HAL_TIM_PWM_Start+0x1d2>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f68:	d011      	beq.n	8005f8e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0201 	orr.w	r2, r2, #1
 8005f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7a:	e008      	b.n	8005f8e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	e000      	b.n	8005f90 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40013400 	.word	0x40013400
 8005fa4:	40014000 	.word	0x40014000
 8005fa8:	40014400 	.word	0x40014400
 8005fac:	40014800 	.word	0x40014800
 8005fb0:	40000400 	.word	0x40000400
 8005fb4:	40000800 	.word	0x40000800
 8005fb8:	00010007 	.word	0x00010007

08005fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d122      	bne.n	8006018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d11b      	bne.n	8006018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0202 	mvn.w	r2, #2
 8005fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 faed 	bl	80065de <HAL_TIM_IC_CaptureCallback>
 8006004:	e005      	b.n	8006012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fadf 	bl	80065ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 faf0 	bl	80065f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b04      	cmp	r3, #4
 8006024:	d122      	bne.n	800606c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b04      	cmp	r3, #4
 8006032:	d11b      	bne.n	800606c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0204 	mvn.w	r2, #4
 800603c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2202      	movs	r2, #2
 8006042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fac3 	bl	80065de <HAL_TIM_IC_CaptureCallback>
 8006058:	e005      	b.n	8006066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fab5 	bl	80065ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fac6 	bl	80065f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	2b08      	cmp	r3, #8
 8006078:	d122      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b08      	cmp	r3, #8
 8006086:	d11b      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0208 	mvn.w	r2, #8
 8006090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2204      	movs	r2, #4
 8006096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa99 	bl	80065de <HAL_TIM_IC_CaptureCallback>
 80060ac:	e005      	b.n	80060ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa8b 	bl	80065ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fa9c 	bl	80065f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0310 	and.w	r3, r3, #16
 80060ca:	2b10      	cmp	r3, #16
 80060cc:	d122      	bne.n	8006114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d11b      	bne.n	8006114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0210 	mvn.w	r2, #16
 80060e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2208      	movs	r2, #8
 80060ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fa6f 	bl	80065de <HAL_TIM_IC_CaptureCallback>
 8006100:	e005      	b.n	800610e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fa61 	bl	80065ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fa72 	bl	80065f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b01      	cmp	r3, #1
 8006120:	d10e      	bne.n	8006140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b01      	cmp	r3, #1
 800612e:	d107      	bne.n	8006140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0201 	mvn.w	r2, #1
 8006138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fa3b 	bl	80065b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614a:	2b80      	cmp	r3, #128	; 0x80
 800614c:	d10e      	bne.n	800616c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006158:	2b80      	cmp	r3, #128	; 0x80
 800615a:	d107      	bne.n	800616c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 ff08 	bl	8006f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617a:	d10e      	bne.n	800619a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006186:	2b80      	cmp	r3, #128	; 0x80
 8006188:	d107      	bne.n	800619a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fefb 	bl	8006f90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d10e      	bne.n	80061c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b2:	2b40      	cmp	r3, #64	; 0x40
 80061b4:	d107      	bne.n	80061c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fa20 	bl	8006606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d10e      	bne.n	80061f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d107      	bne.n	80061f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f06f 0220 	mvn.w	r2, #32
 80061ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 febb 	bl	8006f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061f2:	bf00      	nop
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006216:	2302      	movs	r3, #2
 8006218:	e0ff      	b.n	800641a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b14      	cmp	r3, #20
 8006226:	f200 80f0 	bhi.w	800640a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800622a:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006230:	08006285 	.word	0x08006285
 8006234:	0800640b 	.word	0x0800640b
 8006238:	0800640b 	.word	0x0800640b
 800623c:	0800640b 	.word	0x0800640b
 8006240:	080062c5 	.word	0x080062c5
 8006244:	0800640b 	.word	0x0800640b
 8006248:	0800640b 	.word	0x0800640b
 800624c:	0800640b 	.word	0x0800640b
 8006250:	08006307 	.word	0x08006307
 8006254:	0800640b 	.word	0x0800640b
 8006258:	0800640b 	.word	0x0800640b
 800625c:	0800640b 	.word	0x0800640b
 8006260:	08006347 	.word	0x08006347
 8006264:	0800640b 	.word	0x0800640b
 8006268:	0800640b 	.word	0x0800640b
 800626c:	0800640b 	.word	0x0800640b
 8006270:	08006389 	.word	0x08006389
 8006274:	0800640b 	.word	0x0800640b
 8006278:	0800640b 	.word	0x0800640b
 800627c:	0800640b 	.word	0x0800640b
 8006280:	080063c9 	.word	0x080063c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fa56 	bl	800673c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0208 	orr.w	r2, r2, #8
 800629e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0204 	bic.w	r2, r2, #4
 80062ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6999      	ldr	r1, [r3, #24]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	691a      	ldr	r2, [r3, #16]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	619a      	str	r2, [r3, #24]
      break;
 80062c2:	e0a5      	b.n	8006410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fac6 	bl	800685c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699a      	ldr	r2, [r3, #24]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6999      	ldr	r1, [r3, #24]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	021a      	lsls	r2, r3, #8
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	619a      	str	r2, [r3, #24]
      break;
 8006304:	e084      	b.n	8006410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	4618      	mov	r0, r3
 800630e:	f000 fb2f 	bl	8006970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69da      	ldr	r2, [r3, #28]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f042 0208 	orr.w	r2, r2, #8
 8006320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0204 	bic.w	r2, r2, #4
 8006330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69d9      	ldr	r1, [r3, #28]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	61da      	str	r2, [r3, #28]
      break;
 8006344:	e064      	b.n	8006410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	4618      	mov	r0, r3
 800634e:	f000 fb97 	bl	8006a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69da      	ldr	r2, [r3, #28]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69d9      	ldr	r1, [r3, #28]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	021a      	lsls	r2, r3, #8
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	61da      	str	r2, [r3, #28]
      break;
 8006386:	e043      	b.n	8006410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fbe0 	bl	8006b54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0208 	orr.w	r2, r2, #8
 80063a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0204 	bic.w	r2, r2, #4
 80063b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063c6:	e023      	b.n	8006410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fc24 	bl	8006c1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	021a      	lsls	r2, r3, #8
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006408:	e002      	b.n	8006410 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	75fb      	strb	r3, [r7, #23]
      break;
 800640e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006418:	7dfb      	ldrb	r3, [r7, #23]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop

08006424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_TIM_ConfigClockSource+0x1c>
 800643c:	2302      	movs	r3, #2
 800643e:	e0b6      	b.n	80065ae <HAL_TIM_ConfigClockSource+0x18a>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800645e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800646a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800647c:	d03e      	beq.n	80064fc <HAL_TIM_ConfigClockSource+0xd8>
 800647e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006482:	f200 8087 	bhi.w	8006594 <HAL_TIM_ConfigClockSource+0x170>
 8006486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648a:	f000 8086 	beq.w	800659a <HAL_TIM_ConfigClockSource+0x176>
 800648e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006492:	d87f      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x170>
 8006494:	2b70      	cmp	r3, #112	; 0x70
 8006496:	d01a      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0xaa>
 8006498:	2b70      	cmp	r3, #112	; 0x70
 800649a:	d87b      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x170>
 800649c:	2b60      	cmp	r3, #96	; 0x60
 800649e:	d050      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x11e>
 80064a0:	2b60      	cmp	r3, #96	; 0x60
 80064a2:	d877      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x170>
 80064a4:	2b50      	cmp	r3, #80	; 0x50
 80064a6:	d03c      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0xfe>
 80064a8:	2b50      	cmp	r3, #80	; 0x50
 80064aa:	d873      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x170>
 80064ac:	2b40      	cmp	r3, #64	; 0x40
 80064ae:	d058      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x13e>
 80064b0:	2b40      	cmp	r3, #64	; 0x40
 80064b2:	d86f      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x170>
 80064b4:	2b30      	cmp	r3, #48	; 0x30
 80064b6:	d064      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x15e>
 80064b8:	2b30      	cmp	r3, #48	; 0x30
 80064ba:	d86b      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x170>
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d060      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x15e>
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d867      	bhi.n	8006594 <HAL_TIM_ConfigClockSource+0x170>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d05c      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x15e>
 80064c8:	2b10      	cmp	r3, #16
 80064ca:	d05a      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x15e>
 80064cc:	e062      	b.n	8006594 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6899      	ldr	r1, [r3, #8]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f000 fc7d 	bl	8006ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	609a      	str	r2, [r3, #8]
      break;
 80064fa:	e04f      	b.n	800659c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	6899      	ldr	r1, [r3, #8]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f000 fc66 	bl	8006ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800651e:	609a      	str	r2, [r3, #8]
      break;
 8006520:	e03c      	b.n	800659c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	6859      	ldr	r1, [r3, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	461a      	mov	r2, r3
 8006530:	f000 fbda 	bl	8006ce8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2150      	movs	r1, #80	; 0x50
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fc33 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 8006540:	e02c      	b.n	800659c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6859      	ldr	r1, [r3, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	461a      	mov	r2, r3
 8006550:	f000 fbf9 	bl	8006d46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2160      	movs	r1, #96	; 0x60
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fc23 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 8006560:	e01c      	b.n	800659c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6859      	ldr	r1, [r3, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	461a      	mov	r2, r3
 8006570:	f000 fbba 	bl	8006ce8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2140      	movs	r1, #64	; 0x40
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fc13 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 8006580:	e00c      	b.n	800659c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4619      	mov	r1, r3
 800658c:	4610      	mov	r0, r2
 800658e:	f000 fc0a 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 8006592:	e003      	b.n	800659c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	73fb      	strb	r3, [r7, #15]
      break;
 8006598:	e000      	b.n	800659c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800659a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
	...

0800661c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a3c      	ldr	r2, [pc, #240]	; (8006720 <TIM_Base_SetConfig+0x104>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00f      	beq.n	8006654 <TIM_Base_SetConfig+0x38>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663a:	d00b      	beq.n	8006654 <TIM_Base_SetConfig+0x38>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a39      	ldr	r2, [pc, #228]	; (8006724 <TIM_Base_SetConfig+0x108>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d007      	beq.n	8006654 <TIM_Base_SetConfig+0x38>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a38      	ldr	r2, [pc, #224]	; (8006728 <TIM_Base_SetConfig+0x10c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <TIM_Base_SetConfig+0x38>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a37      	ldr	r2, [pc, #220]	; (800672c <TIM_Base_SetConfig+0x110>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d108      	bne.n	8006666 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a2d      	ldr	r2, [pc, #180]	; (8006720 <TIM_Base_SetConfig+0x104>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d01b      	beq.n	80066a6 <TIM_Base_SetConfig+0x8a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006674:	d017      	beq.n	80066a6 <TIM_Base_SetConfig+0x8a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a2a      	ldr	r2, [pc, #168]	; (8006724 <TIM_Base_SetConfig+0x108>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d013      	beq.n	80066a6 <TIM_Base_SetConfig+0x8a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a29      	ldr	r2, [pc, #164]	; (8006728 <TIM_Base_SetConfig+0x10c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00f      	beq.n	80066a6 <TIM_Base_SetConfig+0x8a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a28      	ldr	r2, [pc, #160]	; (800672c <TIM_Base_SetConfig+0x110>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00b      	beq.n	80066a6 <TIM_Base_SetConfig+0x8a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a27      	ldr	r2, [pc, #156]	; (8006730 <TIM_Base_SetConfig+0x114>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d007      	beq.n	80066a6 <TIM_Base_SetConfig+0x8a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a26      	ldr	r2, [pc, #152]	; (8006734 <TIM_Base_SetConfig+0x118>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d003      	beq.n	80066a6 <TIM_Base_SetConfig+0x8a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a25      	ldr	r2, [pc, #148]	; (8006738 <TIM_Base_SetConfig+0x11c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d108      	bne.n	80066b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a10      	ldr	r2, [pc, #64]	; (8006720 <TIM_Base_SetConfig+0x104>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00f      	beq.n	8006704 <TIM_Base_SetConfig+0xe8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a11      	ldr	r2, [pc, #68]	; (800672c <TIM_Base_SetConfig+0x110>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00b      	beq.n	8006704 <TIM_Base_SetConfig+0xe8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a10      	ldr	r2, [pc, #64]	; (8006730 <TIM_Base_SetConfig+0x114>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d007      	beq.n	8006704 <TIM_Base_SetConfig+0xe8>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a0f      	ldr	r2, [pc, #60]	; (8006734 <TIM_Base_SetConfig+0x118>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_Base_SetConfig+0xe8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a0e      	ldr	r2, [pc, #56]	; (8006738 <TIM_Base_SetConfig+0x11c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d103      	bne.n	800670c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	691a      	ldr	r2, [r3, #16]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	615a      	str	r2, [r3, #20]
}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40012c00 	.word	0x40012c00
 8006724:	40000400 	.word	0x40000400
 8006728:	40000800 	.word	0x40000800
 800672c:	40013400 	.word	0x40013400
 8006730:	40014000 	.word	0x40014000
 8006734:	40014400 	.word	0x40014400
 8006738:	40014800 	.word	0x40014800

0800673c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	f023 0201 	bic.w	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800676a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f023 0302 	bic.w	r3, r3, #2
 8006788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a2c      	ldr	r2, [pc, #176]	; (8006848 <TIM_OC1_SetConfig+0x10c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00f      	beq.n	80067bc <TIM_OC1_SetConfig+0x80>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a2b      	ldr	r2, [pc, #172]	; (800684c <TIM_OC1_SetConfig+0x110>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00b      	beq.n	80067bc <TIM_OC1_SetConfig+0x80>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a2a      	ldr	r2, [pc, #168]	; (8006850 <TIM_OC1_SetConfig+0x114>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d007      	beq.n	80067bc <TIM_OC1_SetConfig+0x80>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a29      	ldr	r2, [pc, #164]	; (8006854 <TIM_OC1_SetConfig+0x118>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d003      	beq.n	80067bc <TIM_OC1_SetConfig+0x80>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a28      	ldr	r2, [pc, #160]	; (8006858 <TIM_OC1_SetConfig+0x11c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d10c      	bne.n	80067d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f023 0308 	bic.w	r3, r3, #8
 80067c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f023 0304 	bic.w	r3, r3, #4
 80067d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a1b      	ldr	r2, [pc, #108]	; (8006848 <TIM_OC1_SetConfig+0x10c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00f      	beq.n	80067fe <TIM_OC1_SetConfig+0xc2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1a      	ldr	r2, [pc, #104]	; (800684c <TIM_OC1_SetConfig+0x110>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00b      	beq.n	80067fe <TIM_OC1_SetConfig+0xc2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a19      	ldr	r2, [pc, #100]	; (8006850 <TIM_OC1_SetConfig+0x114>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d007      	beq.n	80067fe <TIM_OC1_SetConfig+0xc2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a18      	ldr	r2, [pc, #96]	; (8006854 <TIM_OC1_SetConfig+0x118>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d003      	beq.n	80067fe <TIM_OC1_SetConfig+0xc2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a17      	ldr	r2, [pc, #92]	; (8006858 <TIM_OC1_SetConfig+0x11c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d111      	bne.n	8006822 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800680c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	621a      	str	r2, [r3, #32]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	40012c00 	.word	0x40012c00
 800684c:	40013400 	.word	0x40013400
 8006850:	40014000 	.word	0x40014000
 8006854:	40014400 	.word	0x40014400
 8006858:	40014800 	.word	0x40014800

0800685c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f023 0210 	bic.w	r2, r3, #16
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800688a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f023 0320 	bic.w	r3, r3, #32
 80068aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a28      	ldr	r2, [pc, #160]	; (800695c <TIM_OC2_SetConfig+0x100>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC2_SetConfig+0x6c>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a27      	ldr	r2, [pc, #156]	; (8006960 <TIM_OC2_SetConfig+0x104>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d10d      	bne.n	80068e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a1d      	ldr	r2, [pc, #116]	; (800695c <TIM_OC2_SetConfig+0x100>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00f      	beq.n	800690c <TIM_OC2_SetConfig+0xb0>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a1c      	ldr	r2, [pc, #112]	; (8006960 <TIM_OC2_SetConfig+0x104>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00b      	beq.n	800690c <TIM_OC2_SetConfig+0xb0>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a1b      	ldr	r2, [pc, #108]	; (8006964 <TIM_OC2_SetConfig+0x108>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_OC2_SetConfig+0xb0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a1a      	ldr	r2, [pc, #104]	; (8006968 <TIM_OC2_SetConfig+0x10c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_OC2_SetConfig+0xb0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a19      	ldr	r2, [pc, #100]	; (800696c <TIM_OC2_SetConfig+0x110>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d113      	bne.n	8006934 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006912:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800691a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40012c00 	.word	0x40012c00
 8006960:	40013400 	.word	0x40013400
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800

08006970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800699e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0303 	bic.w	r3, r3, #3
 80069aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	021b      	lsls	r3, r3, #8
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a27      	ldr	r2, [pc, #156]	; (8006a6c <TIM_OC3_SetConfig+0xfc>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_OC3_SetConfig+0x6a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a26      	ldr	r2, [pc, #152]	; (8006a70 <TIM_OC3_SetConfig+0x100>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d10d      	bne.n	80069f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069f4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1c      	ldr	r2, [pc, #112]	; (8006a6c <TIM_OC3_SetConfig+0xfc>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00f      	beq.n	8006a1e <TIM_OC3_SetConfig+0xae>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a1b      	ldr	r2, [pc, #108]	; (8006a70 <TIM_OC3_SetConfig+0x100>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00b      	beq.n	8006a1e <TIM_OC3_SetConfig+0xae>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a1a      	ldr	r2, [pc, #104]	; (8006a74 <TIM_OC3_SetConfig+0x104>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d007      	beq.n	8006a1e <TIM_OC3_SetConfig+0xae>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a19      	ldr	r2, [pc, #100]	; (8006a78 <TIM_OC3_SetConfig+0x108>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <TIM_OC3_SetConfig+0xae>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a18      	ldr	r2, [pc, #96]	; (8006a7c <TIM_OC3_SetConfig+0x10c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d113      	bne.n	8006a46 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	621a      	str	r2, [r3, #32]
}
 8006a60:	bf00      	nop
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40013400 	.word	0x40013400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40014400 	.word	0x40014400
 8006a7c:	40014800 	.word	0x40014800

08006a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	021b      	lsls	r3, r3, #8
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	031b      	lsls	r3, r3, #12
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a18      	ldr	r2, [pc, #96]	; (8006b40 <TIM_OC4_SetConfig+0xc0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00f      	beq.n	8006b04 <TIM_OC4_SetConfig+0x84>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a17      	ldr	r2, [pc, #92]	; (8006b44 <TIM_OC4_SetConfig+0xc4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00b      	beq.n	8006b04 <TIM_OC4_SetConfig+0x84>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <TIM_OC4_SetConfig+0xc8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d007      	beq.n	8006b04 <TIM_OC4_SetConfig+0x84>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a15      	ldr	r2, [pc, #84]	; (8006b4c <TIM_OC4_SetConfig+0xcc>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d003      	beq.n	8006b04 <TIM_OC4_SetConfig+0x84>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a14      	ldr	r2, [pc, #80]	; (8006b50 <TIM_OC4_SetConfig+0xd0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d109      	bne.n	8006b18 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	019b      	lsls	r3, r3, #6
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	621a      	str	r2, [r3, #32]
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	40012c00 	.word	0x40012c00
 8006b44:	40013400 	.word	0x40013400
 8006b48:	40014000 	.word	0x40014000
 8006b4c:	40014400 	.word	0x40014400
 8006b50:	40014800 	.word	0x40014800

08006b54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	041b      	lsls	r3, r3, #16
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <TIM_OC5_SetConfig+0xb4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00f      	beq.n	8006bce <TIM_OC5_SetConfig+0x7a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <TIM_OC5_SetConfig+0xb8>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00b      	beq.n	8006bce <TIM_OC5_SetConfig+0x7a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <TIM_OC5_SetConfig+0xbc>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d007      	beq.n	8006bce <TIM_OC5_SetConfig+0x7a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a14      	ldr	r2, [pc, #80]	; (8006c14 <TIM_OC5_SetConfig+0xc0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d003      	beq.n	8006bce <TIM_OC5_SetConfig+0x7a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a13      	ldr	r2, [pc, #76]	; (8006c18 <TIM_OC5_SetConfig+0xc4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d109      	bne.n	8006be2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	621a      	str	r2, [r3, #32]
}
 8006bfc:	bf00      	nop
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	40012c00 	.word	0x40012c00
 8006c0c:	40013400 	.word	0x40013400
 8006c10:	40014000 	.word	0x40014000
 8006c14:	40014400 	.word	0x40014400
 8006c18:	40014800 	.word	0x40014800

08006c1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	021b      	lsls	r3, r3, #8
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	051b      	lsls	r3, r3, #20
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a18      	ldr	r2, [pc, #96]	; (8006cd4 <TIM_OC6_SetConfig+0xb8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00f      	beq.n	8006c98 <TIM_OC6_SetConfig+0x7c>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a17      	ldr	r2, [pc, #92]	; (8006cd8 <TIM_OC6_SetConfig+0xbc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <TIM_OC6_SetConfig+0x7c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a16      	ldr	r2, [pc, #88]	; (8006cdc <TIM_OC6_SetConfig+0xc0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d007      	beq.n	8006c98 <TIM_OC6_SetConfig+0x7c>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a15      	ldr	r2, [pc, #84]	; (8006ce0 <TIM_OC6_SetConfig+0xc4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC6_SetConfig+0x7c>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a14      	ldr	r2, [pc, #80]	; (8006ce4 <TIM_OC6_SetConfig+0xc8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d109      	bne.n	8006cac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	029b      	lsls	r3, r3, #10
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40012c00 	.word	0x40012c00
 8006cd8:	40013400 	.word	0x40013400
 8006cdc:	40014000 	.word	0x40014000
 8006ce0:	40014400 	.word	0x40014400
 8006ce4:	40014800 	.word	0x40014800

08006ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f023 0201 	bic.w	r2, r3, #1
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	011b      	lsls	r3, r3, #4
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f023 030a 	bic.w	r3, r3, #10
 8006d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b087      	sub	sp, #28
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	f023 0210 	bic.w	r2, r3, #16
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	031b      	lsls	r3, r3, #12
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f043 0307 	orr.w	r3, r3, #7
 8006dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	609a      	str	r2, [r3, #8]
}
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	021a      	lsls	r2, r3, #8
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	609a      	str	r2, [r3, #8]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f003 031f 	and.w	r3, r3, #31
 8006e2e:	2201      	movs	r2, #1
 8006e30:	fa02 f303 	lsl.w	r3, r2, r3
 8006e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1a      	ldr	r2, [r3, #32]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	401a      	ands	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a1a      	ldr	r2, [r3, #32]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f003 031f 	and.w	r3, r3, #31
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	fa01 f303 	lsl.w	r3, r1, r3
 8006e54:	431a      	orrs	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
	...

08006e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e063      	b.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a2b      	ldr	r2, [pc, #172]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d004      	beq.n	8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a2a      	ldr	r2, [pc, #168]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d108      	bne.n	8006ec6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006eba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ecc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1b      	ldr	r2, [pc, #108]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d018      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef2:	d013      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00e      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a17      	ldr	r2, [pc, #92]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d009      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a12      	ldr	r2, [pc, #72]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a13      	ldr	r2, [pc, #76]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d10c      	bne.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40013400 	.word	0x40013400
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	40014000 	.word	0x40014000

08006f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e040      	b.n	8007038 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d106      	bne.n	8006fcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7fa fe6a 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2224      	movs	r2, #36	; 0x24
 8006fd0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0201 	bic.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fbbc 	bl	8007760 <UART_SetConfig>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d101      	bne.n	8006ff2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e022      	b.n	8007038 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fd84 	bl	8007b08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800700e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800701e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0201 	orr.w	r2, r2, #1
 800702e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fe0b 	bl	8007c4c <UART_CheckIdleState>
 8007036:	4603      	mov	r3, r0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	; 0x28
 8007044:	af02      	add	r7, sp, #8
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	4613      	mov	r3, r2
 800704e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007054:	2b20      	cmp	r3, #32
 8007056:	d178      	bne.n	800714a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_UART_Transmit+0x24>
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e071      	b.n	800714c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2221      	movs	r2, #33	; 0x21
 8007074:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007076:	f7fb f867 	bl	8002148 <HAL_GetTick>
 800707a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	88fa      	ldrh	r2, [r7, #6]
 8007080:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	88fa      	ldrh	r2, [r7, #6]
 8007088:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007094:	d108      	bne.n	80070a8 <HAL_UART_Transmit+0x68>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d104      	bne.n	80070a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	e003      	b.n	80070b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070b0:	e030      	b.n	8007114 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2200      	movs	r2, #0
 80070ba:	2180      	movs	r1, #128	; 0x80
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 fe6d 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e03c      	b.n	800714c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10b      	bne.n	80070f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	881a      	ldrh	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e4:	b292      	uxth	r2, r2
 80070e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	3302      	adds	r3, #2
 80070ec:	61bb      	str	r3, [r7, #24]
 80070ee:	e008      	b.n	8007102 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	781a      	ldrb	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	b292      	uxth	r2, r2
 80070fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	3301      	adds	r3, #1
 8007100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007108:	b29b      	uxth	r3, r3
 800710a:	3b01      	subs	r3, #1
 800710c:	b29a      	uxth	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800711a:	b29b      	uxth	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1c8      	bne.n	80070b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2200      	movs	r2, #0
 8007128:	2140      	movs	r1, #64	; 0x40
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 fe36 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d004      	beq.n	8007140 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2220      	movs	r2, #32
 800713a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e005      	b.n	800714c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	e000      	b.n	800714c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800714a:	2302      	movs	r3, #2
  }
}
 800714c:	4618      	mov	r0, r3
 800714e:	3720      	adds	r7, #32
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b0ba      	sub	sp, #232	; 0xe8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800717a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800717e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007182:	4013      	ands	r3, r2
 8007184:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800718c:	2b00      	cmp	r3, #0
 800718e:	d115      	bne.n	80071bc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007194:	f003 0320 	and.w	r3, r3, #32
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00f      	beq.n	80071bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800719c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d009      	beq.n	80071bc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 82ab 	beq.w	8007708 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
      }
      return;
 80071ba:	e2a5      	b.n	8007708 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8117 	beq.w	80073f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80071c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d106      	bne.n	80071e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80071d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80071d6:	4b85      	ldr	r3, [pc, #532]	; (80073ec <HAL_UART_IRQHandler+0x298>)
 80071d8:	4013      	ands	r3, r2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 810a 	beq.w	80073f4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d011      	beq.n	8007210 <HAL_UART_IRQHandler+0xbc>
 80071ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2201      	movs	r2, #1
 80071fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007206:	f043 0201 	orr.w	r2, r3, #1
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d011      	beq.n	8007240 <HAL_UART_IRQHandler+0xec>
 800721c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2202      	movs	r2, #2
 800722e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007236:	f043 0204 	orr.w	r2, r3, #4
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	d011      	beq.n	8007270 <HAL_UART_IRQHandler+0x11c>
 800724c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00b      	beq.n	8007270 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2204      	movs	r2, #4
 800725e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007266:	f043 0202 	orr.w	r2, r3, #2
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007274:	f003 0308 	and.w	r3, r3, #8
 8007278:	2b00      	cmp	r3, #0
 800727a:	d017      	beq.n	80072ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800727c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b00      	cmp	r3, #0
 8007286:	d105      	bne.n	8007294 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800728c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2208      	movs	r2, #8
 800729a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072a2:	f043 0208 	orr.w	r2, r3, #8
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d012      	beq.n	80072de <HAL_UART_IRQHandler+0x18a>
 80072b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00c      	beq.n	80072de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072d4:	f043 0220 	orr.w	r2, r3, #32
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8211 	beq.w	800770c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80072ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00d      	beq.n	8007312 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d007      	beq.n	8007312 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007318:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007326:	2b40      	cmp	r3, #64	; 0x40
 8007328:	d005      	beq.n	8007336 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800732a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800732e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007332:	2b00      	cmp	r3, #0
 8007334:	d04f      	beq.n	80073d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fd97 	bl	8007e6a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	2b40      	cmp	r3, #64	; 0x40
 8007348:	d141      	bne.n	80073ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3308      	adds	r3, #8
 8007350:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3308      	adds	r3, #8
 8007372:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007376:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800737a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007382:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800738e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1d9      	bne.n	800734a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800739a:	2b00      	cmp	r3, #0
 800739c:	d013      	beq.n	80073c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073a2:	4a13      	ldr	r2, [pc, #76]	; (80073f0 <HAL_UART_IRQHandler+0x29c>)
 80073a4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fc fb1a 	bl	80039e4 <HAL_DMA_Abort_IT>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d017      	beq.n	80073e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073c0:	4610      	mov	r0, r2
 80073c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c4:	e00f      	b.n	80073e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f9b4 	bl	8007734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073cc:	e00b      	b.n	80073e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f9b0 	bl	8007734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d4:	e007      	b.n	80073e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f9ac 	bl	8007734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80073e4:	e192      	b.n	800770c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e6:	bf00      	nop
    return;
 80073e8:	e190      	b.n	800770c <HAL_UART_IRQHandler+0x5b8>
 80073ea:	bf00      	nop
 80073ec:	04000120 	.word	0x04000120
 80073f0:	08007f33 	.word	0x08007f33

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	f040 814b 	bne.w	8007694 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007402:	f003 0310 	and.w	r3, r3, #16
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 8144 	beq.w	8007694 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800740c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007410:	f003 0310 	and.w	r3, r3, #16
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 813d 	beq.w	8007694 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2210      	movs	r2, #16
 8007420:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742c:	2b40      	cmp	r3, #64	; 0x40
 800742e:	f040 80b5 	bne.w	800759c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800743e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 8164 	beq.w	8007710 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800744e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007452:	429a      	cmp	r2, r3
 8007454:	f080 815c 	bcs.w	8007710 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800745e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	2b20      	cmp	r3, #32
 800746a:	f000 8086 	beq.w	800757a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007482:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007486:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800748a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007498:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800749c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1da      	bne.n	800746e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3308      	adds	r3, #8
 80074be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074ca:	f023 0301 	bic.w	r3, r3, #1
 80074ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3308      	adds	r3, #8
 80074d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074e0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e1      	bne.n	80074b8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3308      	adds	r3, #8
 80074fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074fe:	e853 3f00 	ldrex	r3, [r3]
 8007502:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800750a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3308      	adds	r3, #8
 8007514:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007518:	66fa      	str	r2, [r7, #108]	; 0x6c
 800751a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800751e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e3      	bne.n	80074f4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2220      	movs	r2, #32
 8007530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007542:	e853 3f00 	ldrex	r3, [r3]
 8007546:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754a:	f023 0310 	bic.w	r3, r3, #16
 800754e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800755c:	65bb      	str	r3, [r7, #88]	; 0x58
 800755e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007562:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800756a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e4      	bne.n	800753a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007574:	4618      	mov	r0, r3
 8007576:	f7fc f9fc 	bl	8003972 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2202      	movs	r2, #2
 800757e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800758c:	b29b      	uxth	r3, r3
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	b29b      	uxth	r3, r3
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f8d7 	bl	8007748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800759a:	e0b9      	b.n	8007710 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 80ab 	beq.w	8007714 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80075be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 80a6 	beq.w	8007714 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075ea:	647b      	str	r3, [r7, #68]	; 0x44
 80075ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e4      	bne.n	80075c8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3308      	adds	r3, #8
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	623b      	str	r3, [r7, #32]
   return(result);
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	f023 0301 	bic.w	r3, r3, #1
 8007614:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3308      	adds	r3, #8
 800761e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007622:	633a      	str	r2, [r7, #48]	; 0x30
 8007624:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e3      	bne.n	80075fe <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2220      	movs	r2, #32
 800763a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	60fb      	str	r3, [r7, #12]
   return(result);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0310 	bic.w	r3, r3, #16
 800765e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800766c:	61fb      	str	r3, [r7, #28]
 800766e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	69b9      	ldr	r1, [r7, #24]
 8007672:	69fa      	ldr	r2, [r7, #28]
 8007674:	e841 2300 	strex	r3, r2, [r1]
 8007678:	617b      	str	r3, [r7, #20]
   return(result);
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1e4      	bne.n	800764a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007686:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f85b 	bl	8007748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007692:	e03f      	b.n	8007714 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00e      	beq.n	80076be <HAL_UART_IRQHandler+0x56a>
 80076a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d008      	beq.n	80076be <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80076b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fc7b 	bl	8007fb2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076bc:	e02d      	b.n	800771a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80076be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00e      	beq.n	80076e8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80076ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d008      	beq.n	80076e8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d01c      	beq.n	8007718 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
    }
    return;
 80076e6:	e017      	b.n	8007718 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d012      	beq.n	800771a <HAL_UART_IRQHandler+0x5c6>
 80076f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00c      	beq.n	800771a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fc2c 	bl	8007f5e <UART_EndTransmit_IT>
    return;
 8007706:	e008      	b.n	800771a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007708:	bf00      	nop
 800770a:	e006      	b.n	800771a <HAL_UART_IRQHandler+0x5c6>
    return;
 800770c:	bf00      	nop
 800770e:	e004      	b.n	800771a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007710:	bf00      	nop
 8007712:	e002      	b.n	800771a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007714:	bf00      	nop
 8007716:	e000      	b.n	800771a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007718:	bf00      	nop
  }

}
 800771a:	37e8      	adds	r7, #232	; 0xe8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	431a      	orrs	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	431a      	orrs	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800778e:	f023 030c 	bic.w	r3, r3, #12
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6812      	ldr	r2, [r2, #0]
 8007796:	6979      	ldr	r1, [r7, #20]
 8007798:	430b      	orrs	r3, r1
 800779a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a1b      	ldr	r3, [r3, #32]
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	4313      	orrs	r3, r2
 80077c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4aa7      	ldr	r2, [pc, #668]	; (8007a78 <UART_SetConfig+0x318>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d120      	bne.n	8007822 <UART_SetConfig+0xc2>
 80077e0:	4ba6      	ldr	r3, [pc, #664]	; (8007a7c <UART_SetConfig+0x31c>)
 80077e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d817      	bhi.n	800781c <UART_SetConfig+0xbc>
 80077ec:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <UART_SetConfig+0x94>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	08007805 	.word	0x08007805
 80077f8:	08007811 	.word	0x08007811
 80077fc:	08007817 	.word	0x08007817
 8007800:	0800780b 	.word	0x0800780b
 8007804:	2301      	movs	r3, #1
 8007806:	77fb      	strb	r3, [r7, #31]
 8007808:	e0b5      	b.n	8007976 <UART_SetConfig+0x216>
 800780a:	2302      	movs	r3, #2
 800780c:	77fb      	strb	r3, [r7, #31]
 800780e:	e0b2      	b.n	8007976 <UART_SetConfig+0x216>
 8007810:	2304      	movs	r3, #4
 8007812:	77fb      	strb	r3, [r7, #31]
 8007814:	e0af      	b.n	8007976 <UART_SetConfig+0x216>
 8007816:	2308      	movs	r3, #8
 8007818:	77fb      	strb	r3, [r7, #31]
 800781a:	e0ac      	b.n	8007976 <UART_SetConfig+0x216>
 800781c:	2310      	movs	r3, #16
 800781e:	77fb      	strb	r3, [r7, #31]
 8007820:	e0a9      	b.n	8007976 <UART_SetConfig+0x216>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a96      	ldr	r2, [pc, #600]	; (8007a80 <UART_SetConfig+0x320>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d124      	bne.n	8007876 <UART_SetConfig+0x116>
 800782c:	4b93      	ldr	r3, [pc, #588]	; (8007a7c <UART_SetConfig+0x31c>)
 800782e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007834:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007838:	d011      	beq.n	800785e <UART_SetConfig+0xfe>
 800783a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800783e:	d817      	bhi.n	8007870 <UART_SetConfig+0x110>
 8007840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007844:	d011      	beq.n	800786a <UART_SetConfig+0x10a>
 8007846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800784a:	d811      	bhi.n	8007870 <UART_SetConfig+0x110>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <UART_SetConfig+0xf8>
 8007850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007854:	d006      	beq.n	8007864 <UART_SetConfig+0x104>
 8007856:	e00b      	b.n	8007870 <UART_SetConfig+0x110>
 8007858:	2300      	movs	r3, #0
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e08b      	b.n	8007976 <UART_SetConfig+0x216>
 800785e:	2302      	movs	r3, #2
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e088      	b.n	8007976 <UART_SetConfig+0x216>
 8007864:	2304      	movs	r3, #4
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	e085      	b.n	8007976 <UART_SetConfig+0x216>
 800786a:	2308      	movs	r3, #8
 800786c:	77fb      	strb	r3, [r7, #31]
 800786e:	e082      	b.n	8007976 <UART_SetConfig+0x216>
 8007870:	2310      	movs	r3, #16
 8007872:	77fb      	strb	r3, [r7, #31]
 8007874:	e07f      	b.n	8007976 <UART_SetConfig+0x216>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a82      	ldr	r2, [pc, #520]	; (8007a84 <UART_SetConfig+0x324>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d124      	bne.n	80078ca <UART_SetConfig+0x16a>
 8007880:	4b7e      	ldr	r3, [pc, #504]	; (8007a7c <UART_SetConfig+0x31c>)
 8007882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007884:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007888:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800788c:	d011      	beq.n	80078b2 <UART_SetConfig+0x152>
 800788e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007892:	d817      	bhi.n	80078c4 <UART_SetConfig+0x164>
 8007894:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007898:	d011      	beq.n	80078be <UART_SetConfig+0x15e>
 800789a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800789e:	d811      	bhi.n	80078c4 <UART_SetConfig+0x164>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <UART_SetConfig+0x14c>
 80078a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078a8:	d006      	beq.n	80078b8 <UART_SetConfig+0x158>
 80078aa:	e00b      	b.n	80078c4 <UART_SetConfig+0x164>
 80078ac:	2300      	movs	r3, #0
 80078ae:	77fb      	strb	r3, [r7, #31]
 80078b0:	e061      	b.n	8007976 <UART_SetConfig+0x216>
 80078b2:	2302      	movs	r3, #2
 80078b4:	77fb      	strb	r3, [r7, #31]
 80078b6:	e05e      	b.n	8007976 <UART_SetConfig+0x216>
 80078b8:	2304      	movs	r3, #4
 80078ba:	77fb      	strb	r3, [r7, #31]
 80078bc:	e05b      	b.n	8007976 <UART_SetConfig+0x216>
 80078be:	2308      	movs	r3, #8
 80078c0:	77fb      	strb	r3, [r7, #31]
 80078c2:	e058      	b.n	8007976 <UART_SetConfig+0x216>
 80078c4:	2310      	movs	r3, #16
 80078c6:	77fb      	strb	r3, [r7, #31]
 80078c8:	e055      	b.n	8007976 <UART_SetConfig+0x216>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a6e      	ldr	r2, [pc, #440]	; (8007a88 <UART_SetConfig+0x328>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d124      	bne.n	800791e <UART_SetConfig+0x1be>
 80078d4:	4b69      	ldr	r3, [pc, #420]	; (8007a7c <UART_SetConfig+0x31c>)
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80078dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078e0:	d011      	beq.n	8007906 <UART_SetConfig+0x1a6>
 80078e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078e6:	d817      	bhi.n	8007918 <UART_SetConfig+0x1b8>
 80078e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078ec:	d011      	beq.n	8007912 <UART_SetConfig+0x1b2>
 80078ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078f2:	d811      	bhi.n	8007918 <UART_SetConfig+0x1b8>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <UART_SetConfig+0x1a0>
 80078f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078fc:	d006      	beq.n	800790c <UART_SetConfig+0x1ac>
 80078fe:	e00b      	b.n	8007918 <UART_SetConfig+0x1b8>
 8007900:	2300      	movs	r3, #0
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	e037      	b.n	8007976 <UART_SetConfig+0x216>
 8007906:	2302      	movs	r3, #2
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e034      	b.n	8007976 <UART_SetConfig+0x216>
 800790c:	2304      	movs	r3, #4
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e031      	b.n	8007976 <UART_SetConfig+0x216>
 8007912:	2308      	movs	r3, #8
 8007914:	77fb      	strb	r3, [r7, #31]
 8007916:	e02e      	b.n	8007976 <UART_SetConfig+0x216>
 8007918:	2310      	movs	r3, #16
 800791a:	77fb      	strb	r3, [r7, #31]
 800791c:	e02b      	b.n	8007976 <UART_SetConfig+0x216>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a5a      	ldr	r2, [pc, #360]	; (8007a8c <UART_SetConfig+0x32c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d124      	bne.n	8007972 <UART_SetConfig+0x212>
 8007928:	4b54      	ldr	r3, [pc, #336]	; (8007a7c <UART_SetConfig+0x31c>)
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007930:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007934:	d011      	beq.n	800795a <UART_SetConfig+0x1fa>
 8007936:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800793a:	d817      	bhi.n	800796c <UART_SetConfig+0x20c>
 800793c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007940:	d011      	beq.n	8007966 <UART_SetConfig+0x206>
 8007942:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007946:	d811      	bhi.n	800796c <UART_SetConfig+0x20c>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <UART_SetConfig+0x1f4>
 800794c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007950:	d006      	beq.n	8007960 <UART_SetConfig+0x200>
 8007952:	e00b      	b.n	800796c <UART_SetConfig+0x20c>
 8007954:	2300      	movs	r3, #0
 8007956:	77fb      	strb	r3, [r7, #31]
 8007958:	e00d      	b.n	8007976 <UART_SetConfig+0x216>
 800795a:	2302      	movs	r3, #2
 800795c:	77fb      	strb	r3, [r7, #31]
 800795e:	e00a      	b.n	8007976 <UART_SetConfig+0x216>
 8007960:	2304      	movs	r3, #4
 8007962:	77fb      	strb	r3, [r7, #31]
 8007964:	e007      	b.n	8007976 <UART_SetConfig+0x216>
 8007966:	2308      	movs	r3, #8
 8007968:	77fb      	strb	r3, [r7, #31]
 800796a:	e004      	b.n	8007976 <UART_SetConfig+0x216>
 800796c:	2310      	movs	r3, #16
 800796e:	77fb      	strb	r3, [r7, #31]
 8007970:	e001      	b.n	8007976 <UART_SetConfig+0x216>
 8007972:	2310      	movs	r3, #16
 8007974:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800797e:	d15b      	bne.n	8007a38 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007980:	7ffb      	ldrb	r3, [r7, #31]
 8007982:	2b08      	cmp	r3, #8
 8007984:	d827      	bhi.n	80079d6 <UART_SetConfig+0x276>
 8007986:	a201      	add	r2, pc, #4	; (adr r2, 800798c <UART_SetConfig+0x22c>)
 8007988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798c:	080079b1 	.word	0x080079b1
 8007990:	080079b9 	.word	0x080079b9
 8007994:	080079c1 	.word	0x080079c1
 8007998:	080079d7 	.word	0x080079d7
 800799c:	080079c7 	.word	0x080079c7
 80079a0:	080079d7 	.word	0x080079d7
 80079a4:	080079d7 	.word	0x080079d7
 80079a8:	080079d7 	.word	0x080079d7
 80079ac:	080079cf 	.word	0x080079cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079b0:	f7fd fe42 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 80079b4:	61b8      	str	r0, [r7, #24]
        break;
 80079b6:	e013      	b.n	80079e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079b8:	f7fd fe60 	bl	800567c <HAL_RCC_GetPCLK2Freq>
 80079bc:	61b8      	str	r0, [r7, #24]
        break;
 80079be:	e00f      	b.n	80079e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079c0:	4b33      	ldr	r3, [pc, #204]	; (8007a90 <UART_SetConfig+0x330>)
 80079c2:	61bb      	str	r3, [r7, #24]
        break;
 80079c4:	e00c      	b.n	80079e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079c6:	f7fd fdc1 	bl	800554c <HAL_RCC_GetSysClockFreq>
 80079ca:	61b8      	str	r0, [r7, #24]
        break;
 80079cc:	e008      	b.n	80079e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079d2:	61bb      	str	r3, [r7, #24]
        break;
 80079d4:	e004      	b.n	80079e0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	77bb      	strb	r3, [r7, #30]
        break;
 80079de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 8082 	beq.w	8007aec <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	005a      	lsls	r2, r3, #1
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	085b      	lsrs	r3, r3, #1
 80079f2:	441a      	add	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	2b0f      	cmp	r3, #15
 8007a02:	d916      	bls.n	8007a32 <UART_SetConfig+0x2d2>
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a0a:	d212      	bcs.n	8007a32 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	f023 030f 	bic.w	r3, r3, #15
 8007a14:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	085b      	lsrs	r3, r3, #1
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	f003 0307 	and.w	r3, r3, #7
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	89fb      	ldrh	r3, [r7, #14]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	89fa      	ldrh	r2, [r7, #14]
 8007a2e:	60da      	str	r2, [r3, #12]
 8007a30:	e05c      	b.n	8007aec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	77bb      	strb	r3, [r7, #30]
 8007a36:	e059      	b.n	8007aec <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a38:	7ffb      	ldrb	r3, [r7, #31]
 8007a3a:	2b08      	cmp	r3, #8
 8007a3c:	d835      	bhi.n	8007aaa <UART_SetConfig+0x34a>
 8007a3e:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <UART_SetConfig+0x2e4>)
 8007a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a44:	08007a69 	.word	0x08007a69
 8007a48:	08007a71 	.word	0x08007a71
 8007a4c:	08007a95 	.word	0x08007a95
 8007a50:	08007aab 	.word	0x08007aab
 8007a54:	08007a9b 	.word	0x08007a9b
 8007a58:	08007aab 	.word	0x08007aab
 8007a5c:	08007aab 	.word	0x08007aab
 8007a60:	08007aab 	.word	0x08007aab
 8007a64:	08007aa3 	.word	0x08007aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a68:	f7fd fde6 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 8007a6c:	61b8      	str	r0, [r7, #24]
        break;
 8007a6e:	e021      	b.n	8007ab4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a70:	f7fd fe04 	bl	800567c <HAL_RCC_GetPCLK2Freq>
 8007a74:	61b8      	str	r0, [r7, #24]
        break;
 8007a76:	e01d      	b.n	8007ab4 <UART_SetConfig+0x354>
 8007a78:	40013800 	.word	0x40013800
 8007a7c:	40021000 	.word	0x40021000
 8007a80:	40004400 	.word	0x40004400
 8007a84:	40004800 	.word	0x40004800
 8007a88:	40004c00 	.word	0x40004c00
 8007a8c:	40005000 	.word	0x40005000
 8007a90:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a94:	4b1b      	ldr	r3, [pc, #108]	; (8007b04 <UART_SetConfig+0x3a4>)
 8007a96:	61bb      	str	r3, [r7, #24]
        break;
 8007a98:	e00c      	b.n	8007ab4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a9a:	f7fd fd57 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8007a9e:	61b8      	str	r0, [r7, #24]
        break;
 8007aa0:	e008      	b.n	8007ab4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aa6:	61bb      	str	r3, [r7, #24]
        break;
 8007aa8:	e004      	b.n	8007ab4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	77bb      	strb	r3, [r7, #30]
        break;
 8007ab2:	bf00      	nop
    }

    if (pclk != 0U)
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d018      	beq.n	8007aec <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	085a      	lsrs	r2, r3, #1
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	441a      	add	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007acc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	2b0f      	cmp	r3, #15
 8007ad2:	d909      	bls.n	8007ae8 <UART_SetConfig+0x388>
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ada:	d205      	bcs.n	8007ae8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60da      	str	r2, [r3, #12]
 8007ae6:	e001      	b.n	8007aec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007af8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3720      	adds	r7, #32
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	007a1200 	.word	0x007a1200

08007b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	f003 0308 	and.w	r3, r3, #8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	f003 0310 	and.w	r3, r3, #16
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01a      	beq.n	8007c1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c06:	d10a      	bne.n	8007c1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	605a      	str	r2, [r3, #4]
  }
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b098      	sub	sp, #96	; 0x60
 8007c50:	af02      	add	r7, sp, #8
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c5c:	f7fa fa74 	bl	8002148 <HAL_GetTick>
 8007c60:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0308 	and.w	r3, r3, #8
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d12e      	bne.n	8007cce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f88c 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d021      	beq.n	8007cce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8007caa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e6      	bne.n	8007c8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e062      	b.n	8007d94 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d149      	bne.n	8007d70 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f856 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d03c      	beq.n	8007d70 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	623b      	str	r3, [r7, #32]
   return(result);
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d14:	633b      	str	r3, [r7, #48]	; 0x30
 8007d16:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e6      	bne.n	8007cf6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0301 	bic.w	r3, r3, #1
 8007d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3308      	adds	r3, #8
 8007d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d48:	61fa      	str	r2, [r7, #28]
 8007d4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	69b9      	ldr	r1, [r7, #24]
 8007d4e:	69fa      	ldr	r2, [r7, #28]
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	617b      	str	r3, [r7, #20]
   return(result);
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e5      	bne.n	8007d28 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e011      	b.n	8007d94 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3758      	adds	r7, #88	; 0x58
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dac:	e049      	b.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db4:	d045      	beq.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db6:	f7fa f9c7 	bl	8002148 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d302      	bcc.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e048      	b.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d031      	beq.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	f003 0308 	and.w	r3, r3, #8
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d110      	bne.n	8007e0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2208      	movs	r2, #8
 8007df2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 f838 	bl	8007e6a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2208      	movs	r2, #8
 8007dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e029      	b.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69db      	ldr	r3, [r3, #28]
 8007e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e1c:	d111      	bne.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 f81e 	bl	8007e6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e00f      	b.n	8007e62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69da      	ldr	r2, [r3, #28]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	bf0c      	ite	eq
 8007e52:	2301      	moveq	r3, #1
 8007e54:	2300      	movne	r3, #0
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	79fb      	ldrb	r3, [r7, #7]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d0a6      	beq.n	8007dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b095      	sub	sp, #84	; 0x54
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7a:	e853 3f00 	ldrex	r3, [r3]
 8007e7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e90:	643b      	str	r3, [r7, #64]	; 0x40
 8007e92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e98:	e841 2300 	strex	r3, r2, [r1]
 8007e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1e6      	bne.n	8007e72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	f023 0301 	bic.w	r3, r3, #1
 8007eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ec4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e5      	bne.n	8007ea4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d118      	bne.n	8007f12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f023 0310 	bic.w	r3, r3, #16
 8007ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007efe:	61bb      	str	r3, [r7, #24]
 8007f00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f02:	6979      	ldr	r1, [r7, #20]
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	e841 2300 	strex	r3, r2, [r1]
 8007f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1e6      	bne.n	8007ee0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2220      	movs	r2, #32
 8007f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f26:	bf00      	nop
 8007f28:	3754      	adds	r7, #84	; 0x54
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7ff fbef 	bl	8007734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f56:	bf00      	nop
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b088      	sub	sp, #32
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f7a:	61fb      	str	r3, [r7, #28]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	61bb      	str	r3, [r7, #24]
 8007f86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	6979      	ldr	r1, [r7, #20]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	613b      	str	r3, [r7, #16]
   return(result);
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e6      	bne.n	8007f66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff fbbb 	bl	8007720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007faa:	bf00      	nop
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fba:	bf00      	nop
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007fce:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007fd2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	43db      	mvns	r3, r3
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	f107 0014 	add.w	r0, r7, #20
 800800a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	b004      	add	sp, #16
 800803c:	4770      	bx	lr
	...

08008040 <__errno>:
 8008040:	4b01      	ldr	r3, [pc, #4]	; (8008048 <__errno+0x8>)
 8008042:	6818      	ldr	r0, [r3, #0]
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	20000074 	.word	0x20000074

0800804c <__libc_init_array>:
 800804c:	b570      	push	{r4, r5, r6, lr}
 800804e:	4d0d      	ldr	r5, [pc, #52]	; (8008084 <__libc_init_array+0x38>)
 8008050:	4c0d      	ldr	r4, [pc, #52]	; (8008088 <__libc_init_array+0x3c>)
 8008052:	1b64      	subs	r4, r4, r5
 8008054:	10a4      	asrs	r4, r4, #2
 8008056:	2600      	movs	r6, #0
 8008058:	42a6      	cmp	r6, r4
 800805a:	d109      	bne.n	8008070 <__libc_init_array+0x24>
 800805c:	4d0b      	ldr	r5, [pc, #44]	; (800808c <__libc_init_array+0x40>)
 800805e:	4c0c      	ldr	r4, [pc, #48]	; (8008090 <__libc_init_array+0x44>)
 8008060:	f004 fc92 	bl	800c988 <_init>
 8008064:	1b64      	subs	r4, r4, r5
 8008066:	10a4      	asrs	r4, r4, #2
 8008068:	2600      	movs	r6, #0
 800806a:	42a6      	cmp	r6, r4
 800806c:	d105      	bne.n	800807a <__libc_init_array+0x2e>
 800806e:	bd70      	pop	{r4, r5, r6, pc}
 8008070:	f855 3b04 	ldr.w	r3, [r5], #4
 8008074:	4798      	blx	r3
 8008076:	3601      	adds	r6, #1
 8008078:	e7ee      	b.n	8008058 <__libc_init_array+0xc>
 800807a:	f855 3b04 	ldr.w	r3, [r5], #4
 800807e:	4798      	blx	r3
 8008080:	3601      	adds	r6, #1
 8008082:	e7f2      	b.n	800806a <__libc_init_array+0x1e>
 8008084:	0800ce9c 	.word	0x0800ce9c
 8008088:	0800ce9c 	.word	0x0800ce9c
 800808c:	0800ce9c 	.word	0x0800ce9c
 8008090:	0800cea0 	.word	0x0800cea0

08008094 <memset>:
 8008094:	4402      	add	r2, r0
 8008096:	4603      	mov	r3, r0
 8008098:	4293      	cmp	r3, r2
 800809a:	d100      	bne.n	800809e <memset+0xa>
 800809c:	4770      	bx	lr
 800809e:	f803 1b01 	strb.w	r1, [r3], #1
 80080a2:	e7f9      	b.n	8008098 <memset+0x4>

080080a4 <__cvt>:
 80080a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	ec55 4b10 	vmov	r4, r5, d0
 80080ac:	2d00      	cmp	r5, #0
 80080ae:	460e      	mov	r6, r1
 80080b0:	4619      	mov	r1, r3
 80080b2:	462b      	mov	r3, r5
 80080b4:	bfbb      	ittet	lt
 80080b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080ba:	461d      	movlt	r5, r3
 80080bc:	2300      	movge	r3, #0
 80080be:	232d      	movlt	r3, #45	; 0x2d
 80080c0:	700b      	strb	r3, [r1, #0]
 80080c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080c8:	4691      	mov	r9, r2
 80080ca:	f023 0820 	bic.w	r8, r3, #32
 80080ce:	bfbc      	itt	lt
 80080d0:	4622      	movlt	r2, r4
 80080d2:	4614      	movlt	r4, r2
 80080d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080d8:	d005      	beq.n	80080e6 <__cvt+0x42>
 80080da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080de:	d100      	bne.n	80080e2 <__cvt+0x3e>
 80080e0:	3601      	adds	r6, #1
 80080e2:	2102      	movs	r1, #2
 80080e4:	e000      	b.n	80080e8 <__cvt+0x44>
 80080e6:	2103      	movs	r1, #3
 80080e8:	ab03      	add	r3, sp, #12
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	ab02      	add	r3, sp, #8
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	ec45 4b10 	vmov	d0, r4, r5
 80080f4:	4653      	mov	r3, sl
 80080f6:	4632      	mov	r2, r6
 80080f8:	f001 fdae 	bl	8009c58 <_dtoa_r>
 80080fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008100:	4607      	mov	r7, r0
 8008102:	d102      	bne.n	800810a <__cvt+0x66>
 8008104:	f019 0f01 	tst.w	r9, #1
 8008108:	d022      	beq.n	8008150 <__cvt+0xac>
 800810a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800810e:	eb07 0906 	add.w	r9, r7, r6
 8008112:	d110      	bne.n	8008136 <__cvt+0x92>
 8008114:	783b      	ldrb	r3, [r7, #0]
 8008116:	2b30      	cmp	r3, #48	; 0x30
 8008118:	d10a      	bne.n	8008130 <__cvt+0x8c>
 800811a:	2200      	movs	r2, #0
 800811c:	2300      	movs	r3, #0
 800811e:	4620      	mov	r0, r4
 8008120:	4629      	mov	r1, r5
 8008122:	f7f8 fcd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008126:	b918      	cbnz	r0, 8008130 <__cvt+0x8c>
 8008128:	f1c6 0601 	rsb	r6, r6, #1
 800812c:	f8ca 6000 	str.w	r6, [sl]
 8008130:	f8da 3000 	ldr.w	r3, [sl]
 8008134:	4499      	add	r9, r3
 8008136:	2200      	movs	r2, #0
 8008138:	2300      	movs	r3, #0
 800813a:	4620      	mov	r0, r4
 800813c:	4629      	mov	r1, r5
 800813e:	f7f8 fcc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008142:	b108      	cbz	r0, 8008148 <__cvt+0xa4>
 8008144:	f8cd 900c 	str.w	r9, [sp, #12]
 8008148:	2230      	movs	r2, #48	; 0x30
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	454b      	cmp	r3, r9
 800814e:	d307      	bcc.n	8008160 <__cvt+0xbc>
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008154:	1bdb      	subs	r3, r3, r7
 8008156:	4638      	mov	r0, r7
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	b004      	add	sp, #16
 800815c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008160:	1c59      	adds	r1, r3, #1
 8008162:	9103      	str	r1, [sp, #12]
 8008164:	701a      	strb	r2, [r3, #0]
 8008166:	e7f0      	b.n	800814a <__cvt+0xa6>

08008168 <__exponent>:
 8008168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800816a:	4603      	mov	r3, r0
 800816c:	2900      	cmp	r1, #0
 800816e:	bfb8      	it	lt
 8008170:	4249      	neglt	r1, r1
 8008172:	f803 2b02 	strb.w	r2, [r3], #2
 8008176:	bfb4      	ite	lt
 8008178:	222d      	movlt	r2, #45	; 0x2d
 800817a:	222b      	movge	r2, #43	; 0x2b
 800817c:	2909      	cmp	r1, #9
 800817e:	7042      	strb	r2, [r0, #1]
 8008180:	dd2a      	ble.n	80081d8 <__exponent+0x70>
 8008182:	f10d 0407 	add.w	r4, sp, #7
 8008186:	46a4      	mov	ip, r4
 8008188:	270a      	movs	r7, #10
 800818a:	46a6      	mov	lr, r4
 800818c:	460a      	mov	r2, r1
 800818e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008192:	fb07 1516 	mls	r5, r7, r6, r1
 8008196:	3530      	adds	r5, #48	; 0x30
 8008198:	2a63      	cmp	r2, #99	; 0x63
 800819a:	f104 34ff 	add.w	r4, r4, #4294967295
 800819e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081a2:	4631      	mov	r1, r6
 80081a4:	dcf1      	bgt.n	800818a <__exponent+0x22>
 80081a6:	3130      	adds	r1, #48	; 0x30
 80081a8:	f1ae 0502 	sub.w	r5, lr, #2
 80081ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081b0:	1c44      	adds	r4, r0, #1
 80081b2:	4629      	mov	r1, r5
 80081b4:	4561      	cmp	r1, ip
 80081b6:	d30a      	bcc.n	80081ce <__exponent+0x66>
 80081b8:	f10d 0209 	add.w	r2, sp, #9
 80081bc:	eba2 020e 	sub.w	r2, r2, lr
 80081c0:	4565      	cmp	r5, ip
 80081c2:	bf88      	it	hi
 80081c4:	2200      	movhi	r2, #0
 80081c6:	4413      	add	r3, r2
 80081c8:	1a18      	subs	r0, r3, r0
 80081ca:	b003      	add	sp, #12
 80081cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081d6:	e7ed      	b.n	80081b4 <__exponent+0x4c>
 80081d8:	2330      	movs	r3, #48	; 0x30
 80081da:	3130      	adds	r1, #48	; 0x30
 80081dc:	7083      	strb	r3, [r0, #2]
 80081de:	70c1      	strb	r1, [r0, #3]
 80081e0:	1d03      	adds	r3, r0, #4
 80081e2:	e7f1      	b.n	80081c8 <__exponent+0x60>

080081e4 <_printf_float>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	ed2d 8b02 	vpush	{d8}
 80081ec:	b08d      	sub	sp, #52	; 0x34
 80081ee:	460c      	mov	r4, r1
 80081f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081f4:	4616      	mov	r6, r2
 80081f6:	461f      	mov	r7, r3
 80081f8:	4605      	mov	r5, r0
 80081fa:	f002 fe8b 	bl	800af14 <_localeconv_r>
 80081fe:	f8d0 a000 	ldr.w	sl, [r0]
 8008202:	4650      	mov	r0, sl
 8008204:	f7f7 ffe4 	bl	80001d0 <strlen>
 8008208:	2300      	movs	r3, #0
 800820a:	930a      	str	r3, [sp, #40]	; 0x28
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	9305      	str	r3, [sp, #20]
 8008210:	f8d8 3000 	ldr.w	r3, [r8]
 8008214:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008218:	3307      	adds	r3, #7
 800821a:	f023 0307 	bic.w	r3, r3, #7
 800821e:	f103 0208 	add.w	r2, r3, #8
 8008222:	f8c8 2000 	str.w	r2, [r8]
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800822e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008232:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008236:	9307      	str	r3, [sp, #28]
 8008238:	f8cd 8018 	str.w	r8, [sp, #24]
 800823c:	ee08 0a10 	vmov	s16, r0
 8008240:	4b9f      	ldr	r3, [pc, #636]	; (80084c0 <_printf_float+0x2dc>)
 8008242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008246:	f04f 32ff 	mov.w	r2, #4294967295
 800824a:	f7f8 fc6f 	bl	8000b2c <__aeabi_dcmpun>
 800824e:	bb88      	cbnz	r0, 80082b4 <_printf_float+0xd0>
 8008250:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008254:	4b9a      	ldr	r3, [pc, #616]	; (80084c0 <_printf_float+0x2dc>)
 8008256:	f04f 32ff 	mov.w	r2, #4294967295
 800825a:	f7f8 fc49 	bl	8000af0 <__aeabi_dcmple>
 800825e:	bb48      	cbnz	r0, 80082b4 <_printf_float+0xd0>
 8008260:	2200      	movs	r2, #0
 8008262:	2300      	movs	r3, #0
 8008264:	4640      	mov	r0, r8
 8008266:	4649      	mov	r1, r9
 8008268:	f7f8 fc38 	bl	8000adc <__aeabi_dcmplt>
 800826c:	b110      	cbz	r0, 8008274 <_printf_float+0x90>
 800826e:	232d      	movs	r3, #45	; 0x2d
 8008270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008274:	4b93      	ldr	r3, [pc, #588]	; (80084c4 <_printf_float+0x2e0>)
 8008276:	4894      	ldr	r0, [pc, #592]	; (80084c8 <_printf_float+0x2e4>)
 8008278:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800827c:	bf94      	ite	ls
 800827e:	4698      	movls	r8, r3
 8008280:	4680      	movhi	r8, r0
 8008282:	2303      	movs	r3, #3
 8008284:	6123      	str	r3, [r4, #16]
 8008286:	9b05      	ldr	r3, [sp, #20]
 8008288:	f023 0204 	bic.w	r2, r3, #4
 800828c:	6022      	str	r2, [r4, #0]
 800828e:	f04f 0900 	mov.w	r9, #0
 8008292:	9700      	str	r7, [sp, #0]
 8008294:	4633      	mov	r3, r6
 8008296:	aa0b      	add	r2, sp, #44	; 0x2c
 8008298:	4621      	mov	r1, r4
 800829a:	4628      	mov	r0, r5
 800829c:	f000 f9d8 	bl	8008650 <_printf_common>
 80082a0:	3001      	adds	r0, #1
 80082a2:	f040 8090 	bne.w	80083c6 <_printf_float+0x1e2>
 80082a6:	f04f 30ff 	mov.w	r0, #4294967295
 80082aa:	b00d      	add	sp, #52	; 0x34
 80082ac:	ecbd 8b02 	vpop	{d8}
 80082b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b4:	4642      	mov	r2, r8
 80082b6:	464b      	mov	r3, r9
 80082b8:	4640      	mov	r0, r8
 80082ba:	4649      	mov	r1, r9
 80082bc:	f7f8 fc36 	bl	8000b2c <__aeabi_dcmpun>
 80082c0:	b140      	cbz	r0, 80082d4 <_printf_float+0xf0>
 80082c2:	464b      	mov	r3, r9
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bfbc      	itt	lt
 80082c8:	232d      	movlt	r3, #45	; 0x2d
 80082ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082ce:	487f      	ldr	r0, [pc, #508]	; (80084cc <_printf_float+0x2e8>)
 80082d0:	4b7f      	ldr	r3, [pc, #508]	; (80084d0 <_printf_float+0x2ec>)
 80082d2:	e7d1      	b.n	8008278 <_printf_float+0x94>
 80082d4:	6863      	ldr	r3, [r4, #4]
 80082d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082da:	9206      	str	r2, [sp, #24]
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	d13f      	bne.n	8008360 <_printf_float+0x17c>
 80082e0:	2306      	movs	r3, #6
 80082e2:	6063      	str	r3, [r4, #4]
 80082e4:	9b05      	ldr	r3, [sp, #20]
 80082e6:	6861      	ldr	r1, [r4, #4]
 80082e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082ec:	2300      	movs	r3, #0
 80082ee:	9303      	str	r3, [sp, #12]
 80082f0:	ab0a      	add	r3, sp, #40	; 0x28
 80082f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082f6:	ab09      	add	r3, sp, #36	; 0x24
 80082f8:	ec49 8b10 	vmov	d0, r8, r9
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	6022      	str	r2, [r4, #0]
 8008300:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008304:	4628      	mov	r0, r5
 8008306:	f7ff fecd 	bl	80080a4 <__cvt>
 800830a:	9b06      	ldr	r3, [sp, #24]
 800830c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800830e:	2b47      	cmp	r3, #71	; 0x47
 8008310:	4680      	mov	r8, r0
 8008312:	d108      	bne.n	8008326 <_printf_float+0x142>
 8008314:	1cc8      	adds	r0, r1, #3
 8008316:	db02      	blt.n	800831e <_printf_float+0x13a>
 8008318:	6863      	ldr	r3, [r4, #4]
 800831a:	4299      	cmp	r1, r3
 800831c:	dd41      	ble.n	80083a2 <_printf_float+0x1be>
 800831e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008322:	fa5f fb8b 	uxtb.w	fp, fp
 8008326:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800832a:	d820      	bhi.n	800836e <_printf_float+0x18a>
 800832c:	3901      	subs	r1, #1
 800832e:	465a      	mov	r2, fp
 8008330:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008334:	9109      	str	r1, [sp, #36]	; 0x24
 8008336:	f7ff ff17 	bl	8008168 <__exponent>
 800833a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833c:	1813      	adds	r3, r2, r0
 800833e:	2a01      	cmp	r2, #1
 8008340:	4681      	mov	r9, r0
 8008342:	6123      	str	r3, [r4, #16]
 8008344:	dc02      	bgt.n	800834c <_printf_float+0x168>
 8008346:	6822      	ldr	r2, [r4, #0]
 8008348:	07d2      	lsls	r2, r2, #31
 800834a:	d501      	bpl.n	8008350 <_printf_float+0x16c>
 800834c:	3301      	adds	r3, #1
 800834e:	6123      	str	r3, [r4, #16]
 8008350:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008354:	2b00      	cmp	r3, #0
 8008356:	d09c      	beq.n	8008292 <_printf_float+0xae>
 8008358:	232d      	movs	r3, #45	; 0x2d
 800835a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800835e:	e798      	b.n	8008292 <_printf_float+0xae>
 8008360:	9a06      	ldr	r2, [sp, #24]
 8008362:	2a47      	cmp	r2, #71	; 0x47
 8008364:	d1be      	bne.n	80082e4 <_printf_float+0x100>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1bc      	bne.n	80082e4 <_printf_float+0x100>
 800836a:	2301      	movs	r3, #1
 800836c:	e7b9      	b.n	80082e2 <_printf_float+0xfe>
 800836e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008372:	d118      	bne.n	80083a6 <_printf_float+0x1c2>
 8008374:	2900      	cmp	r1, #0
 8008376:	6863      	ldr	r3, [r4, #4]
 8008378:	dd0b      	ble.n	8008392 <_printf_float+0x1ae>
 800837a:	6121      	str	r1, [r4, #16]
 800837c:	b913      	cbnz	r3, 8008384 <_printf_float+0x1a0>
 800837e:	6822      	ldr	r2, [r4, #0]
 8008380:	07d0      	lsls	r0, r2, #31
 8008382:	d502      	bpl.n	800838a <_printf_float+0x1a6>
 8008384:	3301      	adds	r3, #1
 8008386:	440b      	add	r3, r1
 8008388:	6123      	str	r3, [r4, #16]
 800838a:	65a1      	str	r1, [r4, #88]	; 0x58
 800838c:	f04f 0900 	mov.w	r9, #0
 8008390:	e7de      	b.n	8008350 <_printf_float+0x16c>
 8008392:	b913      	cbnz	r3, 800839a <_printf_float+0x1b6>
 8008394:	6822      	ldr	r2, [r4, #0]
 8008396:	07d2      	lsls	r2, r2, #31
 8008398:	d501      	bpl.n	800839e <_printf_float+0x1ba>
 800839a:	3302      	adds	r3, #2
 800839c:	e7f4      	b.n	8008388 <_printf_float+0x1a4>
 800839e:	2301      	movs	r3, #1
 80083a0:	e7f2      	b.n	8008388 <_printf_float+0x1a4>
 80083a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a8:	4299      	cmp	r1, r3
 80083aa:	db05      	blt.n	80083b8 <_printf_float+0x1d4>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	6121      	str	r1, [r4, #16]
 80083b0:	07d8      	lsls	r0, r3, #31
 80083b2:	d5ea      	bpl.n	800838a <_printf_float+0x1a6>
 80083b4:	1c4b      	adds	r3, r1, #1
 80083b6:	e7e7      	b.n	8008388 <_printf_float+0x1a4>
 80083b8:	2900      	cmp	r1, #0
 80083ba:	bfd4      	ite	le
 80083bc:	f1c1 0202 	rsble	r2, r1, #2
 80083c0:	2201      	movgt	r2, #1
 80083c2:	4413      	add	r3, r2
 80083c4:	e7e0      	b.n	8008388 <_printf_float+0x1a4>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	055a      	lsls	r2, r3, #21
 80083ca:	d407      	bmi.n	80083dc <_printf_float+0x1f8>
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	4642      	mov	r2, r8
 80083d0:	4631      	mov	r1, r6
 80083d2:	4628      	mov	r0, r5
 80083d4:	47b8      	blx	r7
 80083d6:	3001      	adds	r0, #1
 80083d8:	d12c      	bne.n	8008434 <_printf_float+0x250>
 80083da:	e764      	b.n	80082a6 <_printf_float+0xc2>
 80083dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083e0:	f240 80e0 	bls.w	80085a4 <_printf_float+0x3c0>
 80083e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083e8:	2200      	movs	r2, #0
 80083ea:	2300      	movs	r3, #0
 80083ec:	f7f8 fb6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d034      	beq.n	800845e <_printf_float+0x27a>
 80083f4:	4a37      	ldr	r2, [pc, #220]	; (80084d4 <_printf_float+0x2f0>)
 80083f6:	2301      	movs	r3, #1
 80083f8:	4631      	mov	r1, r6
 80083fa:	4628      	mov	r0, r5
 80083fc:	47b8      	blx	r7
 80083fe:	3001      	adds	r0, #1
 8008400:	f43f af51 	beq.w	80082a6 <_printf_float+0xc2>
 8008404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008408:	429a      	cmp	r2, r3
 800840a:	db02      	blt.n	8008412 <_printf_float+0x22e>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	07d8      	lsls	r0, r3, #31
 8008410:	d510      	bpl.n	8008434 <_printf_float+0x250>
 8008412:	ee18 3a10 	vmov	r3, s16
 8008416:	4652      	mov	r2, sl
 8008418:	4631      	mov	r1, r6
 800841a:	4628      	mov	r0, r5
 800841c:	47b8      	blx	r7
 800841e:	3001      	adds	r0, #1
 8008420:	f43f af41 	beq.w	80082a6 <_printf_float+0xc2>
 8008424:	f04f 0800 	mov.w	r8, #0
 8008428:	f104 091a 	add.w	r9, r4, #26
 800842c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800842e:	3b01      	subs	r3, #1
 8008430:	4543      	cmp	r3, r8
 8008432:	dc09      	bgt.n	8008448 <_printf_float+0x264>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	079b      	lsls	r3, r3, #30
 8008438:	f100 8105 	bmi.w	8008646 <_printf_float+0x462>
 800843c:	68e0      	ldr	r0, [r4, #12]
 800843e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008440:	4298      	cmp	r0, r3
 8008442:	bfb8      	it	lt
 8008444:	4618      	movlt	r0, r3
 8008446:	e730      	b.n	80082aa <_printf_float+0xc6>
 8008448:	2301      	movs	r3, #1
 800844a:	464a      	mov	r2, r9
 800844c:	4631      	mov	r1, r6
 800844e:	4628      	mov	r0, r5
 8008450:	47b8      	blx	r7
 8008452:	3001      	adds	r0, #1
 8008454:	f43f af27 	beq.w	80082a6 <_printf_float+0xc2>
 8008458:	f108 0801 	add.w	r8, r8, #1
 800845c:	e7e6      	b.n	800842c <_printf_float+0x248>
 800845e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008460:	2b00      	cmp	r3, #0
 8008462:	dc39      	bgt.n	80084d8 <_printf_float+0x2f4>
 8008464:	4a1b      	ldr	r2, [pc, #108]	; (80084d4 <_printf_float+0x2f0>)
 8008466:	2301      	movs	r3, #1
 8008468:	4631      	mov	r1, r6
 800846a:	4628      	mov	r0, r5
 800846c:	47b8      	blx	r7
 800846e:	3001      	adds	r0, #1
 8008470:	f43f af19 	beq.w	80082a6 <_printf_float+0xc2>
 8008474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008478:	4313      	orrs	r3, r2
 800847a:	d102      	bne.n	8008482 <_printf_float+0x29e>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	07d9      	lsls	r1, r3, #31
 8008480:	d5d8      	bpl.n	8008434 <_printf_float+0x250>
 8008482:	ee18 3a10 	vmov	r3, s16
 8008486:	4652      	mov	r2, sl
 8008488:	4631      	mov	r1, r6
 800848a:	4628      	mov	r0, r5
 800848c:	47b8      	blx	r7
 800848e:	3001      	adds	r0, #1
 8008490:	f43f af09 	beq.w	80082a6 <_printf_float+0xc2>
 8008494:	f04f 0900 	mov.w	r9, #0
 8008498:	f104 0a1a 	add.w	sl, r4, #26
 800849c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849e:	425b      	negs	r3, r3
 80084a0:	454b      	cmp	r3, r9
 80084a2:	dc01      	bgt.n	80084a8 <_printf_float+0x2c4>
 80084a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a6:	e792      	b.n	80083ce <_printf_float+0x1ea>
 80084a8:	2301      	movs	r3, #1
 80084aa:	4652      	mov	r2, sl
 80084ac:	4631      	mov	r1, r6
 80084ae:	4628      	mov	r0, r5
 80084b0:	47b8      	blx	r7
 80084b2:	3001      	adds	r0, #1
 80084b4:	f43f aef7 	beq.w	80082a6 <_printf_float+0xc2>
 80084b8:	f109 0901 	add.w	r9, r9, #1
 80084bc:	e7ee      	b.n	800849c <_printf_float+0x2b8>
 80084be:	bf00      	nop
 80084c0:	7fefffff 	.word	0x7fefffff
 80084c4:	0800c9f8 	.word	0x0800c9f8
 80084c8:	0800c9fc 	.word	0x0800c9fc
 80084cc:	0800ca04 	.word	0x0800ca04
 80084d0:	0800ca00 	.word	0x0800ca00
 80084d4:	0800ca08 	.word	0x0800ca08
 80084d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084dc:	429a      	cmp	r2, r3
 80084de:	bfa8      	it	ge
 80084e0:	461a      	movge	r2, r3
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	4691      	mov	r9, r2
 80084e6:	dc37      	bgt.n	8008558 <_printf_float+0x374>
 80084e8:	f04f 0b00 	mov.w	fp, #0
 80084ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084f0:	f104 021a 	add.w	r2, r4, #26
 80084f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084f6:	9305      	str	r3, [sp, #20]
 80084f8:	eba3 0309 	sub.w	r3, r3, r9
 80084fc:	455b      	cmp	r3, fp
 80084fe:	dc33      	bgt.n	8008568 <_printf_float+0x384>
 8008500:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008504:	429a      	cmp	r2, r3
 8008506:	db3b      	blt.n	8008580 <_printf_float+0x39c>
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	07da      	lsls	r2, r3, #31
 800850c:	d438      	bmi.n	8008580 <_printf_float+0x39c>
 800850e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008510:	9a05      	ldr	r2, [sp, #20]
 8008512:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008514:	1a9a      	subs	r2, r3, r2
 8008516:	eba3 0901 	sub.w	r9, r3, r1
 800851a:	4591      	cmp	r9, r2
 800851c:	bfa8      	it	ge
 800851e:	4691      	movge	r9, r2
 8008520:	f1b9 0f00 	cmp.w	r9, #0
 8008524:	dc35      	bgt.n	8008592 <_printf_float+0x3ae>
 8008526:	f04f 0800 	mov.w	r8, #0
 800852a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800852e:	f104 0a1a 	add.w	sl, r4, #26
 8008532:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	eba3 0309 	sub.w	r3, r3, r9
 800853c:	4543      	cmp	r3, r8
 800853e:	f77f af79 	ble.w	8008434 <_printf_float+0x250>
 8008542:	2301      	movs	r3, #1
 8008544:	4652      	mov	r2, sl
 8008546:	4631      	mov	r1, r6
 8008548:	4628      	mov	r0, r5
 800854a:	47b8      	blx	r7
 800854c:	3001      	adds	r0, #1
 800854e:	f43f aeaa 	beq.w	80082a6 <_printf_float+0xc2>
 8008552:	f108 0801 	add.w	r8, r8, #1
 8008556:	e7ec      	b.n	8008532 <_printf_float+0x34e>
 8008558:	4613      	mov	r3, r2
 800855a:	4631      	mov	r1, r6
 800855c:	4642      	mov	r2, r8
 800855e:	4628      	mov	r0, r5
 8008560:	47b8      	blx	r7
 8008562:	3001      	adds	r0, #1
 8008564:	d1c0      	bne.n	80084e8 <_printf_float+0x304>
 8008566:	e69e      	b.n	80082a6 <_printf_float+0xc2>
 8008568:	2301      	movs	r3, #1
 800856a:	4631      	mov	r1, r6
 800856c:	4628      	mov	r0, r5
 800856e:	9205      	str	r2, [sp, #20]
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	f43f ae97 	beq.w	80082a6 <_printf_float+0xc2>
 8008578:	9a05      	ldr	r2, [sp, #20]
 800857a:	f10b 0b01 	add.w	fp, fp, #1
 800857e:	e7b9      	b.n	80084f4 <_printf_float+0x310>
 8008580:	ee18 3a10 	vmov	r3, s16
 8008584:	4652      	mov	r2, sl
 8008586:	4631      	mov	r1, r6
 8008588:	4628      	mov	r0, r5
 800858a:	47b8      	blx	r7
 800858c:	3001      	adds	r0, #1
 800858e:	d1be      	bne.n	800850e <_printf_float+0x32a>
 8008590:	e689      	b.n	80082a6 <_printf_float+0xc2>
 8008592:	9a05      	ldr	r2, [sp, #20]
 8008594:	464b      	mov	r3, r9
 8008596:	4442      	add	r2, r8
 8008598:	4631      	mov	r1, r6
 800859a:	4628      	mov	r0, r5
 800859c:	47b8      	blx	r7
 800859e:	3001      	adds	r0, #1
 80085a0:	d1c1      	bne.n	8008526 <_printf_float+0x342>
 80085a2:	e680      	b.n	80082a6 <_printf_float+0xc2>
 80085a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085a6:	2a01      	cmp	r2, #1
 80085a8:	dc01      	bgt.n	80085ae <_printf_float+0x3ca>
 80085aa:	07db      	lsls	r3, r3, #31
 80085ac:	d538      	bpl.n	8008620 <_printf_float+0x43c>
 80085ae:	2301      	movs	r3, #1
 80085b0:	4642      	mov	r2, r8
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	f43f ae74 	beq.w	80082a6 <_printf_float+0xc2>
 80085be:	ee18 3a10 	vmov	r3, s16
 80085c2:	4652      	mov	r2, sl
 80085c4:	4631      	mov	r1, r6
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b8      	blx	r7
 80085ca:	3001      	adds	r0, #1
 80085cc:	f43f ae6b 	beq.w	80082a6 <_printf_float+0xc2>
 80085d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085d4:	2200      	movs	r2, #0
 80085d6:	2300      	movs	r3, #0
 80085d8:	f7f8 fa76 	bl	8000ac8 <__aeabi_dcmpeq>
 80085dc:	b9d8      	cbnz	r0, 8008616 <_printf_float+0x432>
 80085de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e0:	f108 0201 	add.w	r2, r8, #1
 80085e4:	3b01      	subs	r3, #1
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	d10e      	bne.n	800860e <_printf_float+0x42a>
 80085f0:	e659      	b.n	80082a6 <_printf_float+0xc2>
 80085f2:	2301      	movs	r3, #1
 80085f4:	4652      	mov	r2, sl
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b8      	blx	r7
 80085fc:	3001      	adds	r0, #1
 80085fe:	f43f ae52 	beq.w	80082a6 <_printf_float+0xc2>
 8008602:	f108 0801 	add.w	r8, r8, #1
 8008606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008608:	3b01      	subs	r3, #1
 800860a:	4543      	cmp	r3, r8
 800860c:	dcf1      	bgt.n	80085f2 <_printf_float+0x40e>
 800860e:	464b      	mov	r3, r9
 8008610:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008614:	e6dc      	b.n	80083d0 <_printf_float+0x1ec>
 8008616:	f04f 0800 	mov.w	r8, #0
 800861a:	f104 0a1a 	add.w	sl, r4, #26
 800861e:	e7f2      	b.n	8008606 <_printf_float+0x422>
 8008620:	2301      	movs	r3, #1
 8008622:	4642      	mov	r2, r8
 8008624:	e7df      	b.n	80085e6 <_printf_float+0x402>
 8008626:	2301      	movs	r3, #1
 8008628:	464a      	mov	r2, r9
 800862a:	4631      	mov	r1, r6
 800862c:	4628      	mov	r0, r5
 800862e:	47b8      	blx	r7
 8008630:	3001      	adds	r0, #1
 8008632:	f43f ae38 	beq.w	80082a6 <_printf_float+0xc2>
 8008636:	f108 0801 	add.w	r8, r8, #1
 800863a:	68e3      	ldr	r3, [r4, #12]
 800863c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800863e:	1a5b      	subs	r3, r3, r1
 8008640:	4543      	cmp	r3, r8
 8008642:	dcf0      	bgt.n	8008626 <_printf_float+0x442>
 8008644:	e6fa      	b.n	800843c <_printf_float+0x258>
 8008646:	f04f 0800 	mov.w	r8, #0
 800864a:	f104 0919 	add.w	r9, r4, #25
 800864e:	e7f4      	b.n	800863a <_printf_float+0x456>

08008650 <_printf_common>:
 8008650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008654:	4616      	mov	r6, r2
 8008656:	4699      	mov	r9, r3
 8008658:	688a      	ldr	r2, [r1, #8]
 800865a:	690b      	ldr	r3, [r1, #16]
 800865c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008660:	4293      	cmp	r3, r2
 8008662:	bfb8      	it	lt
 8008664:	4613      	movlt	r3, r2
 8008666:	6033      	str	r3, [r6, #0]
 8008668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800866c:	4607      	mov	r7, r0
 800866e:	460c      	mov	r4, r1
 8008670:	b10a      	cbz	r2, 8008676 <_printf_common+0x26>
 8008672:	3301      	adds	r3, #1
 8008674:	6033      	str	r3, [r6, #0]
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	0699      	lsls	r1, r3, #26
 800867a:	bf42      	ittt	mi
 800867c:	6833      	ldrmi	r3, [r6, #0]
 800867e:	3302      	addmi	r3, #2
 8008680:	6033      	strmi	r3, [r6, #0]
 8008682:	6825      	ldr	r5, [r4, #0]
 8008684:	f015 0506 	ands.w	r5, r5, #6
 8008688:	d106      	bne.n	8008698 <_printf_common+0x48>
 800868a:	f104 0a19 	add.w	sl, r4, #25
 800868e:	68e3      	ldr	r3, [r4, #12]
 8008690:	6832      	ldr	r2, [r6, #0]
 8008692:	1a9b      	subs	r3, r3, r2
 8008694:	42ab      	cmp	r3, r5
 8008696:	dc26      	bgt.n	80086e6 <_printf_common+0x96>
 8008698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800869c:	1e13      	subs	r3, r2, #0
 800869e:	6822      	ldr	r2, [r4, #0]
 80086a0:	bf18      	it	ne
 80086a2:	2301      	movne	r3, #1
 80086a4:	0692      	lsls	r2, r2, #26
 80086a6:	d42b      	bmi.n	8008700 <_printf_common+0xb0>
 80086a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086ac:	4649      	mov	r1, r9
 80086ae:	4638      	mov	r0, r7
 80086b0:	47c0      	blx	r8
 80086b2:	3001      	adds	r0, #1
 80086b4:	d01e      	beq.n	80086f4 <_printf_common+0xa4>
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	68e5      	ldr	r5, [r4, #12]
 80086ba:	6832      	ldr	r2, [r6, #0]
 80086bc:	f003 0306 	and.w	r3, r3, #6
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	bf08      	it	eq
 80086c4:	1aad      	subeq	r5, r5, r2
 80086c6:	68a3      	ldr	r3, [r4, #8]
 80086c8:	6922      	ldr	r2, [r4, #16]
 80086ca:	bf0c      	ite	eq
 80086cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086d0:	2500      	movne	r5, #0
 80086d2:	4293      	cmp	r3, r2
 80086d4:	bfc4      	itt	gt
 80086d6:	1a9b      	subgt	r3, r3, r2
 80086d8:	18ed      	addgt	r5, r5, r3
 80086da:	2600      	movs	r6, #0
 80086dc:	341a      	adds	r4, #26
 80086de:	42b5      	cmp	r5, r6
 80086e0:	d11a      	bne.n	8008718 <_printf_common+0xc8>
 80086e2:	2000      	movs	r0, #0
 80086e4:	e008      	b.n	80086f8 <_printf_common+0xa8>
 80086e6:	2301      	movs	r3, #1
 80086e8:	4652      	mov	r2, sl
 80086ea:	4649      	mov	r1, r9
 80086ec:	4638      	mov	r0, r7
 80086ee:	47c0      	blx	r8
 80086f0:	3001      	adds	r0, #1
 80086f2:	d103      	bne.n	80086fc <_printf_common+0xac>
 80086f4:	f04f 30ff 	mov.w	r0, #4294967295
 80086f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fc:	3501      	adds	r5, #1
 80086fe:	e7c6      	b.n	800868e <_printf_common+0x3e>
 8008700:	18e1      	adds	r1, r4, r3
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	2030      	movs	r0, #48	; 0x30
 8008706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800870a:	4422      	add	r2, r4
 800870c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008714:	3302      	adds	r3, #2
 8008716:	e7c7      	b.n	80086a8 <_printf_common+0x58>
 8008718:	2301      	movs	r3, #1
 800871a:	4622      	mov	r2, r4
 800871c:	4649      	mov	r1, r9
 800871e:	4638      	mov	r0, r7
 8008720:	47c0      	blx	r8
 8008722:	3001      	adds	r0, #1
 8008724:	d0e6      	beq.n	80086f4 <_printf_common+0xa4>
 8008726:	3601      	adds	r6, #1
 8008728:	e7d9      	b.n	80086de <_printf_common+0x8e>
	...

0800872c <_printf_i>:
 800872c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008730:	7e0f      	ldrb	r7, [r1, #24]
 8008732:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008734:	2f78      	cmp	r7, #120	; 0x78
 8008736:	4691      	mov	r9, r2
 8008738:	4680      	mov	r8, r0
 800873a:	460c      	mov	r4, r1
 800873c:	469a      	mov	sl, r3
 800873e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008742:	d807      	bhi.n	8008754 <_printf_i+0x28>
 8008744:	2f62      	cmp	r7, #98	; 0x62
 8008746:	d80a      	bhi.n	800875e <_printf_i+0x32>
 8008748:	2f00      	cmp	r7, #0
 800874a:	f000 80d8 	beq.w	80088fe <_printf_i+0x1d2>
 800874e:	2f58      	cmp	r7, #88	; 0x58
 8008750:	f000 80a3 	beq.w	800889a <_printf_i+0x16e>
 8008754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800875c:	e03a      	b.n	80087d4 <_printf_i+0xa8>
 800875e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008762:	2b15      	cmp	r3, #21
 8008764:	d8f6      	bhi.n	8008754 <_printf_i+0x28>
 8008766:	a101      	add	r1, pc, #4	; (adr r1, 800876c <_printf_i+0x40>)
 8008768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800876c:	080087c5 	.word	0x080087c5
 8008770:	080087d9 	.word	0x080087d9
 8008774:	08008755 	.word	0x08008755
 8008778:	08008755 	.word	0x08008755
 800877c:	08008755 	.word	0x08008755
 8008780:	08008755 	.word	0x08008755
 8008784:	080087d9 	.word	0x080087d9
 8008788:	08008755 	.word	0x08008755
 800878c:	08008755 	.word	0x08008755
 8008790:	08008755 	.word	0x08008755
 8008794:	08008755 	.word	0x08008755
 8008798:	080088e5 	.word	0x080088e5
 800879c:	08008809 	.word	0x08008809
 80087a0:	080088c7 	.word	0x080088c7
 80087a4:	08008755 	.word	0x08008755
 80087a8:	08008755 	.word	0x08008755
 80087ac:	08008907 	.word	0x08008907
 80087b0:	08008755 	.word	0x08008755
 80087b4:	08008809 	.word	0x08008809
 80087b8:	08008755 	.word	0x08008755
 80087bc:	08008755 	.word	0x08008755
 80087c0:	080088cf 	.word	0x080088cf
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	1d1a      	adds	r2, r3, #4
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	602a      	str	r2, [r5, #0]
 80087cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087d4:	2301      	movs	r3, #1
 80087d6:	e0a3      	b.n	8008920 <_printf_i+0x1f4>
 80087d8:	6820      	ldr	r0, [r4, #0]
 80087da:	6829      	ldr	r1, [r5, #0]
 80087dc:	0606      	lsls	r6, r0, #24
 80087de:	f101 0304 	add.w	r3, r1, #4
 80087e2:	d50a      	bpl.n	80087fa <_printf_i+0xce>
 80087e4:	680e      	ldr	r6, [r1, #0]
 80087e6:	602b      	str	r3, [r5, #0]
 80087e8:	2e00      	cmp	r6, #0
 80087ea:	da03      	bge.n	80087f4 <_printf_i+0xc8>
 80087ec:	232d      	movs	r3, #45	; 0x2d
 80087ee:	4276      	negs	r6, r6
 80087f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f4:	485e      	ldr	r0, [pc, #376]	; (8008970 <_printf_i+0x244>)
 80087f6:	230a      	movs	r3, #10
 80087f8:	e019      	b.n	800882e <_printf_i+0x102>
 80087fa:	680e      	ldr	r6, [r1, #0]
 80087fc:	602b      	str	r3, [r5, #0]
 80087fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008802:	bf18      	it	ne
 8008804:	b236      	sxthne	r6, r6
 8008806:	e7ef      	b.n	80087e8 <_printf_i+0xbc>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	6820      	ldr	r0, [r4, #0]
 800880c:	1d19      	adds	r1, r3, #4
 800880e:	6029      	str	r1, [r5, #0]
 8008810:	0601      	lsls	r1, r0, #24
 8008812:	d501      	bpl.n	8008818 <_printf_i+0xec>
 8008814:	681e      	ldr	r6, [r3, #0]
 8008816:	e002      	b.n	800881e <_printf_i+0xf2>
 8008818:	0646      	lsls	r6, r0, #25
 800881a:	d5fb      	bpl.n	8008814 <_printf_i+0xe8>
 800881c:	881e      	ldrh	r6, [r3, #0]
 800881e:	4854      	ldr	r0, [pc, #336]	; (8008970 <_printf_i+0x244>)
 8008820:	2f6f      	cmp	r7, #111	; 0x6f
 8008822:	bf0c      	ite	eq
 8008824:	2308      	moveq	r3, #8
 8008826:	230a      	movne	r3, #10
 8008828:	2100      	movs	r1, #0
 800882a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800882e:	6865      	ldr	r5, [r4, #4]
 8008830:	60a5      	str	r5, [r4, #8]
 8008832:	2d00      	cmp	r5, #0
 8008834:	bfa2      	ittt	ge
 8008836:	6821      	ldrge	r1, [r4, #0]
 8008838:	f021 0104 	bicge.w	r1, r1, #4
 800883c:	6021      	strge	r1, [r4, #0]
 800883e:	b90e      	cbnz	r6, 8008844 <_printf_i+0x118>
 8008840:	2d00      	cmp	r5, #0
 8008842:	d04d      	beq.n	80088e0 <_printf_i+0x1b4>
 8008844:	4615      	mov	r5, r2
 8008846:	fbb6 f1f3 	udiv	r1, r6, r3
 800884a:	fb03 6711 	mls	r7, r3, r1, r6
 800884e:	5dc7      	ldrb	r7, [r0, r7]
 8008850:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008854:	4637      	mov	r7, r6
 8008856:	42bb      	cmp	r3, r7
 8008858:	460e      	mov	r6, r1
 800885a:	d9f4      	bls.n	8008846 <_printf_i+0x11a>
 800885c:	2b08      	cmp	r3, #8
 800885e:	d10b      	bne.n	8008878 <_printf_i+0x14c>
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	07de      	lsls	r6, r3, #31
 8008864:	d508      	bpl.n	8008878 <_printf_i+0x14c>
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	6861      	ldr	r1, [r4, #4]
 800886a:	4299      	cmp	r1, r3
 800886c:	bfde      	ittt	le
 800886e:	2330      	movle	r3, #48	; 0x30
 8008870:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008874:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008878:	1b52      	subs	r2, r2, r5
 800887a:	6122      	str	r2, [r4, #16]
 800887c:	f8cd a000 	str.w	sl, [sp]
 8008880:	464b      	mov	r3, r9
 8008882:	aa03      	add	r2, sp, #12
 8008884:	4621      	mov	r1, r4
 8008886:	4640      	mov	r0, r8
 8008888:	f7ff fee2 	bl	8008650 <_printf_common>
 800888c:	3001      	adds	r0, #1
 800888e:	d14c      	bne.n	800892a <_printf_i+0x1fe>
 8008890:	f04f 30ff 	mov.w	r0, #4294967295
 8008894:	b004      	add	sp, #16
 8008896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889a:	4835      	ldr	r0, [pc, #212]	; (8008970 <_printf_i+0x244>)
 800889c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088a0:	6829      	ldr	r1, [r5, #0]
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80088a8:	6029      	str	r1, [r5, #0]
 80088aa:	061d      	lsls	r5, r3, #24
 80088ac:	d514      	bpl.n	80088d8 <_printf_i+0x1ac>
 80088ae:	07df      	lsls	r7, r3, #31
 80088b0:	bf44      	itt	mi
 80088b2:	f043 0320 	orrmi.w	r3, r3, #32
 80088b6:	6023      	strmi	r3, [r4, #0]
 80088b8:	b91e      	cbnz	r6, 80088c2 <_printf_i+0x196>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	f023 0320 	bic.w	r3, r3, #32
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	2310      	movs	r3, #16
 80088c4:	e7b0      	b.n	8008828 <_printf_i+0xfc>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	f043 0320 	orr.w	r3, r3, #32
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	2378      	movs	r3, #120	; 0x78
 80088d0:	4828      	ldr	r0, [pc, #160]	; (8008974 <_printf_i+0x248>)
 80088d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088d6:	e7e3      	b.n	80088a0 <_printf_i+0x174>
 80088d8:	0659      	lsls	r1, r3, #25
 80088da:	bf48      	it	mi
 80088dc:	b2b6      	uxthmi	r6, r6
 80088de:	e7e6      	b.n	80088ae <_printf_i+0x182>
 80088e0:	4615      	mov	r5, r2
 80088e2:	e7bb      	b.n	800885c <_printf_i+0x130>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	6826      	ldr	r6, [r4, #0]
 80088e8:	6961      	ldr	r1, [r4, #20]
 80088ea:	1d18      	adds	r0, r3, #4
 80088ec:	6028      	str	r0, [r5, #0]
 80088ee:	0635      	lsls	r5, r6, #24
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	d501      	bpl.n	80088f8 <_printf_i+0x1cc>
 80088f4:	6019      	str	r1, [r3, #0]
 80088f6:	e002      	b.n	80088fe <_printf_i+0x1d2>
 80088f8:	0670      	lsls	r0, r6, #25
 80088fa:	d5fb      	bpl.n	80088f4 <_printf_i+0x1c8>
 80088fc:	8019      	strh	r1, [r3, #0]
 80088fe:	2300      	movs	r3, #0
 8008900:	6123      	str	r3, [r4, #16]
 8008902:	4615      	mov	r5, r2
 8008904:	e7ba      	b.n	800887c <_printf_i+0x150>
 8008906:	682b      	ldr	r3, [r5, #0]
 8008908:	1d1a      	adds	r2, r3, #4
 800890a:	602a      	str	r2, [r5, #0]
 800890c:	681d      	ldr	r5, [r3, #0]
 800890e:	6862      	ldr	r2, [r4, #4]
 8008910:	2100      	movs	r1, #0
 8008912:	4628      	mov	r0, r5
 8008914:	f7f7 fc64 	bl	80001e0 <memchr>
 8008918:	b108      	cbz	r0, 800891e <_printf_i+0x1f2>
 800891a:	1b40      	subs	r0, r0, r5
 800891c:	6060      	str	r0, [r4, #4]
 800891e:	6863      	ldr	r3, [r4, #4]
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	2300      	movs	r3, #0
 8008924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008928:	e7a8      	b.n	800887c <_printf_i+0x150>
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	462a      	mov	r2, r5
 800892e:	4649      	mov	r1, r9
 8008930:	4640      	mov	r0, r8
 8008932:	47d0      	blx	sl
 8008934:	3001      	adds	r0, #1
 8008936:	d0ab      	beq.n	8008890 <_printf_i+0x164>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	079b      	lsls	r3, r3, #30
 800893c:	d413      	bmi.n	8008966 <_printf_i+0x23a>
 800893e:	68e0      	ldr	r0, [r4, #12]
 8008940:	9b03      	ldr	r3, [sp, #12]
 8008942:	4298      	cmp	r0, r3
 8008944:	bfb8      	it	lt
 8008946:	4618      	movlt	r0, r3
 8008948:	e7a4      	b.n	8008894 <_printf_i+0x168>
 800894a:	2301      	movs	r3, #1
 800894c:	4632      	mov	r2, r6
 800894e:	4649      	mov	r1, r9
 8008950:	4640      	mov	r0, r8
 8008952:	47d0      	blx	sl
 8008954:	3001      	adds	r0, #1
 8008956:	d09b      	beq.n	8008890 <_printf_i+0x164>
 8008958:	3501      	adds	r5, #1
 800895a:	68e3      	ldr	r3, [r4, #12]
 800895c:	9903      	ldr	r1, [sp, #12]
 800895e:	1a5b      	subs	r3, r3, r1
 8008960:	42ab      	cmp	r3, r5
 8008962:	dcf2      	bgt.n	800894a <_printf_i+0x21e>
 8008964:	e7eb      	b.n	800893e <_printf_i+0x212>
 8008966:	2500      	movs	r5, #0
 8008968:	f104 0619 	add.w	r6, r4, #25
 800896c:	e7f5      	b.n	800895a <_printf_i+0x22e>
 800896e:	bf00      	nop
 8008970:	0800ca0a 	.word	0x0800ca0a
 8008974:	0800ca1b 	.word	0x0800ca1b

08008978 <_scanf_float>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	b087      	sub	sp, #28
 800897e:	4617      	mov	r7, r2
 8008980:	9303      	str	r3, [sp, #12]
 8008982:	688b      	ldr	r3, [r1, #8]
 8008984:	1e5a      	subs	r2, r3, #1
 8008986:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800898a:	bf83      	ittte	hi
 800898c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008990:	195b      	addhi	r3, r3, r5
 8008992:	9302      	strhi	r3, [sp, #8]
 8008994:	2300      	movls	r3, #0
 8008996:	bf86      	itte	hi
 8008998:	f240 135d 	movwhi	r3, #349	; 0x15d
 800899c:	608b      	strhi	r3, [r1, #8]
 800899e:	9302      	strls	r3, [sp, #8]
 80089a0:	680b      	ldr	r3, [r1, #0]
 80089a2:	468b      	mov	fp, r1
 80089a4:	2500      	movs	r5, #0
 80089a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80089aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80089ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089b2:	4680      	mov	r8, r0
 80089b4:	460c      	mov	r4, r1
 80089b6:	465e      	mov	r6, fp
 80089b8:	46aa      	mov	sl, r5
 80089ba:	46a9      	mov	r9, r5
 80089bc:	9501      	str	r5, [sp, #4]
 80089be:	68a2      	ldr	r2, [r4, #8]
 80089c0:	b152      	cbz	r2, 80089d8 <_scanf_float+0x60>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b4e      	cmp	r3, #78	; 0x4e
 80089c8:	d864      	bhi.n	8008a94 <_scanf_float+0x11c>
 80089ca:	2b40      	cmp	r3, #64	; 0x40
 80089cc:	d83c      	bhi.n	8008a48 <_scanf_float+0xd0>
 80089ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80089d2:	b2c8      	uxtb	r0, r1
 80089d4:	280e      	cmp	r0, #14
 80089d6:	d93a      	bls.n	8008a4e <_scanf_float+0xd6>
 80089d8:	f1b9 0f00 	cmp.w	r9, #0
 80089dc:	d003      	beq.n	80089e6 <_scanf_float+0x6e>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089ea:	f1ba 0f01 	cmp.w	sl, #1
 80089ee:	f200 8113 	bhi.w	8008c18 <_scanf_float+0x2a0>
 80089f2:	455e      	cmp	r6, fp
 80089f4:	f200 8105 	bhi.w	8008c02 <_scanf_float+0x28a>
 80089f8:	2501      	movs	r5, #1
 80089fa:	4628      	mov	r0, r5
 80089fc:	b007      	add	sp, #28
 80089fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008a06:	2a0d      	cmp	r2, #13
 8008a08:	d8e6      	bhi.n	80089d8 <_scanf_float+0x60>
 8008a0a:	a101      	add	r1, pc, #4	; (adr r1, 8008a10 <_scanf_float+0x98>)
 8008a0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a10:	08008b4f 	.word	0x08008b4f
 8008a14:	080089d9 	.word	0x080089d9
 8008a18:	080089d9 	.word	0x080089d9
 8008a1c:	080089d9 	.word	0x080089d9
 8008a20:	08008baf 	.word	0x08008baf
 8008a24:	08008b87 	.word	0x08008b87
 8008a28:	080089d9 	.word	0x080089d9
 8008a2c:	080089d9 	.word	0x080089d9
 8008a30:	08008b5d 	.word	0x08008b5d
 8008a34:	080089d9 	.word	0x080089d9
 8008a38:	080089d9 	.word	0x080089d9
 8008a3c:	080089d9 	.word	0x080089d9
 8008a40:	080089d9 	.word	0x080089d9
 8008a44:	08008b15 	.word	0x08008b15
 8008a48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008a4c:	e7db      	b.n	8008a06 <_scanf_float+0x8e>
 8008a4e:	290e      	cmp	r1, #14
 8008a50:	d8c2      	bhi.n	80089d8 <_scanf_float+0x60>
 8008a52:	a001      	add	r0, pc, #4	; (adr r0, 8008a58 <_scanf_float+0xe0>)
 8008a54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a58:	08008b07 	.word	0x08008b07
 8008a5c:	080089d9 	.word	0x080089d9
 8008a60:	08008b07 	.word	0x08008b07
 8008a64:	08008b9b 	.word	0x08008b9b
 8008a68:	080089d9 	.word	0x080089d9
 8008a6c:	08008ab5 	.word	0x08008ab5
 8008a70:	08008af1 	.word	0x08008af1
 8008a74:	08008af1 	.word	0x08008af1
 8008a78:	08008af1 	.word	0x08008af1
 8008a7c:	08008af1 	.word	0x08008af1
 8008a80:	08008af1 	.word	0x08008af1
 8008a84:	08008af1 	.word	0x08008af1
 8008a88:	08008af1 	.word	0x08008af1
 8008a8c:	08008af1 	.word	0x08008af1
 8008a90:	08008af1 	.word	0x08008af1
 8008a94:	2b6e      	cmp	r3, #110	; 0x6e
 8008a96:	d809      	bhi.n	8008aac <_scanf_float+0x134>
 8008a98:	2b60      	cmp	r3, #96	; 0x60
 8008a9a:	d8b2      	bhi.n	8008a02 <_scanf_float+0x8a>
 8008a9c:	2b54      	cmp	r3, #84	; 0x54
 8008a9e:	d077      	beq.n	8008b90 <_scanf_float+0x218>
 8008aa0:	2b59      	cmp	r3, #89	; 0x59
 8008aa2:	d199      	bne.n	80089d8 <_scanf_float+0x60>
 8008aa4:	2d07      	cmp	r5, #7
 8008aa6:	d197      	bne.n	80089d8 <_scanf_float+0x60>
 8008aa8:	2508      	movs	r5, #8
 8008aaa:	e029      	b.n	8008b00 <_scanf_float+0x188>
 8008aac:	2b74      	cmp	r3, #116	; 0x74
 8008aae:	d06f      	beq.n	8008b90 <_scanf_float+0x218>
 8008ab0:	2b79      	cmp	r3, #121	; 0x79
 8008ab2:	e7f6      	b.n	8008aa2 <_scanf_float+0x12a>
 8008ab4:	6821      	ldr	r1, [r4, #0]
 8008ab6:	05c8      	lsls	r0, r1, #23
 8008ab8:	d51a      	bpl.n	8008af0 <_scanf_float+0x178>
 8008aba:	9b02      	ldr	r3, [sp, #8]
 8008abc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ac0:	6021      	str	r1, [r4, #0]
 8008ac2:	f109 0901 	add.w	r9, r9, #1
 8008ac6:	b11b      	cbz	r3, 8008ad0 <_scanf_float+0x158>
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	3201      	adds	r2, #1
 8008acc:	9302      	str	r3, [sp, #8]
 8008ace:	60a2      	str	r2, [r4, #8]
 8008ad0:	68a3      	ldr	r3, [r4, #8]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	60a3      	str	r3, [r4, #8]
 8008ad6:	6923      	ldr	r3, [r4, #16]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	6123      	str	r3, [r4, #16]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	607b      	str	r3, [r7, #4]
 8008ae4:	f340 8084 	ble.w	8008bf0 <_scanf_float+0x278>
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	3301      	adds	r3, #1
 8008aec:	603b      	str	r3, [r7, #0]
 8008aee:	e766      	b.n	80089be <_scanf_float+0x46>
 8008af0:	eb1a 0f05 	cmn.w	sl, r5
 8008af4:	f47f af70 	bne.w	80089d8 <_scanf_float+0x60>
 8008af8:	6822      	ldr	r2, [r4, #0]
 8008afa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008afe:	6022      	str	r2, [r4, #0]
 8008b00:	f806 3b01 	strb.w	r3, [r6], #1
 8008b04:	e7e4      	b.n	8008ad0 <_scanf_float+0x158>
 8008b06:	6822      	ldr	r2, [r4, #0]
 8008b08:	0610      	lsls	r0, r2, #24
 8008b0a:	f57f af65 	bpl.w	80089d8 <_scanf_float+0x60>
 8008b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b12:	e7f4      	b.n	8008afe <_scanf_float+0x186>
 8008b14:	f1ba 0f00 	cmp.w	sl, #0
 8008b18:	d10e      	bne.n	8008b38 <_scanf_float+0x1c0>
 8008b1a:	f1b9 0f00 	cmp.w	r9, #0
 8008b1e:	d10e      	bne.n	8008b3e <_scanf_float+0x1c6>
 8008b20:	6822      	ldr	r2, [r4, #0]
 8008b22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b2a:	d108      	bne.n	8008b3e <_scanf_float+0x1c6>
 8008b2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b30:	6022      	str	r2, [r4, #0]
 8008b32:	f04f 0a01 	mov.w	sl, #1
 8008b36:	e7e3      	b.n	8008b00 <_scanf_float+0x188>
 8008b38:	f1ba 0f02 	cmp.w	sl, #2
 8008b3c:	d055      	beq.n	8008bea <_scanf_float+0x272>
 8008b3e:	2d01      	cmp	r5, #1
 8008b40:	d002      	beq.n	8008b48 <_scanf_float+0x1d0>
 8008b42:	2d04      	cmp	r5, #4
 8008b44:	f47f af48 	bne.w	80089d8 <_scanf_float+0x60>
 8008b48:	3501      	adds	r5, #1
 8008b4a:	b2ed      	uxtb	r5, r5
 8008b4c:	e7d8      	b.n	8008b00 <_scanf_float+0x188>
 8008b4e:	f1ba 0f01 	cmp.w	sl, #1
 8008b52:	f47f af41 	bne.w	80089d8 <_scanf_float+0x60>
 8008b56:	f04f 0a02 	mov.w	sl, #2
 8008b5a:	e7d1      	b.n	8008b00 <_scanf_float+0x188>
 8008b5c:	b97d      	cbnz	r5, 8008b7e <_scanf_float+0x206>
 8008b5e:	f1b9 0f00 	cmp.w	r9, #0
 8008b62:	f47f af3c 	bne.w	80089de <_scanf_float+0x66>
 8008b66:	6822      	ldr	r2, [r4, #0]
 8008b68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b70:	f47f af39 	bne.w	80089e6 <_scanf_float+0x6e>
 8008b74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b78:	6022      	str	r2, [r4, #0]
 8008b7a:	2501      	movs	r5, #1
 8008b7c:	e7c0      	b.n	8008b00 <_scanf_float+0x188>
 8008b7e:	2d03      	cmp	r5, #3
 8008b80:	d0e2      	beq.n	8008b48 <_scanf_float+0x1d0>
 8008b82:	2d05      	cmp	r5, #5
 8008b84:	e7de      	b.n	8008b44 <_scanf_float+0x1cc>
 8008b86:	2d02      	cmp	r5, #2
 8008b88:	f47f af26 	bne.w	80089d8 <_scanf_float+0x60>
 8008b8c:	2503      	movs	r5, #3
 8008b8e:	e7b7      	b.n	8008b00 <_scanf_float+0x188>
 8008b90:	2d06      	cmp	r5, #6
 8008b92:	f47f af21 	bne.w	80089d8 <_scanf_float+0x60>
 8008b96:	2507      	movs	r5, #7
 8008b98:	e7b2      	b.n	8008b00 <_scanf_float+0x188>
 8008b9a:	6822      	ldr	r2, [r4, #0]
 8008b9c:	0591      	lsls	r1, r2, #22
 8008b9e:	f57f af1b 	bpl.w	80089d8 <_scanf_float+0x60>
 8008ba2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008ba6:	6022      	str	r2, [r4, #0]
 8008ba8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bac:	e7a8      	b.n	8008b00 <_scanf_float+0x188>
 8008bae:	6822      	ldr	r2, [r4, #0]
 8008bb0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008bb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008bb8:	d006      	beq.n	8008bc8 <_scanf_float+0x250>
 8008bba:	0550      	lsls	r0, r2, #21
 8008bbc:	f57f af0c 	bpl.w	80089d8 <_scanf_float+0x60>
 8008bc0:	f1b9 0f00 	cmp.w	r9, #0
 8008bc4:	f43f af0f 	beq.w	80089e6 <_scanf_float+0x6e>
 8008bc8:	0591      	lsls	r1, r2, #22
 8008bca:	bf58      	it	pl
 8008bcc:	9901      	ldrpl	r1, [sp, #4]
 8008bce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008bd2:	bf58      	it	pl
 8008bd4:	eba9 0101 	subpl.w	r1, r9, r1
 8008bd8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008bdc:	bf58      	it	pl
 8008bde:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008be2:	6022      	str	r2, [r4, #0]
 8008be4:	f04f 0900 	mov.w	r9, #0
 8008be8:	e78a      	b.n	8008b00 <_scanf_float+0x188>
 8008bea:	f04f 0a03 	mov.w	sl, #3
 8008bee:	e787      	b.n	8008b00 <_scanf_float+0x188>
 8008bf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	4798      	blx	r3
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	f43f aedf 	beq.w	80089be <_scanf_float+0x46>
 8008c00:	e6ea      	b.n	80089d8 <_scanf_float+0x60>
 8008c02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c0a:	463a      	mov	r2, r7
 8008c0c:	4640      	mov	r0, r8
 8008c0e:	4798      	blx	r3
 8008c10:	6923      	ldr	r3, [r4, #16]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	6123      	str	r3, [r4, #16]
 8008c16:	e6ec      	b.n	80089f2 <_scanf_float+0x7a>
 8008c18:	1e6b      	subs	r3, r5, #1
 8008c1a:	2b06      	cmp	r3, #6
 8008c1c:	d825      	bhi.n	8008c6a <_scanf_float+0x2f2>
 8008c1e:	2d02      	cmp	r5, #2
 8008c20:	d836      	bhi.n	8008c90 <_scanf_float+0x318>
 8008c22:	455e      	cmp	r6, fp
 8008c24:	f67f aee8 	bls.w	80089f8 <_scanf_float+0x80>
 8008c28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c30:	463a      	mov	r2, r7
 8008c32:	4640      	mov	r0, r8
 8008c34:	4798      	blx	r3
 8008c36:	6923      	ldr	r3, [r4, #16]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	6123      	str	r3, [r4, #16]
 8008c3c:	e7f1      	b.n	8008c22 <_scanf_float+0x2aa>
 8008c3e:	9802      	ldr	r0, [sp, #8]
 8008c40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008c48:	9002      	str	r0, [sp, #8]
 8008c4a:	463a      	mov	r2, r7
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	4798      	blx	r3
 8008c50:	6923      	ldr	r3, [r4, #16]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	6123      	str	r3, [r4, #16]
 8008c56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c5a:	fa5f fa8a 	uxtb.w	sl, sl
 8008c5e:	f1ba 0f02 	cmp.w	sl, #2
 8008c62:	d1ec      	bne.n	8008c3e <_scanf_float+0x2c6>
 8008c64:	3d03      	subs	r5, #3
 8008c66:	b2ed      	uxtb	r5, r5
 8008c68:	1b76      	subs	r6, r6, r5
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	05da      	lsls	r2, r3, #23
 8008c6e:	d52f      	bpl.n	8008cd0 <_scanf_float+0x358>
 8008c70:	055b      	lsls	r3, r3, #21
 8008c72:	d510      	bpl.n	8008c96 <_scanf_float+0x31e>
 8008c74:	455e      	cmp	r6, fp
 8008c76:	f67f aebf 	bls.w	80089f8 <_scanf_float+0x80>
 8008c7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c82:	463a      	mov	r2, r7
 8008c84:	4640      	mov	r0, r8
 8008c86:	4798      	blx	r3
 8008c88:	6923      	ldr	r3, [r4, #16]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	6123      	str	r3, [r4, #16]
 8008c8e:	e7f1      	b.n	8008c74 <_scanf_float+0x2fc>
 8008c90:	46aa      	mov	sl, r5
 8008c92:	9602      	str	r6, [sp, #8]
 8008c94:	e7df      	b.n	8008c56 <_scanf_float+0x2de>
 8008c96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	2965      	cmp	r1, #101	; 0x65
 8008c9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ca2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008ca6:	6123      	str	r3, [r4, #16]
 8008ca8:	d00c      	beq.n	8008cc4 <_scanf_float+0x34c>
 8008caa:	2945      	cmp	r1, #69	; 0x45
 8008cac:	d00a      	beq.n	8008cc4 <_scanf_float+0x34c>
 8008cae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cb2:	463a      	mov	r2, r7
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	4798      	blx	r3
 8008cb8:	6923      	ldr	r3, [r4, #16]
 8008cba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	1eb5      	subs	r5, r6, #2
 8008cc2:	6123      	str	r3, [r4, #16]
 8008cc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cc8:	463a      	mov	r2, r7
 8008cca:	4640      	mov	r0, r8
 8008ccc:	4798      	blx	r3
 8008cce:	462e      	mov	r6, r5
 8008cd0:	6825      	ldr	r5, [r4, #0]
 8008cd2:	f015 0510 	ands.w	r5, r5, #16
 8008cd6:	d159      	bne.n	8008d8c <_scanf_float+0x414>
 8008cd8:	7035      	strb	r5, [r6, #0]
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ce4:	d11b      	bne.n	8008d1e <_scanf_float+0x3a6>
 8008ce6:	9b01      	ldr	r3, [sp, #4]
 8008ce8:	454b      	cmp	r3, r9
 8008cea:	eba3 0209 	sub.w	r2, r3, r9
 8008cee:	d123      	bne.n	8008d38 <_scanf_float+0x3c0>
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4659      	mov	r1, fp
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	f000 fe99 	bl	8009a2c <_strtod_r>
 8008cfa:	6822      	ldr	r2, [r4, #0]
 8008cfc:	9b03      	ldr	r3, [sp, #12]
 8008cfe:	f012 0f02 	tst.w	r2, #2
 8008d02:	ec57 6b10 	vmov	r6, r7, d0
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	d021      	beq.n	8008d4e <_scanf_float+0x3d6>
 8008d0a:	9903      	ldr	r1, [sp, #12]
 8008d0c:	1d1a      	adds	r2, r3, #4
 8008d0e:	600a      	str	r2, [r1, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	e9c3 6700 	strd	r6, r7, [r3]
 8008d16:	68e3      	ldr	r3, [r4, #12]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	60e3      	str	r3, [r4, #12]
 8008d1c:	e66d      	b.n	80089fa <_scanf_float+0x82>
 8008d1e:	9b04      	ldr	r3, [sp, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0e5      	beq.n	8008cf0 <_scanf_float+0x378>
 8008d24:	9905      	ldr	r1, [sp, #20]
 8008d26:	230a      	movs	r3, #10
 8008d28:	462a      	mov	r2, r5
 8008d2a:	3101      	adds	r1, #1
 8008d2c:	4640      	mov	r0, r8
 8008d2e:	f000 ff05 	bl	8009b3c <_strtol_r>
 8008d32:	9b04      	ldr	r3, [sp, #16]
 8008d34:	9e05      	ldr	r6, [sp, #20]
 8008d36:	1ac2      	subs	r2, r0, r3
 8008d38:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008d3c:	429e      	cmp	r6, r3
 8008d3e:	bf28      	it	cs
 8008d40:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008d44:	4912      	ldr	r1, [pc, #72]	; (8008d90 <_scanf_float+0x418>)
 8008d46:	4630      	mov	r0, r6
 8008d48:	f000 f82c 	bl	8008da4 <siprintf>
 8008d4c:	e7d0      	b.n	8008cf0 <_scanf_float+0x378>
 8008d4e:	9903      	ldr	r1, [sp, #12]
 8008d50:	f012 0f04 	tst.w	r2, #4
 8008d54:	f103 0204 	add.w	r2, r3, #4
 8008d58:	600a      	str	r2, [r1, #0]
 8008d5a:	d1d9      	bne.n	8008d10 <_scanf_float+0x398>
 8008d5c:	f8d3 8000 	ldr.w	r8, [r3]
 8008d60:	ee10 2a10 	vmov	r2, s0
 8008d64:	ee10 0a10 	vmov	r0, s0
 8008d68:	463b      	mov	r3, r7
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 fede 	bl	8000b2c <__aeabi_dcmpun>
 8008d70:	b128      	cbz	r0, 8008d7e <_scanf_float+0x406>
 8008d72:	4808      	ldr	r0, [pc, #32]	; (8008d94 <_scanf_float+0x41c>)
 8008d74:	f000 f810 	bl	8008d98 <nanf>
 8008d78:	ed88 0a00 	vstr	s0, [r8]
 8008d7c:	e7cb      	b.n	8008d16 <_scanf_float+0x39e>
 8008d7e:	4630      	mov	r0, r6
 8008d80:	4639      	mov	r1, r7
 8008d82:	f7f7 ff31 	bl	8000be8 <__aeabi_d2f>
 8008d86:	f8c8 0000 	str.w	r0, [r8]
 8008d8a:	e7c4      	b.n	8008d16 <_scanf_float+0x39e>
 8008d8c:	2500      	movs	r5, #0
 8008d8e:	e634      	b.n	80089fa <_scanf_float+0x82>
 8008d90:	0800ca2c 	.word	0x0800ca2c
 8008d94:	0800ce38 	.word	0x0800ce38

08008d98 <nanf>:
 8008d98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008da0 <nanf+0x8>
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	7fc00000 	.word	0x7fc00000

08008da4 <siprintf>:
 8008da4:	b40e      	push	{r1, r2, r3}
 8008da6:	b500      	push	{lr}
 8008da8:	b09c      	sub	sp, #112	; 0x70
 8008daa:	ab1d      	add	r3, sp, #116	; 0x74
 8008dac:	9002      	str	r0, [sp, #8]
 8008dae:	9006      	str	r0, [sp, #24]
 8008db0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008db4:	4809      	ldr	r0, [pc, #36]	; (8008ddc <siprintf+0x38>)
 8008db6:	9107      	str	r1, [sp, #28]
 8008db8:	9104      	str	r1, [sp, #16]
 8008dba:	4909      	ldr	r1, [pc, #36]	; (8008de0 <siprintf+0x3c>)
 8008dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dc0:	9105      	str	r1, [sp, #20]
 8008dc2:	6800      	ldr	r0, [r0, #0]
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	a902      	add	r1, sp, #8
 8008dc8:	f002 fee4 	bl	800bb94 <_svfiprintf_r>
 8008dcc:	9b02      	ldr	r3, [sp, #8]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	701a      	strb	r2, [r3, #0]
 8008dd2:	b01c      	add	sp, #112	; 0x70
 8008dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dd8:	b003      	add	sp, #12
 8008dda:	4770      	bx	lr
 8008ddc:	20000074 	.word	0x20000074
 8008de0:	ffff0208 	.word	0xffff0208

08008de4 <sulp>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	4604      	mov	r4, r0
 8008de8:	460d      	mov	r5, r1
 8008dea:	ec45 4b10 	vmov	d0, r4, r5
 8008dee:	4616      	mov	r6, r2
 8008df0:	f002 fc2e 	bl	800b650 <__ulp>
 8008df4:	ec51 0b10 	vmov	r0, r1, d0
 8008df8:	b17e      	cbz	r6, 8008e1a <sulp+0x36>
 8008dfa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008dfe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	dd09      	ble.n	8008e1a <sulp+0x36>
 8008e06:	051b      	lsls	r3, r3, #20
 8008e08:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008e0c:	2400      	movs	r4, #0
 8008e0e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008e12:	4622      	mov	r2, r4
 8008e14:	462b      	mov	r3, r5
 8008e16:	f7f7 fbef 	bl	80005f8 <__aeabi_dmul>
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	0000      	movs	r0, r0
	...

08008e20 <_strtod_l>:
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	ed2d 8b02 	vpush	{d8}
 8008e28:	b09d      	sub	sp, #116	; 0x74
 8008e2a:	461f      	mov	r7, r3
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9318      	str	r3, [sp, #96]	; 0x60
 8008e30:	4ba2      	ldr	r3, [pc, #648]	; (80090bc <_strtod_l+0x29c>)
 8008e32:	9213      	str	r2, [sp, #76]	; 0x4c
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	9305      	str	r3, [sp, #20]
 8008e38:	4604      	mov	r4, r0
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	4688      	mov	r8, r1
 8008e3e:	f7f7 f9c7 	bl	80001d0 <strlen>
 8008e42:	f04f 0a00 	mov.w	sl, #0
 8008e46:	4605      	mov	r5, r0
 8008e48:	f04f 0b00 	mov.w	fp, #0
 8008e4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008e50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e52:	781a      	ldrb	r2, [r3, #0]
 8008e54:	2a2b      	cmp	r2, #43	; 0x2b
 8008e56:	d04e      	beq.n	8008ef6 <_strtod_l+0xd6>
 8008e58:	d83b      	bhi.n	8008ed2 <_strtod_l+0xb2>
 8008e5a:	2a0d      	cmp	r2, #13
 8008e5c:	d834      	bhi.n	8008ec8 <_strtod_l+0xa8>
 8008e5e:	2a08      	cmp	r2, #8
 8008e60:	d834      	bhi.n	8008ecc <_strtod_l+0xac>
 8008e62:	2a00      	cmp	r2, #0
 8008e64:	d03e      	beq.n	8008ee4 <_strtod_l+0xc4>
 8008e66:	2300      	movs	r3, #0
 8008e68:	930a      	str	r3, [sp, #40]	; 0x28
 8008e6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008e6c:	7833      	ldrb	r3, [r6, #0]
 8008e6e:	2b30      	cmp	r3, #48	; 0x30
 8008e70:	f040 80b0 	bne.w	8008fd4 <_strtod_l+0x1b4>
 8008e74:	7873      	ldrb	r3, [r6, #1]
 8008e76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e7a:	2b58      	cmp	r3, #88	; 0x58
 8008e7c:	d168      	bne.n	8008f50 <_strtod_l+0x130>
 8008e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e80:	9301      	str	r3, [sp, #4]
 8008e82:	ab18      	add	r3, sp, #96	; 0x60
 8008e84:	9702      	str	r7, [sp, #8]
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	4a8d      	ldr	r2, [pc, #564]	; (80090c0 <_strtod_l+0x2a0>)
 8008e8a:	ab19      	add	r3, sp, #100	; 0x64
 8008e8c:	a917      	add	r1, sp, #92	; 0x5c
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f001 fd38 	bl	800a904 <__gethex>
 8008e94:	f010 0707 	ands.w	r7, r0, #7
 8008e98:	4605      	mov	r5, r0
 8008e9a:	d005      	beq.n	8008ea8 <_strtod_l+0x88>
 8008e9c:	2f06      	cmp	r7, #6
 8008e9e:	d12c      	bne.n	8008efa <_strtod_l+0xda>
 8008ea0:	3601      	adds	r6, #1
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9617      	str	r6, [sp, #92]	; 0x5c
 8008ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f040 8590 	bne.w	80099d0 <_strtod_l+0xbb0>
 8008eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eb2:	b1eb      	cbz	r3, 8008ef0 <_strtod_l+0xd0>
 8008eb4:	4652      	mov	r2, sl
 8008eb6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008eba:	ec43 2b10 	vmov	d0, r2, r3
 8008ebe:	b01d      	add	sp, #116	; 0x74
 8008ec0:	ecbd 8b02 	vpop	{d8}
 8008ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec8:	2a20      	cmp	r2, #32
 8008eca:	d1cc      	bne.n	8008e66 <_strtod_l+0x46>
 8008ecc:	3301      	adds	r3, #1
 8008ece:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ed0:	e7be      	b.n	8008e50 <_strtod_l+0x30>
 8008ed2:	2a2d      	cmp	r2, #45	; 0x2d
 8008ed4:	d1c7      	bne.n	8008e66 <_strtod_l+0x46>
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	920a      	str	r2, [sp, #40]	; 0x28
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ede:	785b      	ldrb	r3, [r3, #1]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1c2      	bne.n	8008e6a <_strtod_l+0x4a>
 8008ee4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ee6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f040 856e 	bne.w	80099cc <_strtod_l+0xbac>
 8008ef0:	4652      	mov	r2, sl
 8008ef2:	465b      	mov	r3, fp
 8008ef4:	e7e1      	b.n	8008eba <_strtod_l+0x9a>
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	e7ee      	b.n	8008ed8 <_strtod_l+0xb8>
 8008efa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008efc:	b13a      	cbz	r2, 8008f0e <_strtod_l+0xee>
 8008efe:	2135      	movs	r1, #53	; 0x35
 8008f00:	a81a      	add	r0, sp, #104	; 0x68
 8008f02:	f002 fcb0 	bl	800b866 <__copybits>
 8008f06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f002 f86f 	bl	800afec <_Bfree>
 8008f0e:	3f01      	subs	r7, #1
 8008f10:	2f04      	cmp	r7, #4
 8008f12:	d806      	bhi.n	8008f22 <_strtod_l+0x102>
 8008f14:	e8df f007 	tbb	[pc, r7]
 8008f18:	1714030a 	.word	0x1714030a
 8008f1c:	0a          	.byte	0x0a
 8008f1d:	00          	.byte	0x00
 8008f1e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008f22:	0728      	lsls	r0, r5, #28
 8008f24:	d5c0      	bpl.n	8008ea8 <_strtod_l+0x88>
 8008f26:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008f2a:	e7bd      	b.n	8008ea8 <_strtod_l+0x88>
 8008f2c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008f30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008f36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008f3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f3e:	e7f0      	b.n	8008f22 <_strtod_l+0x102>
 8008f40:	f8df b180 	ldr.w	fp, [pc, #384]	; 80090c4 <_strtod_l+0x2a4>
 8008f44:	e7ed      	b.n	8008f22 <_strtod_l+0x102>
 8008f46:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008f4a:	f04f 3aff 	mov.w	sl, #4294967295
 8008f4e:	e7e8      	b.n	8008f22 <_strtod_l+0x102>
 8008f50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f52:	1c5a      	adds	r2, r3, #1
 8008f54:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f56:	785b      	ldrb	r3, [r3, #1]
 8008f58:	2b30      	cmp	r3, #48	; 0x30
 8008f5a:	d0f9      	beq.n	8008f50 <_strtod_l+0x130>
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0a3      	beq.n	8008ea8 <_strtod_l+0x88>
 8008f60:	2301      	movs	r3, #1
 8008f62:	f04f 0900 	mov.w	r9, #0
 8008f66:	9304      	str	r3, [sp, #16]
 8008f68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f6a:	9308      	str	r3, [sp, #32]
 8008f6c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008f70:	464f      	mov	r7, r9
 8008f72:	220a      	movs	r2, #10
 8008f74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008f76:	7806      	ldrb	r6, [r0, #0]
 8008f78:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008f7c:	b2d9      	uxtb	r1, r3
 8008f7e:	2909      	cmp	r1, #9
 8008f80:	d92a      	bls.n	8008fd8 <_strtod_l+0x1b8>
 8008f82:	9905      	ldr	r1, [sp, #20]
 8008f84:	462a      	mov	r2, r5
 8008f86:	f002 ff1f 	bl	800bdc8 <strncmp>
 8008f8a:	b398      	cbz	r0, 8008ff4 <_strtod_l+0x1d4>
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	4632      	mov	r2, r6
 8008f90:	463d      	mov	r5, r7
 8008f92:	9005      	str	r0, [sp, #20]
 8008f94:	4603      	mov	r3, r0
 8008f96:	2a65      	cmp	r2, #101	; 0x65
 8008f98:	d001      	beq.n	8008f9e <_strtod_l+0x17e>
 8008f9a:	2a45      	cmp	r2, #69	; 0x45
 8008f9c:	d118      	bne.n	8008fd0 <_strtod_l+0x1b0>
 8008f9e:	b91d      	cbnz	r5, 8008fa8 <_strtod_l+0x188>
 8008fa0:	9a04      	ldr	r2, [sp, #16]
 8008fa2:	4302      	orrs	r2, r0
 8008fa4:	d09e      	beq.n	8008ee4 <_strtod_l+0xc4>
 8008fa6:	2500      	movs	r5, #0
 8008fa8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008fac:	f108 0201 	add.w	r2, r8, #1
 8008fb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008fb2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008fb6:	2a2b      	cmp	r2, #43	; 0x2b
 8008fb8:	d075      	beq.n	80090a6 <_strtod_l+0x286>
 8008fba:	2a2d      	cmp	r2, #45	; 0x2d
 8008fbc:	d07b      	beq.n	80090b6 <_strtod_l+0x296>
 8008fbe:	f04f 0c00 	mov.w	ip, #0
 8008fc2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008fc6:	2909      	cmp	r1, #9
 8008fc8:	f240 8082 	bls.w	80090d0 <_strtod_l+0x2b0>
 8008fcc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008fd0:	2600      	movs	r6, #0
 8008fd2:	e09d      	b.n	8009110 <_strtod_l+0x2f0>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	e7c4      	b.n	8008f62 <_strtod_l+0x142>
 8008fd8:	2f08      	cmp	r7, #8
 8008fda:	bfd8      	it	le
 8008fdc:	9907      	ldrle	r1, [sp, #28]
 8008fde:	f100 0001 	add.w	r0, r0, #1
 8008fe2:	bfda      	itte	le
 8008fe4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008fe8:	9307      	strle	r3, [sp, #28]
 8008fea:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008fee:	3701      	adds	r7, #1
 8008ff0:	9017      	str	r0, [sp, #92]	; 0x5c
 8008ff2:	e7bf      	b.n	8008f74 <_strtod_l+0x154>
 8008ff4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ff6:	195a      	adds	r2, r3, r5
 8008ff8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ffa:	5d5a      	ldrb	r2, [r3, r5]
 8008ffc:	2f00      	cmp	r7, #0
 8008ffe:	d037      	beq.n	8009070 <_strtod_l+0x250>
 8009000:	9005      	str	r0, [sp, #20]
 8009002:	463d      	mov	r5, r7
 8009004:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009008:	2b09      	cmp	r3, #9
 800900a:	d912      	bls.n	8009032 <_strtod_l+0x212>
 800900c:	2301      	movs	r3, #1
 800900e:	e7c2      	b.n	8008f96 <_strtod_l+0x176>
 8009010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009012:	1c5a      	adds	r2, r3, #1
 8009014:	9217      	str	r2, [sp, #92]	; 0x5c
 8009016:	785a      	ldrb	r2, [r3, #1]
 8009018:	3001      	adds	r0, #1
 800901a:	2a30      	cmp	r2, #48	; 0x30
 800901c:	d0f8      	beq.n	8009010 <_strtod_l+0x1f0>
 800901e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009022:	2b08      	cmp	r3, #8
 8009024:	f200 84d9 	bhi.w	80099da <_strtod_l+0xbba>
 8009028:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800902a:	9005      	str	r0, [sp, #20]
 800902c:	2000      	movs	r0, #0
 800902e:	9308      	str	r3, [sp, #32]
 8009030:	4605      	mov	r5, r0
 8009032:	3a30      	subs	r2, #48	; 0x30
 8009034:	f100 0301 	add.w	r3, r0, #1
 8009038:	d014      	beq.n	8009064 <_strtod_l+0x244>
 800903a:	9905      	ldr	r1, [sp, #20]
 800903c:	4419      	add	r1, r3
 800903e:	9105      	str	r1, [sp, #20]
 8009040:	462b      	mov	r3, r5
 8009042:	eb00 0e05 	add.w	lr, r0, r5
 8009046:	210a      	movs	r1, #10
 8009048:	4573      	cmp	r3, lr
 800904a:	d113      	bne.n	8009074 <_strtod_l+0x254>
 800904c:	182b      	adds	r3, r5, r0
 800904e:	2b08      	cmp	r3, #8
 8009050:	f105 0501 	add.w	r5, r5, #1
 8009054:	4405      	add	r5, r0
 8009056:	dc1c      	bgt.n	8009092 <_strtod_l+0x272>
 8009058:	9907      	ldr	r1, [sp, #28]
 800905a:	230a      	movs	r3, #10
 800905c:	fb03 2301 	mla	r3, r3, r1, r2
 8009060:	9307      	str	r3, [sp, #28]
 8009062:	2300      	movs	r3, #0
 8009064:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009066:	1c51      	adds	r1, r2, #1
 8009068:	9117      	str	r1, [sp, #92]	; 0x5c
 800906a:	7852      	ldrb	r2, [r2, #1]
 800906c:	4618      	mov	r0, r3
 800906e:	e7c9      	b.n	8009004 <_strtod_l+0x1e4>
 8009070:	4638      	mov	r0, r7
 8009072:	e7d2      	b.n	800901a <_strtod_l+0x1fa>
 8009074:	2b08      	cmp	r3, #8
 8009076:	dc04      	bgt.n	8009082 <_strtod_l+0x262>
 8009078:	9e07      	ldr	r6, [sp, #28]
 800907a:	434e      	muls	r6, r1
 800907c:	9607      	str	r6, [sp, #28]
 800907e:	3301      	adds	r3, #1
 8009080:	e7e2      	b.n	8009048 <_strtod_l+0x228>
 8009082:	f103 0c01 	add.w	ip, r3, #1
 8009086:	f1bc 0f10 	cmp.w	ip, #16
 800908a:	bfd8      	it	le
 800908c:	fb01 f909 	mulle.w	r9, r1, r9
 8009090:	e7f5      	b.n	800907e <_strtod_l+0x25e>
 8009092:	2d10      	cmp	r5, #16
 8009094:	bfdc      	itt	le
 8009096:	230a      	movle	r3, #10
 8009098:	fb03 2909 	mlale	r9, r3, r9, r2
 800909c:	e7e1      	b.n	8009062 <_strtod_l+0x242>
 800909e:	2300      	movs	r3, #0
 80090a0:	9305      	str	r3, [sp, #20]
 80090a2:	2301      	movs	r3, #1
 80090a4:	e77c      	b.n	8008fa0 <_strtod_l+0x180>
 80090a6:	f04f 0c00 	mov.w	ip, #0
 80090aa:	f108 0202 	add.w	r2, r8, #2
 80090ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80090b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80090b4:	e785      	b.n	8008fc2 <_strtod_l+0x1a2>
 80090b6:	f04f 0c01 	mov.w	ip, #1
 80090ba:	e7f6      	b.n	80090aa <_strtod_l+0x28a>
 80090bc:	0800cc80 	.word	0x0800cc80
 80090c0:	0800ca34 	.word	0x0800ca34
 80090c4:	7ff00000 	.word	0x7ff00000
 80090c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80090ca:	1c51      	adds	r1, r2, #1
 80090cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80090ce:	7852      	ldrb	r2, [r2, #1]
 80090d0:	2a30      	cmp	r2, #48	; 0x30
 80090d2:	d0f9      	beq.n	80090c8 <_strtod_l+0x2a8>
 80090d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80090d8:	2908      	cmp	r1, #8
 80090da:	f63f af79 	bhi.w	8008fd0 <_strtod_l+0x1b0>
 80090de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80090e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80090e4:	9206      	str	r2, [sp, #24]
 80090e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80090e8:	1c51      	adds	r1, r2, #1
 80090ea:	9117      	str	r1, [sp, #92]	; 0x5c
 80090ec:	7852      	ldrb	r2, [r2, #1]
 80090ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80090f2:	2e09      	cmp	r6, #9
 80090f4:	d937      	bls.n	8009166 <_strtod_l+0x346>
 80090f6:	9e06      	ldr	r6, [sp, #24]
 80090f8:	1b89      	subs	r1, r1, r6
 80090fa:	2908      	cmp	r1, #8
 80090fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009100:	dc02      	bgt.n	8009108 <_strtod_l+0x2e8>
 8009102:	4576      	cmp	r6, lr
 8009104:	bfa8      	it	ge
 8009106:	4676      	movge	r6, lr
 8009108:	f1bc 0f00 	cmp.w	ip, #0
 800910c:	d000      	beq.n	8009110 <_strtod_l+0x2f0>
 800910e:	4276      	negs	r6, r6
 8009110:	2d00      	cmp	r5, #0
 8009112:	d14d      	bne.n	80091b0 <_strtod_l+0x390>
 8009114:	9904      	ldr	r1, [sp, #16]
 8009116:	4301      	orrs	r1, r0
 8009118:	f47f aec6 	bne.w	8008ea8 <_strtod_l+0x88>
 800911c:	2b00      	cmp	r3, #0
 800911e:	f47f aee1 	bne.w	8008ee4 <_strtod_l+0xc4>
 8009122:	2a69      	cmp	r2, #105	; 0x69
 8009124:	d027      	beq.n	8009176 <_strtod_l+0x356>
 8009126:	dc24      	bgt.n	8009172 <_strtod_l+0x352>
 8009128:	2a49      	cmp	r2, #73	; 0x49
 800912a:	d024      	beq.n	8009176 <_strtod_l+0x356>
 800912c:	2a4e      	cmp	r2, #78	; 0x4e
 800912e:	f47f aed9 	bne.w	8008ee4 <_strtod_l+0xc4>
 8009132:	499f      	ldr	r1, [pc, #636]	; (80093b0 <_strtod_l+0x590>)
 8009134:	a817      	add	r0, sp, #92	; 0x5c
 8009136:	f001 fe3d 	bl	800adb4 <__match>
 800913a:	2800      	cmp	r0, #0
 800913c:	f43f aed2 	beq.w	8008ee4 <_strtod_l+0xc4>
 8009140:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b28      	cmp	r3, #40	; 0x28
 8009146:	d12d      	bne.n	80091a4 <_strtod_l+0x384>
 8009148:	499a      	ldr	r1, [pc, #616]	; (80093b4 <_strtod_l+0x594>)
 800914a:	aa1a      	add	r2, sp, #104	; 0x68
 800914c:	a817      	add	r0, sp, #92	; 0x5c
 800914e:	f001 fe45 	bl	800addc <__hexnan>
 8009152:	2805      	cmp	r0, #5
 8009154:	d126      	bne.n	80091a4 <_strtod_l+0x384>
 8009156:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009158:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800915c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009160:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009164:	e6a0      	b.n	8008ea8 <_strtod_l+0x88>
 8009166:	210a      	movs	r1, #10
 8009168:	fb01 2e0e 	mla	lr, r1, lr, r2
 800916c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009170:	e7b9      	b.n	80090e6 <_strtod_l+0x2c6>
 8009172:	2a6e      	cmp	r2, #110	; 0x6e
 8009174:	e7db      	b.n	800912e <_strtod_l+0x30e>
 8009176:	4990      	ldr	r1, [pc, #576]	; (80093b8 <_strtod_l+0x598>)
 8009178:	a817      	add	r0, sp, #92	; 0x5c
 800917a:	f001 fe1b 	bl	800adb4 <__match>
 800917e:	2800      	cmp	r0, #0
 8009180:	f43f aeb0 	beq.w	8008ee4 <_strtod_l+0xc4>
 8009184:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009186:	498d      	ldr	r1, [pc, #564]	; (80093bc <_strtod_l+0x59c>)
 8009188:	3b01      	subs	r3, #1
 800918a:	a817      	add	r0, sp, #92	; 0x5c
 800918c:	9317      	str	r3, [sp, #92]	; 0x5c
 800918e:	f001 fe11 	bl	800adb4 <__match>
 8009192:	b910      	cbnz	r0, 800919a <_strtod_l+0x37a>
 8009194:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009196:	3301      	adds	r3, #1
 8009198:	9317      	str	r3, [sp, #92]	; 0x5c
 800919a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80093cc <_strtod_l+0x5ac>
 800919e:	f04f 0a00 	mov.w	sl, #0
 80091a2:	e681      	b.n	8008ea8 <_strtod_l+0x88>
 80091a4:	4886      	ldr	r0, [pc, #536]	; (80093c0 <_strtod_l+0x5a0>)
 80091a6:	f002 fdf7 	bl	800bd98 <nan>
 80091aa:	ec5b ab10 	vmov	sl, fp, d0
 80091ae:	e67b      	b.n	8008ea8 <_strtod_l+0x88>
 80091b0:	9b05      	ldr	r3, [sp, #20]
 80091b2:	9807      	ldr	r0, [sp, #28]
 80091b4:	1af3      	subs	r3, r6, r3
 80091b6:	2f00      	cmp	r7, #0
 80091b8:	bf08      	it	eq
 80091ba:	462f      	moveq	r7, r5
 80091bc:	2d10      	cmp	r5, #16
 80091be:	9306      	str	r3, [sp, #24]
 80091c0:	46a8      	mov	r8, r5
 80091c2:	bfa8      	it	ge
 80091c4:	f04f 0810 	movge.w	r8, #16
 80091c8:	f7f7 f99c 	bl	8000504 <__aeabi_ui2d>
 80091cc:	2d09      	cmp	r5, #9
 80091ce:	4682      	mov	sl, r0
 80091d0:	468b      	mov	fp, r1
 80091d2:	dd13      	ble.n	80091fc <_strtod_l+0x3dc>
 80091d4:	4b7b      	ldr	r3, [pc, #492]	; (80093c4 <_strtod_l+0x5a4>)
 80091d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80091da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80091de:	f7f7 fa0b 	bl	80005f8 <__aeabi_dmul>
 80091e2:	4682      	mov	sl, r0
 80091e4:	4648      	mov	r0, r9
 80091e6:	468b      	mov	fp, r1
 80091e8:	f7f7 f98c 	bl	8000504 <__aeabi_ui2d>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4650      	mov	r0, sl
 80091f2:	4659      	mov	r1, fp
 80091f4:	f7f7 f84a 	bl	800028c <__adddf3>
 80091f8:	4682      	mov	sl, r0
 80091fa:	468b      	mov	fp, r1
 80091fc:	2d0f      	cmp	r5, #15
 80091fe:	dc38      	bgt.n	8009272 <_strtod_l+0x452>
 8009200:	9b06      	ldr	r3, [sp, #24]
 8009202:	2b00      	cmp	r3, #0
 8009204:	f43f ae50 	beq.w	8008ea8 <_strtod_l+0x88>
 8009208:	dd24      	ble.n	8009254 <_strtod_l+0x434>
 800920a:	2b16      	cmp	r3, #22
 800920c:	dc0b      	bgt.n	8009226 <_strtod_l+0x406>
 800920e:	496d      	ldr	r1, [pc, #436]	; (80093c4 <_strtod_l+0x5a4>)
 8009210:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009218:	4652      	mov	r2, sl
 800921a:	465b      	mov	r3, fp
 800921c:	f7f7 f9ec 	bl	80005f8 <__aeabi_dmul>
 8009220:	4682      	mov	sl, r0
 8009222:	468b      	mov	fp, r1
 8009224:	e640      	b.n	8008ea8 <_strtod_l+0x88>
 8009226:	9a06      	ldr	r2, [sp, #24]
 8009228:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800922c:	4293      	cmp	r3, r2
 800922e:	db20      	blt.n	8009272 <_strtod_l+0x452>
 8009230:	4c64      	ldr	r4, [pc, #400]	; (80093c4 <_strtod_l+0x5a4>)
 8009232:	f1c5 050f 	rsb	r5, r5, #15
 8009236:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800923a:	4652      	mov	r2, sl
 800923c:	465b      	mov	r3, fp
 800923e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009242:	f7f7 f9d9 	bl	80005f8 <__aeabi_dmul>
 8009246:	9b06      	ldr	r3, [sp, #24]
 8009248:	1b5d      	subs	r5, r3, r5
 800924a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800924e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009252:	e7e3      	b.n	800921c <_strtod_l+0x3fc>
 8009254:	9b06      	ldr	r3, [sp, #24]
 8009256:	3316      	adds	r3, #22
 8009258:	db0b      	blt.n	8009272 <_strtod_l+0x452>
 800925a:	9b05      	ldr	r3, [sp, #20]
 800925c:	1b9e      	subs	r6, r3, r6
 800925e:	4b59      	ldr	r3, [pc, #356]	; (80093c4 <_strtod_l+0x5a4>)
 8009260:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009264:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009268:	4650      	mov	r0, sl
 800926a:	4659      	mov	r1, fp
 800926c:	f7f7 faee 	bl	800084c <__aeabi_ddiv>
 8009270:	e7d6      	b.n	8009220 <_strtod_l+0x400>
 8009272:	9b06      	ldr	r3, [sp, #24]
 8009274:	eba5 0808 	sub.w	r8, r5, r8
 8009278:	4498      	add	r8, r3
 800927a:	f1b8 0f00 	cmp.w	r8, #0
 800927e:	dd74      	ble.n	800936a <_strtod_l+0x54a>
 8009280:	f018 030f 	ands.w	r3, r8, #15
 8009284:	d00a      	beq.n	800929c <_strtod_l+0x47c>
 8009286:	494f      	ldr	r1, [pc, #316]	; (80093c4 <_strtod_l+0x5a4>)
 8009288:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800928c:	4652      	mov	r2, sl
 800928e:	465b      	mov	r3, fp
 8009290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009294:	f7f7 f9b0 	bl	80005f8 <__aeabi_dmul>
 8009298:	4682      	mov	sl, r0
 800929a:	468b      	mov	fp, r1
 800929c:	f038 080f 	bics.w	r8, r8, #15
 80092a0:	d04f      	beq.n	8009342 <_strtod_l+0x522>
 80092a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80092a6:	dd22      	ble.n	80092ee <_strtod_l+0x4ce>
 80092a8:	2500      	movs	r5, #0
 80092aa:	462e      	mov	r6, r5
 80092ac:	9507      	str	r5, [sp, #28]
 80092ae:	9505      	str	r5, [sp, #20]
 80092b0:	2322      	movs	r3, #34	; 0x22
 80092b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80093cc <_strtod_l+0x5ac>
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	f04f 0a00 	mov.w	sl, #0
 80092bc:	9b07      	ldr	r3, [sp, #28]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f43f adf2 	beq.w	8008ea8 <_strtod_l+0x88>
 80092c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092c6:	4620      	mov	r0, r4
 80092c8:	f001 fe90 	bl	800afec <_Bfree>
 80092cc:	9905      	ldr	r1, [sp, #20]
 80092ce:	4620      	mov	r0, r4
 80092d0:	f001 fe8c 	bl	800afec <_Bfree>
 80092d4:	4631      	mov	r1, r6
 80092d6:	4620      	mov	r0, r4
 80092d8:	f001 fe88 	bl	800afec <_Bfree>
 80092dc:	9907      	ldr	r1, [sp, #28]
 80092de:	4620      	mov	r0, r4
 80092e0:	f001 fe84 	bl	800afec <_Bfree>
 80092e4:	4629      	mov	r1, r5
 80092e6:	4620      	mov	r0, r4
 80092e8:	f001 fe80 	bl	800afec <_Bfree>
 80092ec:	e5dc      	b.n	8008ea8 <_strtod_l+0x88>
 80092ee:	4b36      	ldr	r3, [pc, #216]	; (80093c8 <_strtod_l+0x5a8>)
 80092f0:	9304      	str	r3, [sp, #16]
 80092f2:	2300      	movs	r3, #0
 80092f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80092f8:	4650      	mov	r0, sl
 80092fa:	4659      	mov	r1, fp
 80092fc:	4699      	mov	r9, r3
 80092fe:	f1b8 0f01 	cmp.w	r8, #1
 8009302:	dc21      	bgt.n	8009348 <_strtod_l+0x528>
 8009304:	b10b      	cbz	r3, 800930a <_strtod_l+0x4ea>
 8009306:	4682      	mov	sl, r0
 8009308:	468b      	mov	fp, r1
 800930a:	4b2f      	ldr	r3, [pc, #188]	; (80093c8 <_strtod_l+0x5a8>)
 800930c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009310:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009314:	4652      	mov	r2, sl
 8009316:	465b      	mov	r3, fp
 8009318:	e9d9 0100 	ldrd	r0, r1, [r9]
 800931c:	f7f7 f96c 	bl	80005f8 <__aeabi_dmul>
 8009320:	4b2a      	ldr	r3, [pc, #168]	; (80093cc <_strtod_l+0x5ac>)
 8009322:	460a      	mov	r2, r1
 8009324:	400b      	ands	r3, r1
 8009326:	492a      	ldr	r1, [pc, #168]	; (80093d0 <_strtod_l+0x5b0>)
 8009328:	428b      	cmp	r3, r1
 800932a:	4682      	mov	sl, r0
 800932c:	d8bc      	bhi.n	80092a8 <_strtod_l+0x488>
 800932e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009332:	428b      	cmp	r3, r1
 8009334:	bf86      	itte	hi
 8009336:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80093d4 <_strtod_l+0x5b4>
 800933a:	f04f 3aff 	movhi.w	sl, #4294967295
 800933e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009342:	2300      	movs	r3, #0
 8009344:	9304      	str	r3, [sp, #16]
 8009346:	e084      	b.n	8009452 <_strtod_l+0x632>
 8009348:	f018 0f01 	tst.w	r8, #1
 800934c:	d005      	beq.n	800935a <_strtod_l+0x53a>
 800934e:	9b04      	ldr	r3, [sp, #16]
 8009350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009354:	f7f7 f950 	bl	80005f8 <__aeabi_dmul>
 8009358:	2301      	movs	r3, #1
 800935a:	9a04      	ldr	r2, [sp, #16]
 800935c:	3208      	adds	r2, #8
 800935e:	f109 0901 	add.w	r9, r9, #1
 8009362:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009366:	9204      	str	r2, [sp, #16]
 8009368:	e7c9      	b.n	80092fe <_strtod_l+0x4de>
 800936a:	d0ea      	beq.n	8009342 <_strtod_l+0x522>
 800936c:	f1c8 0800 	rsb	r8, r8, #0
 8009370:	f018 020f 	ands.w	r2, r8, #15
 8009374:	d00a      	beq.n	800938c <_strtod_l+0x56c>
 8009376:	4b13      	ldr	r3, [pc, #76]	; (80093c4 <_strtod_l+0x5a4>)
 8009378:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800937c:	4650      	mov	r0, sl
 800937e:	4659      	mov	r1, fp
 8009380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009384:	f7f7 fa62 	bl	800084c <__aeabi_ddiv>
 8009388:	4682      	mov	sl, r0
 800938a:	468b      	mov	fp, r1
 800938c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009390:	d0d7      	beq.n	8009342 <_strtod_l+0x522>
 8009392:	f1b8 0f1f 	cmp.w	r8, #31
 8009396:	dd1f      	ble.n	80093d8 <_strtod_l+0x5b8>
 8009398:	2500      	movs	r5, #0
 800939a:	462e      	mov	r6, r5
 800939c:	9507      	str	r5, [sp, #28]
 800939e:	9505      	str	r5, [sp, #20]
 80093a0:	2322      	movs	r3, #34	; 0x22
 80093a2:	f04f 0a00 	mov.w	sl, #0
 80093a6:	f04f 0b00 	mov.w	fp, #0
 80093aa:	6023      	str	r3, [r4, #0]
 80093ac:	e786      	b.n	80092bc <_strtod_l+0x49c>
 80093ae:	bf00      	nop
 80093b0:	0800ca05 	.word	0x0800ca05
 80093b4:	0800ca48 	.word	0x0800ca48
 80093b8:	0800c9fd 	.word	0x0800c9fd
 80093bc:	0800cb8c 	.word	0x0800cb8c
 80093c0:	0800ce38 	.word	0x0800ce38
 80093c4:	0800cd18 	.word	0x0800cd18
 80093c8:	0800ccf0 	.word	0x0800ccf0
 80093cc:	7ff00000 	.word	0x7ff00000
 80093d0:	7ca00000 	.word	0x7ca00000
 80093d4:	7fefffff 	.word	0x7fefffff
 80093d8:	f018 0310 	ands.w	r3, r8, #16
 80093dc:	bf18      	it	ne
 80093de:	236a      	movne	r3, #106	; 0x6a
 80093e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009790 <_strtod_l+0x970>
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	4650      	mov	r0, sl
 80093e8:	4659      	mov	r1, fp
 80093ea:	2300      	movs	r3, #0
 80093ec:	f018 0f01 	tst.w	r8, #1
 80093f0:	d004      	beq.n	80093fc <_strtod_l+0x5dc>
 80093f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80093f6:	f7f7 f8ff 	bl	80005f8 <__aeabi_dmul>
 80093fa:	2301      	movs	r3, #1
 80093fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009400:	f109 0908 	add.w	r9, r9, #8
 8009404:	d1f2      	bne.n	80093ec <_strtod_l+0x5cc>
 8009406:	b10b      	cbz	r3, 800940c <_strtod_l+0x5ec>
 8009408:	4682      	mov	sl, r0
 800940a:	468b      	mov	fp, r1
 800940c:	9b04      	ldr	r3, [sp, #16]
 800940e:	b1c3      	cbz	r3, 8009442 <_strtod_l+0x622>
 8009410:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009414:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009418:	2b00      	cmp	r3, #0
 800941a:	4659      	mov	r1, fp
 800941c:	dd11      	ble.n	8009442 <_strtod_l+0x622>
 800941e:	2b1f      	cmp	r3, #31
 8009420:	f340 8124 	ble.w	800966c <_strtod_l+0x84c>
 8009424:	2b34      	cmp	r3, #52	; 0x34
 8009426:	bfde      	ittt	le
 8009428:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800942c:	f04f 33ff 	movle.w	r3, #4294967295
 8009430:	fa03 f202 	lslle.w	r2, r3, r2
 8009434:	f04f 0a00 	mov.w	sl, #0
 8009438:	bfcc      	ite	gt
 800943a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800943e:	ea02 0b01 	andle.w	fp, r2, r1
 8009442:	2200      	movs	r2, #0
 8009444:	2300      	movs	r3, #0
 8009446:	4650      	mov	r0, sl
 8009448:	4659      	mov	r1, fp
 800944a:	f7f7 fb3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800944e:	2800      	cmp	r0, #0
 8009450:	d1a2      	bne.n	8009398 <_strtod_l+0x578>
 8009452:	9b07      	ldr	r3, [sp, #28]
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	9908      	ldr	r1, [sp, #32]
 8009458:	462b      	mov	r3, r5
 800945a:	463a      	mov	r2, r7
 800945c:	4620      	mov	r0, r4
 800945e:	f001 fe2d 	bl	800b0bc <__s2b>
 8009462:	9007      	str	r0, [sp, #28]
 8009464:	2800      	cmp	r0, #0
 8009466:	f43f af1f 	beq.w	80092a8 <_strtod_l+0x488>
 800946a:	9b05      	ldr	r3, [sp, #20]
 800946c:	1b9e      	subs	r6, r3, r6
 800946e:	9b06      	ldr	r3, [sp, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	bfb4      	ite	lt
 8009474:	4633      	movlt	r3, r6
 8009476:	2300      	movge	r3, #0
 8009478:	930c      	str	r3, [sp, #48]	; 0x30
 800947a:	9b06      	ldr	r3, [sp, #24]
 800947c:	2500      	movs	r5, #0
 800947e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009482:	9312      	str	r3, [sp, #72]	; 0x48
 8009484:	462e      	mov	r6, r5
 8009486:	9b07      	ldr	r3, [sp, #28]
 8009488:	4620      	mov	r0, r4
 800948a:	6859      	ldr	r1, [r3, #4]
 800948c:	f001 fd6e 	bl	800af6c <_Balloc>
 8009490:	9005      	str	r0, [sp, #20]
 8009492:	2800      	cmp	r0, #0
 8009494:	f43f af0c 	beq.w	80092b0 <_strtod_l+0x490>
 8009498:	9b07      	ldr	r3, [sp, #28]
 800949a:	691a      	ldr	r2, [r3, #16]
 800949c:	3202      	adds	r2, #2
 800949e:	f103 010c 	add.w	r1, r3, #12
 80094a2:	0092      	lsls	r2, r2, #2
 80094a4:	300c      	adds	r0, #12
 80094a6:	f001 fd53 	bl	800af50 <memcpy>
 80094aa:	ec4b ab10 	vmov	d0, sl, fp
 80094ae:	aa1a      	add	r2, sp, #104	; 0x68
 80094b0:	a919      	add	r1, sp, #100	; 0x64
 80094b2:	4620      	mov	r0, r4
 80094b4:	f002 f948 	bl	800b748 <__d2b>
 80094b8:	ec4b ab18 	vmov	d8, sl, fp
 80094bc:	9018      	str	r0, [sp, #96]	; 0x60
 80094be:	2800      	cmp	r0, #0
 80094c0:	f43f aef6 	beq.w	80092b0 <_strtod_l+0x490>
 80094c4:	2101      	movs	r1, #1
 80094c6:	4620      	mov	r0, r4
 80094c8:	f001 fe92 	bl	800b1f0 <__i2b>
 80094cc:	4606      	mov	r6, r0
 80094ce:	2800      	cmp	r0, #0
 80094d0:	f43f aeee 	beq.w	80092b0 <_strtod_l+0x490>
 80094d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094d6:	9904      	ldr	r1, [sp, #16]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	bfab      	itete	ge
 80094dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80094de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80094e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80094e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80094e6:	bfac      	ite	ge
 80094e8:	eb03 0902 	addge.w	r9, r3, r2
 80094ec:	1ad7      	sublt	r7, r2, r3
 80094ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80094f0:	eba3 0801 	sub.w	r8, r3, r1
 80094f4:	4490      	add	r8, r2
 80094f6:	4ba1      	ldr	r3, [pc, #644]	; (800977c <_strtod_l+0x95c>)
 80094f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80094fc:	4598      	cmp	r8, r3
 80094fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009502:	f280 80c7 	bge.w	8009694 <_strtod_l+0x874>
 8009506:	eba3 0308 	sub.w	r3, r3, r8
 800950a:	2b1f      	cmp	r3, #31
 800950c:	eba2 0203 	sub.w	r2, r2, r3
 8009510:	f04f 0101 	mov.w	r1, #1
 8009514:	f300 80b1 	bgt.w	800967a <_strtod_l+0x85a>
 8009518:	fa01 f303 	lsl.w	r3, r1, r3
 800951c:	930d      	str	r3, [sp, #52]	; 0x34
 800951e:	2300      	movs	r3, #0
 8009520:	9308      	str	r3, [sp, #32]
 8009522:	eb09 0802 	add.w	r8, r9, r2
 8009526:	9b04      	ldr	r3, [sp, #16]
 8009528:	45c1      	cmp	r9, r8
 800952a:	4417      	add	r7, r2
 800952c:	441f      	add	r7, r3
 800952e:	464b      	mov	r3, r9
 8009530:	bfa8      	it	ge
 8009532:	4643      	movge	r3, r8
 8009534:	42bb      	cmp	r3, r7
 8009536:	bfa8      	it	ge
 8009538:	463b      	movge	r3, r7
 800953a:	2b00      	cmp	r3, #0
 800953c:	bfc2      	ittt	gt
 800953e:	eba8 0803 	subgt.w	r8, r8, r3
 8009542:	1aff      	subgt	r7, r7, r3
 8009544:	eba9 0903 	subgt.w	r9, r9, r3
 8009548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800954a:	2b00      	cmp	r3, #0
 800954c:	dd17      	ble.n	800957e <_strtod_l+0x75e>
 800954e:	4631      	mov	r1, r6
 8009550:	461a      	mov	r2, r3
 8009552:	4620      	mov	r0, r4
 8009554:	f001 ff0c 	bl	800b370 <__pow5mult>
 8009558:	4606      	mov	r6, r0
 800955a:	2800      	cmp	r0, #0
 800955c:	f43f aea8 	beq.w	80092b0 <_strtod_l+0x490>
 8009560:	4601      	mov	r1, r0
 8009562:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009564:	4620      	mov	r0, r4
 8009566:	f001 fe59 	bl	800b21c <__multiply>
 800956a:	900b      	str	r0, [sp, #44]	; 0x2c
 800956c:	2800      	cmp	r0, #0
 800956e:	f43f ae9f 	beq.w	80092b0 <_strtod_l+0x490>
 8009572:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009574:	4620      	mov	r0, r4
 8009576:	f001 fd39 	bl	800afec <_Bfree>
 800957a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800957c:	9318      	str	r3, [sp, #96]	; 0x60
 800957e:	f1b8 0f00 	cmp.w	r8, #0
 8009582:	f300 808c 	bgt.w	800969e <_strtod_l+0x87e>
 8009586:	9b06      	ldr	r3, [sp, #24]
 8009588:	2b00      	cmp	r3, #0
 800958a:	dd08      	ble.n	800959e <_strtod_l+0x77e>
 800958c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800958e:	9905      	ldr	r1, [sp, #20]
 8009590:	4620      	mov	r0, r4
 8009592:	f001 feed 	bl	800b370 <__pow5mult>
 8009596:	9005      	str	r0, [sp, #20]
 8009598:	2800      	cmp	r0, #0
 800959a:	f43f ae89 	beq.w	80092b0 <_strtod_l+0x490>
 800959e:	2f00      	cmp	r7, #0
 80095a0:	dd08      	ble.n	80095b4 <_strtod_l+0x794>
 80095a2:	9905      	ldr	r1, [sp, #20]
 80095a4:	463a      	mov	r2, r7
 80095a6:	4620      	mov	r0, r4
 80095a8:	f001 ff3c 	bl	800b424 <__lshift>
 80095ac:	9005      	str	r0, [sp, #20]
 80095ae:	2800      	cmp	r0, #0
 80095b0:	f43f ae7e 	beq.w	80092b0 <_strtod_l+0x490>
 80095b4:	f1b9 0f00 	cmp.w	r9, #0
 80095b8:	dd08      	ble.n	80095cc <_strtod_l+0x7ac>
 80095ba:	4631      	mov	r1, r6
 80095bc:	464a      	mov	r2, r9
 80095be:	4620      	mov	r0, r4
 80095c0:	f001 ff30 	bl	800b424 <__lshift>
 80095c4:	4606      	mov	r6, r0
 80095c6:	2800      	cmp	r0, #0
 80095c8:	f43f ae72 	beq.w	80092b0 <_strtod_l+0x490>
 80095cc:	9a05      	ldr	r2, [sp, #20]
 80095ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80095d0:	4620      	mov	r0, r4
 80095d2:	f001 ffb3 	bl	800b53c <__mdiff>
 80095d6:	4605      	mov	r5, r0
 80095d8:	2800      	cmp	r0, #0
 80095da:	f43f ae69 	beq.w	80092b0 <_strtod_l+0x490>
 80095de:	68c3      	ldr	r3, [r0, #12]
 80095e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80095e2:	2300      	movs	r3, #0
 80095e4:	60c3      	str	r3, [r0, #12]
 80095e6:	4631      	mov	r1, r6
 80095e8:	f001 ff8c 	bl	800b504 <__mcmp>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	da60      	bge.n	80096b2 <_strtod_l+0x892>
 80095f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f2:	ea53 030a 	orrs.w	r3, r3, sl
 80095f6:	f040 8082 	bne.w	80096fe <_strtod_l+0x8de>
 80095fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d17d      	bne.n	80096fe <_strtod_l+0x8de>
 8009602:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009606:	0d1b      	lsrs	r3, r3, #20
 8009608:	051b      	lsls	r3, r3, #20
 800960a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800960e:	d976      	bls.n	80096fe <_strtod_l+0x8de>
 8009610:	696b      	ldr	r3, [r5, #20]
 8009612:	b913      	cbnz	r3, 800961a <_strtod_l+0x7fa>
 8009614:	692b      	ldr	r3, [r5, #16]
 8009616:	2b01      	cmp	r3, #1
 8009618:	dd71      	ble.n	80096fe <_strtod_l+0x8de>
 800961a:	4629      	mov	r1, r5
 800961c:	2201      	movs	r2, #1
 800961e:	4620      	mov	r0, r4
 8009620:	f001 ff00 	bl	800b424 <__lshift>
 8009624:	4631      	mov	r1, r6
 8009626:	4605      	mov	r5, r0
 8009628:	f001 ff6c 	bl	800b504 <__mcmp>
 800962c:	2800      	cmp	r0, #0
 800962e:	dd66      	ble.n	80096fe <_strtod_l+0x8de>
 8009630:	9904      	ldr	r1, [sp, #16]
 8009632:	4a53      	ldr	r2, [pc, #332]	; (8009780 <_strtod_l+0x960>)
 8009634:	465b      	mov	r3, fp
 8009636:	2900      	cmp	r1, #0
 8009638:	f000 8081 	beq.w	800973e <_strtod_l+0x91e>
 800963c:	ea02 010b 	and.w	r1, r2, fp
 8009640:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009644:	dc7b      	bgt.n	800973e <_strtod_l+0x91e>
 8009646:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800964a:	f77f aea9 	ble.w	80093a0 <_strtod_l+0x580>
 800964e:	4b4d      	ldr	r3, [pc, #308]	; (8009784 <_strtod_l+0x964>)
 8009650:	4650      	mov	r0, sl
 8009652:	4659      	mov	r1, fp
 8009654:	2200      	movs	r2, #0
 8009656:	f7f6 ffcf 	bl	80005f8 <__aeabi_dmul>
 800965a:	460b      	mov	r3, r1
 800965c:	4303      	orrs	r3, r0
 800965e:	bf08      	it	eq
 8009660:	2322      	moveq	r3, #34	; 0x22
 8009662:	4682      	mov	sl, r0
 8009664:	468b      	mov	fp, r1
 8009666:	bf08      	it	eq
 8009668:	6023      	streq	r3, [r4, #0]
 800966a:	e62b      	b.n	80092c4 <_strtod_l+0x4a4>
 800966c:	f04f 32ff 	mov.w	r2, #4294967295
 8009670:	fa02 f303 	lsl.w	r3, r2, r3
 8009674:	ea03 0a0a 	and.w	sl, r3, sl
 8009678:	e6e3      	b.n	8009442 <_strtod_l+0x622>
 800967a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800967e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009682:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009686:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800968a:	fa01 f308 	lsl.w	r3, r1, r8
 800968e:	9308      	str	r3, [sp, #32]
 8009690:	910d      	str	r1, [sp, #52]	; 0x34
 8009692:	e746      	b.n	8009522 <_strtod_l+0x702>
 8009694:	2300      	movs	r3, #0
 8009696:	9308      	str	r3, [sp, #32]
 8009698:	2301      	movs	r3, #1
 800969a:	930d      	str	r3, [sp, #52]	; 0x34
 800969c:	e741      	b.n	8009522 <_strtod_l+0x702>
 800969e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096a0:	4642      	mov	r2, r8
 80096a2:	4620      	mov	r0, r4
 80096a4:	f001 febe 	bl	800b424 <__lshift>
 80096a8:	9018      	str	r0, [sp, #96]	; 0x60
 80096aa:	2800      	cmp	r0, #0
 80096ac:	f47f af6b 	bne.w	8009586 <_strtod_l+0x766>
 80096b0:	e5fe      	b.n	80092b0 <_strtod_l+0x490>
 80096b2:	465f      	mov	r7, fp
 80096b4:	d16e      	bne.n	8009794 <_strtod_l+0x974>
 80096b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096bc:	b342      	cbz	r2, 8009710 <_strtod_l+0x8f0>
 80096be:	4a32      	ldr	r2, [pc, #200]	; (8009788 <_strtod_l+0x968>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d128      	bne.n	8009716 <_strtod_l+0x8f6>
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	4651      	mov	r1, sl
 80096c8:	b1eb      	cbz	r3, 8009706 <_strtod_l+0x8e6>
 80096ca:	4b2d      	ldr	r3, [pc, #180]	; (8009780 <_strtod_l+0x960>)
 80096cc:	403b      	ands	r3, r7
 80096ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80096d2:	f04f 32ff 	mov.w	r2, #4294967295
 80096d6:	d819      	bhi.n	800970c <_strtod_l+0x8ec>
 80096d8:	0d1b      	lsrs	r3, r3, #20
 80096da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80096de:	fa02 f303 	lsl.w	r3, r2, r3
 80096e2:	4299      	cmp	r1, r3
 80096e4:	d117      	bne.n	8009716 <_strtod_l+0x8f6>
 80096e6:	4b29      	ldr	r3, [pc, #164]	; (800978c <_strtod_l+0x96c>)
 80096e8:	429f      	cmp	r7, r3
 80096ea:	d102      	bne.n	80096f2 <_strtod_l+0x8d2>
 80096ec:	3101      	adds	r1, #1
 80096ee:	f43f addf 	beq.w	80092b0 <_strtod_l+0x490>
 80096f2:	4b23      	ldr	r3, [pc, #140]	; (8009780 <_strtod_l+0x960>)
 80096f4:	403b      	ands	r3, r7
 80096f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80096fa:	f04f 0a00 	mov.w	sl, #0
 80096fe:	9b04      	ldr	r3, [sp, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1a4      	bne.n	800964e <_strtod_l+0x82e>
 8009704:	e5de      	b.n	80092c4 <_strtod_l+0x4a4>
 8009706:	f04f 33ff 	mov.w	r3, #4294967295
 800970a:	e7ea      	b.n	80096e2 <_strtod_l+0x8c2>
 800970c:	4613      	mov	r3, r2
 800970e:	e7e8      	b.n	80096e2 <_strtod_l+0x8c2>
 8009710:	ea53 030a 	orrs.w	r3, r3, sl
 8009714:	d08c      	beq.n	8009630 <_strtod_l+0x810>
 8009716:	9b08      	ldr	r3, [sp, #32]
 8009718:	b1db      	cbz	r3, 8009752 <_strtod_l+0x932>
 800971a:	423b      	tst	r3, r7
 800971c:	d0ef      	beq.n	80096fe <_strtod_l+0x8de>
 800971e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009720:	9a04      	ldr	r2, [sp, #16]
 8009722:	4650      	mov	r0, sl
 8009724:	4659      	mov	r1, fp
 8009726:	b1c3      	cbz	r3, 800975a <_strtod_l+0x93a>
 8009728:	f7ff fb5c 	bl	8008de4 <sulp>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	ec51 0b18 	vmov	r0, r1, d8
 8009734:	f7f6 fdaa 	bl	800028c <__adddf3>
 8009738:	4682      	mov	sl, r0
 800973a:	468b      	mov	fp, r1
 800973c:	e7df      	b.n	80096fe <_strtod_l+0x8de>
 800973e:	4013      	ands	r3, r2
 8009740:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009744:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009748:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800974c:	f04f 3aff 	mov.w	sl, #4294967295
 8009750:	e7d5      	b.n	80096fe <_strtod_l+0x8de>
 8009752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009754:	ea13 0f0a 	tst.w	r3, sl
 8009758:	e7e0      	b.n	800971c <_strtod_l+0x8fc>
 800975a:	f7ff fb43 	bl	8008de4 <sulp>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	ec51 0b18 	vmov	r0, r1, d8
 8009766:	f7f6 fd8f 	bl	8000288 <__aeabi_dsub>
 800976a:	2200      	movs	r2, #0
 800976c:	2300      	movs	r3, #0
 800976e:	4682      	mov	sl, r0
 8009770:	468b      	mov	fp, r1
 8009772:	f7f7 f9a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009776:	2800      	cmp	r0, #0
 8009778:	d0c1      	beq.n	80096fe <_strtod_l+0x8de>
 800977a:	e611      	b.n	80093a0 <_strtod_l+0x580>
 800977c:	fffffc02 	.word	0xfffffc02
 8009780:	7ff00000 	.word	0x7ff00000
 8009784:	39500000 	.word	0x39500000
 8009788:	000fffff 	.word	0x000fffff
 800978c:	7fefffff 	.word	0x7fefffff
 8009790:	0800ca60 	.word	0x0800ca60
 8009794:	4631      	mov	r1, r6
 8009796:	4628      	mov	r0, r5
 8009798:	f002 f832 	bl	800b800 <__ratio>
 800979c:	ec59 8b10 	vmov	r8, r9, d0
 80097a0:	ee10 0a10 	vmov	r0, s0
 80097a4:	2200      	movs	r2, #0
 80097a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097aa:	4649      	mov	r1, r9
 80097ac:	f7f7 f9a0 	bl	8000af0 <__aeabi_dcmple>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d07a      	beq.n	80098aa <_strtod_l+0xa8a>
 80097b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d04a      	beq.n	8009850 <_strtod_l+0xa30>
 80097ba:	4b95      	ldr	r3, [pc, #596]	; (8009a10 <_strtod_l+0xbf0>)
 80097bc:	2200      	movs	r2, #0
 80097be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80097c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009a10 <_strtod_l+0xbf0>
 80097c6:	f04f 0800 	mov.w	r8, #0
 80097ca:	4b92      	ldr	r3, [pc, #584]	; (8009a14 <_strtod_l+0xbf4>)
 80097cc:	403b      	ands	r3, r7
 80097ce:	930d      	str	r3, [sp, #52]	; 0x34
 80097d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097d2:	4b91      	ldr	r3, [pc, #580]	; (8009a18 <_strtod_l+0xbf8>)
 80097d4:	429a      	cmp	r2, r3
 80097d6:	f040 80b0 	bne.w	800993a <_strtod_l+0xb1a>
 80097da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80097e2:	ec4b ab10 	vmov	d0, sl, fp
 80097e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80097ea:	f001 ff31 	bl	800b650 <__ulp>
 80097ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097f2:	ec53 2b10 	vmov	r2, r3, d0
 80097f6:	f7f6 feff 	bl	80005f8 <__aeabi_dmul>
 80097fa:	4652      	mov	r2, sl
 80097fc:	465b      	mov	r3, fp
 80097fe:	f7f6 fd45 	bl	800028c <__adddf3>
 8009802:	460b      	mov	r3, r1
 8009804:	4983      	ldr	r1, [pc, #524]	; (8009a14 <_strtod_l+0xbf4>)
 8009806:	4a85      	ldr	r2, [pc, #532]	; (8009a1c <_strtod_l+0xbfc>)
 8009808:	4019      	ands	r1, r3
 800980a:	4291      	cmp	r1, r2
 800980c:	4682      	mov	sl, r0
 800980e:	d960      	bls.n	80098d2 <_strtod_l+0xab2>
 8009810:	ee18 3a90 	vmov	r3, s17
 8009814:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009818:	4293      	cmp	r3, r2
 800981a:	d104      	bne.n	8009826 <_strtod_l+0xa06>
 800981c:	ee18 3a10 	vmov	r3, s16
 8009820:	3301      	adds	r3, #1
 8009822:	f43f ad45 	beq.w	80092b0 <_strtod_l+0x490>
 8009826:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009a28 <_strtod_l+0xc08>
 800982a:	f04f 3aff 	mov.w	sl, #4294967295
 800982e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009830:	4620      	mov	r0, r4
 8009832:	f001 fbdb 	bl	800afec <_Bfree>
 8009836:	9905      	ldr	r1, [sp, #20]
 8009838:	4620      	mov	r0, r4
 800983a:	f001 fbd7 	bl	800afec <_Bfree>
 800983e:	4631      	mov	r1, r6
 8009840:	4620      	mov	r0, r4
 8009842:	f001 fbd3 	bl	800afec <_Bfree>
 8009846:	4629      	mov	r1, r5
 8009848:	4620      	mov	r0, r4
 800984a:	f001 fbcf 	bl	800afec <_Bfree>
 800984e:	e61a      	b.n	8009486 <_strtod_l+0x666>
 8009850:	f1ba 0f00 	cmp.w	sl, #0
 8009854:	d11b      	bne.n	800988e <_strtod_l+0xa6e>
 8009856:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800985a:	b9f3      	cbnz	r3, 800989a <_strtod_l+0xa7a>
 800985c:	4b6c      	ldr	r3, [pc, #432]	; (8009a10 <_strtod_l+0xbf0>)
 800985e:	2200      	movs	r2, #0
 8009860:	4640      	mov	r0, r8
 8009862:	4649      	mov	r1, r9
 8009864:	f7f7 f93a 	bl	8000adc <__aeabi_dcmplt>
 8009868:	b9d0      	cbnz	r0, 80098a0 <_strtod_l+0xa80>
 800986a:	4640      	mov	r0, r8
 800986c:	4649      	mov	r1, r9
 800986e:	4b6c      	ldr	r3, [pc, #432]	; (8009a20 <_strtod_l+0xc00>)
 8009870:	2200      	movs	r2, #0
 8009872:	f7f6 fec1 	bl	80005f8 <__aeabi_dmul>
 8009876:	4680      	mov	r8, r0
 8009878:	4689      	mov	r9, r1
 800987a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800987e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009882:	9315      	str	r3, [sp, #84]	; 0x54
 8009884:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009888:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800988c:	e79d      	b.n	80097ca <_strtod_l+0x9aa>
 800988e:	f1ba 0f01 	cmp.w	sl, #1
 8009892:	d102      	bne.n	800989a <_strtod_l+0xa7a>
 8009894:	2f00      	cmp	r7, #0
 8009896:	f43f ad83 	beq.w	80093a0 <_strtod_l+0x580>
 800989a:	4b62      	ldr	r3, [pc, #392]	; (8009a24 <_strtod_l+0xc04>)
 800989c:	2200      	movs	r2, #0
 800989e:	e78e      	b.n	80097be <_strtod_l+0x99e>
 80098a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009a20 <_strtod_l+0xc00>
 80098a4:	f04f 0800 	mov.w	r8, #0
 80098a8:	e7e7      	b.n	800987a <_strtod_l+0xa5a>
 80098aa:	4b5d      	ldr	r3, [pc, #372]	; (8009a20 <_strtod_l+0xc00>)
 80098ac:	4640      	mov	r0, r8
 80098ae:	4649      	mov	r1, r9
 80098b0:	2200      	movs	r2, #0
 80098b2:	f7f6 fea1 	bl	80005f8 <__aeabi_dmul>
 80098b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098b8:	4680      	mov	r8, r0
 80098ba:	4689      	mov	r9, r1
 80098bc:	b933      	cbnz	r3, 80098cc <_strtod_l+0xaac>
 80098be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098c2:	900e      	str	r0, [sp, #56]	; 0x38
 80098c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80098c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80098ca:	e7dd      	b.n	8009888 <_strtod_l+0xa68>
 80098cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80098d0:	e7f9      	b.n	80098c6 <_strtod_l+0xaa6>
 80098d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80098d6:	9b04      	ldr	r3, [sp, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1a8      	bne.n	800982e <_strtod_l+0xa0e>
 80098dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80098e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098e2:	0d1b      	lsrs	r3, r3, #20
 80098e4:	051b      	lsls	r3, r3, #20
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d1a1      	bne.n	800982e <_strtod_l+0xa0e>
 80098ea:	4640      	mov	r0, r8
 80098ec:	4649      	mov	r1, r9
 80098ee:	f7f7 f9cb 	bl	8000c88 <__aeabi_d2lz>
 80098f2:	f7f6 fe53 	bl	800059c <__aeabi_l2d>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4640      	mov	r0, r8
 80098fc:	4649      	mov	r1, r9
 80098fe:	f7f6 fcc3 	bl	8000288 <__aeabi_dsub>
 8009902:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009904:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009908:	ea43 030a 	orr.w	r3, r3, sl
 800990c:	4313      	orrs	r3, r2
 800990e:	4680      	mov	r8, r0
 8009910:	4689      	mov	r9, r1
 8009912:	d055      	beq.n	80099c0 <_strtod_l+0xba0>
 8009914:	a336      	add	r3, pc, #216	; (adr r3, 80099f0 <_strtod_l+0xbd0>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f7f7 f8df 	bl	8000adc <__aeabi_dcmplt>
 800991e:	2800      	cmp	r0, #0
 8009920:	f47f acd0 	bne.w	80092c4 <_strtod_l+0x4a4>
 8009924:	a334      	add	r3, pc, #208	; (adr r3, 80099f8 <_strtod_l+0xbd8>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	4640      	mov	r0, r8
 800992c:	4649      	mov	r1, r9
 800992e:	f7f7 f8f3 	bl	8000b18 <__aeabi_dcmpgt>
 8009932:	2800      	cmp	r0, #0
 8009934:	f43f af7b 	beq.w	800982e <_strtod_l+0xa0e>
 8009938:	e4c4      	b.n	80092c4 <_strtod_l+0x4a4>
 800993a:	9b04      	ldr	r3, [sp, #16]
 800993c:	b333      	cbz	r3, 800998c <_strtod_l+0xb6c>
 800993e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009940:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009944:	d822      	bhi.n	800998c <_strtod_l+0xb6c>
 8009946:	a32e      	add	r3, pc, #184	; (adr r3, 8009a00 <_strtod_l+0xbe0>)
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	4640      	mov	r0, r8
 800994e:	4649      	mov	r1, r9
 8009950:	f7f7 f8ce 	bl	8000af0 <__aeabi_dcmple>
 8009954:	b1a0      	cbz	r0, 8009980 <_strtod_l+0xb60>
 8009956:	4649      	mov	r1, r9
 8009958:	4640      	mov	r0, r8
 800995a:	f7f7 f925 	bl	8000ba8 <__aeabi_d2uiz>
 800995e:	2801      	cmp	r0, #1
 8009960:	bf38      	it	cc
 8009962:	2001      	movcc	r0, #1
 8009964:	f7f6 fdce 	bl	8000504 <__aeabi_ui2d>
 8009968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800996a:	4680      	mov	r8, r0
 800996c:	4689      	mov	r9, r1
 800996e:	bb23      	cbnz	r3, 80099ba <_strtod_l+0xb9a>
 8009970:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009974:	9010      	str	r0, [sp, #64]	; 0x40
 8009976:	9311      	str	r3, [sp, #68]	; 0x44
 8009978:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800997c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009982:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009984:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009988:	1a9b      	subs	r3, r3, r2
 800998a:	9309      	str	r3, [sp, #36]	; 0x24
 800998c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009990:	eeb0 0a48 	vmov.f32	s0, s16
 8009994:	eef0 0a68 	vmov.f32	s1, s17
 8009998:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800999c:	f001 fe58 	bl	800b650 <__ulp>
 80099a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099a4:	ec53 2b10 	vmov	r2, r3, d0
 80099a8:	f7f6 fe26 	bl	80005f8 <__aeabi_dmul>
 80099ac:	ec53 2b18 	vmov	r2, r3, d8
 80099b0:	f7f6 fc6c 	bl	800028c <__adddf3>
 80099b4:	4682      	mov	sl, r0
 80099b6:	468b      	mov	fp, r1
 80099b8:	e78d      	b.n	80098d6 <_strtod_l+0xab6>
 80099ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80099be:	e7db      	b.n	8009978 <_strtod_l+0xb58>
 80099c0:	a311      	add	r3, pc, #68	; (adr r3, 8009a08 <_strtod_l+0xbe8>)
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	f7f7 f889 	bl	8000adc <__aeabi_dcmplt>
 80099ca:	e7b2      	b.n	8009932 <_strtod_l+0xb12>
 80099cc:	2300      	movs	r3, #0
 80099ce:	930a      	str	r3, [sp, #40]	; 0x28
 80099d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80099d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	f7ff ba6b 	b.w	8008eb0 <_strtod_l+0x90>
 80099da:	2a65      	cmp	r2, #101	; 0x65
 80099dc:	f43f ab5f 	beq.w	800909e <_strtod_l+0x27e>
 80099e0:	2a45      	cmp	r2, #69	; 0x45
 80099e2:	f43f ab5c 	beq.w	800909e <_strtod_l+0x27e>
 80099e6:	2301      	movs	r3, #1
 80099e8:	f7ff bb94 	b.w	8009114 <_strtod_l+0x2f4>
 80099ec:	f3af 8000 	nop.w
 80099f0:	94a03595 	.word	0x94a03595
 80099f4:	3fdfffff 	.word	0x3fdfffff
 80099f8:	35afe535 	.word	0x35afe535
 80099fc:	3fe00000 	.word	0x3fe00000
 8009a00:	ffc00000 	.word	0xffc00000
 8009a04:	41dfffff 	.word	0x41dfffff
 8009a08:	94a03595 	.word	0x94a03595
 8009a0c:	3fcfffff 	.word	0x3fcfffff
 8009a10:	3ff00000 	.word	0x3ff00000
 8009a14:	7ff00000 	.word	0x7ff00000
 8009a18:	7fe00000 	.word	0x7fe00000
 8009a1c:	7c9fffff 	.word	0x7c9fffff
 8009a20:	3fe00000 	.word	0x3fe00000
 8009a24:	bff00000 	.word	0xbff00000
 8009a28:	7fefffff 	.word	0x7fefffff

08009a2c <_strtod_r>:
 8009a2c:	4b01      	ldr	r3, [pc, #4]	; (8009a34 <_strtod_r+0x8>)
 8009a2e:	f7ff b9f7 	b.w	8008e20 <_strtod_l>
 8009a32:	bf00      	nop
 8009a34:	200000dc 	.word	0x200000dc

08009a38 <_strtol_l.constprop.0>:
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a3e:	d001      	beq.n	8009a44 <_strtol_l.constprop.0+0xc>
 8009a40:	2b24      	cmp	r3, #36	; 0x24
 8009a42:	d906      	bls.n	8009a52 <_strtol_l.constprop.0+0x1a>
 8009a44:	f7fe fafc 	bl	8008040 <__errno>
 8009a48:	2316      	movs	r3, #22
 8009a4a:	6003      	str	r3, [r0, #0]
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009b38 <_strtol_l.constprop.0+0x100>
 8009a56:	460d      	mov	r5, r1
 8009a58:	462e      	mov	r6, r5
 8009a5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009a62:	f017 0708 	ands.w	r7, r7, #8
 8009a66:	d1f7      	bne.n	8009a58 <_strtol_l.constprop.0+0x20>
 8009a68:	2c2d      	cmp	r4, #45	; 0x2d
 8009a6a:	d132      	bne.n	8009ad2 <_strtol_l.constprop.0+0x9a>
 8009a6c:	782c      	ldrb	r4, [r5, #0]
 8009a6e:	2701      	movs	r7, #1
 8009a70:	1cb5      	adds	r5, r6, #2
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d05b      	beq.n	8009b2e <_strtol_l.constprop.0+0xf6>
 8009a76:	2b10      	cmp	r3, #16
 8009a78:	d109      	bne.n	8009a8e <_strtol_l.constprop.0+0x56>
 8009a7a:	2c30      	cmp	r4, #48	; 0x30
 8009a7c:	d107      	bne.n	8009a8e <_strtol_l.constprop.0+0x56>
 8009a7e:	782c      	ldrb	r4, [r5, #0]
 8009a80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009a84:	2c58      	cmp	r4, #88	; 0x58
 8009a86:	d14d      	bne.n	8009b24 <_strtol_l.constprop.0+0xec>
 8009a88:	786c      	ldrb	r4, [r5, #1]
 8009a8a:	2310      	movs	r3, #16
 8009a8c:	3502      	adds	r5, #2
 8009a8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009a92:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a96:	f04f 0c00 	mov.w	ip, #0
 8009a9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009a9e:	4666      	mov	r6, ip
 8009aa0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009aa4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009aa8:	f1be 0f09 	cmp.w	lr, #9
 8009aac:	d816      	bhi.n	8009adc <_strtol_l.constprop.0+0xa4>
 8009aae:	4674      	mov	r4, lr
 8009ab0:	42a3      	cmp	r3, r4
 8009ab2:	dd24      	ble.n	8009afe <_strtol_l.constprop.0+0xc6>
 8009ab4:	f1bc 0f00 	cmp.w	ip, #0
 8009ab8:	db1e      	blt.n	8009af8 <_strtol_l.constprop.0+0xc0>
 8009aba:	45b1      	cmp	r9, r6
 8009abc:	d31c      	bcc.n	8009af8 <_strtol_l.constprop.0+0xc0>
 8009abe:	d101      	bne.n	8009ac4 <_strtol_l.constprop.0+0x8c>
 8009ac0:	45a2      	cmp	sl, r4
 8009ac2:	db19      	blt.n	8009af8 <_strtol_l.constprop.0+0xc0>
 8009ac4:	fb06 4603 	mla	r6, r6, r3, r4
 8009ac8:	f04f 0c01 	mov.w	ip, #1
 8009acc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ad0:	e7e8      	b.n	8009aa4 <_strtol_l.constprop.0+0x6c>
 8009ad2:	2c2b      	cmp	r4, #43	; 0x2b
 8009ad4:	bf04      	itt	eq
 8009ad6:	782c      	ldrbeq	r4, [r5, #0]
 8009ad8:	1cb5      	addeq	r5, r6, #2
 8009ada:	e7ca      	b.n	8009a72 <_strtol_l.constprop.0+0x3a>
 8009adc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009ae0:	f1be 0f19 	cmp.w	lr, #25
 8009ae4:	d801      	bhi.n	8009aea <_strtol_l.constprop.0+0xb2>
 8009ae6:	3c37      	subs	r4, #55	; 0x37
 8009ae8:	e7e2      	b.n	8009ab0 <_strtol_l.constprop.0+0x78>
 8009aea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009aee:	f1be 0f19 	cmp.w	lr, #25
 8009af2:	d804      	bhi.n	8009afe <_strtol_l.constprop.0+0xc6>
 8009af4:	3c57      	subs	r4, #87	; 0x57
 8009af6:	e7db      	b.n	8009ab0 <_strtol_l.constprop.0+0x78>
 8009af8:	f04f 3cff 	mov.w	ip, #4294967295
 8009afc:	e7e6      	b.n	8009acc <_strtol_l.constprop.0+0x94>
 8009afe:	f1bc 0f00 	cmp.w	ip, #0
 8009b02:	da05      	bge.n	8009b10 <_strtol_l.constprop.0+0xd8>
 8009b04:	2322      	movs	r3, #34	; 0x22
 8009b06:	6003      	str	r3, [r0, #0]
 8009b08:	4646      	mov	r6, r8
 8009b0a:	b942      	cbnz	r2, 8009b1e <_strtol_l.constprop.0+0xe6>
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	e79e      	b.n	8009a4e <_strtol_l.constprop.0+0x16>
 8009b10:	b107      	cbz	r7, 8009b14 <_strtol_l.constprop.0+0xdc>
 8009b12:	4276      	negs	r6, r6
 8009b14:	2a00      	cmp	r2, #0
 8009b16:	d0f9      	beq.n	8009b0c <_strtol_l.constprop.0+0xd4>
 8009b18:	f1bc 0f00 	cmp.w	ip, #0
 8009b1c:	d000      	beq.n	8009b20 <_strtol_l.constprop.0+0xe8>
 8009b1e:	1e69      	subs	r1, r5, #1
 8009b20:	6011      	str	r1, [r2, #0]
 8009b22:	e7f3      	b.n	8009b0c <_strtol_l.constprop.0+0xd4>
 8009b24:	2430      	movs	r4, #48	; 0x30
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1b1      	bne.n	8009a8e <_strtol_l.constprop.0+0x56>
 8009b2a:	2308      	movs	r3, #8
 8009b2c:	e7af      	b.n	8009a8e <_strtol_l.constprop.0+0x56>
 8009b2e:	2c30      	cmp	r4, #48	; 0x30
 8009b30:	d0a5      	beq.n	8009a7e <_strtol_l.constprop.0+0x46>
 8009b32:	230a      	movs	r3, #10
 8009b34:	e7ab      	b.n	8009a8e <_strtol_l.constprop.0+0x56>
 8009b36:	bf00      	nop
 8009b38:	0800ca89 	.word	0x0800ca89

08009b3c <_strtol_r>:
 8009b3c:	f7ff bf7c 	b.w	8009a38 <_strtol_l.constprop.0>

08009b40 <quorem>:
 8009b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	6903      	ldr	r3, [r0, #16]
 8009b46:	690c      	ldr	r4, [r1, #16]
 8009b48:	42a3      	cmp	r3, r4
 8009b4a:	4607      	mov	r7, r0
 8009b4c:	f2c0 8081 	blt.w	8009c52 <quorem+0x112>
 8009b50:	3c01      	subs	r4, #1
 8009b52:	f101 0814 	add.w	r8, r1, #20
 8009b56:	f100 0514 	add.w	r5, r0, #20
 8009b5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b5e:	9301      	str	r3, [sp, #4]
 8009b60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b74:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b78:	d331      	bcc.n	8009bde <quorem+0x9e>
 8009b7a:	f04f 0e00 	mov.w	lr, #0
 8009b7e:	4640      	mov	r0, r8
 8009b80:	46ac      	mov	ip, r5
 8009b82:	46f2      	mov	sl, lr
 8009b84:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b88:	b293      	uxth	r3, r2
 8009b8a:	fb06 e303 	mla	r3, r6, r3, lr
 8009b8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	ebaa 0303 	sub.w	r3, sl, r3
 8009b98:	f8dc a000 	ldr.w	sl, [ip]
 8009b9c:	0c12      	lsrs	r2, r2, #16
 8009b9e:	fa13 f38a 	uxtah	r3, r3, sl
 8009ba2:	fb06 e202 	mla	r2, r6, r2, lr
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	9b00      	ldr	r3, [sp, #0]
 8009baa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bae:	b292      	uxth	r2, r2
 8009bb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009bb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bb8:	f8bd 3000 	ldrh.w	r3, [sp]
 8009bbc:	4581      	cmp	r9, r0
 8009bbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bc2:	f84c 3b04 	str.w	r3, [ip], #4
 8009bc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009bca:	d2db      	bcs.n	8009b84 <quorem+0x44>
 8009bcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8009bd0:	b92b      	cbnz	r3, 8009bde <quorem+0x9e>
 8009bd2:	9b01      	ldr	r3, [sp, #4]
 8009bd4:	3b04      	subs	r3, #4
 8009bd6:	429d      	cmp	r5, r3
 8009bd8:	461a      	mov	r2, r3
 8009bda:	d32e      	bcc.n	8009c3a <quorem+0xfa>
 8009bdc:	613c      	str	r4, [r7, #16]
 8009bde:	4638      	mov	r0, r7
 8009be0:	f001 fc90 	bl	800b504 <__mcmp>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	db24      	blt.n	8009c32 <quorem+0xf2>
 8009be8:	3601      	adds	r6, #1
 8009bea:	4628      	mov	r0, r5
 8009bec:	f04f 0c00 	mov.w	ip, #0
 8009bf0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bf4:	f8d0 e000 	ldr.w	lr, [r0]
 8009bf8:	b293      	uxth	r3, r2
 8009bfa:	ebac 0303 	sub.w	r3, ip, r3
 8009bfe:	0c12      	lsrs	r2, r2, #16
 8009c00:	fa13 f38e 	uxtah	r3, r3, lr
 8009c04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c12:	45c1      	cmp	r9, r8
 8009c14:	f840 3b04 	str.w	r3, [r0], #4
 8009c18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c1c:	d2e8      	bcs.n	8009bf0 <quorem+0xb0>
 8009c1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c26:	b922      	cbnz	r2, 8009c32 <quorem+0xf2>
 8009c28:	3b04      	subs	r3, #4
 8009c2a:	429d      	cmp	r5, r3
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	d30a      	bcc.n	8009c46 <quorem+0x106>
 8009c30:	613c      	str	r4, [r7, #16]
 8009c32:	4630      	mov	r0, r6
 8009c34:	b003      	add	sp, #12
 8009c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3a:	6812      	ldr	r2, [r2, #0]
 8009c3c:	3b04      	subs	r3, #4
 8009c3e:	2a00      	cmp	r2, #0
 8009c40:	d1cc      	bne.n	8009bdc <quorem+0x9c>
 8009c42:	3c01      	subs	r4, #1
 8009c44:	e7c7      	b.n	8009bd6 <quorem+0x96>
 8009c46:	6812      	ldr	r2, [r2, #0]
 8009c48:	3b04      	subs	r3, #4
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	d1f0      	bne.n	8009c30 <quorem+0xf0>
 8009c4e:	3c01      	subs	r4, #1
 8009c50:	e7eb      	b.n	8009c2a <quorem+0xea>
 8009c52:	2000      	movs	r0, #0
 8009c54:	e7ee      	b.n	8009c34 <quorem+0xf4>
	...

08009c58 <_dtoa_r>:
 8009c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	ed2d 8b04 	vpush	{d8-d9}
 8009c60:	ec57 6b10 	vmov	r6, r7, d0
 8009c64:	b093      	sub	sp, #76	; 0x4c
 8009c66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c6c:	9106      	str	r1, [sp, #24]
 8009c6e:	ee10 aa10 	vmov	sl, s0
 8009c72:	4604      	mov	r4, r0
 8009c74:	9209      	str	r2, [sp, #36]	; 0x24
 8009c76:	930c      	str	r3, [sp, #48]	; 0x30
 8009c78:	46bb      	mov	fp, r7
 8009c7a:	b975      	cbnz	r5, 8009c9a <_dtoa_r+0x42>
 8009c7c:	2010      	movs	r0, #16
 8009c7e:	f001 f94d 	bl	800af1c <malloc>
 8009c82:	4602      	mov	r2, r0
 8009c84:	6260      	str	r0, [r4, #36]	; 0x24
 8009c86:	b920      	cbnz	r0, 8009c92 <_dtoa_r+0x3a>
 8009c88:	4ba7      	ldr	r3, [pc, #668]	; (8009f28 <_dtoa_r+0x2d0>)
 8009c8a:	21ea      	movs	r1, #234	; 0xea
 8009c8c:	48a7      	ldr	r0, [pc, #668]	; (8009f2c <_dtoa_r+0x2d4>)
 8009c8e:	f002 f8bd 	bl	800be0c <__assert_func>
 8009c92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c96:	6005      	str	r5, [r0, #0]
 8009c98:	60c5      	str	r5, [r0, #12]
 8009c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c9c:	6819      	ldr	r1, [r3, #0]
 8009c9e:	b151      	cbz	r1, 8009cb6 <_dtoa_r+0x5e>
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	604a      	str	r2, [r1, #4]
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	4093      	lsls	r3, r2
 8009ca8:	608b      	str	r3, [r1, #8]
 8009caa:	4620      	mov	r0, r4
 8009cac:	f001 f99e 	bl	800afec <_Bfree>
 8009cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	1e3b      	subs	r3, r7, #0
 8009cb8:	bfaa      	itet	ge
 8009cba:	2300      	movge	r3, #0
 8009cbc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009cc0:	f8c8 3000 	strge.w	r3, [r8]
 8009cc4:	4b9a      	ldr	r3, [pc, #616]	; (8009f30 <_dtoa_r+0x2d8>)
 8009cc6:	bfbc      	itt	lt
 8009cc8:	2201      	movlt	r2, #1
 8009cca:	f8c8 2000 	strlt.w	r2, [r8]
 8009cce:	ea33 030b 	bics.w	r3, r3, fp
 8009cd2:	d11b      	bne.n	8009d0c <_dtoa_r+0xb4>
 8009cd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cd6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009cda:	6013      	str	r3, [r2, #0]
 8009cdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ce0:	4333      	orrs	r3, r6
 8009ce2:	f000 8592 	beq.w	800a80a <_dtoa_r+0xbb2>
 8009ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ce8:	b963      	cbnz	r3, 8009d04 <_dtoa_r+0xac>
 8009cea:	4b92      	ldr	r3, [pc, #584]	; (8009f34 <_dtoa_r+0x2dc>)
 8009cec:	e022      	b.n	8009d34 <_dtoa_r+0xdc>
 8009cee:	4b92      	ldr	r3, [pc, #584]	; (8009f38 <_dtoa_r+0x2e0>)
 8009cf0:	9301      	str	r3, [sp, #4]
 8009cf2:	3308      	adds	r3, #8
 8009cf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	9801      	ldr	r0, [sp, #4]
 8009cfa:	b013      	add	sp, #76	; 0x4c
 8009cfc:	ecbd 8b04 	vpop	{d8-d9}
 8009d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d04:	4b8b      	ldr	r3, [pc, #556]	; (8009f34 <_dtoa_r+0x2dc>)
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	3303      	adds	r3, #3
 8009d0a:	e7f3      	b.n	8009cf4 <_dtoa_r+0x9c>
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2300      	movs	r3, #0
 8009d10:	4650      	mov	r0, sl
 8009d12:	4659      	mov	r1, fp
 8009d14:	f7f6 fed8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d18:	ec4b ab19 	vmov	d9, sl, fp
 8009d1c:	4680      	mov	r8, r0
 8009d1e:	b158      	cbz	r0, 8009d38 <_dtoa_r+0xe0>
 8009d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d22:	2301      	movs	r3, #1
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f000 856b 	beq.w	800a804 <_dtoa_r+0xbac>
 8009d2e:	4883      	ldr	r0, [pc, #524]	; (8009f3c <_dtoa_r+0x2e4>)
 8009d30:	6018      	str	r0, [r3, #0]
 8009d32:	1e43      	subs	r3, r0, #1
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	e7df      	b.n	8009cf8 <_dtoa_r+0xa0>
 8009d38:	ec4b ab10 	vmov	d0, sl, fp
 8009d3c:	aa10      	add	r2, sp, #64	; 0x40
 8009d3e:	a911      	add	r1, sp, #68	; 0x44
 8009d40:	4620      	mov	r0, r4
 8009d42:	f001 fd01 	bl	800b748 <__d2b>
 8009d46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009d4a:	ee08 0a10 	vmov	s16, r0
 8009d4e:	2d00      	cmp	r5, #0
 8009d50:	f000 8084 	beq.w	8009e5c <_dtoa_r+0x204>
 8009d54:	ee19 3a90 	vmov	r3, s19
 8009d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d60:	4656      	mov	r6, sl
 8009d62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009d6e:	4b74      	ldr	r3, [pc, #464]	; (8009f40 <_dtoa_r+0x2e8>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	4630      	mov	r0, r6
 8009d74:	4639      	mov	r1, r7
 8009d76:	f7f6 fa87 	bl	8000288 <__aeabi_dsub>
 8009d7a:	a365      	add	r3, pc, #404	; (adr r3, 8009f10 <_dtoa_r+0x2b8>)
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f7f6 fc3a 	bl	80005f8 <__aeabi_dmul>
 8009d84:	a364      	add	r3, pc, #400	; (adr r3, 8009f18 <_dtoa_r+0x2c0>)
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	f7f6 fa7f 	bl	800028c <__adddf3>
 8009d8e:	4606      	mov	r6, r0
 8009d90:	4628      	mov	r0, r5
 8009d92:	460f      	mov	r7, r1
 8009d94:	f7f6 fbc6 	bl	8000524 <__aeabi_i2d>
 8009d98:	a361      	add	r3, pc, #388	; (adr r3, 8009f20 <_dtoa_r+0x2c8>)
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	f7f6 fc2b 	bl	80005f8 <__aeabi_dmul>
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	4630      	mov	r0, r6
 8009da8:	4639      	mov	r1, r7
 8009daa:	f7f6 fa6f 	bl	800028c <__adddf3>
 8009dae:	4606      	mov	r6, r0
 8009db0:	460f      	mov	r7, r1
 8009db2:	f7f6 fed1 	bl	8000b58 <__aeabi_d2iz>
 8009db6:	2200      	movs	r2, #0
 8009db8:	9000      	str	r0, [sp, #0]
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	f7f6 fe8c 	bl	8000adc <__aeabi_dcmplt>
 8009dc4:	b150      	cbz	r0, 8009ddc <_dtoa_r+0x184>
 8009dc6:	9800      	ldr	r0, [sp, #0]
 8009dc8:	f7f6 fbac 	bl	8000524 <__aeabi_i2d>
 8009dcc:	4632      	mov	r2, r6
 8009dce:	463b      	mov	r3, r7
 8009dd0:	f7f6 fe7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dd4:	b910      	cbnz	r0, 8009ddc <_dtoa_r+0x184>
 8009dd6:	9b00      	ldr	r3, [sp, #0]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	9b00      	ldr	r3, [sp, #0]
 8009dde:	2b16      	cmp	r3, #22
 8009de0:	d85a      	bhi.n	8009e98 <_dtoa_r+0x240>
 8009de2:	9a00      	ldr	r2, [sp, #0]
 8009de4:	4b57      	ldr	r3, [pc, #348]	; (8009f44 <_dtoa_r+0x2ec>)
 8009de6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	ec51 0b19 	vmov	r0, r1, d9
 8009df2:	f7f6 fe73 	bl	8000adc <__aeabi_dcmplt>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d050      	beq.n	8009e9c <_dtoa_r+0x244>
 8009dfa:	9b00      	ldr	r3, [sp, #0]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	2300      	movs	r3, #0
 8009e02:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e06:	1b5d      	subs	r5, r3, r5
 8009e08:	1e6b      	subs	r3, r5, #1
 8009e0a:	9305      	str	r3, [sp, #20]
 8009e0c:	bf45      	ittet	mi
 8009e0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009e12:	9304      	strmi	r3, [sp, #16]
 8009e14:	2300      	movpl	r3, #0
 8009e16:	2300      	movmi	r3, #0
 8009e18:	bf4c      	ite	mi
 8009e1a:	9305      	strmi	r3, [sp, #20]
 8009e1c:	9304      	strpl	r3, [sp, #16]
 8009e1e:	9b00      	ldr	r3, [sp, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	db3d      	blt.n	8009ea0 <_dtoa_r+0x248>
 8009e24:	9b05      	ldr	r3, [sp, #20]
 8009e26:	9a00      	ldr	r2, [sp, #0]
 8009e28:	920a      	str	r2, [sp, #40]	; 0x28
 8009e2a:	4413      	add	r3, r2
 8009e2c:	9305      	str	r3, [sp, #20]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	9307      	str	r3, [sp, #28]
 8009e32:	9b06      	ldr	r3, [sp, #24]
 8009e34:	2b09      	cmp	r3, #9
 8009e36:	f200 8089 	bhi.w	8009f4c <_dtoa_r+0x2f4>
 8009e3a:	2b05      	cmp	r3, #5
 8009e3c:	bfc4      	itt	gt
 8009e3e:	3b04      	subgt	r3, #4
 8009e40:	9306      	strgt	r3, [sp, #24]
 8009e42:	9b06      	ldr	r3, [sp, #24]
 8009e44:	f1a3 0302 	sub.w	r3, r3, #2
 8009e48:	bfcc      	ite	gt
 8009e4a:	2500      	movgt	r5, #0
 8009e4c:	2501      	movle	r5, #1
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	f200 8087 	bhi.w	8009f62 <_dtoa_r+0x30a>
 8009e54:	e8df f003 	tbb	[pc, r3]
 8009e58:	59383a2d 	.word	0x59383a2d
 8009e5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009e60:	441d      	add	r5, r3
 8009e62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e66:	2b20      	cmp	r3, #32
 8009e68:	bfc1      	itttt	gt
 8009e6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e72:	fa0b f303 	lslgt.w	r3, fp, r3
 8009e76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e7a:	bfda      	itte	le
 8009e7c:	f1c3 0320 	rsble	r3, r3, #32
 8009e80:	fa06 f003 	lslle.w	r0, r6, r3
 8009e84:	4318      	orrgt	r0, r3
 8009e86:	f7f6 fb3d 	bl	8000504 <__aeabi_ui2d>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	4606      	mov	r6, r0
 8009e8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009e92:	3d01      	subs	r5, #1
 8009e94:	930e      	str	r3, [sp, #56]	; 0x38
 8009e96:	e76a      	b.n	8009d6e <_dtoa_r+0x116>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e7b2      	b.n	8009e02 <_dtoa_r+0x1aa>
 8009e9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e9e:	e7b1      	b.n	8009e04 <_dtoa_r+0x1ac>
 8009ea0:	9b04      	ldr	r3, [sp, #16]
 8009ea2:	9a00      	ldr	r2, [sp, #0]
 8009ea4:	1a9b      	subs	r3, r3, r2
 8009ea6:	9304      	str	r3, [sp, #16]
 8009ea8:	4253      	negs	r3, r2
 8009eaa:	9307      	str	r3, [sp, #28]
 8009eac:	2300      	movs	r3, #0
 8009eae:	930a      	str	r3, [sp, #40]	; 0x28
 8009eb0:	e7bf      	b.n	8009e32 <_dtoa_r+0x1da>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	9308      	str	r3, [sp, #32]
 8009eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	dc55      	bgt.n	8009f68 <_dtoa_r+0x310>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ec6:	e00c      	b.n	8009ee2 <_dtoa_r+0x28a>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e7f3      	b.n	8009eb4 <_dtoa_r+0x25c>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed0:	9308      	str	r3, [sp, #32]
 8009ed2:	9b00      	ldr	r3, [sp, #0]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	9302      	str	r3, [sp, #8]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	9303      	str	r3, [sp, #12]
 8009ede:	bfb8      	it	lt
 8009ee0:	2301      	movlt	r3, #1
 8009ee2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	6042      	str	r2, [r0, #4]
 8009ee8:	2204      	movs	r2, #4
 8009eea:	f102 0614 	add.w	r6, r2, #20
 8009eee:	429e      	cmp	r6, r3
 8009ef0:	6841      	ldr	r1, [r0, #4]
 8009ef2:	d93d      	bls.n	8009f70 <_dtoa_r+0x318>
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f001 f839 	bl	800af6c <_Balloc>
 8009efa:	9001      	str	r0, [sp, #4]
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d13b      	bne.n	8009f78 <_dtoa_r+0x320>
 8009f00:	4b11      	ldr	r3, [pc, #68]	; (8009f48 <_dtoa_r+0x2f0>)
 8009f02:	4602      	mov	r2, r0
 8009f04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f08:	e6c0      	b.n	8009c8c <_dtoa_r+0x34>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e7df      	b.n	8009ece <_dtoa_r+0x276>
 8009f0e:	bf00      	nop
 8009f10:	636f4361 	.word	0x636f4361
 8009f14:	3fd287a7 	.word	0x3fd287a7
 8009f18:	8b60c8b3 	.word	0x8b60c8b3
 8009f1c:	3fc68a28 	.word	0x3fc68a28
 8009f20:	509f79fb 	.word	0x509f79fb
 8009f24:	3fd34413 	.word	0x3fd34413
 8009f28:	0800cb96 	.word	0x0800cb96
 8009f2c:	0800cbad 	.word	0x0800cbad
 8009f30:	7ff00000 	.word	0x7ff00000
 8009f34:	0800cb92 	.word	0x0800cb92
 8009f38:	0800cb89 	.word	0x0800cb89
 8009f3c:	0800ca09 	.word	0x0800ca09
 8009f40:	3ff80000 	.word	0x3ff80000
 8009f44:	0800cd18 	.word	0x0800cd18
 8009f48:	0800cc08 	.word	0x0800cc08
 8009f4c:	2501      	movs	r5, #1
 8009f4e:	2300      	movs	r3, #0
 8009f50:	9306      	str	r3, [sp, #24]
 8009f52:	9508      	str	r5, [sp, #32]
 8009f54:	f04f 33ff 	mov.w	r3, #4294967295
 8009f58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	2312      	movs	r3, #18
 8009f60:	e7b0      	b.n	8009ec4 <_dtoa_r+0x26c>
 8009f62:	2301      	movs	r3, #1
 8009f64:	9308      	str	r3, [sp, #32]
 8009f66:	e7f5      	b.n	8009f54 <_dtoa_r+0x2fc>
 8009f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f6e:	e7b8      	b.n	8009ee2 <_dtoa_r+0x28a>
 8009f70:	3101      	adds	r1, #1
 8009f72:	6041      	str	r1, [r0, #4]
 8009f74:	0052      	lsls	r2, r2, #1
 8009f76:	e7b8      	b.n	8009eea <_dtoa_r+0x292>
 8009f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f7a:	9a01      	ldr	r2, [sp, #4]
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	9b03      	ldr	r3, [sp, #12]
 8009f80:	2b0e      	cmp	r3, #14
 8009f82:	f200 809d 	bhi.w	800a0c0 <_dtoa_r+0x468>
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	f000 809a 	beq.w	800a0c0 <_dtoa_r+0x468>
 8009f8c:	9b00      	ldr	r3, [sp, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	dd32      	ble.n	8009ff8 <_dtoa_r+0x3a0>
 8009f92:	4ab7      	ldr	r2, [pc, #732]	; (800a270 <_dtoa_r+0x618>)
 8009f94:	f003 030f 	and.w	r3, r3, #15
 8009f98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fa0:	9b00      	ldr	r3, [sp, #0]
 8009fa2:	05d8      	lsls	r0, r3, #23
 8009fa4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009fa8:	d516      	bpl.n	8009fd8 <_dtoa_r+0x380>
 8009faa:	4bb2      	ldr	r3, [pc, #712]	; (800a274 <_dtoa_r+0x61c>)
 8009fac:	ec51 0b19 	vmov	r0, r1, d9
 8009fb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fb4:	f7f6 fc4a 	bl	800084c <__aeabi_ddiv>
 8009fb8:	f007 070f 	and.w	r7, r7, #15
 8009fbc:	4682      	mov	sl, r0
 8009fbe:	468b      	mov	fp, r1
 8009fc0:	2503      	movs	r5, #3
 8009fc2:	4eac      	ldr	r6, [pc, #688]	; (800a274 <_dtoa_r+0x61c>)
 8009fc4:	b957      	cbnz	r7, 8009fdc <_dtoa_r+0x384>
 8009fc6:	4642      	mov	r2, r8
 8009fc8:	464b      	mov	r3, r9
 8009fca:	4650      	mov	r0, sl
 8009fcc:	4659      	mov	r1, fp
 8009fce:	f7f6 fc3d 	bl	800084c <__aeabi_ddiv>
 8009fd2:	4682      	mov	sl, r0
 8009fd4:	468b      	mov	fp, r1
 8009fd6:	e028      	b.n	800a02a <_dtoa_r+0x3d2>
 8009fd8:	2502      	movs	r5, #2
 8009fda:	e7f2      	b.n	8009fc2 <_dtoa_r+0x36a>
 8009fdc:	07f9      	lsls	r1, r7, #31
 8009fde:	d508      	bpl.n	8009ff2 <_dtoa_r+0x39a>
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fe8:	f7f6 fb06 	bl	80005f8 <__aeabi_dmul>
 8009fec:	3501      	adds	r5, #1
 8009fee:	4680      	mov	r8, r0
 8009ff0:	4689      	mov	r9, r1
 8009ff2:	107f      	asrs	r7, r7, #1
 8009ff4:	3608      	adds	r6, #8
 8009ff6:	e7e5      	b.n	8009fc4 <_dtoa_r+0x36c>
 8009ff8:	f000 809b 	beq.w	800a132 <_dtoa_r+0x4da>
 8009ffc:	9b00      	ldr	r3, [sp, #0]
 8009ffe:	4f9d      	ldr	r7, [pc, #628]	; (800a274 <_dtoa_r+0x61c>)
 800a000:	425e      	negs	r6, r3
 800a002:	4b9b      	ldr	r3, [pc, #620]	; (800a270 <_dtoa_r+0x618>)
 800a004:	f006 020f 	and.w	r2, r6, #15
 800a008:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	ec51 0b19 	vmov	r0, r1, d9
 800a014:	f7f6 faf0 	bl	80005f8 <__aeabi_dmul>
 800a018:	1136      	asrs	r6, r6, #4
 800a01a:	4682      	mov	sl, r0
 800a01c:	468b      	mov	fp, r1
 800a01e:	2300      	movs	r3, #0
 800a020:	2502      	movs	r5, #2
 800a022:	2e00      	cmp	r6, #0
 800a024:	d17a      	bne.n	800a11c <_dtoa_r+0x4c4>
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1d3      	bne.n	8009fd2 <_dtoa_r+0x37a>
 800a02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 8082 	beq.w	800a136 <_dtoa_r+0x4de>
 800a032:	4b91      	ldr	r3, [pc, #580]	; (800a278 <_dtoa_r+0x620>)
 800a034:	2200      	movs	r2, #0
 800a036:	4650      	mov	r0, sl
 800a038:	4659      	mov	r1, fp
 800a03a:	f7f6 fd4f 	bl	8000adc <__aeabi_dcmplt>
 800a03e:	2800      	cmp	r0, #0
 800a040:	d079      	beq.n	800a136 <_dtoa_r+0x4de>
 800a042:	9b03      	ldr	r3, [sp, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d076      	beq.n	800a136 <_dtoa_r+0x4de>
 800a048:	9b02      	ldr	r3, [sp, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	dd36      	ble.n	800a0bc <_dtoa_r+0x464>
 800a04e:	9b00      	ldr	r3, [sp, #0]
 800a050:	4650      	mov	r0, sl
 800a052:	4659      	mov	r1, fp
 800a054:	1e5f      	subs	r7, r3, #1
 800a056:	2200      	movs	r2, #0
 800a058:	4b88      	ldr	r3, [pc, #544]	; (800a27c <_dtoa_r+0x624>)
 800a05a:	f7f6 facd 	bl	80005f8 <__aeabi_dmul>
 800a05e:	9e02      	ldr	r6, [sp, #8]
 800a060:	4682      	mov	sl, r0
 800a062:	468b      	mov	fp, r1
 800a064:	3501      	adds	r5, #1
 800a066:	4628      	mov	r0, r5
 800a068:	f7f6 fa5c 	bl	8000524 <__aeabi_i2d>
 800a06c:	4652      	mov	r2, sl
 800a06e:	465b      	mov	r3, fp
 800a070:	f7f6 fac2 	bl	80005f8 <__aeabi_dmul>
 800a074:	4b82      	ldr	r3, [pc, #520]	; (800a280 <_dtoa_r+0x628>)
 800a076:	2200      	movs	r2, #0
 800a078:	f7f6 f908 	bl	800028c <__adddf3>
 800a07c:	46d0      	mov	r8, sl
 800a07e:	46d9      	mov	r9, fp
 800a080:	4682      	mov	sl, r0
 800a082:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a086:	2e00      	cmp	r6, #0
 800a088:	d158      	bne.n	800a13c <_dtoa_r+0x4e4>
 800a08a:	4b7e      	ldr	r3, [pc, #504]	; (800a284 <_dtoa_r+0x62c>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	4640      	mov	r0, r8
 800a090:	4649      	mov	r1, r9
 800a092:	f7f6 f8f9 	bl	8000288 <__aeabi_dsub>
 800a096:	4652      	mov	r2, sl
 800a098:	465b      	mov	r3, fp
 800a09a:	4680      	mov	r8, r0
 800a09c:	4689      	mov	r9, r1
 800a09e:	f7f6 fd3b 	bl	8000b18 <__aeabi_dcmpgt>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	f040 8295 	bne.w	800a5d2 <_dtoa_r+0x97a>
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a0ae:	4640      	mov	r0, r8
 800a0b0:	4649      	mov	r1, r9
 800a0b2:	f7f6 fd13 	bl	8000adc <__aeabi_dcmplt>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	f040 8289 	bne.w	800a5ce <_dtoa_r+0x976>
 800a0bc:	ec5b ab19 	vmov	sl, fp, d9
 800a0c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f2c0 8148 	blt.w	800a358 <_dtoa_r+0x700>
 800a0c8:	9a00      	ldr	r2, [sp, #0]
 800a0ca:	2a0e      	cmp	r2, #14
 800a0cc:	f300 8144 	bgt.w	800a358 <_dtoa_r+0x700>
 800a0d0:	4b67      	ldr	r3, [pc, #412]	; (800a270 <_dtoa_r+0x618>)
 800a0d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f280 80d5 	bge.w	800a28c <_dtoa_r+0x634>
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f300 80d1 	bgt.w	800a28c <_dtoa_r+0x634>
 800a0ea:	f040 826f 	bne.w	800a5cc <_dtoa_r+0x974>
 800a0ee:	4b65      	ldr	r3, [pc, #404]	; (800a284 <_dtoa_r+0x62c>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	f7f6 fa7f 	bl	80005f8 <__aeabi_dmul>
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	465b      	mov	r3, fp
 800a0fe:	f7f6 fd01 	bl	8000b04 <__aeabi_dcmpge>
 800a102:	9e03      	ldr	r6, [sp, #12]
 800a104:	4637      	mov	r7, r6
 800a106:	2800      	cmp	r0, #0
 800a108:	f040 8245 	bne.w	800a596 <_dtoa_r+0x93e>
 800a10c:	9d01      	ldr	r5, [sp, #4]
 800a10e:	2331      	movs	r3, #49	; 0x31
 800a110:	f805 3b01 	strb.w	r3, [r5], #1
 800a114:	9b00      	ldr	r3, [sp, #0]
 800a116:	3301      	adds	r3, #1
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	e240      	b.n	800a59e <_dtoa_r+0x946>
 800a11c:	07f2      	lsls	r2, r6, #31
 800a11e:	d505      	bpl.n	800a12c <_dtoa_r+0x4d4>
 800a120:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a124:	f7f6 fa68 	bl	80005f8 <__aeabi_dmul>
 800a128:	3501      	adds	r5, #1
 800a12a:	2301      	movs	r3, #1
 800a12c:	1076      	asrs	r6, r6, #1
 800a12e:	3708      	adds	r7, #8
 800a130:	e777      	b.n	800a022 <_dtoa_r+0x3ca>
 800a132:	2502      	movs	r5, #2
 800a134:	e779      	b.n	800a02a <_dtoa_r+0x3d2>
 800a136:	9f00      	ldr	r7, [sp, #0]
 800a138:	9e03      	ldr	r6, [sp, #12]
 800a13a:	e794      	b.n	800a066 <_dtoa_r+0x40e>
 800a13c:	9901      	ldr	r1, [sp, #4]
 800a13e:	4b4c      	ldr	r3, [pc, #304]	; (800a270 <_dtoa_r+0x618>)
 800a140:	4431      	add	r1, r6
 800a142:	910d      	str	r1, [sp, #52]	; 0x34
 800a144:	9908      	ldr	r1, [sp, #32]
 800a146:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a14a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a14e:	2900      	cmp	r1, #0
 800a150:	d043      	beq.n	800a1da <_dtoa_r+0x582>
 800a152:	494d      	ldr	r1, [pc, #308]	; (800a288 <_dtoa_r+0x630>)
 800a154:	2000      	movs	r0, #0
 800a156:	f7f6 fb79 	bl	800084c <__aeabi_ddiv>
 800a15a:	4652      	mov	r2, sl
 800a15c:	465b      	mov	r3, fp
 800a15e:	f7f6 f893 	bl	8000288 <__aeabi_dsub>
 800a162:	9d01      	ldr	r5, [sp, #4]
 800a164:	4682      	mov	sl, r0
 800a166:	468b      	mov	fp, r1
 800a168:	4649      	mov	r1, r9
 800a16a:	4640      	mov	r0, r8
 800a16c:	f7f6 fcf4 	bl	8000b58 <__aeabi_d2iz>
 800a170:	4606      	mov	r6, r0
 800a172:	f7f6 f9d7 	bl	8000524 <__aeabi_i2d>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4640      	mov	r0, r8
 800a17c:	4649      	mov	r1, r9
 800a17e:	f7f6 f883 	bl	8000288 <__aeabi_dsub>
 800a182:	3630      	adds	r6, #48	; 0x30
 800a184:	f805 6b01 	strb.w	r6, [r5], #1
 800a188:	4652      	mov	r2, sl
 800a18a:	465b      	mov	r3, fp
 800a18c:	4680      	mov	r8, r0
 800a18e:	4689      	mov	r9, r1
 800a190:	f7f6 fca4 	bl	8000adc <__aeabi_dcmplt>
 800a194:	2800      	cmp	r0, #0
 800a196:	d163      	bne.n	800a260 <_dtoa_r+0x608>
 800a198:	4642      	mov	r2, r8
 800a19a:	464b      	mov	r3, r9
 800a19c:	4936      	ldr	r1, [pc, #216]	; (800a278 <_dtoa_r+0x620>)
 800a19e:	2000      	movs	r0, #0
 800a1a0:	f7f6 f872 	bl	8000288 <__aeabi_dsub>
 800a1a4:	4652      	mov	r2, sl
 800a1a6:	465b      	mov	r3, fp
 800a1a8:	f7f6 fc98 	bl	8000adc <__aeabi_dcmplt>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	f040 80b5 	bne.w	800a31c <_dtoa_r+0x6c4>
 800a1b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1b4:	429d      	cmp	r5, r3
 800a1b6:	d081      	beq.n	800a0bc <_dtoa_r+0x464>
 800a1b8:	4b30      	ldr	r3, [pc, #192]	; (800a27c <_dtoa_r+0x624>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	4650      	mov	r0, sl
 800a1be:	4659      	mov	r1, fp
 800a1c0:	f7f6 fa1a 	bl	80005f8 <__aeabi_dmul>
 800a1c4:	4b2d      	ldr	r3, [pc, #180]	; (800a27c <_dtoa_r+0x624>)
 800a1c6:	4682      	mov	sl, r0
 800a1c8:	468b      	mov	fp, r1
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f7f6 fa12 	bl	80005f8 <__aeabi_dmul>
 800a1d4:	4680      	mov	r8, r0
 800a1d6:	4689      	mov	r9, r1
 800a1d8:	e7c6      	b.n	800a168 <_dtoa_r+0x510>
 800a1da:	4650      	mov	r0, sl
 800a1dc:	4659      	mov	r1, fp
 800a1de:	f7f6 fa0b 	bl	80005f8 <__aeabi_dmul>
 800a1e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1e4:	9d01      	ldr	r5, [sp, #4]
 800a1e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1e8:	4682      	mov	sl, r0
 800a1ea:	468b      	mov	fp, r1
 800a1ec:	4649      	mov	r1, r9
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	f7f6 fcb2 	bl	8000b58 <__aeabi_d2iz>
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	f7f6 f995 	bl	8000524 <__aeabi_i2d>
 800a1fa:	3630      	adds	r6, #48	; 0x30
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4640      	mov	r0, r8
 800a202:	4649      	mov	r1, r9
 800a204:	f7f6 f840 	bl	8000288 <__aeabi_dsub>
 800a208:	f805 6b01 	strb.w	r6, [r5], #1
 800a20c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a20e:	429d      	cmp	r5, r3
 800a210:	4680      	mov	r8, r0
 800a212:	4689      	mov	r9, r1
 800a214:	f04f 0200 	mov.w	r2, #0
 800a218:	d124      	bne.n	800a264 <_dtoa_r+0x60c>
 800a21a:	4b1b      	ldr	r3, [pc, #108]	; (800a288 <_dtoa_r+0x630>)
 800a21c:	4650      	mov	r0, sl
 800a21e:	4659      	mov	r1, fp
 800a220:	f7f6 f834 	bl	800028c <__adddf3>
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	4640      	mov	r0, r8
 800a22a:	4649      	mov	r1, r9
 800a22c:	f7f6 fc74 	bl	8000b18 <__aeabi_dcmpgt>
 800a230:	2800      	cmp	r0, #0
 800a232:	d173      	bne.n	800a31c <_dtoa_r+0x6c4>
 800a234:	4652      	mov	r2, sl
 800a236:	465b      	mov	r3, fp
 800a238:	4913      	ldr	r1, [pc, #76]	; (800a288 <_dtoa_r+0x630>)
 800a23a:	2000      	movs	r0, #0
 800a23c:	f7f6 f824 	bl	8000288 <__aeabi_dsub>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4640      	mov	r0, r8
 800a246:	4649      	mov	r1, r9
 800a248:	f7f6 fc48 	bl	8000adc <__aeabi_dcmplt>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	f43f af35 	beq.w	800a0bc <_dtoa_r+0x464>
 800a252:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a254:	1e6b      	subs	r3, r5, #1
 800a256:	930f      	str	r3, [sp, #60]	; 0x3c
 800a258:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a25c:	2b30      	cmp	r3, #48	; 0x30
 800a25e:	d0f8      	beq.n	800a252 <_dtoa_r+0x5fa>
 800a260:	9700      	str	r7, [sp, #0]
 800a262:	e049      	b.n	800a2f8 <_dtoa_r+0x6a0>
 800a264:	4b05      	ldr	r3, [pc, #20]	; (800a27c <_dtoa_r+0x624>)
 800a266:	f7f6 f9c7 	bl	80005f8 <__aeabi_dmul>
 800a26a:	4680      	mov	r8, r0
 800a26c:	4689      	mov	r9, r1
 800a26e:	e7bd      	b.n	800a1ec <_dtoa_r+0x594>
 800a270:	0800cd18 	.word	0x0800cd18
 800a274:	0800ccf0 	.word	0x0800ccf0
 800a278:	3ff00000 	.word	0x3ff00000
 800a27c:	40240000 	.word	0x40240000
 800a280:	401c0000 	.word	0x401c0000
 800a284:	40140000 	.word	0x40140000
 800a288:	3fe00000 	.word	0x3fe00000
 800a28c:	9d01      	ldr	r5, [sp, #4]
 800a28e:	4656      	mov	r6, sl
 800a290:	465f      	mov	r7, fp
 800a292:	4642      	mov	r2, r8
 800a294:	464b      	mov	r3, r9
 800a296:	4630      	mov	r0, r6
 800a298:	4639      	mov	r1, r7
 800a29a:	f7f6 fad7 	bl	800084c <__aeabi_ddiv>
 800a29e:	f7f6 fc5b 	bl	8000b58 <__aeabi_d2iz>
 800a2a2:	4682      	mov	sl, r0
 800a2a4:	f7f6 f93e 	bl	8000524 <__aeabi_i2d>
 800a2a8:	4642      	mov	r2, r8
 800a2aa:	464b      	mov	r3, r9
 800a2ac:	f7f6 f9a4 	bl	80005f8 <__aeabi_dmul>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a2bc:	f7f5 ffe4 	bl	8000288 <__aeabi_dsub>
 800a2c0:	f805 6b01 	strb.w	r6, [r5], #1
 800a2c4:	9e01      	ldr	r6, [sp, #4]
 800a2c6:	9f03      	ldr	r7, [sp, #12]
 800a2c8:	1bae      	subs	r6, r5, r6
 800a2ca:	42b7      	cmp	r7, r6
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	d135      	bne.n	800a33e <_dtoa_r+0x6e6>
 800a2d2:	f7f5 ffdb 	bl	800028c <__adddf3>
 800a2d6:	4642      	mov	r2, r8
 800a2d8:	464b      	mov	r3, r9
 800a2da:	4606      	mov	r6, r0
 800a2dc:	460f      	mov	r7, r1
 800a2de:	f7f6 fc1b 	bl	8000b18 <__aeabi_dcmpgt>
 800a2e2:	b9d0      	cbnz	r0, 800a31a <_dtoa_r+0x6c2>
 800a2e4:	4642      	mov	r2, r8
 800a2e6:	464b      	mov	r3, r9
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	f7f6 fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2f0:	b110      	cbz	r0, 800a2f8 <_dtoa_r+0x6a0>
 800a2f2:	f01a 0f01 	tst.w	sl, #1
 800a2f6:	d110      	bne.n	800a31a <_dtoa_r+0x6c2>
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	ee18 1a10 	vmov	r1, s16
 800a2fe:	f000 fe75 	bl	800afec <_Bfree>
 800a302:	2300      	movs	r3, #0
 800a304:	9800      	ldr	r0, [sp, #0]
 800a306:	702b      	strb	r3, [r5, #0]
 800a308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a30a:	3001      	adds	r0, #1
 800a30c:	6018      	str	r0, [r3, #0]
 800a30e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a310:	2b00      	cmp	r3, #0
 800a312:	f43f acf1 	beq.w	8009cf8 <_dtoa_r+0xa0>
 800a316:	601d      	str	r5, [r3, #0]
 800a318:	e4ee      	b.n	8009cf8 <_dtoa_r+0xa0>
 800a31a:	9f00      	ldr	r7, [sp, #0]
 800a31c:	462b      	mov	r3, r5
 800a31e:	461d      	mov	r5, r3
 800a320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a324:	2a39      	cmp	r2, #57	; 0x39
 800a326:	d106      	bne.n	800a336 <_dtoa_r+0x6de>
 800a328:	9a01      	ldr	r2, [sp, #4]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d1f7      	bne.n	800a31e <_dtoa_r+0x6c6>
 800a32e:	9901      	ldr	r1, [sp, #4]
 800a330:	2230      	movs	r2, #48	; 0x30
 800a332:	3701      	adds	r7, #1
 800a334:	700a      	strb	r2, [r1, #0]
 800a336:	781a      	ldrb	r2, [r3, #0]
 800a338:	3201      	adds	r2, #1
 800a33a:	701a      	strb	r2, [r3, #0]
 800a33c:	e790      	b.n	800a260 <_dtoa_r+0x608>
 800a33e:	4ba6      	ldr	r3, [pc, #664]	; (800a5d8 <_dtoa_r+0x980>)
 800a340:	2200      	movs	r2, #0
 800a342:	f7f6 f959 	bl	80005f8 <__aeabi_dmul>
 800a346:	2200      	movs	r2, #0
 800a348:	2300      	movs	r3, #0
 800a34a:	4606      	mov	r6, r0
 800a34c:	460f      	mov	r7, r1
 800a34e:	f7f6 fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a352:	2800      	cmp	r0, #0
 800a354:	d09d      	beq.n	800a292 <_dtoa_r+0x63a>
 800a356:	e7cf      	b.n	800a2f8 <_dtoa_r+0x6a0>
 800a358:	9a08      	ldr	r2, [sp, #32]
 800a35a:	2a00      	cmp	r2, #0
 800a35c:	f000 80d7 	beq.w	800a50e <_dtoa_r+0x8b6>
 800a360:	9a06      	ldr	r2, [sp, #24]
 800a362:	2a01      	cmp	r2, #1
 800a364:	f300 80ba 	bgt.w	800a4dc <_dtoa_r+0x884>
 800a368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a36a:	2a00      	cmp	r2, #0
 800a36c:	f000 80b2 	beq.w	800a4d4 <_dtoa_r+0x87c>
 800a370:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a374:	9e07      	ldr	r6, [sp, #28]
 800a376:	9d04      	ldr	r5, [sp, #16]
 800a378:	9a04      	ldr	r2, [sp, #16]
 800a37a:	441a      	add	r2, r3
 800a37c:	9204      	str	r2, [sp, #16]
 800a37e:	9a05      	ldr	r2, [sp, #20]
 800a380:	2101      	movs	r1, #1
 800a382:	441a      	add	r2, r3
 800a384:	4620      	mov	r0, r4
 800a386:	9205      	str	r2, [sp, #20]
 800a388:	f000 ff32 	bl	800b1f0 <__i2b>
 800a38c:	4607      	mov	r7, r0
 800a38e:	2d00      	cmp	r5, #0
 800a390:	dd0c      	ble.n	800a3ac <_dtoa_r+0x754>
 800a392:	9b05      	ldr	r3, [sp, #20]
 800a394:	2b00      	cmp	r3, #0
 800a396:	dd09      	ble.n	800a3ac <_dtoa_r+0x754>
 800a398:	42ab      	cmp	r3, r5
 800a39a:	9a04      	ldr	r2, [sp, #16]
 800a39c:	bfa8      	it	ge
 800a39e:	462b      	movge	r3, r5
 800a3a0:	1ad2      	subs	r2, r2, r3
 800a3a2:	9204      	str	r2, [sp, #16]
 800a3a4:	9a05      	ldr	r2, [sp, #20]
 800a3a6:	1aed      	subs	r5, r5, r3
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	9305      	str	r3, [sp, #20]
 800a3ac:	9b07      	ldr	r3, [sp, #28]
 800a3ae:	b31b      	cbz	r3, 800a3f8 <_dtoa_r+0x7a0>
 800a3b0:	9b08      	ldr	r3, [sp, #32]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 80af 	beq.w	800a516 <_dtoa_r+0x8be>
 800a3b8:	2e00      	cmp	r6, #0
 800a3ba:	dd13      	ble.n	800a3e4 <_dtoa_r+0x78c>
 800a3bc:	4639      	mov	r1, r7
 800a3be:	4632      	mov	r2, r6
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f000 ffd5 	bl	800b370 <__pow5mult>
 800a3c6:	ee18 2a10 	vmov	r2, s16
 800a3ca:	4601      	mov	r1, r0
 800a3cc:	4607      	mov	r7, r0
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f000 ff24 	bl	800b21c <__multiply>
 800a3d4:	ee18 1a10 	vmov	r1, s16
 800a3d8:	4680      	mov	r8, r0
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 fe06 	bl	800afec <_Bfree>
 800a3e0:	ee08 8a10 	vmov	s16, r8
 800a3e4:	9b07      	ldr	r3, [sp, #28]
 800a3e6:	1b9a      	subs	r2, r3, r6
 800a3e8:	d006      	beq.n	800a3f8 <_dtoa_r+0x7a0>
 800a3ea:	ee18 1a10 	vmov	r1, s16
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f000 ffbe 	bl	800b370 <__pow5mult>
 800a3f4:	ee08 0a10 	vmov	s16, r0
 800a3f8:	2101      	movs	r1, #1
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 fef8 	bl	800b1f0 <__i2b>
 800a400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a402:	2b00      	cmp	r3, #0
 800a404:	4606      	mov	r6, r0
 800a406:	f340 8088 	ble.w	800a51a <_dtoa_r+0x8c2>
 800a40a:	461a      	mov	r2, r3
 800a40c:	4601      	mov	r1, r0
 800a40e:	4620      	mov	r0, r4
 800a410:	f000 ffae 	bl	800b370 <__pow5mult>
 800a414:	9b06      	ldr	r3, [sp, #24]
 800a416:	2b01      	cmp	r3, #1
 800a418:	4606      	mov	r6, r0
 800a41a:	f340 8081 	ble.w	800a520 <_dtoa_r+0x8c8>
 800a41e:	f04f 0800 	mov.w	r8, #0
 800a422:	6933      	ldr	r3, [r6, #16]
 800a424:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a428:	6918      	ldr	r0, [r3, #16]
 800a42a:	f000 fe91 	bl	800b150 <__hi0bits>
 800a42e:	f1c0 0020 	rsb	r0, r0, #32
 800a432:	9b05      	ldr	r3, [sp, #20]
 800a434:	4418      	add	r0, r3
 800a436:	f010 001f 	ands.w	r0, r0, #31
 800a43a:	f000 8092 	beq.w	800a562 <_dtoa_r+0x90a>
 800a43e:	f1c0 0320 	rsb	r3, r0, #32
 800a442:	2b04      	cmp	r3, #4
 800a444:	f340 808a 	ble.w	800a55c <_dtoa_r+0x904>
 800a448:	f1c0 001c 	rsb	r0, r0, #28
 800a44c:	9b04      	ldr	r3, [sp, #16]
 800a44e:	4403      	add	r3, r0
 800a450:	9304      	str	r3, [sp, #16]
 800a452:	9b05      	ldr	r3, [sp, #20]
 800a454:	4403      	add	r3, r0
 800a456:	4405      	add	r5, r0
 800a458:	9305      	str	r3, [sp, #20]
 800a45a:	9b04      	ldr	r3, [sp, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	dd07      	ble.n	800a470 <_dtoa_r+0x818>
 800a460:	ee18 1a10 	vmov	r1, s16
 800a464:	461a      	mov	r2, r3
 800a466:	4620      	mov	r0, r4
 800a468:	f000 ffdc 	bl	800b424 <__lshift>
 800a46c:	ee08 0a10 	vmov	s16, r0
 800a470:	9b05      	ldr	r3, [sp, #20]
 800a472:	2b00      	cmp	r3, #0
 800a474:	dd05      	ble.n	800a482 <_dtoa_r+0x82a>
 800a476:	4631      	mov	r1, r6
 800a478:	461a      	mov	r2, r3
 800a47a:	4620      	mov	r0, r4
 800a47c:	f000 ffd2 	bl	800b424 <__lshift>
 800a480:	4606      	mov	r6, r0
 800a482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a484:	2b00      	cmp	r3, #0
 800a486:	d06e      	beq.n	800a566 <_dtoa_r+0x90e>
 800a488:	ee18 0a10 	vmov	r0, s16
 800a48c:	4631      	mov	r1, r6
 800a48e:	f001 f839 	bl	800b504 <__mcmp>
 800a492:	2800      	cmp	r0, #0
 800a494:	da67      	bge.n	800a566 <_dtoa_r+0x90e>
 800a496:	9b00      	ldr	r3, [sp, #0]
 800a498:	3b01      	subs	r3, #1
 800a49a:	ee18 1a10 	vmov	r1, s16
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	220a      	movs	r2, #10
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f000 fdc3 	bl	800b030 <__multadd>
 800a4aa:	9b08      	ldr	r3, [sp, #32]
 800a4ac:	ee08 0a10 	vmov	s16, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f000 81b1 	beq.w	800a818 <_dtoa_r+0xbc0>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	4639      	mov	r1, r7
 800a4ba:	220a      	movs	r2, #10
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f000 fdb7 	bl	800b030 <__multadd>
 800a4c2:	9b02      	ldr	r3, [sp, #8]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	f300 808e 	bgt.w	800a5e8 <_dtoa_r+0x990>
 800a4cc:	9b06      	ldr	r3, [sp, #24]
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	dc51      	bgt.n	800a576 <_dtoa_r+0x91e>
 800a4d2:	e089      	b.n	800a5e8 <_dtoa_r+0x990>
 800a4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a4da:	e74b      	b.n	800a374 <_dtoa_r+0x71c>
 800a4dc:	9b03      	ldr	r3, [sp, #12]
 800a4de:	1e5e      	subs	r6, r3, #1
 800a4e0:	9b07      	ldr	r3, [sp, #28]
 800a4e2:	42b3      	cmp	r3, r6
 800a4e4:	bfbf      	itttt	lt
 800a4e6:	9b07      	ldrlt	r3, [sp, #28]
 800a4e8:	9607      	strlt	r6, [sp, #28]
 800a4ea:	1af2      	sublt	r2, r6, r3
 800a4ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a4ee:	bfb6      	itet	lt
 800a4f0:	189b      	addlt	r3, r3, r2
 800a4f2:	1b9e      	subge	r6, r3, r6
 800a4f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a4f6:	9b03      	ldr	r3, [sp, #12]
 800a4f8:	bfb8      	it	lt
 800a4fa:	2600      	movlt	r6, #0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	bfb7      	itett	lt
 800a500:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a504:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a508:	1a9d      	sublt	r5, r3, r2
 800a50a:	2300      	movlt	r3, #0
 800a50c:	e734      	b.n	800a378 <_dtoa_r+0x720>
 800a50e:	9e07      	ldr	r6, [sp, #28]
 800a510:	9d04      	ldr	r5, [sp, #16]
 800a512:	9f08      	ldr	r7, [sp, #32]
 800a514:	e73b      	b.n	800a38e <_dtoa_r+0x736>
 800a516:	9a07      	ldr	r2, [sp, #28]
 800a518:	e767      	b.n	800a3ea <_dtoa_r+0x792>
 800a51a:	9b06      	ldr	r3, [sp, #24]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	dc18      	bgt.n	800a552 <_dtoa_r+0x8fa>
 800a520:	f1ba 0f00 	cmp.w	sl, #0
 800a524:	d115      	bne.n	800a552 <_dtoa_r+0x8fa>
 800a526:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a52a:	b993      	cbnz	r3, 800a552 <_dtoa_r+0x8fa>
 800a52c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a530:	0d1b      	lsrs	r3, r3, #20
 800a532:	051b      	lsls	r3, r3, #20
 800a534:	b183      	cbz	r3, 800a558 <_dtoa_r+0x900>
 800a536:	9b04      	ldr	r3, [sp, #16]
 800a538:	3301      	adds	r3, #1
 800a53a:	9304      	str	r3, [sp, #16]
 800a53c:	9b05      	ldr	r3, [sp, #20]
 800a53e:	3301      	adds	r3, #1
 800a540:	9305      	str	r3, [sp, #20]
 800a542:	f04f 0801 	mov.w	r8, #1
 800a546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f47f af6a 	bne.w	800a422 <_dtoa_r+0x7ca>
 800a54e:	2001      	movs	r0, #1
 800a550:	e76f      	b.n	800a432 <_dtoa_r+0x7da>
 800a552:	f04f 0800 	mov.w	r8, #0
 800a556:	e7f6      	b.n	800a546 <_dtoa_r+0x8ee>
 800a558:	4698      	mov	r8, r3
 800a55a:	e7f4      	b.n	800a546 <_dtoa_r+0x8ee>
 800a55c:	f43f af7d 	beq.w	800a45a <_dtoa_r+0x802>
 800a560:	4618      	mov	r0, r3
 800a562:	301c      	adds	r0, #28
 800a564:	e772      	b.n	800a44c <_dtoa_r+0x7f4>
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	dc37      	bgt.n	800a5dc <_dtoa_r+0x984>
 800a56c:	9b06      	ldr	r3, [sp, #24]
 800a56e:	2b02      	cmp	r3, #2
 800a570:	dd34      	ble.n	800a5dc <_dtoa_r+0x984>
 800a572:	9b03      	ldr	r3, [sp, #12]
 800a574:	9302      	str	r3, [sp, #8]
 800a576:	9b02      	ldr	r3, [sp, #8]
 800a578:	b96b      	cbnz	r3, 800a596 <_dtoa_r+0x93e>
 800a57a:	4631      	mov	r1, r6
 800a57c:	2205      	movs	r2, #5
 800a57e:	4620      	mov	r0, r4
 800a580:	f000 fd56 	bl	800b030 <__multadd>
 800a584:	4601      	mov	r1, r0
 800a586:	4606      	mov	r6, r0
 800a588:	ee18 0a10 	vmov	r0, s16
 800a58c:	f000 ffba 	bl	800b504 <__mcmp>
 800a590:	2800      	cmp	r0, #0
 800a592:	f73f adbb 	bgt.w	800a10c <_dtoa_r+0x4b4>
 800a596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a598:	9d01      	ldr	r5, [sp, #4]
 800a59a:	43db      	mvns	r3, r3
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	f04f 0800 	mov.w	r8, #0
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f000 fd21 	bl	800afec <_Bfree>
 800a5aa:	2f00      	cmp	r7, #0
 800a5ac:	f43f aea4 	beq.w	800a2f8 <_dtoa_r+0x6a0>
 800a5b0:	f1b8 0f00 	cmp.w	r8, #0
 800a5b4:	d005      	beq.n	800a5c2 <_dtoa_r+0x96a>
 800a5b6:	45b8      	cmp	r8, r7
 800a5b8:	d003      	beq.n	800a5c2 <_dtoa_r+0x96a>
 800a5ba:	4641      	mov	r1, r8
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f000 fd15 	bl	800afec <_Bfree>
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f000 fd11 	bl	800afec <_Bfree>
 800a5ca:	e695      	b.n	800a2f8 <_dtoa_r+0x6a0>
 800a5cc:	2600      	movs	r6, #0
 800a5ce:	4637      	mov	r7, r6
 800a5d0:	e7e1      	b.n	800a596 <_dtoa_r+0x93e>
 800a5d2:	9700      	str	r7, [sp, #0]
 800a5d4:	4637      	mov	r7, r6
 800a5d6:	e599      	b.n	800a10c <_dtoa_r+0x4b4>
 800a5d8:	40240000 	.word	0x40240000
 800a5dc:	9b08      	ldr	r3, [sp, #32]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f000 80ca 	beq.w	800a778 <_dtoa_r+0xb20>
 800a5e4:	9b03      	ldr	r3, [sp, #12]
 800a5e6:	9302      	str	r3, [sp, #8]
 800a5e8:	2d00      	cmp	r5, #0
 800a5ea:	dd05      	ble.n	800a5f8 <_dtoa_r+0x9a0>
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	462a      	mov	r2, r5
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f000 ff17 	bl	800b424 <__lshift>
 800a5f6:	4607      	mov	r7, r0
 800a5f8:	f1b8 0f00 	cmp.w	r8, #0
 800a5fc:	d05b      	beq.n	800a6b6 <_dtoa_r+0xa5e>
 800a5fe:	6879      	ldr	r1, [r7, #4]
 800a600:	4620      	mov	r0, r4
 800a602:	f000 fcb3 	bl	800af6c <_Balloc>
 800a606:	4605      	mov	r5, r0
 800a608:	b928      	cbnz	r0, 800a616 <_dtoa_r+0x9be>
 800a60a:	4b87      	ldr	r3, [pc, #540]	; (800a828 <_dtoa_r+0xbd0>)
 800a60c:	4602      	mov	r2, r0
 800a60e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a612:	f7ff bb3b 	b.w	8009c8c <_dtoa_r+0x34>
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	3202      	adds	r2, #2
 800a61a:	0092      	lsls	r2, r2, #2
 800a61c:	f107 010c 	add.w	r1, r7, #12
 800a620:	300c      	adds	r0, #12
 800a622:	f000 fc95 	bl	800af50 <memcpy>
 800a626:	2201      	movs	r2, #1
 800a628:	4629      	mov	r1, r5
 800a62a:	4620      	mov	r0, r4
 800a62c:	f000 fefa 	bl	800b424 <__lshift>
 800a630:	9b01      	ldr	r3, [sp, #4]
 800a632:	f103 0901 	add.w	r9, r3, #1
 800a636:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a63a:	4413      	add	r3, r2
 800a63c:	9305      	str	r3, [sp, #20]
 800a63e:	f00a 0301 	and.w	r3, sl, #1
 800a642:	46b8      	mov	r8, r7
 800a644:	9304      	str	r3, [sp, #16]
 800a646:	4607      	mov	r7, r0
 800a648:	4631      	mov	r1, r6
 800a64a:	ee18 0a10 	vmov	r0, s16
 800a64e:	f7ff fa77 	bl	8009b40 <quorem>
 800a652:	4641      	mov	r1, r8
 800a654:	9002      	str	r0, [sp, #8]
 800a656:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a65a:	ee18 0a10 	vmov	r0, s16
 800a65e:	f000 ff51 	bl	800b504 <__mcmp>
 800a662:	463a      	mov	r2, r7
 800a664:	9003      	str	r0, [sp, #12]
 800a666:	4631      	mov	r1, r6
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 ff67 	bl	800b53c <__mdiff>
 800a66e:	68c2      	ldr	r2, [r0, #12]
 800a670:	f109 3bff 	add.w	fp, r9, #4294967295
 800a674:	4605      	mov	r5, r0
 800a676:	bb02      	cbnz	r2, 800a6ba <_dtoa_r+0xa62>
 800a678:	4601      	mov	r1, r0
 800a67a:	ee18 0a10 	vmov	r0, s16
 800a67e:	f000 ff41 	bl	800b504 <__mcmp>
 800a682:	4602      	mov	r2, r0
 800a684:	4629      	mov	r1, r5
 800a686:	4620      	mov	r0, r4
 800a688:	9207      	str	r2, [sp, #28]
 800a68a:	f000 fcaf 	bl	800afec <_Bfree>
 800a68e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a692:	ea43 0102 	orr.w	r1, r3, r2
 800a696:	9b04      	ldr	r3, [sp, #16]
 800a698:	430b      	orrs	r3, r1
 800a69a:	464d      	mov	r5, r9
 800a69c:	d10f      	bne.n	800a6be <_dtoa_r+0xa66>
 800a69e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6a2:	d02a      	beq.n	800a6fa <_dtoa_r+0xaa2>
 800a6a4:	9b03      	ldr	r3, [sp, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	dd02      	ble.n	800a6b0 <_dtoa_r+0xa58>
 800a6aa:	9b02      	ldr	r3, [sp, #8]
 800a6ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a6b0:	f88b a000 	strb.w	sl, [fp]
 800a6b4:	e775      	b.n	800a5a2 <_dtoa_r+0x94a>
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	e7ba      	b.n	800a630 <_dtoa_r+0x9d8>
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	e7e2      	b.n	800a684 <_dtoa_r+0xa2c>
 800a6be:	9b03      	ldr	r3, [sp, #12]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	db04      	blt.n	800a6ce <_dtoa_r+0xa76>
 800a6c4:	9906      	ldr	r1, [sp, #24]
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	9904      	ldr	r1, [sp, #16]
 800a6ca:	430b      	orrs	r3, r1
 800a6cc:	d122      	bne.n	800a714 <_dtoa_r+0xabc>
 800a6ce:	2a00      	cmp	r2, #0
 800a6d0:	ddee      	ble.n	800a6b0 <_dtoa_r+0xa58>
 800a6d2:	ee18 1a10 	vmov	r1, s16
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f000 fea3 	bl	800b424 <__lshift>
 800a6de:	4631      	mov	r1, r6
 800a6e0:	ee08 0a10 	vmov	s16, r0
 800a6e4:	f000 ff0e 	bl	800b504 <__mcmp>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	dc03      	bgt.n	800a6f4 <_dtoa_r+0xa9c>
 800a6ec:	d1e0      	bne.n	800a6b0 <_dtoa_r+0xa58>
 800a6ee:	f01a 0f01 	tst.w	sl, #1
 800a6f2:	d0dd      	beq.n	800a6b0 <_dtoa_r+0xa58>
 800a6f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6f8:	d1d7      	bne.n	800a6aa <_dtoa_r+0xa52>
 800a6fa:	2339      	movs	r3, #57	; 0x39
 800a6fc:	f88b 3000 	strb.w	r3, [fp]
 800a700:	462b      	mov	r3, r5
 800a702:	461d      	mov	r5, r3
 800a704:	3b01      	subs	r3, #1
 800a706:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a70a:	2a39      	cmp	r2, #57	; 0x39
 800a70c:	d071      	beq.n	800a7f2 <_dtoa_r+0xb9a>
 800a70e:	3201      	adds	r2, #1
 800a710:	701a      	strb	r2, [r3, #0]
 800a712:	e746      	b.n	800a5a2 <_dtoa_r+0x94a>
 800a714:	2a00      	cmp	r2, #0
 800a716:	dd07      	ble.n	800a728 <_dtoa_r+0xad0>
 800a718:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a71c:	d0ed      	beq.n	800a6fa <_dtoa_r+0xaa2>
 800a71e:	f10a 0301 	add.w	r3, sl, #1
 800a722:	f88b 3000 	strb.w	r3, [fp]
 800a726:	e73c      	b.n	800a5a2 <_dtoa_r+0x94a>
 800a728:	9b05      	ldr	r3, [sp, #20]
 800a72a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a72e:	4599      	cmp	r9, r3
 800a730:	d047      	beq.n	800a7c2 <_dtoa_r+0xb6a>
 800a732:	ee18 1a10 	vmov	r1, s16
 800a736:	2300      	movs	r3, #0
 800a738:	220a      	movs	r2, #10
 800a73a:	4620      	mov	r0, r4
 800a73c:	f000 fc78 	bl	800b030 <__multadd>
 800a740:	45b8      	cmp	r8, r7
 800a742:	ee08 0a10 	vmov	s16, r0
 800a746:	f04f 0300 	mov.w	r3, #0
 800a74a:	f04f 020a 	mov.w	r2, #10
 800a74e:	4641      	mov	r1, r8
 800a750:	4620      	mov	r0, r4
 800a752:	d106      	bne.n	800a762 <_dtoa_r+0xb0a>
 800a754:	f000 fc6c 	bl	800b030 <__multadd>
 800a758:	4680      	mov	r8, r0
 800a75a:	4607      	mov	r7, r0
 800a75c:	f109 0901 	add.w	r9, r9, #1
 800a760:	e772      	b.n	800a648 <_dtoa_r+0x9f0>
 800a762:	f000 fc65 	bl	800b030 <__multadd>
 800a766:	4639      	mov	r1, r7
 800a768:	4680      	mov	r8, r0
 800a76a:	2300      	movs	r3, #0
 800a76c:	220a      	movs	r2, #10
 800a76e:	4620      	mov	r0, r4
 800a770:	f000 fc5e 	bl	800b030 <__multadd>
 800a774:	4607      	mov	r7, r0
 800a776:	e7f1      	b.n	800a75c <_dtoa_r+0xb04>
 800a778:	9b03      	ldr	r3, [sp, #12]
 800a77a:	9302      	str	r3, [sp, #8]
 800a77c:	9d01      	ldr	r5, [sp, #4]
 800a77e:	ee18 0a10 	vmov	r0, s16
 800a782:	4631      	mov	r1, r6
 800a784:	f7ff f9dc 	bl	8009b40 <quorem>
 800a788:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a78c:	9b01      	ldr	r3, [sp, #4]
 800a78e:	f805 ab01 	strb.w	sl, [r5], #1
 800a792:	1aea      	subs	r2, r5, r3
 800a794:	9b02      	ldr	r3, [sp, #8]
 800a796:	4293      	cmp	r3, r2
 800a798:	dd09      	ble.n	800a7ae <_dtoa_r+0xb56>
 800a79a:	ee18 1a10 	vmov	r1, s16
 800a79e:	2300      	movs	r3, #0
 800a7a0:	220a      	movs	r2, #10
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f000 fc44 	bl	800b030 <__multadd>
 800a7a8:	ee08 0a10 	vmov	s16, r0
 800a7ac:	e7e7      	b.n	800a77e <_dtoa_r+0xb26>
 800a7ae:	9b02      	ldr	r3, [sp, #8]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bfc8      	it	gt
 800a7b4:	461d      	movgt	r5, r3
 800a7b6:	9b01      	ldr	r3, [sp, #4]
 800a7b8:	bfd8      	it	le
 800a7ba:	2501      	movle	r5, #1
 800a7bc:	441d      	add	r5, r3
 800a7be:	f04f 0800 	mov.w	r8, #0
 800a7c2:	ee18 1a10 	vmov	r1, s16
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 fe2b 	bl	800b424 <__lshift>
 800a7ce:	4631      	mov	r1, r6
 800a7d0:	ee08 0a10 	vmov	s16, r0
 800a7d4:	f000 fe96 	bl	800b504 <__mcmp>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	dc91      	bgt.n	800a700 <_dtoa_r+0xaa8>
 800a7dc:	d102      	bne.n	800a7e4 <_dtoa_r+0xb8c>
 800a7de:	f01a 0f01 	tst.w	sl, #1
 800a7e2:	d18d      	bne.n	800a700 <_dtoa_r+0xaa8>
 800a7e4:	462b      	mov	r3, r5
 800a7e6:	461d      	mov	r5, r3
 800a7e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7ec:	2a30      	cmp	r2, #48	; 0x30
 800a7ee:	d0fa      	beq.n	800a7e6 <_dtoa_r+0xb8e>
 800a7f0:	e6d7      	b.n	800a5a2 <_dtoa_r+0x94a>
 800a7f2:	9a01      	ldr	r2, [sp, #4]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d184      	bne.n	800a702 <_dtoa_r+0xaaa>
 800a7f8:	9b00      	ldr	r3, [sp, #0]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	2331      	movs	r3, #49	; 0x31
 800a800:	7013      	strb	r3, [r2, #0]
 800a802:	e6ce      	b.n	800a5a2 <_dtoa_r+0x94a>
 800a804:	4b09      	ldr	r3, [pc, #36]	; (800a82c <_dtoa_r+0xbd4>)
 800a806:	f7ff ba95 	b.w	8009d34 <_dtoa_r+0xdc>
 800a80a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f47f aa6e 	bne.w	8009cee <_dtoa_r+0x96>
 800a812:	4b07      	ldr	r3, [pc, #28]	; (800a830 <_dtoa_r+0xbd8>)
 800a814:	f7ff ba8e 	b.w	8009d34 <_dtoa_r+0xdc>
 800a818:	9b02      	ldr	r3, [sp, #8]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	dcae      	bgt.n	800a77c <_dtoa_r+0xb24>
 800a81e:	9b06      	ldr	r3, [sp, #24]
 800a820:	2b02      	cmp	r3, #2
 800a822:	f73f aea8 	bgt.w	800a576 <_dtoa_r+0x91e>
 800a826:	e7a9      	b.n	800a77c <_dtoa_r+0xb24>
 800a828:	0800cc08 	.word	0x0800cc08
 800a82c:	0800ca08 	.word	0x0800ca08
 800a830:	0800cb89 	.word	0x0800cb89

0800a834 <rshift>:
 800a834:	6903      	ldr	r3, [r0, #16]
 800a836:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a83a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a83e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a842:	f100 0414 	add.w	r4, r0, #20
 800a846:	dd45      	ble.n	800a8d4 <rshift+0xa0>
 800a848:	f011 011f 	ands.w	r1, r1, #31
 800a84c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a850:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a854:	d10c      	bne.n	800a870 <rshift+0x3c>
 800a856:	f100 0710 	add.w	r7, r0, #16
 800a85a:	4629      	mov	r1, r5
 800a85c:	42b1      	cmp	r1, r6
 800a85e:	d334      	bcc.n	800a8ca <rshift+0x96>
 800a860:	1a9b      	subs	r3, r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	1eea      	subs	r2, r5, #3
 800a866:	4296      	cmp	r6, r2
 800a868:	bf38      	it	cc
 800a86a:	2300      	movcc	r3, #0
 800a86c:	4423      	add	r3, r4
 800a86e:	e015      	b.n	800a89c <rshift+0x68>
 800a870:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a874:	f1c1 0820 	rsb	r8, r1, #32
 800a878:	40cf      	lsrs	r7, r1
 800a87a:	f105 0e04 	add.w	lr, r5, #4
 800a87e:	46a1      	mov	r9, r4
 800a880:	4576      	cmp	r6, lr
 800a882:	46f4      	mov	ip, lr
 800a884:	d815      	bhi.n	800a8b2 <rshift+0x7e>
 800a886:	1a9a      	subs	r2, r3, r2
 800a888:	0092      	lsls	r2, r2, #2
 800a88a:	3a04      	subs	r2, #4
 800a88c:	3501      	adds	r5, #1
 800a88e:	42ae      	cmp	r6, r5
 800a890:	bf38      	it	cc
 800a892:	2200      	movcc	r2, #0
 800a894:	18a3      	adds	r3, r4, r2
 800a896:	50a7      	str	r7, [r4, r2]
 800a898:	b107      	cbz	r7, 800a89c <rshift+0x68>
 800a89a:	3304      	adds	r3, #4
 800a89c:	1b1a      	subs	r2, r3, r4
 800a89e:	42a3      	cmp	r3, r4
 800a8a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8a4:	bf08      	it	eq
 800a8a6:	2300      	moveq	r3, #0
 800a8a8:	6102      	str	r2, [r0, #16]
 800a8aa:	bf08      	it	eq
 800a8ac:	6143      	streq	r3, [r0, #20]
 800a8ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8b2:	f8dc c000 	ldr.w	ip, [ip]
 800a8b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a8ba:	ea4c 0707 	orr.w	r7, ip, r7
 800a8be:	f849 7b04 	str.w	r7, [r9], #4
 800a8c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8c6:	40cf      	lsrs	r7, r1
 800a8c8:	e7da      	b.n	800a880 <rshift+0x4c>
 800a8ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8d2:	e7c3      	b.n	800a85c <rshift+0x28>
 800a8d4:	4623      	mov	r3, r4
 800a8d6:	e7e1      	b.n	800a89c <rshift+0x68>

0800a8d8 <__hexdig_fun>:
 800a8d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a8dc:	2b09      	cmp	r3, #9
 800a8de:	d802      	bhi.n	800a8e6 <__hexdig_fun+0xe>
 800a8e0:	3820      	subs	r0, #32
 800a8e2:	b2c0      	uxtb	r0, r0
 800a8e4:	4770      	bx	lr
 800a8e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a8ea:	2b05      	cmp	r3, #5
 800a8ec:	d801      	bhi.n	800a8f2 <__hexdig_fun+0x1a>
 800a8ee:	3847      	subs	r0, #71	; 0x47
 800a8f0:	e7f7      	b.n	800a8e2 <__hexdig_fun+0xa>
 800a8f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a8f6:	2b05      	cmp	r3, #5
 800a8f8:	d801      	bhi.n	800a8fe <__hexdig_fun+0x26>
 800a8fa:	3827      	subs	r0, #39	; 0x27
 800a8fc:	e7f1      	b.n	800a8e2 <__hexdig_fun+0xa>
 800a8fe:	2000      	movs	r0, #0
 800a900:	4770      	bx	lr
	...

0800a904 <__gethex>:
 800a904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a908:	ed2d 8b02 	vpush	{d8}
 800a90c:	b089      	sub	sp, #36	; 0x24
 800a90e:	ee08 0a10 	vmov	s16, r0
 800a912:	9304      	str	r3, [sp, #16]
 800a914:	4bb4      	ldr	r3, [pc, #720]	; (800abe8 <__gethex+0x2e4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	9301      	str	r3, [sp, #4]
 800a91a:	4618      	mov	r0, r3
 800a91c:	468b      	mov	fp, r1
 800a91e:	4690      	mov	r8, r2
 800a920:	f7f5 fc56 	bl	80001d0 <strlen>
 800a924:	9b01      	ldr	r3, [sp, #4]
 800a926:	f8db 2000 	ldr.w	r2, [fp]
 800a92a:	4403      	add	r3, r0
 800a92c:	4682      	mov	sl, r0
 800a92e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a932:	9305      	str	r3, [sp, #20]
 800a934:	1c93      	adds	r3, r2, #2
 800a936:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a93a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a93e:	32fe      	adds	r2, #254	; 0xfe
 800a940:	18d1      	adds	r1, r2, r3
 800a942:	461f      	mov	r7, r3
 800a944:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a948:	9100      	str	r1, [sp, #0]
 800a94a:	2830      	cmp	r0, #48	; 0x30
 800a94c:	d0f8      	beq.n	800a940 <__gethex+0x3c>
 800a94e:	f7ff ffc3 	bl	800a8d8 <__hexdig_fun>
 800a952:	4604      	mov	r4, r0
 800a954:	2800      	cmp	r0, #0
 800a956:	d13a      	bne.n	800a9ce <__gethex+0xca>
 800a958:	9901      	ldr	r1, [sp, #4]
 800a95a:	4652      	mov	r2, sl
 800a95c:	4638      	mov	r0, r7
 800a95e:	f001 fa33 	bl	800bdc8 <strncmp>
 800a962:	4605      	mov	r5, r0
 800a964:	2800      	cmp	r0, #0
 800a966:	d168      	bne.n	800aa3a <__gethex+0x136>
 800a968:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a96c:	eb07 060a 	add.w	r6, r7, sl
 800a970:	f7ff ffb2 	bl	800a8d8 <__hexdig_fun>
 800a974:	2800      	cmp	r0, #0
 800a976:	d062      	beq.n	800aa3e <__gethex+0x13a>
 800a978:	4633      	mov	r3, r6
 800a97a:	7818      	ldrb	r0, [r3, #0]
 800a97c:	2830      	cmp	r0, #48	; 0x30
 800a97e:	461f      	mov	r7, r3
 800a980:	f103 0301 	add.w	r3, r3, #1
 800a984:	d0f9      	beq.n	800a97a <__gethex+0x76>
 800a986:	f7ff ffa7 	bl	800a8d8 <__hexdig_fun>
 800a98a:	2301      	movs	r3, #1
 800a98c:	fab0 f480 	clz	r4, r0
 800a990:	0964      	lsrs	r4, r4, #5
 800a992:	4635      	mov	r5, r6
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	463a      	mov	r2, r7
 800a998:	4616      	mov	r6, r2
 800a99a:	3201      	adds	r2, #1
 800a99c:	7830      	ldrb	r0, [r6, #0]
 800a99e:	f7ff ff9b 	bl	800a8d8 <__hexdig_fun>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d1f8      	bne.n	800a998 <__gethex+0x94>
 800a9a6:	9901      	ldr	r1, [sp, #4]
 800a9a8:	4652      	mov	r2, sl
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f001 fa0c 	bl	800bdc8 <strncmp>
 800a9b0:	b980      	cbnz	r0, 800a9d4 <__gethex+0xd0>
 800a9b2:	b94d      	cbnz	r5, 800a9c8 <__gethex+0xc4>
 800a9b4:	eb06 050a 	add.w	r5, r6, sl
 800a9b8:	462a      	mov	r2, r5
 800a9ba:	4616      	mov	r6, r2
 800a9bc:	3201      	adds	r2, #1
 800a9be:	7830      	ldrb	r0, [r6, #0]
 800a9c0:	f7ff ff8a 	bl	800a8d8 <__hexdig_fun>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d1f8      	bne.n	800a9ba <__gethex+0xb6>
 800a9c8:	1bad      	subs	r5, r5, r6
 800a9ca:	00ad      	lsls	r5, r5, #2
 800a9cc:	e004      	b.n	800a9d8 <__gethex+0xd4>
 800a9ce:	2400      	movs	r4, #0
 800a9d0:	4625      	mov	r5, r4
 800a9d2:	e7e0      	b.n	800a996 <__gethex+0x92>
 800a9d4:	2d00      	cmp	r5, #0
 800a9d6:	d1f7      	bne.n	800a9c8 <__gethex+0xc4>
 800a9d8:	7833      	ldrb	r3, [r6, #0]
 800a9da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a9de:	2b50      	cmp	r3, #80	; 0x50
 800a9e0:	d13b      	bne.n	800aa5a <__gethex+0x156>
 800a9e2:	7873      	ldrb	r3, [r6, #1]
 800a9e4:	2b2b      	cmp	r3, #43	; 0x2b
 800a9e6:	d02c      	beq.n	800aa42 <__gethex+0x13e>
 800a9e8:	2b2d      	cmp	r3, #45	; 0x2d
 800a9ea:	d02e      	beq.n	800aa4a <__gethex+0x146>
 800a9ec:	1c71      	adds	r1, r6, #1
 800a9ee:	f04f 0900 	mov.w	r9, #0
 800a9f2:	7808      	ldrb	r0, [r1, #0]
 800a9f4:	f7ff ff70 	bl	800a8d8 <__hexdig_fun>
 800a9f8:	1e43      	subs	r3, r0, #1
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	2b18      	cmp	r3, #24
 800a9fe:	d82c      	bhi.n	800aa5a <__gethex+0x156>
 800aa00:	f1a0 0210 	sub.w	r2, r0, #16
 800aa04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa08:	f7ff ff66 	bl	800a8d8 <__hexdig_fun>
 800aa0c:	1e43      	subs	r3, r0, #1
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b18      	cmp	r3, #24
 800aa12:	d91d      	bls.n	800aa50 <__gethex+0x14c>
 800aa14:	f1b9 0f00 	cmp.w	r9, #0
 800aa18:	d000      	beq.n	800aa1c <__gethex+0x118>
 800aa1a:	4252      	negs	r2, r2
 800aa1c:	4415      	add	r5, r2
 800aa1e:	f8cb 1000 	str.w	r1, [fp]
 800aa22:	b1e4      	cbz	r4, 800aa5e <__gethex+0x15a>
 800aa24:	9b00      	ldr	r3, [sp, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	bf14      	ite	ne
 800aa2a:	2700      	movne	r7, #0
 800aa2c:	2706      	moveq	r7, #6
 800aa2e:	4638      	mov	r0, r7
 800aa30:	b009      	add	sp, #36	; 0x24
 800aa32:	ecbd 8b02 	vpop	{d8}
 800aa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3a:	463e      	mov	r6, r7
 800aa3c:	4625      	mov	r5, r4
 800aa3e:	2401      	movs	r4, #1
 800aa40:	e7ca      	b.n	800a9d8 <__gethex+0xd4>
 800aa42:	f04f 0900 	mov.w	r9, #0
 800aa46:	1cb1      	adds	r1, r6, #2
 800aa48:	e7d3      	b.n	800a9f2 <__gethex+0xee>
 800aa4a:	f04f 0901 	mov.w	r9, #1
 800aa4e:	e7fa      	b.n	800aa46 <__gethex+0x142>
 800aa50:	230a      	movs	r3, #10
 800aa52:	fb03 0202 	mla	r2, r3, r2, r0
 800aa56:	3a10      	subs	r2, #16
 800aa58:	e7d4      	b.n	800aa04 <__gethex+0x100>
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	e7df      	b.n	800aa1e <__gethex+0x11a>
 800aa5e:	1bf3      	subs	r3, r6, r7
 800aa60:	3b01      	subs	r3, #1
 800aa62:	4621      	mov	r1, r4
 800aa64:	2b07      	cmp	r3, #7
 800aa66:	dc0b      	bgt.n	800aa80 <__gethex+0x17c>
 800aa68:	ee18 0a10 	vmov	r0, s16
 800aa6c:	f000 fa7e 	bl	800af6c <_Balloc>
 800aa70:	4604      	mov	r4, r0
 800aa72:	b940      	cbnz	r0, 800aa86 <__gethex+0x182>
 800aa74:	4b5d      	ldr	r3, [pc, #372]	; (800abec <__gethex+0x2e8>)
 800aa76:	4602      	mov	r2, r0
 800aa78:	21de      	movs	r1, #222	; 0xde
 800aa7a:	485d      	ldr	r0, [pc, #372]	; (800abf0 <__gethex+0x2ec>)
 800aa7c:	f001 f9c6 	bl	800be0c <__assert_func>
 800aa80:	3101      	adds	r1, #1
 800aa82:	105b      	asrs	r3, r3, #1
 800aa84:	e7ee      	b.n	800aa64 <__gethex+0x160>
 800aa86:	f100 0914 	add.w	r9, r0, #20
 800aa8a:	f04f 0b00 	mov.w	fp, #0
 800aa8e:	f1ca 0301 	rsb	r3, sl, #1
 800aa92:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa96:	f8cd b000 	str.w	fp, [sp]
 800aa9a:	9306      	str	r3, [sp, #24]
 800aa9c:	42b7      	cmp	r7, r6
 800aa9e:	d340      	bcc.n	800ab22 <__gethex+0x21e>
 800aaa0:	9802      	ldr	r0, [sp, #8]
 800aaa2:	9b00      	ldr	r3, [sp, #0]
 800aaa4:	f840 3b04 	str.w	r3, [r0], #4
 800aaa8:	eba0 0009 	sub.w	r0, r0, r9
 800aaac:	1080      	asrs	r0, r0, #2
 800aaae:	0146      	lsls	r6, r0, #5
 800aab0:	6120      	str	r0, [r4, #16]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 fb4c 	bl	800b150 <__hi0bits>
 800aab8:	1a30      	subs	r0, r6, r0
 800aaba:	f8d8 6000 	ldr.w	r6, [r8]
 800aabe:	42b0      	cmp	r0, r6
 800aac0:	dd63      	ble.n	800ab8a <__gethex+0x286>
 800aac2:	1b87      	subs	r7, r0, r6
 800aac4:	4639      	mov	r1, r7
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 fef0 	bl	800b8ac <__any_on>
 800aacc:	4682      	mov	sl, r0
 800aace:	b1a8      	cbz	r0, 800aafc <__gethex+0x1f8>
 800aad0:	1e7b      	subs	r3, r7, #1
 800aad2:	1159      	asrs	r1, r3, #5
 800aad4:	f003 021f 	and.w	r2, r3, #31
 800aad8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aadc:	f04f 0a01 	mov.w	sl, #1
 800aae0:	fa0a f202 	lsl.w	r2, sl, r2
 800aae4:	420a      	tst	r2, r1
 800aae6:	d009      	beq.n	800aafc <__gethex+0x1f8>
 800aae8:	4553      	cmp	r3, sl
 800aaea:	dd05      	ble.n	800aaf8 <__gethex+0x1f4>
 800aaec:	1eb9      	subs	r1, r7, #2
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f000 fedc 	bl	800b8ac <__any_on>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d145      	bne.n	800ab84 <__gethex+0x280>
 800aaf8:	f04f 0a02 	mov.w	sl, #2
 800aafc:	4639      	mov	r1, r7
 800aafe:	4620      	mov	r0, r4
 800ab00:	f7ff fe98 	bl	800a834 <rshift>
 800ab04:	443d      	add	r5, r7
 800ab06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab0a:	42ab      	cmp	r3, r5
 800ab0c:	da4c      	bge.n	800aba8 <__gethex+0x2a4>
 800ab0e:	ee18 0a10 	vmov	r0, s16
 800ab12:	4621      	mov	r1, r4
 800ab14:	f000 fa6a 	bl	800afec <_Bfree>
 800ab18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	6013      	str	r3, [r2, #0]
 800ab1e:	27a3      	movs	r7, #163	; 0xa3
 800ab20:	e785      	b.n	800aa2e <__gethex+0x12a>
 800ab22:	1e73      	subs	r3, r6, #1
 800ab24:	9a05      	ldr	r2, [sp, #20]
 800ab26:	9303      	str	r3, [sp, #12]
 800ab28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d019      	beq.n	800ab64 <__gethex+0x260>
 800ab30:	f1bb 0f20 	cmp.w	fp, #32
 800ab34:	d107      	bne.n	800ab46 <__gethex+0x242>
 800ab36:	9b02      	ldr	r3, [sp, #8]
 800ab38:	9a00      	ldr	r2, [sp, #0]
 800ab3a:	f843 2b04 	str.w	r2, [r3], #4
 800ab3e:	9302      	str	r3, [sp, #8]
 800ab40:	2300      	movs	r3, #0
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	469b      	mov	fp, r3
 800ab46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ab4a:	f7ff fec5 	bl	800a8d8 <__hexdig_fun>
 800ab4e:	9b00      	ldr	r3, [sp, #0]
 800ab50:	f000 000f 	and.w	r0, r0, #15
 800ab54:	fa00 f00b 	lsl.w	r0, r0, fp
 800ab58:	4303      	orrs	r3, r0
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	f10b 0b04 	add.w	fp, fp, #4
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	e00d      	b.n	800ab80 <__gethex+0x27c>
 800ab64:	9b03      	ldr	r3, [sp, #12]
 800ab66:	9a06      	ldr	r2, [sp, #24]
 800ab68:	4413      	add	r3, r2
 800ab6a:	42bb      	cmp	r3, r7
 800ab6c:	d3e0      	bcc.n	800ab30 <__gethex+0x22c>
 800ab6e:	4618      	mov	r0, r3
 800ab70:	9901      	ldr	r1, [sp, #4]
 800ab72:	9307      	str	r3, [sp, #28]
 800ab74:	4652      	mov	r2, sl
 800ab76:	f001 f927 	bl	800bdc8 <strncmp>
 800ab7a:	9b07      	ldr	r3, [sp, #28]
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d1d7      	bne.n	800ab30 <__gethex+0x22c>
 800ab80:	461e      	mov	r6, r3
 800ab82:	e78b      	b.n	800aa9c <__gethex+0x198>
 800ab84:	f04f 0a03 	mov.w	sl, #3
 800ab88:	e7b8      	b.n	800aafc <__gethex+0x1f8>
 800ab8a:	da0a      	bge.n	800aba2 <__gethex+0x29e>
 800ab8c:	1a37      	subs	r7, r6, r0
 800ab8e:	4621      	mov	r1, r4
 800ab90:	ee18 0a10 	vmov	r0, s16
 800ab94:	463a      	mov	r2, r7
 800ab96:	f000 fc45 	bl	800b424 <__lshift>
 800ab9a:	1bed      	subs	r5, r5, r7
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	f100 0914 	add.w	r9, r0, #20
 800aba2:	f04f 0a00 	mov.w	sl, #0
 800aba6:	e7ae      	b.n	800ab06 <__gethex+0x202>
 800aba8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800abac:	42a8      	cmp	r0, r5
 800abae:	dd72      	ble.n	800ac96 <__gethex+0x392>
 800abb0:	1b45      	subs	r5, r0, r5
 800abb2:	42ae      	cmp	r6, r5
 800abb4:	dc36      	bgt.n	800ac24 <__gethex+0x320>
 800abb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d02a      	beq.n	800ac14 <__gethex+0x310>
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	d02c      	beq.n	800ac1c <__gethex+0x318>
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d11c      	bne.n	800ac00 <__gethex+0x2fc>
 800abc6:	42ae      	cmp	r6, r5
 800abc8:	d11a      	bne.n	800ac00 <__gethex+0x2fc>
 800abca:	2e01      	cmp	r6, #1
 800abcc:	d112      	bne.n	800abf4 <__gethex+0x2f0>
 800abce:	9a04      	ldr	r2, [sp, #16]
 800abd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	2301      	movs	r3, #1
 800abd8:	6123      	str	r3, [r4, #16]
 800abda:	f8c9 3000 	str.w	r3, [r9]
 800abde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abe0:	2762      	movs	r7, #98	; 0x62
 800abe2:	601c      	str	r4, [r3, #0]
 800abe4:	e723      	b.n	800aa2e <__gethex+0x12a>
 800abe6:	bf00      	nop
 800abe8:	0800cc80 	.word	0x0800cc80
 800abec:	0800cc08 	.word	0x0800cc08
 800abf0:	0800cc19 	.word	0x0800cc19
 800abf4:	1e71      	subs	r1, r6, #1
 800abf6:	4620      	mov	r0, r4
 800abf8:	f000 fe58 	bl	800b8ac <__any_on>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d1e6      	bne.n	800abce <__gethex+0x2ca>
 800ac00:	ee18 0a10 	vmov	r0, s16
 800ac04:	4621      	mov	r1, r4
 800ac06:	f000 f9f1 	bl	800afec <_Bfree>
 800ac0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	6013      	str	r3, [r2, #0]
 800ac10:	2750      	movs	r7, #80	; 0x50
 800ac12:	e70c      	b.n	800aa2e <__gethex+0x12a>
 800ac14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1f2      	bne.n	800ac00 <__gethex+0x2fc>
 800ac1a:	e7d8      	b.n	800abce <__gethex+0x2ca>
 800ac1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1d5      	bne.n	800abce <__gethex+0x2ca>
 800ac22:	e7ed      	b.n	800ac00 <__gethex+0x2fc>
 800ac24:	1e6f      	subs	r7, r5, #1
 800ac26:	f1ba 0f00 	cmp.w	sl, #0
 800ac2a:	d131      	bne.n	800ac90 <__gethex+0x38c>
 800ac2c:	b127      	cbz	r7, 800ac38 <__gethex+0x334>
 800ac2e:	4639      	mov	r1, r7
 800ac30:	4620      	mov	r0, r4
 800ac32:	f000 fe3b 	bl	800b8ac <__any_on>
 800ac36:	4682      	mov	sl, r0
 800ac38:	117b      	asrs	r3, r7, #5
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ac40:	f007 071f 	and.w	r7, r7, #31
 800ac44:	fa01 f707 	lsl.w	r7, r1, r7
 800ac48:	421f      	tst	r7, r3
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	bf18      	it	ne
 800ac50:	f04a 0a02 	orrne.w	sl, sl, #2
 800ac54:	1b76      	subs	r6, r6, r5
 800ac56:	f7ff fded 	bl	800a834 <rshift>
 800ac5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac5e:	2702      	movs	r7, #2
 800ac60:	f1ba 0f00 	cmp.w	sl, #0
 800ac64:	d048      	beq.n	800acf8 <__gethex+0x3f4>
 800ac66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d015      	beq.n	800ac9a <__gethex+0x396>
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d017      	beq.n	800aca2 <__gethex+0x39e>
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d109      	bne.n	800ac8a <__gethex+0x386>
 800ac76:	f01a 0f02 	tst.w	sl, #2
 800ac7a:	d006      	beq.n	800ac8a <__gethex+0x386>
 800ac7c:	f8d9 0000 	ldr.w	r0, [r9]
 800ac80:	ea4a 0a00 	orr.w	sl, sl, r0
 800ac84:	f01a 0f01 	tst.w	sl, #1
 800ac88:	d10e      	bne.n	800aca8 <__gethex+0x3a4>
 800ac8a:	f047 0710 	orr.w	r7, r7, #16
 800ac8e:	e033      	b.n	800acf8 <__gethex+0x3f4>
 800ac90:	f04f 0a01 	mov.w	sl, #1
 800ac94:	e7d0      	b.n	800ac38 <__gethex+0x334>
 800ac96:	2701      	movs	r7, #1
 800ac98:	e7e2      	b.n	800ac60 <__gethex+0x35c>
 800ac9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac9c:	f1c3 0301 	rsb	r3, r3, #1
 800aca0:	9315      	str	r3, [sp, #84]	; 0x54
 800aca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d0f0      	beq.n	800ac8a <__gethex+0x386>
 800aca8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800acac:	f104 0314 	add.w	r3, r4, #20
 800acb0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800acb4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800acb8:	f04f 0c00 	mov.w	ip, #0
 800acbc:	4618      	mov	r0, r3
 800acbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800acc6:	d01c      	beq.n	800ad02 <__gethex+0x3fe>
 800acc8:	3201      	adds	r2, #1
 800acca:	6002      	str	r2, [r0, #0]
 800accc:	2f02      	cmp	r7, #2
 800acce:	f104 0314 	add.w	r3, r4, #20
 800acd2:	d13f      	bne.n	800ad54 <__gethex+0x450>
 800acd4:	f8d8 2000 	ldr.w	r2, [r8]
 800acd8:	3a01      	subs	r2, #1
 800acda:	42b2      	cmp	r2, r6
 800acdc:	d10a      	bne.n	800acf4 <__gethex+0x3f0>
 800acde:	1171      	asrs	r1, r6, #5
 800ace0:	2201      	movs	r2, #1
 800ace2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ace6:	f006 061f 	and.w	r6, r6, #31
 800acea:	fa02 f606 	lsl.w	r6, r2, r6
 800acee:	421e      	tst	r6, r3
 800acf0:	bf18      	it	ne
 800acf2:	4617      	movne	r7, r2
 800acf4:	f047 0720 	orr.w	r7, r7, #32
 800acf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acfa:	601c      	str	r4, [r3, #0]
 800acfc:	9b04      	ldr	r3, [sp, #16]
 800acfe:	601d      	str	r5, [r3, #0]
 800ad00:	e695      	b.n	800aa2e <__gethex+0x12a>
 800ad02:	4299      	cmp	r1, r3
 800ad04:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad08:	d8d8      	bhi.n	800acbc <__gethex+0x3b8>
 800ad0a:	68a3      	ldr	r3, [r4, #8]
 800ad0c:	459b      	cmp	fp, r3
 800ad0e:	db19      	blt.n	800ad44 <__gethex+0x440>
 800ad10:	6861      	ldr	r1, [r4, #4]
 800ad12:	ee18 0a10 	vmov	r0, s16
 800ad16:	3101      	adds	r1, #1
 800ad18:	f000 f928 	bl	800af6c <_Balloc>
 800ad1c:	4681      	mov	r9, r0
 800ad1e:	b918      	cbnz	r0, 800ad28 <__gethex+0x424>
 800ad20:	4b1a      	ldr	r3, [pc, #104]	; (800ad8c <__gethex+0x488>)
 800ad22:	4602      	mov	r2, r0
 800ad24:	2184      	movs	r1, #132	; 0x84
 800ad26:	e6a8      	b.n	800aa7a <__gethex+0x176>
 800ad28:	6922      	ldr	r2, [r4, #16]
 800ad2a:	3202      	adds	r2, #2
 800ad2c:	f104 010c 	add.w	r1, r4, #12
 800ad30:	0092      	lsls	r2, r2, #2
 800ad32:	300c      	adds	r0, #12
 800ad34:	f000 f90c 	bl	800af50 <memcpy>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	ee18 0a10 	vmov	r0, s16
 800ad3e:	f000 f955 	bl	800afec <_Bfree>
 800ad42:	464c      	mov	r4, r9
 800ad44:	6923      	ldr	r3, [r4, #16]
 800ad46:	1c5a      	adds	r2, r3, #1
 800ad48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad4c:	6122      	str	r2, [r4, #16]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	615a      	str	r2, [r3, #20]
 800ad52:	e7bb      	b.n	800accc <__gethex+0x3c8>
 800ad54:	6922      	ldr	r2, [r4, #16]
 800ad56:	455a      	cmp	r2, fp
 800ad58:	dd0b      	ble.n	800ad72 <__gethex+0x46e>
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f7ff fd69 	bl	800a834 <rshift>
 800ad62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad66:	3501      	adds	r5, #1
 800ad68:	42ab      	cmp	r3, r5
 800ad6a:	f6ff aed0 	blt.w	800ab0e <__gethex+0x20a>
 800ad6e:	2701      	movs	r7, #1
 800ad70:	e7c0      	b.n	800acf4 <__gethex+0x3f0>
 800ad72:	f016 061f 	ands.w	r6, r6, #31
 800ad76:	d0fa      	beq.n	800ad6e <__gethex+0x46a>
 800ad78:	4453      	add	r3, sl
 800ad7a:	f1c6 0620 	rsb	r6, r6, #32
 800ad7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ad82:	f000 f9e5 	bl	800b150 <__hi0bits>
 800ad86:	42b0      	cmp	r0, r6
 800ad88:	dbe7      	blt.n	800ad5a <__gethex+0x456>
 800ad8a:	e7f0      	b.n	800ad6e <__gethex+0x46a>
 800ad8c:	0800cc08 	.word	0x0800cc08

0800ad90 <L_shift>:
 800ad90:	f1c2 0208 	rsb	r2, r2, #8
 800ad94:	0092      	lsls	r2, r2, #2
 800ad96:	b570      	push	{r4, r5, r6, lr}
 800ad98:	f1c2 0620 	rsb	r6, r2, #32
 800ad9c:	6843      	ldr	r3, [r0, #4]
 800ad9e:	6804      	ldr	r4, [r0, #0]
 800ada0:	fa03 f506 	lsl.w	r5, r3, r6
 800ada4:	432c      	orrs	r4, r5
 800ada6:	40d3      	lsrs	r3, r2
 800ada8:	6004      	str	r4, [r0, #0]
 800adaa:	f840 3f04 	str.w	r3, [r0, #4]!
 800adae:	4288      	cmp	r0, r1
 800adb0:	d3f4      	bcc.n	800ad9c <L_shift+0xc>
 800adb2:	bd70      	pop	{r4, r5, r6, pc}

0800adb4 <__match>:
 800adb4:	b530      	push	{r4, r5, lr}
 800adb6:	6803      	ldr	r3, [r0, #0]
 800adb8:	3301      	adds	r3, #1
 800adba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adbe:	b914      	cbnz	r4, 800adc6 <__match+0x12>
 800adc0:	6003      	str	r3, [r0, #0]
 800adc2:	2001      	movs	r0, #1
 800adc4:	bd30      	pop	{r4, r5, pc}
 800adc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800adce:	2d19      	cmp	r5, #25
 800add0:	bf98      	it	ls
 800add2:	3220      	addls	r2, #32
 800add4:	42a2      	cmp	r2, r4
 800add6:	d0f0      	beq.n	800adba <__match+0x6>
 800add8:	2000      	movs	r0, #0
 800adda:	e7f3      	b.n	800adc4 <__match+0x10>

0800addc <__hexnan>:
 800addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade0:	680b      	ldr	r3, [r1, #0]
 800ade2:	115e      	asrs	r6, r3, #5
 800ade4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ade8:	f013 031f 	ands.w	r3, r3, #31
 800adec:	b087      	sub	sp, #28
 800adee:	bf18      	it	ne
 800adf0:	3604      	addne	r6, #4
 800adf2:	2500      	movs	r5, #0
 800adf4:	1f37      	subs	r7, r6, #4
 800adf6:	4690      	mov	r8, r2
 800adf8:	6802      	ldr	r2, [r0, #0]
 800adfa:	9301      	str	r3, [sp, #4]
 800adfc:	4682      	mov	sl, r0
 800adfe:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae02:	46b9      	mov	r9, r7
 800ae04:	463c      	mov	r4, r7
 800ae06:	9502      	str	r5, [sp, #8]
 800ae08:	46ab      	mov	fp, r5
 800ae0a:	7851      	ldrb	r1, [r2, #1]
 800ae0c:	1c53      	adds	r3, r2, #1
 800ae0e:	9303      	str	r3, [sp, #12]
 800ae10:	b341      	cbz	r1, 800ae64 <__hexnan+0x88>
 800ae12:	4608      	mov	r0, r1
 800ae14:	9205      	str	r2, [sp, #20]
 800ae16:	9104      	str	r1, [sp, #16]
 800ae18:	f7ff fd5e 	bl	800a8d8 <__hexdig_fun>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d14f      	bne.n	800aec0 <__hexnan+0xe4>
 800ae20:	9904      	ldr	r1, [sp, #16]
 800ae22:	9a05      	ldr	r2, [sp, #20]
 800ae24:	2920      	cmp	r1, #32
 800ae26:	d818      	bhi.n	800ae5a <__hexnan+0x7e>
 800ae28:	9b02      	ldr	r3, [sp, #8]
 800ae2a:	459b      	cmp	fp, r3
 800ae2c:	dd13      	ble.n	800ae56 <__hexnan+0x7a>
 800ae2e:	454c      	cmp	r4, r9
 800ae30:	d206      	bcs.n	800ae40 <__hexnan+0x64>
 800ae32:	2d07      	cmp	r5, #7
 800ae34:	dc04      	bgt.n	800ae40 <__hexnan+0x64>
 800ae36:	462a      	mov	r2, r5
 800ae38:	4649      	mov	r1, r9
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f7ff ffa8 	bl	800ad90 <L_shift>
 800ae40:	4544      	cmp	r4, r8
 800ae42:	d950      	bls.n	800aee6 <__hexnan+0x10a>
 800ae44:	2300      	movs	r3, #0
 800ae46:	f1a4 0904 	sub.w	r9, r4, #4
 800ae4a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae4e:	f8cd b008 	str.w	fp, [sp, #8]
 800ae52:	464c      	mov	r4, r9
 800ae54:	461d      	mov	r5, r3
 800ae56:	9a03      	ldr	r2, [sp, #12]
 800ae58:	e7d7      	b.n	800ae0a <__hexnan+0x2e>
 800ae5a:	2929      	cmp	r1, #41	; 0x29
 800ae5c:	d156      	bne.n	800af0c <__hexnan+0x130>
 800ae5e:	3202      	adds	r2, #2
 800ae60:	f8ca 2000 	str.w	r2, [sl]
 800ae64:	f1bb 0f00 	cmp.w	fp, #0
 800ae68:	d050      	beq.n	800af0c <__hexnan+0x130>
 800ae6a:	454c      	cmp	r4, r9
 800ae6c:	d206      	bcs.n	800ae7c <__hexnan+0xa0>
 800ae6e:	2d07      	cmp	r5, #7
 800ae70:	dc04      	bgt.n	800ae7c <__hexnan+0xa0>
 800ae72:	462a      	mov	r2, r5
 800ae74:	4649      	mov	r1, r9
 800ae76:	4620      	mov	r0, r4
 800ae78:	f7ff ff8a 	bl	800ad90 <L_shift>
 800ae7c:	4544      	cmp	r4, r8
 800ae7e:	d934      	bls.n	800aeea <__hexnan+0x10e>
 800ae80:	f1a8 0204 	sub.w	r2, r8, #4
 800ae84:	4623      	mov	r3, r4
 800ae86:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae8a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae8e:	429f      	cmp	r7, r3
 800ae90:	d2f9      	bcs.n	800ae86 <__hexnan+0xaa>
 800ae92:	1b3b      	subs	r3, r7, r4
 800ae94:	f023 0303 	bic.w	r3, r3, #3
 800ae98:	3304      	adds	r3, #4
 800ae9a:	3401      	adds	r4, #1
 800ae9c:	3e03      	subs	r6, #3
 800ae9e:	42b4      	cmp	r4, r6
 800aea0:	bf88      	it	hi
 800aea2:	2304      	movhi	r3, #4
 800aea4:	4443      	add	r3, r8
 800aea6:	2200      	movs	r2, #0
 800aea8:	f843 2b04 	str.w	r2, [r3], #4
 800aeac:	429f      	cmp	r7, r3
 800aeae:	d2fb      	bcs.n	800aea8 <__hexnan+0xcc>
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	b91b      	cbnz	r3, 800aebc <__hexnan+0xe0>
 800aeb4:	4547      	cmp	r7, r8
 800aeb6:	d127      	bne.n	800af08 <__hexnan+0x12c>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	603b      	str	r3, [r7, #0]
 800aebc:	2005      	movs	r0, #5
 800aebe:	e026      	b.n	800af0e <__hexnan+0x132>
 800aec0:	3501      	adds	r5, #1
 800aec2:	2d08      	cmp	r5, #8
 800aec4:	f10b 0b01 	add.w	fp, fp, #1
 800aec8:	dd06      	ble.n	800aed8 <__hexnan+0xfc>
 800aeca:	4544      	cmp	r4, r8
 800aecc:	d9c3      	bls.n	800ae56 <__hexnan+0x7a>
 800aece:	2300      	movs	r3, #0
 800aed0:	f844 3c04 	str.w	r3, [r4, #-4]
 800aed4:	2501      	movs	r5, #1
 800aed6:	3c04      	subs	r4, #4
 800aed8:	6822      	ldr	r2, [r4, #0]
 800aeda:	f000 000f 	and.w	r0, r0, #15
 800aede:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aee2:	6022      	str	r2, [r4, #0]
 800aee4:	e7b7      	b.n	800ae56 <__hexnan+0x7a>
 800aee6:	2508      	movs	r5, #8
 800aee8:	e7b5      	b.n	800ae56 <__hexnan+0x7a>
 800aeea:	9b01      	ldr	r3, [sp, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0df      	beq.n	800aeb0 <__hexnan+0xd4>
 800aef0:	f04f 32ff 	mov.w	r2, #4294967295
 800aef4:	f1c3 0320 	rsb	r3, r3, #32
 800aef8:	fa22 f303 	lsr.w	r3, r2, r3
 800aefc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800af00:	401a      	ands	r2, r3
 800af02:	f846 2c04 	str.w	r2, [r6, #-4]
 800af06:	e7d3      	b.n	800aeb0 <__hexnan+0xd4>
 800af08:	3f04      	subs	r7, #4
 800af0a:	e7d1      	b.n	800aeb0 <__hexnan+0xd4>
 800af0c:	2004      	movs	r0, #4
 800af0e:	b007      	add	sp, #28
 800af10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af14 <_localeconv_r>:
 800af14:	4800      	ldr	r0, [pc, #0]	; (800af18 <_localeconv_r+0x4>)
 800af16:	4770      	bx	lr
 800af18:	200001cc 	.word	0x200001cc

0800af1c <malloc>:
 800af1c:	4b02      	ldr	r3, [pc, #8]	; (800af28 <malloc+0xc>)
 800af1e:	4601      	mov	r1, r0
 800af20:	6818      	ldr	r0, [r3, #0]
 800af22:	f000 bd67 	b.w	800b9f4 <_malloc_r>
 800af26:	bf00      	nop
 800af28:	20000074 	.word	0x20000074

0800af2c <__ascii_mbtowc>:
 800af2c:	b082      	sub	sp, #8
 800af2e:	b901      	cbnz	r1, 800af32 <__ascii_mbtowc+0x6>
 800af30:	a901      	add	r1, sp, #4
 800af32:	b142      	cbz	r2, 800af46 <__ascii_mbtowc+0x1a>
 800af34:	b14b      	cbz	r3, 800af4a <__ascii_mbtowc+0x1e>
 800af36:	7813      	ldrb	r3, [r2, #0]
 800af38:	600b      	str	r3, [r1, #0]
 800af3a:	7812      	ldrb	r2, [r2, #0]
 800af3c:	1e10      	subs	r0, r2, #0
 800af3e:	bf18      	it	ne
 800af40:	2001      	movne	r0, #1
 800af42:	b002      	add	sp, #8
 800af44:	4770      	bx	lr
 800af46:	4610      	mov	r0, r2
 800af48:	e7fb      	b.n	800af42 <__ascii_mbtowc+0x16>
 800af4a:	f06f 0001 	mvn.w	r0, #1
 800af4e:	e7f8      	b.n	800af42 <__ascii_mbtowc+0x16>

0800af50 <memcpy>:
 800af50:	440a      	add	r2, r1
 800af52:	4291      	cmp	r1, r2
 800af54:	f100 33ff 	add.w	r3, r0, #4294967295
 800af58:	d100      	bne.n	800af5c <memcpy+0xc>
 800af5a:	4770      	bx	lr
 800af5c:	b510      	push	{r4, lr}
 800af5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af66:	4291      	cmp	r1, r2
 800af68:	d1f9      	bne.n	800af5e <memcpy+0xe>
 800af6a:	bd10      	pop	{r4, pc}

0800af6c <_Balloc>:
 800af6c:	b570      	push	{r4, r5, r6, lr}
 800af6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af70:	4604      	mov	r4, r0
 800af72:	460d      	mov	r5, r1
 800af74:	b976      	cbnz	r6, 800af94 <_Balloc+0x28>
 800af76:	2010      	movs	r0, #16
 800af78:	f7ff ffd0 	bl	800af1c <malloc>
 800af7c:	4602      	mov	r2, r0
 800af7e:	6260      	str	r0, [r4, #36]	; 0x24
 800af80:	b920      	cbnz	r0, 800af8c <_Balloc+0x20>
 800af82:	4b18      	ldr	r3, [pc, #96]	; (800afe4 <_Balloc+0x78>)
 800af84:	4818      	ldr	r0, [pc, #96]	; (800afe8 <_Balloc+0x7c>)
 800af86:	2166      	movs	r1, #102	; 0x66
 800af88:	f000 ff40 	bl	800be0c <__assert_func>
 800af8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af90:	6006      	str	r6, [r0, #0]
 800af92:	60c6      	str	r6, [r0, #12]
 800af94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af96:	68f3      	ldr	r3, [r6, #12]
 800af98:	b183      	cbz	r3, 800afbc <_Balloc+0x50>
 800af9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afa2:	b9b8      	cbnz	r0, 800afd4 <_Balloc+0x68>
 800afa4:	2101      	movs	r1, #1
 800afa6:	fa01 f605 	lsl.w	r6, r1, r5
 800afaa:	1d72      	adds	r2, r6, #5
 800afac:	0092      	lsls	r2, r2, #2
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 fc9d 	bl	800b8ee <_calloc_r>
 800afb4:	b160      	cbz	r0, 800afd0 <_Balloc+0x64>
 800afb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afba:	e00e      	b.n	800afda <_Balloc+0x6e>
 800afbc:	2221      	movs	r2, #33	; 0x21
 800afbe:	2104      	movs	r1, #4
 800afc0:	4620      	mov	r0, r4
 800afc2:	f000 fc94 	bl	800b8ee <_calloc_r>
 800afc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afc8:	60f0      	str	r0, [r6, #12]
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1e4      	bne.n	800af9a <_Balloc+0x2e>
 800afd0:	2000      	movs	r0, #0
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
 800afd4:	6802      	ldr	r2, [r0, #0]
 800afd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afda:	2300      	movs	r3, #0
 800afdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afe0:	e7f7      	b.n	800afd2 <_Balloc+0x66>
 800afe2:	bf00      	nop
 800afe4:	0800cb96 	.word	0x0800cb96
 800afe8:	0800cc94 	.word	0x0800cc94

0800afec <_Bfree>:
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aff0:	4605      	mov	r5, r0
 800aff2:	460c      	mov	r4, r1
 800aff4:	b976      	cbnz	r6, 800b014 <_Bfree+0x28>
 800aff6:	2010      	movs	r0, #16
 800aff8:	f7ff ff90 	bl	800af1c <malloc>
 800affc:	4602      	mov	r2, r0
 800affe:	6268      	str	r0, [r5, #36]	; 0x24
 800b000:	b920      	cbnz	r0, 800b00c <_Bfree+0x20>
 800b002:	4b09      	ldr	r3, [pc, #36]	; (800b028 <_Bfree+0x3c>)
 800b004:	4809      	ldr	r0, [pc, #36]	; (800b02c <_Bfree+0x40>)
 800b006:	218a      	movs	r1, #138	; 0x8a
 800b008:	f000 ff00 	bl	800be0c <__assert_func>
 800b00c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b010:	6006      	str	r6, [r0, #0]
 800b012:	60c6      	str	r6, [r0, #12]
 800b014:	b13c      	cbz	r4, 800b026 <_Bfree+0x3a>
 800b016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b018:	6862      	ldr	r2, [r4, #4]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b020:	6021      	str	r1, [r4, #0]
 800b022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b026:	bd70      	pop	{r4, r5, r6, pc}
 800b028:	0800cb96 	.word	0x0800cb96
 800b02c:	0800cc94 	.word	0x0800cc94

0800b030 <__multadd>:
 800b030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b034:	690d      	ldr	r5, [r1, #16]
 800b036:	4607      	mov	r7, r0
 800b038:	460c      	mov	r4, r1
 800b03a:	461e      	mov	r6, r3
 800b03c:	f101 0c14 	add.w	ip, r1, #20
 800b040:	2000      	movs	r0, #0
 800b042:	f8dc 3000 	ldr.w	r3, [ip]
 800b046:	b299      	uxth	r1, r3
 800b048:	fb02 6101 	mla	r1, r2, r1, r6
 800b04c:	0c1e      	lsrs	r6, r3, #16
 800b04e:	0c0b      	lsrs	r3, r1, #16
 800b050:	fb02 3306 	mla	r3, r2, r6, r3
 800b054:	b289      	uxth	r1, r1
 800b056:	3001      	adds	r0, #1
 800b058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b05c:	4285      	cmp	r5, r0
 800b05e:	f84c 1b04 	str.w	r1, [ip], #4
 800b062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b066:	dcec      	bgt.n	800b042 <__multadd+0x12>
 800b068:	b30e      	cbz	r6, 800b0ae <__multadd+0x7e>
 800b06a:	68a3      	ldr	r3, [r4, #8]
 800b06c:	42ab      	cmp	r3, r5
 800b06e:	dc19      	bgt.n	800b0a4 <__multadd+0x74>
 800b070:	6861      	ldr	r1, [r4, #4]
 800b072:	4638      	mov	r0, r7
 800b074:	3101      	adds	r1, #1
 800b076:	f7ff ff79 	bl	800af6c <_Balloc>
 800b07a:	4680      	mov	r8, r0
 800b07c:	b928      	cbnz	r0, 800b08a <__multadd+0x5a>
 800b07e:	4602      	mov	r2, r0
 800b080:	4b0c      	ldr	r3, [pc, #48]	; (800b0b4 <__multadd+0x84>)
 800b082:	480d      	ldr	r0, [pc, #52]	; (800b0b8 <__multadd+0x88>)
 800b084:	21b5      	movs	r1, #181	; 0xb5
 800b086:	f000 fec1 	bl	800be0c <__assert_func>
 800b08a:	6922      	ldr	r2, [r4, #16]
 800b08c:	3202      	adds	r2, #2
 800b08e:	f104 010c 	add.w	r1, r4, #12
 800b092:	0092      	lsls	r2, r2, #2
 800b094:	300c      	adds	r0, #12
 800b096:	f7ff ff5b 	bl	800af50 <memcpy>
 800b09a:	4621      	mov	r1, r4
 800b09c:	4638      	mov	r0, r7
 800b09e:	f7ff ffa5 	bl	800afec <_Bfree>
 800b0a2:	4644      	mov	r4, r8
 800b0a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0a8:	3501      	adds	r5, #1
 800b0aa:	615e      	str	r6, [r3, #20]
 800b0ac:	6125      	str	r5, [r4, #16]
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b4:	0800cc08 	.word	0x0800cc08
 800b0b8:	0800cc94 	.word	0x0800cc94

0800b0bc <__s2b>:
 800b0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	460c      	mov	r4, r1
 800b0c2:	4615      	mov	r5, r2
 800b0c4:	461f      	mov	r7, r3
 800b0c6:	2209      	movs	r2, #9
 800b0c8:	3308      	adds	r3, #8
 800b0ca:	4606      	mov	r6, r0
 800b0cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	db09      	blt.n	800b0ec <__s2b+0x30>
 800b0d8:	4630      	mov	r0, r6
 800b0da:	f7ff ff47 	bl	800af6c <_Balloc>
 800b0de:	b940      	cbnz	r0, 800b0f2 <__s2b+0x36>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	4b19      	ldr	r3, [pc, #100]	; (800b148 <__s2b+0x8c>)
 800b0e4:	4819      	ldr	r0, [pc, #100]	; (800b14c <__s2b+0x90>)
 800b0e6:	21ce      	movs	r1, #206	; 0xce
 800b0e8:	f000 fe90 	bl	800be0c <__assert_func>
 800b0ec:	0052      	lsls	r2, r2, #1
 800b0ee:	3101      	adds	r1, #1
 800b0f0:	e7f0      	b.n	800b0d4 <__s2b+0x18>
 800b0f2:	9b08      	ldr	r3, [sp, #32]
 800b0f4:	6143      	str	r3, [r0, #20]
 800b0f6:	2d09      	cmp	r5, #9
 800b0f8:	f04f 0301 	mov.w	r3, #1
 800b0fc:	6103      	str	r3, [r0, #16]
 800b0fe:	dd16      	ble.n	800b12e <__s2b+0x72>
 800b100:	f104 0909 	add.w	r9, r4, #9
 800b104:	46c8      	mov	r8, r9
 800b106:	442c      	add	r4, r5
 800b108:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b10c:	4601      	mov	r1, r0
 800b10e:	3b30      	subs	r3, #48	; 0x30
 800b110:	220a      	movs	r2, #10
 800b112:	4630      	mov	r0, r6
 800b114:	f7ff ff8c 	bl	800b030 <__multadd>
 800b118:	45a0      	cmp	r8, r4
 800b11a:	d1f5      	bne.n	800b108 <__s2b+0x4c>
 800b11c:	f1a5 0408 	sub.w	r4, r5, #8
 800b120:	444c      	add	r4, r9
 800b122:	1b2d      	subs	r5, r5, r4
 800b124:	1963      	adds	r3, r4, r5
 800b126:	42bb      	cmp	r3, r7
 800b128:	db04      	blt.n	800b134 <__s2b+0x78>
 800b12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b12e:	340a      	adds	r4, #10
 800b130:	2509      	movs	r5, #9
 800b132:	e7f6      	b.n	800b122 <__s2b+0x66>
 800b134:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b138:	4601      	mov	r1, r0
 800b13a:	3b30      	subs	r3, #48	; 0x30
 800b13c:	220a      	movs	r2, #10
 800b13e:	4630      	mov	r0, r6
 800b140:	f7ff ff76 	bl	800b030 <__multadd>
 800b144:	e7ee      	b.n	800b124 <__s2b+0x68>
 800b146:	bf00      	nop
 800b148:	0800cc08 	.word	0x0800cc08
 800b14c:	0800cc94 	.word	0x0800cc94

0800b150 <__hi0bits>:
 800b150:	0c03      	lsrs	r3, r0, #16
 800b152:	041b      	lsls	r3, r3, #16
 800b154:	b9d3      	cbnz	r3, 800b18c <__hi0bits+0x3c>
 800b156:	0400      	lsls	r0, r0, #16
 800b158:	2310      	movs	r3, #16
 800b15a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b15e:	bf04      	itt	eq
 800b160:	0200      	lsleq	r0, r0, #8
 800b162:	3308      	addeq	r3, #8
 800b164:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b168:	bf04      	itt	eq
 800b16a:	0100      	lsleq	r0, r0, #4
 800b16c:	3304      	addeq	r3, #4
 800b16e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b172:	bf04      	itt	eq
 800b174:	0080      	lsleq	r0, r0, #2
 800b176:	3302      	addeq	r3, #2
 800b178:	2800      	cmp	r0, #0
 800b17a:	db05      	blt.n	800b188 <__hi0bits+0x38>
 800b17c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b180:	f103 0301 	add.w	r3, r3, #1
 800b184:	bf08      	it	eq
 800b186:	2320      	moveq	r3, #32
 800b188:	4618      	mov	r0, r3
 800b18a:	4770      	bx	lr
 800b18c:	2300      	movs	r3, #0
 800b18e:	e7e4      	b.n	800b15a <__hi0bits+0xa>

0800b190 <__lo0bits>:
 800b190:	6803      	ldr	r3, [r0, #0]
 800b192:	f013 0207 	ands.w	r2, r3, #7
 800b196:	4601      	mov	r1, r0
 800b198:	d00b      	beq.n	800b1b2 <__lo0bits+0x22>
 800b19a:	07da      	lsls	r2, r3, #31
 800b19c:	d423      	bmi.n	800b1e6 <__lo0bits+0x56>
 800b19e:	0798      	lsls	r0, r3, #30
 800b1a0:	bf49      	itett	mi
 800b1a2:	085b      	lsrmi	r3, r3, #1
 800b1a4:	089b      	lsrpl	r3, r3, #2
 800b1a6:	2001      	movmi	r0, #1
 800b1a8:	600b      	strmi	r3, [r1, #0]
 800b1aa:	bf5c      	itt	pl
 800b1ac:	600b      	strpl	r3, [r1, #0]
 800b1ae:	2002      	movpl	r0, #2
 800b1b0:	4770      	bx	lr
 800b1b2:	b298      	uxth	r0, r3
 800b1b4:	b9a8      	cbnz	r0, 800b1e2 <__lo0bits+0x52>
 800b1b6:	0c1b      	lsrs	r3, r3, #16
 800b1b8:	2010      	movs	r0, #16
 800b1ba:	b2da      	uxtb	r2, r3
 800b1bc:	b90a      	cbnz	r2, 800b1c2 <__lo0bits+0x32>
 800b1be:	3008      	adds	r0, #8
 800b1c0:	0a1b      	lsrs	r3, r3, #8
 800b1c2:	071a      	lsls	r2, r3, #28
 800b1c4:	bf04      	itt	eq
 800b1c6:	091b      	lsreq	r3, r3, #4
 800b1c8:	3004      	addeq	r0, #4
 800b1ca:	079a      	lsls	r2, r3, #30
 800b1cc:	bf04      	itt	eq
 800b1ce:	089b      	lsreq	r3, r3, #2
 800b1d0:	3002      	addeq	r0, #2
 800b1d2:	07da      	lsls	r2, r3, #31
 800b1d4:	d403      	bmi.n	800b1de <__lo0bits+0x4e>
 800b1d6:	085b      	lsrs	r3, r3, #1
 800b1d8:	f100 0001 	add.w	r0, r0, #1
 800b1dc:	d005      	beq.n	800b1ea <__lo0bits+0x5a>
 800b1de:	600b      	str	r3, [r1, #0]
 800b1e0:	4770      	bx	lr
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	e7e9      	b.n	800b1ba <__lo0bits+0x2a>
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	4770      	bx	lr
 800b1ea:	2020      	movs	r0, #32
 800b1ec:	4770      	bx	lr
	...

0800b1f0 <__i2b>:
 800b1f0:	b510      	push	{r4, lr}
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	f7ff feb9 	bl	800af6c <_Balloc>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	b928      	cbnz	r0, 800b20a <__i2b+0x1a>
 800b1fe:	4b05      	ldr	r3, [pc, #20]	; (800b214 <__i2b+0x24>)
 800b200:	4805      	ldr	r0, [pc, #20]	; (800b218 <__i2b+0x28>)
 800b202:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b206:	f000 fe01 	bl	800be0c <__assert_func>
 800b20a:	2301      	movs	r3, #1
 800b20c:	6144      	str	r4, [r0, #20]
 800b20e:	6103      	str	r3, [r0, #16]
 800b210:	bd10      	pop	{r4, pc}
 800b212:	bf00      	nop
 800b214:	0800cc08 	.word	0x0800cc08
 800b218:	0800cc94 	.word	0x0800cc94

0800b21c <__multiply>:
 800b21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b220:	4691      	mov	r9, r2
 800b222:	690a      	ldr	r2, [r1, #16]
 800b224:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b228:	429a      	cmp	r2, r3
 800b22a:	bfb8      	it	lt
 800b22c:	460b      	movlt	r3, r1
 800b22e:	460c      	mov	r4, r1
 800b230:	bfbc      	itt	lt
 800b232:	464c      	movlt	r4, r9
 800b234:	4699      	movlt	r9, r3
 800b236:	6927      	ldr	r7, [r4, #16]
 800b238:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b23c:	68a3      	ldr	r3, [r4, #8]
 800b23e:	6861      	ldr	r1, [r4, #4]
 800b240:	eb07 060a 	add.w	r6, r7, sl
 800b244:	42b3      	cmp	r3, r6
 800b246:	b085      	sub	sp, #20
 800b248:	bfb8      	it	lt
 800b24a:	3101      	addlt	r1, #1
 800b24c:	f7ff fe8e 	bl	800af6c <_Balloc>
 800b250:	b930      	cbnz	r0, 800b260 <__multiply+0x44>
 800b252:	4602      	mov	r2, r0
 800b254:	4b44      	ldr	r3, [pc, #272]	; (800b368 <__multiply+0x14c>)
 800b256:	4845      	ldr	r0, [pc, #276]	; (800b36c <__multiply+0x150>)
 800b258:	f240 115d 	movw	r1, #349	; 0x15d
 800b25c:	f000 fdd6 	bl	800be0c <__assert_func>
 800b260:	f100 0514 	add.w	r5, r0, #20
 800b264:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b268:	462b      	mov	r3, r5
 800b26a:	2200      	movs	r2, #0
 800b26c:	4543      	cmp	r3, r8
 800b26e:	d321      	bcc.n	800b2b4 <__multiply+0x98>
 800b270:	f104 0314 	add.w	r3, r4, #20
 800b274:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b278:	f109 0314 	add.w	r3, r9, #20
 800b27c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b280:	9202      	str	r2, [sp, #8]
 800b282:	1b3a      	subs	r2, r7, r4
 800b284:	3a15      	subs	r2, #21
 800b286:	f022 0203 	bic.w	r2, r2, #3
 800b28a:	3204      	adds	r2, #4
 800b28c:	f104 0115 	add.w	r1, r4, #21
 800b290:	428f      	cmp	r7, r1
 800b292:	bf38      	it	cc
 800b294:	2204      	movcc	r2, #4
 800b296:	9201      	str	r2, [sp, #4]
 800b298:	9a02      	ldr	r2, [sp, #8]
 800b29a:	9303      	str	r3, [sp, #12]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d80c      	bhi.n	800b2ba <__multiply+0x9e>
 800b2a0:	2e00      	cmp	r6, #0
 800b2a2:	dd03      	ble.n	800b2ac <__multiply+0x90>
 800b2a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d05a      	beq.n	800b362 <__multiply+0x146>
 800b2ac:	6106      	str	r6, [r0, #16]
 800b2ae:	b005      	add	sp, #20
 800b2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b4:	f843 2b04 	str.w	r2, [r3], #4
 800b2b8:	e7d8      	b.n	800b26c <__multiply+0x50>
 800b2ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2be:	f1ba 0f00 	cmp.w	sl, #0
 800b2c2:	d024      	beq.n	800b30e <__multiply+0xf2>
 800b2c4:	f104 0e14 	add.w	lr, r4, #20
 800b2c8:	46a9      	mov	r9, r5
 800b2ca:	f04f 0c00 	mov.w	ip, #0
 800b2ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b2d2:	f8d9 1000 	ldr.w	r1, [r9]
 800b2d6:	fa1f fb82 	uxth.w	fp, r2
 800b2da:	b289      	uxth	r1, r1
 800b2dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800b2e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b2e4:	f8d9 2000 	ldr.w	r2, [r9]
 800b2e8:	4461      	add	r1, ip
 800b2ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800b2f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2f6:	b289      	uxth	r1, r1
 800b2f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2fc:	4577      	cmp	r7, lr
 800b2fe:	f849 1b04 	str.w	r1, [r9], #4
 800b302:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b306:	d8e2      	bhi.n	800b2ce <__multiply+0xb2>
 800b308:	9a01      	ldr	r2, [sp, #4]
 800b30a:	f845 c002 	str.w	ip, [r5, r2]
 800b30e:	9a03      	ldr	r2, [sp, #12]
 800b310:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b314:	3304      	adds	r3, #4
 800b316:	f1b9 0f00 	cmp.w	r9, #0
 800b31a:	d020      	beq.n	800b35e <__multiply+0x142>
 800b31c:	6829      	ldr	r1, [r5, #0]
 800b31e:	f104 0c14 	add.w	ip, r4, #20
 800b322:	46ae      	mov	lr, r5
 800b324:	f04f 0a00 	mov.w	sl, #0
 800b328:	f8bc b000 	ldrh.w	fp, [ip]
 800b32c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b330:	fb09 220b 	mla	r2, r9, fp, r2
 800b334:	4492      	add	sl, r2
 800b336:	b289      	uxth	r1, r1
 800b338:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b33c:	f84e 1b04 	str.w	r1, [lr], #4
 800b340:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b344:	f8be 1000 	ldrh.w	r1, [lr]
 800b348:	0c12      	lsrs	r2, r2, #16
 800b34a:	fb09 1102 	mla	r1, r9, r2, r1
 800b34e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b352:	4567      	cmp	r7, ip
 800b354:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b358:	d8e6      	bhi.n	800b328 <__multiply+0x10c>
 800b35a:	9a01      	ldr	r2, [sp, #4]
 800b35c:	50a9      	str	r1, [r5, r2]
 800b35e:	3504      	adds	r5, #4
 800b360:	e79a      	b.n	800b298 <__multiply+0x7c>
 800b362:	3e01      	subs	r6, #1
 800b364:	e79c      	b.n	800b2a0 <__multiply+0x84>
 800b366:	bf00      	nop
 800b368:	0800cc08 	.word	0x0800cc08
 800b36c:	0800cc94 	.word	0x0800cc94

0800b370 <__pow5mult>:
 800b370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b374:	4615      	mov	r5, r2
 800b376:	f012 0203 	ands.w	r2, r2, #3
 800b37a:	4606      	mov	r6, r0
 800b37c:	460f      	mov	r7, r1
 800b37e:	d007      	beq.n	800b390 <__pow5mult+0x20>
 800b380:	4c25      	ldr	r4, [pc, #148]	; (800b418 <__pow5mult+0xa8>)
 800b382:	3a01      	subs	r2, #1
 800b384:	2300      	movs	r3, #0
 800b386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b38a:	f7ff fe51 	bl	800b030 <__multadd>
 800b38e:	4607      	mov	r7, r0
 800b390:	10ad      	asrs	r5, r5, #2
 800b392:	d03d      	beq.n	800b410 <__pow5mult+0xa0>
 800b394:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b396:	b97c      	cbnz	r4, 800b3b8 <__pow5mult+0x48>
 800b398:	2010      	movs	r0, #16
 800b39a:	f7ff fdbf 	bl	800af1c <malloc>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	6270      	str	r0, [r6, #36]	; 0x24
 800b3a2:	b928      	cbnz	r0, 800b3b0 <__pow5mult+0x40>
 800b3a4:	4b1d      	ldr	r3, [pc, #116]	; (800b41c <__pow5mult+0xac>)
 800b3a6:	481e      	ldr	r0, [pc, #120]	; (800b420 <__pow5mult+0xb0>)
 800b3a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b3ac:	f000 fd2e 	bl	800be0c <__assert_func>
 800b3b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3b4:	6004      	str	r4, [r0, #0]
 800b3b6:	60c4      	str	r4, [r0, #12]
 800b3b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3c0:	b94c      	cbnz	r4, 800b3d6 <__pow5mult+0x66>
 800b3c2:	f240 2171 	movw	r1, #625	; 0x271
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f7ff ff12 	bl	800b1f0 <__i2b>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	6003      	str	r3, [r0, #0]
 800b3d6:	f04f 0900 	mov.w	r9, #0
 800b3da:	07eb      	lsls	r3, r5, #31
 800b3dc:	d50a      	bpl.n	800b3f4 <__pow5mult+0x84>
 800b3de:	4639      	mov	r1, r7
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f7ff ff1a 	bl	800b21c <__multiply>
 800b3e8:	4639      	mov	r1, r7
 800b3ea:	4680      	mov	r8, r0
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	f7ff fdfd 	bl	800afec <_Bfree>
 800b3f2:	4647      	mov	r7, r8
 800b3f4:	106d      	asrs	r5, r5, #1
 800b3f6:	d00b      	beq.n	800b410 <__pow5mult+0xa0>
 800b3f8:	6820      	ldr	r0, [r4, #0]
 800b3fa:	b938      	cbnz	r0, 800b40c <__pow5mult+0x9c>
 800b3fc:	4622      	mov	r2, r4
 800b3fe:	4621      	mov	r1, r4
 800b400:	4630      	mov	r0, r6
 800b402:	f7ff ff0b 	bl	800b21c <__multiply>
 800b406:	6020      	str	r0, [r4, #0]
 800b408:	f8c0 9000 	str.w	r9, [r0]
 800b40c:	4604      	mov	r4, r0
 800b40e:	e7e4      	b.n	800b3da <__pow5mult+0x6a>
 800b410:	4638      	mov	r0, r7
 800b412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b416:	bf00      	nop
 800b418:	0800cde0 	.word	0x0800cde0
 800b41c:	0800cb96 	.word	0x0800cb96
 800b420:	0800cc94 	.word	0x0800cc94

0800b424 <__lshift>:
 800b424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b428:	460c      	mov	r4, r1
 800b42a:	6849      	ldr	r1, [r1, #4]
 800b42c:	6923      	ldr	r3, [r4, #16]
 800b42e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b432:	68a3      	ldr	r3, [r4, #8]
 800b434:	4607      	mov	r7, r0
 800b436:	4691      	mov	r9, r2
 800b438:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b43c:	f108 0601 	add.w	r6, r8, #1
 800b440:	42b3      	cmp	r3, r6
 800b442:	db0b      	blt.n	800b45c <__lshift+0x38>
 800b444:	4638      	mov	r0, r7
 800b446:	f7ff fd91 	bl	800af6c <_Balloc>
 800b44a:	4605      	mov	r5, r0
 800b44c:	b948      	cbnz	r0, 800b462 <__lshift+0x3e>
 800b44e:	4602      	mov	r2, r0
 800b450:	4b2a      	ldr	r3, [pc, #168]	; (800b4fc <__lshift+0xd8>)
 800b452:	482b      	ldr	r0, [pc, #172]	; (800b500 <__lshift+0xdc>)
 800b454:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b458:	f000 fcd8 	bl	800be0c <__assert_func>
 800b45c:	3101      	adds	r1, #1
 800b45e:	005b      	lsls	r3, r3, #1
 800b460:	e7ee      	b.n	800b440 <__lshift+0x1c>
 800b462:	2300      	movs	r3, #0
 800b464:	f100 0114 	add.w	r1, r0, #20
 800b468:	f100 0210 	add.w	r2, r0, #16
 800b46c:	4618      	mov	r0, r3
 800b46e:	4553      	cmp	r3, sl
 800b470:	db37      	blt.n	800b4e2 <__lshift+0xbe>
 800b472:	6920      	ldr	r0, [r4, #16]
 800b474:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b478:	f104 0314 	add.w	r3, r4, #20
 800b47c:	f019 091f 	ands.w	r9, r9, #31
 800b480:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b484:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b488:	d02f      	beq.n	800b4ea <__lshift+0xc6>
 800b48a:	f1c9 0e20 	rsb	lr, r9, #32
 800b48e:	468a      	mov	sl, r1
 800b490:	f04f 0c00 	mov.w	ip, #0
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	fa02 f209 	lsl.w	r2, r2, r9
 800b49a:	ea42 020c 	orr.w	r2, r2, ip
 800b49e:	f84a 2b04 	str.w	r2, [sl], #4
 800b4a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a6:	4298      	cmp	r0, r3
 800b4a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b4ac:	d8f2      	bhi.n	800b494 <__lshift+0x70>
 800b4ae:	1b03      	subs	r3, r0, r4
 800b4b0:	3b15      	subs	r3, #21
 800b4b2:	f023 0303 	bic.w	r3, r3, #3
 800b4b6:	3304      	adds	r3, #4
 800b4b8:	f104 0215 	add.w	r2, r4, #21
 800b4bc:	4290      	cmp	r0, r2
 800b4be:	bf38      	it	cc
 800b4c0:	2304      	movcc	r3, #4
 800b4c2:	f841 c003 	str.w	ip, [r1, r3]
 800b4c6:	f1bc 0f00 	cmp.w	ip, #0
 800b4ca:	d001      	beq.n	800b4d0 <__lshift+0xac>
 800b4cc:	f108 0602 	add.w	r6, r8, #2
 800b4d0:	3e01      	subs	r6, #1
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	612e      	str	r6, [r5, #16]
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	f7ff fd88 	bl	800afec <_Bfree>
 800b4dc:	4628      	mov	r0, r5
 800b4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	e7c1      	b.n	800b46e <__lshift+0x4a>
 800b4ea:	3904      	subs	r1, #4
 800b4ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4f4:	4298      	cmp	r0, r3
 800b4f6:	d8f9      	bhi.n	800b4ec <__lshift+0xc8>
 800b4f8:	e7ea      	b.n	800b4d0 <__lshift+0xac>
 800b4fa:	bf00      	nop
 800b4fc:	0800cc08 	.word	0x0800cc08
 800b500:	0800cc94 	.word	0x0800cc94

0800b504 <__mcmp>:
 800b504:	b530      	push	{r4, r5, lr}
 800b506:	6902      	ldr	r2, [r0, #16]
 800b508:	690c      	ldr	r4, [r1, #16]
 800b50a:	1b12      	subs	r2, r2, r4
 800b50c:	d10e      	bne.n	800b52c <__mcmp+0x28>
 800b50e:	f100 0314 	add.w	r3, r0, #20
 800b512:	3114      	adds	r1, #20
 800b514:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b518:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b51c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b520:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b524:	42a5      	cmp	r5, r4
 800b526:	d003      	beq.n	800b530 <__mcmp+0x2c>
 800b528:	d305      	bcc.n	800b536 <__mcmp+0x32>
 800b52a:	2201      	movs	r2, #1
 800b52c:	4610      	mov	r0, r2
 800b52e:	bd30      	pop	{r4, r5, pc}
 800b530:	4283      	cmp	r3, r0
 800b532:	d3f3      	bcc.n	800b51c <__mcmp+0x18>
 800b534:	e7fa      	b.n	800b52c <__mcmp+0x28>
 800b536:	f04f 32ff 	mov.w	r2, #4294967295
 800b53a:	e7f7      	b.n	800b52c <__mcmp+0x28>

0800b53c <__mdiff>:
 800b53c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b540:	460c      	mov	r4, r1
 800b542:	4606      	mov	r6, r0
 800b544:	4611      	mov	r1, r2
 800b546:	4620      	mov	r0, r4
 800b548:	4690      	mov	r8, r2
 800b54a:	f7ff ffdb 	bl	800b504 <__mcmp>
 800b54e:	1e05      	subs	r5, r0, #0
 800b550:	d110      	bne.n	800b574 <__mdiff+0x38>
 800b552:	4629      	mov	r1, r5
 800b554:	4630      	mov	r0, r6
 800b556:	f7ff fd09 	bl	800af6c <_Balloc>
 800b55a:	b930      	cbnz	r0, 800b56a <__mdiff+0x2e>
 800b55c:	4b3a      	ldr	r3, [pc, #232]	; (800b648 <__mdiff+0x10c>)
 800b55e:	4602      	mov	r2, r0
 800b560:	f240 2132 	movw	r1, #562	; 0x232
 800b564:	4839      	ldr	r0, [pc, #228]	; (800b64c <__mdiff+0x110>)
 800b566:	f000 fc51 	bl	800be0c <__assert_func>
 800b56a:	2301      	movs	r3, #1
 800b56c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	bfa4      	itt	ge
 800b576:	4643      	movge	r3, r8
 800b578:	46a0      	movge	r8, r4
 800b57a:	4630      	mov	r0, r6
 800b57c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b580:	bfa6      	itte	ge
 800b582:	461c      	movge	r4, r3
 800b584:	2500      	movge	r5, #0
 800b586:	2501      	movlt	r5, #1
 800b588:	f7ff fcf0 	bl	800af6c <_Balloc>
 800b58c:	b920      	cbnz	r0, 800b598 <__mdiff+0x5c>
 800b58e:	4b2e      	ldr	r3, [pc, #184]	; (800b648 <__mdiff+0x10c>)
 800b590:	4602      	mov	r2, r0
 800b592:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b596:	e7e5      	b.n	800b564 <__mdiff+0x28>
 800b598:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b59c:	6926      	ldr	r6, [r4, #16]
 800b59e:	60c5      	str	r5, [r0, #12]
 800b5a0:	f104 0914 	add.w	r9, r4, #20
 800b5a4:	f108 0514 	add.w	r5, r8, #20
 800b5a8:	f100 0e14 	add.w	lr, r0, #20
 800b5ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b5b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b5b4:	f108 0210 	add.w	r2, r8, #16
 800b5b8:	46f2      	mov	sl, lr
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b5c4:	fa1f f883 	uxth.w	r8, r3
 800b5c8:	fa11 f18b 	uxtah	r1, r1, fp
 800b5cc:	0c1b      	lsrs	r3, r3, #16
 800b5ce:	eba1 0808 	sub.w	r8, r1, r8
 800b5d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b5da:	fa1f f888 	uxth.w	r8, r8
 800b5de:	1419      	asrs	r1, r3, #16
 800b5e0:	454e      	cmp	r6, r9
 800b5e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b5e6:	f84a 3b04 	str.w	r3, [sl], #4
 800b5ea:	d8e7      	bhi.n	800b5bc <__mdiff+0x80>
 800b5ec:	1b33      	subs	r3, r6, r4
 800b5ee:	3b15      	subs	r3, #21
 800b5f0:	f023 0303 	bic.w	r3, r3, #3
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	3415      	adds	r4, #21
 800b5f8:	42a6      	cmp	r6, r4
 800b5fa:	bf38      	it	cc
 800b5fc:	2304      	movcc	r3, #4
 800b5fe:	441d      	add	r5, r3
 800b600:	4473      	add	r3, lr
 800b602:	469e      	mov	lr, r3
 800b604:	462e      	mov	r6, r5
 800b606:	4566      	cmp	r6, ip
 800b608:	d30e      	bcc.n	800b628 <__mdiff+0xec>
 800b60a:	f10c 0203 	add.w	r2, ip, #3
 800b60e:	1b52      	subs	r2, r2, r5
 800b610:	f022 0203 	bic.w	r2, r2, #3
 800b614:	3d03      	subs	r5, #3
 800b616:	45ac      	cmp	ip, r5
 800b618:	bf38      	it	cc
 800b61a:	2200      	movcc	r2, #0
 800b61c:	441a      	add	r2, r3
 800b61e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b622:	b17b      	cbz	r3, 800b644 <__mdiff+0x108>
 800b624:	6107      	str	r7, [r0, #16]
 800b626:	e7a3      	b.n	800b570 <__mdiff+0x34>
 800b628:	f856 8b04 	ldr.w	r8, [r6], #4
 800b62c:	fa11 f288 	uxtah	r2, r1, r8
 800b630:	1414      	asrs	r4, r2, #16
 800b632:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b636:	b292      	uxth	r2, r2
 800b638:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b63c:	f84e 2b04 	str.w	r2, [lr], #4
 800b640:	1421      	asrs	r1, r4, #16
 800b642:	e7e0      	b.n	800b606 <__mdiff+0xca>
 800b644:	3f01      	subs	r7, #1
 800b646:	e7ea      	b.n	800b61e <__mdiff+0xe2>
 800b648:	0800cc08 	.word	0x0800cc08
 800b64c:	0800cc94 	.word	0x0800cc94

0800b650 <__ulp>:
 800b650:	b082      	sub	sp, #8
 800b652:	ed8d 0b00 	vstr	d0, [sp]
 800b656:	9b01      	ldr	r3, [sp, #4]
 800b658:	4912      	ldr	r1, [pc, #72]	; (800b6a4 <__ulp+0x54>)
 800b65a:	4019      	ands	r1, r3
 800b65c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b660:	2900      	cmp	r1, #0
 800b662:	dd05      	ble.n	800b670 <__ulp+0x20>
 800b664:	2200      	movs	r2, #0
 800b666:	460b      	mov	r3, r1
 800b668:	ec43 2b10 	vmov	d0, r2, r3
 800b66c:	b002      	add	sp, #8
 800b66e:	4770      	bx	lr
 800b670:	4249      	negs	r1, r1
 800b672:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b676:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b67a:	f04f 0200 	mov.w	r2, #0
 800b67e:	f04f 0300 	mov.w	r3, #0
 800b682:	da04      	bge.n	800b68e <__ulp+0x3e>
 800b684:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b688:	fa41 f300 	asr.w	r3, r1, r0
 800b68c:	e7ec      	b.n	800b668 <__ulp+0x18>
 800b68e:	f1a0 0114 	sub.w	r1, r0, #20
 800b692:	291e      	cmp	r1, #30
 800b694:	bfda      	itte	le
 800b696:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b69a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b69e:	2101      	movgt	r1, #1
 800b6a0:	460a      	mov	r2, r1
 800b6a2:	e7e1      	b.n	800b668 <__ulp+0x18>
 800b6a4:	7ff00000 	.word	0x7ff00000

0800b6a8 <__b2d>:
 800b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6aa:	6905      	ldr	r5, [r0, #16]
 800b6ac:	f100 0714 	add.w	r7, r0, #20
 800b6b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b6b4:	1f2e      	subs	r6, r5, #4
 800b6b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f7ff fd48 	bl	800b150 <__hi0bits>
 800b6c0:	f1c0 0320 	rsb	r3, r0, #32
 800b6c4:	280a      	cmp	r0, #10
 800b6c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b744 <__b2d+0x9c>
 800b6ca:	600b      	str	r3, [r1, #0]
 800b6cc:	dc14      	bgt.n	800b6f8 <__b2d+0x50>
 800b6ce:	f1c0 0e0b 	rsb	lr, r0, #11
 800b6d2:	fa24 f10e 	lsr.w	r1, r4, lr
 800b6d6:	42b7      	cmp	r7, r6
 800b6d8:	ea41 030c 	orr.w	r3, r1, ip
 800b6dc:	bf34      	ite	cc
 800b6de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b6e2:	2100      	movcs	r1, #0
 800b6e4:	3015      	adds	r0, #21
 800b6e6:	fa04 f000 	lsl.w	r0, r4, r0
 800b6ea:	fa21 f10e 	lsr.w	r1, r1, lr
 800b6ee:	ea40 0201 	orr.w	r2, r0, r1
 800b6f2:	ec43 2b10 	vmov	d0, r2, r3
 800b6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6f8:	42b7      	cmp	r7, r6
 800b6fa:	bf3a      	itte	cc
 800b6fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b700:	f1a5 0608 	subcc.w	r6, r5, #8
 800b704:	2100      	movcs	r1, #0
 800b706:	380b      	subs	r0, #11
 800b708:	d017      	beq.n	800b73a <__b2d+0x92>
 800b70a:	f1c0 0c20 	rsb	ip, r0, #32
 800b70e:	fa04 f500 	lsl.w	r5, r4, r0
 800b712:	42be      	cmp	r6, r7
 800b714:	fa21 f40c 	lsr.w	r4, r1, ip
 800b718:	ea45 0504 	orr.w	r5, r5, r4
 800b71c:	bf8c      	ite	hi
 800b71e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b722:	2400      	movls	r4, #0
 800b724:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b728:	fa01 f000 	lsl.w	r0, r1, r0
 800b72c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b730:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b734:	ea40 0204 	orr.w	r2, r0, r4
 800b738:	e7db      	b.n	800b6f2 <__b2d+0x4a>
 800b73a:	ea44 030c 	orr.w	r3, r4, ip
 800b73e:	460a      	mov	r2, r1
 800b740:	e7d7      	b.n	800b6f2 <__b2d+0x4a>
 800b742:	bf00      	nop
 800b744:	3ff00000 	.word	0x3ff00000

0800b748 <__d2b>:
 800b748:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b74c:	4689      	mov	r9, r1
 800b74e:	2101      	movs	r1, #1
 800b750:	ec57 6b10 	vmov	r6, r7, d0
 800b754:	4690      	mov	r8, r2
 800b756:	f7ff fc09 	bl	800af6c <_Balloc>
 800b75a:	4604      	mov	r4, r0
 800b75c:	b930      	cbnz	r0, 800b76c <__d2b+0x24>
 800b75e:	4602      	mov	r2, r0
 800b760:	4b25      	ldr	r3, [pc, #148]	; (800b7f8 <__d2b+0xb0>)
 800b762:	4826      	ldr	r0, [pc, #152]	; (800b7fc <__d2b+0xb4>)
 800b764:	f240 310a 	movw	r1, #778	; 0x30a
 800b768:	f000 fb50 	bl	800be0c <__assert_func>
 800b76c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b770:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b774:	bb35      	cbnz	r5, 800b7c4 <__d2b+0x7c>
 800b776:	2e00      	cmp	r6, #0
 800b778:	9301      	str	r3, [sp, #4]
 800b77a:	d028      	beq.n	800b7ce <__d2b+0x86>
 800b77c:	4668      	mov	r0, sp
 800b77e:	9600      	str	r6, [sp, #0]
 800b780:	f7ff fd06 	bl	800b190 <__lo0bits>
 800b784:	9900      	ldr	r1, [sp, #0]
 800b786:	b300      	cbz	r0, 800b7ca <__d2b+0x82>
 800b788:	9a01      	ldr	r2, [sp, #4]
 800b78a:	f1c0 0320 	rsb	r3, r0, #32
 800b78e:	fa02 f303 	lsl.w	r3, r2, r3
 800b792:	430b      	orrs	r3, r1
 800b794:	40c2      	lsrs	r2, r0
 800b796:	6163      	str	r3, [r4, #20]
 800b798:	9201      	str	r2, [sp, #4]
 800b79a:	9b01      	ldr	r3, [sp, #4]
 800b79c:	61a3      	str	r3, [r4, #24]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	bf14      	ite	ne
 800b7a2:	2202      	movne	r2, #2
 800b7a4:	2201      	moveq	r2, #1
 800b7a6:	6122      	str	r2, [r4, #16]
 800b7a8:	b1d5      	cbz	r5, 800b7e0 <__d2b+0x98>
 800b7aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7ae:	4405      	add	r5, r0
 800b7b0:	f8c9 5000 	str.w	r5, [r9]
 800b7b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7b8:	f8c8 0000 	str.w	r0, [r8]
 800b7bc:	4620      	mov	r0, r4
 800b7be:	b003      	add	sp, #12
 800b7c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7c8:	e7d5      	b.n	800b776 <__d2b+0x2e>
 800b7ca:	6161      	str	r1, [r4, #20]
 800b7cc:	e7e5      	b.n	800b79a <__d2b+0x52>
 800b7ce:	a801      	add	r0, sp, #4
 800b7d0:	f7ff fcde 	bl	800b190 <__lo0bits>
 800b7d4:	9b01      	ldr	r3, [sp, #4]
 800b7d6:	6163      	str	r3, [r4, #20]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	6122      	str	r2, [r4, #16]
 800b7dc:	3020      	adds	r0, #32
 800b7de:	e7e3      	b.n	800b7a8 <__d2b+0x60>
 800b7e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7e8:	f8c9 0000 	str.w	r0, [r9]
 800b7ec:	6918      	ldr	r0, [r3, #16]
 800b7ee:	f7ff fcaf 	bl	800b150 <__hi0bits>
 800b7f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7f6:	e7df      	b.n	800b7b8 <__d2b+0x70>
 800b7f8:	0800cc08 	.word	0x0800cc08
 800b7fc:	0800cc94 	.word	0x0800cc94

0800b800 <__ratio>:
 800b800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	4688      	mov	r8, r1
 800b806:	4669      	mov	r1, sp
 800b808:	4681      	mov	r9, r0
 800b80a:	f7ff ff4d 	bl	800b6a8 <__b2d>
 800b80e:	a901      	add	r1, sp, #4
 800b810:	4640      	mov	r0, r8
 800b812:	ec55 4b10 	vmov	r4, r5, d0
 800b816:	f7ff ff47 	bl	800b6a8 <__b2d>
 800b81a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b81e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b822:	eba3 0c02 	sub.w	ip, r3, r2
 800b826:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b82a:	1a9b      	subs	r3, r3, r2
 800b82c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b830:	ec51 0b10 	vmov	r0, r1, d0
 800b834:	2b00      	cmp	r3, #0
 800b836:	bfd6      	itet	le
 800b838:	460a      	movle	r2, r1
 800b83a:	462a      	movgt	r2, r5
 800b83c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b840:	468b      	mov	fp, r1
 800b842:	462f      	mov	r7, r5
 800b844:	bfd4      	ite	le
 800b846:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b84a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b84e:	4620      	mov	r0, r4
 800b850:	ee10 2a10 	vmov	r2, s0
 800b854:	465b      	mov	r3, fp
 800b856:	4639      	mov	r1, r7
 800b858:	f7f4 fff8 	bl	800084c <__aeabi_ddiv>
 800b85c:	ec41 0b10 	vmov	d0, r0, r1
 800b860:	b003      	add	sp, #12
 800b862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b866 <__copybits>:
 800b866:	3901      	subs	r1, #1
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	1149      	asrs	r1, r1, #5
 800b86c:	6914      	ldr	r4, [r2, #16]
 800b86e:	3101      	adds	r1, #1
 800b870:	f102 0314 	add.w	r3, r2, #20
 800b874:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b878:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b87c:	1f05      	subs	r5, r0, #4
 800b87e:	42a3      	cmp	r3, r4
 800b880:	d30c      	bcc.n	800b89c <__copybits+0x36>
 800b882:	1aa3      	subs	r3, r4, r2
 800b884:	3b11      	subs	r3, #17
 800b886:	f023 0303 	bic.w	r3, r3, #3
 800b88a:	3211      	adds	r2, #17
 800b88c:	42a2      	cmp	r2, r4
 800b88e:	bf88      	it	hi
 800b890:	2300      	movhi	r3, #0
 800b892:	4418      	add	r0, r3
 800b894:	2300      	movs	r3, #0
 800b896:	4288      	cmp	r0, r1
 800b898:	d305      	bcc.n	800b8a6 <__copybits+0x40>
 800b89a:	bd70      	pop	{r4, r5, r6, pc}
 800b89c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b8a0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b8a4:	e7eb      	b.n	800b87e <__copybits+0x18>
 800b8a6:	f840 3b04 	str.w	r3, [r0], #4
 800b8aa:	e7f4      	b.n	800b896 <__copybits+0x30>

0800b8ac <__any_on>:
 800b8ac:	f100 0214 	add.w	r2, r0, #20
 800b8b0:	6900      	ldr	r0, [r0, #16]
 800b8b2:	114b      	asrs	r3, r1, #5
 800b8b4:	4298      	cmp	r0, r3
 800b8b6:	b510      	push	{r4, lr}
 800b8b8:	db11      	blt.n	800b8de <__any_on+0x32>
 800b8ba:	dd0a      	ble.n	800b8d2 <__any_on+0x26>
 800b8bc:	f011 011f 	ands.w	r1, r1, #31
 800b8c0:	d007      	beq.n	800b8d2 <__any_on+0x26>
 800b8c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b8c6:	fa24 f001 	lsr.w	r0, r4, r1
 800b8ca:	fa00 f101 	lsl.w	r1, r0, r1
 800b8ce:	428c      	cmp	r4, r1
 800b8d0:	d10b      	bne.n	800b8ea <__any_on+0x3e>
 800b8d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d803      	bhi.n	800b8e2 <__any_on+0x36>
 800b8da:	2000      	movs	r0, #0
 800b8dc:	bd10      	pop	{r4, pc}
 800b8de:	4603      	mov	r3, r0
 800b8e0:	e7f7      	b.n	800b8d2 <__any_on+0x26>
 800b8e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8e6:	2900      	cmp	r1, #0
 800b8e8:	d0f5      	beq.n	800b8d6 <__any_on+0x2a>
 800b8ea:	2001      	movs	r0, #1
 800b8ec:	e7f6      	b.n	800b8dc <__any_on+0x30>

0800b8ee <_calloc_r>:
 800b8ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8f0:	fba1 2402 	umull	r2, r4, r1, r2
 800b8f4:	b94c      	cbnz	r4, 800b90a <_calloc_r+0x1c>
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	9201      	str	r2, [sp, #4]
 800b8fa:	f000 f87b 	bl	800b9f4 <_malloc_r>
 800b8fe:	9a01      	ldr	r2, [sp, #4]
 800b900:	4605      	mov	r5, r0
 800b902:	b930      	cbnz	r0, 800b912 <_calloc_r+0x24>
 800b904:	4628      	mov	r0, r5
 800b906:	b003      	add	sp, #12
 800b908:	bd30      	pop	{r4, r5, pc}
 800b90a:	220c      	movs	r2, #12
 800b90c:	6002      	str	r2, [r0, #0]
 800b90e:	2500      	movs	r5, #0
 800b910:	e7f8      	b.n	800b904 <_calloc_r+0x16>
 800b912:	4621      	mov	r1, r4
 800b914:	f7fc fbbe 	bl	8008094 <memset>
 800b918:	e7f4      	b.n	800b904 <_calloc_r+0x16>
	...

0800b91c <_free_r>:
 800b91c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b91e:	2900      	cmp	r1, #0
 800b920:	d044      	beq.n	800b9ac <_free_r+0x90>
 800b922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b926:	9001      	str	r0, [sp, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f1a1 0404 	sub.w	r4, r1, #4
 800b92e:	bfb8      	it	lt
 800b930:	18e4      	addlt	r4, r4, r3
 800b932:	f000 fab5 	bl	800bea0 <__malloc_lock>
 800b936:	4a1e      	ldr	r2, [pc, #120]	; (800b9b0 <_free_r+0x94>)
 800b938:	9801      	ldr	r0, [sp, #4]
 800b93a:	6813      	ldr	r3, [r2, #0]
 800b93c:	b933      	cbnz	r3, 800b94c <_free_r+0x30>
 800b93e:	6063      	str	r3, [r4, #4]
 800b940:	6014      	str	r4, [r2, #0]
 800b942:	b003      	add	sp, #12
 800b944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b948:	f000 bab0 	b.w	800beac <__malloc_unlock>
 800b94c:	42a3      	cmp	r3, r4
 800b94e:	d908      	bls.n	800b962 <_free_r+0x46>
 800b950:	6825      	ldr	r5, [r4, #0]
 800b952:	1961      	adds	r1, r4, r5
 800b954:	428b      	cmp	r3, r1
 800b956:	bf01      	itttt	eq
 800b958:	6819      	ldreq	r1, [r3, #0]
 800b95a:	685b      	ldreq	r3, [r3, #4]
 800b95c:	1949      	addeq	r1, r1, r5
 800b95e:	6021      	streq	r1, [r4, #0]
 800b960:	e7ed      	b.n	800b93e <_free_r+0x22>
 800b962:	461a      	mov	r2, r3
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	b10b      	cbz	r3, 800b96c <_free_r+0x50>
 800b968:	42a3      	cmp	r3, r4
 800b96a:	d9fa      	bls.n	800b962 <_free_r+0x46>
 800b96c:	6811      	ldr	r1, [r2, #0]
 800b96e:	1855      	adds	r5, r2, r1
 800b970:	42a5      	cmp	r5, r4
 800b972:	d10b      	bne.n	800b98c <_free_r+0x70>
 800b974:	6824      	ldr	r4, [r4, #0]
 800b976:	4421      	add	r1, r4
 800b978:	1854      	adds	r4, r2, r1
 800b97a:	42a3      	cmp	r3, r4
 800b97c:	6011      	str	r1, [r2, #0]
 800b97e:	d1e0      	bne.n	800b942 <_free_r+0x26>
 800b980:	681c      	ldr	r4, [r3, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	6053      	str	r3, [r2, #4]
 800b986:	4421      	add	r1, r4
 800b988:	6011      	str	r1, [r2, #0]
 800b98a:	e7da      	b.n	800b942 <_free_r+0x26>
 800b98c:	d902      	bls.n	800b994 <_free_r+0x78>
 800b98e:	230c      	movs	r3, #12
 800b990:	6003      	str	r3, [r0, #0]
 800b992:	e7d6      	b.n	800b942 <_free_r+0x26>
 800b994:	6825      	ldr	r5, [r4, #0]
 800b996:	1961      	adds	r1, r4, r5
 800b998:	428b      	cmp	r3, r1
 800b99a:	bf04      	itt	eq
 800b99c:	6819      	ldreq	r1, [r3, #0]
 800b99e:	685b      	ldreq	r3, [r3, #4]
 800b9a0:	6063      	str	r3, [r4, #4]
 800b9a2:	bf04      	itt	eq
 800b9a4:	1949      	addeq	r1, r1, r5
 800b9a6:	6021      	streq	r1, [r4, #0]
 800b9a8:	6054      	str	r4, [r2, #4]
 800b9aa:	e7ca      	b.n	800b942 <_free_r+0x26>
 800b9ac:	b003      	add	sp, #12
 800b9ae:	bd30      	pop	{r4, r5, pc}
 800b9b0:	2000078c 	.word	0x2000078c

0800b9b4 <sbrk_aligned>:
 800b9b4:	b570      	push	{r4, r5, r6, lr}
 800b9b6:	4e0e      	ldr	r6, [pc, #56]	; (800b9f0 <sbrk_aligned+0x3c>)
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	6831      	ldr	r1, [r6, #0]
 800b9bc:	4605      	mov	r5, r0
 800b9be:	b911      	cbnz	r1, 800b9c6 <sbrk_aligned+0x12>
 800b9c0:	f000 f9f2 	bl	800bda8 <_sbrk_r>
 800b9c4:	6030      	str	r0, [r6, #0]
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	f000 f9ed 	bl	800bda8 <_sbrk_r>
 800b9ce:	1c43      	adds	r3, r0, #1
 800b9d0:	d00a      	beq.n	800b9e8 <sbrk_aligned+0x34>
 800b9d2:	1cc4      	adds	r4, r0, #3
 800b9d4:	f024 0403 	bic.w	r4, r4, #3
 800b9d8:	42a0      	cmp	r0, r4
 800b9da:	d007      	beq.n	800b9ec <sbrk_aligned+0x38>
 800b9dc:	1a21      	subs	r1, r4, r0
 800b9de:	4628      	mov	r0, r5
 800b9e0:	f000 f9e2 	bl	800bda8 <_sbrk_r>
 800b9e4:	3001      	adds	r0, #1
 800b9e6:	d101      	bne.n	800b9ec <sbrk_aligned+0x38>
 800b9e8:	f04f 34ff 	mov.w	r4, #4294967295
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	bd70      	pop	{r4, r5, r6, pc}
 800b9f0:	20000790 	.word	0x20000790

0800b9f4 <_malloc_r>:
 800b9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f8:	1ccd      	adds	r5, r1, #3
 800b9fa:	f025 0503 	bic.w	r5, r5, #3
 800b9fe:	3508      	adds	r5, #8
 800ba00:	2d0c      	cmp	r5, #12
 800ba02:	bf38      	it	cc
 800ba04:	250c      	movcc	r5, #12
 800ba06:	2d00      	cmp	r5, #0
 800ba08:	4607      	mov	r7, r0
 800ba0a:	db01      	blt.n	800ba10 <_malloc_r+0x1c>
 800ba0c:	42a9      	cmp	r1, r5
 800ba0e:	d905      	bls.n	800ba1c <_malloc_r+0x28>
 800ba10:	230c      	movs	r3, #12
 800ba12:	603b      	str	r3, [r7, #0]
 800ba14:	2600      	movs	r6, #0
 800ba16:	4630      	mov	r0, r6
 800ba18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1c:	4e2e      	ldr	r6, [pc, #184]	; (800bad8 <_malloc_r+0xe4>)
 800ba1e:	f000 fa3f 	bl	800bea0 <__malloc_lock>
 800ba22:	6833      	ldr	r3, [r6, #0]
 800ba24:	461c      	mov	r4, r3
 800ba26:	bb34      	cbnz	r4, 800ba76 <_malloc_r+0x82>
 800ba28:	4629      	mov	r1, r5
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	f7ff ffc2 	bl	800b9b4 <sbrk_aligned>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	4604      	mov	r4, r0
 800ba34:	d14d      	bne.n	800bad2 <_malloc_r+0xde>
 800ba36:	6834      	ldr	r4, [r6, #0]
 800ba38:	4626      	mov	r6, r4
 800ba3a:	2e00      	cmp	r6, #0
 800ba3c:	d140      	bne.n	800bac0 <_malloc_r+0xcc>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	4631      	mov	r1, r6
 800ba42:	4638      	mov	r0, r7
 800ba44:	eb04 0803 	add.w	r8, r4, r3
 800ba48:	f000 f9ae 	bl	800bda8 <_sbrk_r>
 800ba4c:	4580      	cmp	r8, r0
 800ba4e:	d13a      	bne.n	800bac6 <_malloc_r+0xd2>
 800ba50:	6821      	ldr	r1, [r4, #0]
 800ba52:	3503      	adds	r5, #3
 800ba54:	1a6d      	subs	r5, r5, r1
 800ba56:	f025 0503 	bic.w	r5, r5, #3
 800ba5a:	3508      	adds	r5, #8
 800ba5c:	2d0c      	cmp	r5, #12
 800ba5e:	bf38      	it	cc
 800ba60:	250c      	movcc	r5, #12
 800ba62:	4629      	mov	r1, r5
 800ba64:	4638      	mov	r0, r7
 800ba66:	f7ff ffa5 	bl	800b9b4 <sbrk_aligned>
 800ba6a:	3001      	adds	r0, #1
 800ba6c:	d02b      	beq.n	800bac6 <_malloc_r+0xd2>
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	442b      	add	r3, r5
 800ba72:	6023      	str	r3, [r4, #0]
 800ba74:	e00e      	b.n	800ba94 <_malloc_r+0xa0>
 800ba76:	6822      	ldr	r2, [r4, #0]
 800ba78:	1b52      	subs	r2, r2, r5
 800ba7a:	d41e      	bmi.n	800baba <_malloc_r+0xc6>
 800ba7c:	2a0b      	cmp	r2, #11
 800ba7e:	d916      	bls.n	800baae <_malloc_r+0xba>
 800ba80:	1961      	adds	r1, r4, r5
 800ba82:	42a3      	cmp	r3, r4
 800ba84:	6025      	str	r5, [r4, #0]
 800ba86:	bf18      	it	ne
 800ba88:	6059      	strne	r1, [r3, #4]
 800ba8a:	6863      	ldr	r3, [r4, #4]
 800ba8c:	bf08      	it	eq
 800ba8e:	6031      	streq	r1, [r6, #0]
 800ba90:	5162      	str	r2, [r4, r5]
 800ba92:	604b      	str	r3, [r1, #4]
 800ba94:	4638      	mov	r0, r7
 800ba96:	f104 060b 	add.w	r6, r4, #11
 800ba9a:	f000 fa07 	bl	800beac <__malloc_unlock>
 800ba9e:	f026 0607 	bic.w	r6, r6, #7
 800baa2:	1d23      	adds	r3, r4, #4
 800baa4:	1af2      	subs	r2, r6, r3
 800baa6:	d0b6      	beq.n	800ba16 <_malloc_r+0x22>
 800baa8:	1b9b      	subs	r3, r3, r6
 800baaa:	50a3      	str	r3, [r4, r2]
 800baac:	e7b3      	b.n	800ba16 <_malloc_r+0x22>
 800baae:	6862      	ldr	r2, [r4, #4]
 800bab0:	42a3      	cmp	r3, r4
 800bab2:	bf0c      	ite	eq
 800bab4:	6032      	streq	r2, [r6, #0]
 800bab6:	605a      	strne	r2, [r3, #4]
 800bab8:	e7ec      	b.n	800ba94 <_malloc_r+0xa0>
 800baba:	4623      	mov	r3, r4
 800babc:	6864      	ldr	r4, [r4, #4]
 800babe:	e7b2      	b.n	800ba26 <_malloc_r+0x32>
 800bac0:	4634      	mov	r4, r6
 800bac2:	6876      	ldr	r6, [r6, #4]
 800bac4:	e7b9      	b.n	800ba3a <_malloc_r+0x46>
 800bac6:	230c      	movs	r3, #12
 800bac8:	603b      	str	r3, [r7, #0]
 800baca:	4638      	mov	r0, r7
 800bacc:	f000 f9ee 	bl	800beac <__malloc_unlock>
 800bad0:	e7a1      	b.n	800ba16 <_malloc_r+0x22>
 800bad2:	6025      	str	r5, [r4, #0]
 800bad4:	e7de      	b.n	800ba94 <_malloc_r+0xa0>
 800bad6:	bf00      	nop
 800bad8:	2000078c 	.word	0x2000078c

0800badc <__ssputs_r>:
 800badc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae0:	688e      	ldr	r6, [r1, #8]
 800bae2:	429e      	cmp	r6, r3
 800bae4:	4682      	mov	sl, r0
 800bae6:	460c      	mov	r4, r1
 800bae8:	4690      	mov	r8, r2
 800baea:	461f      	mov	r7, r3
 800baec:	d838      	bhi.n	800bb60 <__ssputs_r+0x84>
 800baee:	898a      	ldrh	r2, [r1, #12]
 800baf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baf4:	d032      	beq.n	800bb5c <__ssputs_r+0x80>
 800baf6:	6825      	ldr	r5, [r4, #0]
 800baf8:	6909      	ldr	r1, [r1, #16]
 800bafa:	eba5 0901 	sub.w	r9, r5, r1
 800bafe:	6965      	ldr	r5, [r4, #20]
 800bb00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb08:	3301      	adds	r3, #1
 800bb0a:	444b      	add	r3, r9
 800bb0c:	106d      	asrs	r5, r5, #1
 800bb0e:	429d      	cmp	r5, r3
 800bb10:	bf38      	it	cc
 800bb12:	461d      	movcc	r5, r3
 800bb14:	0553      	lsls	r3, r2, #21
 800bb16:	d531      	bpl.n	800bb7c <__ssputs_r+0xa0>
 800bb18:	4629      	mov	r1, r5
 800bb1a:	f7ff ff6b 	bl	800b9f4 <_malloc_r>
 800bb1e:	4606      	mov	r6, r0
 800bb20:	b950      	cbnz	r0, 800bb38 <__ssputs_r+0x5c>
 800bb22:	230c      	movs	r3, #12
 800bb24:	f8ca 3000 	str.w	r3, [sl]
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb2e:	81a3      	strh	r3, [r4, #12]
 800bb30:	f04f 30ff 	mov.w	r0, #4294967295
 800bb34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb38:	6921      	ldr	r1, [r4, #16]
 800bb3a:	464a      	mov	r2, r9
 800bb3c:	f7ff fa08 	bl	800af50 <memcpy>
 800bb40:	89a3      	ldrh	r3, [r4, #12]
 800bb42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb4a:	81a3      	strh	r3, [r4, #12]
 800bb4c:	6126      	str	r6, [r4, #16]
 800bb4e:	6165      	str	r5, [r4, #20]
 800bb50:	444e      	add	r6, r9
 800bb52:	eba5 0509 	sub.w	r5, r5, r9
 800bb56:	6026      	str	r6, [r4, #0]
 800bb58:	60a5      	str	r5, [r4, #8]
 800bb5a:	463e      	mov	r6, r7
 800bb5c:	42be      	cmp	r6, r7
 800bb5e:	d900      	bls.n	800bb62 <__ssputs_r+0x86>
 800bb60:	463e      	mov	r6, r7
 800bb62:	6820      	ldr	r0, [r4, #0]
 800bb64:	4632      	mov	r2, r6
 800bb66:	4641      	mov	r1, r8
 800bb68:	f000 f980 	bl	800be6c <memmove>
 800bb6c:	68a3      	ldr	r3, [r4, #8]
 800bb6e:	1b9b      	subs	r3, r3, r6
 800bb70:	60a3      	str	r3, [r4, #8]
 800bb72:	6823      	ldr	r3, [r4, #0]
 800bb74:	4433      	add	r3, r6
 800bb76:	6023      	str	r3, [r4, #0]
 800bb78:	2000      	movs	r0, #0
 800bb7a:	e7db      	b.n	800bb34 <__ssputs_r+0x58>
 800bb7c:	462a      	mov	r2, r5
 800bb7e:	f000 f99b 	bl	800beb8 <_realloc_r>
 800bb82:	4606      	mov	r6, r0
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d1e1      	bne.n	800bb4c <__ssputs_r+0x70>
 800bb88:	6921      	ldr	r1, [r4, #16]
 800bb8a:	4650      	mov	r0, sl
 800bb8c:	f7ff fec6 	bl	800b91c <_free_r>
 800bb90:	e7c7      	b.n	800bb22 <__ssputs_r+0x46>
	...

0800bb94 <_svfiprintf_r>:
 800bb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb98:	4698      	mov	r8, r3
 800bb9a:	898b      	ldrh	r3, [r1, #12]
 800bb9c:	061b      	lsls	r3, r3, #24
 800bb9e:	b09d      	sub	sp, #116	; 0x74
 800bba0:	4607      	mov	r7, r0
 800bba2:	460d      	mov	r5, r1
 800bba4:	4614      	mov	r4, r2
 800bba6:	d50e      	bpl.n	800bbc6 <_svfiprintf_r+0x32>
 800bba8:	690b      	ldr	r3, [r1, #16]
 800bbaa:	b963      	cbnz	r3, 800bbc6 <_svfiprintf_r+0x32>
 800bbac:	2140      	movs	r1, #64	; 0x40
 800bbae:	f7ff ff21 	bl	800b9f4 <_malloc_r>
 800bbb2:	6028      	str	r0, [r5, #0]
 800bbb4:	6128      	str	r0, [r5, #16]
 800bbb6:	b920      	cbnz	r0, 800bbc2 <_svfiprintf_r+0x2e>
 800bbb8:	230c      	movs	r3, #12
 800bbba:	603b      	str	r3, [r7, #0]
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc0:	e0d1      	b.n	800bd66 <_svfiprintf_r+0x1d2>
 800bbc2:	2340      	movs	r3, #64	; 0x40
 800bbc4:	616b      	str	r3, [r5, #20]
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbca:	2320      	movs	r3, #32
 800bbcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbd0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbd4:	2330      	movs	r3, #48	; 0x30
 800bbd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd80 <_svfiprintf_r+0x1ec>
 800bbda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbde:	f04f 0901 	mov.w	r9, #1
 800bbe2:	4623      	mov	r3, r4
 800bbe4:	469a      	mov	sl, r3
 800bbe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbea:	b10a      	cbz	r2, 800bbf0 <_svfiprintf_r+0x5c>
 800bbec:	2a25      	cmp	r2, #37	; 0x25
 800bbee:	d1f9      	bne.n	800bbe4 <_svfiprintf_r+0x50>
 800bbf0:	ebba 0b04 	subs.w	fp, sl, r4
 800bbf4:	d00b      	beq.n	800bc0e <_svfiprintf_r+0x7a>
 800bbf6:	465b      	mov	r3, fp
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	4638      	mov	r0, r7
 800bbfe:	f7ff ff6d 	bl	800badc <__ssputs_r>
 800bc02:	3001      	adds	r0, #1
 800bc04:	f000 80aa 	beq.w	800bd5c <_svfiprintf_r+0x1c8>
 800bc08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc0a:	445a      	add	r2, fp
 800bc0c:	9209      	str	r2, [sp, #36]	; 0x24
 800bc0e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f000 80a2 	beq.w	800bd5c <_svfiprintf_r+0x1c8>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc22:	f10a 0a01 	add.w	sl, sl, #1
 800bc26:	9304      	str	r3, [sp, #16]
 800bc28:	9307      	str	r3, [sp, #28]
 800bc2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc2e:	931a      	str	r3, [sp, #104]	; 0x68
 800bc30:	4654      	mov	r4, sl
 800bc32:	2205      	movs	r2, #5
 800bc34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc38:	4851      	ldr	r0, [pc, #324]	; (800bd80 <_svfiprintf_r+0x1ec>)
 800bc3a:	f7f4 fad1 	bl	80001e0 <memchr>
 800bc3e:	9a04      	ldr	r2, [sp, #16]
 800bc40:	b9d8      	cbnz	r0, 800bc7a <_svfiprintf_r+0xe6>
 800bc42:	06d0      	lsls	r0, r2, #27
 800bc44:	bf44      	itt	mi
 800bc46:	2320      	movmi	r3, #32
 800bc48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc4c:	0711      	lsls	r1, r2, #28
 800bc4e:	bf44      	itt	mi
 800bc50:	232b      	movmi	r3, #43	; 0x2b
 800bc52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc56:	f89a 3000 	ldrb.w	r3, [sl]
 800bc5a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc5c:	d015      	beq.n	800bc8a <_svfiprintf_r+0xf6>
 800bc5e:	9a07      	ldr	r2, [sp, #28]
 800bc60:	4654      	mov	r4, sl
 800bc62:	2000      	movs	r0, #0
 800bc64:	f04f 0c0a 	mov.w	ip, #10
 800bc68:	4621      	mov	r1, r4
 800bc6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc6e:	3b30      	subs	r3, #48	; 0x30
 800bc70:	2b09      	cmp	r3, #9
 800bc72:	d94e      	bls.n	800bd12 <_svfiprintf_r+0x17e>
 800bc74:	b1b0      	cbz	r0, 800bca4 <_svfiprintf_r+0x110>
 800bc76:	9207      	str	r2, [sp, #28]
 800bc78:	e014      	b.n	800bca4 <_svfiprintf_r+0x110>
 800bc7a:	eba0 0308 	sub.w	r3, r0, r8
 800bc7e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc82:	4313      	orrs	r3, r2
 800bc84:	9304      	str	r3, [sp, #16]
 800bc86:	46a2      	mov	sl, r4
 800bc88:	e7d2      	b.n	800bc30 <_svfiprintf_r+0x9c>
 800bc8a:	9b03      	ldr	r3, [sp, #12]
 800bc8c:	1d19      	adds	r1, r3, #4
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	9103      	str	r1, [sp, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bfbb      	ittet	lt
 800bc96:	425b      	neglt	r3, r3
 800bc98:	f042 0202 	orrlt.w	r2, r2, #2
 800bc9c:	9307      	strge	r3, [sp, #28]
 800bc9e:	9307      	strlt	r3, [sp, #28]
 800bca0:	bfb8      	it	lt
 800bca2:	9204      	strlt	r2, [sp, #16]
 800bca4:	7823      	ldrb	r3, [r4, #0]
 800bca6:	2b2e      	cmp	r3, #46	; 0x2e
 800bca8:	d10c      	bne.n	800bcc4 <_svfiprintf_r+0x130>
 800bcaa:	7863      	ldrb	r3, [r4, #1]
 800bcac:	2b2a      	cmp	r3, #42	; 0x2a
 800bcae:	d135      	bne.n	800bd1c <_svfiprintf_r+0x188>
 800bcb0:	9b03      	ldr	r3, [sp, #12]
 800bcb2:	1d1a      	adds	r2, r3, #4
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	9203      	str	r2, [sp, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	bfb8      	it	lt
 800bcbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcc0:	3402      	adds	r4, #2
 800bcc2:	9305      	str	r3, [sp, #20]
 800bcc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd90 <_svfiprintf_r+0x1fc>
 800bcc8:	7821      	ldrb	r1, [r4, #0]
 800bcca:	2203      	movs	r2, #3
 800bccc:	4650      	mov	r0, sl
 800bcce:	f7f4 fa87 	bl	80001e0 <memchr>
 800bcd2:	b140      	cbz	r0, 800bce6 <_svfiprintf_r+0x152>
 800bcd4:	2340      	movs	r3, #64	; 0x40
 800bcd6:	eba0 000a 	sub.w	r0, r0, sl
 800bcda:	fa03 f000 	lsl.w	r0, r3, r0
 800bcde:	9b04      	ldr	r3, [sp, #16]
 800bce0:	4303      	orrs	r3, r0
 800bce2:	3401      	adds	r4, #1
 800bce4:	9304      	str	r3, [sp, #16]
 800bce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcea:	4826      	ldr	r0, [pc, #152]	; (800bd84 <_svfiprintf_r+0x1f0>)
 800bcec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcf0:	2206      	movs	r2, #6
 800bcf2:	f7f4 fa75 	bl	80001e0 <memchr>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d038      	beq.n	800bd6c <_svfiprintf_r+0x1d8>
 800bcfa:	4b23      	ldr	r3, [pc, #140]	; (800bd88 <_svfiprintf_r+0x1f4>)
 800bcfc:	bb1b      	cbnz	r3, 800bd46 <_svfiprintf_r+0x1b2>
 800bcfe:	9b03      	ldr	r3, [sp, #12]
 800bd00:	3307      	adds	r3, #7
 800bd02:	f023 0307 	bic.w	r3, r3, #7
 800bd06:	3308      	adds	r3, #8
 800bd08:	9303      	str	r3, [sp, #12]
 800bd0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd0c:	4433      	add	r3, r6
 800bd0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd10:	e767      	b.n	800bbe2 <_svfiprintf_r+0x4e>
 800bd12:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd16:	460c      	mov	r4, r1
 800bd18:	2001      	movs	r0, #1
 800bd1a:	e7a5      	b.n	800bc68 <_svfiprintf_r+0xd4>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	3401      	adds	r4, #1
 800bd20:	9305      	str	r3, [sp, #20]
 800bd22:	4619      	mov	r1, r3
 800bd24:	f04f 0c0a 	mov.w	ip, #10
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd2e:	3a30      	subs	r2, #48	; 0x30
 800bd30:	2a09      	cmp	r2, #9
 800bd32:	d903      	bls.n	800bd3c <_svfiprintf_r+0x1a8>
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d0c5      	beq.n	800bcc4 <_svfiprintf_r+0x130>
 800bd38:	9105      	str	r1, [sp, #20]
 800bd3a:	e7c3      	b.n	800bcc4 <_svfiprintf_r+0x130>
 800bd3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd40:	4604      	mov	r4, r0
 800bd42:	2301      	movs	r3, #1
 800bd44:	e7f0      	b.n	800bd28 <_svfiprintf_r+0x194>
 800bd46:	ab03      	add	r3, sp, #12
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	462a      	mov	r2, r5
 800bd4c:	4b0f      	ldr	r3, [pc, #60]	; (800bd8c <_svfiprintf_r+0x1f8>)
 800bd4e:	a904      	add	r1, sp, #16
 800bd50:	4638      	mov	r0, r7
 800bd52:	f7fc fa47 	bl	80081e4 <_printf_float>
 800bd56:	1c42      	adds	r2, r0, #1
 800bd58:	4606      	mov	r6, r0
 800bd5a:	d1d6      	bne.n	800bd0a <_svfiprintf_r+0x176>
 800bd5c:	89ab      	ldrh	r3, [r5, #12]
 800bd5e:	065b      	lsls	r3, r3, #25
 800bd60:	f53f af2c 	bmi.w	800bbbc <_svfiprintf_r+0x28>
 800bd64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd66:	b01d      	add	sp, #116	; 0x74
 800bd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd6c:	ab03      	add	r3, sp, #12
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	462a      	mov	r2, r5
 800bd72:	4b06      	ldr	r3, [pc, #24]	; (800bd8c <_svfiprintf_r+0x1f8>)
 800bd74:	a904      	add	r1, sp, #16
 800bd76:	4638      	mov	r0, r7
 800bd78:	f7fc fcd8 	bl	800872c <_printf_i>
 800bd7c:	e7eb      	b.n	800bd56 <_svfiprintf_r+0x1c2>
 800bd7e:	bf00      	nop
 800bd80:	0800cdec 	.word	0x0800cdec
 800bd84:	0800cdf6 	.word	0x0800cdf6
 800bd88:	080081e5 	.word	0x080081e5
 800bd8c:	0800badd 	.word	0x0800badd
 800bd90:	0800cdf2 	.word	0x0800cdf2
 800bd94:	00000000 	.word	0x00000000

0800bd98 <nan>:
 800bd98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bda0 <nan+0x8>
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	00000000 	.word	0x00000000
 800bda4:	7ff80000 	.word	0x7ff80000

0800bda8 <_sbrk_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4d06      	ldr	r5, [pc, #24]	; (800bdc4 <_sbrk_r+0x1c>)
 800bdac:	2300      	movs	r3, #0
 800bdae:	4604      	mov	r4, r0
 800bdb0:	4608      	mov	r0, r1
 800bdb2:	602b      	str	r3, [r5, #0]
 800bdb4:	f7f6 f8fc 	bl	8001fb0 <_sbrk>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d102      	bne.n	800bdc2 <_sbrk_r+0x1a>
 800bdbc:	682b      	ldr	r3, [r5, #0]
 800bdbe:	b103      	cbz	r3, 800bdc2 <_sbrk_r+0x1a>
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	20000794 	.word	0x20000794

0800bdc8 <strncmp>:
 800bdc8:	b510      	push	{r4, lr}
 800bdca:	b17a      	cbz	r2, 800bdec <strncmp+0x24>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	3901      	subs	r1, #1
 800bdd0:	1884      	adds	r4, r0, r2
 800bdd2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bdd6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bdda:	4290      	cmp	r0, r2
 800bddc:	d101      	bne.n	800bde2 <strncmp+0x1a>
 800bdde:	42a3      	cmp	r3, r4
 800bde0:	d101      	bne.n	800bde6 <strncmp+0x1e>
 800bde2:	1a80      	subs	r0, r0, r2
 800bde4:	bd10      	pop	{r4, pc}
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d1f3      	bne.n	800bdd2 <strncmp+0xa>
 800bdea:	e7fa      	b.n	800bde2 <strncmp+0x1a>
 800bdec:	4610      	mov	r0, r2
 800bdee:	e7f9      	b.n	800bde4 <strncmp+0x1c>

0800bdf0 <__ascii_wctomb>:
 800bdf0:	b149      	cbz	r1, 800be06 <__ascii_wctomb+0x16>
 800bdf2:	2aff      	cmp	r2, #255	; 0xff
 800bdf4:	bf85      	ittet	hi
 800bdf6:	238a      	movhi	r3, #138	; 0x8a
 800bdf8:	6003      	strhi	r3, [r0, #0]
 800bdfa:	700a      	strbls	r2, [r1, #0]
 800bdfc:	f04f 30ff 	movhi.w	r0, #4294967295
 800be00:	bf98      	it	ls
 800be02:	2001      	movls	r0, #1
 800be04:	4770      	bx	lr
 800be06:	4608      	mov	r0, r1
 800be08:	4770      	bx	lr
	...

0800be0c <__assert_func>:
 800be0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be0e:	4614      	mov	r4, r2
 800be10:	461a      	mov	r2, r3
 800be12:	4b09      	ldr	r3, [pc, #36]	; (800be38 <__assert_func+0x2c>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4605      	mov	r5, r0
 800be18:	68d8      	ldr	r0, [r3, #12]
 800be1a:	b14c      	cbz	r4, 800be30 <__assert_func+0x24>
 800be1c:	4b07      	ldr	r3, [pc, #28]	; (800be3c <__assert_func+0x30>)
 800be1e:	9100      	str	r1, [sp, #0]
 800be20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be24:	4906      	ldr	r1, [pc, #24]	; (800be40 <__assert_func+0x34>)
 800be26:	462b      	mov	r3, r5
 800be28:	f000 f80e 	bl	800be48 <fiprintf>
 800be2c:	f000 fa8c 	bl	800c348 <abort>
 800be30:	4b04      	ldr	r3, [pc, #16]	; (800be44 <__assert_func+0x38>)
 800be32:	461c      	mov	r4, r3
 800be34:	e7f3      	b.n	800be1e <__assert_func+0x12>
 800be36:	bf00      	nop
 800be38:	20000074 	.word	0x20000074
 800be3c:	0800cdfd 	.word	0x0800cdfd
 800be40:	0800ce0a 	.word	0x0800ce0a
 800be44:	0800ce38 	.word	0x0800ce38

0800be48 <fiprintf>:
 800be48:	b40e      	push	{r1, r2, r3}
 800be4a:	b503      	push	{r0, r1, lr}
 800be4c:	4601      	mov	r1, r0
 800be4e:	ab03      	add	r3, sp, #12
 800be50:	4805      	ldr	r0, [pc, #20]	; (800be68 <fiprintf+0x20>)
 800be52:	f853 2b04 	ldr.w	r2, [r3], #4
 800be56:	6800      	ldr	r0, [r0, #0]
 800be58:	9301      	str	r3, [sp, #4]
 800be5a:	f000 f885 	bl	800bf68 <_vfiprintf_r>
 800be5e:	b002      	add	sp, #8
 800be60:	f85d eb04 	ldr.w	lr, [sp], #4
 800be64:	b003      	add	sp, #12
 800be66:	4770      	bx	lr
 800be68:	20000074 	.word	0x20000074

0800be6c <memmove>:
 800be6c:	4288      	cmp	r0, r1
 800be6e:	b510      	push	{r4, lr}
 800be70:	eb01 0402 	add.w	r4, r1, r2
 800be74:	d902      	bls.n	800be7c <memmove+0x10>
 800be76:	4284      	cmp	r4, r0
 800be78:	4623      	mov	r3, r4
 800be7a:	d807      	bhi.n	800be8c <memmove+0x20>
 800be7c:	1e43      	subs	r3, r0, #1
 800be7e:	42a1      	cmp	r1, r4
 800be80:	d008      	beq.n	800be94 <memmove+0x28>
 800be82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be8a:	e7f8      	b.n	800be7e <memmove+0x12>
 800be8c:	4402      	add	r2, r0
 800be8e:	4601      	mov	r1, r0
 800be90:	428a      	cmp	r2, r1
 800be92:	d100      	bne.n	800be96 <memmove+0x2a>
 800be94:	bd10      	pop	{r4, pc}
 800be96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be9e:	e7f7      	b.n	800be90 <memmove+0x24>

0800bea0 <__malloc_lock>:
 800bea0:	4801      	ldr	r0, [pc, #4]	; (800bea8 <__malloc_lock+0x8>)
 800bea2:	f000 bc11 	b.w	800c6c8 <__retarget_lock_acquire_recursive>
 800bea6:	bf00      	nop
 800bea8:	20000798 	.word	0x20000798

0800beac <__malloc_unlock>:
 800beac:	4801      	ldr	r0, [pc, #4]	; (800beb4 <__malloc_unlock+0x8>)
 800beae:	f000 bc0c 	b.w	800c6ca <__retarget_lock_release_recursive>
 800beb2:	bf00      	nop
 800beb4:	20000798 	.word	0x20000798

0800beb8 <_realloc_r>:
 800beb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bebc:	4680      	mov	r8, r0
 800bebe:	4614      	mov	r4, r2
 800bec0:	460e      	mov	r6, r1
 800bec2:	b921      	cbnz	r1, 800bece <_realloc_r+0x16>
 800bec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bec8:	4611      	mov	r1, r2
 800beca:	f7ff bd93 	b.w	800b9f4 <_malloc_r>
 800bece:	b92a      	cbnz	r2, 800bedc <_realloc_r+0x24>
 800bed0:	f7ff fd24 	bl	800b91c <_free_r>
 800bed4:	4625      	mov	r5, r4
 800bed6:	4628      	mov	r0, r5
 800bed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bedc:	f000 fc5c 	bl	800c798 <_malloc_usable_size_r>
 800bee0:	4284      	cmp	r4, r0
 800bee2:	4607      	mov	r7, r0
 800bee4:	d802      	bhi.n	800beec <_realloc_r+0x34>
 800bee6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800beea:	d812      	bhi.n	800bf12 <_realloc_r+0x5a>
 800beec:	4621      	mov	r1, r4
 800beee:	4640      	mov	r0, r8
 800bef0:	f7ff fd80 	bl	800b9f4 <_malloc_r>
 800bef4:	4605      	mov	r5, r0
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d0ed      	beq.n	800bed6 <_realloc_r+0x1e>
 800befa:	42bc      	cmp	r4, r7
 800befc:	4622      	mov	r2, r4
 800befe:	4631      	mov	r1, r6
 800bf00:	bf28      	it	cs
 800bf02:	463a      	movcs	r2, r7
 800bf04:	f7ff f824 	bl	800af50 <memcpy>
 800bf08:	4631      	mov	r1, r6
 800bf0a:	4640      	mov	r0, r8
 800bf0c:	f7ff fd06 	bl	800b91c <_free_r>
 800bf10:	e7e1      	b.n	800bed6 <_realloc_r+0x1e>
 800bf12:	4635      	mov	r5, r6
 800bf14:	e7df      	b.n	800bed6 <_realloc_r+0x1e>

0800bf16 <__sfputc_r>:
 800bf16:	6893      	ldr	r3, [r2, #8]
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	b410      	push	{r4}
 800bf1e:	6093      	str	r3, [r2, #8]
 800bf20:	da08      	bge.n	800bf34 <__sfputc_r+0x1e>
 800bf22:	6994      	ldr	r4, [r2, #24]
 800bf24:	42a3      	cmp	r3, r4
 800bf26:	db01      	blt.n	800bf2c <__sfputc_r+0x16>
 800bf28:	290a      	cmp	r1, #10
 800bf2a:	d103      	bne.n	800bf34 <__sfputc_r+0x1e>
 800bf2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf30:	f000 b94a 	b.w	800c1c8 <__swbuf_r>
 800bf34:	6813      	ldr	r3, [r2, #0]
 800bf36:	1c58      	adds	r0, r3, #1
 800bf38:	6010      	str	r0, [r2, #0]
 800bf3a:	7019      	strb	r1, [r3, #0]
 800bf3c:	4608      	mov	r0, r1
 800bf3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <__sfputs_r>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	4606      	mov	r6, r0
 800bf48:	460f      	mov	r7, r1
 800bf4a:	4614      	mov	r4, r2
 800bf4c:	18d5      	adds	r5, r2, r3
 800bf4e:	42ac      	cmp	r4, r5
 800bf50:	d101      	bne.n	800bf56 <__sfputs_r+0x12>
 800bf52:	2000      	movs	r0, #0
 800bf54:	e007      	b.n	800bf66 <__sfputs_r+0x22>
 800bf56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf5a:	463a      	mov	r2, r7
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	f7ff ffda 	bl	800bf16 <__sfputc_r>
 800bf62:	1c43      	adds	r3, r0, #1
 800bf64:	d1f3      	bne.n	800bf4e <__sfputs_r+0xa>
 800bf66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf68 <_vfiprintf_r>:
 800bf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6c:	460d      	mov	r5, r1
 800bf6e:	b09d      	sub	sp, #116	; 0x74
 800bf70:	4614      	mov	r4, r2
 800bf72:	4698      	mov	r8, r3
 800bf74:	4606      	mov	r6, r0
 800bf76:	b118      	cbz	r0, 800bf80 <_vfiprintf_r+0x18>
 800bf78:	6983      	ldr	r3, [r0, #24]
 800bf7a:	b90b      	cbnz	r3, 800bf80 <_vfiprintf_r+0x18>
 800bf7c:	f000 fb06 	bl	800c58c <__sinit>
 800bf80:	4b89      	ldr	r3, [pc, #548]	; (800c1a8 <_vfiprintf_r+0x240>)
 800bf82:	429d      	cmp	r5, r3
 800bf84:	d11b      	bne.n	800bfbe <_vfiprintf_r+0x56>
 800bf86:	6875      	ldr	r5, [r6, #4]
 800bf88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf8a:	07d9      	lsls	r1, r3, #31
 800bf8c:	d405      	bmi.n	800bf9a <_vfiprintf_r+0x32>
 800bf8e:	89ab      	ldrh	r3, [r5, #12]
 800bf90:	059a      	lsls	r2, r3, #22
 800bf92:	d402      	bmi.n	800bf9a <_vfiprintf_r+0x32>
 800bf94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf96:	f000 fb97 	bl	800c6c8 <__retarget_lock_acquire_recursive>
 800bf9a:	89ab      	ldrh	r3, [r5, #12]
 800bf9c:	071b      	lsls	r3, r3, #28
 800bf9e:	d501      	bpl.n	800bfa4 <_vfiprintf_r+0x3c>
 800bfa0:	692b      	ldr	r3, [r5, #16]
 800bfa2:	b9eb      	cbnz	r3, 800bfe0 <_vfiprintf_r+0x78>
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	f000 f960 	bl	800c26c <__swsetup_r>
 800bfac:	b1c0      	cbz	r0, 800bfe0 <_vfiprintf_r+0x78>
 800bfae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfb0:	07dc      	lsls	r4, r3, #31
 800bfb2:	d50e      	bpl.n	800bfd2 <_vfiprintf_r+0x6a>
 800bfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb8:	b01d      	add	sp, #116	; 0x74
 800bfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfbe:	4b7b      	ldr	r3, [pc, #492]	; (800c1ac <_vfiprintf_r+0x244>)
 800bfc0:	429d      	cmp	r5, r3
 800bfc2:	d101      	bne.n	800bfc8 <_vfiprintf_r+0x60>
 800bfc4:	68b5      	ldr	r5, [r6, #8]
 800bfc6:	e7df      	b.n	800bf88 <_vfiprintf_r+0x20>
 800bfc8:	4b79      	ldr	r3, [pc, #484]	; (800c1b0 <_vfiprintf_r+0x248>)
 800bfca:	429d      	cmp	r5, r3
 800bfcc:	bf08      	it	eq
 800bfce:	68f5      	ldreq	r5, [r6, #12]
 800bfd0:	e7da      	b.n	800bf88 <_vfiprintf_r+0x20>
 800bfd2:	89ab      	ldrh	r3, [r5, #12]
 800bfd4:	0598      	lsls	r0, r3, #22
 800bfd6:	d4ed      	bmi.n	800bfb4 <_vfiprintf_r+0x4c>
 800bfd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfda:	f000 fb76 	bl	800c6ca <__retarget_lock_release_recursive>
 800bfde:	e7e9      	b.n	800bfb4 <_vfiprintf_r+0x4c>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	9309      	str	r3, [sp, #36]	; 0x24
 800bfe4:	2320      	movs	r3, #32
 800bfe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfea:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfee:	2330      	movs	r3, #48	; 0x30
 800bff0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c1b4 <_vfiprintf_r+0x24c>
 800bff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bff8:	f04f 0901 	mov.w	r9, #1
 800bffc:	4623      	mov	r3, r4
 800bffe:	469a      	mov	sl, r3
 800c000:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c004:	b10a      	cbz	r2, 800c00a <_vfiprintf_r+0xa2>
 800c006:	2a25      	cmp	r2, #37	; 0x25
 800c008:	d1f9      	bne.n	800bffe <_vfiprintf_r+0x96>
 800c00a:	ebba 0b04 	subs.w	fp, sl, r4
 800c00e:	d00b      	beq.n	800c028 <_vfiprintf_r+0xc0>
 800c010:	465b      	mov	r3, fp
 800c012:	4622      	mov	r2, r4
 800c014:	4629      	mov	r1, r5
 800c016:	4630      	mov	r0, r6
 800c018:	f7ff ff94 	bl	800bf44 <__sfputs_r>
 800c01c:	3001      	adds	r0, #1
 800c01e:	f000 80aa 	beq.w	800c176 <_vfiprintf_r+0x20e>
 800c022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c024:	445a      	add	r2, fp
 800c026:	9209      	str	r2, [sp, #36]	; 0x24
 800c028:	f89a 3000 	ldrb.w	r3, [sl]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 80a2 	beq.w	800c176 <_vfiprintf_r+0x20e>
 800c032:	2300      	movs	r3, #0
 800c034:	f04f 32ff 	mov.w	r2, #4294967295
 800c038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c03c:	f10a 0a01 	add.w	sl, sl, #1
 800c040:	9304      	str	r3, [sp, #16]
 800c042:	9307      	str	r3, [sp, #28]
 800c044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c048:	931a      	str	r3, [sp, #104]	; 0x68
 800c04a:	4654      	mov	r4, sl
 800c04c:	2205      	movs	r2, #5
 800c04e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c052:	4858      	ldr	r0, [pc, #352]	; (800c1b4 <_vfiprintf_r+0x24c>)
 800c054:	f7f4 f8c4 	bl	80001e0 <memchr>
 800c058:	9a04      	ldr	r2, [sp, #16]
 800c05a:	b9d8      	cbnz	r0, 800c094 <_vfiprintf_r+0x12c>
 800c05c:	06d1      	lsls	r1, r2, #27
 800c05e:	bf44      	itt	mi
 800c060:	2320      	movmi	r3, #32
 800c062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c066:	0713      	lsls	r3, r2, #28
 800c068:	bf44      	itt	mi
 800c06a:	232b      	movmi	r3, #43	; 0x2b
 800c06c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c070:	f89a 3000 	ldrb.w	r3, [sl]
 800c074:	2b2a      	cmp	r3, #42	; 0x2a
 800c076:	d015      	beq.n	800c0a4 <_vfiprintf_r+0x13c>
 800c078:	9a07      	ldr	r2, [sp, #28]
 800c07a:	4654      	mov	r4, sl
 800c07c:	2000      	movs	r0, #0
 800c07e:	f04f 0c0a 	mov.w	ip, #10
 800c082:	4621      	mov	r1, r4
 800c084:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c088:	3b30      	subs	r3, #48	; 0x30
 800c08a:	2b09      	cmp	r3, #9
 800c08c:	d94e      	bls.n	800c12c <_vfiprintf_r+0x1c4>
 800c08e:	b1b0      	cbz	r0, 800c0be <_vfiprintf_r+0x156>
 800c090:	9207      	str	r2, [sp, #28]
 800c092:	e014      	b.n	800c0be <_vfiprintf_r+0x156>
 800c094:	eba0 0308 	sub.w	r3, r0, r8
 800c098:	fa09 f303 	lsl.w	r3, r9, r3
 800c09c:	4313      	orrs	r3, r2
 800c09e:	9304      	str	r3, [sp, #16]
 800c0a0:	46a2      	mov	sl, r4
 800c0a2:	e7d2      	b.n	800c04a <_vfiprintf_r+0xe2>
 800c0a4:	9b03      	ldr	r3, [sp, #12]
 800c0a6:	1d19      	adds	r1, r3, #4
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	9103      	str	r1, [sp, #12]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	bfbb      	ittet	lt
 800c0b0:	425b      	neglt	r3, r3
 800c0b2:	f042 0202 	orrlt.w	r2, r2, #2
 800c0b6:	9307      	strge	r3, [sp, #28]
 800c0b8:	9307      	strlt	r3, [sp, #28]
 800c0ba:	bfb8      	it	lt
 800c0bc:	9204      	strlt	r2, [sp, #16]
 800c0be:	7823      	ldrb	r3, [r4, #0]
 800c0c0:	2b2e      	cmp	r3, #46	; 0x2e
 800c0c2:	d10c      	bne.n	800c0de <_vfiprintf_r+0x176>
 800c0c4:	7863      	ldrb	r3, [r4, #1]
 800c0c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c0c8:	d135      	bne.n	800c136 <_vfiprintf_r+0x1ce>
 800c0ca:	9b03      	ldr	r3, [sp, #12]
 800c0cc:	1d1a      	adds	r2, r3, #4
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	9203      	str	r2, [sp, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	bfb8      	it	lt
 800c0d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0da:	3402      	adds	r4, #2
 800c0dc:	9305      	str	r3, [sp, #20]
 800c0de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c1c4 <_vfiprintf_r+0x25c>
 800c0e2:	7821      	ldrb	r1, [r4, #0]
 800c0e4:	2203      	movs	r2, #3
 800c0e6:	4650      	mov	r0, sl
 800c0e8:	f7f4 f87a 	bl	80001e0 <memchr>
 800c0ec:	b140      	cbz	r0, 800c100 <_vfiprintf_r+0x198>
 800c0ee:	2340      	movs	r3, #64	; 0x40
 800c0f0:	eba0 000a 	sub.w	r0, r0, sl
 800c0f4:	fa03 f000 	lsl.w	r0, r3, r0
 800c0f8:	9b04      	ldr	r3, [sp, #16]
 800c0fa:	4303      	orrs	r3, r0
 800c0fc:	3401      	adds	r4, #1
 800c0fe:	9304      	str	r3, [sp, #16]
 800c100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c104:	482c      	ldr	r0, [pc, #176]	; (800c1b8 <_vfiprintf_r+0x250>)
 800c106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c10a:	2206      	movs	r2, #6
 800c10c:	f7f4 f868 	bl	80001e0 <memchr>
 800c110:	2800      	cmp	r0, #0
 800c112:	d03f      	beq.n	800c194 <_vfiprintf_r+0x22c>
 800c114:	4b29      	ldr	r3, [pc, #164]	; (800c1bc <_vfiprintf_r+0x254>)
 800c116:	bb1b      	cbnz	r3, 800c160 <_vfiprintf_r+0x1f8>
 800c118:	9b03      	ldr	r3, [sp, #12]
 800c11a:	3307      	adds	r3, #7
 800c11c:	f023 0307 	bic.w	r3, r3, #7
 800c120:	3308      	adds	r3, #8
 800c122:	9303      	str	r3, [sp, #12]
 800c124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c126:	443b      	add	r3, r7
 800c128:	9309      	str	r3, [sp, #36]	; 0x24
 800c12a:	e767      	b.n	800bffc <_vfiprintf_r+0x94>
 800c12c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c130:	460c      	mov	r4, r1
 800c132:	2001      	movs	r0, #1
 800c134:	e7a5      	b.n	800c082 <_vfiprintf_r+0x11a>
 800c136:	2300      	movs	r3, #0
 800c138:	3401      	adds	r4, #1
 800c13a:	9305      	str	r3, [sp, #20]
 800c13c:	4619      	mov	r1, r3
 800c13e:	f04f 0c0a 	mov.w	ip, #10
 800c142:	4620      	mov	r0, r4
 800c144:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c148:	3a30      	subs	r2, #48	; 0x30
 800c14a:	2a09      	cmp	r2, #9
 800c14c:	d903      	bls.n	800c156 <_vfiprintf_r+0x1ee>
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d0c5      	beq.n	800c0de <_vfiprintf_r+0x176>
 800c152:	9105      	str	r1, [sp, #20]
 800c154:	e7c3      	b.n	800c0de <_vfiprintf_r+0x176>
 800c156:	fb0c 2101 	mla	r1, ip, r1, r2
 800c15a:	4604      	mov	r4, r0
 800c15c:	2301      	movs	r3, #1
 800c15e:	e7f0      	b.n	800c142 <_vfiprintf_r+0x1da>
 800c160:	ab03      	add	r3, sp, #12
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	462a      	mov	r2, r5
 800c166:	4b16      	ldr	r3, [pc, #88]	; (800c1c0 <_vfiprintf_r+0x258>)
 800c168:	a904      	add	r1, sp, #16
 800c16a:	4630      	mov	r0, r6
 800c16c:	f7fc f83a 	bl	80081e4 <_printf_float>
 800c170:	4607      	mov	r7, r0
 800c172:	1c78      	adds	r0, r7, #1
 800c174:	d1d6      	bne.n	800c124 <_vfiprintf_r+0x1bc>
 800c176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c178:	07d9      	lsls	r1, r3, #31
 800c17a:	d405      	bmi.n	800c188 <_vfiprintf_r+0x220>
 800c17c:	89ab      	ldrh	r3, [r5, #12]
 800c17e:	059a      	lsls	r2, r3, #22
 800c180:	d402      	bmi.n	800c188 <_vfiprintf_r+0x220>
 800c182:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c184:	f000 faa1 	bl	800c6ca <__retarget_lock_release_recursive>
 800c188:	89ab      	ldrh	r3, [r5, #12]
 800c18a:	065b      	lsls	r3, r3, #25
 800c18c:	f53f af12 	bmi.w	800bfb4 <_vfiprintf_r+0x4c>
 800c190:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c192:	e711      	b.n	800bfb8 <_vfiprintf_r+0x50>
 800c194:	ab03      	add	r3, sp, #12
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	462a      	mov	r2, r5
 800c19a:	4b09      	ldr	r3, [pc, #36]	; (800c1c0 <_vfiprintf_r+0x258>)
 800c19c:	a904      	add	r1, sp, #16
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7fc fac4 	bl	800872c <_printf_i>
 800c1a4:	e7e4      	b.n	800c170 <_vfiprintf_r+0x208>
 800c1a6:	bf00      	nop
 800c1a8:	0800ce5c 	.word	0x0800ce5c
 800c1ac:	0800ce7c 	.word	0x0800ce7c
 800c1b0:	0800ce3c 	.word	0x0800ce3c
 800c1b4:	0800cdec 	.word	0x0800cdec
 800c1b8:	0800cdf6 	.word	0x0800cdf6
 800c1bc:	080081e5 	.word	0x080081e5
 800c1c0:	0800bf45 	.word	0x0800bf45
 800c1c4:	0800cdf2 	.word	0x0800cdf2

0800c1c8 <__swbuf_r>:
 800c1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ca:	460e      	mov	r6, r1
 800c1cc:	4614      	mov	r4, r2
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	b118      	cbz	r0, 800c1da <__swbuf_r+0x12>
 800c1d2:	6983      	ldr	r3, [r0, #24]
 800c1d4:	b90b      	cbnz	r3, 800c1da <__swbuf_r+0x12>
 800c1d6:	f000 f9d9 	bl	800c58c <__sinit>
 800c1da:	4b21      	ldr	r3, [pc, #132]	; (800c260 <__swbuf_r+0x98>)
 800c1dc:	429c      	cmp	r4, r3
 800c1de:	d12b      	bne.n	800c238 <__swbuf_r+0x70>
 800c1e0:	686c      	ldr	r4, [r5, #4]
 800c1e2:	69a3      	ldr	r3, [r4, #24]
 800c1e4:	60a3      	str	r3, [r4, #8]
 800c1e6:	89a3      	ldrh	r3, [r4, #12]
 800c1e8:	071a      	lsls	r2, r3, #28
 800c1ea:	d52f      	bpl.n	800c24c <__swbuf_r+0x84>
 800c1ec:	6923      	ldr	r3, [r4, #16]
 800c1ee:	b36b      	cbz	r3, 800c24c <__swbuf_r+0x84>
 800c1f0:	6923      	ldr	r3, [r4, #16]
 800c1f2:	6820      	ldr	r0, [r4, #0]
 800c1f4:	1ac0      	subs	r0, r0, r3
 800c1f6:	6963      	ldr	r3, [r4, #20]
 800c1f8:	b2f6      	uxtb	r6, r6
 800c1fa:	4283      	cmp	r3, r0
 800c1fc:	4637      	mov	r7, r6
 800c1fe:	dc04      	bgt.n	800c20a <__swbuf_r+0x42>
 800c200:	4621      	mov	r1, r4
 800c202:	4628      	mov	r0, r5
 800c204:	f000 f92e 	bl	800c464 <_fflush_r>
 800c208:	bb30      	cbnz	r0, 800c258 <__swbuf_r+0x90>
 800c20a:	68a3      	ldr	r3, [r4, #8]
 800c20c:	3b01      	subs	r3, #1
 800c20e:	60a3      	str	r3, [r4, #8]
 800c210:	6823      	ldr	r3, [r4, #0]
 800c212:	1c5a      	adds	r2, r3, #1
 800c214:	6022      	str	r2, [r4, #0]
 800c216:	701e      	strb	r6, [r3, #0]
 800c218:	6963      	ldr	r3, [r4, #20]
 800c21a:	3001      	adds	r0, #1
 800c21c:	4283      	cmp	r3, r0
 800c21e:	d004      	beq.n	800c22a <__swbuf_r+0x62>
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	07db      	lsls	r3, r3, #31
 800c224:	d506      	bpl.n	800c234 <__swbuf_r+0x6c>
 800c226:	2e0a      	cmp	r6, #10
 800c228:	d104      	bne.n	800c234 <__swbuf_r+0x6c>
 800c22a:	4621      	mov	r1, r4
 800c22c:	4628      	mov	r0, r5
 800c22e:	f000 f919 	bl	800c464 <_fflush_r>
 800c232:	b988      	cbnz	r0, 800c258 <__swbuf_r+0x90>
 800c234:	4638      	mov	r0, r7
 800c236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c238:	4b0a      	ldr	r3, [pc, #40]	; (800c264 <__swbuf_r+0x9c>)
 800c23a:	429c      	cmp	r4, r3
 800c23c:	d101      	bne.n	800c242 <__swbuf_r+0x7a>
 800c23e:	68ac      	ldr	r4, [r5, #8]
 800c240:	e7cf      	b.n	800c1e2 <__swbuf_r+0x1a>
 800c242:	4b09      	ldr	r3, [pc, #36]	; (800c268 <__swbuf_r+0xa0>)
 800c244:	429c      	cmp	r4, r3
 800c246:	bf08      	it	eq
 800c248:	68ec      	ldreq	r4, [r5, #12]
 800c24a:	e7ca      	b.n	800c1e2 <__swbuf_r+0x1a>
 800c24c:	4621      	mov	r1, r4
 800c24e:	4628      	mov	r0, r5
 800c250:	f000 f80c 	bl	800c26c <__swsetup_r>
 800c254:	2800      	cmp	r0, #0
 800c256:	d0cb      	beq.n	800c1f0 <__swbuf_r+0x28>
 800c258:	f04f 37ff 	mov.w	r7, #4294967295
 800c25c:	e7ea      	b.n	800c234 <__swbuf_r+0x6c>
 800c25e:	bf00      	nop
 800c260:	0800ce5c 	.word	0x0800ce5c
 800c264:	0800ce7c 	.word	0x0800ce7c
 800c268:	0800ce3c 	.word	0x0800ce3c

0800c26c <__swsetup_r>:
 800c26c:	4b32      	ldr	r3, [pc, #200]	; (800c338 <__swsetup_r+0xcc>)
 800c26e:	b570      	push	{r4, r5, r6, lr}
 800c270:	681d      	ldr	r5, [r3, #0]
 800c272:	4606      	mov	r6, r0
 800c274:	460c      	mov	r4, r1
 800c276:	b125      	cbz	r5, 800c282 <__swsetup_r+0x16>
 800c278:	69ab      	ldr	r3, [r5, #24]
 800c27a:	b913      	cbnz	r3, 800c282 <__swsetup_r+0x16>
 800c27c:	4628      	mov	r0, r5
 800c27e:	f000 f985 	bl	800c58c <__sinit>
 800c282:	4b2e      	ldr	r3, [pc, #184]	; (800c33c <__swsetup_r+0xd0>)
 800c284:	429c      	cmp	r4, r3
 800c286:	d10f      	bne.n	800c2a8 <__swsetup_r+0x3c>
 800c288:	686c      	ldr	r4, [r5, #4]
 800c28a:	89a3      	ldrh	r3, [r4, #12]
 800c28c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c290:	0719      	lsls	r1, r3, #28
 800c292:	d42c      	bmi.n	800c2ee <__swsetup_r+0x82>
 800c294:	06dd      	lsls	r5, r3, #27
 800c296:	d411      	bmi.n	800c2bc <__swsetup_r+0x50>
 800c298:	2309      	movs	r3, #9
 800c29a:	6033      	str	r3, [r6, #0]
 800c29c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2a0:	81a3      	strh	r3, [r4, #12]
 800c2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a6:	e03e      	b.n	800c326 <__swsetup_r+0xba>
 800c2a8:	4b25      	ldr	r3, [pc, #148]	; (800c340 <__swsetup_r+0xd4>)
 800c2aa:	429c      	cmp	r4, r3
 800c2ac:	d101      	bne.n	800c2b2 <__swsetup_r+0x46>
 800c2ae:	68ac      	ldr	r4, [r5, #8]
 800c2b0:	e7eb      	b.n	800c28a <__swsetup_r+0x1e>
 800c2b2:	4b24      	ldr	r3, [pc, #144]	; (800c344 <__swsetup_r+0xd8>)
 800c2b4:	429c      	cmp	r4, r3
 800c2b6:	bf08      	it	eq
 800c2b8:	68ec      	ldreq	r4, [r5, #12]
 800c2ba:	e7e6      	b.n	800c28a <__swsetup_r+0x1e>
 800c2bc:	0758      	lsls	r0, r3, #29
 800c2be:	d512      	bpl.n	800c2e6 <__swsetup_r+0x7a>
 800c2c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2c2:	b141      	cbz	r1, 800c2d6 <__swsetup_r+0x6a>
 800c2c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2c8:	4299      	cmp	r1, r3
 800c2ca:	d002      	beq.n	800c2d2 <__swsetup_r+0x66>
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f7ff fb25 	bl	800b91c <_free_r>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	6363      	str	r3, [r4, #52]	; 0x34
 800c2d6:	89a3      	ldrh	r3, [r4, #12]
 800c2d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2dc:	81a3      	strh	r3, [r4, #12]
 800c2de:	2300      	movs	r3, #0
 800c2e0:	6063      	str	r3, [r4, #4]
 800c2e2:	6923      	ldr	r3, [r4, #16]
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	89a3      	ldrh	r3, [r4, #12]
 800c2e8:	f043 0308 	orr.w	r3, r3, #8
 800c2ec:	81a3      	strh	r3, [r4, #12]
 800c2ee:	6923      	ldr	r3, [r4, #16]
 800c2f0:	b94b      	cbnz	r3, 800c306 <__swsetup_r+0x9a>
 800c2f2:	89a3      	ldrh	r3, [r4, #12]
 800c2f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2fc:	d003      	beq.n	800c306 <__swsetup_r+0x9a>
 800c2fe:	4621      	mov	r1, r4
 800c300:	4630      	mov	r0, r6
 800c302:	f000 fa09 	bl	800c718 <__smakebuf_r>
 800c306:	89a0      	ldrh	r0, [r4, #12]
 800c308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c30c:	f010 0301 	ands.w	r3, r0, #1
 800c310:	d00a      	beq.n	800c328 <__swsetup_r+0xbc>
 800c312:	2300      	movs	r3, #0
 800c314:	60a3      	str	r3, [r4, #8]
 800c316:	6963      	ldr	r3, [r4, #20]
 800c318:	425b      	negs	r3, r3
 800c31a:	61a3      	str	r3, [r4, #24]
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	b943      	cbnz	r3, 800c332 <__swsetup_r+0xc6>
 800c320:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c324:	d1ba      	bne.n	800c29c <__swsetup_r+0x30>
 800c326:	bd70      	pop	{r4, r5, r6, pc}
 800c328:	0781      	lsls	r1, r0, #30
 800c32a:	bf58      	it	pl
 800c32c:	6963      	ldrpl	r3, [r4, #20]
 800c32e:	60a3      	str	r3, [r4, #8]
 800c330:	e7f4      	b.n	800c31c <__swsetup_r+0xb0>
 800c332:	2000      	movs	r0, #0
 800c334:	e7f7      	b.n	800c326 <__swsetup_r+0xba>
 800c336:	bf00      	nop
 800c338:	20000074 	.word	0x20000074
 800c33c:	0800ce5c 	.word	0x0800ce5c
 800c340:	0800ce7c 	.word	0x0800ce7c
 800c344:	0800ce3c 	.word	0x0800ce3c

0800c348 <abort>:
 800c348:	b508      	push	{r3, lr}
 800c34a:	2006      	movs	r0, #6
 800c34c:	f000 fa54 	bl	800c7f8 <raise>
 800c350:	2001      	movs	r0, #1
 800c352:	f7f5 fdb5 	bl	8001ec0 <_exit>
	...

0800c358 <__sflush_r>:
 800c358:	898a      	ldrh	r2, [r1, #12]
 800c35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c35e:	4605      	mov	r5, r0
 800c360:	0710      	lsls	r0, r2, #28
 800c362:	460c      	mov	r4, r1
 800c364:	d458      	bmi.n	800c418 <__sflush_r+0xc0>
 800c366:	684b      	ldr	r3, [r1, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	dc05      	bgt.n	800c378 <__sflush_r+0x20>
 800c36c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c36e:	2b00      	cmp	r3, #0
 800c370:	dc02      	bgt.n	800c378 <__sflush_r+0x20>
 800c372:	2000      	movs	r0, #0
 800c374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c37a:	2e00      	cmp	r6, #0
 800c37c:	d0f9      	beq.n	800c372 <__sflush_r+0x1a>
 800c37e:	2300      	movs	r3, #0
 800c380:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c384:	682f      	ldr	r7, [r5, #0]
 800c386:	602b      	str	r3, [r5, #0]
 800c388:	d032      	beq.n	800c3f0 <__sflush_r+0x98>
 800c38a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	075a      	lsls	r2, r3, #29
 800c390:	d505      	bpl.n	800c39e <__sflush_r+0x46>
 800c392:	6863      	ldr	r3, [r4, #4]
 800c394:	1ac0      	subs	r0, r0, r3
 800c396:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c398:	b10b      	cbz	r3, 800c39e <__sflush_r+0x46>
 800c39a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c39c:	1ac0      	subs	r0, r0, r3
 800c39e:	2300      	movs	r3, #0
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3a4:	6a21      	ldr	r1, [r4, #32]
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	47b0      	blx	r6
 800c3aa:	1c43      	adds	r3, r0, #1
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	d106      	bne.n	800c3be <__sflush_r+0x66>
 800c3b0:	6829      	ldr	r1, [r5, #0]
 800c3b2:	291d      	cmp	r1, #29
 800c3b4:	d82c      	bhi.n	800c410 <__sflush_r+0xb8>
 800c3b6:	4a2a      	ldr	r2, [pc, #168]	; (800c460 <__sflush_r+0x108>)
 800c3b8:	40ca      	lsrs	r2, r1
 800c3ba:	07d6      	lsls	r6, r2, #31
 800c3bc:	d528      	bpl.n	800c410 <__sflush_r+0xb8>
 800c3be:	2200      	movs	r2, #0
 800c3c0:	6062      	str	r2, [r4, #4]
 800c3c2:	04d9      	lsls	r1, r3, #19
 800c3c4:	6922      	ldr	r2, [r4, #16]
 800c3c6:	6022      	str	r2, [r4, #0]
 800c3c8:	d504      	bpl.n	800c3d4 <__sflush_r+0x7c>
 800c3ca:	1c42      	adds	r2, r0, #1
 800c3cc:	d101      	bne.n	800c3d2 <__sflush_r+0x7a>
 800c3ce:	682b      	ldr	r3, [r5, #0]
 800c3d0:	b903      	cbnz	r3, 800c3d4 <__sflush_r+0x7c>
 800c3d2:	6560      	str	r0, [r4, #84]	; 0x54
 800c3d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3d6:	602f      	str	r7, [r5, #0]
 800c3d8:	2900      	cmp	r1, #0
 800c3da:	d0ca      	beq.n	800c372 <__sflush_r+0x1a>
 800c3dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3e0:	4299      	cmp	r1, r3
 800c3e2:	d002      	beq.n	800c3ea <__sflush_r+0x92>
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	f7ff fa99 	bl	800b91c <_free_r>
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	6360      	str	r0, [r4, #52]	; 0x34
 800c3ee:	e7c1      	b.n	800c374 <__sflush_r+0x1c>
 800c3f0:	6a21      	ldr	r1, [r4, #32]
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	47b0      	blx	r6
 800c3f8:	1c41      	adds	r1, r0, #1
 800c3fa:	d1c7      	bne.n	800c38c <__sflush_r+0x34>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0c4      	beq.n	800c38c <__sflush_r+0x34>
 800c402:	2b1d      	cmp	r3, #29
 800c404:	d001      	beq.n	800c40a <__sflush_r+0xb2>
 800c406:	2b16      	cmp	r3, #22
 800c408:	d101      	bne.n	800c40e <__sflush_r+0xb6>
 800c40a:	602f      	str	r7, [r5, #0]
 800c40c:	e7b1      	b.n	800c372 <__sflush_r+0x1a>
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c414:	81a3      	strh	r3, [r4, #12]
 800c416:	e7ad      	b.n	800c374 <__sflush_r+0x1c>
 800c418:	690f      	ldr	r7, [r1, #16]
 800c41a:	2f00      	cmp	r7, #0
 800c41c:	d0a9      	beq.n	800c372 <__sflush_r+0x1a>
 800c41e:	0793      	lsls	r3, r2, #30
 800c420:	680e      	ldr	r6, [r1, #0]
 800c422:	bf08      	it	eq
 800c424:	694b      	ldreq	r3, [r1, #20]
 800c426:	600f      	str	r7, [r1, #0]
 800c428:	bf18      	it	ne
 800c42a:	2300      	movne	r3, #0
 800c42c:	eba6 0807 	sub.w	r8, r6, r7
 800c430:	608b      	str	r3, [r1, #8]
 800c432:	f1b8 0f00 	cmp.w	r8, #0
 800c436:	dd9c      	ble.n	800c372 <__sflush_r+0x1a>
 800c438:	6a21      	ldr	r1, [r4, #32]
 800c43a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c43c:	4643      	mov	r3, r8
 800c43e:	463a      	mov	r2, r7
 800c440:	4628      	mov	r0, r5
 800c442:	47b0      	blx	r6
 800c444:	2800      	cmp	r0, #0
 800c446:	dc06      	bgt.n	800c456 <__sflush_r+0xfe>
 800c448:	89a3      	ldrh	r3, [r4, #12]
 800c44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c44e:	81a3      	strh	r3, [r4, #12]
 800c450:	f04f 30ff 	mov.w	r0, #4294967295
 800c454:	e78e      	b.n	800c374 <__sflush_r+0x1c>
 800c456:	4407      	add	r7, r0
 800c458:	eba8 0800 	sub.w	r8, r8, r0
 800c45c:	e7e9      	b.n	800c432 <__sflush_r+0xda>
 800c45e:	bf00      	nop
 800c460:	20400001 	.word	0x20400001

0800c464 <_fflush_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	690b      	ldr	r3, [r1, #16]
 800c468:	4605      	mov	r5, r0
 800c46a:	460c      	mov	r4, r1
 800c46c:	b913      	cbnz	r3, 800c474 <_fflush_r+0x10>
 800c46e:	2500      	movs	r5, #0
 800c470:	4628      	mov	r0, r5
 800c472:	bd38      	pop	{r3, r4, r5, pc}
 800c474:	b118      	cbz	r0, 800c47e <_fflush_r+0x1a>
 800c476:	6983      	ldr	r3, [r0, #24]
 800c478:	b90b      	cbnz	r3, 800c47e <_fflush_r+0x1a>
 800c47a:	f000 f887 	bl	800c58c <__sinit>
 800c47e:	4b14      	ldr	r3, [pc, #80]	; (800c4d0 <_fflush_r+0x6c>)
 800c480:	429c      	cmp	r4, r3
 800c482:	d11b      	bne.n	800c4bc <_fflush_r+0x58>
 800c484:	686c      	ldr	r4, [r5, #4]
 800c486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d0ef      	beq.n	800c46e <_fflush_r+0xa>
 800c48e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c490:	07d0      	lsls	r0, r2, #31
 800c492:	d404      	bmi.n	800c49e <_fflush_r+0x3a>
 800c494:	0599      	lsls	r1, r3, #22
 800c496:	d402      	bmi.n	800c49e <_fflush_r+0x3a>
 800c498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c49a:	f000 f915 	bl	800c6c8 <__retarget_lock_acquire_recursive>
 800c49e:	4628      	mov	r0, r5
 800c4a0:	4621      	mov	r1, r4
 800c4a2:	f7ff ff59 	bl	800c358 <__sflush_r>
 800c4a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4a8:	07da      	lsls	r2, r3, #31
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	d4e0      	bmi.n	800c470 <_fflush_r+0xc>
 800c4ae:	89a3      	ldrh	r3, [r4, #12]
 800c4b0:	059b      	lsls	r3, r3, #22
 800c4b2:	d4dd      	bmi.n	800c470 <_fflush_r+0xc>
 800c4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4b6:	f000 f908 	bl	800c6ca <__retarget_lock_release_recursive>
 800c4ba:	e7d9      	b.n	800c470 <_fflush_r+0xc>
 800c4bc:	4b05      	ldr	r3, [pc, #20]	; (800c4d4 <_fflush_r+0x70>)
 800c4be:	429c      	cmp	r4, r3
 800c4c0:	d101      	bne.n	800c4c6 <_fflush_r+0x62>
 800c4c2:	68ac      	ldr	r4, [r5, #8]
 800c4c4:	e7df      	b.n	800c486 <_fflush_r+0x22>
 800c4c6:	4b04      	ldr	r3, [pc, #16]	; (800c4d8 <_fflush_r+0x74>)
 800c4c8:	429c      	cmp	r4, r3
 800c4ca:	bf08      	it	eq
 800c4cc:	68ec      	ldreq	r4, [r5, #12]
 800c4ce:	e7da      	b.n	800c486 <_fflush_r+0x22>
 800c4d0:	0800ce5c 	.word	0x0800ce5c
 800c4d4:	0800ce7c 	.word	0x0800ce7c
 800c4d8:	0800ce3c 	.word	0x0800ce3c

0800c4dc <std>:
 800c4dc:	2300      	movs	r3, #0
 800c4de:	b510      	push	{r4, lr}
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	e9c0 3300 	strd	r3, r3, [r0]
 800c4e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4ea:	6083      	str	r3, [r0, #8]
 800c4ec:	8181      	strh	r1, [r0, #12]
 800c4ee:	6643      	str	r3, [r0, #100]	; 0x64
 800c4f0:	81c2      	strh	r2, [r0, #14]
 800c4f2:	6183      	str	r3, [r0, #24]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	2208      	movs	r2, #8
 800c4f8:	305c      	adds	r0, #92	; 0x5c
 800c4fa:	f7fb fdcb 	bl	8008094 <memset>
 800c4fe:	4b05      	ldr	r3, [pc, #20]	; (800c514 <std+0x38>)
 800c500:	6263      	str	r3, [r4, #36]	; 0x24
 800c502:	4b05      	ldr	r3, [pc, #20]	; (800c518 <std+0x3c>)
 800c504:	62a3      	str	r3, [r4, #40]	; 0x28
 800c506:	4b05      	ldr	r3, [pc, #20]	; (800c51c <std+0x40>)
 800c508:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c50a:	4b05      	ldr	r3, [pc, #20]	; (800c520 <std+0x44>)
 800c50c:	6224      	str	r4, [r4, #32]
 800c50e:	6323      	str	r3, [r4, #48]	; 0x30
 800c510:	bd10      	pop	{r4, pc}
 800c512:	bf00      	nop
 800c514:	0800c831 	.word	0x0800c831
 800c518:	0800c853 	.word	0x0800c853
 800c51c:	0800c88b 	.word	0x0800c88b
 800c520:	0800c8af 	.word	0x0800c8af

0800c524 <_cleanup_r>:
 800c524:	4901      	ldr	r1, [pc, #4]	; (800c52c <_cleanup_r+0x8>)
 800c526:	f000 b8af 	b.w	800c688 <_fwalk_reent>
 800c52a:	bf00      	nop
 800c52c:	0800c465 	.word	0x0800c465

0800c530 <__sfmoreglue>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	2268      	movs	r2, #104	; 0x68
 800c534:	1e4d      	subs	r5, r1, #1
 800c536:	4355      	muls	r5, r2
 800c538:	460e      	mov	r6, r1
 800c53a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c53e:	f7ff fa59 	bl	800b9f4 <_malloc_r>
 800c542:	4604      	mov	r4, r0
 800c544:	b140      	cbz	r0, 800c558 <__sfmoreglue+0x28>
 800c546:	2100      	movs	r1, #0
 800c548:	e9c0 1600 	strd	r1, r6, [r0]
 800c54c:	300c      	adds	r0, #12
 800c54e:	60a0      	str	r0, [r4, #8]
 800c550:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c554:	f7fb fd9e 	bl	8008094 <memset>
 800c558:	4620      	mov	r0, r4
 800c55a:	bd70      	pop	{r4, r5, r6, pc}

0800c55c <__sfp_lock_acquire>:
 800c55c:	4801      	ldr	r0, [pc, #4]	; (800c564 <__sfp_lock_acquire+0x8>)
 800c55e:	f000 b8b3 	b.w	800c6c8 <__retarget_lock_acquire_recursive>
 800c562:	bf00      	nop
 800c564:	20000799 	.word	0x20000799

0800c568 <__sfp_lock_release>:
 800c568:	4801      	ldr	r0, [pc, #4]	; (800c570 <__sfp_lock_release+0x8>)
 800c56a:	f000 b8ae 	b.w	800c6ca <__retarget_lock_release_recursive>
 800c56e:	bf00      	nop
 800c570:	20000799 	.word	0x20000799

0800c574 <__sinit_lock_acquire>:
 800c574:	4801      	ldr	r0, [pc, #4]	; (800c57c <__sinit_lock_acquire+0x8>)
 800c576:	f000 b8a7 	b.w	800c6c8 <__retarget_lock_acquire_recursive>
 800c57a:	bf00      	nop
 800c57c:	2000079a 	.word	0x2000079a

0800c580 <__sinit_lock_release>:
 800c580:	4801      	ldr	r0, [pc, #4]	; (800c588 <__sinit_lock_release+0x8>)
 800c582:	f000 b8a2 	b.w	800c6ca <__retarget_lock_release_recursive>
 800c586:	bf00      	nop
 800c588:	2000079a 	.word	0x2000079a

0800c58c <__sinit>:
 800c58c:	b510      	push	{r4, lr}
 800c58e:	4604      	mov	r4, r0
 800c590:	f7ff fff0 	bl	800c574 <__sinit_lock_acquire>
 800c594:	69a3      	ldr	r3, [r4, #24]
 800c596:	b11b      	cbz	r3, 800c5a0 <__sinit+0x14>
 800c598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c59c:	f7ff bff0 	b.w	800c580 <__sinit_lock_release>
 800c5a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c5a4:	6523      	str	r3, [r4, #80]	; 0x50
 800c5a6:	4b13      	ldr	r3, [pc, #76]	; (800c5f4 <__sinit+0x68>)
 800c5a8:	4a13      	ldr	r2, [pc, #76]	; (800c5f8 <__sinit+0x6c>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800c5ae:	42a3      	cmp	r3, r4
 800c5b0:	bf04      	itt	eq
 800c5b2:	2301      	moveq	r3, #1
 800c5b4:	61a3      	streq	r3, [r4, #24]
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f000 f820 	bl	800c5fc <__sfp>
 800c5bc:	6060      	str	r0, [r4, #4]
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f000 f81c 	bl	800c5fc <__sfp>
 800c5c4:	60a0      	str	r0, [r4, #8]
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f000 f818 	bl	800c5fc <__sfp>
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	60e0      	str	r0, [r4, #12]
 800c5d0:	2104      	movs	r1, #4
 800c5d2:	6860      	ldr	r0, [r4, #4]
 800c5d4:	f7ff ff82 	bl	800c4dc <std>
 800c5d8:	68a0      	ldr	r0, [r4, #8]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	2109      	movs	r1, #9
 800c5de:	f7ff ff7d 	bl	800c4dc <std>
 800c5e2:	68e0      	ldr	r0, [r4, #12]
 800c5e4:	2202      	movs	r2, #2
 800c5e6:	2112      	movs	r1, #18
 800c5e8:	f7ff ff78 	bl	800c4dc <std>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	61a3      	str	r3, [r4, #24]
 800c5f0:	e7d2      	b.n	800c598 <__sinit+0xc>
 800c5f2:	bf00      	nop
 800c5f4:	0800c9f4 	.word	0x0800c9f4
 800c5f8:	0800c525 	.word	0x0800c525

0800c5fc <__sfp>:
 800c5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fe:	4607      	mov	r7, r0
 800c600:	f7ff ffac 	bl	800c55c <__sfp_lock_acquire>
 800c604:	4b1e      	ldr	r3, [pc, #120]	; (800c680 <__sfp+0x84>)
 800c606:	681e      	ldr	r6, [r3, #0]
 800c608:	69b3      	ldr	r3, [r6, #24]
 800c60a:	b913      	cbnz	r3, 800c612 <__sfp+0x16>
 800c60c:	4630      	mov	r0, r6
 800c60e:	f7ff ffbd 	bl	800c58c <__sinit>
 800c612:	3648      	adds	r6, #72	; 0x48
 800c614:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c618:	3b01      	subs	r3, #1
 800c61a:	d503      	bpl.n	800c624 <__sfp+0x28>
 800c61c:	6833      	ldr	r3, [r6, #0]
 800c61e:	b30b      	cbz	r3, 800c664 <__sfp+0x68>
 800c620:	6836      	ldr	r6, [r6, #0]
 800c622:	e7f7      	b.n	800c614 <__sfp+0x18>
 800c624:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c628:	b9d5      	cbnz	r5, 800c660 <__sfp+0x64>
 800c62a:	4b16      	ldr	r3, [pc, #88]	; (800c684 <__sfp+0x88>)
 800c62c:	60e3      	str	r3, [r4, #12]
 800c62e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c632:	6665      	str	r5, [r4, #100]	; 0x64
 800c634:	f000 f847 	bl	800c6c6 <__retarget_lock_init_recursive>
 800c638:	f7ff ff96 	bl	800c568 <__sfp_lock_release>
 800c63c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c640:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c644:	6025      	str	r5, [r4, #0]
 800c646:	61a5      	str	r5, [r4, #24]
 800c648:	2208      	movs	r2, #8
 800c64a:	4629      	mov	r1, r5
 800c64c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c650:	f7fb fd20 	bl	8008094 <memset>
 800c654:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c658:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c65c:	4620      	mov	r0, r4
 800c65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c660:	3468      	adds	r4, #104	; 0x68
 800c662:	e7d9      	b.n	800c618 <__sfp+0x1c>
 800c664:	2104      	movs	r1, #4
 800c666:	4638      	mov	r0, r7
 800c668:	f7ff ff62 	bl	800c530 <__sfmoreglue>
 800c66c:	4604      	mov	r4, r0
 800c66e:	6030      	str	r0, [r6, #0]
 800c670:	2800      	cmp	r0, #0
 800c672:	d1d5      	bne.n	800c620 <__sfp+0x24>
 800c674:	f7ff ff78 	bl	800c568 <__sfp_lock_release>
 800c678:	230c      	movs	r3, #12
 800c67a:	603b      	str	r3, [r7, #0]
 800c67c:	e7ee      	b.n	800c65c <__sfp+0x60>
 800c67e:	bf00      	nop
 800c680:	0800c9f4 	.word	0x0800c9f4
 800c684:	ffff0001 	.word	0xffff0001

0800c688 <_fwalk_reent>:
 800c688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c68c:	4606      	mov	r6, r0
 800c68e:	4688      	mov	r8, r1
 800c690:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c694:	2700      	movs	r7, #0
 800c696:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c69a:	f1b9 0901 	subs.w	r9, r9, #1
 800c69e:	d505      	bpl.n	800c6ac <_fwalk_reent+0x24>
 800c6a0:	6824      	ldr	r4, [r4, #0]
 800c6a2:	2c00      	cmp	r4, #0
 800c6a4:	d1f7      	bne.n	800c696 <_fwalk_reent+0xe>
 800c6a6:	4638      	mov	r0, r7
 800c6a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ac:	89ab      	ldrh	r3, [r5, #12]
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d907      	bls.n	800c6c2 <_fwalk_reent+0x3a>
 800c6b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	d003      	beq.n	800c6c2 <_fwalk_reent+0x3a>
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	4630      	mov	r0, r6
 800c6be:	47c0      	blx	r8
 800c6c0:	4307      	orrs	r7, r0
 800c6c2:	3568      	adds	r5, #104	; 0x68
 800c6c4:	e7e9      	b.n	800c69a <_fwalk_reent+0x12>

0800c6c6 <__retarget_lock_init_recursive>:
 800c6c6:	4770      	bx	lr

0800c6c8 <__retarget_lock_acquire_recursive>:
 800c6c8:	4770      	bx	lr

0800c6ca <__retarget_lock_release_recursive>:
 800c6ca:	4770      	bx	lr

0800c6cc <__swhatbuf_r>:
 800c6cc:	b570      	push	{r4, r5, r6, lr}
 800c6ce:	460e      	mov	r6, r1
 800c6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d4:	2900      	cmp	r1, #0
 800c6d6:	b096      	sub	sp, #88	; 0x58
 800c6d8:	4614      	mov	r4, r2
 800c6da:	461d      	mov	r5, r3
 800c6dc:	da08      	bge.n	800c6f0 <__swhatbuf_r+0x24>
 800c6de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	602a      	str	r2, [r5, #0]
 800c6e6:	061a      	lsls	r2, r3, #24
 800c6e8:	d410      	bmi.n	800c70c <__swhatbuf_r+0x40>
 800c6ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6ee:	e00e      	b.n	800c70e <__swhatbuf_r+0x42>
 800c6f0:	466a      	mov	r2, sp
 800c6f2:	f000 f903 	bl	800c8fc <_fstat_r>
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	dbf1      	blt.n	800c6de <__swhatbuf_r+0x12>
 800c6fa:	9a01      	ldr	r2, [sp, #4]
 800c6fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c700:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c704:	425a      	negs	r2, r3
 800c706:	415a      	adcs	r2, r3
 800c708:	602a      	str	r2, [r5, #0]
 800c70a:	e7ee      	b.n	800c6ea <__swhatbuf_r+0x1e>
 800c70c:	2340      	movs	r3, #64	; 0x40
 800c70e:	2000      	movs	r0, #0
 800c710:	6023      	str	r3, [r4, #0]
 800c712:	b016      	add	sp, #88	; 0x58
 800c714:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c718 <__smakebuf_r>:
 800c718:	898b      	ldrh	r3, [r1, #12]
 800c71a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c71c:	079d      	lsls	r5, r3, #30
 800c71e:	4606      	mov	r6, r0
 800c720:	460c      	mov	r4, r1
 800c722:	d507      	bpl.n	800c734 <__smakebuf_r+0x1c>
 800c724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	6123      	str	r3, [r4, #16]
 800c72c:	2301      	movs	r3, #1
 800c72e:	6163      	str	r3, [r4, #20]
 800c730:	b002      	add	sp, #8
 800c732:	bd70      	pop	{r4, r5, r6, pc}
 800c734:	ab01      	add	r3, sp, #4
 800c736:	466a      	mov	r2, sp
 800c738:	f7ff ffc8 	bl	800c6cc <__swhatbuf_r>
 800c73c:	9900      	ldr	r1, [sp, #0]
 800c73e:	4605      	mov	r5, r0
 800c740:	4630      	mov	r0, r6
 800c742:	f7ff f957 	bl	800b9f4 <_malloc_r>
 800c746:	b948      	cbnz	r0, 800c75c <__smakebuf_r+0x44>
 800c748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c74c:	059a      	lsls	r2, r3, #22
 800c74e:	d4ef      	bmi.n	800c730 <__smakebuf_r+0x18>
 800c750:	f023 0303 	bic.w	r3, r3, #3
 800c754:	f043 0302 	orr.w	r3, r3, #2
 800c758:	81a3      	strh	r3, [r4, #12]
 800c75a:	e7e3      	b.n	800c724 <__smakebuf_r+0xc>
 800c75c:	4b0d      	ldr	r3, [pc, #52]	; (800c794 <__smakebuf_r+0x7c>)
 800c75e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c760:	89a3      	ldrh	r3, [r4, #12]
 800c762:	6020      	str	r0, [r4, #0]
 800c764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c768:	81a3      	strh	r3, [r4, #12]
 800c76a:	9b00      	ldr	r3, [sp, #0]
 800c76c:	6163      	str	r3, [r4, #20]
 800c76e:	9b01      	ldr	r3, [sp, #4]
 800c770:	6120      	str	r0, [r4, #16]
 800c772:	b15b      	cbz	r3, 800c78c <__smakebuf_r+0x74>
 800c774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c778:	4630      	mov	r0, r6
 800c77a:	f000 f8d1 	bl	800c920 <_isatty_r>
 800c77e:	b128      	cbz	r0, 800c78c <__smakebuf_r+0x74>
 800c780:	89a3      	ldrh	r3, [r4, #12]
 800c782:	f023 0303 	bic.w	r3, r3, #3
 800c786:	f043 0301 	orr.w	r3, r3, #1
 800c78a:	81a3      	strh	r3, [r4, #12]
 800c78c:	89a0      	ldrh	r0, [r4, #12]
 800c78e:	4305      	orrs	r5, r0
 800c790:	81a5      	strh	r5, [r4, #12]
 800c792:	e7cd      	b.n	800c730 <__smakebuf_r+0x18>
 800c794:	0800c525 	.word	0x0800c525

0800c798 <_malloc_usable_size_r>:
 800c798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c79c:	1f18      	subs	r0, r3, #4
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	bfbc      	itt	lt
 800c7a2:	580b      	ldrlt	r3, [r1, r0]
 800c7a4:	18c0      	addlt	r0, r0, r3
 800c7a6:	4770      	bx	lr

0800c7a8 <_raise_r>:
 800c7a8:	291f      	cmp	r1, #31
 800c7aa:	b538      	push	{r3, r4, r5, lr}
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	460d      	mov	r5, r1
 800c7b0:	d904      	bls.n	800c7bc <_raise_r+0x14>
 800c7b2:	2316      	movs	r3, #22
 800c7b4:	6003      	str	r3, [r0, #0]
 800c7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ba:	bd38      	pop	{r3, r4, r5, pc}
 800c7bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c7be:	b112      	cbz	r2, 800c7c6 <_raise_r+0x1e>
 800c7c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7c4:	b94b      	cbnz	r3, 800c7da <_raise_r+0x32>
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f000 f830 	bl	800c82c <_getpid_r>
 800c7cc:	462a      	mov	r2, r5
 800c7ce:	4601      	mov	r1, r0
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7d6:	f000 b817 	b.w	800c808 <_kill_r>
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d00a      	beq.n	800c7f4 <_raise_r+0x4c>
 800c7de:	1c59      	adds	r1, r3, #1
 800c7e0:	d103      	bne.n	800c7ea <_raise_r+0x42>
 800c7e2:	2316      	movs	r3, #22
 800c7e4:	6003      	str	r3, [r0, #0]
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	e7e7      	b.n	800c7ba <_raise_r+0x12>
 800c7ea:	2400      	movs	r4, #0
 800c7ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	4798      	blx	r3
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	e7e0      	b.n	800c7ba <_raise_r+0x12>

0800c7f8 <raise>:
 800c7f8:	4b02      	ldr	r3, [pc, #8]	; (800c804 <raise+0xc>)
 800c7fa:	4601      	mov	r1, r0
 800c7fc:	6818      	ldr	r0, [r3, #0]
 800c7fe:	f7ff bfd3 	b.w	800c7a8 <_raise_r>
 800c802:	bf00      	nop
 800c804:	20000074 	.word	0x20000074

0800c808 <_kill_r>:
 800c808:	b538      	push	{r3, r4, r5, lr}
 800c80a:	4d07      	ldr	r5, [pc, #28]	; (800c828 <_kill_r+0x20>)
 800c80c:	2300      	movs	r3, #0
 800c80e:	4604      	mov	r4, r0
 800c810:	4608      	mov	r0, r1
 800c812:	4611      	mov	r1, r2
 800c814:	602b      	str	r3, [r5, #0]
 800c816:	f7f5 fb43 	bl	8001ea0 <_kill>
 800c81a:	1c43      	adds	r3, r0, #1
 800c81c:	d102      	bne.n	800c824 <_kill_r+0x1c>
 800c81e:	682b      	ldr	r3, [r5, #0]
 800c820:	b103      	cbz	r3, 800c824 <_kill_r+0x1c>
 800c822:	6023      	str	r3, [r4, #0]
 800c824:	bd38      	pop	{r3, r4, r5, pc}
 800c826:	bf00      	nop
 800c828:	20000794 	.word	0x20000794

0800c82c <_getpid_r>:
 800c82c:	f7f5 bb30 	b.w	8001e90 <_getpid>

0800c830 <__sread>:
 800c830:	b510      	push	{r4, lr}
 800c832:	460c      	mov	r4, r1
 800c834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c838:	f000 f894 	bl	800c964 <_read_r>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	bfab      	itete	ge
 800c840:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c842:	89a3      	ldrhlt	r3, [r4, #12]
 800c844:	181b      	addge	r3, r3, r0
 800c846:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c84a:	bfac      	ite	ge
 800c84c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c84e:	81a3      	strhlt	r3, [r4, #12]
 800c850:	bd10      	pop	{r4, pc}

0800c852 <__swrite>:
 800c852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c856:	461f      	mov	r7, r3
 800c858:	898b      	ldrh	r3, [r1, #12]
 800c85a:	05db      	lsls	r3, r3, #23
 800c85c:	4605      	mov	r5, r0
 800c85e:	460c      	mov	r4, r1
 800c860:	4616      	mov	r6, r2
 800c862:	d505      	bpl.n	800c870 <__swrite+0x1e>
 800c864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c868:	2302      	movs	r3, #2
 800c86a:	2200      	movs	r2, #0
 800c86c:	f000 f868 	bl	800c940 <_lseek_r>
 800c870:	89a3      	ldrh	r3, [r4, #12]
 800c872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c87a:	81a3      	strh	r3, [r4, #12]
 800c87c:	4632      	mov	r2, r6
 800c87e:	463b      	mov	r3, r7
 800c880:	4628      	mov	r0, r5
 800c882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c886:	f000 b817 	b.w	800c8b8 <_write_r>

0800c88a <__sseek>:
 800c88a:	b510      	push	{r4, lr}
 800c88c:	460c      	mov	r4, r1
 800c88e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c892:	f000 f855 	bl	800c940 <_lseek_r>
 800c896:	1c43      	adds	r3, r0, #1
 800c898:	89a3      	ldrh	r3, [r4, #12]
 800c89a:	bf15      	itete	ne
 800c89c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c89e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c8a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c8a6:	81a3      	strheq	r3, [r4, #12]
 800c8a8:	bf18      	it	ne
 800c8aa:	81a3      	strhne	r3, [r4, #12]
 800c8ac:	bd10      	pop	{r4, pc}

0800c8ae <__sclose>:
 800c8ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8b2:	f000 b813 	b.w	800c8dc <_close_r>
	...

0800c8b8 <_write_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4d07      	ldr	r5, [pc, #28]	; (800c8d8 <_write_r+0x20>)
 800c8bc:	4604      	mov	r4, r0
 800c8be:	4608      	mov	r0, r1
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	602a      	str	r2, [r5, #0]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	f7f5 fb21 	bl	8001f0e <_write>
 800c8cc:	1c43      	adds	r3, r0, #1
 800c8ce:	d102      	bne.n	800c8d6 <_write_r+0x1e>
 800c8d0:	682b      	ldr	r3, [r5, #0]
 800c8d2:	b103      	cbz	r3, 800c8d6 <_write_r+0x1e>
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	20000794 	.word	0x20000794

0800c8dc <_close_r>:
 800c8dc:	b538      	push	{r3, r4, r5, lr}
 800c8de:	4d06      	ldr	r5, [pc, #24]	; (800c8f8 <_close_r+0x1c>)
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	4608      	mov	r0, r1
 800c8e6:	602b      	str	r3, [r5, #0]
 800c8e8:	f7f5 fb2d 	bl	8001f46 <_close>
 800c8ec:	1c43      	adds	r3, r0, #1
 800c8ee:	d102      	bne.n	800c8f6 <_close_r+0x1a>
 800c8f0:	682b      	ldr	r3, [r5, #0]
 800c8f2:	b103      	cbz	r3, 800c8f6 <_close_r+0x1a>
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	bd38      	pop	{r3, r4, r5, pc}
 800c8f8:	20000794 	.word	0x20000794

0800c8fc <_fstat_r>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	4d07      	ldr	r5, [pc, #28]	; (800c91c <_fstat_r+0x20>)
 800c900:	2300      	movs	r3, #0
 800c902:	4604      	mov	r4, r0
 800c904:	4608      	mov	r0, r1
 800c906:	4611      	mov	r1, r2
 800c908:	602b      	str	r3, [r5, #0]
 800c90a:	f7f5 fb28 	bl	8001f5e <_fstat>
 800c90e:	1c43      	adds	r3, r0, #1
 800c910:	d102      	bne.n	800c918 <_fstat_r+0x1c>
 800c912:	682b      	ldr	r3, [r5, #0]
 800c914:	b103      	cbz	r3, 800c918 <_fstat_r+0x1c>
 800c916:	6023      	str	r3, [r4, #0]
 800c918:	bd38      	pop	{r3, r4, r5, pc}
 800c91a:	bf00      	nop
 800c91c:	20000794 	.word	0x20000794

0800c920 <_isatty_r>:
 800c920:	b538      	push	{r3, r4, r5, lr}
 800c922:	4d06      	ldr	r5, [pc, #24]	; (800c93c <_isatty_r+0x1c>)
 800c924:	2300      	movs	r3, #0
 800c926:	4604      	mov	r4, r0
 800c928:	4608      	mov	r0, r1
 800c92a:	602b      	str	r3, [r5, #0]
 800c92c:	f7f5 fb27 	bl	8001f7e <_isatty>
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	d102      	bne.n	800c93a <_isatty_r+0x1a>
 800c934:	682b      	ldr	r3, [r5, #0]
 800c936:	b103      	cbz	r3, 800c93a <_isatty_r+0x1a>
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	bd38      	pop	{r3, r4, r5, pc}
 800c93c:	20000794 	.word	0x20000794

0800c940 <_lseek_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4d07      	ldr	r5, [pc, #28]	; (800c960 <_lseek_r+0x20>)
 800c944:	4604      	mov	r4, r0
 800c946:	4608      	mov	r0, r1
 800c948:	4611      	mov	r1, r2
 800c94a:	2200      	movs	r2, #0
 800c94c:	602a      	str	r2, [r5, #0]
 800c94e:	461a      	mov	r2, r3
 800c950:	f7f5 fb20 	bl	8001f94 <_lseek>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d102      	bne.n	800c95e <_lseek_r+0x1e>
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	b103      	cbz	r3, 800c95e <_lseek_r+0x1e>
 800c95c:	6023      	str	r3, [r4, #0]
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	20000794 	.word	0x20000794

0800c964 <_read_r>:
 800c964:	b538      	push	{r3, r4, r5, lr}
 800c966:	4d07      	ldr	r5, [pc, #28]	; (800c984 <_read_r+0x20>)
 800c968:	4604      	mov	r4, r0
 800c96a:	4608      	mov	r0, r1
 800c96c:	4611      	mov	r1, r2
 800c96e:	2200      	movs	r2, #0
 800c970:	602a      	str	r2, [r5, #0]
 800c972:	461a      	mov	r2, r3
 800c974:	f7f5 faae 	bl	8001ed4 <_read>
 800c978:	1c43      	adds	r3, r0, #1
 800c97a:	d102      	bne.n	800c982 <_read_r+0x1e>
 800c97c:	682b      	ldr	r3, [r5, #0]
 800c97e:	b103      	cbz	r3, 800c982 <_read_r+0x1e>
 800c980:	6023      	str	r3, [r4, #0]
 800c982:	bd38      	pop	{r3, r4, r5, pc}
 800c984:	20000794 	.word	0x20000794

0800c988 <_init>:
 800c988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98a:	bf00      	nop
 800c98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c98e:	bc08      	pop	{r3}
 800c990:	469e      	mov	lr, r3
 800c992:	4770      	bx	lr

0800c994 <_fini>:
 800c994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c996:	bf00      	nop
 800c998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c99a:	bc08      	pop	{r3}
 800c99c:	469e      	mov	lr, r3
 800c99e:	4770      	bx	lr
