
prj_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800ddc8  0800ddc8  0001ddc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4a0  0800e4a0  000202d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e4a0  0800e4a0  000202d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e4a0  0800e4a0  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4a0  0800e4a0  0001e4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4a4  0800e4a4  0001e4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800e4a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d0  2**0
                  CONTENTS
 10 .bss          00000564  200002d0  200002d0  000202d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000834  20000834  000202d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d67b  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003539  00000000  00000000  0003d97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  00040eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001688  00000000  00000000  00042660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021573  00000000  00000000  00043ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e241  00000000  00000000  0006525b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8a2e  00000000  00000000  0008349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014beca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d1c  00000000  00000000  0014bf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ddac 	.word	0x0800ddac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800ddac 	.word	0x0800ddac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f001 fba0 	bl	800243c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f834 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f000 fa9e 	bl	8001240 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d04:	f000 f906 	bl	8000f14 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d08:	f000 f944 	bl	8000f94 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d0c:	f000 fa76 	bl	80011fc <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000d10:	f000 f890 	bl	8000e34 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000d14:	f000 fa42 	bl	800119c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000d18:	f000 f97a 	bl	8001010 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d1c:	f000 f9c6 	bl	80010ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  programInit();
 8000d20:	f000 fe40 	bl	80019a4 <programInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_IT(&hadc1);
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <main+0x60>)
 8000d26:	f001 fde3 	bl	80028f0 <HAL_ADC_Start_IT>
  HAL_UART_Transmit(&huart3,"TTT to while",12,1000);
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	220c      	movs	r2, #12
 8000d30:	4909      	ldr	r1, [pc, #36]	; (8000d58 <main+0x64>)
 8000d32:	480a      	ldr	r0, [pc, #40]	; (8000d5c <main+0x68>)
 8000d34:	f006 fb4e 	bl	80073d4 <HAL_UART_Transmit>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <main+0x6c>)
 8000d3a:	f005 f947 	bl	8005fcc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000d3e:	4809      	ldr	r0, [pc, #36]	; (8000d64 <main+0x70>)
 8000d40:	f005 f944 	bl	8005fcc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d44:	2100      	movs	r1, #0
 8000d46:	4807      	ldr	r0, [pc, #28]	; (8000d64 <main+0x70>)
 8000d48:	f005 fa0c 	bl	8006164 <HAL_TIM_PWM_Start>

//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0); //B
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);  //A
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);  //C
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);  //D
		programLoop();
 8000d4c:	f000 fe36 	bl	80019bc <programLoop>
  {
 8000d50:	e7fc      	b.n	8000d4c <main+0x58>
 8000d52:	bf00      	nop
 8000d54:	200002ec 	.word	0x200002ec
 8000d58:	0800ddc8 	.word	0x0800ddc8
 8000d5c:	2000048c 	.word	0x2000048c
 8000d60:	200003f4 	.word	0x200003f4
 8000d64:	20000440 	.word	0x20000440

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b09e      	sub	sp, #120	; 0x78
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d72:	2228      	movs	r2, #40	; 0x28
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f007 fb56 	bl	8008428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	223c      	movs	r2, #60	; 0x3c
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f007 fb48 	bl	8008428 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000da0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da6:	2301      	movs	r3, #1
 8000da8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000daa:	2310      	movs	r3, #16
 8000dac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000db8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dbc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 fbdc 	bl	8004580 <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000dce:	f000 fb5b 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000de8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dec:	2101      	movs	r1, #1
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 fc04 	bl	80055fc <HAL_RCC_ClockConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dfa:	f000 fb45 	bl	8001488 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <SystemClock_Config+0xc8>)
 8000e00:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 fe25 	bl	8005a68 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e24:	f000 fb30 	bl	8001488 <Error_Handler>
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3778      	adds	r7, #120	; 0x78
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	000200a4 	.word	0x000200a4

08000e34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e5e:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e64:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e7e:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb0:	4817      	ldr	r0, [pc, #92]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000eb2:	f001 fb3d 	bl	8002530 <HAL_ADC_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ebc:	f000 fae4 	bl	8001488 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4811      	ldr	r0, [pc, #68]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000ecc:	f002 fc58 	bl	8003780 <HAL_ADCEx_MultiModeConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ed6:	f000 fad7 	bl	8001488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000eda:	2304      	movs	r3, #4
 8000edc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_ADC1_Init+0xdc>)
 8000ef8:	f002 f956 	bl	80031a8 <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000f02:	f000 fac1 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200002ec 	.word	0x200002ec

08000f14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <MX_I2C1_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <MX_I2C1_Init+0x7c>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f4e:	480e      	ldr	r0, [pc, #56]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f50:	f003 f91e 	bl	8004190 <HAL_I2C_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f5a:	f000 fa95 	bl	8001488 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f62:	f003 f9a4 	bl	80042ae <HAL_I2CEx_ConfigAnalogFilter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f6c:	f000 fa8c 	bl	8001488 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_I2C1_Init+0x74>)
 8000f74:	f003 f9e6 	bl	8004344 <HAL_I2CEx_ConfigDigitalFilter>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 fa83 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000033c 	.word	0x2000033c
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	2000090e 	.word	0x2000090e

08000f94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_SPI1_Init+0x74>)
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <MX_SPI1_Init+0x78>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fae:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fca:	2208      	movs	r2, #8
 8000fcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_SPI1_Init+0x74>)
 8000fee:	2208      	movs	r2, #8
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_SPI1_Init+0x74>)
 8000ff4:	f004 fee8 	bl	8005dc8 <HAL_SPI_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ffe:	f000 fa43 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000390 	.word	0x20000390
 800100c:	40013000 	.word	0x40013000

08001010 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001030:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001034:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3000-1;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001038:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800103c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001046:	f240 32e7 	movw	r2, #999	; 0x3e7
 800104a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_TIM2_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001058:	4813      	ldr	r0, [pc, #76]	; (80010a8 <MX_TIM2_Init+0x98>)
 800105a:	f004 ff60 	bl	8005f1e <HAL_TIM_Base_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001064:	f000 fa10 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	4619      	mov	r1, r3
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001076:	f005 fba9 	bl	80067cc <HAL_TIM_ConfigClockSource>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001080:	f000 fa02 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_TIM2_Init+0x98>)
 8001092:	f006 f8b3 	bl	80071fc <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800109c:	f000 f9f4 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200003f4 	.word	0x200003f4

080010ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	; 0x38
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010de:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <MX_TIM3_Init+0xe8>)
 80010e0:	4a2d      	ldr	r2, [pc, #180]	; (8001198 <MX_TIM3_Init+0xec>)
 80010e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010e4:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <MX_TIM3_Init+0xe8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <MX_TIM3_Init+0xe8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010f0:	4b28      	ldr	r3, [pc, #160]	; (8001194 <MX_TIM3_Init+0xe8>)
 80010f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <MX_TIM3_Init+0xe8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001104:	4823      	ldr	r0, [pc, #140]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001106:	f004 ff0a 	bl	8005f1e <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001110:	f000 f9ba 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800111a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111e:	4619      	mov	r1, r3
 8001120:	481c      	ldr	r0, [pc, #112]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001122:	f005 fb53 	bl	80067cc <HAL_TIM_ConfigClockSource>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800112c:	f000 f9ac 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001130:	4818      	ldr	r0, [pc, #96]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001132:	f004 ffb5 	bl	80060a0 <HAL_TIM_PWM_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800113c:	f000 f9a4 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4811      	ldr	r0, [pc, #68]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001150:	f006 f854 	bl	80071fc <HAL_TIMEx_MasterConfigSynchronization>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800115a:	f000 f995 	bl	8001488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115e:	2360      	movs	r3, #96	; 0x60
 8001160:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001176:	f005 fa15 	bl	80065a4 <HAL_TIM_PWM_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001180:	f000 f982 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <MX_TIM3_Init+0xe8>)
 8001186:	f000 ff27 	bl	8001fd8 <HAL_TIM_MspPostInit>

}
 800118a:	bf00      	nop
 800118c:	3738      	adds	r7, #56	; 0x38
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000440 	.word	0x20000440
 8001198:	40000400 	.word	0x40000400

0800119c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011a2:	4a15      	ldr	r2, [pc, #84]	; (80011f8 <MX_USART3_UART_Init+0x5c>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART3_UART_Init+0x58>)
 80011e0:	f006 f8aa 	bl	8007338 <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011ea:	f000 f94d 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000048c 	.word	0x2000048c
 80011f8:	40004800 	.word	0x40004800

080011fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <MX_USB_PCD_Init+0x40>)
 8001204:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 8001208:	2208      	movs	r2, #8
 800120a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 800120e:	2202      	movs	r2, #2
 8001210:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 8001214:	2202      	movs	r2, #2
 8001216:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_USB_PCD_Init+0x3c>)
 8001226:	f003 f8d9 	bl	80043dc <HAL_PCD_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001230:	f000 f92a 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000514 	.word	0x20000514
 800123c:	40005c00 	.word	0x40005c00

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001256:	4b86      	ldr	r3, [pc, #536]	; (8001470 <MX_GPIO_Init+0x230>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4a85      	ldr	r2, [pc, #532]	; (8001470 <MX_GPIO_Init+0x230>)
 800125c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001260:	6153      	str	r3, [r2, #20]
 8001262:	4b83      	ldr	r3, [pc, #524]	; (8001470 <MX_GPIO_Init+0x230>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	4b80      	ldr	r3, [pc, #512]	; (8001470 <MX_GPIO_Init+0x230>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	4a7f      	ldr	r2, [pc, #508]	; (8001470 <MX_GPIO_Init+0x230>)
 8001274:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001278:	6153      	str	r3, [r2, #20]
 800127a:	4b7d      	ldr	r3, [pc, #500]	; (8001470 <MX_GPIO_Init+0x230>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001286:	4b7a      	ldr	r3, [pc, #488]	; (8001470 <MX_GPIO_Init+0x230>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a79      	ldr	r2, [pc, #484]	; (8001470 <MX_GPIO_Init+0x230>)
 800128c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001290:	6153      	str	r3, [r2, #20]
 8001292:	4b77      	ldr	r3, [pc, #476]	; (8001470 <MX_GPIO_Init+0x230>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b74      	ldr	r3, [pc, #464]	; (8001470 <MX_GPIO_Init+0x230>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4a73      	ldr	r2, [pc, #460]	; (8001470 <MX_GPIO_Init+0x230>)
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	6153      	str	r3, [r2, #20]
 80012aa:	4b71      	ldr	r3, [pc, #452]	; (8001470 <MX_GPIO_Init+0x230>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b6e      	ldr	r3, [pc, #440]	; (8001470 <MX_GPIO_Init+0x230>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	4a6d      	ldr	r2, [pc, #436]	; (8001470 <MX_GPIO_Init+0x230>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6153      	str	r3, [r2, #20]
 80012c2:	4b6b      	ldr	r3, [pc, #428]	; (8001470 <MX_GPIO_Init+0x230>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	4b68      	ldr	r3, [pc, #416]	; (8001470 <MX_GPIO_Init+0x230>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4a67      	ldr	r2, [pc, #412]	; (8001470 <MX_GPIO_Init+0x230>)
 80012d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012d8:	6153      	str	r3, [r2, #20]
 80012da:	4b65      	ldr	r3, [pc, #404]	; (8001470 <MX_GPIO_Init+0x230>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80012e6:	2200      	movs	r2, #0
 80012e8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80012ec:	4861      	ldr	r0, [pc, #388]	; (8001474 <MX_GPIO_Init+0x234>)
 80012ee:	f002 ff05 	bl	80040fc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2114      	movs	r1, #20
 80012f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fa:	f002 feff 	bl	80040fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2150      	movs	r1, #80	; 0x50
 8001302:	485d      	ldr	r0, [pc, #372]	; (8001478 <MX_GPIO_Init+0x238>)
 8001304:	f002 fefa 	bl	80040fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f242 0105 	movw	r1, #8197	; 0x2005
 800130e:	485b      	ldr	r0, [pc, #364]	; (800147c <MX_GPIO_Init+0x23c>)
 8001310:	f002 fef4 	bl	80040fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 800131a:	4859      	ldr	r0, [pc, #356]	; (8001480 <MX_GPIO_Init+0x240>)
 800131c:	f002 feee 	bl	80040fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT4_Pin;
 8001320:	2324      	movs	r3, #36	; 0x24
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001324:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	484f      	ldr	r0, [pc, #316]	; (8001474 <MX_GPIO_Init+0x234>)
 8001336:	f002 fd67 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800133a:	f64f 7308 	movw	r3, #65288	; 0xff08
 800133e:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4848      	ldr	r0, [pc, #288]	; (8001474 <MX_GPIO_Init+0x234>)
 8001354:	f002 fd58 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800135c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001362:	2301      	movs	r3, #1
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	4842      	ldr	r0, [pc, #264]	; (8001478 <MX_GPIO_Init+0x238>)
 800136e:	f002 fd4b 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001372:	2301      	movs	r3, #1
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001388:	f002 fd3e 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800138c:	2302      	movs	r3, #2
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001390:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001396:	2301      	movs	r3, #1
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f002 fd30 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80013a8:	2314      	movs	r3, #20
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c2:	f002 fd21 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013c6:	2310      	movs	r3, #16
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	482a      	ldr	r0, [pc, #168]	; (8001484 <MX_GPIO_Init+0x244>)
 80013dc:	f002 fd14 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80013e0:	2350      	movs	r3, #80	; 0x50
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4820      	ldr	r0, [pc, #128]	; (8001478 <MX_GPIO_Init+0x238>)
 80013f8:	f002 fd06 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 80013fc:	f242 0305 	movw	r3, #8197	; 0x2005
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4819      	ldr	r0, [pc, #100]	; (800147c <MX_GPIO_Init+0x23c>)
 8001416:	f002 fcf7 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 800141a:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	4813      	ldr	r0, [pc, #76]	; (8001480 <MX_GPIO_Init+0x240>)
 8001434:	f002 fce8 	bl	8003e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	2006      	movs	r0, #6
 800143e:	f002 fc36 	bl	8003cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001442:	2006      	movs	r0, #6
 8001444:	f002 fc4f 	bl	8003ce6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2007      	movs	r0, #7
 800144e:	f002 fc2e 	bl	8003cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001452:	2007      	movs	r0, #7
 8001454:	f002 fc47 	bl	8003ce6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	200a      	movs	r0, #10
 800145e:	f002 fc26 	bl	8003cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001462:	200a      	movs	r0, #10
 8001464:	f002 fc3f 	bl	8003ce6 <HAL_NVIC_EnableIRQ>

}
 8001468:	bf00      	nop
 800146a:	3730      	adds	r7, #48	; 0x30
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	48001000 	.word	0x48001000
 8001478:	48000800 	.word	0x48000800
 800147c:	48000400 	.word	0x48000400
 8001480:	48000c00 	.word	0x48000c00
 8001484:	48001400 	.word	0x48001400

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	e7fe      	b.n	8001490 <Error_Handler+0x8>
	...

08001494 <PWM_Change_Tone>:

TIM_HandleTypeDef *pwm_timer_buzzer = &htim3; // Point to PWM timer configured in CubeMX
uint32_t pwm_channel_buzz = TIM_CHANNEL_1;  // Specify configured PWM channel

void PWM_Change_Tone(uint32_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
  if (pwm_freq == 0 || pwm_freq > 20000)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d004      	beq.n	80014b0 <PWM_Change_Tone+0x1c>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d937      	bls.n	8001520 <PWM_Change_Tone+0x8c>
  {
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, 0);
 80014b0:	4b52      	ldr	r3, [pc, #328]	; (80015fc <PWM_Change_Tone+0x168>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d105      	bne.n	80014c4 <PWM_Change_Tone+0x30>
 80014b8:	4b51      	ldr	r3, [pc, #324]	; (8001600 <PWM_Change_Tone+0x16c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	635a      	str	r2, [r3, #52]	; 0x34
 80014c2:	e097      	b.n	80015f4 <PWM_Change_Tone+0x160>
 80014c4:	4b4d      	ldr	r3, [pc, #308]	; (80015fc <PWM_Change_Tone+0x168>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d105      	bne.n	80014d8 <PWM_Change_Tone+0x44>
 80014cc:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <PWM_Change_Tone+0x16c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	6393      	str	r3, [r2, #56]	; 0x38
 80014d6:	e08d      	b.n	80015f4 <PWM_Change_Tone+0x160>
 80014d8:	4b48      	ldr	r3, [pc, #288]	; (80015fc <PWM_Change_Tone+0x168>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d105      	bne.n	80014ec <PWM_Change_Tone+0x58>
 80014e0:	4b47      	ldr	r3, [pc, #284]	; (8001600 <PWM_Change_Tone+0x16c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	2300      	movs	r3, #0
 80014e8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80014ea:	e083      	b.n	80015f4 <PWM_Change_Tone+0x160>
 80014ec:	4b43      	ldr	r3, [pc, #268]	; (80015fc <PWM_Change_Tone+0x168>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b0c      	cmp	r3, #12
 80014f2:	d105      	bne.n	8001500 <PWM_Change_Tone+0x6c>
 80014f4:	4b42      	ldr	r3, [pc, #264]	; (8001600 <PWM_Change_Tone+0x16c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	2300      	movs	r3, #0
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	e079      	b.n	80015f4 <PWM_Change_Tone+0x160>
 8001500:	4b3e      	ldr	r3, [pc, #248]	; (80015fc <PWM_Change_Tone+0x168>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b10      	cmp	r3, #16
 8001506:	d105      	bne.n	8001514 <PWM_Change_Tone+0x80>
 8001508:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <PWM_Change_Tone+0x16c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2300      	movs	r3, #0
 8001510:	6593      	str	r3, [r2, #88]	; 0x58
 8001512:	e06f      	b.n	80015f4 <PWM_Change_Tone+0x160>
 8001514:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <PWM_Change_Tone+0x16c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2300      	movs	r3, #0
 800151c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800151e:	e069      	b.n	80015f4 <PWM_Change_Tone+0x160>
  }
  else
  {
    const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8001520:	f004 f9e8 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 8001524:	61f8      	str	r0, [r7, #28]
	const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	4a35      	ldr	r2, [pc, #212]	; (8001604 <PWM_Change_Tone+0x170>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	0b9b      	lsrs	r3, r3, #14
 8001536:	b29b      	uxth	r3, r3
 8001538:	3301      	adds	r3, #1
 800153a:	837b      	strh	r3, [r7, #26]
    const uint32_t timer_clock = internal_clock_freq / prescaler;
 800153c:	8b7b      	ldrh	r3, [r7, #26]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	fbb2 f3f3 	udiv	r3, r2, r3
 8001544:	617b      	str	r3, [r7, #20]
    const uint32_t period_cycles = timer_clock / pwm_freq;
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	613b      	str	r3, [r7, #16]
    const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	4a2b      	ldr	r2, [pc, #172]	; (8001608 <PWM_Change_Tone+0x174>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	09db      	lsrs	r3, r3, #7
 8001560:	60fb      	str	r3, [r7, #12]

    pwm_timer_buzzer->Instance->PSC = prescaler - 1;
 8001562:	8b7b      	ldrh	r3, [r7, #26]
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <PWM_Change_Tone+0x16c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
    pwm_timer_buzzer->Instance->ARR = period_cycles - 1;
 800156e:	4b24      	ldr	r3, [pc, #144]	; (8001600 <PWM_Change_Tone+0x16c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	3a01      	subs	r2, #1
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
    pwm_timer_buzzer->Instance->EGR = TIM_EGR_UG;
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <PWM_Change_Tone+0x16c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2201      	movs	r2, #1
 8001582:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <PWM_Change_Tone+0x168>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <PWM_Change_Tone+0x104>
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <PWM_Change_Tone+0x16c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8001596:	e02d      	b.n	80015f4 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <PWM_Change_Tone+0x168>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b04      	cmp	r3, #4
 800159e:	d105      	bne.n	80015ac <PWM_Change_Tone+0x118>
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <PWM_Change_Tone+0x16c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015aa:	e023      	b.n	80015f4 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <PWM_Change_Tone+0x168>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d105      	bne.n	80015c0 <PWM_Change_Tone+0x12c>
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <PWM_Change_Tone+0x16c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80015be:	e019      	b.n	80015f4 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <PWM_Change_Tone+0x168>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	d105      	bne.n	80015d4 <PWM_Change_Tone+0x140>
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <PWM_Change_Tone+0x16c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015d2:	e00f      	b.n	80015f4 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <PWM_Change_Tone+0x168>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b10      	cmp	r3, #16
 80015da:	d105      	bne.n	80015e8 <PWM_Change_Tone+0x154>
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <PWM_Change_Tone+0x16c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
}
 80015e6:	e005      	b.n	80015f4 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <PWM_Change_Tone+0x16c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80015f2:	e7ff      	b.n	80015f4 <PWM_Change_Tone+0x160>
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000800 	.word	0x20000800
 8001600:	20000000 	.word	0x20000000
 8001604:	45e7b273 	.word	0x45e7b273
 8001608:	10624dd3 	.word	0x10624dd3
 800160c:	00000000 	.word	0x00000000

08001610 <sin_signal>:

void sin_signal(int counter){
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	int max = 10000;
 8001618:	f242 7310 	movw	r3, #10000	; 0x2710
 800161c:	60fb      	str	r3, [r7, #12]
	uint32_t x = (uint32_t) (max * sin(counter * (M_PI  / 180)) + 10000);
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7fe ff80 	bl	8000524 <__aeabi_i2d>
 8001624:	4604      	mov	r4, r0
 8001626:	460d      	mov	r5, r1
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7fe ff7b 	bl	8000524 <__aeabi_i2d>
 800162e:	a318      	add	r3, pc, #96	; (adr r3, 8001690 <sin_signal+0x80>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7fe ffe0 	bl	80005f8 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	ec43 2b17 	vmov	d7, r2, r3
 8001640:	eeb0 0a47 	vmov.f32	s0, s14
 8001644:	eef0 0a67 	vmov.f32	s1, s15
 8001648:	f00b fb66 	bl	800cd18 <sin>
 800164c:	ec53 2b10 	vmov	r2, r3, d0
 8001650:	4620      	mov	r0, r4
 8001652:	4629      	mov	r1, r5
 8001654:	f7fe ffd0 	bl	80005f8 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	a30d      	add	r3, pc, #52	; (adr r3, 8001698 <sin_signal+0x88>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe fe11 	bl	800028c <__adddf3>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	f7ff fa99 	bl	8000ba8 <__aeabi_d2uiz>
 8001676:	4603      	mov	r3, r0
 8001678:	60bb      	str	r3, [r7, #8]
	PWM_Change_Tone(x, 1000);
 800167a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800167e:	68b8      	ldr	r0, [r7, #8]
 8001680:	f7ff ff08 	bl	8001494 <PWM_Change_Tone>
//	printf("%f   %d\n", x, counter);

}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bdb0      	pop	{r4, r5, r7, pc}
 800168c:	f3af 8000 	nop.w
 8001690:	a2529d39 	.word	0xa2529d39
 8001694:	3f91df46 	.word	0x3f91df46
 8001698:	00000000 	.word	0x00000000
 800169c:	40c38800 	.word	0x40c38800

080016a0 <square_signal>:

void square_signal(int counter){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	if (counter >= 96){
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b5f      	cmp	r3, #95	; 0x5f
 80016ac:	dd0c      	ble.n	80016c8 <square_signal+0x28>
		counter = counter % 96;
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <square_signal+0x64>)
 80016b2:	fb83 1302 	smull	r1, r3, r3, r2
 80016b6:	1119      	asrs	r1, r3, #4
 80016b8:	17d3      	asrs	r3, r2, #31
 80016ba:	1ac9      	subs	r1, r1, r3
 80016bc:	460b      	mov	r3, r1
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	440b      	add	r3, r1
 80016c2:	015b      	lsls	r3, r3, #5
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	607b      	str	r3, [r7, #4]

	}

	if (counter < 48) {
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b2f      	cmp	r3, #47	; 0x2f
 80016cc:	dc08      	bgt.n	80016e0 <square_signal+0x40>
		uint32_t x = 20000;
 80016ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 80016d2:	60bb      	str	r3, [r7, #8]
		PWM_Change_Tone(x, 1000);
 80016d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016d8:	68b8      	ldr	r0, [r7, #8]
 80016da:	f7ff fedb 	bl	8001494 <PWM_Change_Tone>
		PWM_Change_Tone(x, 1000);

//		printf("%f   %d\n", x, counter);
	}

}
 80016de:	e00d      	b.n	80016fc <square_signal+0x5c>
	else if (counter >= 48 && counter < 96){
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b2f      	cmp	r3, #47	; 0x2f
 80016e4:	dd0a      	ble.n	80016fc <square_signal+0x5c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b5f      	cmp	r3, #95	; 0x5f
 80016ea:	dc07      	bgt.n	80016fc <square_signal+0x5c>
		uint32_t x = 5000;
 80016ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80016f0:	60fb      	str	r3, [r7, #12]
		PWM_Change_Tone(x, 1000);
 80016f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7ff fecc 	bl	8001494 <PWM_Change_Tone>
}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2aaaaaab 	.word	0x2aaaaaab

08001708 <triangle_signal>:

void triangle_signal(int counter){
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	if (counter >= 96){
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b5f      	cmp	r3, #95	; 0x5f
 8001714:	dd0c      	ble.n	8001730 <triangle_signal+0x28>
		counter = counter % 96;
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <triangle_signal+0x68>)
 800171a:	fb83 1302 	smull	r1, r3, r3, r2
 800171e:	1119      	asrs	r1, r3, #4
 8001720:	17d3      	asrs	r3, r2, #31
 8001722:	1ac9      	subs	r1, r1, r3
 8001724:	460b      	mov	r3, r1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	440b      	add	r3, r1
 800172a:	015b      	lsls	r3, r3, #5
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	607b      	str	r3, [r7, #4]
	}

	if (counter < 80) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b4f      	cmp	r3, #79	; 0x4f
 8001734:	dc0a      	bgt.n	800174c <triangle_signal+0x44>
		uint32_t x = 250 * counter;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	22fa      	movs	r2, #250	; 0xfa
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	60bb      	str	r3, [r7, #8]
		PWM_Change_Tone(x, 1000);
 8001740:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001744:	68b8      	ldr	r0, [r7, #8]
 8001746:	f7ff fea5 	bl	8001494 <PWM_Change_Tone>
		PWM_Change_Tone(x, 1000);

//		printf("%f   %d\n", x, counter);
	}

}
 800174a:	e00c      	b.n	8001766 <triangle_signal+0x5e>
	else if (counter >= 80 && counter < 96){
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b4f      	cmp	r3, #79	; 0x4f
 8001750:	dd09      	ble.n	8001766 <triangle_signal+0x5e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b5f      	cmp	r3, #95	; 0x5f
 8001756:	dc06      	bgt.n	8001766 <triangle_signal+0x5e>
		uint32_t x = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
		PWM_Change_Tone(x, 1000);
 800175c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff fe97 	bl	8001494 <PWM_Change_Tone>
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2aaaaaab 	.word	0x2aaaaaab

08001774 <seven_segment_display_decimal>:
        .digits={0, 0, 0, 0},
        .number = 0};



void seven_segment_display_decimal(uint32_t n) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    if (n < 10) {
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b09      	cmp	r3, #9
 8001780:	d832      	bhi.n	80017e8 <seven_segment_display_decimal+0x74>
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin,
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <seven_segment_display_decimal+0x7c>)
 8001784:	6a18      	ldr	r0, [r3, #32]
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <seven_segment_display_decimal+0x7c>)
 8001788:	8c99      	ldrh	r1, [r3, #36]	; 0x24
                          (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	b2db      	uxtb	r3, r3
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin,
 8001794:	461a      	mov	r2, r3
 8001796:	f002 fcb1 	bl	80040fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin,
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <seven_segment_display_decimal+0x7c>)
 800179c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <seven_segment_display_decimal+0x7c>)
 80017a0:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
                          (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	b2db      	uxtb	r3, r3
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin,
 80017ae:	461a      	mov	r2, r3
 80017b0:	f002 fca4 	bl	80040fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin,
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <seven_segment_display_decimal+0x7c>)
 80017b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <seven_segment_display_decimal+0x7c>)
 80017ba:	8e99      	ldrh	r1, [r3, #52]	; 0x34
                          (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin,
 80017c8:	461a      	mov	r2, r3
 80017ca:	f002 fc97 	bl	80040fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin,
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <seven_segment_display_decimal+0x7c>)
 80017d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <seven_segment_display_decimal+0x7c>)
 80017d4:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
                          (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	08db      	lsrs	r3, r3, #3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin,
 80017e2:	461a      	mov	r2, r3
 80017e4:	f002 fc8a 	bl	80040fc <HAL_GPIO_WritePin>

//        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
    }
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000014 	.word	0x20000014

080017f4 <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i) {
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	e00f      	b.n	8001820 <seven_segment_deactivate_digits+0x2c>
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin,
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <seven_segment_deactivate_digits+0x3c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001808:	4a09      	ldr	r2, [pc, #36]	; (8001830 <seven_segment_deactivate_digits+0x3c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	889b      	ldrh	r3, [r3, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	4619      	mov	r1, r3
 8001816:	f002 fc71 	bl	80040fc <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; ++i) {
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3301      	adds	r3, #1
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b03      	cmp	r3, #3
 8001824:	ddec      	ble.n	8001800 <seven_segment_deactivate_digits+0xc>
                          GPIO_PIN_SET);
    }
}
 8001826:	bf00      	nop
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000014 	.word	0x20000014

08001834 <seven_segment_activate_digit>:

int last_time_on = 0;
void seven_segment_activate_digit(uint32_t d) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    if (d < 4) {
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d828      	bhi.n	8001894 <seven_segment_activate_digit+0x60>
		if(d == (2-state)) {//&& (HAL_GetTick() - last_time_on) > 40){
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <seven_segment_activate_digit+0x68>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f1c3 0202 	rsb	r2, r3, #2
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	d10d      	bne.n	800186c <seven_segment_activate_digit+0x38>
//			HAL_Delay(35);
			HAL_GPIO_TogglePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin);
 8001850:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <seven_segment_activate_digit+0x6c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001858:	4911      	ldr	r1, [pc, #68]	; (80018a0 <seven_segment_activate_digit+0x6c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	889b      	ldrh	r3, [r3, #4]
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f002 fc61 	bl	800412c <HAL_GPIO_TogglePin>
		else if (d != (2-state)){
			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin,
							  GPIO_PIN_RESET);
		}
    }
}
 800186a:	e013      	b.n	8001894 <seven_segment_activate_digit+0x60>
		else if (d != (2-state)){
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <seven_segment_activate_digit+0x68>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1c3 0202 	rsb	r2, r3, #2
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	d00c      	beq.n	8001894 <seven_segment_activate_digit+0x60>
			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin,
 800187a:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <seven_segment_activate_digit+0x6c>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001882:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <seven_segment_activate_digit+0x6c>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	889b      	ldrh	r3, [r3, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	4619      	mov	r1, r3
 8001890:	f002 fc34 	bl	80040fc <HAL_GPIO_WritePin>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000804 	.word	0x20000804
 80018a0:	20000014 	.word	0x20000014

080018a4 <seven_segment_set_num>:

void seven_segment_set_num(int numbers[3]) {
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
        for (uint32_t i = 0; i < 3; ++i) {
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e00f      	b.n	80018d2 <seven_segment_set_num+0x2e>
            seven_segment.digits[2 - i] = numbers[i];
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f1c3 0302 	rsb	r3, r3, #2
 80018c2:	4611      	mov	r1, r2
 80018c4:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <seven_segment_set_num+0x44>)
 80018c6:	3310      	adds	r3, #16
 80018c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint32_t i = 0; i < 3; ++i) {
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3301      	adds	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d9ec      	bls.n	80018b2 <seven_segment_set_num+0xe>
    }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000014 	.word	0x20000014

080018ec <seven_segment_refresh>:

void seven_segment_refresh(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
    static uint32_t state_tmp = 2;
    static uint32_t last_time_tmp = 0;
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 80018f0:	2120      	movs	r1, #32
 80018f2:	4827      	ldr	r0, [pc, #156]	; (8001990 <seven_segment_refresh+0xa4>)
 80018f4:	f002 fc1a 	bl	800412c <HAL_GPIO_TogglePin>
    if (HAL_GetTick() - last_time_tmp > 5) {
 80018f8:	f000 fdfa 	bl	80024f0 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b25      	ldr	r3, [pc, #148]	; (8001994 <seven_segment_refresh+0xa8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b05      	cmp	r3, #5
 8001906:	d940      	bls.n	800198a <seven_segment_refresh+0x9e>
        seven_segment_deactivate_digits();
 8001908:	f7ff ff74 	bl	80017f4 <seven_segment_deactivate_digits>
        seven_segment_activate_digit(state_tmp);
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <seven_segment_refresh+0xac>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff8f 	bl	8001834 <seven_segment_activate_digit>
        seven_segment_display_decimal(seven_segment.digits[state_tmp]);
 8001916:	4b20      	ldr	r3, [pc, #128]	; (8001998 <seven_segment_refresh+0xac>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a20      	ldr	r2, [pc, #128]	; (800199c <seven_segment_refresh+0xb0>)
 800191c:	3310      	adds	r3, #16
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ff26 	bl	8001774 <seven_segment_display_decimal>
        if ((state == 2 && state_tmp == 0) || (state==1 && state_tmp==1) || (state == 0 && state_tmp == 2)){
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <seven_segment_refresh+0xb4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d103      	bne.n	8001938 <seven_segment_refresh+0x4c>
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <seven_segment_refresh+0xac>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00f      	beq.n	8001958 <seven_segment_refresh+0x6c>
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <seven_segment_refresh+0xb4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d103      	bne.n	8001948 <seven_segment_refresh+0x5c>
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <seven_segment_refresh+0xac>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d007      	beq.n	8001958 <seven_segment_refresh+0x6c>
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <seven_segment_refresh+0xb4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10a      	bne.n	8001966 <seven_segment_refresh+0x7a>
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <seven_segment_refresh+0xac>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d106      	bne.n	8001966 <seven_segment_refresh+0x7a>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001958:	2201      	movs	r2, #1
 800195a:	2104      	movs	r1, #4
 800195c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001960:	f002 fbcc 	bl	80040fc <HAL_GPIO_WritePin>
 8001964:	e005      	b.n	8001972 <seven_segment_refresh+0x86>
        }else{
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2104      	movs	r1, #4
 800196a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196e:	f002 fbc5 	bl	80040fc <HAL_GPIO_WritePin>
        }
        state_tmp = (state_tmp + 1) % 4; //active each 4 segments
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <seven_segment_refresh+0xac>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	4a06      	ldr	r2, [pc, #24]	; (8001998 <seven_segment_refresh+0xac>)
 800197e:	6013      	str	r3, [r2, #0]
        last_time_tmp = HAL_GetTick();
 8001980:	f000 fdb6 	bl	80024f0 <HAL_GetTick>
 8001984:	4603      	mov	r3, r0
 8001986:	4a03      	ldr	r2, [pc, #12]	; (8001994 <seven_segment_refresh+0xa8>)
 8001988:	6013      	str	r3, [r2, #0]
    }
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	48001000 	.word	0x48001000
 8001994:	20000818 	.word	0x20000818
 8001998:	200000ec 	.word	0x200000ec
 800199c:	20000014 	.word	0x20000014
 80019a0:	20000804 	.word	0x20000804

080019a4 <programInit>:

void programInit() {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    seven_segment_set_num(numbers);
 80019a8:	4803      	ldr	r0, [pc, #12]	; (80019b8 <programInit+0x14>)
 80019aa:	f7ff ff7b 	bl	80018a4 <seven_segment_set_num>
    event();
 80019ae:	f000 f80b 	bl	80019c8 <event>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000004 	.word	0x20000004

080019bc <programLoop>:

void programLoop() {
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
    seven_segment_refresh();
 80019c0:	f7ff ff94 	bl	80018ec <seven_segment_refresh>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <event>:
		{.port=GPIOE, .pin=GPIO_PIN_14}, //6: D8
		{.port=GPIOE, .pin=GPIO_PIN_15}, //7: D6
		{.port=GPIOE, .pin=GPIO_PIN_8},  //8: D4
}};

void event(){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
	int a=numbers[2];
 80019ce:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <event+0x100>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	60bb      	str	r3, [r7, #8]
	int b=numbers[1];
 80019d4:	4b3c      	ldr	r3, [pc, #240]	; (8001ac8 <event+0x100>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	607b      	str	r3, [r7, #4]
	int c=numbers[0];
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <event+0x100>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	603b      	str	r3, [r7, #0]
	seven_segment_deactivate_digits();
 80019e0:	f7ff ff08 	bl	80017f4 <seven_segment_deactivate_digits>

	for (int i = 1; i < 9; i++)
 80019e4:	2301      	movs	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e011      	b.n	8001a0e <event+0x46>
		HAL_GPIO_WritePin(leds_ltr.digit[i-1].port, leds_ltr.digit[i-1].pin,0);
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3b01      	subs	r3, #1
 80019ee:	4a37      	ldr	r2, [pc, #220]	; (8001acc <event+0x104>)
 80019f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	4a34      	ldr	r2, [pc, #208]	; (8001acc <event+0x104>)
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	889b      	ldrh	r3, [r3, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	4619      	mov	r1, r3
 8001a04:	f002 fb7a 	bl	80040fc <HAL_GPIO_WritePin>
	for (int i = 1; i < 9; i++)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	ddea      	ble.n	80019ea <event+0x22>

	if (c==0){
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d129      	bne.n	8001a6e <event+0xa6>
		for (int i = a; i <= a+b-1; i++){
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	e01f      	b.n	8001a60 <event+0x98>
			HAL_GPIO_WritePin(leds_ltr.digit[(i-1)%8].port, leds_ltr.digit[(i-1)%8].pin,1);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	425a      	negs	r2, r3
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	f002 0207 	and.w	r2, r2, #7
 8001a2e:	bf58      	it	pl
 8001a30:	4253      	negpl	r3, r2
 8001a32:	4a26      	ldr	r2, [pc, #152]	; (8001acc <event+0x104>)
 8001a34:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	425a      	negs	r2, r3
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	f002 0207 	and.w	r2, r2, #7
 8001a46:	bf58      	it	pl
 8001a48:	4253      	negpl	r3, r2
 8001a4a:	4a20      	ldr	r2, [pc, #128]	; (8001acc <event+0x104>)
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	889b      	ldrh	r3, [r3, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	4619      	mov	r1, r3
 8001a56:	f002 fb51 	bl	80040fc <HAL_GPIO_WritePin>
		for (int i = a; i <= a+b-1; i++){
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dbd9      	blt.n	8001a20 <event+0x58>
		for (int i = a; i <= a+b-1; i++){
					HAL_GPIO_WritePin(leds_rtl.digit[(i-1)%8].port, leds_rtl.digit[(i-1)%8].pin,1);
			}
	}

}
 8001a6c:	e028      	b.n	8001ac0 <event+0xf8>
		for (int i = a; i <= a+b-1; i++){
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	e01f      	b.n	8001ab4 <event+0xec>
					HAL_GPIO_WritePin(leds_rtl.digit[(i-1)%8].port, leds_rtl.digit[(i-1)%8].pin,1);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	425a      	negs	r2, r3
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	f002 0207 	and.w	r2, r2, #7
 8001a82:	bf58      	it	pl
 8001a84:	4253      	negpl	r3, r2
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <event+0x108>)
 8001a88:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	425a      	negs	r2, r3
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	f002 0207 	and.w	r2, r2, #7
 8001a9a:	bf58      	it	pl
 8001a9c:	4253      	negpl	r3, r2
 8001a9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ad0 <event+0x108>)
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	889b      	ldrh	r3, [r3, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f002 fb27 	bl	80040fc <HAL_GPIO_WritePin>
		for (int i = a; i <= a+b-1; i++){
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbd9      	blt.n	8001a74 <event+0xac>
}
 8001ac0:	bf00      	nop
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	20000068 	.word	0x20000068
 8001ad0:	200000a8 	.word	0x200000a8

08001ad4 <HAL_GPIO_EXTI_Callback>:


int last_time2 = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == GPIO_PIN_0) { //Left button ==> PF4
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d12b      	bne.n	8001b3c <HAL_GPIO_EXTI_Callback+0x68>
			if (HAL_GetTick() - last_time2 > 300){
 8001ae4:	f000 fd04 	bl	80024f0 <HAL_GetTick>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a51      	ldr	r2, [pc, #324]	; (8001c30 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001af4:	f240 8094 	bls.w	8001c20 <HAL_GPIO_EXTI_Callback+0x14c>
			state = state - 1;
 8001af8:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	4a4d      	ldr	r2, [pc, #308]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001b00:	6013      	str	r3, [r2, #0]
			if(state < 0)
 8001b02:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	da04      	bge.n	8001b14 <HAL_GPIO_EXTI_Callback+0x40>
				state += 3;
 8001b0a:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3303      	adds	r3, #3
 8001b10:	4a48      	ldr	r2, [pc, #288]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001b12:	6013      	str	r3, [r2, #0]
			state = state % 3;
 8001b14:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001b16:	6819      	ldr	r1, [r3, #0]
 8001b18:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x164>)
 8001b1a:	fb83 3201 	smull	r3, r2, r3, r1
 8001b1e:	17cb      	asrs	r3, r1, #31
 8001b20:	1ad2      	subs	r2, r2, r3
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	1aca      	subs	r2, r1, r3
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001b2c:	601a      	str	r2, [r3, #0]
			last_time2=HAL_GetTick();
 8001b2e:	f000 fcdf 	bl	80024f0 <HAL_GetTick>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b3e      	ldr	r3, [pc, #248]	; (8001c30 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e071      	b.n	8001c20 <HAL_GPIO_EXTI_Callback+0x14c>
			}
		}

		else if (GPIO_Pin == GPIO_PIN_1){	 //middle button ==> PA1
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d14e      	bne.n	8001be0 <HAL_GPIO_EXTI_Callback+0x10c>
			if (HAL_GetTick() - last_time2 > 180){
 8001b42:	f000 fcd5 	bl	80024f0 <HAL_GetTick>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a39      	ldr	r2, [pc, #228]	; (8001c30 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	2bb4      	cmp	r3, #180	; 0xb4
 8001b50:	d966      	bls.n	8001c20 <HAL_GPIO_EXTI_Callback+0x14c>
				if (state != 0){
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d025      	beq.n	8001ba6 <HAL_GPIO_EXTI_Callback+0xd2>
					numbers[state]=(numbers[state] + 1) % 9;
 8001b5a:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a37      	ldr	r2, [pc, #220]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x168>)
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	1c59      	adds	r1, r3, #1
 8001b66:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001b6c:	fb83 2301 	smull	r2, r3, r3, r1
 8001b70:	105a      	asrs	r2, r3, #1
 8001b72:	17cb      	asrs	r3, r1, #31
 8001b74:	1ad2      	subs	r2, r2, r3
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	1aca      	subs	r2, r1, r3
 8001b7e:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x168>)
 8001b80:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
					if (numbers[state] == 0)
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a2c      	ldr	r2, [pc, #176]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x168>)
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11d      	bne.n	8001bce <HAL_GPIO_EXTI_Callback+0xfa>
						numbers[state]++;
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x168>)
 8001b98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b9c:	3201      	adds	r2, #1
 8001b9e:	4927      	ldr	r1, [pc, #156]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x168>)
 8001ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001ba4:	e013      	b.n	8001bce <HAL_GPIO_EXTI_Callback+0xfa>
				}else{
					if (numbers[state] == 1)
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x168>)
 8001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d106      	bne.n	8001bc2 <HAL_GPIO_EXTI_Callback+0xee>
						numbers[state]=0;
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x168>)
 8001bba:	2100      	movs	r1, #0
 8001bbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001bc0:	e005      	b.n	8001bce <HAL_GPIO_EXTI_Callback+0xfa>
					else
						numbers[state]=1;
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x168>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				last_time2=HAL_GetTick();
 8001bce:	f000 fc8f 	bl	80024f0 <HAL_GetTick>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001bd8:	601a      	str	r2, [r3, #0]
				event();
 8001bda:	f7ff fef5 	bl	80019c8 <event>
 8001bde:	e01f      	b.n	8001c20 <HAL_GPIO_EXTI_Callback+0x14c>
			}

		}

		else if (GPIO_Pin == GPIO_PIN_4) { //Right button ==> PC0
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d11c      	bne.n	8001c20 <HAL_GPIO_EXTI_Callback+0x14c>
			if (HAL_GetTick() - last_time2 > 300){
 8001be6:	f000 fc83 	bl	80024f0 <HAL_GetTick>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bf6:	d913      	bls.n	8001c20 <HAL_GPIO_EXTI_Callback+0x14c>
				state = (state + 1) % 3;
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	1c59      	adds	r1, r3, #1
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x164>)
 8001c00:	fb83 3201 	smull	r3, r2, r3, r1
 8001c04:	17cb      	asrs	r3, r1, #31
 8001c06:	1ad2      	subs	r2, r2, r3
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	1aca      	subs	r2, r1, r3
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x160>)
 8001c12:	601a      	str	r2, [r3, #0]
				last_time2=HAL_GetTick();
 8001c14:	f000 fc6c 	bl	80024f0 <HAL_GetTick>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001c1e:	601a      	str	r2, [r3, #0]
				}

			}

		seven_segment_set_num(numbers);
 8001c20:	4806      	ldr	r0, [pc, #24]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x168>)
 8001c22:	f7ff fe3f 	bl	80018a4 <seven_segment_set_num>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000808 	.word	0x20000808
 8001c34:	20000804 	.word	0x20000804
 8001c38:	55555556 	.word	0x55555556
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	38e38e39 	.word	0x38e38e39

08001c44 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0a0      	sub	sp, #128	; 0x80
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c54:	d12a      	bne.n	8001cac <HAL_ADC_ConvCpltCallback+0x68>
//		  HAL_UART_Transmit(&huart3,"TTT",3,1000);

		int x = HAL_ADC_GetValue(&hadc1);
 8001c56:	4817      	ldr	r0, [pc, #92]	; (8001cb4 <HAL_ADC_ConvCpltCallback+0x70>)
 8001c58:	f000 ff8a 	bl	8002b70 <HAL_ADC_GetValue>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	677b      	str	r3, [r7, #116]	; 0x74
		float fx = ((float) x * 100 / 4095);
 8001c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001cb8 <HAL_ADC_ConvCpltCallback+0x74>
 8001c6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c72:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001cbc <HAL_ADC_ConvCpltCallback+0x78>
 8001c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		unsigned char data[100];
		int n = sprintf(data, "%d  %.4f\n", x, fx);
 8001c7e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001c80:	f7fe fc62 	bl	8000548 <__aeabi_f2d>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	f107 0008 	add.w	r0, r7, #8
 8001c8c:	e9cd 2300 	strd	r2, r3, [sp]
 8001c90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c92:	490b      	ldr	r1, [pc, #44]	; (8001cc0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001c94:	f007 fa50 	bl	8009138 <siprintf>
 8001c98:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart3, data, n, 1000);
 8001c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	f107 0108 	add.w	r1, r7, #8
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <HAL_ADC_ConvCpltCallback+0x80>)
 8001ca8:	f005 fb94 	bl	80073d4 <HAL_UART_Transmit>
	}
	else if(hadc->Instance == ADC2){

	}

}
 8001cac:	bf00      	nop
 8001cae:	3778      	adds	r7, #120	; 0x78
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200002ec 	.word	0x200002ec
 8001cb8:	42c80000 	.word	0x42c80000
 8001cbc:	457ff000 	.word	0x457ff000
 8001cc0:	0800ddd8 	.word	0x0800ddd8
 8001cc4:	2000048c 	.word	0x2000048c

08001cc8 <HAL_TIM_PeriodElapsedCallback>:

//Play Warn
uint64_t counter = 0;
int buzz_type = 1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd8:	d143      	bne.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0x9a>
		if(buzz_type == 1){
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_TIM_PeriodElapsedCallback+0x2a>
			triangle_signal(counter);
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fd0c 	bl	8001708 <triangle_signal>
 8001cf0:	e016      	b.n	8001d20 <HAL_TIM_PeriodElapsedCallback+0x58>
		}
		else if(buzz_type == 2){
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d107      	bne.n	8001d0a <HAL_TIM_PeriodElapsedCallback+0x42>
			square_signal(counter);
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	4613      	mov	r3, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fccc 	bl	80016a0 <square_signal>
 8001d08:	e00a      	b.n	8001d20 <HAL_TIM_PeriodElapsedCallback+0x58>
		}
		else if(buzz_type == 3){
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d106      	bne.n	8001d20 <HAL_TIM_PeriodElapsedCallback+0x58>
			sin_signal(counter);
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fc78 	bl	8001610 <sin_signal>
		}
		counter = counter + 1;
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	1c54      	adds	r4, r2, #1
 8001d28:	f143 0500 	adc.w	r5, r3, #0
 8001d2c:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d2e:	e9c3 4500 	strd	r4, r5, [r3]
		if(counter > 5000){
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f241 3189 	movw	r1, #5001	; 0x1389
 8001d3c:	428a      	cmp	r2, r1
 8001d3e:	f173 0300 	sbcs.w	r3, r3, #0
 8001d42:	d306      	bcc.n	8001d52 <HAL_TIM_PeriodElapsedCallback+0x8a>
			counter = 0;
 8001d44:	490a      	ldr	r1, [pc, #40]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9c1 2300 	strd	r2, r3, [r1]
		}
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 8001d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d56:	4807      	ldr	r0, [pc, #28]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d58:	f002 f9e8 	bl	800412c <HAL_GPIO_TogglePin>

		HAL_ADC_Start_IT(&hadc1);
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001d5e:	f000 fdc7 	bl	80028f0 <HAL_ADC_Start_IT>
	}
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200000e8 	.word	0x200000e8
 8001d70:	20000810 	.word	0x20000810
 8001d74:	48001000 	.word	0x48001000
 8001d78:	200002ec 	.word	0x200002ec

08001d7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_MspInit+0x44>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <HAL_MspInit+0x44>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6193      	str	r3, [r2, #24]
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_MspInit+0x44>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_MspInit+0x44>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_MspInit+0x44>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da4:	61d3      	str	r3, [r2, #28]
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_MspInit+0x44>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001db2:	2005      	movs	r0, #5
 8001db4:	f001 ff70 	bl	8003c98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001de4:	d12c      	bne.n	8001e40 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_ADC_MspInit+0x84>)
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <HAL_ADC_MspInit+0x84>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6153      	str	r3, [r2, #20]
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_ADC_MspInit+0x84>)
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_ADC_MspInit+0x84>)
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_ADC_MspInit+0x84>)
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e08:	6153      	str	r3, [r2, #20]
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_ADC_MspInit+0x84>)
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e16:	2308      	movs	r3, #8
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2c:	f001 ffec 	bl	8003e08 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2101      	movs	r1, #1
 8001e34:	2012      	movs	r0, #18
 8001e36:	f001 ff3a 	bl	8003cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e3a:	2012      	movs	r0, #18
 8001e3c:	f001 ff53 	bl	8003ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e40:	bf00      	nop
 8001e42:	3728      	adds	r7, #40	; 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000

08001e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <HAL_I2C_MspInit+0x7c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d127      	bne.n	8001ebe <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_I2C_MspInit+0x80>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <HAL_I2C_MspInit+0x80>)
 8001e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e78:	6153      	str	r3, [r2, #20]
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_I2C_MspInit+0x80>)
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001e86:	23c0      	movs	r3, #192	; 0xc0
 8001e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8a:	2312      	movs	r3, #18
 8001e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e96:	2304      	movs	r3, #4
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <HAL_I2C_MspInit+0x84>)
 8001ea2:	f001 ffb1 	bl	8003e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_I2C_MspInit+0x80>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_I2C_MspInit+0x80>)
 8001eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_I2C_MspInit+0x80>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ebe:	bf00      	nop
 8001ec0:	3728      	adds	r7, #40	; 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40005400 	.word	0x40005400
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	48000400 	.word	0x48000400

08001ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <HAL_SPI_MspInit+0x7c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d128      	bne.n	8001f48 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_SPI_MspInit+0x80>)
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	4a16      	ldr	r2, [pc, #88]	; (8001f54 <HAL_SPI_MspInit+0x80>)
 8001efc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f00:	6193      	str	r3, [r2, #24]
 8001f02:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <HAL_SPI_MspInit+0x80>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_SPI_MspInit+0x80>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	4a10      	ldr	r2, [pc, #64]	; (8001f54 <HAL_SPI_MspInit+0x80>)
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	6153      	str	r3, [r2, #20]
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_SPI_MspInit+0x80>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001f26:	23e0      	movs	r3, #224	; 0xe0
 8001f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f36:	2305      	movs	r3, #5
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f44:	f001 ff60 	bl	8003e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f48:	bf00      	nop
 8001f4a:	3728      	adds	r7, #40	; 0x28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40013000 	.word	0x40013000
 8001f54:	40021000 	.word	0x40021000

08001f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f68:	d114      	bne.n	8001f94 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_TIM_Base_MspInit+0x78>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a18      	ldr	r2, [pc, #96]	; (8001fd0 <HAL_TIM_Base_MspInit+0x78>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <HAL_TIM_Base_MspInit+0x78>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	201c      	movs	r0, #28
 8001f88:	f001 fe91 	bl	8003cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f8c:	201c      	movs	r0, #28
 8001f8e:	f001 feaa 	bl	8003ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f92:	e018      	b.n	8001fc6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <HAL_TIM_Base_MspInit+0x7c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d113      	bne.n	8001fc6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_TIM_Base_MspInit+0x78>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <HAL_TIM_Base_MspInit+0x78>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	61d3      	str	r3, [r2, #28]
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_TIM_Base_MspInit+0x78>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	201d      	movs	r0, #29
 8001fbc:	f001 fe77 	bl	8003cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fc0:	201d      	movs	r0, #29
 8001fc2:	f001 fe90 	bl	8003ce6 <HAL_NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40000400 	.word	0x40000400

08001fd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_TIM_MspPostInit+0x64>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d11b      	bne.n	8002032 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_TIM_MspPostInit+0x68>)
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	4a10      	ldr	r2, [pc, #64]	; (8002040 <HAL_TIM_MspPostInit+0x68>)
 8002000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002004:	6153      	str	r3, [r2, #20]
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <HAL_TIM_MspPostInit+0x68>)
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002012:	2310      	movs	r3, #16
 8002014:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002022:	2302      	movs	r3, #2
 8002024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 030c 	add.w	r3, r7, #12
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <HAL_TIM_MspPostInit+0x6c>)
 800202e:	f001 feeb 	bl	8003e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002032:	bf00      	nop
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40000400 	.word	0x40000400
 8002040:	40021000 	.word	0x40021000
 8002044:	48000400 	.word	0x48000400

08002048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <HAL_UART_MspInit+0x8c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d130      	bne.n	80020cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_UART_MspInit+0x90>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a1a      	ldr	r2, [pc, #104]	; (80020d8 <HAL_UART_MspInit+0x90>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002074:	61d3      	str	r3, [r2, #28]
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_UART_MspInit+0x90>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_UART_MspInit+0x90>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_UART_MspInit+0x90>)
 8002088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208c:	6153      	str	r3, [r2, #20]
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_UART_MspInit+0x90>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800209a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800209e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020ac:	2307      	movs	r3, #7
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	4809      	ldr	r0, [pc, #36]	; (80020dc <HAL_UART_MspInit+0x94>)
 80020b8:	f001 fea6 	bl	8003e08 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	2027      	movs	r0, #39	; 0x27
 80020c2:	f001 fdf4 	bl	8003cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020c6:	2027      	movs	r0, #39	; 0x27
 80020c8:	f001 fe0d 	bl	8003ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40004800 	.word	0x40004800
 80020d8:	40021000 	.word	0x40021000
 80020dc:	48000400 	.word	0x48000400

080020e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a18      	ldr	r2, [pc, #96]	; (8002160 <HAL_PCD_MspInit+0x80>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d129      	bne.n	8002156 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_PCD_MspInit+0x84>)
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_PCD_MspInit+0x84>)
 8002108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210c:	6153      	str	r3, [r2, #20]
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_PCD_MspInit+0x84>)
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800211a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800211e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800212c:	230e      	movs	r3, #14
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213a:	f001 fe65 	bl	8003e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_PCD_MspInit+0x84>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4a08      	ldr	r2, [pc, #32]	; (8002164 <HAL_PCD_MspInit+0x84>)
 8002144:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002148:	61d3      	str	r3, [r2, #28]
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_PCD_MspInit+0x84>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002156:	bf00      	nop
 8002158:	3728      	adds	r7, #40	; 0x28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40005c00 	.word	0x40005c00
 8002164:	40021000 	.word	0x40021000

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216c:	e7fe      	b.n	800216c <NMI_Handler+0x4>

0800216e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <MemManage_Handler+0x4>

0800217a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <UsageFault_Handler+0x4>

08002186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b4:	f000 f988 	bl	80024c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}

080021bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80021c0:	2001      	movs	r0, #1
 80021c2:	f001 ffcd 	bl	8004160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}

080021ca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80021ce:	2002      	movs	r0, #2
 80021d0:	f001 ffc6 	bl	8004160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80021dc:	2010      	movs	r0, #16
 80021de:	f001 ffbf 	bl	8004160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <ADC1_2_IRQHandler+0x10>)
 80021ee:	f000 fccd 	bl	8002b8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200002ec 	.word	0x200002ec

080021fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <TIM2_IRQHandler+0x10>)
 8002202:	f004 f8af 	bl	8006364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200003f4 	.word	0x200003f4

08002210 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <TIM3_IRQHandler+0x10>)
 8002216:	f004 f8a5 	bl	8006364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000440 	.word	0x20000440

08002224 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <USART3_IRQHandler+0x10>)
 800222a:	f005 f95d 	bl	80074e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	2000048c 	.word	0x2000048c

08002238 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return 1;
 800223c:	2301      	movs	r3, #1
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_kill>:

int _kill(int pid, int sig)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002252:	f006 f8bf 	bl	80083d4 <__errno>
 8002256:	4603      	mov	r3, r0
 8002258:	2216      	movs	r2, #22
 800225a:	601a      	str	r2, [r3, #0]
  return -1;
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_exit>:

void _exit (int status)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ffe7 	bl	8002248 <_kill>
  while (1) {}    /* Make sure we hang here */
 800227a:	e7fe      	b.n	800227a <_exit+0x12>

0800227c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e00a      	b.n	80022a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800228e:	f3af 8000 	nop.w
 8002292:	4601      	mov	r1, r0
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	60ba      	str	r2, [r7, #8]
 800229a:	b2ca      	uxtb	r2, r1
 800229c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbf0      	blt.n	800228e <_read+0x12>
  }

  return len;
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e009      	b.n	80022dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	60ba      	str	r2, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3301      	adds	r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	dbf1      	blt.n	80022c8 <_write+0x12>
  }
  return len;
 80022e4:	687b      	ldr	r3, [r7, #4]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_close>:

int _close(int file)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002316:	605a      	str	r2, [r3, #4]
  return 0;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <_isatty>:

int _isatty(int file)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002360:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <_sbrk+0x5c>)
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <_sbrk+0x60>)
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <_sbrk+0x64>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <_sbrk+0x64>)
 8002376:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <_sbrk+0x68>)
 8002378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <_sbrk+0x64>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	429a      	cmp	r2, r3
 8002386:	d207      	bcs.n	8002398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002388:	f006 f824 	bl	80083d4 <__errno>
 800238c:	4603      	mov	r3, r0
 800238e:	220c      	movs	r2, #12
 8002390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
 8002396:	e009      	b.n	80023ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800239e:	4b07      	ldr	r3, [pc, #28]	; (80023bc <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <_sbrk+0x64>)
 80023a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023aa:	68fb      	ldr	r3, [r7, #12]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	2000a000 	.word	0x2000a000
 80023b8:	00000400 	.word	0x00000400
 80023bc:	2000081c 	.word	0x2000081c
 80023c0:	20000838 	.word	0x20000838

080023c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <SystemInit+0x20>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <SystemInit+0x20>)
 80023d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002420 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023ec:	f7ff ffea 	bl	80023c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f0:	480c      	ldr	r0, [pc, #48]	; (8002424 <LoopForever+0x6>)
  ldr r1, =_edata
 80023f2:	490d      	ldr	r1, [pc, #52]	; (8002428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <LoopForever+0xe>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f8:	e002      	b.n	8002400 <LoopCopyDataInit>

080023fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fe:	3304      	adds	r3, #4

08002400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002404:	d3f9      	bcc.n	80023fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002408:	4c0a      	ldr	r4, [pc, #40]	; (8002434 <LoopForever+0x16>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800240c:	e001      	b.n	8002412 <LoopFillZerobss>

0800240e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002410:	3204      	adds	r2, #4

08002412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002414:	d3fb      	bcc.n	800240e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002416:	f005 ffe3 	bl	80083e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800241a:	f7fe fc6b 	bl	8000cf4 <main>

0800241e <LoopForever>:

LoopForever:
    b LoopForever
 800241e:	e7fe      	b.n	800241e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002420:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002428:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 800242c:	0800e4a8 	.word	0x0800e4a8
  ldr r2, =_sbss
 8002430:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8002434:	20000834 	.word	0x20000834

08002438 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002438:	e7fe      	b.n	8002438 <ADC3_IRQHandler>
	...

0800243c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_Init+0x28>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a07      	ldr	r2, [pc, #28]	; (8002464 <HAL_Init+0x28>)
 8002446:	f043 0310 	orr.w	r3, r3, #16
 800244a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244c:	2003      	movs	r0, #3
 800244e:	f001 fc23 	bl	8003c98 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002452:	2000      	movs	r0, #0
 8002454:	f000 f808 	bl	8002468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002458:	f7ff fc90 	bl	8001d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40022000 	.word	0x40022000

08002468 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_InitTick+0x54>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_InitTick+0x58>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f001 fc3b 	bl	8003d02 <HAL_SYSTICK_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e00e      	b.n	80024b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b0f      	cmp	r3, #15
 800249a:	d80a      	bhi.n	80024b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800249c:	2200      	movs	r2, #0
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f001 fc03 	bl	8003cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a8:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <HAL_InitTick+0x5c>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200000f0 	.word	0x200000f0
 80024c0:	200000f8 	.word	0x200000f8
 80024c4:	200000f4 	.word	0x200000f4

080024c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_IncTick+0x20>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_IncTick+0x24>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <HAL_IncTick+0x24>)
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	200000f8 	.word	0x200000f8
 80024ec:	20000820 	.word	0x20000820

080024f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <HAL_GetTick+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000820 	.word	0x20000820

08002508 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b09a      	sub	sp, #104	; 0x68
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e1c9      	b.n	80028e4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	d176      	bne.n	8002650 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d152      	bne.n	8002610 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fc1d 	bl	8001dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d13b      	bne.n	8002610 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f001 fa47 	bl	8003a2c <ADC_Disable>
 800259e:	4603      	mov	r3, r0
 80025a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d12f      	bne.n	8002610 <HAL_ADC_Init+0xe0>
 80025b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d12b      	bne.n	8002610 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025c0:	f023 0302 	bic.w	r3, r3, #2
 80025c4:	f043 0202 	orr.w	r2, r3, #2
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025da:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025ea:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025ec:	4b86      	ldr	r3, [pc, #536]	; (8002808 <HAL_ADC_Init+0x2d8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a86      	ldr	r2, [pc, #536]	; (800280c <HAL_ADC_Init+0x2dc>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	0c9a      	lsrs	r2, r3, #18
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002602:	e002      	b.n	800260a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	3b01      	subs	r3, #1
 8002608:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f9      	bne.n	8002604 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800262c:	d110      	bne.n	8002650 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f023 0312 	bic.w	r3, r3, #18
 8002636:	f043 0210 	orr.w	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f043 0201 	orr.w	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b00      	cmp	r3, #0
 800265a:	f040 8136 	bne.w	80028ca <HAL_ADC_Init+0x39a>
 800265e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002662:	2b00      	cmp	r3, #0
 8002664:	f040 8131 	bne.w	80028ca <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 8129 	bne.w	80028ca <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002680:	f043 0202 	orr.w	r2, r3, #2
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002690:	d004      	beq.n	800269c <HAL_ADC_Init+0x16c>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a5e      	ldr	r2, [pc, #376]	; (8002810 <HAL_ADC_Init+0x2e0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_Init+0x170>
 800269c:	4b5d      	ldr	r3, [pc, #372]	; (8002814 <HAL_ADC_Init+0x2e4>)
 800269e:	e000      	b.n	80026a2 <HAL_ADC_Init+0x172>
 80026a0:	4b5d      	ldr	r3, [pc, #372]	; (8002818 <HAL_ADC_Init+0x2e8>)
 80026a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ac:	d102      	bne.n	80026b4 <HAL_ADC_Init+0x184>
 80026ae:	4b58      	ldr	r3, [pc, #352]	; (8002810 <HAL_ADC_Init+0x2e0>)
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	e01a      	b.n	80026ea <HAL_ADC_Init+0x1ba>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a55      	ldr	r2, [pc, #340]	; (8002810 <HAL_ADC_Init+0x2e0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d103      	bne.n	80026c6 <HAL_ADC_Init+0x196>
 80026be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	e011      	b.n	80026ea <HAL_ADC_Init+0x1ba>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a54      	ldr	r2, [pc, #336]	; (800281c <HAL_ADC_Init+0x2ec>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d102      	bne.n	80026d6 <HAL_ADC_Init+0x1a6>
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_ADC_Init+0x2f0>)
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	e009      	b.n	80026ea <HAL_ADC_Init+0x1ba>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a51      	ldr	r2, [pc, #324]	; (8002820 <HAL_ADC_Init+0x2f0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d102      	bne.n	80026e6 <HAL_ADC_Init+0x1b6>
 80026e0:	4b4e      	ldr	r3, [pc, #312]	; (800281c <HAL_ADC_Init+0x2ec>)
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	e001      	b.n	80026ea <HAL_ADC_Init+0x1ba>
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d108      	bne.n	800270a <HAL_ADC_Init+0x1da>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_ADC_Init+0x1da>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_ADC_Init+0x1dc>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11c      	bne.n	800274a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002710:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002712:	2b00      	cmp	r3, #0
 8002714:	d010      	beq.n	8002738 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_ADC_Init+0x202>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_ADC_Init+0x202>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_ADC_Init+0x204>
 8002732:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002734:	2b00      	cmp	r3, #0
 8002736:	d108      	bne.n	800274a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	431a      	orrs	r2, r3
 8002746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002748:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7e5b      	ldrb	r3, [r3, #25]
 800274e:	035b      	lsls	r3, r3, #13
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002754:	2a01      	cmp	r2, #1
 8002756:	d002      	beq.n	800275e <HAL_ADC_Init+0x22e>
 8002758:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800275c:	e000      	b.n	8002760 <HAL_ADC_Init+0x230>
 800275e:	2200      	movs	r2, #0
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4313      	orrs	r3, r2
 800276e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002770:	4313      	orrs	r3, r2
 8002772:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d11b      	bne.n	80027b6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	7e5b      	ldrb	r3, [r3, #25]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	3b01      	subs	r3, #1
 800278c:	045a      	lsls	r2, r3, #17
 800278e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002790:	4313      	orrs	r3, r2
 8002792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002796:	663b      	str	r3, [r7, #96]	; 0x60
 8002798:	e00d      	b.n	80027b6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f043 0201 	orr.w	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d03a      	beq.n	8002834 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a16      	ldr	r2, [pc, #88]	; (800281c <HAL_ADC_Init+0x2ec>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d004      	beq.n	80027d2 <HAL_ADC_Init+0x2a2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a14      	ldr	r2, [pc, #80]	; (8002820 <HAL_ADC_Init+0x2f0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d128      	bne.n	8002824 <HAL_ADC_Init+0x2f4>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80027da:	d012      	beq.n	8002802 <HAL_ADC_Init+0x2d2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e4:	d00a      	beq.n	80027fc <HAL_ADC_Init+0x2cc>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80027ee:	d002      	beq.n	80027f6 <HAL_ADC_Init+0x2c6>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	e018      	b.n	8002828 <HAL_ADC_Init+0x2f8>
 80027f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fa:	e015      	b.n	8002828 <HAL_ADC_Init+0x2f8>
 80027fc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002800:	e012      	b.n	8002828 <HAL_ADC_Init+0x2f8>
 8002802:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002806:	e00f      	b.n	8002828 <HAL_ADC_Init+0x2f8>
 8002808:	200000f0 	.word	0x200000f0
 800280c:	431bde83 	.word	0x431bde83
 8002810:	50000100 	.word	0x50000100
 8002814:	50000300 	.word	0x50000300
 8002818:	50000700 	.word	0x50000700
 800281c:	50000400 	.word	0x50000400
 8002820:	50000500 	.word	0x50000500
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800282c:	4313      	orrs	r3, r2
 800282e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002830:	4313      	orrs	r3, r2
 8002832:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b00      	cmp	r3, #0
 8002840:	d114      	bne.n	800286c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002850:	f023 0302 	bic.w	r3, r3, #2
 8002854:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7e1b      	ldrb	r3, [r3, #24]
 800285a:	039a      	lsls	r2, r3, #14
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4313      	orrs	r3, r2
 8002866:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002868:	4313      	orrs	r3, r2
 800286a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <HAL_ADC_Init+0x3bc>)
 8002874:	4013      	ands	r3, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800287c:	430b      	orrs	r3, r1
 800287e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d10c      	bne.n	80028a2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f023 010f 	bic.w	r1, r3, #15
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	1e5a      	subs	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
 80028a0:	e007      	b.n	80028b2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 020f 	bic.w	r2, r2, #15
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f023 0303 	bic.w	r3, r3, #3
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
 80028c8:	e00a      	b.n	80028e0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f023 0312 	bic.w	r3, r3, #18
 80028d2:	f043 0210 	orr.w	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80028e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3768      	adds	r7, #104	; 0x68
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	fff0c007 	.word	0xfff0c007

080028f0 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 8123 	bne.w	8002b52 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_ADC_Start_IT+0x2a>
 8002916:	2302      	movs	r3, #2
 8002918:	e11e      	b.n	8002b58 <HAL_ADC_Start_IT+0x268>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f001 f81e 	bl	8003964 <ADC_Enable>
 8002928:	4603      	mov	r3, r0
 800292a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f040 810a 	bne.w	8002b48 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002950:	d004      	beq.n	800295c <HAL_ADC_Start_IT+0x6c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a82      	ldr	r2, [pc, #520]	; (8002b60 <HAL_ADC_Start_IT+0x270>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d106      	bne.n	800296a <HAL_ADC_Start_IT+0x7a>
 800295c:	4b81      	ldr	r3, [pc, #516]	; (8002b64 <HAL_ADC_Start_IT+0x274>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	2b00      	cmp	r3, #0
 8002966:	d010      	beq.n	800298a <HAL_ADC_Start_IT+0x9a>
 8002968:	e005      	b.n	8002976 <HAL_ADC_Start_IT+0x86>
 800296a:	4b7f      	ldr	r3, [pc, #508]	; (8002b68 <HAL_ADC_Start_IT+0x278>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <HAL_ADC_Start_IT+0x9a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800297e:	d004      	beq.n	800298a <HAL_ADC_Start_IT+0x9a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a79      	ldr	r2, [pc, #484]	; (8002b6c <HAL_ADC_Start_IT+0x27c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d115      	bne.n	80029b6 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d036      	beq.n	8002a12 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80029b4:	e02d      	b.n	8002a12 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ca:	d004      	beq.n	80029d6 <HAL_ADC_Start_IT+0xe6>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a63      	ldr	r2, [pc, #396]	; (8002b60 <HAL_ADC_Start_IT+0x270>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10a      	bne.n	80029ec <HAL_ADC_Start_IT+0xfc>
 80029d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e008      	b.n	80029fe <HAL_ADC_Start_IT+0x10e>
 80029ec:	4b5f      	ldr	r3, [pc, #380]	; (8002b6c <HAL_ADC_Start_IT+0x27c>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1e:	d106      	bne.n	8002a2e <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	f023 0206 	bic.w	r2, r3, #6
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	645a      	str	r2, [r3, #68]	; 0x44
 8002a2c:	e002      	b.n	8002a34 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	221c      	movs	r2, #28
 8002a42:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d110      	bne.n	8002a6e <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0204 	bic.w	r2, r2, #4
 8002a5a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0208 	orr.w	r2, r2, #8
 8002a6a:	605a      	str	r2, [r3, #4]
          break;
 8002a6c:	e008      	b.n	8002a80 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 020c 	orr.w	r2, r2, #12
 8002a7c:	605a      	str	r2, [r3, #4]
          break;
 8002a7e:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0210 	bic.w	r2, r2, #16
 8002a96:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa0:	d004      	beq.n	8002aac <HAL_ADC_Start_IT+0x1bc>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2e      	ldr	r2, [pc, #184]	; (8002b60 <HAL_ADC_Start_IT+0x270>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d106      	bne.n	8002aba <HAL_ADC_Start_IT+0x1ca>
 8002aac:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_ADC_Start_IT+0x274>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d03e      	beq.n	8002b36 <HAL_ADC_Start_IT+0x246>
 8002ab8:	e005      	b.n	8002ac6 <HAL_ADC_Start_IT+0x1d6>
 8002aba:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <HAL_ADC_Start_IT+0x278>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d037      	beq.n	8002b36 <HAL_ADC_Start_IT+0x246>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ace:	d004      	beq.n	8002ada <HAL_ADC_Start_IT+0x1ea>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <HAL_ADC_Start_IT+0x270>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d106      	bne.n	8002ae8 <HAL_ADC_Start_IT+0x1f8>
 8002ada:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <HAL_ADC_Start_IT+0x274>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d027      	beq.n	8002b36 <HAL_ADC_Start_IT+0x246>
 8002ae6:	e005      	b.n	8002af4 <HAL_ADC_Start_IT+0x204>
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	; (8002b68 <HAL_ADC_Start_IT+0x278>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	2b05      	cmp	r3, #5
 8002af2:	d020      	beq.n	8002b36 <HAL_ADC_Start_IT+0x246>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002afc:	d004      	beq.n	8002b08 <HAL_ADC_Start_IT+0x218>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a17      	ldr	r2, [pc, #92]	; (8002b60 <HAL_ADC_Start_IT+0x270>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d106      	bne.n	8002b16 <HAL_ADC_Start_IT+0x226>
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_ADC_Start_IT+0x274>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	2b09      	cmp	r3, #9
 8002b12:	d010      	beq.n	8002b36 <HAL_ADC_Start_IT+0x246>
 8002b14:	e005      	b.n	8002b22 <HAL_ADC_Start_IT+0x232>
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <HAL_ADC_Start_IT+0x278>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2b09      	cmp	r3, #9
 8002b20:	d009      	beq.n	8002b36 <HAL_ADC_Start_IT+0x246>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b2a:	d004      	beq.n	8002b36 <HAL_ADC_Start_IT+0x246>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <HAL_ADC_Start_IT+0x27c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d10f      	bne.n	8002b56 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0204 	orr.w	r2, r2, #4
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	e006      	b.n	8002b56 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b50:	e001      	b.n	8002b56 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
 8002b54:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	50000100 	.word	0x50000100
 8002b64:	50000300 	.word	0x50000300
 8002b68:	50000700 	.word	0x50000700
 8002b6c:	50000400 	.word	0x50000400

08002b70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_ADC_IRQHandler+0x38>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80bc 	beq.w	8002d48 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80b6 	beq.w	8002d48 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d105      	bne.n	8002bf4 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bfc:	d004      	beq.n	8002c08 <HAL_ADC_IRQHandler+0x7c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a90      	ldr	r2, [pc, #576]	; (8002e44 <HAL_ADC_IRQHandler+0x2b8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d106      	bne.n	8002c16 <HAL_ADC_IRQHandler+0x8a>
 8002c08:	4b8f      	ldr	r3, [pc, #572]	; (8002e48 <HAL_ADC_IRQHandler+0x2bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d03e      	beq.n	8002c92 <HAL_ADC_IRQHandler+0x106>
 8002c14:	e005      	b.n	8002c22 <HAL_ADC_IRQHandler+0x96>
 8002c16:	4b8d      	ldr	r3, [pc, #564]	; (8002e4c <HAL_ADC_IRQHandler+0x2c0>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d037      	beq.n	8002c92 <HAL_ADC_IRQHandler+0x106>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c2a:	d004      	beq.n	8002c36 <HAL_ADC_IRQHandler+0xaa>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a84      	ldr	r2, [pc, #528]	; (8002e44 <HAL_ADC_IRQHandler+0x2b8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d106      	bne.n	8002c44 <HAL_ADC_IRQHandler+0xb8>
 8002c36:	4b84      	ldr	r3, [pc, #528]	; (8002e48 <HAL_ADC_IRQHandler+0x2bc>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2b05      	cmp	r3, #5
 8002c40:	d027      	beq.n	8002c92 <HAL_ADC_IRQHandler+0x106>
 8002c42:	e005      	b.n	8002c50 <HAL_ADC_IRQHandler+0xc4>
 8002c44:	4b81      	ldr	r3, [pc, #516]	; (8002e4c <HAL_ADC_IRQHandler+0x2c0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d020      	beq.n	8002c92 <HAL_ADC_IRQHandler+0x106>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c58:	d004      	beq.n	8002c64 <HAL_ADC_IRQHandler+0xd8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a79      	ldr	r2, [pc, #484]	; (8002e44 <HAL_ADC_IRQHandler+0x2b8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d106      	bne.n	8002c72 <HAL_ADC_IRQHandler+0xe6>
 8002c64:	4b78      	ldr	r3, [pc, #480]	; (8002e48 <HAL_ADC_IRQHandler+0x2bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2b09      	cmp	r3, #9
 8002c6e:	d010      	beq.n	8002c92 <HAL_ADC_IRQHandler+0x106>
 8002c70:	e005      	b.n	8002c7e <HAL_ADC_IRQHandler+0xf2>
 8002c72:	4b76      	ldr	r3, [pc, #472]	; (8002e4c <HAL_ADC_IRQHandler+0x2c0>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	2b09      	cmp	r3, #9
 8002c7c:	d009      	beq.n	8002c92 <HAL_ADC_IRQHandler+0x106>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c86:	d004      	beq.n	8002c92 <HAL_ADC_IRQHandler+0x106>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a70      	ldr	r2, [pc, #448]	; (8002e50 <HAL_ADC_IRQHandler+0x2c4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d104      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	e00f      	b.n	8002cbc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ca4:	d004      	beq.n	8002cb0 <HAL_ADC_IRQHandler+0x124>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a66      	ldr	r2, [pc, #408]	; (8002e44 <HAL_ADC_IRQHandler+0x2b8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d102      	bne.n	8002cb6 <HAL_ADC_IRQHandler+0x12a>
 8002cb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cb4:	e000      	b.n	8002cb8 <HAL_ADC_IRQHandler+0x12c>
 8002cb6:	4b66      	ldr	r3, [pc, #408]	; (8002e50 <HAL_ADC_IRQHandler+0x2c4>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d137      	bne.n	8002d3a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d132      	bne.n	8002d3a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d02d      	beq.n	8002d3a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d11a      	bne.n	8002d22 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 020c 	bic.w	r2, r2, #12
 8002cfa:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d112      	bne.n	8002d3a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f043 0201 	orr.w	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d20:	e00b      	b.n	8002d3a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0210 	orr.w	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fe ff82 	bl	8001c44 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	220c      	movs	r2, #12
 8002d46:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <HAL_ADC_IRQHandler+0x1d0>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8138 	beq.w	8002fd8 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8132 	beq.w	8002fd8 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d88:	d004      	beq.n	8002d94 <HAL_ADC_IRQHandler+0x208>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2d      	ldr	r2, [pc, #180]	; (8002e44 <HAL_ADC_IRQHandler+0x2b8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d106      	bne.n	8002da2 <HAL_ADC_IRQHandler+0x216>
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <HAL_ADC_IRQHandler+0x2bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d03e      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x292>
 8002da0:	e005      	b.n	8002dae <HAL_ADC_IRQHandler+0x222>
 8002da2:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <HAL_ADC_IRQHandler+0x2c0>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d037      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x292>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db6:	d004      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x236>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <HAL_ADC_IRQHandler+0x2b8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d106      	bne.n	8002dd0 <HAL_ADC_IRQHandler+0x244>
 8002dc2:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <HAL_ADC_IRQHandler+0x2bc>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2b05      	cmp	r3, #5
 8002dcc:	d027      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x292>
 8002dce:	e005      	b.n	8002ddc <HAL_ADC_IRQHandler+0x250>
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <HAL_ADC_IRQHandler+0x2c0>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d020      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x292>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de4:	d004      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x264>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a16      	ldr	r2, [pc, #88]	; (8002e44 <HAL_ADC_IRQHandler+0x2b8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d106      	bne.n	8002dfe <HAL_ADC_IRQHandler+0x272>
 8002df0:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <HAL_ADC_IRQHandler+0x2bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	2b09      	cmp	r3, #9
 8002dfa:	d010      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x292>
 8002dfc:	e005      	b.n	8002e0a <HAL_ADC_IRQHandler+0x27e>
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <HAL_ADC_IRQHandler+0x2c0>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	2b09      	cmp	r3, #9
 8002e08:	d009      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x292>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e12:	d004      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x292>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <HAL_ADC_IRQHandler+0x2c4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d104      	bne.n	8002e28 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	e018      	b.n	8002e5a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e30:	d004      	beq.n	8002e3c <HAL_ADC_IRQHandler+0x2b0>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a03      	ldr	r2, [pc, #12]	; (8002e44 <HAL_ADC_IRQHandler+0x2b8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d10b      	bne.n	8002e54 <HAL_ADC_IRQHandler+0x2c8>
 8002e3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e40:	e009      	b.n	8002e56 <HAL_ADC_IRQHandler+0x2ca>
 8002e42:	bf00      	nop
 8002e44:	50000100 	.word	0x50000100
 8002e48:	50000300 	.word	0x50000300
 8002e4c:	50000700 	.word	0x50000700
 8002e50:	50000400 	.word	0x50000400
 8002e54:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <HAL_ADC_IRQHandler+0x514>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 80b0 	bne.w	8002fca <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00d      	beq.n	8002e90 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 80a3 	bne.w	8002fca <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 809d 	bne.w	8002fca <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8097 	beq.w	8002fca <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ea4:	d004      	beq.n	8002eb0 <HAL_ADC_IRQHandler+0x324>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7e      	ldr	r2, [pc, #504]	; (80030a4 <HAL_ADC_IRQHandler+0x518>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d106      	bne.n	8002ebe <HAL_ADC_IRQHandler+0x332>
 8002eb0:	4b7d      	ldr	r3, [pc, #500]	; (80030a8 <HAL_ADC_IRQHandler+0x51c>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d03e      	beq.n	8002f3a <HAL_ADC_IRQHandler+0x3ae>
 8002ebc:	e005      	b.n	8002eca <HAL_ADC_IRQHandler+0x33e>
 8002ebe:	4b7b      	ldr	r3, [pc, #492]	; (80030ac <HAL_ADC_IRQHandler+0x520>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d037      	beq.n	8002f3a <HAL_ADC_IRQHandler+0x3ae>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed2:	d004      	beq.n	8002ede <HAL_ADC_IRQHandler+0x352>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a72      	ldr	r2, [pc, #456]	; (80030a4 <HAL_ADC_IRQHandler+0x518>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d106      	bne.n	8002eec <HAL_ADC_IRQHandler+0x360>
 8002ede:	4b72      	ldr	r3, [pc, #456]	; (80030a8 <HAL_ADC_IRQHandler+0x51c>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d027      	beq.n	8002f3a <HAL_ADC_IRQHandler+0x3ae>
 8002eea:	e005      	b.n	8002ef8 <HAL_ADC_IRQHandler+0x36c>
 8002eec:	4b6f      	ldr	r3, [pc, #444]	; (80030ac <HAL_ADC_IRQHandler+0x520>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	2b06      	cmp	r3, #6
 8002ef6:	d020      	beq.n	8002f3a <HAL_ADC_IRQHandler+0x3ae>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f00:	d004      	beq.n	8002f0c <HAL_ADC_IRQHandler+0x380>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a67      	ldr	r2, [pc, #412]	; (80030a4 <HAL_ADC_IRQHandler+0x518>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d106      	bne.n	8002f1a <HAL_ADC_IRQHandler+0x38e>
 8002f0c:	4b66      	ldr	r3, [pc, #408]	; (80030a8 <HAL_ADC_IRQHandler+0x51c>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	2b07      	cmp	r3, #7
 8002f16:	d010      	beq.n	8002f3a <HAL_ADC_IRQHandler+0x3ae>
 8002f18:	e005      	b.n	8002f26 <HAL_ADC_IRQHandler+0x39a>
 8002f1a:	4b64      	ldr	r3, [pc, #400]	; (80030ac <HAL_ADC_IRQHandler+0x520>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	2b07      	cmp	r3, #7
 8002f24:	d009      	beq.n	8002f3a <HAL_ADC_IRQHandler+0x3ae>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f2e:	d004      	beq.n	8002f3a <HAL_ADC_IRQHandler+0x3ae>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a5a      	ldr	r2, [pc, #360]	; (80030a0 <HAL_ADC_IRQHandler+0x514>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d104      	bne.n	8002f44 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e00f      	b.n	8002f64 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f4c:	d004      	beq.n	8002f58 <HAL_ADC_IRQHandler+0x3cc>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a54      	ldr	r2, [pc, #336]	; (80030a4 <HAL_ADC_IRQHandler+0x518>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d102      	bne.n	8002f5e <HAL_ADC_IRQHandler+0x3d2>
 8002f58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f5c:	e000      	b.n	8002f60 <HAL_ADC_IRQHandler+0x3d4>
 8002f5e:	4b50      	ldr	r3, [pc, #320]	; (80030a0 <HAL_ADC_IRQHandler+0x514>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d12d      	bne.n	8002fca <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d11a      	bne.n	8002fb2 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f8a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d112      	bne.n	8002fca <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
 8002fb0:	e00b      	b.n	8002fca <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f043 0210 	orr.w	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f043 0201 	orr.w	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8c4 	bl	8003158 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2260      	movs	r2, #96	; 0x60
 8002fd6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d011      	beq.n	8003006 <HAL_ADC_IRQHandler+0x47a>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00c      	beq.n	8003006 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff fa85 	bl	8002508 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d012      	beq.n	8003036 <HAL_ADC_IRQHandler+0x4aa>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00d      	beq.n	8003036 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f8aa 	bl	8003180 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003034:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800303c:	2b00      	cmp	r3, #0
 800303e:	d012      	beq.n	8003066 <HAL_ADC_IRQHandler+0x4da>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f89c 	bl	8003194 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003064:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	d04f      	beq.n	8003110 <HAL_ADC_IRQHandler+0x584>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	d04a      	beq.n	8003110 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	2b01      	cmp	r3, #1
 8003080:	d102      	bne.n	8003088 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8003082:	2301      	movs	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	e02d      	b.n	80030e4 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003090:	d004      	beq.n	800309c <HAL_ADC_IRQHandler+0x510>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a03      	ldr	r2, [pc, #12]	; (80030a4 <HAL_ADC_IRQHandler+0x518>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d109      	bne.n	80030b0 <HAL_ADC_IRQHandler+0x524>
 800309c:	4b02      	ldr	r3, [pc, #8]	; (80030a8 <HAL_ADC_IRQHandler+0x51c>)
 800309e:	e008      	b.n	80030b2 <HAL_ADC_IRQHandler+0x526>
 80030a0:	50000400 	.word	0x50000400
 80030a4:	50000100 	.word	0x50000100
 80030a8:	50000300 	.word	0x50000300
 80030ac:	50000700 	.word	0x50000700
 80030b0:	4b28      	ldr	r3, [pc, #160]	; (8003154 <HAL_ADC_IRQHandler+0x5c8>)
 80030b2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d10a      	bne.n	80030e4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80030ce:	2301      	movs	r3, #1
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e007      	b.n	80030e4 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80030e0:	2301      	movs	r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d10e      	bne.n	8003108 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f043 0202 	orr.w	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff fa0a 	bl	800251c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2210      	movs	r2, #16
 800310e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003116:	2b00      	cmp	r3, #0
 8003118:	d018      	beq.n	800314c <HAL_ADC_IRQHandler+0x5c0>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003134:	f043 0208 	orr.w	r2, r3, #8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003144:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f810 	bl	800316c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800314c:	bf00      	nop
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	50000700 	.word	0x50000700

08003158 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b09b      	sub	sp, #108	; 0x6c
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x22>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e2ca      	b.n	8003760 <HAL_ADC_ConfigChannel+0x5b8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f040 82ae 	bne.w	800373e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d81c      	bhi.n	8003224 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	461a      	mov	r2, r3
 80031fe:	231f      	movs	r3, #31
 8003200:	4093      	lsls	r3, r2
 8003202:	43db      	mvns	r3, r3
 8003204:	4019      	ands	r1, r3
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fa00 f203 	lsl.w	r2, r0, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
 8003222:	e063      	b.n	80032ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b09      	cmp	r3, #9
 800322a:	d81e      	bhi.n	800326a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	3b1e      	subs	r3, #30
 8003240:	221f      	movs	r2, #31
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	4019      	ands	r1, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	3b1e      	subs	r3, #30
 800325c:	fa00 f203 	lsl.w	r2, r0, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	635a      	str	r2, [r3, #52]	; 0x34
 8003268:	e040      	b.n	80032ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b0e      	cmp	r3, #14
 8003270:	d81e      	bhi.n	80032b0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	3b3c      	subs	r3, #60	; 0x3c
 8003286:	221f      	movs	r2, #31
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	4019      	ands	r1, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	3b3c      	subs	r3, #60	; 0x3c
 80032a2:	fa00 f203 	lsl.w	r2, r0, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	639a      	str	r2, [r3, #56]	; 0x38
 80032ae:	e01d      	b.n	80032ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	3b5a      	subs	r3, #90	; 0x5a
 80032c4:	221f      	movs	r2, #31
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	4019      	ands	r1, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	3b5a      	subs	r3, #90	; 0x5a
 80032e0:	fa00 f203 	lsl.w	r2, r0, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f040 80e5 	bne.w	80034c6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b09      	cmp	r3, #9
 8003302:	d91c      	bls.n	800333e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6999      	ldr	r1, [r3, #24]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	3b1e      	subs	r3, #30
 8003316:	2207      	movs	r2, #7
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	4019      	ands	r1, r3
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	6898      	ldr	r0, [r3, #8]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	3b1e      	subs	r3, #30
 8003330:	fa00 f203 	lsl.w	r2, r0, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	619a      	str	r2, [r3, #24]
 800333c:	e019      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6959      	ldr	r1, [r3, #20]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	2207      	movs	r2, #7
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	4019      	ands	r1, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6898      	ldr	r0, [r3, #8]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	fa00 f203 	lsl.w	r2, r0, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	08db      	lsrs	r3, r3, #3
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	3b01      	subs	r3, #1
 8003390:	2b03      	cmp	r3, #3
 8003392:	d84f      	bhi.n	8003434 <HAL_ADC_ConfigChannel+0x28c>
 8003394:	a201      	add	r2, pc, #4	; (adr r2, 800339c <HAL_ADC_ConfigChannel+0x1f4>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033ad 	.word	0x080033ad
 80033a0:	080033cf 	.word	0x080033cf
 80033a4:	080033f1 	.word	0x080033f1
 80033a8:	08003413 	.word	0x08003413
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033b2:	4b9a      	ldr	r3, [pc, #616]	; (800361c <HAL_ADC_ConfigChannel+0x474>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	0691      	lsls	r1, r2, #26
 80033bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033be:	430a      	orrs	r2, r1
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033ca:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80033cc:	e07e      	b.n	80034cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033d4:	4b91      	ldr	r3, [pc, #580]	; (800361c <HAL_ADC_ConfigChannel+0x474>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	0691      	lsls	r1, r2, #26
 80033de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033e0:	430a      	orrs	r2, r1
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033ec:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80033ee:	e06d      	b.n	80034cc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033f6:	4b89      	ldr	r3, [pc, #548]	; (800361c <HAL_ADC_ConfigChannel+0x474>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	0691      	lsls	r1, r2, #26
 8003400:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003402:	430a      	orrs	r2, r1
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800340e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003410:	e05c      	b.n	80034cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003418:	4b80      	ldr	r3, [pc, #512]	; (800361c <HAL_ADC_ConfigChannel+0x474>)
 800341a:	4013      	ands	r3, r2
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	0691      	lsls	r1, r2, #26
 8003422:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003424:	430a      	orrs	r2, r1
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003430:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003432:	e04b      	b.n	80034cc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	069b      	lsls	r3, r3, #26
 8003444:	429a      	cmp	r2, r3
 8003446:	d107      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003456:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	069b      	lsls	r3, r3, #26
 8003468:	429a      	cmp	r2, r3
 800346a:	d107      	bne.n	800347c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800347a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003482:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	069b      	lsls	r3, r3, #26
 800348c:	429a      	cmp	r2, r3
 800348e:	d107      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800349e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	069b      	lsls	r3, r3, #26
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d10a      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80034c4:	e001      	b.n	80034ca <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80034c6:	bf00      	nop
 80034c8:	e000      	b.n	80034cc <HAL_ADC_ConfigChannel+0x324>
      break;
 80034ca:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d108      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x344>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x344>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_ADC_ConfigChannel+0x346>
 80034ec:	2300      	movs	r3, #0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 8130 	bne.w	8003754 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d00f      	beq.n	800351c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2201      	movs	r2, #1
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43da      	mvns	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	400a      	ands	r2, r1
 8003516:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800351a:	e049      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2201      	movs	r2, #1
 800352a:	409a      	lsls	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b09      	cmp	r3, #9
 800353c:	d91c      	bls.n	8003578 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6999      	ldr	r1, [r3, #24]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	3b1b      	subs	r3, #27
 8003550:	2207      	movs	r2, #7
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	4019      	ands	r1, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6898      	ldr	r0, [r3, #8]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4413      	add	r3, r2
 8003568:	3b1b      	subs	r3, #27
 800356a:	fa00 f203 	lsl.w	r2, r0, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	619a      	str	r2, [r3, #24]
 8003576:	e01b      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6959      	ldr	r1, [r3, #20]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	2207      	movs	r2, #7
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	4019      	ands	r1, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6898      	ldr	r0, [r3, #8]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	fa00 f203 	lsl.w	r2, r0, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035b8:	d004      	beq.n	80035c4 <HAL_ADC_ConfigChannel+0x41c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_ADC_ConfigChannel+0x478>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x420>
 80035c4:	4b17      	ldr	r3, [pc, #92]	; (8003624 <HAL_ADC_ConfigChannel+0x47c>)
 80035c6:	e000      	b.n	80035ca <HAL_ADC_ConfigChannel+0x422>
 80035c8:	4b17      	ldr	r3, [pc, #92]	; (8003628 <HAL_ADC_ConfigChannel+0x480>)
 80035ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d105      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80035d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d015      	beq.n	800360c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80035e4:	2b11      	cmp	r3, #17
 80035e6:	d105      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80035e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00b      	beq.n	800360c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80035f8:	2b12      	cmp	r3, #18
 80035fa:	f040 80ab 	bne.w	8003754 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80035fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003606:	2b00      	cmp	r3, #0
 8003608:	f040 80a4 	bne.w	8003754 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003614:	d10a      	bne.n	800362c <HAL_ADC_ConfigChannel+0x484>
 8003616:	4b02      	ldr	r3, [pc, #8]	; (8003620 <HAL_ADC_ConfigChannel+0x478>)
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	e022      	b.n	8003662 <HAL_ADC_ConfigChannel+0x4ba>
 800361c:	83fff000 	.word	0x83fff000
 8003620:	50000100 	.word	0x50000100
 8003624:	50000300 	.word	0x50000300
 8003628:	50000700 	.word	0x50000700
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a4e      	ldr	r2, [pc, #312]	; (800376c <HAL_ADC_ConfigChannel+0x5c4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d103      	bne.n	800363e <HAL_ADC_ConfigChannel+0x496>
 8003636:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e011      	b.n	8003662 <HAL_ADC_ConfigChannel+0x4ba>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a4b      	ldr	r2, [pc, #300]	; (8003770 <HAL_ADC_ConfigChannel+0x5c8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d102      	bne.n	800364e <HAL_ADC_ConfigChannel+0x4a6>
 8003648:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_ADC_ConfigChannel+0x5cc>)
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e009      	b.n	8003662 <HAL_ADC_ConfigChannel+0x4ba>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a48      	ldr	r2, [pc, #288]	; (8003774 <HAL_ADC_ConfigChannel+0x5cc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d102      	bne.n	800365e <HAL_ADC_ConfigChannel+0x4b6>
 8003658:	4b45      	ldr	r3, [pc, #276]	; (8003770 <HAL_ADC_ConfigChannel+0x5c8>)
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	e001      	b.n	8003662 <HAL_ADC_ConfigChannel+0x4ba>
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d108      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x4da>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x4da>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <HAL_ADC_ConfigChannel+0x4dc>
 8003682:	2300      	movs	r3, #0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d150      	bne.n	800372a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003688:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800368a:	2b00      	cmp	r3, #0
 800368c:	d010      	beq.n	80036b0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d107      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x502>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x502>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <HAL_ADC_ConfigChannel+0x504>
 80036aa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d13c      	bne.n	800372a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b10      	cmp	r3, #16
 80036b6:	d11d      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x54c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c0:	d118      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80036c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036cc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036ce:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <HAL_ADC_ConfigChannel+0x5d0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a2a      	ldr	r2, [pc, #168]	; (800377c <HAL_ADC_ConfigChannel+0x5d4>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	0c9a      	lsrs	r2, r3, #18
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036e4:	e002      	b.n	80036ec <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f9      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80036f2:	e02e      	b.n	8003752 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b11      	cmp	r3, #17
 80036fa:	d10b      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x56c>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003704:	d106      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800370e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003710:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003712:	e01e      	b.n	8003752 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b12      	cmp	r3, #18
 800371a:	d11a      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800371c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003726:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003728:	e013      	b.n	8003752 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f043 0220 	orr.w	r2, r3, #32
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800373c:	e00a      	b.n	8003754 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f043 0220 	orr.w	r2, r3, #32
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003750:	e000      	b.n	8003754 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003752:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800375c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003760:	4618      	mov	r0, r3
 8003762:	376c      	adds	r7, #108	; 0x6c
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	50000100 	.word	0x50000100
 8003770:	50000400 	.word	0x50000400
 8003774:	50000500 	.word	0x50000500
 8003778:	200000f0 	.word	0x200000f0
 800377c:	431bde83 	.word	0x431bde83

08003780 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003780:	b480      	push	{r7}
 8003782:	b099      	sub	sp, #100	; 0x64
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003798:	d102      	bne.n	80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800379a:	4b6d      	ldr	r3, [pc, #436]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	e01a      	b.n	80037d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a6a      	ldr	r2, [pc, #424]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d103      	bne.n	80037b2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80037aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	e011      	b.n	80037d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a67      	ldr	r2, [pc, #412]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d102      	bne.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80037bc:	4b66      	ldr	r3, [pc, #408]	; (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	e009      	b.n	80037d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a64      	ldr	r2, [pc, #400]	; (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d102      	bne.n	80037d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80037cc:	4b61      	ldr	r3, [pc, #388]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	e001      	b.n	80037d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0b0      	b.n	8003942 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0a9      	b.n	8003942 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	f040 808d 	bne.w	8003920 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 8086 	bne.w	8003920 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800381c:	d004      	beq.n	8003828 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a4b      	ldr	r2, [pc, #300]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d101      	bne.n	800382c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003828:	4b4c      	ldr	r3, [pc, #304]	; (800395c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800382a:	e000      	b.n	800382e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800382c:	4b4c      	ldr	r3, [pc, #304]	; (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800382e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d040      	beq.n	80038ba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800384a:	035b      	lsls	r3, r3, #13
 800384c:	430b      	orrs	r3, r1
 800384e:	431a      	orrs	r2, r3
 8003850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003852:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d108      	bne.n	8003874 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003874:	2300      	movs	r3, #0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d15c      	bne.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d107      	bne.n	8003896 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003896:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003898:	2b00      	cmp	r3, #0
 800389a:	d14b      	bne.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800389c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80038a4:	f023 030f 	bic.w	r3, r3, #15
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	6811      	ldr	r1, [r2, #0]
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	6892      	ldr	r2, [r2, #8]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	431a      	orrs	r2, r3
 80038b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038b6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80038b8:	e03c      	b.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80038ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038c4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d108      	bne.n	80038e6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d123      	bne.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d107      	bne.n	8003908 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003908:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800390a:	2b00      	cmp	r3, #0
 800390c:	d112      	bne.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800390e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003916:	f023 030f 	bic.w	r3, r3, #15
 800391a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800391c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800391e:	e009      	b.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f043 0220 	orr.w	r2, r3, #32
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003932:	e000      	b.n	8003936 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003934:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800393e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003942:	4618      	mov	r0, r3
 8003944:	3764      	adds	r7, #100	; 0x64
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	50000100 	.word	0x50000100
 8003954:	50000400 	.word	0x50000400
 8003958:	50000500 	.word	0x50000500
 800395c:	50000300 	.word	0x50000300
 8003960:	50000700 	.word	0x50000700

08003964 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d108      	bne.n	8003990 <ADC_Enable+0x2c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <ADC_Enable+0x2c>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <ADC_Enable+0x2e>
 8003990:	2300      	movs	r3, #0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d143      	bne.n	8003a1e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <ADC_Enable+0xc4>)
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00d      	beq.n	80039c0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f043 0210 	orr.w	r2, r3, #16
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	f043 0201 	orr.w	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e02f      	b.n	8003a20 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80039d0:	f7fe fd8e 	bl	80024f0 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80039d6:	e01b      	b.n	8003a10 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039d8:	f7fe fd8a 	bl	80024f0 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d914      	bls.n	8003a10 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d00d      	beq.n	8003a10 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	f043 0210 	orr.w	r2, r3, #16
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	f043 0201 	orr.w	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e007      	b.n	8003a20 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d1dc      	bne.n	80039d8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	8000003f 	.word	0x8000003f

08003a2c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d108      	bne.n	8003a58 <ADC_Disable+0x2c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <ADC_Disable+0x2c>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <ADC_Disable+0x2e>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d047      	beq.n	8003aee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030d 	and.w	r3, r3, #13
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d10f      	bne.n	8003a8c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0202 	orr.w	r2, r2, #2
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2203      	movs	r2, #3
 8003a82:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003a84:	f7fe fd34 	bl	80024f0 <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a8a:	e029      	b.n	8003ae0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f043 0210 	orr.w	r2, r3, #16
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9c:	f043 0201 	orr.w	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e023      	b.n	8003af0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003aa8:	f7fe fd22 	bl	80024f0 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d914      	bls.n	8003ae0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d10d      	bne.n	8003ae0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f043 0210 	orr.w	r2, r3, #16
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	f043 0201 	orr.w	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e007      	b.n	8003af0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d0dc      	beq.n	8003aa8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b14:	4013      	ands	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b2a:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	60d3      	str	r3, [r2, #12]
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <__NVIC_GetPriorityGrouping+0x18>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	f003 0307 	and.w	r3, r3, #7
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	db0b      	blt.n	8003b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	f003 021f 	and.w	r2, r3, #31
 8003b74:	4907      	ldr	r1, [pc, #28]	; (8003b94 <__NVIC_EnableIRQ+0x38>)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000e100 	.word	0xe000e100

08003b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	6039      	str	r1, [r7, #0]
 8003ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	db0a      	blt.n	8003bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	490c      	ldr	r1, [pc, #48]	; (8003be4 <__NVIC_SetPriority+0x4c>)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	0112      	lsls	r2, r2, #4
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc0:	e00a      	b.n	8003bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4908      	ldr	r1, [pc, #32]	; (8003be8 <__NVIC_SetPriority+0x50>)
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	3b04      	subs	r3, #4
 8003bd0:	0112      	lsls	r2, r2, #4
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	761a      	strb	r2, [r3, #24]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000e100 	.word	0xe000e100
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	; 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f1c3 0307 	rsb	r3, r3, #7
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	bf28      	it	cs
 8003c0a:	2304      	movcs	r3, #4
 8003c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3304      	adds	r3, #4
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d902      	bls.n	8003c1c <NVIC_EncodePriority+0x30>
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3b03      	subs	r3, #3
 8003c1a:	e000      	b.n	8003c1e <NVIC_EncodePriority+0x32>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	f04f 32ff 	mov.w	r2, #4294967295
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	401a      	ands	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c34:	f04f 31ff 	mov.w	r1, #4294967295
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3e:	43d9      	mvns	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c44:	4313      	orrs	r3, r2
         );
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3724      	adds	r7, #36	; 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c64:	d301      	bcc.n	8003c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c66:	2301      	movs	r3, #1
 8003c68:	e00f      	b.n	8003c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c6a:	4a0a      	ldr	r2, [pc, #40]	; (8003c94 <SysTick_Config+0x40>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c72:	210f      	movs	r1, #15
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	f7ff ff8e 	bl	8003b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <SysTick_Config+0x40>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c82:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <SysTick_Config+0x40>)
 8003c84:	2207      	movs	r2, #7
 8003c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	e000e010 	.word	0xe000e010

08003c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ff29 	bl	8003af8 <__NVIC_SetPriorityGrouping>
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cc0:	f7ff ff3e 	bl	8003b40 <__NVIC_GetPriorityGrouping>
 8003cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	6978      	ldr	r0, [r7, #20]
 8003ccc:	f7ff ff8e 	bl	8003bec <NVIC_EncodePriority>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff ff5d 	bl	8003b98 <__NVIC_SetPriority>
}
 8003cde:	bf00      	nop
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	4603      	mov	r3, r0
 8003cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ff31 	bl	8003b5c <__NVIC_EnableIRQ>
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ffa2 	bl	8003c54 <SysTick_Config>
 8003d10:	4603      	mov	r3, r0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d008      	beq.n	8003d3e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e020      	b.n	8003d80 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 020e 	bic.w	r2, r2, #14
 8003d4c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	2101      	movs	r1, #1
 8003d68:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d005      	beq.n	8003dae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2204      	movs	r2, #4
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
 8003dac:	e027      	b.n	8003dfe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 020e 	bic.w	r2, r2, #14
 8003dbc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ddc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
    } 
  }
  return status;
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e16:	e154      	b.n	80040c2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	fa01 f303 	lsl.w	r3, r1, r3
 8003e24:	4013      	ands	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 8146 	beq.w	80040bc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d005      	beq.n	8003e48 <HAL_GPIO_Init+0x40>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d130      	bne.n	8003eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	2203      	movs	r2, #3
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e7e:	2201      	movs	r2, #1
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	091b      	lsrs	r3, r3, #4
 8003e94:	f003 0201 	and.w	r2, r3, #1
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d017      	beq.n	8003ee6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d123      	bne.n	8003f3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	08da      	lsrs	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3208      	adds	r2, #8
 8003efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	220f      	movs	r2, #15
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	08da      	lsrs	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3208      	adds	r2, #8
 8003f34:	6939      	ldr	r1, [r7, #16]
 8003f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	2203      	movs	r2, #3
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f003 0203 	and.w	r2, r3, #3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80a0 	beq.w	80040bc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7c:	4b58      	ldr	r3, [pc, #352]	; (80040e0 <HAL_GPIO_Init+0x2d8>)
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4a57      	ldr	r2, [pc, #348]	; (80040e0 <HAL_GPIO_Init+0x2d8>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6193      	str	r3, [r2, #24]
 8003f88:	4b55      	ldr	r3, [pc, #340]	; (80040e0 <HAL_GPIO_Init+0x2d8>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f94:	4a53      	ldr	r2, [pc, #332]	; (80040e4 <HAL_GPIO_Init+0x2dc>)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	220f      	movs	r2, #15
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fbe:	d019      	beq.n	8003ff4 <HAL_GPIO_Init+0x1ec>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a49      	ldr	r2, [pc, #292]	; (80040e8 <HAL_GPIO_Init+0x2e0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <HAL_GPIO_Init+0x1e8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a48      	ldr	r2, [pc, #288]	; (80040ec <HAL_GPIO_Init+0x2e4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00d      	beq.n	8003fec <HAL_GPIO_Init+0x1e4>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a47      	ldr	r2, [pc, #284]	; (80040f0 <HAL_GPIO_Init+0x2e8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d007      	beq.n	8003fe8 <HAL_GPIO_Init+0x1e0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a46      	ldr	r2, [pc, #280]	; (80040f4 <HAL_GPIO_Init+0x2ec>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <HAL_GPIO_Init+0x1dc>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	e008      	b.n	8003ff6 <HAL_GPIO_Init+0x1ee>
 8003fe4:	2305      	movs	r3, #5
 8003fe6:	e006      	b.n	8003ff6 <HAL_GPIO_Init+0x1ee>
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e004      	b.n	8003ff6 <HAL_GPIO_Init+0x1ee>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e002      	b.n	8003ff6 <HAL_GPIO_Init+0x1ee>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_GPIO_Init+0x1ee>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	f002 0203 	and.w	r2, r2, #3
 8003ffc:	0092      	lsls	r2, r2, #2
 8003ffe:	4093      	lsls	r3, r2
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004006:	4937      	ldr	r1, [pc, #220]	; (80040e4 <HAL_GPIO_Init+0x2dc>)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	3302      	adds	r3, #2
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004014:	4b38      	ldr	r3, [pc, #224]	; (80040f8 <HAL_GPIO_Init+0x2f0>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	43db      	mvns	r3, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004038:	4a2f      	ldr	r2, [pc, #188]	; (80040f8 <HAL_GPIO_Init+0x2f0>)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800403e:	4b2e      	ldr	r3, [pc, #184]	; (80040f8 <HAL_GPIO_Init+0x2f0>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004062:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <HAL_GPIO_Init+0x2f0>)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004068:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <HAL_GPIO_Init+0x2f0>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	43db      	mvns	r3, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800408c:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <HAL_GPIO_Init+0x2f0>)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004092:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <HAL_GPIO_Init+0x2f0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	43db      	mvns	r3, r3
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4013      	ands	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80040b6:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <HAL_GPIO_Init+0x2f0>)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	3301      	adds	r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f47f aea3 	bne.w	8003e18 <HAL_GPIO_Init+0x10>
  }
}
 80040d2:	bf00      	nop
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40010000 	.word	0x40010000
 80040e8:	48000400 	.word	0x48000400
 80040ec:	48000800 	.word	0x48000800
 80040f0:	48000c00 	.word	0x48000c00
 80040f4:	48001000 	.word	0x48001000
 80040f8:	40010400 	.word	0x40010400

080040fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	807b      	strh	r3, [r7, #2]
 8004108:	4613      	mov	r3, r2
 800410a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800410c:	787b      	ldrb	r3, [r7, #1]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004118:	e002      	b.n	8004120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4013      	ands	r3, r2
 8004144:	041a      	lsls	r2, r3, #16
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	43d9      	mvns	r1, r3
 800414a:	887b      	ldrh	r3, [r7, #2]
 800414c:	400b      	ands	r3, r1
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	619a      	str	r2, [r3, #24]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800416a:	4b08      	ldr	r3, [pc, #32]	; (800418c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d006      	beq.n	8004184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004176:	4a05      	ldr	r2, [pc, #20]	; (800418c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fd fca8 	bl	8001ad4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40010400 	.word	0x40010400

08004190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e081      	b.n	80042a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fd fe48 	bl	8001e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2224      	movs	r2, #36	; 0x24
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d107      	bne.n	800420a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	e006      	b.n	8004218 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004216:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d104      	bne.n	800422a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004228:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800423c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800424c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69d9      	ldr	r1, [r3, #28]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d138      	bne.n	8004336 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e032      	b.n	8004338 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2224      	movs	r2, #36	; 0x24
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004300:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6819      	ldr	r1, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0201 	orr.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	e000      	b.n	8004338 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004336:	2302      	movs	r3, #2
  }
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b20      	cmp	r3, #32
 8004358:	d139      	bne.n	80043ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004364:	2302      	movs	r3, #2
 8004366:	e033      	b.n	80043d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2224      	movs	r2, #36	; 0x24
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004396:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0201 	orr.w	r2, r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e000      	b.n	80043d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043ce:	2302      	movs	r3, #2
  }
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043de:	b08b      	sub	sp, #44	; 0x2c
 80043e0:	af06      	add	r7, sp, #24
 80043e2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e0c4      	b.n	8004578 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fd fe6c 	bl	80020e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2203      	movs	r2, #3
 800440c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f003 ffa0 	bl	800835a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]
 800441e:	e040      	b.n	80044a2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	440b      	add	r3, r1
 8004430:	3301      	adds	r3, #1
 8004432:	2201      	movs	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	440b      	add	r3, r1
 8004446:	7bfa      	ldrb	r2, [r7, #15]
 8004448:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	440b      	add	r3, r1
 800445a:	3303      	adds	r3, #3
 800445c:	2200      	movs	r2, #0
 800445e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004460:	7bfa      	ldrb	r2, [r7, #15]
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	440b      	add	r3, r1
 800446e:	3338      	adds	r3, #56	; 0x38
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004474:	7bfa      	ldrb	r2, [r7, #15]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	440b      	add	r3, r1
 8004482:	333c      	adds	r3, #60	; 0x3c
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004488:	7bfa      	ldrb	r2, [r7, #15]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	440b      	add	r3, r1
 8004496:	3340      	adds	r3, #64	; 0x40
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	3301      	adds	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
 80044a2:	7bfa      	ldrb	r2, [r7, #15]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d3b9      	bcc.n	8004420 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ac:	2300      	movs	r3, #0
 80044ae:	73fb      	strb	r3, [r7, #15]
 80044b0:	e044      	b.n	800453c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044b2:	7bfa      	ldrb	r2, [r7, #15]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	440b      	add	r3, r1
 80044c0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044c8:	7bfa      	ldrb	r2, [r7, #15]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	440b      	add	r3, r1
 80044d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044de:	7bfa      	ldrb	r2, [r7, #15]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	440b      	add	r3, r1
 80044ec:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044f4:	7bfa      	ldrb	r2, [r7, #15]
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	440b      	add	r3, r1
 8004502:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800450a:	7bfa      	ldrb	r2, [r7, #15]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	440b      	add	r3, r1
 8004518:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004520:	7bfa      	ldrb	r2, [r7, #15]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	440b      	add	r3, r1
 800452e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	3301      	adds	r3, #1
 800453a:	73fb      	strb	r3, [r7, #15]
 800453c:	7bfa      	ldrb	r2, [r7, #15]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	429a      	cmp	r2, r3
 8004544:	d3b5      	bcc.n	80044b2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	687e      	ldr	r6, [r7, #4]
 800454e:	466d      	mov	r5, sp
 8004550:	f106 0410 	add.w	r4, r6, #16
 8004554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	602b      	str	r3, [r5, #0]
 800455c:	1d33      	adds	r3, r6, #4
 800455e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004560:	6838      	ldr	r0, [r7, #0]
 8004562:	f003 ff15 	bl	8008390 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004586:	af00      	add	r7, sp, #0
 8004588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800458c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004590:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004596:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d102      	bne.n	80045a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f001 b823 	b.w	80055ec <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 817d 	beq.w	80048b6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80045bc:	4bbc      	ldr	r3, [pc, #752]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 030c 	and.w	r3, r3, #12
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d00c      	beq.n	80045e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045c8:	4bb9      	ldr	r3, [pc, #740]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d15c      	bne.n	800468e <HAL_RCC_OscConfig+0x10e>
 80045d4:	4bb6      	ldr	r3, [pc, #728]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e0:	d155      	bne.n	800468e <HAL_RCC_OscConfig+0x10e>
 80045e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045e6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80045f6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fa:	fab3 f383 	clz	r3, r3
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b01      	cmp	r3, #1
 800460c:	d102      	bne.n	8004614 <HAL_RCC_OscConfig+0x94>
 800460e:	4ba8      	ldr	r3, [pc, #672]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	e015      	b.n	8004640 <HAL_RCC_OscConfig+0xc0>
 8004614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004618:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800462c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004630:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004634:	fa93 f3a3 	rbit	r3, r3
 8004638:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800463c:	4b9c      	ldr	r3, [pc, #624]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004644:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004648:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800464c:	fa92 f2a2 	rbit	r2, r2
 8004650:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004654:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004658:	fab2 f282 	clz	r2, r2
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	f042 0220 	orr.w	r2, r2, #32
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	f002 021f 	and.w	r2, r2, #31
 8004668:	2101      	movs	r1, #1
 800466a:	fa01 f202 	lsl.w	r2, r1, r2
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 811f 	beq.w	80048b4 <HAL_RCC_OscConfig+0x334>
 8004676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f040 8116 	bne.w	80048b4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f000 bfaf 	b.w	80055ec <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800468e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004692:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469e:	d106      	bne.n	80046ae <HAL_RCC_OscConfig+0x12e>
 80046a0:	4b83      	ldr	r3, [pc, #524]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a82      	ldr	r2, [pc, #520]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80046a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	e036      	b.n	800471c <HAL_RCC_OscConfig+0x19c>
 80046ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x158>
 80046be:	4b7c      	ldr	r3, [pc, #496]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a7b      	ldr	r2, [pc, #492]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b79      	ldr	r3, [pc, #484]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a78      	ldr	r2, [pc, #480]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80046d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e021      	b.n	800471c <HAL_RCC_OscConfig+0x19c>
 80046d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x184>
 80046ea:	4b71      	ldr	r3, [pc, #452]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a70      	ldr	r2, [pc, #448]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80046f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b6e      	ldr	r3, [pc, #440]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6d      	ldr	r2, [pc, #436]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0x19c>
 8004704:	4b6a      	ldr	r3, [pc, #424]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a69      	ldr	r2, [pc, #420]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 800470a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b67      	ldr	r3, [pc, #412]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a66      	ldr	r2, [pc, #408]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 8004716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800471a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800471c:	4b64      	ldr	r3, [pc, #400]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	f023 020f 	bic.w	r2, r3, #15
 8004724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004728:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	495f      	ldr	r1, [pc, #380]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 8004732:	4313      	orrs	r3, r2
 8004734:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d059      	beq.n	80047fa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fd fed3 	bl	80024f0 <HAL_GetTick>
 800474a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474e:	e00a      	b.n	8004766 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004750:	f7fd fece 	bl	80024f0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b64      	cmp	r3, #100	; 0x64
 800475e:	d902      	bls.n	8004766 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	f000 bf43 	b.w	80055ec <HAL_RCC_OscConfig+0x106c>
 8004766:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800476a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004772:	fa93 f3a3 	rbit	r3, r3
 8004776:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800477a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	d102      	bne.n	8004798 <HAL_RCC_OscConfig+0x218>
 8004792:	4b47      	ldr	r3, [pc, #284]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	e015      	b.n	80047c4 <HAL_RCC_OscConfig+0x244>
 8004798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800479c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80047ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047b0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80047b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80047b8:	fa93 f3a3 	rbit	r3, r3
 80047bc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80047c0:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047c8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80047cc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80047d0:	fa92 f2a2 	rbit	r2, r2
 80047d4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80047d8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80047dc:	fab2 f282 	clz	r2, r2
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	f042 0220 	orr.w	r2, r2, #32
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	f002 021f 	and.w	r2, r2, #31
 80047ec:	2101      	movs	r1, #1
 80047ee:	fa01 f202 	lsl.w	r2, r1, r2
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0ab      	beq.n	8004750 <HAL_RCC_OscConfig+0x1d0>
 80047f8:	e05d      	b.n	80048b6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fa:	f7fd fe79 	bl	80024f0 <HAL_GetTick>
 80047fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004802:	e00a      	b.n	800481a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004804:	f7fd fe74 	bl	80024f0 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b64      	cmp	r3, #100	; 0x64
 8004812:	d902      	bls.n	800481a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	f000 bee9 	b.w	80055ec <HAL_RCC_OscConfig+0x106c>
 800481a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800481e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004822:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004826:	fa93 f3a3 	rbit	r3, r3
 800482a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800482e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004832:	fab3 f383 	clz	r3, r3
 8004836:	b2db      	uxtb	r3, r3
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	b2db      	uxtb	r3, r3
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	d102      	bne.n	800484c <HAL_RCC_OscConfig+0x2cc>
 8004846:	4b1a      	ldr	r3, [pc, #104]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	e015      	b.n	8004878 <HAL_RCC_OscConfig+0x2f8>
 800484c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004850:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004854:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004858:	fa93 f3a3 	rbit	r3, r3
 800485c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004864:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004868:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800486c:	fa93 f3a3 	rbit	r3, r3
 8004870:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004874:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <HAL_RCC_OscConfig+0x330>)
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800487c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004880:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004884:	fa92 f2a2 	rbit	r2, r2
 8004888:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800488c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004890:	fab2 f282 	clz	r2, r2
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	f042 0220 	orr.w	r2, r2, #32
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	f002 021f 	and.w	r2, r2, #31
 80048a0:	2101      	movs	r1, #1
 80048a2:	fa01 f202 	lsl.w	r2, r1, r2
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1ab      	bne.n	8004804 <HAL_RCC_OscConfig+0x284>
 80048ac:	e003      	b.n	80048b6 <HAL_RCC_OscConfig+0x336>
 80048ae:	bf00      	nop
 80048b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 817d 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80048cc:	4ba6      	ldr	r3, [pc, #664]	; (8004b68 <HAL_RCC_OscConfig+0x5e8>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 030c 	and.w	r3, r3, #12
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00b      	beq.n	80048f0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80048d8:	4ba3      	ldr	r3, [pc, #652]	; (8004b68 <HAL_RCC_OscConfig+0x5e8>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 030c 	and.w	r3, r3, #12
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d172      	bne.n	80049ca <HAL_RCC_OscConfig+0x44a>
 80048e4:	4ba0      	ldr	r3, [pc, #640]	; (8004b68 <HAL_RCC_OscConfig+0x5e8>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d16c      	bne.n	80049ca <HAL_RCC_OscConfig+0x44a>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004902:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	d102      	bne.n	8004920 <HAL_RCC_OscConfig+0x3a0>
 800491a:	4b93      	ldr	r3, [pc, #588]	; (8004b68 <HAL_RCC_OscConfig+0x5e8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	e013      	b.n	8004948 <HAL_RCC_OscConfig+0x3c8>
 8004920:	2302      	movs	r3, #2
 8004922:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004926:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800492a:	fa93 f3a3 	rbit	r3, r3
 800492e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004932:	2302      	movs	r3, #2
 8004934:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004938:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800493c:	fa93 f3a3 	rbit	r3, r3
 8004940:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004944:	4b88      	ldr	r3, [pc, #544]	; (8004b68 <HAL_RCC_OscConfig+0x5e8>)
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	2202      	movs	r2, #2
 800494a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800494e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004952:	fa92 f2a2 	rbit	r2, r2
 8004956:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800495a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800495e:	fab2 f282 	clz	r2, r2
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	f042 0220 	orr.w	r2, r2, #32
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	f002 021f 	and.w	r2, r2, #31
 800496e:	2101      	movs	r1, #1
 8004970:	fa01 f202 	lsl.w	r2, r1, r2
 8004974:	4013      	ands	r3, r2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCC_OscConfig+0x410>
 800497a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800497e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d002      	beq.n	8004990 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f000 be2e 	b.w	80055ec <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004990:	4b75      	ldr	r3, [pc, #468]	; (8004b68 <HAL_RCC_OscConfig+0x5e8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	21f8      	movs	r1, #248	; 0xf8
 80049a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80049ae:	fa91 f1a1 	rbit	r1, r1
 80049b2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80049b6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80049ba:	fab1 f181 	clz	r1, r1
 80049be:	b2c9      	uxtb	r1, r1
 80049c0:	408b      	lsls	r3, r1
 80049c2:	4969      	ldr	r1, [pc, #420]	; (8004b68 <HAL_RCC_OscConfig+0x5e8>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c8:	e0fd      	b.n	8004bc6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8088 	beq.w	8004aec <HAL_RCC_OscConfig+0x56c>
 80049dc:	2301      	movs	r3, #1
 80049de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80049e6:	fa93 f3a3 	rbit	r3, r3
 80049ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80049ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049f2:	fab3 f383 	clz	r3, r3
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	461a      	mov	r2, r3
 8004a04:	2301      	movs	r3, #1
 8004a06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a08:	f7fd fd72 	bl	80024f0 <HAL_GetTick>
 8004a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a10:	e00a      	b.n	8004a28 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a12:	f7fd fd6d 	bl	80024f0 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d902      	bls.n	8004a28 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	f000 bde2 	b.w	80055ec <HAL_RCC_OscConfig+0x106c>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004a32:	fa93 f3a3 	rbit	r3, r3
 8004a36:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004a3a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d102      	bne.n	8004a58 <HAL_RCC_OscConfig+0x4d8>
 8004a52:	4b45      	ldr	r3, [pc, #276]	; (8004b68 <HAL_RCC_OscConfig+0x5e8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	e013      	b.n	8004a80 <HAL_RCC_OscConfig+0x500>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004a62:	fa93 f3a3 	rbit	r3, r3
 8004a66:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004a70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004a74:	fa93 f3a3 	rbit	r3, r3
 8004a78:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004a7c:	4b3a      	ldr	r3, [pc, #232]	; (8004b68 <HAL_RCC_OscConfig+0x5e8>)
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	2202      	movs	r2, #2
 8004a82:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004a86:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004a8a:	fa92 f2a2 	rbit	r2, r2
 8004a8e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004a92:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004a96:	fab2 f282 	clz	r2, r2
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	f042 0220 	orr.w	r2, r2, #32
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	f002 021f 	and.w	r2, r2, #31
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0af      	beq.n	8004a12 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab2:	4b2d      	ldr	r3, [pc, #180]	; (8004b68 <HAL_RCC_OscConfig+0x5e8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	21f8      	movs	r1, #248	; 0xf8
 8004ac8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004ad0:	fa91 f1a1 	rbit	r1, r1
 8004ad4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004ad8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004adc:	fab1 f181 	clz	r1, r1
 8004ae0:	b2c9      	uxtb	r1, r1
 8004ae2:	408b      	lsls	r3, r1
 8004ae4:	4920      	ldr	r1, [pc, #128]	; (8004b68 <HAL_RCC_OscConfig+0x5e8>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]
 8004aea:	e06c      	b.n	8004bc6 <HAL_RCC_OscConfig+0x646>
 8004aec:	2301      	movs	r3, #1
 8004aee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004af6:	fa93 f3a3 	rbit	r3, r3
 8004afa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004afe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b02:	fab3 f383 	clz	r3, r3
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	461a      	mov	r2, r3
 8004b14:	2300      	movs	r3, #0
 8004b16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fd fcea 	bl	80024f0 <HAL_GetTick>
 8004b1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b20:	e00a      	b.n	8004b38 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b22:	f7fd fce5 	bl	80024f0 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d902      	bls.n	8004b38 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	f000 bd5a 	b.w	80055ec <HAL_RCC_OscConfig+0x106c>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b42:	fa93 f3a3 	rbit	r3, r3
 8004b46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b4e:	fab3 f383 	clz	r3, r3
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d104      	bne.n	8004b6c <HAL_RCC_OscConfig+0x5ec>
 8004b62:	4b01      	ldr	r3, [pc, #4]	; (8004b68 <HAL_RCC_OscConfig+0x5e8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	e015      	b.n	8004b94 <HAL_RCC_OscConfig+0x614>
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b76:	fa93 f3a3 	rbit	r3, r3
 8004b7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b7e:	2302      	movs	r3, #2
 8004b80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004b84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b88:	fa93 f3a3 	rbit	r3, r3
 8004b8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004b90:	4bc8      	ldr	r3, [pc, #800]	; (8004eb4 <HAL_RCC_OscConfig+0x934>)
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	2202      	movs	r2, #2
 8004b96:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004b9a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004b9e:	fa92 f2a2 	rbit	r2, r2
 8004ba2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004ba6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004baa:	fab2 f282 	clz	r2, r2
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	f042 0220 	orr.w	r2, r2, #32
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	f002 021f 	and.w	r2, r2, #31
 8004bba:	2101      	movs	r1, #1
 8004bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1ad      	bne.n	8004b22 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8110 	beq.w	8004dfc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d079      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x760>
 8004bec:	2301      	movs	r3, #1
 8004bee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bf6:	fa93 f3a3 	rbit	r3, r3
 8004bfa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c02:	fab3 f383 	clz	r3, r3
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4bab      	ldr	r3, [pc, #684]	; (8004eb8 <HAL_RCC_OscConfig+0x938>)
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	461a      	mov	r2, r3
 8004c12:	2301      	movs	r3, #1
 8004c14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c16:	f7fd fc6b 	bl	80024f0 <HAL_GetTick>
 8004c1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c20:	f7fd fc66 	bl	80024f0 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d902      	bls.n	8004c36 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	f000 bcdb 	b.w	80055ec <HAL_RCC_OscConfig+0x106c>
 8004c36:	2302      	movs	r3, #2
 8004c38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c40:	fa93 f3a3 	rbit	r3, r3
 8004c44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004c50:	2202      	movs	r2, #2
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	fa93 f2a3 	rbit	r2, r3
 8004c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c74:	2202      	movs	r2, #2
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	fa93 f2a3 	rbit	r2, r3
 8004c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c8e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c90:	4b88      	ldr	r3, [pc, #544]	; (8004eb4 <HAL_RCC_OscConfig+0x934>)
 8004c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	6019      	str	r1, [r3, #0]
 8004ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	fa93 f1a3 	rbit	r1, r3
 8004cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004cb6:	6019      	str	r1, [r3, #0]
  return result;
 8004cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cbc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	fab3 f383 	clz	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0a0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x6a0>
 8004cde:	e08d      	b.n	8004dfc <HAL_RCC_OscConfig+0x87c>
 8004ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ce8:	2201      	movs	r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	fa93 f2a3 	rbit	r2, r3
 8004cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d02:	601a      	str	r2, [r3, #0]
  return result;
 8004d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d0c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d0e:	fab3 f383 	clz	r3, r3
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	4b68      	ldr	r3, [pc, #416]	; (8004eb8 <HAL_RCC_OscConfig+0x938>)
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d22:	f7fd fbe5 	bl	80024f0 <HAL_GetTick>
 8004d26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2a:	e00a      	b.n	8004d42 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d2c:	f7fd fbe0 	bl	80024f0 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d902      	bls.n	8004d42 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	f000 bc55 	b.w	80055ec <HAL_RCC_OscConfig+0x106c>
 8004d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	fa93 f2a3 	rbit	r2, r3
 8004d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d6e:	2202      	movs	r2, #2
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	fa93 f2a3 	rbit	r2, r3
 8004d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d92:	2202      	movs	r2, #2
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	fa93 f2a3 	rbit	r2, r3
 8004da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004dac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dae:	4b41      	ldr	r3, [pc, #260]	; (8004eb4 <HAL_RCC_OscConfig+0x934>)
 8004db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004dba:	2102      	movs	r1, #2
 8004dbc:	6019      	str	r1, [r3, #0]
 8004dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	fa93 f1a3 	rbit	r1, r3
 8004dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004dd4:	6019      	str	r1, [r3, #0]
  return result;
 8004dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dda:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	fab3 f383 	clz	r3, r3
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2101      	movs	r1, #1
 8004df2:	fa01 f303 	lsl.w	r3, r1, r3
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d197      	bne.n	8004d2c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 81a1 	beq.w	8005154 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e12:	2300      	movs	r3, #0
 8004e14:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e18:	4b26      	ldr	r3, [pc, #152]	; (8004eb4 <HAL_RCC_OscConfig+0x934>)
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d116      	bne.n	8004e52 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e24:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <HAL_RCC_OscConfig+0x934>)
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	4a22      	ldr	r2, [pc, #136]	; (8004eb4 <HAL_RCC_OscConfig+0x934>)
 8004e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	61d3      	str	r3, [r2, #28]
 8004e30:	4b20      	ldr	r3, [pc, #128]	; (8004eb4 <HAL_RCC_OscConfig+0x934>)
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e46:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004e4a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <HAL_RCC_OscConfig+0x93c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d11a      	bne.n	8004e94 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e5e:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <HAL_RCC_OscConfig+0x93c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <HAL_RCC_OscConfig+0x93c>)
 8004e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6a:	f7fd fb41 	bl	80024f0 <HAL_GetTick>
 8004e6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e72:	e009      	b.n	8004e88 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e74:	f7fd fb3c 	bl	80024f0 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b64      	cmp	r3, #100	; 0x64
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e3b1      	b.n	80055ec <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e88:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <HAL_RCC_OscConfig+0x93c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0ef      	beq.n	8004e74 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d10d      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x940>
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <HAL_RCC_OscConfig+0x934>)
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	4a02      	ldr	r2, [pc, #8]	; (8004eb4 <HAL_RCC_OscConfig+0x934>)
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	6213      	str	r3, [r2, #32]
 8004eb0:	e03c      	b.n	8004f2c <HAL_RCC_OscConfig+0x9ac>
 8004eb2:	bf00      	nop
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	10908120 	.word	0x10908120
 8004ebc:	40007000 	.word	0x40007000
 8004ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10c      	bne.n	8004eea <HAL_RCC_OscConfig+0x96a>
 8004ed0:	4bc1      	ldr	r3, [pc, #772]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	4ac0      	ldr	r2, [pc, #768]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	6213      	str	r3, [r2, #32]
 8004edc:	4bbe      	ldr	r3, [pc, #760]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	4abd      	ldr	r2, [pc, #756]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004ee2:	f023 0304 	bic.w	r3, r3, #4
 8004ee6:	6213      	str	r3, [r2, #32]
 8004ee8:	e020      	b.n	8004f2c <HAL_RCC_OscConfig+0x9ac>
 8004eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x994>
 8004efa:	4bb7      	ldr	r3, [pc, #732]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	4ab6      	ldr	r2, [pc, #728]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004f00:	f043 0304 	orr.w	r3, r3, #4
 8004f04:	6213      	str	r3, [r2, #32]
 8004f06:	4bb4      	ldr	r3, [pc, #720]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	4ab3      	ldr	r2, [pc, #716]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	6213      	str	r3, [r2, #32]
 8004f12:	e00b      	b.n	8004f2c <HAL_RCC_OscConfig+0x9ac>
 8004f14:	4bb0      	ldr	r3, [pc, #704]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	4aaf      	ldr	r2, [pc, #700]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	6213      	str	r3, [r2, #32]
 8004f20:	4bad      	ldr	r3, [pc, #692]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	4aac      	ldr	r2, [pc, #688]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004f26:	f023 0304 	bic.w	r3, r3, #4
 8004f2a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8081 	beq.w	8005040 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3e:	f7fd fad7 	bl	80024f0 <HAL_GetTick>
 8004f42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f46:	e00b      	b.n	8004f60 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f48:	f7fd fad2 	bl	80024f0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e345      	b.n	80055ec <HAL_RCC_OscConfig+0x106c>
 8004f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004f68:	2202      	movs	r2, #2
 8004f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	fa93 f2a3 	rbit	r2, r3
 8004f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	fa93 f2a3 	rbit	r2, r3
 8004f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004fa6:	601a      	str	r2, [r3, #0]
  return result;
 8004fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004fb0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb2:	fab3 f383 	clz	r3, r3
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	f043 0302 	orr.w	r3, r3, #2
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d102      	bne.n	8004fcc <HAL_RCC_OscConfig+0xa4c>
 8004fc6:	4b84      	ldr	r3, [pc, #528]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	e013      	b.n	8004ff4 <HAL_RCC_OscConfig+0xa74>
 8004fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fdc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	fa93 f2a3 	rbit	r2, r3
 8004fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	4b79      	ldr	r3, [pc, #484]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ff8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004ffc:	2102      	movs	r1, #2
 8004ffe:	6011      	str	r1, [r2, #0]
 8005000:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005004:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	fa92 f1a2 	rbit	r1, r2
 800500e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005012:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005016:	6011      	str	r1, [r2, #0]
  return result;
 8005018:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800501c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	fab2 f282 	clz	r2, r2
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	f002 021f 	and.w	r2, r2, #31
 8005032:	2101      	movs	r1, #1
 8005034:	fa01 f202 	lsl.w	r2, r1, r2
 8005038:	4013      	ands	r3, r2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d084      	beq.n	8004f48 <HAL_RCC_OscConfig+0x9c8>
 800503e:	e07f      	b.n	8005140 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005040:	f7fd fa56 	bl	80024f0 <HAL_GetTick>
 8005044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005048:	e00b      	b.n	8005062 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800504a:	f7fd fa51 	bl	80024f0 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	; 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e2c4      	b.n	80055ec <HAL_RCC_OscConfig+0x106c>
 8005062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005066:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800506a:	2202      	movs	r2, #2
 800506c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005072:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	fa93 f2a3 	rbit	r2, r3
 800507c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005080:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800508e:	2202      	movs	r2, #2
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005096:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	fa93 f2a3 	rbit	r2, r3
 80050a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80050a8:	601a      	str	r2, [r3, #0]
  return result;
 80050aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ae:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80050b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b4:	fab3 f383 	clz	r3, r3
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	f043 0302 	orr.w	r3, r3, #2
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d102      	bne.n	80050ce <HAL_RCC_OscConfig+0xb4e>
 80050c8:	4b43      	ldr	r3, [pc, #268]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	e013      	b.n	80050f6 <HAL_RCC_OscConfig+0xb76>
 80050ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80050d6:	2202      	movs	r2, #2
 80050d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	fa93 f2a3 	rbit	r2, r3
 80050e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	4b39      	ldr	r3, [pc, #228]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050fa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80050fe:	2102      	movs	r1, #2
 8005100:	6011      	str	r1, [r2, #0]
 8005102:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005106:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	fa92 f1a2 	rbit	r1, r2
 8005110:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005114:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005118:	6011      	str	r1, [r2, #0]
  return result;
 800511a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800511e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	fab2 f282 	clz	r2, r2
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	f002 021f 	and.w	r2, r2, #31
 8005134:	2101      	movs	r1, #1
 8005136:	fa01 f202 	lsl.w	r2, r1, r2
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d184      	bne.n	800504a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005140:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005144:	2b01      	cmp	r3, #1
 8005146:	d105      	bne.n	8005154 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005148:	4b23      	ldr	r3, [pc, #140]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	4a22      	ldr	r2, [pc, #136]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 800514e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005152:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8242 	beq.w	80055ea <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005166:	4b1c      	ldr	r3, [pc, #112]	; (80051d8 <HAL_RCC_OscConfig+0xc58>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	2b08      	cmp	r3, #8
 8005170:	f000 8213 	beq.w	800559a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005178:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	2b02      	cmp	r3, #2
 8005182:	f040 8162 	bne.w	800544a <HAL_RCC_OscConfig+0xeca>
 8005186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800518e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005198:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	fa93 f2a3 	rbit	r2, r3
 80051a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80051aa:	601a      	str	r2, [r3, #0]
  return result;
 80051ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80051b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b6:	fab3 f383 	clz	r3, r3
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	461a      	mov	r2, r3
 80051c8:	2300      	movs	r3, #0
 80051ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051cc:	f7fd f990 	bl	80024f0 <HAL_GetTick>
 80051d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d4:	e00c      	b.n	80051f0 <HAL_RCC_OscConfig+0xc70>
 80051d6:	bf00      	nop
 80051d8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fd f988 	bl	80024f0 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e1fd      	b.n	80055ec <HAL_RCC_OscConfig+0x106c>
 80051f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80051f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005202:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	fa93 f2a3 	rbit	r2, r3
 800520c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005210:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005214:	601a      	str	r2, [r3, #0]
  return result;
 8005216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800521e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005220:	fab3 f383 	clz	r3, r3
 8005224:	b2db      	uxtb	r3, r3
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	b2db      	uxtb	r3, r3
 800522a:	f043 0301 	orr.w	r3, r3, #1
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d102      	bne.n	800523a <HAL_RCC_OscConfig+0xcba>
 8005234:	4bb0      	ldr	r3, [pc, #704]	; (80054f8 <HAL_RCC_OscConfig+0xf78>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	e027      	b.n	800528a <HAL_RCC_OscConfig+0xd0a>
 800523a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800523e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005242:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	fa93 f2a3 	rbit	r2, r3
 8005256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800525a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005264:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005268:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005272:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	fa93 f2a3 	rbit	r2, r3
 800527c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005280:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	4b9c      	ldr	r3, [pc, #624]	; (80054f8 <HAL_RCC_OscConfig+0xf78>)
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800528e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005292:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005296:	6011      	str	r1, [r2, #0]
 8005298:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800529c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	fa92 f1a2 	rbit	r1, r2
 80052a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052aa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80052ae:	6011      	str	r1, [r2, #0]
  return result;
 80052b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052b4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80052b8:	6812      	ldr	r2, [r2, #0]
 80052ba:	fab2 f282 	clz	r2, r2
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	f042 0220 	orr.w	r2, r2, #32
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	f002 021f 	and.w	r2, r2, #31
 80052ca:	2101      	movs	r1, #1
 80052cc:	fa01 f202 	lsl.w	r2, r1, r2
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d182      	bne.n	80051dc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052d6:	4b88      	ldr	r3, [pc, #544]	; (80054f8 <HAL_RCC_OscConfig+0xf78>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80052de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80052ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	430b      	orrs	r3, r1
 80052f8:	497f      	ldr	r1, [pc, #508]	; (80054f8 <HAL_RCC_OscConfig+0xf78>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	604b      	str	r3, [r1, #4]
 80052fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005302:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005306:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800530a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005310:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	fa93 f2a3 	rbit	r2, r3
 800531a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005322:	601a      	str	r2, [r3, #0]
  return result;
 8005324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005328:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800532c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800532e:	fab3 f383 	clz	r3, r3
 8005332:	b2db      	uxtb	r3, r3
 8005334:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005338:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	461a      	mov	r2, r3
 8005340:	2301      	movs	r3, #1
 8005342:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7fd f8d4 	bl	80024f0 <HAL_GetTick>
 8005348:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800534c:	e009      	b.n	8005362 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800534e:	f7fd f8cf 	bl	80024f0 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e144      	b.n	80055ec <HAL_RCC_OscConfig+0x106c>
 8005362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005366:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800536a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800536e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005374:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	fa93 f2a3 	rbit	r2, r3
 800537e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005382:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005386:	601a      	str	r2, [r3, #0]
  return result;
 8005388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800538c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005390:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005392:	fab3 f383 	clz	r3, r3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	b2db      	uxtb	r3, r3
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d102      	bne.n	80053ac <HAL_RCC_OscConfig+0xe2c>
 80053a6:	4b54      	ldr	r3, [pc, #336]	; (80054f8 <HAL_RCC_OscConfig+0xf78>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	e027      	b.n	80053fc <HAL_RCC_OscConfig+0xe7c>
 80053ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80053b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053be:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	fa93 f2a3 	rbit	r2, r3
 80053c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053cc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80053da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	fa93 f2a3 	rbit	r2, r3
 80053ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	4b3f      	ldr	r3, [pc, #252]	; (80054f8 <HAL_RCC_OscConfig+0xf78>)
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005400:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005404:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005408:	6011      	str	r1, [r2, #0]
 800540a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800540e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	fa92 f1a2 	rbit	r1, r2
 8005418:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800541c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005420:	6011      	str	r1, [r2, #0]
  return result;
 8005422:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005426:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800542a:	6812      	ldr	r2, [r2, #0]
 800542c:	fab2 f282 	clz	r2, r2
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	f042 0220 	orr.w	r2, r2, #32
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	f002 021f 	and.w	r2, r2, #31
 800543c:	2101      	movs	r1, #1
 800543e:	fa01 f202 	lsl.w	r2, r1, r2
 8005442:	4013      	ands	r3, r2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d082      	beq.n	800534e <HAL_RCC_OscConfig+0xdce>
 8005448:	e0cf      	b.n	80055ea <HAL_RCC_OscConfig+0x106a>
 800544a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005452:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	fa93 f2a3 	rbit	r2, r3
 8005466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800546a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800546e:	601a      	str	r2, [r3, #0]
  return result;
 8005470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005474:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005478:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547a:	fab3 f383 	clz	r3, r3
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005484:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	461a      	mov	r2, r3
 800548c:	2300      	movs	r3, #0
 800548e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005490:	f7fd f82e 	bl	80024f0 <HAL_GetTick>
 8005494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005498:	e009      	b.n	80054ae <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800549a:	f7fd f829 	bl	80024f0 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e09e      	b.n	80055ec <HAL_RCC_OscConfig+0x106c>
 80054ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80054b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	fa93 f2a3 	rbit	r2, r3
 80054ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80054d2:	601a      	str	r2, [r3, #0]
  return result;
 80054d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80054dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054de:	fab3 f383 	clz	r3, r3
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d104      	bne.n	80054fc <HAL_RCC_OscConfig+0xf7c>
 80054f2:	4b01      	ldr	r3, [pc, #4]	; (80054f8 <HAL_RCC_OscConfig+0xf78>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	e029      	b.n	800554c <HAL_RCC_OscConfig+0xfcc>
 80054f8:	40021000 	.word	0x40021000
 80054fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005500:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800550e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	fa93 f2a3 	rbit	r2, r3
 8005518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005526:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800552a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005534:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	fa93 f2a3 	rbit	r2, r3
 800553e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005542:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	4b2b      	ldr	r3, [pc, #172]	; (80055f8 <HAL_RCC_OscConfig+0x1078>)
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005550:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005554:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005558:	6011      	str	r1, [r2, #0]
 800555a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800555e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	fa92 f1a2 	rbit	r1, r2
 8005568:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800556c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005570:	6011      	str	r1, [r2, #0]
  return result;
 8005572:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005576:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	fab2 f282 	clz	r2, r2
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	f042 0220 	orr.w	r2, r2, #32
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	f002 021f 	and.w	r2, r2, #31
 800558c:	2101      	movs	r1, #1
 800558e:	fa01 f202 	lsl.w	r2, r1, r2
 8005592:	4013      	ands	r3, r2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d180      	bne.n	800549a <HAL_RCC_OscConfig+0xf1a>
 8005598:	e027      	b.n	80055ea <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800559a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800559e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e01e      	b.n	80055ec <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055ae:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <HAL_RCC_OscConfig+0x1078>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80055ba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d10b      	bne.n	80055e6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80055ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80055d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d001      	beq.n	80055ea <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000

080055fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b09e      	sub	sp, #120	; 0x78
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e162      	b.n	80058da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005614:	4b90      	ldr	r3, [pc, #576]	; (8005858 <HAL_RCC_ClockConfig+0x25c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d910      	bls.n	8005644 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005622:	4b8d      	ldr	r3, [pc, #564]	; (8005858 <HAL_RCC_ClockConfig+0x25c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 0207 	bic.w	r2, r3, #7
 800562a:	498b      	ldr	r1, [pc, #556]	; (8005858 <HAL_RCC_ClockConfig+0x25c>)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	4313      	orrs	r3, r2
 8005630:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005632:	4b89      	ldr	r3, [pc, #548]	; (8005858 <HAL_RCC_ClockConfig+0x25c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d001      	beq.n	8005644 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e14a      	b.n	80058da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005650:	4b82      	ldr	r3, [pc, #520]	; (800585c <HAL_RCC_ClockConfig+0x260>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	497f      	ldr	r1, [pc, #508]	; (800585c <HAL_RCC_ClockConfig+0x260>)
 800565e:	4313      	orrs	r3, r2
 8005660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 80dc 	beq.w	8005828 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d13c      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xf6>
 8005678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800567c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005680:	fa93 f3a3 	rbit	r3, r3
 8005684:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005688:	fab3 f383 	clz	r3, r3
 800568c:	b2db      	uxtb	r3, r3
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	b2db      	uxtb	r3, r3
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d102      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xa6>
 800569c:	4b6f      	ldr	r3, [pc, #444]	; (800585c <HAL_RCC_ClockConfig+0x260>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	e00f      	b.n	80056c2 <HAL_RCC_ClockConfig+0xc6>
 80056a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056aa:	fa93 f3a3 	rbit	r3, r3
 80056ae:	667b      	str	r3, [r7, #100]	; 0x64
 80056b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056b4:	663b      	str	r3, [r7, #96]	; 0x60
 80056b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b8:	fa93 f3a3 	rbit	r3, r3
 80056bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056be:	4b67      	ldr	r3, [pc, #412]	; (800585c <HAL_RCC_ClockConfig+0x260>)
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80056c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056ca:	fa92 f2a2 	rbit	r2, r2
 80056ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80056d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056d2:	fab2 f282 	clz	r2, r2
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	f042 0220 	orr.w	r2, r2, #32
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	f002 021f 	and.w	r2, r2, #31
 80056e2:	2101      	movs	r1, #1
 80056e4:	fa01 f202 	lsl.w	r2, r1, r2
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d17b      	bne.n	80057e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e0f3      	b.n	80058da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d13c      	bne.n	8005774 <HAL_RCC_ClockConfig+0x178>
 80056fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005702:	fa93 f3a3 	rbit	r3, r3
 8005706:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570a:	fab3 f383 	clz	r3, r3
 800570e:	b2db      	uxtb	r3, r3
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	b2db      	uxtb	r3, r3
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b01      	cmp	r3, #1
 800571c:	d102      	bne.n	8005724 <HAL_RCC_ClockConfig+0x128>
 800571e:	4b4f      	ldr	r3, [pc, #316]	; (800585c <HAL_RCC_ClockConfig+0x260>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	e00f      	b.n	8005744 <HAL_RCC_ClockConfig+0x148>
 8005724:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005728:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800572c:	fa93 f3a3 	rbit	r3, r3
 8005730:	647b      	str	r3, [r7, #68]	; 0x44
 8005732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005736:	643b      	str	r3, [r7, #64]	; 0x40
 8005738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800573a:	fa93 f3a3 	rbit	r3, r3
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005740:	4b46      	ldr	r3, [pc, #280]	; (800585c <HAL_RCC_ClockConfig+0x260>)
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005748:	63ba      	str	r2, [r7, #56]	; 0x38
 800574a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800574c:	fa92 f2a2 	rbit	r2, r2
 8005750:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005754:	fab2 f282 	clz	r2, r2
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	f042 0220 	orr.w	r2, r2, #32
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	f002 021f 	and.w	r2, r2, #31
 8005764:	2101      	movs	r1, #1
 8005766:	fa01 f202 	lsl.w	r2, r1, r2
 800576a:	4013      	ands	r3, r2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d13a      	bne.n	80057e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0b2      	b.n	80058da <HAL_RCC_ClockConfig+0x2de>
 8005774:	2302      	movs	r3, #2
 8005776:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	fa93 f3a3 	rbit	r3, r3
 800577e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005782:	fab3 f383 	clz	r3, r3
 8005786:	b2db      	uxtb	r3, r3
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	b2db      	uxtb	r3, r3
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b01      	cmp	r3, #1
 8005794:	d102      	bne.n	800579c <HAL_RCC_ClockConfig+0x1a0>
 8005796:	4b31      	ldr	r3, [pc, #196]	; (800585c <HAL_RCC_ClockConfig+0x260>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	e00d      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1bc>
 800579c:	2302      	movs	r3, #2
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	fa93 f3a3 	rbit	r3, r3
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
 80057a8:	2302      	movs	r3, #2
 80057aa:	623b      	str	r3, [r7, #32]
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	fa93 f3a3 	rbit	r3, r3
 80057b2:	61fb      	str	r3, [r7, #28]
 80057b4:	4b29      	ldr	r3, [pc, #164]	; (800585c <HAL_RCC_ClockConfig+0x260>)
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	2202      	movs	r2, #2
 80057ba:	61ba      	str	r2, [r7, #24]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	fa92 f2a2 	rbit	r2, r2
 80057c2:	617a      	str	r2, [r7, #20]
  return result;
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	fab2 f282 	clz	r2, r2
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	f042 0220 	orr.w	r2, r2, #32
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	f002 021f 	and.w	r2, r2, #31
 80057d6:	2101      	movs	r1, #1
 80057d8:	fa01 f202 	lsl.w	r2, r1, r2
 80057dc:	4013      	ands	r3, r2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e079      	b.n	80058da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e6:	4b1d      	ldr	r3, [pc, #116]	; (800585c <HAL_RCC_ClockConfig+0x260>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f023 0203 	bic.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	491a      	ldr	r1, [pc, #104]	; (800585c <HAL_RCC_ClockConfig+0x260>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f8:	f7fc fe7a 	bl	80024f0 <HAL_GetTick>
 80057fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fe:	e00a      	b.n	8005816 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005800:	f7fc fe76 	bl	80024f0 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	; 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e061      	b.n	80058da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005816:	4b11      	ldr	r3, [pc, #68]	; (800585c <HAL_RCC_ClockConfig+0x260>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f003 020c 	and.w	r2, r3, #12
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	429a      	cmp	r2, r3
 8005826:	d1eb      	bne.n	8005800 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005828:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <HAL_RCC_ClockConfig+0x25c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d214      	bcs.n	8005860 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005836:	4b08      	ldr	r3, [pc, #32]	; (8005858 <HAL_RCC_ClockConfig+0x25c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f023 0207 	bic.w	r2, r3, #7
 800583e:	4906      	ldr	r1, [pc, #24]	; (8005858 <HAL_RCC_ClockConfig+0x25c>)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	4313      	orrs	r3, r2
 8005844:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005846:	4b04      	ldr	r3, [pc, #16]	; (8005858 <HAL_RCC_ClockConfig+0x25c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d005      	beq.n	8005860 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e040      	b.n	80058da <HAL_RCC_ClockConfig+0x2de>
 8005858:	40022000 	.word	0x40022000
 800585c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800586c:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <HAL_RCC_ClockConfig+0x2e8>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	491a      	ldr	r1, [pc, #104]	; (80058e4 <HAL_RCC_ClockConfig+0x2e8>)
 800587a:	4313      	orrs	r3, r2
 800587c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800588a:	4b16      	ldr	r3, [pc, #88]	; (80058e4 <HAL_RCC_ClockConfig+0x2e8>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	4912      	ldr	r1, [pc, #72]	; (80058e4 <HAL_RCC_ClockConfig+0x2e8>)
 800589a:	4313      	orrs	r3, r2
 800589c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800589e:	f000 f829 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 80058a2:	4601      	mov	r1, r0
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <HAL_RCC_ClockConfig+0x2e8>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058ac:	22f0      	movs	r2, #240	; 0xf0
 80058ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	fa92 f2a2 	rbit	r2, r2
 80058b6:	60fa      	str	r2, [r7, #12]
  return result;
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	fab2 f282 	clz	r2, r2
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	40d3      	lsrs	r3, r2
 80058c2:	4a09      	ldr	r2, [pc, #36]	; (80058e8 <HAL_RCC_ClockConfig+0x2ec>)
 80058c4:	5cd3      	ldrb	r3, [r2, r3]
 80058c6:	fa21 f303 	lsr.w	r3, r1, r3
 80058ca:	4a08      	ldr	r2, [pc, #32]	; (80058ec <HAL_RCC_ClockConfig+0x2f0>)
 80058cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80058ce:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <HAL_RCC_ClockConfig+0x2f4>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fc fdc8 	bl	8002468 <HAL_InitTick>
  
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3778      	adds	r7, #120	; 0x78
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40021000 	.word	0x40021000
 80058e8:	0800dde4 	.word	0x0800dde4
 80058ec:	200000f0 	.word	0x200000f0
 80058f0:	200000f4 	.word	0x200000f4

080058f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b08b      	sub	sp, #44	; 0x2c
 80058f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	2300      	movs	r3, #0
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	2300      	movs	r3, #0
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800590e:	4b29      	ldr	r3, [pc, #164]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f003 030c 	and.w	r3, r3, #12
 800591a:	2b04      	cmp	r3, #4
 800591c:	d002      	beq.n	8005924 <HAL_RCC_GetSysClockFreq+0x30>
 800591e:	2b08      	cmp	r3, #8
 8005920:	d003      	beq.n	800592a <HAL_RCC_GetSysClockFreq+0x36>
 8005922:	e03c      	b.n	800599e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005924:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005926:	623b      	str	r3, [r7, #32]
      break;
 8005928:	e03c      	b.n	80059a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005930:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005934:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	fa92 f2a2 	rbit	r2, r2
 800593c:	607a      	str	r2, [r7, #4]
  return result;
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	fab2 f282 	clz	r2, r2
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	40d3      	lsrs	r3, r2
 8005948:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800594a:	5cd3      	ldrb	r3, [r2, r3]
 800594c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800594e:	4b19      	ldr	r3, [pc, #100]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	220f      	movs	r2, #15
 8005958:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	fa92 f2a2 	rbit	r2, r2
 8005960:	60fa      	str	r2, [r7, #12]
  return result;
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	fab2 f282 	clz	r2, r2
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	40d3      	lsrs	r3, r2
 800596c:	4a14      	ldr	r2, [pc, #80]	; (80059c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800596e:	5cd3      	ldrb	r3, [r2, r3]
 8005970:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800597c:	4a0e      	ldr	r2, [pc, #56]	; (80059b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	fbb2 f2f3 	udiv	r2, r2, r3
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
 800598c:	e004      	b.n	8005998 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	623b      	str	r3, [r7, #32]
      break;
 800599c:	e002      	b.n	80059a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800599e:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80059a0:	623b      	str	r3, [r7, #32]
      break;
 80059a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059a4:	6a3b      	ldr	r3, [r7, #32]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	372c      	adds	r7, #44	; 0x2c
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40021000 	.word	0x40021000
 80059b8:	007a1200 	.word	0x007a1200
 80059bc:	0800ddfc 	.word	0x0800ddfc
 80059c0:	0800de0c 	.word	0x0800de0c
 80059c4:	003d0900 	.word	0x003d0900

080059c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059cc:	4b03      	ldr	r3, [pc, #12]	; (80059dc <HAL_RCC_GetHCLKFreq+0x14>)
 80059ce:	681b      	ldr	r3, [r3, #0]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	200000f0 	.word	0x200000f0

080059e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80059e6:	f7ff ffef 	bl	80059c8 <HAL_RCC_GetHCLKFreq>
 80059ea:	4601      	mov	r1, r0
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80059f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	fa92 f2a2 	rbit	r2, r2
 8005a00:	603a      	str	r2, [r7, #0]
  return result;
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	fab2 f282 	clz	r2, r2
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	40d3      	lsrs	r3, r2
 8005a0c:	4a04      	ldr	r2, [pc, #16]	; (8005a20 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005a0e:	5cd3      	ldrb	r3, [r2, r3]
 8005a10:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	0800ddf4 	.word	0x0800ddf4

08005a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005a2a:	f7ff ffcd 	bl	80059c8 <HAL_RCC_GetHCLKFreq>
 8005a2e:	4601      	mov	r1, r0
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005a38:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005a3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	fa92 f2a2 	rbit	r2, r2
 8005a44:	603a      	str	r2, [r7, #0]
  return result;
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	fab2 f282 	clz	r2, r2
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	40d3      	lsrs	r3, r2
 8005a50:	4a04      	ldr	r2, [pc, #16]	; (8005a64 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005a52:	5cd3      	ldrb	r3, [r2, r3]
 8005a54:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40021000 	.word	0x40021000
 8005a64:	0800ddf4 	.word	0x0800ddf4

08005a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b092      	sub	sp, #72	; 0x48
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 80d4 	beq.w	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a8c:	4b4e      	ldr	r3, [pc, #312]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10e      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a98:	4b4b      	ldr	r3, [pc, #300]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	4a4a      	ldr	r2, [pc, #296]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	61d3      	str	r3, [r2, #28]
 8005aa4:	4b48      	ldr	r3, [pc, #288]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab6:	4b45      	ldr	r3, [pc, #276]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d118      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ac2:	4b42      	ldr	r3, [pc, #264]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a41      	ldr	r2, [pc, #260]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005acc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ace:	f7fc fd0f 	bl	80024f0 <HAL_GetTick>
 8005ad2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad6:	f7fc fd0b 	bl	80024f0 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b64      	cmp	r3, #100	; 0x64
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e169      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae8:	4b38      	ldr	r3, [pc, #224]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005af4:	4b34      	ldr	r3, [pc, #208]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8084 	beq.w	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d07c      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b14:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	fa93 f3a3 	rbit	r3, r3
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b2e:	fab3 f383 	clz	r3, r3
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	4b26      	ldr	r3, [pc, #152]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2301      	movs	r3, #1
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	fa93 f3a3 	rbit	r3, r3
 8005b4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b52:	fab3 f383 	clz	r3, r3
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	461a      	mov	r2, r3
 8005b62:	2300      	movs	r3, #0
 8005b64:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b66:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d04b      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b76:	f7fc fcbb 	bl	80024f0 <HAL_GetTick>
 8005b7a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7c:	e00a      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7e:	f7fc fcb7 	bl	80024f0 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e113      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005b94:	2302      	movs	r3, #2
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	fa93 f3a3 	rbit	r3, r3
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	623b      	str	r3, [r7, #32]
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	fa93 f3a3 	rbit	r3, r3
 8005baa:	61fb      	str	r3, [r7, #28]
  return result;
 8005bac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bae:	fab3 f383 	clz	r3, r3
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	095b      	lsrs	r3, r3, #5
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f043 0302 	orr.w	r3, r3, #2
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d108      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005bc2:	4b01      	ldr	r3, [pc, #4]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	e00d      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	40007000 	.word	0x40007000
 8005bd0:	10908100 	.word	0x10908100
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	fa93 f3a3 	rbit	r3, r3
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	4b78      	ldr	r3, [pc, #480]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	2202      	movs	r2, #2
 8005be6:	613a      	str	r2, [r7, #16]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	fa92 f2a2 	rbit	r2, r2
 8005bee:	60fa      	str	r2, [r7, #12]
  return result;
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	fab2 f282 	clz	r2, r2
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	f002 021f 	and.w	r2, r2, #31
 8005c02:	2101      	movs	r1, #1
 8005c04:	fa01 f202 	lsl.w	r2, r1, r2
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0b7      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005c0e:	4b6d      	ldr	r3, [pc, #436]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	496a      	ldr	r1, [pc, #424]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d105      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c28:	4b66      	ldr	r3, [pc, #408]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	4a65      	ldr	r2, [pc, #404]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c40:	4b60      	ldr	r3, [pc, #384]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	f023 0203 	bic.w	r2, r3, #3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	495d      	ldr	r1, [pc, #372]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d008      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c5e:	4b59      	ldr	r3, [pc, #356]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	4956      	ldr	r1, [pc, #344]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c7c:	4b51      	ldr	r3, [pc, #324]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	494e      	ldr	r1, [pc, #312]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c9a:	4b4a      	ldr	r3, [pc, #296]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	f023 0210 	bic.w	r2, r3, #16
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	4947      	ldr	r1, [pc, #284]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d008      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005cb8:	4b42      	ldr	r3, [pc, #264]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	493f      	ldr	r1, [pc, #252]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cd6:	4b3b      	ldr	r3, [pc, #236]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	f023 0220 	bic.w	r2, r3, #32
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	4938      	ldr	r1, [pc, #224]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cf4:	4b33      	ldr	r3, [pc, #204]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	4930      	ldr	r1, [pc, #192]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d12:	4b2c      	ldr	r3, [pc, #176]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	4929      	ldr	r1, [pc, #164]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d30:	4b24      	ldr	r3, [pc, #144]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	4921      	ldr	r1, [pc, #132]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d008      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d4e:	4b1d      	ldr	r3, [pc, #116]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	491a      	ldr	r1, [pc, #104]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005d6c:	4b15      	ldr	r3, [pc, #84]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	4912      	ldr	r1, [pc, #72]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d008      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005d8a:	4b0e      	ldr	r3, [pc, #56]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d96:	490b      	ldr	r1, [pc, #44]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005da8:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	4903      	ldr	r1, [pc, #12]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3748      	adds	r7, #72	; 0x48
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40021000 	.word	0x40021000

08005dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e09d      	b.n	8005f16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d108      	bne.n	8005df4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dea:	d009      	beq.n	8005e00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	61da      	str	r2, [r3, #28]
 8005df2:	e005      	b.n	8005e00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d106      	bne.n	8005e20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fc f85a 	bl	8001ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e40:	d902      	bls.n	8005e48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	e002      	b.n	8005e4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e56:	d007      	beq.n	8005e68 <HAL_SPI_Init+0xa0>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e60:	d002      	beq.n	8005e68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	ea42 0103 	orr.w	r1, r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	f003 0204 	and.w	r2, r3, #4
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005ee4:	ea42 0103 	orr.w	r1, r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69da      	ldr	r2, [r3, #28]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e049      	b.n	8005fc4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d106      	bne.n	8005f4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7fc f807 	bl	8001f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f000 fd27 	bl	80069b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d001      	beq.n	8005fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e04a      	b.n	800607a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0201 	orr.w	r2, r2, #1
 8005ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a21      	ldr	r2, [pc, #132]	; (8006088 <HAL_TIM_Base_Start_IT+0xbc>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d018      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x6c>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600e:	d013      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x6c>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a1d      	ldr	r2, [pc, #116]	; (800608c <HAL_TIM_Base_Start_IT+0xc0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00e      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x6c>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a1c      	ldr	r2, [pc, #112]	; (8006090 <HAL_TIM_Base_Start_IT+0xc4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d009      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x6c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a1a      	ldr	r2, [pc, #104]	; (8006094 <HAL_TIM_Base_Start_IT+0xc8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x6c>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a19      	ldr	r2, [pc, #100]	; (8006098 <HAL_TIM_Base_Start_IT+0xcc>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d115      	bne.n	8006064 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	4b17      	ldr	r3, [pc, #92]	; (800609c <HAL_TIM_Base_Start_IT+0xd0>)
 8006040:	4013      	ands	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b06      	cmp	r3, #6
 8006048:	d015      	beq.n	8006076 <HAL_TIM_Base_Start_IT+0xaa>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006050:	d011      	beq.n	8006076 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0201 	orr.w	r2, r2, #1
 8006060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006062:	e008      	b.n	8006076 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	e000      	b.n	8006078 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006076:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40012c00 	.word	0x40012c00
 800608c:	40000400 	.word	0x40000400
 8006090:	40000800 	.word	0x40000800
 8006094:	40013400 	.word	0x40013400
 8006098:	40014000 	.word	0x40014000
 800609c:	00010007 	.word	0x00010007

080060a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e049      	b.n	8006146 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f841 	bl	800614e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3304      	adds	r3, #4
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f000 fc66 	bl	80069b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d109      	bne.n	8006188 <HAL_TIM_PWM_Start+0x24>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b01      	cmp	r3, #1
 800617e:	bf14      	ite	ne
 8006180:	2301      	movne	r3, #1
 8006182:	2300      	moveq	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	e03c      	b.n	8006202 <HAL_TIM_PWM_Start+0x9e>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b04      	cmp	r3, #4
 800618c:	d109      	bne.n	80061a2 <HAL_TIM_PWM_Start+0x3e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b01      	cmp	r3, #1
 8006198:	bf14      	ite	ne
 800619a:	2301      	movne	r3, #1
 800619c:	2300      	moveq	r3, #0
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	e02f      	b.n	8006202 <HAL_TIM_PWM_Start+0x9e>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d109      	bne.n	80061bc <HAL_TIM_PWM_Start+0x58>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	bf14      	ite	ne
 80061b4:	2301      	movne	r3, #1
 80061b6:	2300      	moveq	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	e022      	b.n	8006202 <HAL_TIM_PWM_Start+0x9e>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b0c      	cmp	r3, #12
 80061c0:	d109      	bne.n	80061d6 <HAL_TIM_PWM_Start+0x72>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	bf14      	ite	ne
 80061ce:	2301      	movne	r3, #1
 80061d0:	2300      	moveq	r3, #0
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	e015      	b.n	8006202 <HAL_TIM_PWM_Start+0x9e>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b10      	cmp	r3, #16
 80061da:	d109      	bne.n	80061f0 <HAL_TIM_PWM_Start+0x8c>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	bf14      	ite	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	2300      	moveq	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	e008      	b.n	8006202 <HAL_TIM_PWM_Start+0x9e>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e097      	b.n	800633a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <HAL_TIM_PWM_Start+0xb6>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006218:	e023      	b.n	8006262 <HAL_TIM_PWM_Start+0xfe>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b04      	cmp	r3, #4
 800621e:	d104      	bne.n	800622a <HAL_TIM_PWM_Start+0xc6>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006228:	e01b      	b.n	8006262 <HAL_TIM_PWM_Start+0xfe>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b08      	cmp	r3, #8
 800622e:	d104      	bne.n	800623a <HAL_TIM_PWM_Start+0xd6>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006238:	e013      	b.n	8006262 <HAL_TIM_PWM_Start+0xfe>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b0c      	cmp	r3, #12
 800623e:	d104      	bne.n	800624a <HAL_TIM_PWM_Start+0xe6>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006248:	e00b      	b.n	8006262 <HAL_TIM_PWM_Start+0xfe>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b10      	cmp	r3, #16
 800624e:	d104      	bne.n	800625a <HAL_TIM_PWM_Start+0xf6>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006258:	e003      	b.n	8006262 <HAL_TIM_PWM_Start+0xfe>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2201      	movs	r2, #1
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 ffa0 	bl	80071b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a33      	ldr	r2, [pc, #204]	; (8006344 <HAL_TIM_PWM_Start+0x1e0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x13e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a32      	ldr	r2, [pc, #200]	; (8006348 <HAL_TIM_PWM_Start+0x1e4>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00e      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x13e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a30      	ldr	r2, [pc, #192]	; (800634c <HAL_TIM_PWM_Start+0x1e8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x13e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2f      	ldr	r2, [pc, #188]	; (8006350 <HAL_TIM_PWM_Start+0x1ec>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x13e>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a2d      	ldr	r2, [pc, #180]	; (8006354 <HAL_TIM_PWM_Start+0x1f0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d101      	bne.n	80062a6 <HAL_TIM_PWM_Start+0x142>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <HAL_TIM_PWM_Start+0x144>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a20      	ldr	r2, [pc, #128]	; (8006344 <HAL_TIM_PWM_Start+0x1e0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d018      	beq.n	80062f8 <HAL_TIM_PWM_Start+0x194>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ce:	d013      	beq.n	80062f8 <HAL_TIM_PWM_Start+0x194>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a20      	ldr	r2, [pc, #128]	; (8006358 <HAL_TIM_PWM_Start+0x1f4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00e      	beq.n	80062f8 <HAL_TIM_PWM_Start+0x194>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a1f      	ldr	r2, [pc, #124]	; (800635c <HAL_TIM_PWM_Start+0x1f8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d009      	beq.n	80062f8 <HAL_TIM_PWM_Start+0x194>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a17      	ldr	r2, [pc, #92]	; (8006348 <HAL_TIM_PWM_Start+0x1e4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d004      	beq.n	80062f8 <HAL_TIM_PWM_Start+0x194>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a16      	ldr	r2, [pc, #88]	; (800634c <HAL_TIM_PWM_Start+0x1e8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d115      	bne.n	8006324 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	4b18      	ldr	r3, [pc, #96]	; (8006360 <HAL_TIM_PWM_Start+0x1fc>)
 8006300:	4013      	ands	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b06      	cmp	r3, #6
 8006308:	d015      	beq.n	8006336 <HAL_TIM_PWM_Start+0x1d2>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006310:	d011      	beq.n	8006336 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f042 0201 	orr.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006322:	e008      	b.n	8006336 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	e000      	b.n	8006338 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006336:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40013400 	.word	0x40013400
 800634c:	40014000 	.word	0x40014000
 8006350:	40014400 	.word	0x40014400
 8006354:	40014800 	.word	0x40014800
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800
 8006360:	00010007 	.word	0x00010007

08006364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b02      	cmp	r3, #2
 8006378:	d122      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b02      	cmp	r3, #2
 8006386:	d11b      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0202 	mvn.w	r2, #2
 8006390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fae3 	bl	8006972 <HAL_TIM_IC_CaptureCallback>
 80063ac:	e005      	b.n	80063ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fad5 	bl	800695e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fae6 	bl	8006986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d122      	bne.n	8006414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d11b      	bne.n	8006414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0204 	mvn.w	r2, #4
 80063e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2202      	movs	r2, #2
 80063ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fab9 	bl	8006972 <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 faab 	bl	800695e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fabc 	bl	8006986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b08      	cmp	r3, #8
 8006420:	d122      	bne.n	8006468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	2b08      	cmp	r3, #8
 800642e:	d11b      	bne.n	8006468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0208 	mvn.w	r2, #8
 8006438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2204      	movs	r2, #4
 800643e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa8f 	bl	8006972 <HAL_TIM_IC_CaptureCallback>
 8006454:	e005      	b.n	8006462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa81 	bl	800695e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fa92 	bl	8006986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b10      	cmp	r3, #16
 8006474:	d122      	bne.n	80064bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b10      	cmp	r3, #16
 8006482:	d11b      	bne.n	80064bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0210 	mvn.w	r2, #16
 800648c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2208      	movs	r2, #8
 8006492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa65 	bl	8006972 <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fa57 	bl	800695e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fa68 	bl	8006986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10e      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d107      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0201 	mvn.w	r2, #1
 80064e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fb fbf0 	bl	8001cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f2:	2b80      	cmp	r3, #128	; 0x80
 80064f4:	d10e      	bne.n	8006514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d107      	bne.n	8006514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800650c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fefe 	bl	8007310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006522:	d10e      	bne.n	8006542 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652e:	2b80      	cmp	r3, #128	; 0x80
 8006530:	d107      	bne.n	8006542 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800653a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fef1 	bl	8007324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d10e      	bne.n	800656e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d107      	bne.n	800656e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fa16 	bl	800699a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b20      	cmp	r3, #32
 800657a:	d10e      	bne.n	800659a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b20      	cmp	r3, #32
 8006588:	d107      	bne.n	800659a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f06f 0220 	mvn.w	r2, #32
 8006592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 feb1 	bl	80072fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800659a:	bf00      	nop
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065be:	2302      	movs	r3, #2
 80065c0:	e0ff      	b.n	80067c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b14      	cmp	r3, #20
 80065ce:	f200 80f0 	bhi.w	80067b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065d2:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d8:	0800662d 	.word	0x0800662d
 80065dc:	080067b3 	.word	0x080067b3
 80065e0:	080067b3 	.word	0x080067b3
 80065e4:	080067b3 	.word	0x080067b3
 80065e8:	0800666d 	.word	0x0800666d
 80065ec:	080067b3 	.word	0x080067b3
 80065f0:	080067b3 	.word	0x080067b3
 80065f4:	080067b3 	.word	0x080067b3
 80065f8:	080066af 	.word	0x080066af
 80065fc:	080067b3 	.word	0x080067b3
 8006600:	080067b3 	.word	0x080067b3
 8006604:	080067b3 	.word	0x080067b3
 8006608:	080066ef 	.word	0x080066ef
 800660c:	080067b3 	.word	0x080067b3
 8006610:	080067b3 	.word	0x080067b3
 8006614:	080067b3 	.word	0x080067b3
 8006618:	08006731 	.word	0x08006731
 800661c:	080067b3 	.word	0x080067b3
 8006620:	080067b3 	.word	0x080067b3
 8006624:	080067b3 	.word	0x080067b3
 8006628:	08006771 	.word	0x08006771
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fa4c 	bl	8006ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0208 	orr.w	r2, r2, #8
 8006646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699a      	ldr	r2, [r3, #24]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0204 	bic.w	r2, r2, #4
 8006656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6999      	ldr	r1, [r3, #24]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	691a      	ldr	r2, [r3, #16]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	619a      	str	r2, [r3, #24]
      break;
 800666a:	e0a5      	b.n	80067b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68b9      	ldr	r1, [r7, #8]
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fabc 	bl	8006bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6999      	ldr	r1, [r3, #24]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	021a      	lsls	r2, r3, #8
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	619a      	str	r2, [r3, #24]
      break;
 80066ac:	e084      	b.n	80067b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68b9      	ldr	r1, [r7, #8]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 fb25 	bl	8006d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69da      	ldr	r2, [r3, #28]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f042 0208 	orr.w	r2, r2, #8
 80066c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0204 	bic.w	r2, r2, #4
 80066d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69d9      	ldr	r1, [r3, #28]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	61da      	str	r2, [r3, #28]
      break;
 80066ec:	e064      	b.n	80067b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fb8d 	bl	8006e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69da      	ldr	r2, [r3, #28]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69da      	ldr	r2, [r3, #28]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69d9      	ldr	r1, [r3, #28]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	021a      	lsls	r2, r3, #8
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	61da      	str	r2, [r3, #28]
      break;
 800672e:	e043      	b.n	80067b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68b9      	ldr	r1, [r7, #8]
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fbd6 	bl	8006ee8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0208 	orr.w	r2, r2, #8
 800674a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0204 	bic.w	r2, r2, #4
 800675a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800676e:	e023      	b.n	80067b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fc1a 	bl	8006fb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800678a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800679a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	021a      	lsls	r2, r3, #8
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067b0:	e002      	b.n	80067b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	75fb      	strb	r3, [r7, #23]
      break;
 80067b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop

080067cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <HAL_TIM_ConfigClockSource+0x1c>
 80067e4:	2302      	movs	r3, #2
 80067e6:	e0b6      	b.n	8006956 <HAL_TIM_ConfigClockSource+0x18a>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006806:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800680a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006812:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006824:	d03e      	beq.n	80068a4 <HAL_TIM_ConfigClockSource+0xd8>
 8006826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800682a:	f200 8087 	bhi.w	800693c <HAL_TIM_ConfigClockSource+0x170>
 800682e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006832:	f000 8086 	beq.w	8006942 <HAL_TIM_ConfigClockSource+0x176>
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683a:	d87f      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x170>
 800683c:	2b70      	cmp	r3, #112	; 0x70
 800683e:	d01a      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0xaa>
 8006840:	2b70      	cmp	r3, #112	; 0x70
 8006842:	d87b      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x170>
 8006844:	2b60      	cmp	r3, #96	; 0x60
 8006846:	d050      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0x11e>
 8006848:	2b60      	cmp	r3, #96	; 0x60
 800684a:	d877      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x170>
 800684c:	2b50      	cmp	r3, #80	; 0x50
 800684e:	d03c      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0xfe>
 8006850:	2b50      	cmp	r3, #80	; 0x50
 8006852:	d873      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x170>
 8006854:	2b40      	cmp	r3, #64	; 0x40
 8006856:	d058      	beq.n	800690a <HAL_TIM_ConfigClockSource+0x13e>
 8006858:	2b40      	cmp	r3, #64	; 0x40
 800685a:	d86f      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x170>
 800685c:	2b30      	cmp	r3, #48	; 0x30
 800685e:	d064      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x15e>
 8006860:	2b30      	cmp	r3, #48	; 0x30
 8006862:	d86b      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x170>
 8006864:	2b20      	cmp	r3, #32
 8006866:	d060      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x15e>
 8006868:	2b20      	cmp	r3, #32
 800686a:	d867      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x170>
 800686c:	2b00      	cmp	r3, #0
 800686e:	d05c      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x15e>
 8006870:	2b10      	cmp	r3, #16
 8006872:	d05a      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x15e>
 8006874:	e062      	b.n	800693c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	6899      	ldr	r1, [r3, #8]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f000 fc73 	bl	8007170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	609a      	str	r2, [r3, #8]
      break;
 80068a2:	e04f      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	6899      	ldr	r1, [r3, #8]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f000 fc5c 	bl	8007170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068c6:	609a      	str	r2, [r3, #8]
      break;
 80068c8:	e03c      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6818      	ldr	r0, [r3, #0]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	6859      	ldr	r1, [r3, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	461a      	mov	r2, r3
 80068d8:	f000 fbd0 	bl	800707c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2150      	movs	r1, #80	; 0x50
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fc29 	bl	800713a <TIM_ITRx_SetConfig>
      break;
 80068e8:	e02c      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6859      	ldr	r1, [r3, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	461a      	mov	r2, r3
 80068f8:	f000 fbef 	bl	80070da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2160      	movs	r1, #96	; 0x60
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fc19 	bl	800713a <TIM_ITRx_SetConfig>
      break;
 8006908:	e01c      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	6859      	ldr	r1, [r3, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	461a      	mov	r2, r3
 8006918:	f000 fbb0 	bl	800707c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2140      	movs	r1, #64	; 0x40
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fc09 	bl	800713a <TIM_ITRx_SetConfig>
      break;
 8006928:	e00c      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4619      	mov	r1, r3
 8006934:	4610      	mov	r0, r2
 8006936:	f000 fc00 	bl	800713a <TIM_ITRx_SetConfig>
      break;
 800693a:	e003      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
      break;
 8006940:	e000      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006954:	7bfb      	ldrb	r3, [r7, #15]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a3c      	ldr	r2, [pc, #240]	; (8006ab4 <TIM_Base_SetConfig+0x104>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00f      	beq.n	80069e8 <TIM_Base_SetConfig+0x38>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ce:	d00b      	beq.n	80069e8 <TIM_Base_SetConfig+0x38>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a39      	ldr	r2, [pc, #228]	; (8006ab8 <TIM_Base_SetConfig+0x108>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d007      	beq.n	80069e8 <TIM_Base_SetConfig+0x38>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a38      	ldr	r2, [pc, #224]	; (8006abc <TIM_Base_SetConfig+0x10c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_Base_SetConfig+0x38>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a37      	ldr	r2, [pc, #220]	; (8006ac0 <TIM_Base_SetConfig+0x110>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d108      	bne.n	80069fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a2d      	ldr	r2, [pc, #180]	; (8006ab4 <TIM_Base_SetConfig+0x104>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d01b      	beq.n	8006a3a <TIM_Base_SetConfig+0x8a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a08:	d017      	beq.n	8006a3a <TIM_Base_SetConfig+0x8a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2a      	ldr	r2, [pc, #168]	; (8006ab8 <TIM_Base_SetConfig+0x108>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d013      	beq.n	8006a3a <TIM_Base_SetConfig+0x8a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a29      	ldr	r2, [pc, #164]	; (8006abc <TIM_Base_SetConfig+0x10c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00f      	beq.n	8006a3a <TIM_Base_SetConfig+0x8a>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a28      	ldr	r2, [pc, #160]	; (8006ac0 <TIM_Base_SetConfig+0x110>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00b      	beq.n	8006a3a <TIM_Base_SetConfig+0x8a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a27      	ldr	r2, [pc, #156]	; (8006ac4 <TIM_Base_SetConfig+0x114>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d007      	beq.n	8006a3a <TIM_Base_SetConfig+0x8a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a26      	ldr	r2, [pc, #152]	; (8006ac8 <TIM_Base_SetConfig+0x118>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d003      	beq.n	8006a3a <TIM_Base_SetConfig+0x8a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a25      	ldr	r2, [pc, #148]	; (8006acc <TIM_Base_SetConfig+0x11c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d108      	bne.n	8006a4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a10      	ldr	r2, [pc, #64]	; (8006ab4 <TIM_Base_SetConfig+0x104>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00f      	beq.n	8006a98 <TIM_Base_SetConfig+0xe8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a11      	ldr	r2, [pc, #68]	; (8006ac0 <TIM_Base_SetConfig+0x110>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00b      	beq.n	8006a98 <TIM_Base_SetConfig+0xe8>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a10      	ldr	r2, [pc, #64]	; (8006ac4 <TIM_Base_SetConfig+0x114>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d007      	beq.n	8006a98 <TIM_Base_SetConfig+0xe8>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a0f      	ldr	r2, [pc, #60]	; (8006ac8 <TIM_Base_SetConfig+0x118>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d003      	beq.n	8006a98 <TIM_Base_SetConfig+0xe8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a0e      	ldr	r2, [pc, #56]	; (8006acc <TIM_Base_SetConfig+0x11c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d103      	bne.n	8006aa0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	615a      	str	r2, [r3, #20]
}
 8006aa6:	bf00      	nop
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	40012c00 	.word	0x40012c00
 8006ab8:	40000400 	.word	0x40000400
 8006abc:	40000800 	.word	0x40000800
 8006ac0:	40013400 	.word	0x40013400
 8006ac4:	40014000 	.word	0x40014000
 8006ac8:	40014400 	.word	0x40014400
 8006acc:	40014800 	.word	0x40014800

08006ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f023 0201 	bic.w	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f023 0302 	bic.w	r3, r3, #2
 8006b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a2c      	ldr	r2, [pc, #176]	; (8006bdc <TIM_OC1_SetConfig+0x10c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00f      	beq.n	8006b50 <TIM_OC1_SetConfig+0x80>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a2b      	ldr	r2, [pc, #172]	; (8006be0 <TIM_OC1_SetConfig+0x110>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00b      	beq.n	8006b50 <TIM_OC1_SetConfig+0x80>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a2a      	ldr	r2, [pc, #168]	; (8006be4 <TIM_OC1_SetConfig+0x114>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d007      	beq.n	8006b50 <TIM_OC1_SetConfig+0x80>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a29      	ldr	r2, [pc, #164]	; (8006be8 <TIM_OC1_SetConfig+0x118>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d003      	beq.n	8006b50 <TIM_OC1_SetConfig+0x80>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a28      	ldr	r2, [pc, #160]	; (8006bec <TIM_OC1_SetConfig+0x11c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d10c      	bne.n	8006b6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f023 0308 	bic.w	r3, r3, #8
 8006b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f023 0304 	bic.w	r3, r3, #4
 8006b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a1b      	ldr	r2, [pc, #108]	; (8006bdc <TIM_OC1_SetConfig+0x10c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00f      	beq.n	8006b92 <TIM_OC1_SetConfig+0xc2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a1a      	ldr	r2, [pc, #104]	; (8006be0 <TIM_OC1_SetConfig+0x110>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00b      	beq.n	8006b92 <TIM_OC1_SetConfig+0xc2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <TIM_OC1_SetConfig+0x114>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d007      	beq.n	8006b92 <TIM_OC1_SetConfig+0xc2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <TIM_OC1_SetConfig+0x118>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d003      	beq.n	8006b92 <TIM_OC1_SetConfig+0xc2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a17      	ldr	r2, [pc, #92]	; (8006bec <TIM_OC1_SetConfig+0x11c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d111      	bne.n	8006bb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	621a      	str	r2, [r3, #32]
}
 8006bd0:	bf00      	nop
 8006bd2:	371c      	adds	r7, #28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	40013400 	.word	0x40013400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40014400 	.word	0x40014400
 8006bec:	40014800 	.word	0x40014800

08006bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	f023 0210 	bic.w	r2, r3, #16
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 0320 	bic.w	r3, r3, #32
 8006c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	011b      	lsls	r3, r3, #4
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a28      	ldr	r2, [pc, #160]	; (8006cf0 <TIM_OC2_SetConfig+0x100>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_OC2_SetConfig+0x6c>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a27      	ldr	r2, [pc, #156]	; (8006cf4 <TIM_OC2_SetConfig+0x104>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d10d      	bne.n	8006c78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a1d      	ldr	r2, [pc, #116]	; (8006cf0 <TIM_OC2_SetConfig+0x100>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00f      	beq.n	8006ca0 <TIM_OC2_SetConfig+0xb0>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a1c      	ldr	r2, [pc, #112]	; (8006cf4 <TIM_OC2_SetConfig+0x104>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00b      	beq.n	8006ca0 <TIM_OC2_SetConfig+0xb0>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a1b      	ldr	r2, [pc, #108]	; (8006cf8 <TIM_OC2_SetConfig+0x108>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d007      	beq.n	8006ca0 <TIM_OC2_SetConfig+0xb0>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a1a      	ldr	r2, [pc, #104]	; (8006cfc <TIM_OC2_SetConfig+0x10c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d003      	beq.n	8006ca0 <TIM_OC2_SetConfig+0xb0>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a19      	ldr	r2, [pc, #100]	; (8006d00 <TIM_OC2_SetConfig+0x110>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d113      	bne.n	8006cc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ca6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	621a      	str	r2, [r3, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	40012c00 	.word	0x40012c00
 8006cf4:	40013400 	.word	0x40013400
 8006cf8:	40014000 	.word	0x40014000
 8006cfc:	40014400 	.word	0x40014400
 8006d00:	40014800 	.word	0x40014800

08006d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0303 	bic.w	r3, r3, #3
 8006d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	021b      	lsls	r3, r3, #8
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a27      	ldr	r2, [pc, #156]	; (8006e00 <TIM_OC3_SetConfig+0xfc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d003      	beq.n	8006d6e <TIM_OC3_SetConfig+0x6a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a26      	ldr	r2, [pc, #152]	; (8006e04 <TIM_OC3_SetConfig+0x100>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d10d      	bne.n	8006d8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d88:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a1c      	ldr	r2, [pc, #112]	; (8006e00 <TIM_OC3_SetConfig+0xfc>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00f      	beq.n	8006db2 <TIM_OC3_SetConfig+0xae>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a1b      	ldr	r2, [pc, #108]	; (8006e04 <TIM_OC3_SetConfig+0x100>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00b      	beq.n	8006db2 <TIM_OC3_SetConfig+0xae>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a1a      	ldr	r2, [pc, #104]	; (8006e08 <TIM_OC3_SetConfig+0x104>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d007      	beq.n	8006db2 <TIM_OC3_SetConfig+0xae>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a19      	ldr	r2, [pc, #100]	; (8006e0c <TIM_OC3_SetConfig+0x108>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d003      	beq.n	8006db2 <TIM_OC3_SetConfig+0xae>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a18      	ldr	r2, [pc, #96]	; (8006e10 <TIM_OC3_SetConfig+0x10c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d113      	bne.n	8006dda <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	621a      	str	r2, [r3, #32]
}
 8006df4:	bf00      	nop
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	40012c00 	.word	0x40012c00
 8006e04:	40013400 	.word	0x40013400
 8006e08:	40014000 	.word	0x40014000
 8006e0c:	40014400 	.word	0x40014400
 8006e10:	40014800 	.word	0x40014800

08006e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	021b      	lsls	r3, r3, #8
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	031b      	lsls	r3, r3, #12
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a18      	ldr	r2, [pc, #96]	; (8006ed4 <TIM_OC4_SetConfig+0xc0>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00f      	beq.n	8006e98 <TIM_OC4_SetConfig+0x84>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a17      	ldr	r2, [pc, #92]	; (8006ed8 <TIM_OC4_SetConfig+0xc4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00b      	beq.n	8006e98 <TIM_OC4_SetConfig+0x84>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a16      	ldr	r2, [pc, #88]	; (8006edc <TIM_OC4_SetConfig+0xc8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d007      	beq.n	8006e98 <TIM_OC4_SetConfig+0x84>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a15      	ldr	r2, [pc, #84]	; (8006ee0 <TIM_OC4_SetConfig+0xcc>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_OC4_SetConfig+0x84>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a14      	ldr	r2, [pc, #80]	; (8006ee4 <TIM_OC4_SetConfig+0xd0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d109      	bne.n	8006eac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	019b      	lsls	r3, r3, #6
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	621a      	str	r2, [r3, #32]
}
 8006ec6:	bf00      	nop
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	40012c00 	.word	0x40012c00
 8006ed8:	40013400 	.word	0x40013400
 8006edc:	40014000 	.word	0x40014000
 8006ee0:	40014400 	.word	0x40014400
 8006ee4:	40014800 	.word	0x40014800

08006ee8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	041b      	lsls	r3, r3, #16
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a17      	ldr	r2, [pc, #92]	; (8006f9c <TIM_OC5_SetConfig+0xb4>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d00f      	beq.n	8006f62 <TIM_OC5_SetConfig+0x7a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a16      	ldr	r2, [pc, #88]	; (8006fa0 <TIM_OC5_SetConfig+0xb8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00b      	beq.n	8006f62 <TIM_OC5_SetConfig+0x7a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a15      	ldr	r2, [pc, #84]	; (8006fa4 <TIM_OC5_SetConfig+0xbc>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d007      	beq.n	8006f62 <TIM_OC5_SetConfig+0x7a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a14      	ldr	r2, [pc, #80]	; (8006fa8 <TIM_OC5_SetConfig+0xc0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_OC5_SetConfig+0x7a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a13      	ldr	r2, [pc, #76]	; (8006fac <TIM_OC5_SetConfig+0xc4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d109      	bne.n	8006f76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	621a      	str	r2, [r3, #32]
}
 8006f90:	bf00      	nop
 8006f92:	371c      	adds	r7, #28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	40012c00 	.word	0x40012c00
 8006fa0:	40013400 	.word	0x40013400
 8006fa4:	40014000 	.word	0x40014000
 8006fa8:	40014400 	.word	0x40014400
 8006fac:	40014800 	.word	0x40014800

08006fb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	021b      	lsls	r3, r3, #8
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	051b      	lsls	r3, r3, #20
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	4313      	orrs	r3, r2
 8007002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a18      	ldr	r2, [pc, #96]	; (8007068 <TIM_OC6_SetConfig+0xb8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00f      	beq.n	800702c <TIM_OC6_SetConfig+0x7c>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a17      	ldr	r2, [pc, #92]	; (800706c <TIM_OC6_SetConfig+0xbc>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00b      	beq.n	800702c <TIM_OC6_SetConfig+0x7c>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a16      	ldr	r2, [pc, #88]	; (8007070 <TIM_OC6_SetConfig+0xc0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d007      	beq.n	800702c <TIM_OC6_SetConfig+0x7c>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a15      	ldr	r2, [pc, #84]	; (8007074 <TIM_OC6_SetConfig+0xc4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d003      	beq.n	800702c <TIM_OC6_SetConfig+0x7c>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a14      	ldr	r2, [pc, #80]	; (8007078 <TIM_OC6_SetConfig+0xc8>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d109      	bne.n	8007040 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007032:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	029b      	lsls	r3, r3, #10
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40013400 	.word	0x40013400
 8007070:	40014000 	.word	0x40014000
 8007074:	40014400 	.word	0x40014400
 8007078:	40014800 	.word	0x40014800

0800707c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f023 0201 	bic.w	r2, r3, #1
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f023 030a 	bic.w	r3, r3, #10
 80070b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070da:	b480      	push	{r7}
 80070dc:	b087      	sub	sp, #28
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f023 0210 	bic.w	r2, r3, #16
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	031b      	lsls	r3, r3, #12
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007116:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	621a      	str	r2, [r3, #32]
}
 800712e:	bf00      	nop
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800713a:	b480      	push	{r7}
 800713c:	b085      	sub	sp, #20
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	f043 0307 	orr.w	r3, r3, #7
 800715c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	609a      	str	r2, [r3, #8]
}
 8007164:	bf00      	nop
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800718a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	021a      	lsls	r2, r3, #8
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	431a      	orrs	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	4313      	orrs	r3, r2
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	4313      	orrs	r3, r2
 800719c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	609a      	str	r2, [r3, #8]
}
 80071a4:	bf00      	nop
 80071a6:	371c      	adds	r7, #28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f003 031f 	and.w	r3, r3, #31
 80071c2:	2201      	movs	r2, #1
 80071c4:	fa02 f303 	lsl.w	r3, r2, r3
 80071c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a1a      	ldr	r2, [r3, #32]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	43db      	mvns	r3, r3
 80071d2:	401a      	ands	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a1a      	ldr	r2, [r3, #32]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f003 031f 	and.w	r3, r3, #31
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	fa01 f303 	lsl.w	r3, r1, r3
 80071e8:	431a      	orrs	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	621a      	str	r2, [r3, #32]
}
 80071ee:	bf00      	nop
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
	...

080071fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007210:	2302      	movs	r3, #2
 8007212:	e063      	b.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a2b      	ldr	r2, [pc, #172]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a2a      	ldr	r2, [pc, #168]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d108      	bne.n	800725a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800724e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a1b      	ldr	r2, [pc, #108]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d018      	beq.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007286:	d013      	beq.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a18      	ldr	r2, [pc, #96]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00e      	beq.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d009      	beq.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a12      	ldr	r2, [pc, #72]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d004      	beq.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a13      	ldr	r2, [pc, #76]	; (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d10c      	bne.n	80072ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	40012c00 	.word	0x40012c00
 80072ec:	40013400 	.word	0x40013400
 80072f0:	40000400 	.word	0x40000400
 80072f4:	40000800 	.word	0x40000800
 80072f8:	40014000 	.word	0x40014000

080072fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e040      	b.n	80073cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7fa fe74 	bl	8002048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2224      	movs	r2, #36	; 0x24
 8007364:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0201 	bic.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fbbc 	bl	8007af4 <UART_SetConfig>
 800737c:	4603      	mov	r3, r0
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e022      	b.n	80073cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fd84 	bl	8007e9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fe0b 	bl	8007fe0 <UART_CheckIdleState>
 80073ca:	4603      	mov	r3, r0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08a      	sub	sp, #40	; 0x28
 80073d8:	af02      	add	r7, sp, #8
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	603b      	str	r3, [r7, #0]
 80073e0:	4613      	mov	r3, r2
 80073e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d178      	bne.n	80074de <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <HAL_UART_Transmit+0x24>
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e071      	b.n	80074e0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2221      	movs	r2, #33	; 0x21
 8007408:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800740a:	f7fb f871 	bl	80024f0 <HAL_GetTick>
 800740e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	88fa      	ldrh	r2, [r7, #6]
 8007414:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	88fa      	ldrh	r2, [r7, #6]
 800741c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007428:	d108      	bne.n	800743c <HAL_UART_Transmit+0x68>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d104      	bne.n	800743c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007432:	2300      	movs	r3, #0
 8007434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e003      	b.n	8007444 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007440:	2300      	movs	r3, #0
 8007442:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007444:	e030      	b.n	80074a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2200      	movs	r2, #0
 800744e:	2180      	movs	r1, #128	; 0x80
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 fe6d 	bl	8008130 <UART_WaitOnFlagUntilTimeout>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d004      	beq.n	8007466 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e03c      	b.n	80074e0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10b      	bne.n	8007484 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	881a      	ldrh	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007478:	b292      	uxth	r2, r2
 800747a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	3302      	adds	r3, #2
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	e008      	b.n	8007496 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	781a      	ldrb	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	b292      	uxth	r2, r2
 800748e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	3301      	adds	r3, #1
 8007494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1c8      	bne.n	8007446 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	2200      	movs	r2, #0
 80074bc:	2140      	movs	r1, #64	; 0x40
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fe36 	bl	8008130 <UART_WaitOnFlagUntilTimeout>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2220      	movs	r2, #32
 80074ce:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e005      	b.n	80074e0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2220      	movs	r2, #32
 80074d8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	e000      	b.n	80074e0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80074de:	2302      	movs	r3, #2
  }
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3720      	adds	r7, #32
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b0ba      	sub	sp, #232	; 0xe8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800750e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007512:	f640 030f 	movw	r3, #2063	; 0x80f
 8007516:	4013      	ands	r3, r2
 8007518:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800751c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d115      	bne.n	8007550 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00f      	beq.n	8007550 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d009      	beq.n	8007550 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 82ab 	beq.w	8007a9c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3
      }
      return;
 800754e:	e2a5      	b.n	8007a9c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8117 	beq.w	8007788 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800755a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007566:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800756a:	4b85      	ldr	r3, [pc, #532]	; (8007780 <HAL_UART_IRQHandler+0x298>)
 800756c:	4013      	ands	r3, r2
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 810a 	beq.w	8007788 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	d011      	beq.n	80075a4 <HAL_UART_IRQHandler+0xbc>
 8007580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00b      	beq.n	80075a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2201      	movs	r2, #1
 8007592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800759a:	f043 0201 	orr.w	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d011      	beq.n	80075d4 <HAL_UART_IRQHandler+0xec>
 80075b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2202      	movs	r2, #2
 80075c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ca:	f043 0204 	orr.w	r2, r3, #4
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d011      	beq.n	8007604 <HAL_UART_IRQHandler+0x11c>
 80075e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2204      	movs	r2, #4
 80075f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075fa:	f043 0202 	orr.w	r2, r3, #2
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007608:	f003 0308 	and.w	r3, r3, #8
 800760c:	2b00      	cmp	r3, #0
 800760e:	d017      	beq.n	8007640 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b00      	cmp	r3, #0
 800761a:	d105      	bne.n	8007628 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800761c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007620:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2208      	movs	r2, #8
 800762e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007636:	f043 0208 	orr.w	r2, r3, #8
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007648:	2b00      	cmp	r3, #0
 800764a:	d012      	beq.n	8007672 <HAL_UART_IRQHandler+0x18a>
 800764c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007650:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00c      	beq.n	8007672 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007668:	f043 0220 	orr.w	r2, r3, #32
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 8211 	beq.w	8007aa0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800767e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00d      	beq.n	80076a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800768a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d007      	beq.n	80076a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b40      	cmp	r3, #64	; 0x40
 80076bc:	d005      	beq.n	80076ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d04f      	beq.n	800776a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fd97 	bl	80081fe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d141      	bne.n	8007762 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3308      	adds	r3, #8
 80076e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3308      	adds	r3, #8
 8007706:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800770a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800770e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007716:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1d9      	bne.n	80076de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800772e:	2b00      	cmp	r3, #0
 8007730:	d013      	beq.n	800775a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007736:	4a13      	ldr	r2, [pc, #76]	; (8007784 <HAL_UART_IRQHandler+0x29c>)
 8007738:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800773e:	4618      	mov	r0, r3
 8007740:	f7fc fb24 	bl	8003d8c <HAL_DMA_Abort_IT>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d017      	beq.n	800777a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800774e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007754:	4610      	mov	r0, r2
 8007756:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007758:	e00f      	b.n	800777a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f9b4 	bl	8007ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007760:	e00b      	b.n	800777a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f9b0 	bl	8007ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007768:	e007      	b.n	800777a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f9ac 	bl	8007ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007778:	e192      	b.n	8007aa0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777a:	bf00      	nop
    return;
 800777c:	e190      	b.n	8007aa0 <HAL_UART_IRQHandler+0x5b8>
 800777e:	bf00      	nop
 8007780:	04000120 	.word	0x04000120
 8007784:	080082c7 	.word	0x080082c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800778c:	2b01      	cmp	r3, #1
 800778e:	f040 814b 	bne.w	8007a28 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 8144 	beq.w	8007a28 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a4:	f003 0310 	and.w	r3, r3, #16
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 813d 	beq.w	8007a28 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2210      	movs	r2, #16
 80077b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	f040 80b5 	bne.w	8007930 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 8164 	beq.w	8007aa4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077e6:	429a      	cmp	r2, r3
 80077e8:	f080 815c 	bcs.w	8007aa4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	f000 8086 	beq.w	800790e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007816:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800781a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800781e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800782c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007830:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007838:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007844:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1da      	bne.n	8007802 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3308      	adds	r3, #8
 8007852:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800785c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800785e:	f023 0301 	bic.w	r3, r3, #1
 8007862:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3308      	adds	r3, #8
 800786c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007870:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007874:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007878:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e1      	bne.n	800784c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800789a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800789e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3308      	adds	r3, #8
 80078a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e3      	bne.n	8007888 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078de:	f023 0310 	bic.w	r3, r3, #16
 80078e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80078f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e4      	bne.n	80078ce <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007908:	4618      	mov	r0, r3
 800790a:	f7fc fa06 	bl	8003d1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2202      	movs	r2, #2
 8007912:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007920:	b29b      	uxth	r3, r3
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	b29b      	uxth	r3, r3
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f8d7 	bl	8007adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800792e:	e0b9      	b.n	8007aa4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800793c:	b29b      	uxth	r3, r3
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800794a:	b29b      	uxth	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 80ab 	beq.w	8007aa8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007952:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 80a6 	beq.w	8007aa8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800796a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007970:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	461a      	mov	r2, r3
 800797a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800797e:	647b      	str	r3, [r7, #68]	; 0x44
 8007980:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800798c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e4      	bne.n	800795c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3308      	adds	r3, #8
 8007998:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	623b      	str	r3, [r7, #32]
   return(result);
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	f023 0301 	bic.w	r3, r3, #1
 80079a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079b6:	633a      	str	r2, [r7, #48]	; 0x30
 80079b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e3      	bne.n	8007992 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 0310 	bic.w	r3, r3, #16
 80079f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a00:	61fb      	str	r3, [r7, #28]
 8007a02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	69b9      	ldr	r1, [r7, #24]
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e4      	bne.n	80079de <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f85b 	bl	8007adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a26:	e03f      	b.n	8007aa8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00e      	beq.n	8007a52 <HAL_UART_IRQHandler+0x56a>
 8007a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d008      	beq.n	8007a52 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fc7b 	bl	8008346 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a50:	e02d      	b.n	8007aae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00e      	beq.n	8007a7c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01c      	beq.n	8007aac <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
    }
    return;
 8007a7a:	e017      	b.n	8007aac <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d012      	beq.n	8007aae <HAL_UART_IRQHandler+0x5c6>
 8007a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00c      	beq.n	8007aae <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fc2c 	bl	80082f2 <UART_EndTransmit_IT>
    return;
 8007a9a:	e008      	b.n	8007aae <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a9c:	bf00      	nop
 8007a9e:	e006      	b.n	8007aae <HAL_UART_IRQHandler+0x5c6>
    return;
 8007aa0:	bf00      	nop
 8007aa2:	e004      	b.n	8007aae <HAL_UART_IRQHandler+0x5c6>
      return;
 8007aa4:	bf00      	nop
 8007aa6:	e002      	b.n	8007aae <HAL_UART_IRQHandler+0x5c6>
      return;
 8007aa8:	bf00      	nop
 8007aaa:	e000      	b.n	8007aae <HAL_UART_IRQHandler+0x5c6>
    return;
 8007aac:	bf00      	nop
  }

}
 8007aae:	37e8      	adds	r7, #232	; 0xe8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007b22:	f023 030c 	bic.w	r3, r3, #12
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	6812      	ldr	r2, [r2, #0]
 8007b2a:	6979      	ldr	r1, [r7, #20]
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4aa7      	ldr	r2, [pc, #668]	; (8007e0c <UART_SetConfig+0x318>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d120      	bne.n	8007bb6 <UART_SetConfig+0xc2>
 8007b74:	4ba6      	ldr	r3, [pc, #664]	; (8007e10 <UART_SetConfig+0x31c>)
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	f003 0303 	and.w	r3, r3, #3
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	d817      	bhi.n	8007bb0 <UART_SetConfig+0xbc>
 8007b80:	a201      	add	r2, pc, #4	; (adr r2, 8007b88 <UART_SetConfig+0x94>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007b99 	.word	0x08007b99
 8007b8c:	08007ba5 	.word	0x08007ba5
 8007b90:	08007bab 	.word	0x08007bab
 8007b94:	08007b9f 	.word	0x08007b9f
 8007b98:	2301      	movs	r3, #1
 8007b9a:	77fb      	strb	r3, [r7, #31]
 8007b9c:	e0b5      	b.n	8007d0a <UART_SetConfig+0x216>
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	77fb      	strb	r3, [r7, #31]
 8007ba2:	e0b2      	b.n	8007d0a <UART_SetConfig+0x216>
 8007ba4:	2304      	movs	r3, #4
 8007ba6:	77fb      	strb	r3, [r7, #31]
 8007ba8:	e0af      	b.n	8007d0a <UART_SetConfig+0x216>
 8007baa:	2308      	movs	r3, #8
 8007bac:	77fb      	strb	r3, [r7, #31]
 8007bae:	e0ac      	b.n	8007d0a <UART_SetConfig+0x216>
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	77fb      	strb	r3, [r7, #31]
 8007bb4:	e0a9      	b.n	8007d0a <UART_SetConfig+0x216>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a96      	ldr	r2, [pc, #600]	; (8007e14 <UART_SetConfig+0x320>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d124      	bne.n	8007c0a <UART_SetConfig+0x116>
 8007bc0:	4b93      	ldr	r3, [pc, #588]	; (8007e10 <UART_SetConfig+0x31c>)
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007bc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bcc:	d011      	beq.n	8007bf2 <UART_SetConfig+0xfe>
 8007bce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bd2:	d817      	bhi.n	8007c04 <UART_SetConfig+0x110>
 8007bd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bd8:	d011      	beq.n	8007bfe <UART_SetConfig+0x10a>
 8007bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bde:	d811      	bhi.n	8007c04 <UART_SetConfig+0x110>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <UART_SetConfig+0xf8>
 8007be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be8:	d006      	beq.n	8007bf8 <UART_SetConfig+0x104>
 8007bea:	e00b      	b.n	8007c04 <UART_SetConfig+0x110>
 8007bec:	2300      	movs	r3, #0
 8007bee:	77fb      	strb	r3, [r7, #31]
 8007bf0:	e08b      	b.n	8007d0a <UART_SetConfig+0x216>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	77fb      	strb	r3, [r7, #31]
 8007bf6:	e088      	b.n	8007d0a <UART_SetConfig+0x216>
 8007bf8:	2304      	movs	r3, #4
 8007bfa:	77fb      	strb	r3, [r7, #31]
 8007bfc:	e085      	b.n	8007d0a <UART_SetConfig+0x216>
 8007bfe:	2308      	movs	r3, #8
 8007c00:	77fb      	strb	r3, [r7, #31]
 8007c02:	e082      	b.n	8007d0a <UART_SetConfig+0x216>
 8007c04:	2310      	movs	r3, #16
 8007c06:	77fb      	strb	r3, [r7, #31]
 8007c08:	e07f      	b.n	8007d0a <UART_SetConfig+0x216>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a82      	ldr	r2, [pc, #520]	; (8007e18 <UART_SetConfig+0x324>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d124      	bne.n	8007c5e <UART_SetConfig+0x16a>
 8007c14:	4b7e      	ldr	r3, [pc, #504]	; (8007e10 <UART_SetConfig+0x31c>)
 8007c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007c1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007c20:	d011      	beq.n	8007c46 <UART_SetConfig+0x152>
 8007c22:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007c26:	d817      	bhi.n	8007c58 <UART_SetConfig+0x164>
 8007c28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c2c:	d011      	beq.n	8007c52 <UART_SetConfig+0x15e>
 8007c2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c32:	d811      	bhi.n	8007c58 <UART_SetConfig+0x164>
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <UART_SetConfig+0x14c>
 8007c38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c3c:	d006      	beq.n	8007c4c <UART_SetConfig+0x158>
 8007c3e:	e00b      	b.n	8007c58 <UART_SetConfig+0x164>
 8007c40:	2300      	movs	r3, #0
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e061      	b.n	8007d0a <UART_SetConfig+0x216>
 8007c46:	2302      	movs	r3, #2
 8007c48:	77fb      	strb	r3, [r7, #31]
 8007c4a:	e05e      	b.n	8007d0a <UART_SetConfig+0x216>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	77fb      	strb	r3, [r7, #31]
 8007c50:	e05b      	b.n	8007d0a <UART_SetConfig+0x216>
 8007c52:	2308      	movs	r3, #8
 8007c54:	77fb      	strb	r3, [r7, #31]
 8007c56:	e058      	b.n	8007d0a <UART_SetConfig+0x216>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e055      	b.n	8007d0a <UART_SetConfig+0x216>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a6e      	ldr	r2, [pc, #440]	; (8007e1c <UART_SetConfig+0x328>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d124      	bne.n	8007cb2 <UART_SetConfig+0x1be>
 8007c68:	4b69      	ldr	r3, [pc, #420]	; (8007e10 <UART_SetConfig+0x31c>)
 8007c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007c70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c74:	d011      	beq.n	8007c9a <UART_SetConfig+0x1a6>
 8007c76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c7a:	d817      	bhi.n	8007cac <UART_SetConfig+0x1b8>
 8007c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c80:	d011      	beq.n	8007ca6 <UART_SetConfig+0x1b2>
 8007c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c86:	d811      	bhi.n	8007cac <UART_SetConfig+0x1b8>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <UART_SetConfig+0x1a0>
 8007c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c90:	d006      	beq.n	8007ca0 <UART_SetConfig+0x1ac>
 8007c92:	e00b      	b.n	8007cac <UART_SetConfig+0x1b8>
 8007c94:	2300      	movs	r3, #0
 8007c96:	77fb      	strb	r3, [r7, #31]
 8007c98:	e037      	b.n	8007d0a <UART_SetConfig+0x216>
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	77fb      	strb	r3, [r7, #31]
 8007c9e:	e034      	b.n	8007d0a <UART_SetConfig+0x216>
 8007ca0:	2304      	movs	r3, #4
 8007ca2:	77fb      	strb	r3, [r7, #31]
 8007ca4:	e031      	b.n	8007d0a <UART_SetConfig+0x216>
 8007ca6:	2308      	movs	r3, #8
 8007ca8:	77fb      	strb	r3, [r7, #31]
 8007caa:	e02e      	b.n	8007d0a <UART_SetConfig+0x216>
 8007cac:	2310      	movs	r3, #16
 8007cae:	77fb      	strb	r3, [r7, #31]
 8007cb0:	e02b      	b.n	8007d0a <UART_SetConfig+0x216>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a5a      	ldr	r2, [pc, #360]	; (8007e20 <UART_SetConfig+0x32c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d124      	bne.n	8007d06 <UART_SetConfig+0x212>
 8007cbc:	4b54      	ldr	r3, [pc, #336]	; (8007e10 <UART_SetConfig+0x31c>)
 8007cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007cc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007cc8:	d011      	beq.n	8007cee <UART_SetConfig+0x1fa>
 8007cca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007cce:	d817      	bhi.n	8007d00 <UART_SetConfig+0x20c>
 8007cd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cd4:	d011      	beq.n	8007cfa <UART_SetConfig+0x206>
 8007cd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cda:	d811      	bhi.n	8007d00 <UART_SetConfig+0x20c>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <UART_SetConfig+0x1f4>
 8007ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ce4:	d006      	beq.n	8007cf4 <UART_SetConfig+0x200>
 8007ce6:	e00b      	b.n	8007d00 <UART_SetConfig+0x20c>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	77fb      	strb	r3, [r7, #31]
 8007cec:	e00d      	b.n	8007d0a <UART_SetConfig+0x216>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	77fb      	strb	r3, [r7, #31]
 8007cf2:	e00a      	b.n	8007d0a <UART_SetConfig+0x216>
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	77fb      	strb	r3, [r7, #31]
 8007cf8:	e007      	b.n	8007d0a <UART_SetConfig+0x216>
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	77fb      	strb	r3, [r7, #31]
 8007cfe:	e004      	b.n	8007d0a <UART_SetConfig+0x216>
 8007d00:	2310      	movs	r3, #16
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e001      	b.n	8007d0a <UART_SetConfig+0x216>
 8007d06:	2310      	movs	r3, #16
 8007d08:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d12:	d15b      	bne.n	8007dcc <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007d14:	7ffb      	ldrb	r3, [r7, #31]
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d827      	bhi.n	8007d6a <UART_SetConfig+0x276>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0x22c>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d4d 	.word	0x08007d4d
 8007d28:	08007d55 	.word	0x08007d55
 8007d2c:	08007d6b 	.word	0x08007d6b
 8007d30:	08007d5b 	.word	0x08007d5b
 8007d34:	08007d6b 	.word	0x08007d6b
 8007d38:	08007d6b 	.word	0x08007d6b
 8007d3c:	08007d6b 	.word	0x08007d6b
 8007d40:	08007d63 	.word	0x08007d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fd fe4c 	bl	80059e0 <HAL_RCC_GetPCLK1Freq>
 8007d48:	61b8      	str	r0, [r7, #24]
        break;
 8007d4a:	e013      	b.n	8007d74 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d4c:	f7fd fe6a 	bl	8005a24 <HAL_RCC_GetPCLK2Freq>
 8007d50:	61b8      	str	r0, [r7, #24]
        break;
 8007d52:	e00f      	b.n	8007d74 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d54:	4b33      	ldr	r3, [pc, #204]	; (8007e24 <UART_SetConfig+0x330>)
 8007d56:	61bb      	str	r3, [r7, #24]
        break;
 8007d58:	e00c      	b.n	8007d74 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d5a:	f7fd fdcb 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 8007d5e:	61b8      	str	r0, [r7, #24]
        break;
 8007d60:	e008      	b.n	8007d74 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d66:	61bb      	str	r3, [r7, #24]
        break;
 8007d68:	e004      	b.n	8007d74 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	77bb      	strb	r3, [r7, #30]
        break;
 8007d72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 8082 	beq.w	8007e80 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	005a      	lsls	r2, r3, #1
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	085b      	lsrs	r3, r3, #1
 8007d86:	441a      	add	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b0f      	cmp	r3, #15
 8007d96:	d916      	bls.n	8007dc6 <UART_SetConfig+0x2d2>
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d9e:	d212      	bcs.n	8007dc6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	f023 030f 	bic.w	r3, r3, #15
 8007da8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	89fb      	ldrh	r3, [r7, #14]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	89fa      	ldrh	r2, [r7, #14]
 8007dc2:	60da      	str	r2, [r3, #12]
 8007dc4:	e05c      	b.n	8007e80 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	77bb      	strb	r3, [r7, #30]
 8007dca:	e059      	b.n	8007e80 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dcc:	7ffb      	ldrb	r3, [r7, #31]
 8007dce:	2b08      	cmp	r3, #8
 8007dd0:	d835      	bhi.n	8007e3e <UART_SetConfig+0x34a>
 8007dd2:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <UART_SetConfig+0x2e4>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007dfd 	.word	0x08007dfd
 8007ddc:	08007e05 	.word	0x08007e05
 8007de0:	08007e29 	.word	0x08007e29
 8007de4:	08007e3f 	.word	0x08007e3f
 8007de8:	08007e2f 	.word	0x08007e2f
 8007dec:	08007e3f 	.word	0x08007e3f
 8007df0:	08007e3f 	.word	0x08007e3f
 8007df4:	08007e3f 	.word	0x08007e3f
 8007df8:	08007e37 	.word	0x08007e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dfc:	f7fd fdf0 	bl	80059e0 <HAL_RCC_GetPCLK1Freq>
 8007e00:	61b8      	str	r0, [r7, #24]
        break;
 8007e02:	e021      	b.n	8007e48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e04:	f7fd fe0e 	bl	8005a24 <HAL_RCC_GetPCLK2Freq>
 8007e08:	61b8      	str	r0, [r7, #24]
        break;
 8007e0a:	e01d      	b.n	8007e48 <UART_SetConfig+0x354>
 8007e0c:	40013800 	.word	0x40013800
 8007e10:	40021000 	.word	0x40021000
 8007e14:	40004400 	.word	0x40004400
 8007e18:	40004800 	.word	0x40004800
 8007e1c:	40004c00 	.word	0x40004c00
 8007e20:	40005000 	.word	0x40005000
 8007e24:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e28:	4b1b      	ldr	r3, [pc, #108]	; (8007e98 <UART_SetConfig+0x3a4>)
 8007e2a:	61bb      	str	r3, [r7, #24]
        break;
 8007e2c:	e00c      	b.n	8007e48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e2e:	f7fd fd61 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 8007e32:	61b8      	str	r0, [r7, #24]
        break;
 8007e34:	e008      	b.n	8007e48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e3a:	61bb      	str	r3, [r7, #24]
        break;
 8007e3c:	e004      	b.n	8007e48 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	77bb      	strb	r3, [r7, #30]
        break;
 8007e46:	bf00      	nop
    }

    if (pclk != 0U)
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d018      	beq.n	8007e80 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	085a      	lsrs	r2, r3, #1
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	441a      	add	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	2b0f      	cmp	r3, #15
 8007e66:	d909      	bls.n	8007e7c <UART_SetConfig+0x388>
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e6e:	d205      	bcs.n	8007e7c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	60da      	str	r2, [r3, #12]
 8007e7a:	e001      	b.n	8007e80 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007e8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3720      	adds	r7, #32
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	007a1200 	.word	0x007a1200

08007e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00a      	beq.n	8007ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00a      	beq.n	8007ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	f003 0308 	and.w	r3, r3, #8
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00a      	beq.n	8007f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d01a      	beq.n	8007fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f9a:	d10a      	bne.n	8007fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	605a      	str	r2, [r3, #4]
  }
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b098      	sub	sp, #96	; 0x60
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ff0:	f7fa fa7e 	bl	80024f0 <HAL_GetTick>
 8007ff4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0308 	and.w	r3, r3, #8
 8008000:	2b08      	cmp	r3, #8
 8008002:	d12e      	bne.n	8008062 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800800c:	2200      	movs	r2, #0
 800800e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f88c 	bl	8008130 <UART_WaitOnFlagUntilTimeout>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d021      	beq.n	8008062 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800802c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008032:	653b      	str	r3, [r7, #80]	; 0x50
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800803c:	647b      	str	r3, [r7, #68]	; 0x44
 800803e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800804a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e6      	bne.n	800801e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e062      	b.n	8008128 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0304 	and.w	r3, r3, #4
 800806c:	2b04      	cmp	r3, #4
 800806e:	d149      	bne.n	8008104 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008078:	2200      	movs	r2, #0
 800807a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f856 	bl	8008130 <UART_WaitOnFlagUntilTimeout>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d03c      	beq.n	8008104 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	623b      	str	r3, [r7, #32]
   return(result);
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800809e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	461a      	mov	r2, r3
 80080a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a8:	633b      	str	r3, [r7, #48]	; 0x30
 80080aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e6      	bne.n	800808a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3308      	adds	r3, #8
 80080c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	e853 3f00 	ldrex	r3, [r3]
 80080ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0301 	bic.w	r3, r3, #1
 80080d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3308      	adds	r3, #8
 80080da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080dc:	61fa      	str	r2, [r7, #28]
 80080de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e0:	69b9      	ldr	r1, [r7, #24]
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	e841 2300 	strex	r3, r2, [r1]
 80080e8:	617b      	str	r3, [r7, #20]
   return(result);
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1e5      	bne.n	80080bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e011      	b.n	8008128 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2220      	movs	r2, #32
 8008108:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2220      	movs	r2, #32
 800810e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3758      	adds	r7, #88	; 0x58
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	4613      	mov	r3, r2
 800813e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008140:	e049      	b.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008148:	d045      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800814a:	f7fa f9d1 	bl	80024f0 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	429a      	cmp	r2, r3
 8008158:	d302      	bcc.n	8008160 <UART_WaitOnFlagUntilTimeout+0x30>
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e048      	b.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0304 	and.w	r3, r3, #4
 800816e:	2b00      	cmp	r3, #0
 8008170:	d031      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	f003 0308 	and.w	r3, r3, #8
 800817c:	2b08      	cmp	r3, #8
 800817e:	d110      	bne.n	80081a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2208      	movs	r2, #8
 8008186:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f838 	bl	80081fe <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2208      	movs	r2, #8
 8008192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e029      	b.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081b0:	d111      	bne.n	80081d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 f81e 	bl	80081fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e00f      	b.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69da      	ldr	r2, [r3, #28]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4013      	ands	r3, r2
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	bf0c      	ite	eq
 80081e6:	2301      	moveq	r3, #1
 80081e8:	2300      	movne	r3, #0
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d0a6      	beq.n	8008142 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081fe:	b480      	push	{r7}
 8008200:	b095      	sub	sp, #84	; 0x54
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800821a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	461a      	mov	r2, r3
 8008222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008224:	643b      	str	r3, [r7, #64]	; 0x40
 8008226:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800822a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e6      	bne.n	8008206 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3308      	adds	r3, #8
 800823e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	e853 3f00 	ldrex	r3, [r3]
 8008246:	61fb      	str	r3, [r7, #28]
   return(result);
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	f023 0301 	bic.w	r3, r3, #1
 800824e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3308      	adds	r3, #8
 8008256:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008258:	62fa      	str	r2, [r7, #44]	; 0x2c
 800825a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800825e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008260:	e841 2300 	strex	r3, r2, [r1]
 8008264:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1e5      	bne.n	8008238 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008270:	2b01      	cmp	r3, #1
 8008272:	d118      	bne.n	80082a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	60bb      	str	r3, [r7, #8]
   return(result);
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f023 0310 	bic.w	r3, r3, #16
 8008288:	647b      	str	r3, [r7, #68]	; 0x44
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	461a      	mov	r2, r3
 8008290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008292:	61bb      	str	r3, [r7, #24]
 8008294:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	6979      	ldr	r1, [r7, #20]
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	613b      	str	r3, [r7, #16]
   return(result);
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e6      	bne.n	8008274 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2220      	movs	r2, #32
 80082aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80082ba:	bf00      	nop
 80082bc:	3754      	adds	r7, #84	; 0x54
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f7ff fbef 	bl	8007ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082ea:	bf00      	nop
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b088      	sub	sp, #32
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	e853 3f00 	ldrex	r3, [r3]
 8008306:	60bb      	str	r3, [r7, #8]
   return(result);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800830e:	61fb      	str	r3, [r7, #28]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	461a      	mov	r2, r3
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	61bb      	str	r3, [r7, #24]
 800831a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	6979      	ldr	r1, [r7, #20]
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	613b      	str	r3, [r7, #16]
   return(result);
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e6      	bne.n	80082fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2220      	movs	r2, #32
 8008330:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7ff fbbb 	bl	8007ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800833e:	bf00      	nop
 8008340:	3720      	adds	r7, #32
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800835a:	b480      	push	{r7}
 800835c:	b085      	sub	sp, #20
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008362:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008366:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	b29b      	uxth	r3, r3
 8008374:	43db      	mvns	r3, r3
 8008376:	b29b      	uxth	r3, r3
 8008378:	4013      	ands	r3, r2
 800837a:	b29a      	uxth	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008390:	b084      	sub	sp, #16
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	f107 0014 	add.w	r0, r7, #20
 800839e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	b004      	add	sp, #16
 80083d0:	4770      	bx	lr
	...

080083d4 <__errno>:
 80083d4:	4b01      	ldr	r3, [pc, #4]	; (80083dc <__errno+0x8>)
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	200000fc 	.word	0x200000fc

080083e0 <__libc_init_array>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	4d0d      	ldr	r5, [pc, #52]	; (8008418 <__libc_init_array+0x38>)
 80083e4:	4c0d      	ldr	r4, [pc, #52]	; (800841c <__libc_init_array+0x3c>)
 80083e6:	1b64      	subs	r4, r4, r5
 80083e8:	10a4      	asrs	r4, r4, #2
 80083ea:	2600      	movs	r6, #0
 80083ec:	42a6      	cmp	r6, r4
 80083ee:	d109      	bne.n	8008404 <__libc_init_array+0x24>
 80083f0:	4d0b      	ldr	r5, [pc, #44]	; (8008420 <__libc_init_array+0x40>)
 80083f2:	4c0c      	ldr	r4, [pc, #48]	; (8008424 <__libc_init_array+0x44>)
 80083f4:	f005 fcda 	bl	800ddac <_init>
 80083f8:	1b64      	subs	r4, r4, r5
 80083fa:	10a4      	asrs	r4, r4, #2
 80083fc:	2600      	movs	r6, #0
 80083fe:	42a6      	cmp	r6, r4
 8008400:	d105      	bne.n	800840e <__libc_init_array+0x2e>
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	f855 3b04 	ldr.w	r3, [r5], #4
 8008408:	4798      	blx	r3
 800840a:	3601      	adds	r6, #1
 800840c:	e7ee      	b.n	80083ec <__libc_init_array+0xc>
 800840e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008412:	4798      	blx	r3
 8008414:	3601      	adds	r6, #1
 8008416:	e7f2      	b.n	80083fe <__libc_init_array+0x1e>
 8008418:	0800e4a0 	.word	0x0800e4a0
 800841c:	0800e4a0 	.word	0x0800e4a0
 8008420:	0800e4a0 	.word	0x0800e4a0
 8008424:	0800e4a4 	.word	0x0800e4a4

08008428 <memset>:
 8008428:	4402      	add	r2, r0
 800842a:	4603      	mov	r3, r0
 800842c:	4293      	cmp	r3, r2
 800842e:	d100      	bne.n	8008432 <memset+0xa>
 8008430:	4770      	bx	lr
 8008432:	f803 1b01 	strb.w	r1, [r3], #1
 8008436:	e7f9      	b.n	800842c <memset+0x4>

08008438 <__cvt>:
 8008438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800843c:	ec55 4b10 	vmov	r4, r5, d0
 8008440:	2d00      	cmp	r5, #0
 8008442:	460e      	mov	r6, r1
 8008444:	4619      	mov	r1, r3
 8008446:	462b      	mov	r3, r5
 8008448:	bfbb      	ittet	lt
 800844a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800844e:	461d      	movlt	r5, r3
 8008450:	2300      	movge	r3, #0
 8008452:	232d      	movlt	r3, #45	; 0x2d
 8008454:	700b      	strb	r3, [r1, #0]
 8008456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008458:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800845c:	4691      	mov	r9, r2
 800845e:	f023 0820 	bic.w	r8, r3, #32
 8008462:	bfbc      	itt	lt
 8008464:	4622      	movlt	r2, r4
 8008466:	4614      	movlt	r4, r2
 8008468:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800846c:	d005      	beq.n	800847a <__cvt+0x42>
 800846e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008472:	d100      	bne.n	8008476 <__cvt+0x3e>
 8008474:	3601      	adds	r6, #1
 8008476:	2102      	movs	r1, #2
 8008478:	e000      	b.n	800847c <__cvt+0x44>
 800847a:	2103      	movs	r1, #3
 800847c:	ab03      	add	r3, sp, #12
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	ab02      	add	r3, sp, #8
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	ec45 4b10 	vmov	d0, r4, r5
 8008488:	4653      	mov	r3, sl
 800848a:	4632      	mov	r2, r6
 800848c:	f001 fdac 	bl	8009fe8 <_dtoa_r>
 8008490:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008494:	4607      	mov	r7, r0
 8008496:	d102      	bne.n	800849e <__cvt+0x66>
 8008498:	f019 0f01 	tst.w	r9, #1
 800849c:	d022      	beq.n	80084e4 <__cvt+0xac>
 800849e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084a2:	eb07 0906 	add.w	r9, r7, r6
 80084a6:	d110      	bne.n	80084ca <__cvt+0x92>
 80084a8:	783b      	ldrb	r3, [r7, #0]
 80084aa:	2b30      	cmp	r3, #48	; 0x30
 80084ac:	d10a      	bne.n	80084c4 <__cvt+0x8c>
 80084ae:	2200      	movs	r2, #0
 80084b0:	2300      	movs	r3, #0
 80084b2:	4620      	mov	r0, r4
 80084b4:	4629      	mov	r1, r5
 80084b6:	f7f8 fb07 	bl	8000ac8 <__aeabi_dcmpeq>
 80084ba:	b918      	cbnz	r0, 80084c4 <__cvt+0x8c>
 80084bc:	f1c6 0601 	rsb	r6, r6, #1
 80084c0:	f8ca 6000 	str.w	r6, [sl]
 80084c4:	f8da 3000 	ldr.w	r3, [sl]
 80084c8:	4499      	add	r9, r3
 80084ca:	2200      	movs	r2, #0
 80084cc:	2300      	movs	r3, #0
 80084ce:	4620      	mov	r0, r4
 80084d0:	4629      	mov	r1, r5
 80084d2:	f7f8 faf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80084d6:	b108      	cbz	r0, 80084dc <__cvt+0xa4>
 80084d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80084dc:	2230      	movs	r2, #48	; 0x30
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	454b      	cmp	r3, r9
 80084e2:	d307      	bcc.n	80084f4 <__cvt+0xbc>
 80084e4:	9b03      	ldr	r3, [sp, #12]
 80084e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084e8:	1bdb      	subs	r3, r3, r7
 80084ea:	4638      	mov	r0, r7
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	b004      	add	sp, #16
 80084f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f4:	1c59      	adds	r1, r3, #1
 80084f6:	9103      	str	r1, [sp, #12]
 80084f8:	701a      	strb	r2, [r3, #0]
 80084fa:	e7f0      	b.n	80084de <__cvt+0xa6>

080084fc <__exponent>:
 80084fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084fe:	4603      	mov	r3, r0
 8008500:	2900      	cmp	r1, #0
 8008502:	bfb8      	it	lt
 8008504:	4249      	neglt	r1, r1
 8008506:	f803 2b02 	strb.w	r2, [r3], #2
 800850a:	bfb4      	ite	lt
 800850c:	222d      	movlt	r2, #45	; 0x2d
 800850e:	222b      	movge	r2, #43	; 0x2b
 8008510:	2909      	cmp	r1, #9
 8008512:	7042      	strb	r2, [r0, #1]
 8008514:	dd2a      	ble.n	800856c <__exponent+0x70>
 8008516:	f10d 0407 	add.w	r4, sp, #7
 800851a:	46a4      	mov	ip, r4
 800851c:	270a      	movs	r7, #10
 800851e:	46a6      	mov	lr, r4
 8008520:	460a      	mov	r2, r1
 8008522:	fb91 f6f7 	sdiv	r6, r1, r7
 8008526:	fb07 1516 	mls	r5, r7, r6, r1
 800852a:	3530      	adds	r5, #48	; 0x30
 800852c:	2a63      	cmp	r2, #99	; 0x63
 800852e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008532:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008536:	4631      	mov	r1, r6
 8008538:	dcf1      	bgt.n	800851e <__exponent+0x22>
 800853a:	3130      	adds	r1, #48	; 0x30
 800853c:	f1ae 0502 	sub.w	r5, lr, #2
 8008540:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008544:	1c44      	adds	r4, r0, #1
 8008546:	4629      	mov	r1, r5
 8008548:	4561      	cmp	r1, ip
 800854a:	d30a      	bcc.n	8008562 <__exponent+0x66>
 800854c:	f10d 0209 	add.w	r2, sp, #9
 8008550:	eba2 020e 	sub.w	r2, r2, lr
 8008554:	4565      	cmp	r5, ip
 8008556:	bf88      	it	hi
 8008558:	2200      	movhi	r2, #0
 800855a:	4413      	add	r3, r2
 800855c:	1a18      	subs	r0, r3, r0
 800855e:	b003      	add	sp, #12
 8008560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008566:	f804 2f01 	strb.w	r2, [r4, #1]!
 800856a:	e7ed      	b.n	8008548 <__exponent+0x4c>
 800856c:	2330      	movs	r3, #48	; 0x30
 800856e:	3130      	adds	r1, #48	; 0x30
 8008570:	7083      	strb	r3, [r0, #2]
 8008572:	70c1      	strb	r1, [r0, #3]
 8008574:	1d03      	adds	r3, r0, #4
 8008576:	e7f1      	b.n	800855c <__exponent+0x60>

08008578 <_printf_float>:
 8008578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857c:	ed2d 8b02 	vpush	{d8}
 8008580:	b08d      	sub	sp, #52	; 0x34
 8008582:	460c      	mov	r4, r1
 8008584:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008588:	4616      	mov	r6, r2
 800858a:	461f      	mov	r7, r3
 800858c:	4605      	mov	r5, r0
 800858e:	f002 fe89 	bl	800b2a4 <_localeconv_r>
 8008592:	f8d0 a000 	ldr.w	sl, [r0]
 8008596:	4650      	mov	r0, sl
 8008598:	f7f7 fe1a 	bl	80001d0 <strlen>
 800859c:	2300      	movs	r3, #0
 800859e:	930a      	str	r3, [sp, #40]	; 0x28
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	9305      	str	r3, [sp, #20]
 80085a4:	f8d8 3000 	ldr.w	r3, [r8]
 80085a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80085ac:	3307      	adds	r3, #7
 80085ae:	f023 0307 	bic.w	r3, r3, #7
 80085b2:	f103 0208 	add.w	r2, r3, #8
 80085b6:	f8c8 2000 	str.w	r2, [r8]
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80085c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80085c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085ca:	9307      	str	r3, [sp, #28]
 80085cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80085d0:	ee08 0a10 	vmov	s16, r0
 80085d4:	4b9f      	ldr	r3, [pc, #636]	; (8008854 <_printf_float+0x2dc>)
 80085d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085da:	f04f 32ff 	mov.w	r2, #4294967295
 80085de:	f7f8 faa5 	bl	8000b2c <__aeabi_dcmpun>
 80085e2:	bb88      	cbnz	r0, 8008648 <_printf_float+0xd0>
 80085e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085e8:	4b9a      	ldr	r3, [pc, #616]	; (8008854 <_printf_float+0x2dc>)
 80085ea:	f04f 32ff 	mov.w	r2, #4294967295
 80085ee:	f7f8 fa7f 	bl	8000af0 <__aeabi_dcmple>
 80085f2:	bb48      	cbnz	r0, 8008648 <_printf_float+0xd0>
 80085f4:	2200      	movs	r2, #0
 80085f6:	2300      	movs	r3, #0
 80085f8:	4640      	mov	r0, r8
 80085fa:	4649      	mov	r1, r9
 80085fc:	f7f8 fa6e 	bl	8000adc <__aeabi_dcmplt>
 8008600:	b110      	cbz	r0, 8008608 <_printf_float+0x90>
 8008602:	232d      	movs	r3, #45	; 0x2d
 8008604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008608:	4b93      	ldr	r3, [pc, #588]	; (8008858 <_printf_float+0x2e0>)
 800860a:	4894      	ldr	r0, [pc, #592]	; (800885c <_printf_float+0x2e4>)
 800860c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008610:	bf94      	ite	ls
 8008612:	4698      	movls	r8, r3
 8008614:	4680      	movhi	r8, r0
 8008616:	2303      	movs	r3, #3
 8008618:	6123      	str	r3, [r4, #16]
 800861a:	9b05      	ldr	r3, [sp, #20]
 800861c:	f023 0204 	bic.w	r2, r3, #4
 8008620:	6022      	str	r2, [r4, #0]
 8008622:	f04f 0900 	mov.w	r9, #0
 8008626:	9700      	str	r7, [sp, #0]
 8008628:	4633      	mov	r3, r6
 800862a:	aa0b      	add	r2, sp, #44	; 0x2c
 800862c:	4621      	mov	r1, r4
 800862e:	4628      	mov	r0, r5
 8008630:	f000 f9d8 	bl	80089e4 <_printf_common>
 8008634:	3001      	adds	r0, #1
 8008636:	f040 8090 	bne.w	800875a <_printf_float+0x1e2>
 800863a:	f04f 30ff 	mov.w	r0, #4294967295
 800863e:	b00d      	add	sp, #52	; 0x34
 8008640:	ecbd 8b02 	vpop	{d8}
 8008644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008648:	4642      	mov	r2, r8
 800864a:	464b      	mov	r3, r9
 800864c:	4640      	mov	r0, r8
 800864e:	4649      	mov	r1, r9
 8008650:	f7f8 fa6c 	bl	8000b2c <__aeabi_dcmpun>
 8008654:	b140      	cbz	r0, 8008668 <_printf_float+0xf0>
 8008656:	464b      	mov	r3, r9
 8008658:	2b00      	cmp	r3, #0
 800865a:	bfbc      	itt	lt
 800865c:	232d      	movlt	r3, #45	; 0x2d
 800865e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008662:	487f      	ldr	r0, [pc, #508]	; (8008860 <_printf_float+0x2e8>)
 8008664:	4b7f      	ldr	r3, [pc, #508]	; (8008864 <_printf_float+0x2ec>)
 8008666:	e7d1      	b.n	800860c <_printf_float+0x94>
 8008668:	6863      	ldr	r3, [r4, #4]
 800866a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800866e:	9206      	str	r2, [sp, #24]
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	d13f      	bne.n	80086f4 <_printf_float+0x17c>
 8008674:	2306      	movs	r3, #6
 8008676:	6063      	str	r3, [r4, #4]
 8008678:	9b05      	ldr	r3, [sp, #20]
 800867a:	6861      	ldr	r1, [r4, #4]
 800867c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008680:	2300      	movs	r3, #0
 8008682:	9303      	str	r3, [sp, #12]
 8008684:	ab0a      	add	r3, sp, #40	; 0x28
 8008686:	e9cd b301 	strd	fp, r3, [sp, #4]
 800868a:	ab09      	add	r3, sp, #36	; 0x24
 800868c:	ec49 8b10 	vmov	d0, r8, r9
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	6022      	str	r2, [r4, #0]
 8008694:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008698:	4628      	mov	r0, r5
 800869a:	f7ff fecd 	bl	8008438 <__cvt>
 800869e:	9b06      	ldr	r3, [sp, #24]
 80086a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086a2:	2b47      	cmp	r3, #71	; 0x47
 80086a4:	4680      	mov	r8, r0
 80086a6:	d108      	bne.n	80086ba <_printf_float+0x142>
 80086a8:	1cc8      	adds	r0, r1, #3
 80086aa:	db02      	blt.n	80086b2 <_printf_float+0x13a>
 80086ac:	6863      	ldr	r3, [r4, #4]
 80086ae:	4299      	cmp	r1, r3
 80086b0:	dd41      	ble.n	8008736 <_printf_float+0x1be>
 80086b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80086b6:	fa5f fb8b 	uxtb.w	fp, fp
 80086ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086be:	d820      	bhi.n	8008702 <_printf_float+0x18a>
 80086c0:	3901      	subs	r1, #1
 80086c2:	465a      	mov	r2, fp
 80086c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086c8:	9109      	str	r1, [sp, #36]	; 0x24
 80086ca:	f7ff ff17 	bl	80084fc <__exponent>
 80086ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086d0:	1813      	adds	r3, r2, r0
 80086d2:	2a01      	cmp	r2, #1
 80086d4:	4681      	mov	r9, r0
 80086d6:	6123      	str	r3, [r4, #16]
 80086d8:	dc02      	bgt.n	80086e0 <_printf_float+0x168>
 80086da:	6822      	ldr	r2, [r4, #0]
 80086dc:	07d2      	lsls	r2, r2, #31
 80086de:	d501      	bpl.n	80086e4 <_printf_float+0x16c>
 80086e0:	3301      	adds	r3, #1
 80086e2:	6123      	str	r3, [r4, #16]
 80086e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d09c      	beq.n	8008626 <_printf_float+0xae>
 80086ec:	232d      	movs	r3, #45	; 0x2d
 80086ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086f2:	e798      	b.n	8008626 <_printf_float+0xae>
 80086f4:	9a06      	ldr	r2, [sp, #24]
 80086f6:	2a47      	cmp	r2, #71	; 0x47
 80086f8:	d1be      	bne.n	8008678 <_printf_float+0x100>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1bc      	bne.n	8008678 <_printf_float+0x100>
 80086fe:	2301      	movs	r3, #1
 8008700:	e7b9      	b.n	8008676 <_printf_float+0xfe>
 8008702:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008706:	d118      	bne.n	800873a <_printf_float+0x1c2>
 8008708:	2900      	cmp	r1, #0
 800870a:	6863      	ldr	r3, [r4, #4]
 800870c:	dd0b      	ble.n	8008726 <_printf_float+0x1ae>
 800870e:	6121      	str	r1, [r4, #16]
 8008710:	b913      	cbnz	r3, 8008718 <_printf_float+0x1a0>
 8008712:	6822      	ldr	r2, [r4, #0]
 8008714:	07d0      	lsls	r0, r2, #31
 8008716:	d502      	bpl.n	800871e <_printf_float+0x1a6>
 8008718:	3301      	adds	r3, #1
 800871a:	440b      	add	r3, r1
 800871c:	6123      	str	r3, [r4, #16]
 800871e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008720:	f04f 0900 	mov.w	r9, #0
 8008724:	e7de      	b.n	80086e4 <_printf_float+0x16c>
 8008726:	b913      	cbnz	r3, 800872e <_printf_float+0x1b6>
 8008728:	6822      	ldr	r2, [r4, #0]
 800872a:	07d2      	lsls	r2, r2, #31
 800872c:	d501      	bpl.n	8008732 <_printf_float+0x1ba>
 800872e:	3302      	adds	r3, #2
 8008730:	e7f4      	b.n	800871c <_printf_float+0x1a4>
 8008732:	2301      	movs	r3, #1
 8008734:	e7f2      	b.n	800871c <_printf_float+0x1a4>
 8008736:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800873a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873c:	4299      	cmp	r1, r3
 800873e:	db05      	blt.n	800874c <_printf_float+0x1d4>
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	6121      	str	r1, [r4, #16]
 8008744:	07d8      	lsls	r0, r3, #31
 8008746:	d5ea      	bpl.n	800871e <_printf_float+0x1a6>
 8008748:	1c4b      	adds	r3, r1, #1
 800874a:	e7e7      	b.n	800871c <_printf_float+0x1a4>
 800874c:	2900      	cmp	r1, #0
 800874e:	bfd4      	ite	le
 8008750:	f1c1 0202 	rsble	r2, r1, #2
 8008754:	2201      	movgt	r2, #1
 8008756:	4413      	add	r3, r2
 8008758:	e7e0      	b.n	800871c <_printf_float+0x1a4>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	055a      	lsls	r2, r3, #21
 800875e:	d407      	bmi.n	8008770 <_printf_float+0x1f8>
 8008760:	6923      	ldr	r3, [r4, #16]
 8008762:	4642      	mov	r2, r8
 8008764:	4631      	mov	r1, r6
 8008766:	4628      	mov	r0, r5
 8008768:	47b8      	blx	r7
 800876a:	3001      	adds	r0, #1
 800876c:	d12c      	bne.n	80087c8 <_printf_float+0x250>
 800876e:	e764      	b.n	800863a <_printf_float+0xc2>
 8008770:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008774:	f240 80e0 	bls.w	8008938 <_printf_float+0x3c0>
 8008778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800877c:	2200      	movs	r2, #0
 800877e:	2300      	movs	r3, #0
 8008780:	f7f8 f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008784:	2800      	cmp	r0, #0
 8008786:	d034      	beq.n	80087f2 <_printf_float+0x27a>
 8008788:	4a37      	ldr	r2, [pc, #220]	; (8008868 <_printf_float+0x2f0>)
 800878a:	2301      	movs	r3, #1
 800878c:	4631      	mov	r1, r6
 800878e:	4628      	mov	r0, r5
 8008790:	47b8      	blx	r7
 8008792:	3001      	adds	r0, #1
 8008794:	f43f af51 	beq.w	800863a <_printf_float+0xc2>
 8008798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800879c:	429a      	cmp	r2, r3
 800879e:	db02      	blt.n	80087a6 <_printf_float+0x22e>
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	07d8      	lsls	r0, r3, #31
 80087a4:	d510      	bpl.n	80087c8 <_printf_float+0x250>
 80087a6:	ee18 3a10 	vmov	r3, s16
 80087aa:	4652      	mov	r2, sl
 80087ac:	4631      	mov	r1, r6
 80087ae:	4628      	mov	r0, r5
 80087b0:	47b8      	blx	r7
 80087b2:	3001      	adds	r0, #1
 80087b4:	f43f af41 	beq.w	800863a <_printf_float+0xc2>
 80087b8:	f04f 0800 	mov.w	r8, #0
 80087bc:	f104 091a 	add.w	r9, r4, #26
 80087c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c2:	3b01      	subs	r3, #1
 80087c4:	4543      	cmp	r3, r8
 80087c6:	dc09      	bgt.n	80087dc <_printf_float+0x264>
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	079b      	lsls	r3, r3, #30
 80087cc:	f100 8105 	bmi.w	80089da <_printf_float+0x462>
 80087d0:	68e0      	ldr	r0, [r4, #12]
 80087d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087d4:	4298      	cmp	r0, r3
 80087d6:	bfb8      	it	lt
 80087d8:	4618      	movlt	r0, r3
 80087da:	e730      	b.n	800863e <_printf_float+0xc6>
 80087dc:	2301      	movs	r3, #1
 80087de:	464a      	mov	r2, r9
 80087e0:	4631      	mov	r1, r6
 80087e2:	4628      	mov	r0, r5
 80087e4:	47b8      	blx	r7
 80087e6:	3001      	adds	r0, #1
 80087e8:	f43f af27 	beq.w	800863a <_printf_float+0xc2>
 80087ec:	f108 0801 	add.w	r8, r8, #1
 80087f0:	e7e6      	b.n	80087c0 <_printf_float+0x248>
 80087f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	dc39      	bgt.n	800886c <_printf_float+0x2f4>
 80087f8:	4a1b      	ldr	r2, [pc, #108]	; (8008868 <_printf_float+0x2f0>)
 80087fa:	2301      	movs	r3, #1
 80087fc:	4631      	mov	r1, r6
 80087fe:	4628      	mov	r0, r5
 8008800:	47b8      	blx	r7
 8008802:	3001      	adds	r0, #1
 8008804:	f43f af19 	beq.w	800863a <_printf_float+0xc2>
 8008808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800880c:	4313      	orrs	r3, r2
 800880e:	d102      	bne.n	8008816 <_printf_float+0x29e>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	07d9      	lsls	r1, r3, #31
 8008814:	d5d8      	bpl.n	80087c8 <_printf_float+0x250>
 8008816:	ee18 3a10 	vmov	r3, s16
 800881a:	4652      	mov	r2, sl
 800881c:	4631      	mov	r1, r6
 800881e:	4628      	mov	r0, r5
 8008820:	47b8      	blx	r7
 8008822:	3001      	adds	r0, #1
 8008824:	f43f af09 	beq.w	800863a <_printf_float+0xc2>
 8008828:	f04f 0900 	mov.w	r9, #0
 800882c:	f104 0a1a 	add.w	sl, r4, #26
 8008830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008832:	425b      	negs	r3, r3
 8008834:	454b      	cmp	r3, r9
 8008836:	dc01      	bgt.n	800883c <_printf_float+0x2c4>
 8008838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800883a:	e792      	b.n	8008762 <_printf_float+0x1ea>
 800883c:	2301      	movs	r3, #1
 800883e:	4652      	mov	r2, sl
 8008840:	4631      	mov	r1, r6
 8008842:	4628      	mov	r0, r5
 8008844:	47b8      	blx	r7
 8008846:	3001      	adds	r0, #1
 8008848:	f43f aef7 	beq.w	800863a <_printf_float+0xc2>
 800884c:	f109 0901 	add.w	r9, r9, #1
 8008850:	e7ee      	b.n	8008830 <_printf_float+0x2b8>
 8008852:	bf00      	nop
 8008854:	7fefffff 	.word	0x7fefffff
 8008858:	0800de20 	.word	0x0800de20
 800885c:	0800de24 	.word	0x0800de24
 8008860:	0800de2c 	.word	0x0800de2c
 8008864:	0800de28 	.word	0x0800de28
 8008868:	0800de30 	.word	0x0800de30
 800886c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800886e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008870:	429a      	cmp	r2, r3
 8008872:	bfa8      	it	ge
 8008874:	461a      	movge	r2, r3
 8008876:	2a00      	cmp	r2, #0
 8008878:	4691      	mov	r9, r2
 800887a:	dc37      	bgt.n	80088ec <_printf_float+0x374>
 800887c:	f04f 0b00 	mov.w	fp, #0
 8008880:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008884:	f104 021a 	add.w	r2, r4, #26
 8008888:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800888a:	9305      	str	r3, [sp, #20]
 800888c:	eba3 0309 	sub.w	r3, r3, r9
 8008890:	455b      	cmp	r3, fp
 8008892:	dc33      	bgt.n	80088fc <_printf_float+0x384>
 8008894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008898:	429a      	cmp	r2, r3
 800889a:	db3b      	blt.n	8008914 <_printf_float+0x39c>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	07da      	lsls	r2, r3, #31
 80088a0:	d438      	bmi.n	8008914 <_printf_float+0x39c>
 80088a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a4:	9a05      	ldr	r2, [sp, #20]
 80088a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088a8:	1a9a      	subs	r2, r3, r2
 80088aa:	eba3 0901 	sub.w	r9, r3, r1
 80088ae:	4591      	cmp	r9, r2
 80088b0:	bfa8      	it	ge
 80088b2:	4691      	movge	r9, r2
 80088b4:	f1b9 0f00 	cmp.w	r9, #0
 80088b8:	dc35      	bgt.n	8008926 <_printf_float+0x3ae>
 80088ba:	f04f 0800 	mov.w	r8, #0
 80088be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088c2:	f104 0a1a 	add.w	sl, r4, #26
 80088c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088ca:	1a9b      	subs	r3, r3, r2
 80088cc:	eba3 0309 	sub.w	r3, r3, r9
 80088d0:	4543      	cmp	r3, r8
 80088d2:	f77f af79 	ble.w	80087c8 <_printf_float+0x250>
 80088d6:	2301      	movs	r3, #1
 80088d8:	4652      	mov	r2, sl
 80088da:	4631      	mov	r1, r6
 80088dc:	4628      	mov	r0, r5
 80088de:	47b8      	blx	r7
 80088e0:	3001      	adds	r0, #1
 80088e2:	f43f aeaa 	beq.w	800863a <_printf_float+0xc2>
 80088e6:	f108 0801 	add.w	r8, r8, #1
 80088ea:	e7ec      	b.n	80088c6 <_printf_float+0x34e>
 80088ec:	4613      	mov	r3, r2
 80088ee:	4631      	mov	r1, r6
 80088f0:	4642      	mov	r2, r8
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b8      	blx	r7
 80088f6:	3001      	adds	r0, #1
 80088f8:	d1c0      	bne.n	800887c <_printf_float+0x304>
 80088fa:	e69e      	b.n	800863a <_printf_float+0xc2>
 80088fc:	2301      	movs	r3, #1
 80088fe:	4631      	mov	r1, r6
 8008900:	4628      	mov	r0, r5
 8008902:	9205      	str	r2, [sp, #20]
 8008904:	47b8      	blx	r7
 8008906:	3001      	adds	r0, #1
 8008908:	f43f ae97 	beq.w	800863a <_printf_float+0xc2>
 800890c:	9a05      	ldr	r2, [sp, #20]
 800890e:	f10b 0b01 	add.w	fp, fp, #1
 8008912:	e7b9      	b.n	8008888 <_printf_float+0x310>
 8008914:	ee18 3a10 	vmov	r3, s16
 8008918:	4652      	mov	r2, sl
 800891a:	4631      	mov	r1, r6
 800891c:	4628      	mov	r0, r5
 800891e:	47b8      	blx	r7
 8008920:	3001      	adds	r0, #1
 8008922:	d1be      	bne.n	80088a2 <_printf_float+0x32a>
 8008924:	e689      	b.n	800863a <_printf_float+0xc2>
 8008926:	9a05      	ldr	r2, [sp, #20]
 8008928:	464b      	mov	r3, r9
 800892a:	4442      	add	r2, r8
 800892c:	4631      	mov	r1, r6
 800892e:	4628      	mov	r0, r5
 8008930:	47b8      	blx	r7
 8008932:	3001      	adds	r0, #1
 8008934:	d1c1      	bne.n	80088ba <_printf_float+0x342>
 8008936:	e680      	b.n	800863a <_printf_float+0xc2>
 8008938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800893a:	2a01      	cmp	r2, #1
 800893c:	dc01      	bgt.n	8008942 <_printf_float+0x3ca>
 800893e:	07db      	lsls	r3, r3, #31
 8008940:	d538      	bpl.n	80089b4 <_printf_float+0x43c>
 8008942:	2301      	movs	r3, #1
 8008944:	4642      	mov	r2, r8
 8008946:	4631      	mov	r1, r6
 8008948:	4628      	mov	r0, r5
 800894a:	47b8      	blx	r7
 800894c:	3001      	adds	r0, #1
 800894e:	f43f ae74 	beq.w	800863a <_printf_float+0xc2>
 8008952:	ee18 3a10 	vmov	r3, s16
 8008956:	4652      	mov	r2, sl
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	f43f ae6b 	beq.w	800863a <_printf_float+0xc2>
 8008964:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008968:	2200      	movs	r2, #0
 800896a:	2300      	movs	r3, #0
 800896c:	f7f8 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008970:	b9d8      	cbnz	r0, 80089aa <_printf_float+0x432>
 8008972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008974:	f108 0201 	add.w	r2, r8, #1
 8008978:	3b01      	subs	r3, #1
 800897a:	4631      	mov	r1, r6
 800897c:	4628      	mov	r0, r5
 800897e:	47b8      	blx	r7
 8008980:	3001      	adds	r0, #1
 8008982:	d10e      	bne.n	80089a2 <_printf_float+0x42a>
 8008984:	e659      	b.n	800863a <_printf_float+0xc2>
 8008986:	2301      	movs	r3, #1
 8008988:	4652      	mov	r2, sl
 800898a:	4631      	mov	r1, r6
 800898c:	4628      	mov	r0, r5
 800898e:	47b8      	blx	r7
 8008990:	3001      	adds	r0, #1
 8008992:	f43f ae52 	beq.w	800863a <_printf_float+0xc2>
 8008996:	f108 0801 	add.w	r8, r8, #1
 800899a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800899c:	3b01      	subs	r3, #1
 800899e:	4543      	cmp	r3, r8
 80089a0:	dcf1      	bgt.n	8008986 <_printf_float+0x40e>
 80089a2:	464b      	mov	r3, r9
 80089a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089a8:	e6dc      	b.n	8008764 <_printf_float+0x1ec>
 80089aa:	f04f 0800 	mov.w	r8, #0
 80089ae:	f104 0a1a 	add.w	sl, r4, #26
 80089b2:	e7f2      	b.n	800899a <_printf_float+0x422>
 80089b4:	2301      	movs	r3, #1
 80089b6:	4642      	mov	r2, r8
 80089b8:	e7df      	b.n	800897a <_printf_float+0x402>
 80089ba:	2301      	movs	r3, #1
 80089bc:	464a      	mov	r2, r9
 80089be:	4631      	mov	r1, r6
 80089c0:	4628      	mov	r0, r5
 80089c2:	47b8      	blx	r7
 80089c4:	3001      	adds	r0, #1
 80089c6:	f43f ae38 	beq.w	800863a <_printf_float+0xc2>
 80089ca:	f108 0801 	add.w	r8, r8, #1
 80089ce:	68e3      	ldr	r3, [r4, #12]
 80089d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089d2:	1a5b      	subs	r3, r3, r1
 80089d4:	4543      	cmp	r3, r8
 80089d6:	dcf0      	bgt.n	80089ba <_printf_float+0x442>
 80089d8:	e6fa      	b.n	80087d0 <_printf_float+0x258>
 80089da:	f04f 0800 	mov.w	r8, #0
 80089de:	f104 0919 	add.w	r9, r4, #25
 80089e2:	e7f4      	b.n	80089ce <_printf_float+0x456>

080089e4 <_printf_common>:
 80089e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e8:	4616      	mov	r6, r2
 80089ea:	4699      	mov	r9, r3
 80089ec:	688a      	ldr	r2, [r1, #8]
 80089ee:	690b      	ldr	r3, [r1, #16]
 80089f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089f4:	4293      	cmp	r3, r2
 80089f6:	bfb8      	it	lt
 80089f8:	4613      	movlt	r3, r2
 80089fa:	6033      	str	r3, [r6, #0]
 80089fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a00:	4607      	mov	r7, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	b10a      	cbz	r2, 8008a0a <_printf_common+0x26>
 8008a06:	3301      	adds	r3, #1
 8008a08:	6033      	str	r3, [r6, #0]
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	0699      	lsls	r1, r3, #26
 8008a0e:	bf42      	ittt	mi
 8008a10:	6833      	ldrmi	r3, [r6, #0]
 8008a12:	3302      	addmi	r3, #2
 8008a14:	6033      	strmi	r3, [r6, #0]
 8008a16:	6825      	ldr	r5, [r4, #0]
 8008a18:	f015 0506 	ands.w	r5, r5, #6
 8008a1c:	d106      	bne.n	8008a2c <_printf_common+0x48>
 8008a1e:	f104 0a19 	add.w	sl, r4, #25
 8008a22:	68e3      	ldr	r3, [r4, #12]
 8008a24:	6832      	ldr	r2, [r6, #0]
 8008a26:	1a9b      	subs	r3, r3, r2
 8008a28:	42ab      	cmp	r3, r5
 8008a2a:	dc26      	bgt.n	8008a7a <_printf_common+0x96>
 8008a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a30:	1e13      	subs	r3, r2, #0
 8008a32:	6822      	ldr	r2, [r4, #0]
 8008a34:	bf18      	it	ne
 8008a36:	2301      	movne	r3, #1
 8008a38:	0692      	lsls	r2, r2, #26
 8008a3a:	d42b      	bmi.n	8008a94 <_printf_common+0xb0>
 8008a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a40:	4649      	mov	r1, r9
 8008a42:	4638      	mov	r0, r7
 8008a44:	47c0      	blx	r8
 8008a46:	3001      	adds	r0, #1
 8008a48:	d01e      	beq.n	8008a88 <_printf_common+0xa4>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	68e5      	ldr	r5, [r4, #12]
 8008a4e:	6832      	ldr	r2, [r6, #0]
 8008a50:	f003 0306 	and.w	r3, r3, #6
 8008a54:	2b04      	cmp	r3, #4
 8008a56:	bf08      	it	eq
 8008a58:	1aad      	subeq	r5, r5, r2
 8008a5a:	68a3      	ldr	r3, [r4, #8]
 8008a5c:	6922      	ldr	r2, [r4, #16]
 8008a5e:	bf0c      	ite	eq
 8008a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a64:	2500      	movne	r5, #0
 8008a66:	4293      	cmp	r3, r2
 8008a68:	bfc4      	itt	gt
 8008a6a:	1a9b      	subgt	r3, r3, r2
 8008a6c:	18ed      	addgt	r5, r5, r3
 8008a6e:	2600      	movs	r6, #0
 8008a70:	341a      	adds	r4, #26
 8008a72:	42b5      	cmp	r5, r6
 8008a74:	d11a      	bne.n	8008aac <_printf_common+0xc8>
 8008a76:	2000      	movs	r0, #0
 8008a78:	e008      	b.n	8008a8c <_printf_common+0xa8>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	4649      	mov	r1, r9
 8008a80:	4638      	mov	r0, r7
 8008a82:	47c0      	blx	r8
 8008a84:	3001      	adds	r0, #1
 8008a86:	d103      	bne.n	8008a90 <_printf_common+0xac>
 8008a88:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a90:	3501      	adds	r5, #1
 8008a92:	e7c6      	b.n	8008a22 <_printf_common+0x3e>
 8008a94:	18e1      	adds	r1, r4, r3
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	2030      	movs	r0, #48	; 0x30
 8008a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a9e:	4422      	add	r2, r4
 8008aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008aa8:	3302      	adds	r3, #2
 8008aaa:	e7c7      	b.n	8008a3c <_printf_common+0x58>
 8008aac:	2301      	movs	r3, #1
 8008aae:	4622      	mov	r2, r4
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	47c0      	blx	r8
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d0e6      	beq.n	8008a88 <_printf_common+0xa4>
 8008aba:	3601      	adds	r6, #1
 8008abc:	e7d9      	b.n	8008a72 <_printf_common+0x8e>
	...

08008ac0 <_printf_i>:
 8008ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac4:	7e0f      	ldrb	r7, [r1, #24]
 8008ac6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ac8:	2f78      	cmp	r7, #120	; 0x78
 8008aca:	4691      	mov	r9, r2
 8008acc:	4680      	mov	r8, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	469a      	mov	sl, r3
 8008ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ad6:	d807      	bhi.n	8008ae8 <_printf_i+0x28>
 8008ad8:	2f62      	cmp	r7, #98	; 0x62
 8008ada:	d80a      	bhi.n	8008af2 <_printf_i+0x32>
 8008adc:	2f00      	cmp	r7, #0
 8008ade:	f000 80d8 	beq.w	8008c92 <_printf_i+0x1d2>
 8008ae2:	2f58      	cmp	r7, #88	; 0x58
 8008ae4:	f000 80a3 	beq.w	8008c2e <_printf_i+0x16e>
 8008ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008af0:	e03a      	b.n	8008b68 <_printf_i+0xa8>
 8008af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008af6:	2b15      	cmp	r3, #21
 8008af8:	d8f6      	bhi.n	8008ae8 <_printf_i+0x28>
 8008afa:	a101      	add	r1, pc, #4	; (adr r1, 8008b00 <_printf_i+0x40>)
 8008afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b00:	08008b59 	.word	0x08008b59
 8008b04:	08008b6d 	.word	0x08008b6d
 8008b08:	08008ae9 	.word	0x08008ae9
 8008b0c:	08008ae9 	.word	0x08008ae9
 8008b10:	08008ae9 	.word	0x08008ae9
 8008b14:	08008ae9 	.word	0x08008ae9
 8008b18:	08008b6d 	.word	0x08008b6d
 8008b1c:	08008ae9 	.word	0x08008ae9
 8008b20:	08008ae9 	.word	0x08008ae9
 8008b24:	08008ae9 	.word	0x08008ae9
 8008b28:	08008ae9 	.word	0x08008ae9
 8008b2c:	08008c79 	.word	0x08008c79
 8008b30:	08008b9d 	.word	0x08008b9d
 8008b34:	08008c5b 	.word	0x08008c5b
 8008b38:	08008ae9 	.word	0x08008ae9
 8008b3c:	08008ae9 	.word	0x08008ae9
 8008b40:	08008c9b 	.word	0x08008c9b
 8008b44:	08008ae9 	.word	0x08008ae9
 8008b48:	08008b9d 	.word	0x08008b9d
 8008b4c:	08008ae9 	.word	0x08008ae9
 8008b50:	08008ae9 	.word	0x08008ae9
 8008b54:	08008c63 	.word	0x08008c63
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	1d1a      	adds	r2, r3, #4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	602a      	str	r2, [r5, #0]
 8008b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e0a3      	b.n	8008cb4 <_printf_i+0x1f4>
 8008b6c:	6820      	ldr	r0, [r4, #0]
 8008b6e:	6829      	ldr	r1, [r5, #0]
 8008b70:	0606      	lsls	r6, r0, #24
 8008b72:	f101 0304 	add.w	r3, r1, #4
 8008b76:	d50a      	bpl.n	8008b8e <_printf_i+0xce>
 8008b78:	680e      	ldr	r6, [r1, #0]
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	2e00      	cmp	r6, #0
 8008b7e:	da03      	bge.n	8008b88 <_printf_i+0xc8>
 8008b80:	232d      	movs	r3, #45	; 0x2d
 8008b82:	4276      	negs	r6, r6
 8008b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b88:	485e      	ldr	r0, [pc, #376]	; (8008d04 <_printf_i+0x244>)
 8008b8a:	230a      	movs	r3, #10
 8008b8c:	e019      	b.n	8008bc2 <_printf_i+0x102>
 8008b8e:	680e      	ldr	r6, [r1, #0]
 8008b90:	602b      	str	r3, [r5, #0]
 8008b92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b96:	bf18      	it	ne
 8008b98:	b236      	sxthne	r6, r6
 8008b9a:	e7ef      	b.n	8008b7c <_printf_i+0xbc>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	6820      	ldr	r0, [r4, #0]
 8008ba0:	1d19      	adds	r1, r3, #4
 8008ba2:	6029      	str	r1, [r5, #0]
 8008ba4:	0601      	lsls	r1, r0, #24
 8008ba6:	d501      	bpl.n	8008bac <_printf_i+0xec>
 8008ba8:	681e      	ldr	r6, [r3, #0]
 8008baa:	e002      	b.n	8008bb2 <_printf_i+0xf2>
 8008bac:	0646      	lsls	r6, r0, #25
 8008bae:	d5fb      	bpl.n	8008ba8 <_printf_i+0xe8>
 8008bb0:	881e      	ldrh	r6, [r3, #0]
 8008bb2:	4854      	ldr	r0, [pc, #336]	; (8008d04 <_printf_i+0x244>)
 8008bb4:	2f6f      	cmp	r7, #111	; 0x6f
 8008bb6:	bf0c      	ite	eq
 8008bb8:	2308      	moveq	r3, #8
 8008bba:	230a      	movne	r3, #10
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bc2:	6865      	ldr	r5, [r4, #4]
 8008bc4:	60a5      	str	r5, [r4, #8]
 8008bc6:	2d00      	cmp	r5, #0
 8008bc8:	bfa2      	ittt	ge
 8008bca:	6821      	ldrge	r1, [r4, #0]
 8008bcc:	f021 0104 	bicge.w	r1, r1, #4
 8008bd0:	6021      	strge	r1, [r4, #0]
 8008bd2:	b90e      	cbnz	r6, 8008bd8 <_printf_i+0x118>
 8008bd4:	2d00      	cmp	r5, #0
 8008bd6:	d04d      	beq.n	8008c74 <_printf_i+0x1b4>
 8008bd8:	4615      	mov	r5, r2
 8008bda:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bde:	fb03 6711 	mls	r7, r3, r1, r6
 8008be2:	5dc7      	ldrb	r7, [r0, r7]
 8008be4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008be8:	4637      	mov	r7, r6
 8008bea:	42bb      	cmp	r3, r7
 8008bec:	460e      	mov	r6, r1
 8008bee:	d9f4      	bls.n	8008bda <_printf_i+0x11a>
 8008bf0:	2b08      	cmp	r3, #8
 8008bf2:	d10b      	bne.n	8008c0c <_printf_i+0x14c>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	07de      	lsls	r6, r3, #31
 8008bf8:	d508      	bpl.n	8008c0c <_printf_i+0x14c>
 8008bfa:	6923      	ldr	r3, [r4, #16]
 8008bfc:	6861      	ldr	r1, [r4, #4]
 8008bfe:	4299      	cmp	r1, r3
 8008c00:	bfde      	ittt	le
 8008c02:	2330      	movle	r3, #48	; 0x30
 8008c04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c0c:	1b52      	subs	r2, r2, r5
 8008c0e:	6122      	str	r2, [r4, #16]
 8008c10:	f8cd a000 	str.w	sl, [sp]
 8008c14:	464b      	mov	r3, r9
 8008c16:	aa03      	add	r2, sp, #12
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	f7ff fee2 	bl	80089e4 <_printf_common>
 8008c20:	3001      	adds	r0, #1
 8008c22:	d14c      	bne.n	8008cbe <_printf_i+0x1fe>
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	b004      	add	sp, #16
 8008c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2e:	4835      	ldr	r0, [pc, #212]	; (8008d04 <_printf_i+0x244>)
 8008c30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c34:	6829      	ldr	r1, [r5, #0]
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c3c:	6029      	str	r1, [r5, #0]
 8008c3e:	061d      	lsls	r5, r3, #24
 8008c40:	d514      	bpl.n	8008c6c <_printf_i+0x1ac>
 8008c42:	07df      	lsls	r7, r3, #31
 8008c44:	bf44      	itt	mi
 8008c46:	f043 0320 	orrmi.w	r3, r3, #32
 8008c4a:	6023      	strmi	r3, [r4, #0]
 8008c4c:	b91e      	cbnz	r6, 8008c56 <_printf_i+0x196>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	f023 0320 	bic.w	r3, r3, #32
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	2310      	movs	r3, #16
 8008c58:	e7b0      	b.n	8008bbc <_printf_i+0xfc>
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	f043 0320 	orr.w	r3, r3, #32
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	2378      	movs	r3, #120	; 0x78
 8008c64:	4828      	ldr	r0, [pc, #160]	; (8008d08 <_printf_i+0x248>)
 8008c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c6a:	e7e3      	b.n	8008c34 <_printf_i+0x174>
 8008c6c:	0659      	lsls	r1, r3, #25
 8008c6e:	bf48      	it	mi
 8008c70:	b2b6      	uxthmi	r6, r6
 8008c72:	e7e6      	b.n	8008c42 <_printf_i+0x182>
 8008c74:	4615      	mov	r5, r2
 8008c76:	e7bb      	b.n	8008bf0 <_printf_i+0x130>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	6826      	ldr	r6, [r4, #0]
 8008c7c:	6961      	ldr	r1, [r4, #20]
 8008c7e:	1d18      	adds	r0, r3, #4
 8008c80:	6028      	str	r0, [r5, #0]
 8008c82:	0635      	lsls	r5, r6, #24
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	d501      	bpl.n	8008c8c <_printf_i+0x1cc>
 8008c88:	6019      	str	r1, [r3, #0]
 8008c8a:	e002      	b.n	8008c92 <_printf_i+0x1d2>
 8008c8c:	0670      	lsls	r0, r6, #25
 8008c8e:	d5fb      	bpl.n	8008c88 <_printf_i+0x1c8>
 8008c90:	8019      	strh	r1, [r3, #0]
 8008c92:	2300      	movs	r3, #0
 8008c94:	6123      	str	r3, [r4, #16]
 8008c96:	4615      	mov	r5, r2
 8008c98:	e7ba      	b.n	8008c10 <_printf_i+0x150>
 8008c9a:	682b      	ldr	r3, [r5, #0]
 8008c9c:	1d1a      	adds	r2, r3, #4
 8008c9e:	602a      	str	r2, [r5, #0]
 8008ca0:	681d      	ldr	r5, [r3, #0]
 8008ca2:	6862      	ldr	r2, [r4, #4]
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f7f7 fa9a 	bl	80001e0 <memchr>
 8008cac:	b108      	cbz	r0, 8008cb2 <_printf_i+0x1f2>
 8008cae:	1b40      	subs	r0, r0, r5
 8008cb0:	6060      	str	r0, [r4, #4]
 8008cb2:	6863      	ldr	r3, [r4, #4]
 8008cb4:	6123      	str	r3, [r4, #16]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cbc:	e7a8      	b.n	8008c10 <_printf_i+0x150>
 8008cbe:	6923      	ldr	r3, [r4, #16]
 8008cc0:	462a      	mov	r2, r5
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	47d0      	blx	sl
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d0ab      	beq.n	8008c24 <_printf_i+0x164>
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	079b      	lsls	r3, r3, #30
 8008cd0:	d413      	bmi.n	8008cfa <_printf_i+0x23a>
 8008cd2:	68e0      	ldr	r0, [r4, #12]
 8008cd4:	9b03      	ldr	r3, [sp, #12]
 8008cd6:	4298      	cmp	r0, r3
 8008cd8:	bfb8      	it	lt
 8008cda:	4618      	movlt	r0, r3
 8008cdc:	e7a4      	b.n	8008c28 <_printf_i+0x168>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4632      	mov	r2, r6
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	47d0      	blx	sl
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d09b      	beq.n	8008c24 <_printf_i+0x164>
 8008cec:	3501      	adds	r5, #1
 8008cee:	68e3      	ldr	r3, [r4, #12]
 8008cf0:	9903      	ldr	r1, [sp, #12]
 8008cf2:	1a5b      	subs	r3, r3, r1
 8008cf4:	42ab      	cmp	r3, r5
 8008cf6:	dcf2      	bgt.n	8008cde <_printf_i+0x21e>
 8008cf8:	e7eb      	b.n	8008cd2 <_printf_i+0x212>
 8008cfa:	2500      	movs	r5, #0
 8008cfc:	f104 0619 	add.w	r6, r4, #25
 8008d00:	e7f5      	b.n	8008cee <_printf_i+0x22e>
 8008d02:	bf00      	nop
 8008d04:	0800de32 	.word	0x0800de32
 8008d08:	0800de43 	.word	0x0800de43

08008d0c <_scanf_float>:
 8008d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	b087      	sub	sp, #28
 8008d12:	4617      	mov	r7, r2
 8008d14:	9303      	str	r3, [sp, #12]
 8008d16:	688b      	ldr	r3, [r1, #8]
 8008d18:	1e5a      	subs	r2, r3, #1
 8008d1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d1e:	bf83      	ittte	hi
 8008d20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d24:	195b      	addhi	r3, r3, r5
 8008d26:	9302      	strhi	r3, [sp, #8]
 8008d28:	2300      	movls	r3, #0
 8008d2a:	bf86      	itte	hi
 8008d2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d30:	608b      	strhi	r3, [r1, #8]
 8008d32:	9302      	strls	r3, [sp, #8]
 8008d34:	680b      	ldr	r3, [r1, #0]
 8008d36:	468b      	mov	fp, r1
 8008d38:	2500      	movs	r5, #0
 8008d3a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008d3e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008d42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008d46:	4680      	mov	r8, r0
 8008d48:	460c      	mov	r4, r1
 8008d4a:	465e      	mov	r6, fp
 8008d4c:	46aa      	mov	sl, r5
 8008d4e:	46a9      	mov	r9, r5
 8008d50:	9501      	str	r5, [sp, #4]
 8008d52:	68a2      	ldr	r2, [r4, #8]
 8008d54:	b152      	cbz	r2, 8008d6c <_scanf_float+0x60>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b4e      	cmp	r3, #78	; 0x4e
 8008d5c:	d864      	bhi.n	8008e28 <_scanf_float+0x11c>
 8008d5e:	2b40      	cmp	r3, #64	; 0x40
 8008d60:	d83c      	bhi.n	8008ddc <_scanf_float+0xd0>
 8008d62:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008d66:	b2c8      	uxtb	r0, r1
 8008d68:	280e      	cmp	r0, #14
 8008d6a:	d93a      	bls.n	8008de2 <_scanf_float+0xd6>
 8008d6c:	f1b9 0f00 	cmp.w	r9, #0
 8008d70:	d003      	beq.n	8008d7a <_scanf_float+0x6e>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d7e:	f1ba 0f01 	cmp.w	sl, #1
 8008d82:	f200 8113 	bhi.w	8008fac <_scanf_float+0x2a0>
 8008d86:	455e      	cmp	r6, fp
 8008d88:	f200 8105 	bhi.w	8008f96 <_scanf_float+0x28a>
 8008d8c:	2501      	movs	r5, #1
 8008d8e:	4628      	mov	r0, r5
 8008d90:	b007      	add	sp, #28
 8008d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d96:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008d9a:	2a0d      	cmp	r2, #13
 8008d9c:	d8e6      	bhi.n	8008d6c <_scanf_float+0x60>
 8008d9e:	a101      	add	r1, pc, #4	; (adr r1, 8008da4 <_scanf_float+0x98>)
 8008da0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008da4:	08008ee3 	.word	0x08008ee3
 8008da8:	08008d6d 	.word	0x08008d6d
 8008dac:	08008d6d 	.word	0x08008d6d
 8008db0:	08008d6d 	.word	0x08008d6d
 8008db4:	08008f43 	.word	0x08008f43
 8008db8:	08008f1b 	.word	0x08008f1b
 8008dbc:	08008d6d 	.word	0x08008d6d
 8008dc0:	08008d6d 	.word	0x08008d6d
 8008dc4:	08008ef1 	.word	0x08008ef1
 8008dc8:	08008d6d 	.word	0x08008d6d
 8008dcc:	08008d6d 	.word	0x08008d6d
 8008dd0:	08008d6d 	.word	0x08008d6d
 8008dd4:	08008d6d 	.word	0x08008d6d
 8008dd8:	08008ea9 	.word	0x08008ea9
 8008ddc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008de0:	e7db      	b.n	8008d9a <_scanf_float+0x8e>
 8008de2:	290e      	cmp	r1, #14
 8008de4:	d8c2      	bhi.n	8008d6c <_scanf_float+0x60>
 8008de6:	a001      	add	r0, pc, #4	; (adr r0, 8008dec <_scanf_float+0xe0>)
 8008de8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008dec:	08008e9b 	.word	0x08008e9b
 8008df0:	08008d6d 	.word	0x08008d6d
 8008df4:	08008e9b 	.word	0x08008e9b
 8008df8:	08008f2f 	.word	0x08008f2f
 8008dfc:	08008d6d 	.word	0x08008d6d
 8008e00:	08008e49 	.word	0x08008e49
 8008e04:	08008e85 	.word	0x08008e85
 8008e08:	08008e85 	.word	0x08008e85
 8008e0c:	08008e85 	.word	0x08008e85
 8008e10:	08008e85 	.word	0x08008e85
 8008e14:	08008e85 	.word	0x08008e85
 8008e18:	08008e85 	.word	0x08008e85
 8008e1c:	08008e85 	.word	0x08008e85
 8008e20:	08008e85 	.word	0x08008e85
 8008e24:	08008e85 	.word	0x08008e85
 8008e28:	2b6e      	cmp	r3, #110	; 0x6e
 8008e2a:	d809      	bhi.n	8008e40 <_scanf_float+0x134>
 8008e2c:	2b60      	cmp	r3, #96	; 0x60
 8008e2e:	d8b2      	bhi.n	8008d96 <_scanf_float+0x8a>
 8008e30:	2b54      	cmp	r3, #84	; 0x54
 8008e32:	d077      	beq.n	8008f24 <_scanf_float+0x218>
 8008e34:	2b59      	cmp	r3, #89	; 0x59
 8008e36:	d199      	bne.n	8008d6c <_scanf_float+0x60>
 8008e38:	2d07      	cmp	r5, #7
 8008e3a:	d197      	bne.n	8008d6c <_scanf_float+0x60>
 8008e3c:	2508      	movs	r5, #8
 8008e3e:	e029      	b.n	8008e94 <_scanf_float+0x188>
 8008e40:	2b74      	cmp	r3, #116	; 0x74
 8008e42:	d06f      	beq.n	8008f24 <_scanf_float+0x218>
 8008e44:	2b79      	cmp	r3, #121	; 0x79
 8008e46:	e7f6      	b.n	8008e36 <_scanf_float+0x12a>
 8008e48:	6821      	ldr	r1, [r4, #0]
 8008e4a:	05c8      	lsls	r0, r1, #23
 8008e4c:	d51a      	bpl.n	8008e84 <_scanf_float+0x178>
 8008e4e:	9b02      	ldr	r3, [sp, #8]
 8008e50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e54:	6021      	str	r1, [r4, #0]
 8008e56:	f109 0901 	add.w	r9, r9, #1
 8008e5a:	b11b      	cbz	r3, 8008e64 <_scanf_float+0x158>
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	3201      	adds	r2, #1
 8008e60:	9302      	str	r3, [sp, #8]
 8008e62:	60a2      	str	r2, [r4, #8]
 8008e64:	68a3      	ldr	r3, [r4, #8]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	60a3      	str	r3, [r4, #8]
 8008e6a:	6923      	ldr	r3, [r4, #16]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	6123      	str	r3, [r4, #16]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3b01      	subs	r3, #1
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	607b      	str	r3, [r7, #4]
 8008e78:	f340 8084 	ble.w	8008f84 <_scanf_float+0x278>
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	603b      	str	r3, [r7, #0]
 8008e82:	e766      	b.n	8008d52 <_scanf_float+0x46>
 8008e84:	eb1a 0f05 	cmn.w	sl, r5
 8008e88:	f47f af70 	bne.w	8008d6c <_scanf_float+0x60>
 8008e8c:	6822      	ldr	r2, [r4, #0]
 8008e8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008e92:	6022      	str	r2, [r4, #0]
 8008e94:	f806 3b01 	strb.w	r3, [r6], #1
 8008e98:	e7e4      	b.n	8008e64 <_scanf_float+0x158>
 8008e9a:	6822      	ldr	r2, [r4, #0]
 8008e9c:	0610      	lsls	r0, r2, #24
 8008e9e:	f57f af65 	bpl.w	8008d6c <_scanf_float+0x60>
 8008ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ea6:	e7f4      	b.n	8008e92 <_scanf_float+0x186>
 8008ea8:	f1ba 0f00 	cmp.w	sl, #0
 8008eac:	d10e      	bne.n	8008ecc <_scanf_float+0x1c0>
 8008eae:	f1b9 0f00 	cmp.w	r9, #0
 8008eb2:	d10e      	bne.n	8008ed2 <_scanf_float+0x1c6>
 8008eb4:	6822      	ldr	r2, [r4, #0]
 8008eb6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008eba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ebe:	d108      	bne.n	8008ed2 <_scanf_float+0x1c6>
 8008ec0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ec4:	6022      	str	r2, [r4, #0]
 8008ec6:	f04f 0a01 	mov.w	sl, #1
 8008eca:	e7e3      	b.n	8008e94 <_scanf_float+0x188>
 8008ecc:	f1ba 0f02 	cmp.w	sl, #2
 8008ed0:	d055      	beq.n	8008f7e <_scanf_float+0x272>
 8008ed2:	2d01      	cmp	r5, #1
 8008ed4:	d002      	beq.n	8008edc <_scanf_float+0x1d0>
 8008ed6:	2d04      	cmp	r5, #4
 8008ed8:	f47f af48 	bne.w	8008d6c <_scanf_float+0x60>
 8008edc:	3501      	adds	r5, #1
 8008ede:	b2ed      	uxtb	r5, r5
 8008ee0:	e7d8      	b.n	8008e94 <_scanf_float+0x188>
 8008ee2:	f1ba 0f01 	cmp.w	sl, #1
 8008ee6:	f47f af41 	bne.w	8008d6c <_scanf_float+0x60>
 8008eea:	f04f 0a02 	mov.w	sl, #2
 8008eee:	e7d1      	b.n	8008e94 <_scanf_float+0x188>
 8008ef0:	b97d      	cbnz	r5, 8008f12 <_scanf_float+0x206>
 8008ef2:	f1b9 0f00 	cmp.w	r9, #0
 8008ef6:	f47f af3c 	bne.w	8008d72 <_scanf_float+0x66>
 8008efa:	6822      	ldr	r2, [r4, #0]
 8008efc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f04:	f47f af39 	bne.w	8008d7a <_scanf_float+0x6e>
 8008f08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f0c:	6022      	str	r2, [r4, #0]
 8008f0e:	2501      	movs	r5, #1
 8008f10:	e7c0      	b.n	8008e94 <_scanf_float+0x188>
 8008f12:	2d03      	cmp	r5, #3
 8008f14:	d0e2      	beq.n	8008edc <_scanf_float+0x1d0>
 8008f16:	2d05      	cmp	r5, #5
 8008f18:	e7de      	b.n	8008ed8 <_scanf_float+0x1cc>
 8008f1a:	2d02      	cmp	r5, #2
 8008f1c:	f47f af26 	bne.w	8008d6c <_scanf_float+0x60>
 8008f20:	2503      	movs	r5, #3
 8008f22:	e7b7      	b.n	8008e94 <_scanf_float+0x188>
 8008f24:	2d06      	cmp	r5, #6
 8008f26:	f47f af21 	bne.w	8008d6c <_scanf_float+0x60>
 8008f2a:	2507      	movs	r5, #7
 8008f2c:	e7b2      	b.n	8008e94 <_scanf_float+0x188>
 8008f2e:	6822      	ldr	r2, [r4, #0]
 8008f30:	0591      	lsls	r1, r2, #22
 8008f32:	f57f af1b 	bpl.w	8008d6c <_scanf_float+0x60>
 8008f36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008f3a:	6022      	str	r2, [r4, #0]
 8008f3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f40:	e7a8      	b.n	8008e94 <_scanf_float+0x188>
 8008f42:	6822      	ldr	r2, [r4, #0]
 8008f44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008f48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008f4c:	d006      	beq.n	8008f5c <_scanf_float+0x250>
 8008f4e:	0550      	lsls	r0, r2, #21
 8008f50:	f57f af0c 	bpl.w	8008d6c <_scanf_float+0x60>
 8008f54:	f1b9 0f00 	cmp.w	r9, #0
 8008f58:	f43f af0f 	beq.w	8008d7a <_scanf_float+0x6e>
 8008f5c:	0591      	lsls	r1, r2, #22
 8008f5e:	bf58      	it	pl
 8008f60:	9901      	ldrpl	r1, [sp, #4]
 8008f62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f66:	bf58      	it	pl
 8008f68:	eba9 0101 	subpl.w	r1, r9, r1
 8008f6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008f70:	bf58      	it	pl
 8008f72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f76:	6022      	str	r2, [r4, #0]
 8008f78:	f04f 0900 	mov.w	r9, #0
 8008f7c:	e78a      	b.n	8008e94 <_scanf_float+0x188>
 8008f7e:	f04f 0a03 	mov.w	sl, #3
 8008f82:	e787      	b.n	8008e94 <_scanf_float+0x188>
 8008f84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f88:	4639      	mov	r1, r7
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	4798      	blx	r3
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f43f aedf 	beq.w	8008d52 <_scanf_float+0x46>
 8008f94:	e6ea      	b.n	8008d6c <_scanf_float+0x60>
 8008f96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f9e:	463a      	mov	r2, r7
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	4798      	blx	r3
 8008fa4:	6923      	ldr	r3, [r4, #16]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	6123      	str	r3, [r4, #16]
 8008faa:	e6ec      	b.n	8008d86 <_scanf_float+0x7a>
 8008fac:	1e6b      	subs	r3, r5, #1
 8008fae:	2b06      	cmp	r3, #6
 8008fb0:	d825      	bhi.n	8008ffe <_scanf_float+0x2f2>
 8008fb2:	2d02      	cmp	r5, #2
 8008fb4:	d836      	bhi.n	8009024 <_scanf_float+0x318>
 8008fb6:	455e      	cmp	r6, fp
 8008fb8:	f67f aee8 	bls.w	8008d8c <_scanf_float+0x80>
 8008fbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fc0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fc4:	463a      	mov	r2, r7
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	4798      	blx	r3
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	6123      	str	r3, [r4, #16]
 8008fd0:	e7f1      	b.n	8008fb6 <_scanf_float+0x2aa>
 8008fd2:	9802      	ldr	r0, [sp, #8]
 8008fd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fd8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008fdc:	9002      	str	r0, [sp, #8]
 8008fde:	463a      	mov	r2, r7
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	4798      	blx	r3
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	6123      	str	r3, [r4, #16]
 8008fea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fee:	fa5f fa8a 	uxtb.w	sl, sl
 8008ff2:	f1ba 0f02 	cmp.w	sl, #2
 8008ff6:	d1ec      	bne.n	8008fd2 <_scanf_float+0x2c6>
 8008ff8:	3d03      	subs	r5, #3
 8008ffa:	b2ed      	uxtb	r5, r5
 8008ffc:	1b76      	subs	r6, r6, r5
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	05da      	lsls	r2, r3, #23
 8009002:	d52f      	bpl.n	8009064 <_scanf_float+0x358>
 8009004:	055b      	lsls	r3, r3, #21
 8009006:	d510      	bpl.n	800902a <_scanf_float+0x31e>
 8009008:	455e      	cmp	r6, fp
 800900a:	f67f aebf 	bls.w	8008d8c <_scanf_float+0x80>
 800900e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009012:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009016:	463a      	mov	r2, r7
 8009018:	4640      	mov	r0, r8
 800901a:	4798      	blx	r3
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	3b01      	subs	r3, #1
 8009020:	6123      	str	r3, [r4, #16]
 8009022:	e7f1      	b.n	8009008 <_scanf_float+0x2fc>
 8009024:	46aa      	mov	sl, r5
 8009026:	9602      	str	r6, [sp, #8]
 8009028:	e7df      	b.n	8008fea <_scanf_float+0x2de>
 800902a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800902e:	6923      	ldr	r3, [r4, #16]
 8009030:	2965      	cmp	r1, #101	; 0x65
 8009032:	f103 33ff 	add.w	r3, r3, #4294967295
 8009036:	f106 35ff 	add.w	r5, r6, #4294967295
 800903a:	6123      	str	r3, [r4, #16]
 800903c:	d00c      	beq.n	8009058 <_scanf_float+0x34c>
 800903e:	2945      	cmp	r1, #69	; 0x45
 8009040:	d00a      	beq.n	8009058 <_scanf_float+0x34c>
 8009042:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009046:	463a      	mov	r2, r7
 8009048:	4640      	mov	r0, r8
 800904a:	4798      	blx	r3
 800904c:	6923      	ldr	r3, [r4, #16]
 800904e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009052:	3b01      	subs	r3, #1
 8009054:	1eb5      	subs	r5, r6, #2
 8009056:	6123      	str	r3, [r4, #16]
 8009058:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800905c:	463a      	mov	r2, r7
 800905e:	4640      	mov	r0, r8
 8009060:	4798      	blx	r3
 8009062:	462e      	mov	r6, r5
 8009064:	6825      	ldr	r5, [r4, #0]
 8009066:	f015 0510 	ands.w	r5, r5, #16
 800906a:	d159      	bne.n	8009120 <_scanf_float+0x414>
 800906c:	7035      	strb	r5, [r6, #0]
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009078:	d11b      	bne.n	80090b2 <_scanf_float+0x3a6>
 800907a:	9b01      	ldr	r3, [sp, #4]
 800907c:	454b      	cmp	r3, r9
 800907e:	eba3 0209 	sub.w	r2, r3, r9
 8009082:	d123      	bne.n	80090cc <_scanf_float+0x3c0>
 8009084:	2200      	movs	r2, #0
 8009086:	4659      	mov	r1, fp
 8009088:	4640      	mov	r0, r8
 800908a:	f000 fe97 	bl	8009dbc <_strtod_r>
 800908e:	6822      	ldr	r2, [r4, #0]
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	f012 0f02 	tst.w	r2, #2
 8009096:	ec57 6b10 	vmov	r6, r7, d0
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	d021      	beq.n	80090e2 <_scanf_float+0x3d6>
 800909e:	9903      	ldr	r1, [sp, #12]
 80090a0:	1d1a      	adds	r2, r3, #4
 80090a2:	600a      	str	r2, [r1, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	e9c3 6700 	strd	r6, r7, [r3]
 80090aa:	68e3      	ldr	r3, [r4, #12]
 80090ac:	3301      	adds	r3, #1
 80090ae:	60e3      	str	r3, [r4, #12]
 80090b0:	e66d      	b.n	8008d8e <_scanf_float+0x82>
 80090b2:	9b04      	ldr	r3, [sp, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0e5      	beq.n	8009084 <_scanf_float+0x378>
 80090b8:	9905      	ldr	r1, [sp, #20]
 80090ba:	230a      	movs	r3, #10
 80090bc:	462a      	mov	r2, r5
 80090be:	3101      	adds	r1, #1
 80090c0:	4640      	mov	r0, r8
 80090c2:	f000 ff03 	bl	8009ecc <_strtol_r>
 80090c6:	9b04      	ldr	r3, [sp, #16]
 80090c8:	9e05      	ldr	r6, [sp, #20]
 80090ca:	1ac2      	subs	r2, r0, r3
 80090cc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80090d0:	429e      	cmp	r6, r3
 80090d2:	bf28      	it	cs
 80090d4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80090d8:	4912      	ldr	r1, [pc, #72]	; (8009124 <_scanf_float+0x418>)
 80090da:	4630      	mov	r0, r6
 80090dc:	f000 f82c 	bl	8009138 <siprintf>
 80090e0:	e7d0      	b.n	8009084 <_scanf_float+0x378>
 80090e2:	9903      	ldr	r1, [sp, #12]
 80090e4:	f012 0f04 	tst.w	r2, #4
 80090e8:	f103 0204 	add.w	r2, r3, #4
 80090ec:	600a      	str	r2, [r1, #0]
 80090ee:	d1d9      	bne.n	80090a4 <_scanf_float+0x398>
 80090f0:	f8d3 8000 	ldr.w	r8, [r3]
 80090f4:	ee10 2a10 	vmov	r2, s0
 80090f8:	ee10 0a10 	vmov	r0, s0
 80090fc:	463b      	mov	r3, r7
 80090fe:	4639      	mov	r1, r7
 8009100:	f7f7 fd14 	bl	8000b2c <__aeabi_dcmpun>
 8009104:	b128      	cbz	r0, 8009112 <_scanf_float+0x406>
 8009106:	4808      	ldr	r0, [pc, #32]	; (8009128 <_scanf_float+0x41c>)
 8009108:	f000 f810 	bl	800912c <nanf>
 800910c:	ed88 0a00 	vstr	s0, [r8]
 8009110:	e7cb      	b.n	80090aa <_scanf_float+0x39e>
 8009112:	4630      	mov	r0, r6
 8009114:	4639      	mov	r1, r7
 8009116:	f7f7 fd67 	bl	8000be8 <__aeabi_d2f>
 800911a:	f8c8 0000 	str.w	r0, [r8]
 800911e:	e7c4      	b.n	80090aa <_scanf_float+0x39e>
 8009120:	2500      	movs	r5, #0
 8009122:	e634      	b.n	8008d8e <_scanf_float+0x82>
 8009124:	0800de54 	.word	0x0800de54
 8009128:	0800e260 	.word	0x0800e260

0800912c <nanf>:
 800912c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009134 <nanf+0x8>
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	7fc00000 	.word	0x7fc00000

08009138 <siprintf>:
 8009138:	b40e      	push	{r1, r2, r3}
 800913a:	b500      	push	{lr}
 800913c:	b09c      	sub	sp, #112	; 0x70
 800913e:	ab1d      	add	r3, sp, #116	; 0x74
 8009140:	9002      	str	r0, [sp, #8]
 8009142:	9006      	str	r0, [sp, #24]
 8009144:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009148:	4809      	ldr	r0, [pc, #36]	; (8009170 <siprintf+0x38>)
 800914a:	9107      	str	r1, [sp, #28]
 800914c:	9104      	str	r1, [sp, #16]
 800914e:	4909      	ldr	r1, [pc, #36]	; (8009174 <siprintf+0x3c>)
 8009150:	f853 2b04 	ldr.w	r2, [r3], #4
 8009154:	9105      	str	r1, [sp, #20]
 8009156:	6800      	ldr	r0, [r0, #0]
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	a902      	add	r1, sp, #8
 800915c:	f002 fee2 	bl	800bf24 <_svfiprintf_r>
 8009160:	9b02      	ldr	r3, [sp, #8]
 8009162:	2200      	movs	r2, #0
 8009164:	701a      	strb	r2, [r3, #0]
 8009166:	b01c      	add	sp, #112	; 0x70
 8009168:	f85d eb04 	ldr.w	lr, [sp], #4
 800916c:	b003      	add	sp, #12
 800916e:	4770      	bx	lr
 8009170:	200000fc 	.word	0x200000fc
 8009174:	ffff0208 	.word	0xffff0208

08009178 <sulp>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	4604      	mov	r4, r0
 800917c:	460d      	mov	r5, r1
 800917e:	ec45 4b10 	vmov	d0, r4, r5
 8009182:	4616      	mov	r6, r2
 8009184:	f002 fc2c 	bl	800b9e0 <__ulp>
 8009188:	ec51 0b10 	vmov	r0, r1, d0
 800918c:	b17e      	cbz	r6, 80091ae <sulp+0x36>
 800918e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009192:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009196:	2b00      	cmp	r3, #0
 8009198:	dd09      	ble.n	80091ae <sulp+0x36>
 800919a:	051b      	lsls	r3, r3, #20
 800919c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80091a0:	2400      	movs	r4, #0
 80091a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80091a6:	4622      	mov	r2, r4
 80091a8:	462b      	mov	r3, r5
 80091aa:	f7f7 fa25 	bl	80005f8 <__aeabi_dmul>
 80091ae:	bd70      	pop	{r4, r5, r6, pc}

080091b0 <_strtod_l>:
 80091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	ed2d 8b02 	vpush	{d8}
 80091b8:	b09d      	sub	sp, #116	; 0x74
 80091ba:	461f      	mov	r7, r3
 80091bc:	2300      	movs	r3, #0
 80091be:	9318      	str	r3, [sp, #96]	; 0x60
 80091c0:	4ba2      	ldr	r3, [pc, #648]	; (800944c <_strtod_l+0x29c>)
 80091c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	9305      	str	r3, [sp, #20]
 80091c8:	4604      	mov	r4, r0
 80091ca:	4618      	mov	r0, r3
 80091cc:	4688      	mov	r8, r1
 80091ce:	f7f6 ffff 	bl	80001d0 <strlen>
 80091d2:	f04f 0a00 	mov.w	sl, #0
 80091d6:	4605      	mov	r5, r0
 80091d8:	f04f 0b00 	mov.w	fp, #0
 80091dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80091e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091e2:	781a      	ldrb	r2, [r3, #0]
 80091e4:	2a2b      	cmp	r2, #43	; 0x2b
 80091e6:	d04e      	beq.n	8009286 <_strtod_l+0xd6>
 80091e8:	d83b      	bhi.n	8009262 <_strtod_l+0xb2>
 80091ea:	2a0d      	cmp	r2, #13
 80091ec:	d834      	bhi.n	8009258 <_strtod_l+0xa8>
 80091ee:	2a08      	cmp	r2, #8
 80091f0:	d834      	bhi.n	800925c <_strtod_l+0xac>
 80091f2:	2a00      	cmp	r2, #0
 80091f4:	d03e      	beq.n	8009274 <_strtod_l+0xc4>
 80091f6:	2300      	movs	r3, #0
 80091f8:	930a      	str	r3, [sp, #40]	; 0x28
 80091fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80091fc:	7833      	ldrb	r3, [r6, #0]
 80091fe:	2b30      	cmp	r3, #48	; 0x30
 8009200:	f040 80b0 	bne.w	8009364 <_strtod_l+0x1b4>
 8009204:	7873      	ldrb	r3, [r6, #1]
 8009206:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800920a:	2b58      	cmp	r3, #88	; 0x58
 800920c:	d168      	bne.n	80092e0 <_strtod_l+0x130>
 800920e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	ab18      	add	r3, sp, #96	; 0x60
 8009214:	9702      	str	r7, [sp, #8]
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	4a8d      	ldr	r2, [pc, #564]	; (8009450 <_strtod_l+0x2a0>)
 800921a:	ab19      	add	r3, sp, #100	; 0x64
 800921c:	a917      	add	r1, sp, #92	; 0x5c
 800921e:	4620      	mov	r0, r4
 8009220:	f001 fd38 	bl	800ac94 <__gethex>
 8009224:	f010 0707 	ands.w	r7, r0, #7
 8009228:	4605      	mov	r5, r0
 800922a:	d005      	beq.n	8009238 <_strtod_l+0x88>
 800922c:	2f06      	cmp	r7, #6
 800922e:	d12c      	bne.n	800928a <_strtod_l+0xda>
 8009230:	3601      	adds	r6, #1
 8009232:	2300      	movs	r3, #0
 8009234:	9617      	str	r6, [sp, #92]	; 0x5c
 8009236:	930a      	str	r3, [sp, #40]	; 0x28
 8009238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800923a:	2b00      	cmp	r3, #0
 800923c:	f040 8590 	bne.w	8009d60 <_strtod_l+0xbb0>
 8009240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009242:	b1eb      	cbz	r3, 8009280 <_strtod_l+0xd0>
 8009244:	4652      	mov	r2, sl
 8009246:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800924a:	ec43 2b10 	vmov	d0, r2, r3
 800924e:	b01d      	add	sp, #116	; 0x74
 8009250:	ecbd 8b02 	vpop	{d8}
 8009254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009258:	2a20      	cmp	r2, #32
 800925a:	d1cc      	bne.n	80091f6 <_strtod_l+0x46>
 800925c:	3301      	adds	r3, #1
 800925e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009260:	e7be      	b.n	80091e0 <_strtod_l+0x30>
 8009262:	2a2d      	cmp	r2, #45	; 0x2d
 8009264:	d1c7      	bne.n	80091f6 <_strtod_l+0x46>
 8009266:	2201      	movs	r2, #1
 8009268:	920a      	str	r2, [sp, #40]	; 0x28
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	9217      	str	r2, [sp, #92]	; 0x5c
 800926e:	785b      	ldrb	r3, [r3, #1]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1c2      	bne.n	80091fa <_strtod_l+0x4a>
 8009274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009276:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800927a:	2b00      	cmp	r3, #0
 800927c:	f040 856e 	bne.w	8009d5c <_strtod_l+0xbac>
 8009280:	4652      	mov	r2, sl
 8009282:	465b      	mov	r3, fp
 8009284:	e7e1      	b.n	800924a <_strtod_l+0x9a>
 8009286:	2200      	movs	r2, #0
 8009288:	e7ee      	b.n	8009268 <_strtod_l+0xb8>
 800928a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800928c:	b13a      	cbz	r2, 800929e <_strtod_l+0xee>
 800928e:	2135      	movs	r1, #53	; 0x35
 8009290:	a81a      	add	r0, sp, #104	; 0x68
 8009292:	f002 fcb0 	bl	800bbf6 <__copybits>
 8009296:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009298:	4620      	mov	r0, r4
 800929a:	f002 f86f 	bl	800b37c <_Bfree>
 800929e:	3f01      	subs	r7, #1
 80092a0:	2f04      	cmp	r7, #4
 80092a2:	d806      	bhi.n	80092b2 <_strtod_l+0x102>
 80092a4:	e8df f007 	tbb	[pc, r7]
 80092a8:	1714030a 	.word	0x1714030a
 80092ac:	0a          	.byte	0x0a
 80092ad:	00          	.byte	0x00
 80092ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80092b2:	0728      	lsls	r0, r5, #28
 80092b4:	d5c0      	bpl.n	8009238 <_strtod_l+0x88>
 80092b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80092ba:	e7bd      	b.n	8009238 <_strtod_l+0x88>
 80092bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80092c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80092c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80092c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80092ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80092ce:	e7f0      	b.n	80092b2 <_strtod_l+0x102>
 80092d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009454 <_strtod_l+0x2a4>
 80092d4:	e7ed      	b.n	80092b2 <_strtod_l+0x102>
 80092d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80092da:	f04f 3aff 	mov.w	sl, #4294967295
 80092de:	e7e8      	b.n	80092b2 <_strtod_l+0x102>
 80092e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	2b30      	cmp	r3, #48	; 0x30
 80092ea:	d0f9      	beq.n	80092e0 <_strtod_l+0x130>
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d0a3      	beq.n	8009238 <_strtod_l+0x88>
 80092f0:	2301      	movs	r3, #1
 80092f2:	f04f 0900 	mov.w	r9, #0
 80092f6:	9304      	str	r3, [sp, #16]
 80092f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092fa:	9308      	str	r3, [sp, #32]
 80092fc:	f8cd 901c 	str.w	r9, [sp, #28]
 8009300:	464f      	mov	r7, r9
 8009302:	220a      	movs	r2, #10
 8009304:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009306:	7806      	ldrb	r6, [r0, #0]
 8009308:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800930c:	b2d9      	uxtb	r1, r3
 800930e:	2909      	cmp	r1, #9
 8009310:	d92a      	bls.n	8009368 <_strtod_l+0x1b8>
 8009312:	9905      	ldr	r1, [sp, #20]
 8009314:	462a      	mov	r2, r5
 8009316:	f002 ff1f 	bl	800c158 <strncmp>
 800931a:	b398      	cbz	r0, 8009384 <_strtod_l+0x1d4>
 800931c:	2000      	movs	r0, #0
 800931e:	4632      	mov	r2, r6
 8009320:	463d      	mov	r5, r7
 8009322:	9005      	str	r0, [sp, #20]
 8009324:	4603      	mov	r3, r0
 8009326:	2a65      	cmp	r2, #101	; 0x65
 8009328:	d001      	beq.n	800932e <_strtod_l+0x17e>
 800932a:	2a45      	cmp	r2, #69	; 0x45
 800932c:	d118      	bne.n	8009360 <_strtod_l+0x1b0>
 800932e:	b91d      	cbnz	r5, 8009338 <_strtod_l+0x188>
 8009330:	9a04      	ldr	r2, [sp, #16]
 8009332:	4302      	orrs	r2, r0
 8009334:	d09e      	beq.n	8009274 <_strtod_l+0xc4>
 8009336:	2500      	movs	r5, #0
 8009338:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800933c:	f108 0201 	add.w	r2, r8, #1
 8009340:	9217      	str	r2, [sp, #92]	; 0x5c
 8009342:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009346:	2a2b      	cmp	r2, #43	; 0x2b
 8009348:	d075      	beq.n	8009436 <_strtod_l+0x286>
 800934a:	2a2d      	cmp	r2, #45	; 0x2d
 800934c:	d07b      	beq.n	8009446 <_strtod_l+0x296>
 800934e:	f04f 0c00 	mov.w	ip, #0
 8009352:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009356:	2909      	cmp	r1, #9
 8009358:	f240 8082 	bls.w	8009460 <_strtod_l+0x2b0>
 800935c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009360:	2600      	movs	r6, #0
 8009362:	e09d      	b.n	80094a0 <_strtod_l+0x2f0>
 8009364:	2300      	movs	r3, #0
 8009366:	e7c4      	b.n	80092f2 <_strtod_l+0x142>
 8009368:	2f08      	cmp	r7, #8
 800936a:	bfd8      	it	le
 800936c:	9907      	ldrle	r1, [sp, #28]
 800936e:	f100 0001 	add.w	r0, r0, #1
 8009372:	bfda      	itte	le
 8009374:	fb02 3301 	mlale	r3, r2, r1, r3
 8009378:	9307      	strle	r3, [sp, #28]
 800937a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800937e:	3701      	adds	r7, #1
 8009380:	9017      	str	r0, [sp, #92]	; 0x5c
 8009382:	e7bf      	b.n	8009304 <_strtod_l+0x154>
 8009384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009386:	195a      	adds	r2, r3, r5
 8009388:	9217      	str	r2, [sp, #92]	; 0x5c
 800938a:	5d5a      	ldrb	r2, [r3, r5]
 800938c:	2f00      	cmp	r7, #0
 800938e:	d037      	beq.n	8009400 <_strtod_l+0x250>
 8009390:	9005      	str	r0, [sp, #20]
 8009392:	463d      	mov	r5, r7
 8009394:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009398:	2b09      	cmp	r3, #9
 800939a:	d912      	bls.n	80093c2 <_strtod_l+0x212>
 800939c:	2301      	movs	r3, #1
 800939e:	e7c2      	b.n	8009326 <_strtod_l+0x176>
 80093a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80093a6:	785a      	ldrb	r2, [r3, #1]
 80093a8:	3001      	adds	r0, #1
 80093aa:	2a30      	cmp	r2, #48	; 0x30
 80093ac:	d0f8      	beq.n	80093a0 <_strtod_l+0x1f0>
 80093ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80093b2:	2b08      	cmp	r3, #8
 80093b4:	f200 84d9 	bhi.w	8009d6a <_strtod_l+0xbba>
 80093b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093ba:	9005      	str	r0, [sp, #20]
 80093bc:	2000      	movs	r0, #0
 80093be:	9308      	str	r3, [sp, #32]
 80093c0:	4605      	mov	r5, r0
 80093c2:	3a30      	subs	r2, #48	; 0x30
 80093c4:	f100 0301 	add.w	r3, r0, #1
 80093c8:	d014      	beq.n	80093f4 <_strtod_l+0x244>
 80093ca:	9905      	ldr	r1, [sp, #20]
 80093cc:	4419      	add	r1, r3
 80093ce:	9105      	str	r1, [sp, #20]
 80093d0:	462b      	mov	r3, r5
 80093d2:	eb00 0e05 	add.w	lr, r0, r5
 80093d6:	210a      	movs	r1, #10
 80093d8:	4573      	cmp	r3, lr
 80093da:	d113      	bne.n	8009404 <_strtod_l+0x254>
 80093dc:	182b      	adds	r3, r5, r0
 80093de:	2b08      	cmp	r3, #8
 80093e0:	f105 0501 	add.w	r5, r5, #1
 80093e4:	4405      	add	r5, r0
 80093e6:	dc1c      	bgt.n	8009422 <_strtod_l+0x272>
 80093e8:	9907      	ldr	r1, [sp, #28]
 80093ea:	230a      	movs	r3, #10
 80093ec:	fb03 2301 	mla	r3, r3, r1, r2
 80093f0:	9307      	str	r3, [sp, #28]
 80093f2:	2300      	movs	r3, #0
 80093f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80093f6:	1c51      	adds	r1, r2, #1
 80093f8:	9117      	str	r1, [sp, #92]	; 0x5c
 80093fa:	7852      	ldrb	r2, [r2, #1]
 80093fc:	4618      	mov	r0, r3
 80093fe:	e7c9      	b.n	8009394 <_strtod_l+0x1e4>
 8009400:	4638      	mov	r0, r7
 8009402:	e7d2      	b.n	80093aa <_strtod_l+0x1fa>
 8009404:	2b08      	cmp	r3, #8
 8009406:	dc04      	bgt.n	8009412 <_strtod_l+0x262>
 8009408:	9e07      	ldr	r6, [sp, #28]
 800940a:	434e      	muls	r6, r1
 800940c:	9607      	str	r6, [sp, #28]
 800940e:	3301      	adds	r3, #1
 8009410:	e7e2      	b.n	80093d8 <_strtod_l+0x228>
 8009412:	f103 0c01 	add.w	ip, r3, #1
 8009416:	f1bc 0f10 	cmp.w	ip, #16
 800941a:	bfd8      	it	le
 800941c:	fb01 f909 	mulle.w	r9, r1, r9
 8009420:	e7f5      	b.n	800940e <_strtod_l+0x25e>
 8009422:	2d10      	cmp	r5, #16
 8009424:	bfdc      	itt	le
 8009426:	230a      	movle	r3, #10
 8009428:	fb03 2909 	mlale	r9, r3, r9, r2
 800942c:	e7e1      	b.n	80093f2 <_strtod_l+0x242>
 800942e:	2300      	movs	r3, #0
 8009430:	9305      	str	r3, [sp, #20]
 8009432:	2301      	movs	r3, #1
 8009434:	e77c      	b.n	8009330 <_strtod_l+0x180>
 8009436:	f04f 0c00 	mov.w	ip, #0
 800943a:	f108 0202 	add.w	r2, r8, #2
 800943e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009440:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009444:	e785      	b.n	8009352 <_strtod_l+0x1a2>
 8009446:	f04f 0c01 	mov.w	ip, #1
 800944a:	e7f6      	b.n	800943a <_strtod_l+0x28a>
 800944c:	0800e0a8 	.word	0x0800e0a8
 8009450:	0800de5c 	.word	0x0800de5c
 8009454:	7ff00000 	.word	0x7ff00000
 8009458:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800945a:	1c51      	adds	r1, r2, #1
 800945c:	9117      	str	r1, [sp, #92]	; 0x5c
 800945e:	7852      	ldrb	r2, [r2, #1]
 8009460:	2a30      	cmp	r2, #48	; 0x30
 8009462:	d0f9      	beq.n	8009458 <_strtod_l+0x2a8>
 8009464:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009468:	2908      	cmp	r1, #8
 800946a:	f63f af79 	bhi.w	8009360 <_strtod_l+0x1b0>
 800946e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009472:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009474:	9206      	str	r2, [sp, #24]
 8009476:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009478:	1c51      	adds	r1, r2, #1
 800947a:	9117      	str	r1, [sp, #92]	; 0x5c
 800947c:	7852      	ldrb	r2, [r2, #1]
 800947e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009482:	2e09      	cmp	r6, #9
 8009484:	d937      	bls.n	80094f6 <_strtod_l+0x346>
 8009486:	9e06      	ldr	r6, [sp, #24]
 8009488:	1b89      	subs	r1, r1, r6
 800948a:	2908      	cmp	r1, #8
 800948c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009490:	dc02      	bgt.n	8009498 <_strtod_l+0x2e8>
 8009492:	4576      	cmp	r6, lr
 8009494:	bfa8      	it	ge
 8009496:	4676      	movge	r6, lr
 8009498:	f1bc 0f00 	cmp.w	ip, #0
 800949c:	d000      	beq.n	80094a0 <_strtod_l+0x2f0>
 800949e:	4276      	negs	r6, r6
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	d14d      	bne.n	8009540 <_strtod_l+0x390>
 80094a4:	9904      	ldr	r1, [sp, #16]
 80094a6:	4301      	orrs	r1, r0
 80094a8:	f47f aec6 	bne.w	8009238 <_strtod_l+0x88>
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f47f aee1 	bne.w	8009274 <_strtod_l+0xc4>
 80094b2:	2a69      	cmp	r2, #105	; 0x69
 80094b4:	d027      	beq.n	8009506 <_strtod_l+0x356>
 80094b6:	dc24      	bgt.n	8009502 <_strtod_l+0x352>
 80094b8:	2a49      	cmp	r2, #73	; 0x49
 80094ba:	d024      	beq.n	8009506 <_strtod_l+0x356>
 80094bc:	2a4e      	cmp	r2, #78	; 0x4e
 80094be:	f47f aed9 	bne.w	8009274 <_strtod_l+0xc4>
 80094c2:	499f      	ldr	r1, [pc, #636]	; (8009740 <_strtod_l+0x590>)
 80094c4:	a817      	add	r0, sp, #92	; 0x5c
 80094c6:	f001 fe3d 	bl	800b144 <__match>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	f43f aed2 	beq.w	8009274 <_strtod_l+0xc4>
 80094d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	2b28      	cmp	r3, #40	; 0x28
 80094d6:	d12d      	bne.n	8009534 <_strtod_l+0x384>
 80094d8:	499a      	ldr	r1, [pc, #616]	; (8009744 <_strtod_l+0x594>)
 80094da:	aa1a      	add	r2, sp, #104	; 0x68
 80094dc:	a817      	add	r0, sp, #92	; 0x5c
 80094de:	f001 fe45 	bl	800b16c <__hexnan>
 80094e2:	2805      	cmp	r0, #5
 80094e4:	d126      	bne.n	8009534 <_strtod_l+0x384>
 80094e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80094ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80094f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80094f4:	e6a0      	b.n	8009238 <_strtod_l+0x88>
 80094f6:	210a      	movs	r1, #10
 80094f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80094fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009500:	e7b9      	b.n	8009476 <_strtod_l+0x2c6>
 8009502:	2a6e      	cmp	r2, #110	; 0x6e
 8009504:	e7db      	b.n	80094be <_strtod_l+0x30e>
 8009506:	4990      	ldr	r1, [pc, #576]	; (8009748 <_strtod_l+0x598>)
 8009508:	a817      	add	r0, sp, #92	; 0x5c
 800950a:	f001 fe1b 	bl	800b144 <__match>
 800950e:	2800      	cmp	r0, #0
 8009510:	f43f aeb0 	beq.w	8009274 <_strtod_l+0xc4>
 8009514:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009516:	498d      	ldr	r1, [pc, #564]	; (800974c <_strtod_l+0x59c>)
 8009518:	3b01      	subs	r3, #1
 800951a:	a817      	add	r0, sp, #92	; 0x5c
 800951c:	9317      	str	r3, [sp, #92]	; 0x5c
 800951e:	f001 fe11 	bl	800b144 <__match>
 8009522:	b910      	cbnz	r0, 800952a <_strtod_l+0x37a>
 8009524:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009526:	3301      	adds	r3, #1
 8009528:	9317      	str	r3, [sp, #92]	; 0x5c
 800952a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800975c <_strtod_l+0x5ac>
 800952e:	f04f 0a00 	mov.w	sl, #0
 8009532:	e681      	b.n	8009238 <_strtod_l+0x88>
 8009534:	4886      	ldr	r0, [pc, #536]	; (8009750 <_strtod_l+0x5a0>)
 8009536:	f002 fdf7 	bl	800c128 <nan>
 800953a:	ec5b ab10 	vmov	sl, fp, d0
 800953e:	e67b      	b.n	8009238 <_strtod_l+0x88>
 8009540:	9b05      	ldr	r3, [sp, #20]
 8009542:	9807      	ldr	r0, [sp, #28]
 8009544:	1af3      	subs	r3, r6, r3
 8009546:	2f00      	cmp	r7, #0
 8009548:	bf08      	it	eq
 800954a:	462f      	moveq	r7, r5
 800954c:	2d10      	cmp	r5, #16
 800954e:	9306      	str	r3, [sp, #24]
 8009550:	46a8      	mov	r8, r5
 8009552:	bfa8      	it	ge
 8009554:	f04f 0810 	movge.w	r8, #16
 8009558:	f7f6 ffd4 	bl	8000504 <__aeabi_ui2d>
 800955c:	2d09      	cmp	r5, #9
 800955e:	4682      	mov	sl, r0
 8009560:	468b      	mov	fp, r1
 8009562:	dd13      	ble.n	800958c <_strtod_l+0x3dc>
 8009564:	4b7b      	ldr	r3, [pc, #492]	; (8009754 <_strtod_l+0x5a4>)
 8009566:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800956a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800956e:	f7f7 f843 	bl	80005f8 <__aeabi_dmul>
 8009572:	4682      	mov	sl, r0
 8009574:	4648      	mov	r0, r9
 8009576:	468b      	mov	fp, r1
 8009578:	f7f6 ffc4 	bl	8000504 <__aeabi_ui2d>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	4650      	mov	r0, sl
 8009582:	4659      	mov	r1, fp
 8009584:	f7f6 fe82 	bl	800028c <__adddf3>
 8009588:	4682      	mov	sl, r0
 800958a:	468b      	mov	fp, r1
 800958c:	2d0f      	cmp	r5, #15
 800958e:	dc38      	bgt.n	8009602 <_strtod_l+0x452>
 8009590:	9b06      	ldr	r3, [sp, #24]
 8009592:	2b00      	cmp	r3, #0
 8009594:	f43f ae50 	beq.w	8009238 <_strtod_l+0x88>
 8009598:	dd24      	ble.n	80095e4 <_strtod_l+0x434>
 800959a:	2b16      	cmp	r3, #22
 800959c:	dc0b      	bgt.n	80095b6 <_strtod_l+0x406>
 800959e:	496d      	ldr	r1, [pc, #436]	; (8009754 <_strtod_l+0x5a4>)
 80095a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095a8:	4652      	mov	r2, sl
 80095aa:	465b      	mov	r3, fp
 80095ac:	f7f7 f824 	bl	80005f8 <__aeabi_dmul>
 80095b0:	4682      	mov	sl, r0
 80095b2:	468b      	mov	fp, r1
 80095b4:	e640      	b.n	8009238 <_strtod_l+0x88>
 80095b6:	9a06      	ldr	r2, [sp, #24]
 80095b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80095bc:	4293      	cmp	r3, r2
 80095be:	db20      	blt.n	8009602 <_strtod_l+0x452>
 80095c0:	4c64      	ldr	r4, [pc, #400]	; (8009754 <_strtod_l+0x5a4>)
 80095c2:	f1c5 050f 	rsb	r5, r5, #15
 80095c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80095ca:	4652      	mov	r2, sl
 80095cc:	465b      	mov	r3, fp
 80095ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d2:	f7f7 f811 	bl	80005f8 <__aeabi_dmul>
 80095d6:	9b06      	ldr	r3, [sp, #24]
 80095d8:	1b5d      	subs	r5, r3, r5
 80095da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80095de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80095e2:	e7e3      	b.n	80095ac <_strtod_l+0x3fc>
 80095e4:	9b06      	ldr	r3, [sp, #24]
 80095e6:	3316      	adds	r3, #22
 80095e8:	db0b      	blt.n	8009602 <_strtod_l+0x452>
 80095ea:	9b05      	ldr	r3, [sp, #20]
 80095ec:	1b9e      	subs	r6, r3, r6
 80095ee:	4b59      	ldr	r3, [pc, #356]	; (8009754 <_strtod_l+0x5a4>)
 80095f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80095f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095f8:	4650      	mov	r0, sl
 80095fa:	4659      	mov	r1, fp
 80095fc:	f7f7 f926 	bl	800084c <__aeabi_ddiv>
 8009600:	e7d6      	b.n	80095b0 <_strtod_l+0x400>
 8009602:	9b06      	ldr	r3, [sp, #24]
 8009604:	eba5 0808 	sub.w	r8, r5, r8
 8009608:	4498      	add	r8, r3
 800960a:	f1b8 0f00 	cmp.w	r8, #0
 800960e:	dd74      	ble.n	80096fa <_strtod_l+0x54a>
 8009610:	f018 030f 	ands.w	r3, r8, #15
 8009614:	d00a      	beq.n	800962c <_strtod_l+0x47c>
 8009616:	494f      	ldr	r1, [pc, #316]	; (8009754 <_strtod_l+0x5a4>)
 8009618:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800961c:	4652      	mov	r2, sl
 800961e:	465b      	mov	r3, fp
 8009620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009624:	f7f6 ffe8 	bl	80005f8 <__aeabi_dmul>
 8009628:	4682      	mov	sl, r0
 800962a:	468b      	mov	fp, r1
 800962c:	f038 080f 	bics.w	r8, r8, #15
 8009630:	d04f      	beq.n	80096d2 <_strtod_l+0x522>
 8009632:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009636:	dd22      	ble.n	800967e <_strtod_l+0x4ce>
 8009638:	2500      	movs	r5, #0
 800963a:	462e      	mov	r6, r5
 800963c:	9507      	str	r5, [sp, #28]
 800963e:	9505      	str	r5, [sp, #20]
 8009640:	2322      	movs	r3, #34	; 0x22
 8009642:	f8df b118 	ldr.w	fp, [pc, #280]	; 800975c <_strtod_l+0x5ac>
 8009646:	6023      	str	r3, [r4, #0]
 8009648:	f04f 0a00 	mov.w	sl, #0
 800964c:	9b07      	ldr	r3, [sp, #28]
 800964e:	2b00      	cmp	r3, #0
 8009650:	f43f adf2 	beq.w	8009238 <_strtod_l+0x88>
 8009654:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009656:	4620      	mov	r0, r4
 8009658:	f001 fe90 	bl	800b37c <_Bfree>
 800965c:	9905      	ldr	r1, [sp, #20]
 800965e:	4620      	mov	r0, r4
 8009660:	f001 fe8c 	bl	800b37c <_Bfree>
 8009664:	4631      	mov	r1, r6
 8009666:	4620      	mov	r0, r4
 8009668:	f001 fe88 	bl	800b37c <_Bfree>
 800966c:	9907      	ldr	r1, [sp, #28]
 800966e:	4620      	mov	r0, r4
 8009670:	f001 fe84 	bl	800b37c <_Bfree>
 8009674:	4629      	mov	r1, r5
 8009676:	4620      	mov	r0, r4
 8009678:	f001 fe80 	bl	800b37c <_Bfree>
 800967c:	e5dc      	b.n	8009238 <_strtod_l+0x88>
 800967e:	4b36      	ldr	r3, [pc, #216]	; (8009758 <_strtod_l+0x5a8>)
 8009680:	9304      	str	r3, [sp, #16]
 8009682:	2300      	movs	r3, #0
 8009684:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009688:	4650      	mov	r0, sl
 800968a:	4659      	mov	r1, fp
 800968c:	4699      	mov	r9, r3
 800968e:	f1b8 0f01 	cmp.w	r8, #1
 8009692:	dc21      	bgt.n	80096d8 <_strtod_l+0x528>
 8009694:	b10b      	cbz	r3, 800969a <_strtod_l+0x4ea>
 8009696:	4682      	mov	sl, r0
 8009698:	468b      	mov	fp, r1
 800969a:	4b2f      	ldr	r3, [pc, #188]	; (8009758 <_strtod_l+0x5a8>)
 800969c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80096a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80096a4:	4652      	mov	r2, sl
 80096a6:	465b      	mov	r3, fp
 80096a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80096ac:	f7f6 ffa4 	bl	80005f8 <__aeabi_dmul>
 80096b0:	4b2a      	ldr	r3, [pc, #168]	; (800975c <_strtod_l+0x5ac>)
 80096b2:	460a      	mov	r2, r1
 80096b4:	400b      	ands	r3, r1
 80096b6:	492a      	ldr	r1, [pc, #168]	; (8009760 <_strtod_l+0x5b0>)
 80096b8:	428b      	cmp	r3, r1
 80096ba:	4682      	mov	sl, r0
 80096bc:	d8bc      	bhi.n	8009638 <_strtod_l+0x488>
 80096be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80096c2:	428b      	cmp	r3, r1
 80096c4:	bf86      	itte	hi
 80096c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009764 <_strtod_l+0x5b4>
 80096ca:	f04f 3aff 	movhi.w	sl, #4294967295
 80096ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80096d2:	2300      	movs	r3, #0
 80096d4:	9304      	str	r3, [sp, #16]
 80096d6:	e084      	b.n	80097e2 <_strtod_l+0x632>
 80096d8:	f018 0f01 	tst.w	r8, #1
 80096dc:	d005      	beq.n	80096ea <_strtod_l+0x53a>
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	f7f6 ff88 	bl	80005f8 <__aeabi_dmul>
 80096e8:	2301      	movs	r3, #1
 80096ea:	9a04      	ldr	r2, [sp, #16]
 80096ec:	3208      	adds	r2, #8
 80096ee:	f109 0901 	add.w	r9, r9, #1
 80096f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80096f6:	9204      	str	r2, [sp, #16]
 80096f8:	e7c9      	b.n	800968e <_strtod_l+0x4de>
 80096fa:	d0ea      	beq.n	80096d2 <_strtod_l+0x522>
 80096fc:	f1c8 0800 	rsb	r8, r8, #0
 8009700:	f018 020f 	ands.w	r2, r8, #15
 8009704:	d00a      	beq.n	800971c <_strtod_l+0x56c>
 8009706:	4b13      	ldr	r3, [pc, #76]	; (8009754 <_strtod_l+0x5a4>)
 8009708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800970c:	4650      	mov	r0, sl
 800970e:	4659      	mov	r1, fp
 8009710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009714:	f7f7 f89a 	bl	800084c <__aeabi_ddiv>
 8009718:	4682      	mov	sl, r0
 800971a:	468b      	mov	fp, r1
 800971c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009720:	d0d7      	beq.n	80096d2 <_strtod_l+0x522>
 8009722:	f1b8 0f1f 	cmp.w	r8, #31
 8009726:	dd1f      	ble.n	8009768 <_strtod_l+0x5b8>
 8009728:	2500      	movs	r5, #0
 800972a:	462e      	mov	r6, r5
 800972c:	9507      	str	r5, [sp, #28]
 800972e:	9505      	str	r5, [sp, #20]
 8009730:	2322      	movs	r3, #34	; 0x22
 8009732:	f04f 0a00 	mov.w	sl, #0
 8009736:	f04f 0b00 	mov.w	fp, #0
 800973a:	6023      	str	r3, [r4, #0]
 800973c:	e786      	b.n	800964c <_strtod_l+0x49c>
 800973e:	bf00      	nop
 8009740:	0800de2d 	.word	0x0800de2d
 8009744:	0800de70 	.word	0x0800de70
 8009748:	0800de25 	.word	0x0800de25
 800974c:	0800dfb4 	.word	0x0800dfb4
 8009750:	0800e260 	.word	0x0800e260
 8009754:	0800e140 	.word	0x0800e140
 8009758:	0800e118 	.word	0x0800e118
 800975c:	7ff00000 	.word	0x7ff00000
 8009760:	7ca00000 	.word	0x7ca00000
 8009764:	7fefffff 	.word	0x7fefffff
 8009768:	f018 0310 	ands.w	r3, r8, #16
 800976c:	bf18      	it	ne
 800976e:	236a      	movne	r3, #106	; 0x6a
 8009770:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009b20 <_strtod_l+0x970>
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	4650      	mov	r0, sl
 8009778:	4659      	mov	r1, fp
 800977a:	2300      	movs	r3, #0
 800977c:	f018 0f01 	tst.w	r8, #1
 8009780:	d004      	beq.n	800978c <_strtod_l+0x5dc>
 8009782:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009786:	f7f6 ff37 	bl	80005f8 <__aeabi_dmul>
 800978a:	2301      	movs	r3, #1
 800978c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009790:	f109 0908 	add.w	r9, r9, #8
 8009794:	d1f2      	bne.n	800977c <_strtod_l+0x5cc>
 8009796:	b10b      	cbz	r3, 800979c <_strtod_l+0x5ec>
 8009798:	4682      	mov	sl, r0
 800979a:	468b      	mov	fp, r1
 800979c:	9b04      	ldr	r3, [sp, #16]
 800979e:	b1c3      	cbz	r3, 80097d2 <_strtod_l+0x622>
 80097a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80097a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	4659      	mov	r1, fp
 80097ac:	dd11      	ble.n	80097d2 <_strtod_l+0x622>
 80097ae:	2b1f      	cmp	r3, #31
 80097b0:	f340 8124 	ble.w	80099fc <_strtod_l+0x84c>
 80097b4:	2b34      	cmp	r3, #52	; 0x34
 80097b6:	bfde      	ittt	le
 80097b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80097bc:	f04f 33ff 	movle.w	r3, #4294967295
 80097c0:	fa03 f202 	lslle.w	r2, r3, r2
 80097c4:	f04f 0a00 	mov.w	sl, #0
 80097c8:	bfcc      	ite	gt
 80097ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80097ce:	ea02 0b01 	andle.w	fp, r2, r1
 80097d2:	2200      	movs	r2, #0
 80097d4:	2300      	movs	r3, #0
 80097d6:	4650      	mov	r0, sl
 80097d8:	4659      	mov	r1, fp
 80097da:	f7f7 f975 	bl	8000ac8 <__aeabi_dcmpeq>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d1a2      	bne.n	8009728 <_strtod_l+0x578>
 80097e2:	9b07      	ldr	r3, [sp, #28]
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	9908      	ldr	r1, [sp, #32]
 80097e8:	462b      	mov	r3, r5
 80097ea:	463a      	mov	r2, r7
 80097ec:	4620      	mov	r0, r4
 80097ee:	f001 fe2d 	bl	800b44c <__s2b>
 80097f2:	9007      	str	r0, [sp, #28]
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f43f af1f 	beq.w	8009638 <_strtod_l+0x488>
 80097fa:	9b05      	ldr	r3, [sp, #20]
 80097fc:	1b9e      	subs	r6, r3, r6
 80097fe:	9b06      	ldr	r3, [sp, #24]
 8009800:	2b00      	cmp	r3, #0
 8009802:	bfb4      	ite	lt
 8009804:	4633      	movlt	r3, r6
 8009806:	2300      	movge	r3, #0
 8009808:	930c      	str	r3, [sp, #48]	; 0x30
 800980a:	9b06      	ldr	r3, [sp, #24]
 800980c:	2500      	movs	r5, #0
 800980e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009812:	9312      	str	r3, [sp, #72]	; 0x48
 8009814:	462e      	mov	r6, r5
 8009816:	9b07      	ldr	r3, [sp, #28]
 8009818:	4620      	mov	r0, r4
 800981a:	6859      	ldr	r1, [r3, #4]
 800981c:	f001 fd6e 	bl	800b2fc <_Balloc>
 8009820:	9005      	str	r0, [sp, #20]
 8009822:	2800      	cmp	r0, #0
 8009824:	f43f af0c 	beq.w	8009640 <_strtod_l+0x490>
 8009828:	9b07      	ldr	r3, [sp, #28]
 800982a:	691a      	ldr	r2, [r3, #16]
 800982c:	3202      	adds	r2, #2
 800982e:	f103 010c 	add.w	r1, r3, #12
 8009832:	0092      	lsls	r2, r2, #2
 8009834:	300c      	adds	r0, #12
 8009836:	f001 fd53 	bl	800b2e0 <memcpy>
 800983a:	ec4b ab10 	vmov	d0, sl, fp
 800983e:	aa1a      	add	r2, sp, #104	; 0x68
 8009840:	a919      	add	r1, sp, #100	; 0x64
 8009842:	4620      	mov	r0, r4
 8009844:	f002 f948 	bl	800bad8 <__d2b>
 8009848:	ec4b ab18 	vmov	d8, sl, fp
 800984c:	9018      	str	r0, [sp, #96]	; 0x60
 800984e:	2800      	cmp	r0, #0
 8009850:	f43f aef6 	beq.w	8009640 <_strtod_l+0x490>
 8009854:	2101      	movs	r1, #1
 8009856:	4620      	mov	r0, r4
 8009858:	f001 fe92 	bl	800b580 <__i2b>
 800985c:	4606      	mov	r6, r0
 800985e:	2800      	cmp	r0, #0
 8009860:	f43f aeee 	beq.w	8009640 <_strtod_l+0x490>
 8009864:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009866:	9904      	ldr	r1, [sp, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	bfab      	itete	ge
 800986c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800986e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009870:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009872:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009876:	bfac      	ite	ge
 8009878:	eb03 0902 	addge.w	r9, r3, r2
 800987c:	1ad7      	sublt	r7, r2, r3
 800987e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009880:	eba3 0801 	sub.w	r8, r3, r1
 8009884:	4490      	add	r8, r2
 8009886:	4ba1      	ldr	r3, [pc, #644]	; (8009b0c <_strtod_l+0x95c>)
 8009888:	f108 38ff 	add.w	r8, r8, #4294967295
 800988c:	4598      	cmp	r8, r3
 800988e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009892:	f280 80c7 	bge.w	8009a24 <_strtod_l+0x874>
 8009896:	eba3 0308 	sub.w	r3, r3, r8
 800989a:	2b1f      	cmp	r3, #31
 800989c:	eba2 0203 	sub.w	r2, r2, r3
 80098a0:	f04f 0101 	mov.w	r1, #1
 80098a4:	f300 80b1 	bgt.w	8009a0a <_strtod_l+0x85a>
 80098a8:	fa01 f303 	lsl.w	r3, r1, r3
 80098ac:	930d      	str	r3, [sp, #52]	; 0x34
 80098ae:	2300      	movs	r3, #0
 80098b0:	9308      	str	r3, [sp, #32]
 80098b2:	eb09 0802 	add.w	r8, r9, r2
 80098b6:	9b04      	ldr	r3, [sp, #16]
 80098b8:	45c1      	cmp	r9, r8
 80098ba:	4417      	add	r7, r2
 80098bc:	441f      	add	r7, r3
 80098be:	464b      	mov	r3, r9
 80098c0:	bfa8      	it	ge
 80098c2:	4643      	movge	r3, r8
 80098c4:	42bb      	cmp	r3, r7
 80098c6:	bfa8      	it	ge
 80098c8:	463b      	movge	r3, r7
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	bfc2      	ittt	gt
 80098ce:	eba8 0803 	subgt.w	r8, r8, r3
 80098d2:	1aff      	subgt	r7, r7, r3
 80098d4:	eba9 0903 	subgt.w	r9, r9, r3
 80098d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098da:	2b00      	cmp	r3, #0
 80098dc:	dd17      	ble.n	800990e <_strtod_l+0x75e>
 80098de:	4631      	mov	r1, r6
 80098e0:	461a      	mov	r2, r3
 80098e2:	4620      	mov	r0, r4
 80098e4:	f001 ff0c 	bl	800b700 <__pow5mult>
 80098e8:	4606      	mov	r6, r0
 80098ea:	2800      	cmp	r0, #0
 80098ec:	f43f aea8 	beq.w	8009640 <_strtod_l+0x490>
 80098f0:	4601      	mov	r1, r0
 80098f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80098f4:	4620      	mov	r0, r4
 80098f6:	f001 fe59 	bl	800b5ac <__multiply>
 80098fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80098fc:	2800      	cmp	r0, #0
 80098fe:	f43f ae9f 	beq.w	8009640 <_strtod_l+0x490>
 8009902:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009904:	4620      	mov	r0, r4
 8009906:	f001 fd39 	bl	800b37c <_Bfree>
 800990a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800990c:	9318      	str	r3, [sp, #96]	; 0x60
 800990e:	f1b8 0f00 	cmp.w	r8, #0
 8009912:	f300 808c 	bgt.w	8009a2e <_strtod_l+0x87e>
 8009916:	9b06      	ldr	r3, [sp, #24]
 8009918:	2b00      	cmp	r3, #0
 800991a:	dd08      	ble.n	800992e <_strtod_l+0x77e>
 800991c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800991e:	9905      	ldr	r1, [sp, #20]
 8009920:	4620      	mov	r0, r4
 8009922:	f001 feed 	bl	800b700 <__pow5mult>
 8009926:	9005      	str	r0, [sp, #20]
 8009928:	2800      	cmp	r0, #0
 800992a:	f43f ae89 	beq.w	8009640 <_strtod_l+0x490>
 800992e:	2f00      	cmp	r7, #0
 8009930:	dd08      	ble.n	8009944 <_strtod_l+0x794>
 8009932:	9905      	ldr	r1, [sp, #20]
 8009934:	463a      	mov	r2, r7
 8009936:	4620      	mov	r0, r4
 8009938:	f001 ff3c 	bl	800b7b4 <__lshift>
 800993c:	9005      	str	r0, [sp, #20]
 800993e:	2800      	cmp	r0, #0
 8009940:	f43f ae7e 	beq.w	8009640 <_strtod_l+0x490>
 8009944:	f1b9 0f00 	cmp.w	r9, #0
 8009948:	dd08      	ble.n	800995c <_strtod_l+0x7ac>
 800994a:	4631      	mov	r1, r6
 800994c:	464a      	mov	r2, r9
 800994e:	4620      	mov	r0, r4
 8009950:	f001 ff30 	bl	800b7b4 <__lshift>
 8009954:	4606      	mov	r6, r0
 8009956:	2800      	cmp	r0, #0
 8009958:	f43f ae72 	beq.w	8009640 <_strtod_l+0x490>
 800995c:	9a05      	ldr	r2, [sp, #20]
 800995e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009960:	4620      	mov	r0, r4
 8009962:	f001 ffb3 	bl	800b8cc <__mdiff>
 8009966:	4605      	mov	r5, r0
 8009968:	2800      	cmp	r0, #0
 800996a:	f43f ae69 	beq.w	8009640 <_strtod_l+0x490>
 800996e:	68c3      	ldr	r3, [r0, #12]
 8009970:	930b      	str	r3, [sp, #44]	; 0x2c
 8009972:	2300      	movs	r3, #0
 8009974:	60c3      	str	r3, [r0, #12]
 8009976:	4631      	mov	r1, r6
 8009978:	f001 ff8c 	bl	800b894 <__mcmp>
 800997c:	2800      	cmp	r0, #0
 800997e:	da60      	bge.n	8009a42 <_strtod_l+0x892>
 8009980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009982:	ea53 030a 	orrs.w	r3, r3, sl
 8009986:	f040 8082 	bne.w	8009a8e <_strtod_l+0x8de>
 800998a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800998e:	2b00      	cmp	r3, #0
 8009990:	d17d      	bne.n	8009a8e <_strtod_l+0x8de>
 8009992:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009996:	0d1b      	lsrs	r3, r3, #20
 8009998:	051b      	lsls	r3, r3, #20
 800999a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800999e:	d976      	bls.n	8009a8e <_strtod_l+0x8de>
 80099a0:	696b      	ldr	r3, [r5, #20]
 80099a2:	b913      	cbnz	r3, 80099aa <_strtod_l+0x7fa>
 80099a4:	692b      	ldr	r3, [r5, #16]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	dd71      	ble.n	8009a8e <_strtod_l+0x8de>
 80099aa:	4629      	mov	r1, r5
 80099ac:	2201      	movs	r2, #1
 80099ae:	4620      	mov	r0, r4
 80099b0:	f001 ff00 	bl	800b7b4 <__lshift>
 80099b4:	4631      	mov	r1, r6
 80099b6:	4605      	mov	r5, r0
 80099b8:	f001 ff6c 	bl	800b894 <__mcmp>
 80099bc:	2800      	cmp	r0, #0
 80099be:	dd66      	ble.n	8009a8e <_strtod_l+0x8de>
 80099c0:	9904      	ldr	r1, [sp, #16]
 80099c2:	4a53      	ldr	r2, [pc, #332]	; (8009b10 <_strtod_l+0x960>)
 80099c4:	465b      	mov	r3, fp
 80099c6:	2900      	cmp	r1, #0
 80099c8:	f000 8081 	beq.w	8009ace <_strtod_l+0x91e>
 80099cc:	ea02 010b 	and.w	r1, r2, fp
 80099d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80099d4:	dc7b      	bgt.n	8009ace <_strtod_l+0x91e>
 80099d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80099da:	f77f aea9 	ble.w	8009730 <_strtod_l+0x580>
 80099de:	4b4d      	ldr	r3, [pc, #308]	; (8009b14 <_strtod_l+0x964>)
 80099e0:	4650      	mov	r0, sl
 80099e2:	4659      	mov	r1, fp
 80099e4:	2200      	movs	r2, #0
 80099e6:	f7f6 fe07 	bl	80005f8 <__aeabi_dmul>
 80099ea:	460b      	mov	r3, r1
 80099ec:	4303      	orrs	r3, r0
 80099ee:	bf08      	it	eq
 80099f0:	2322      	moveq	r3, #34	; 0x22
 80099f2:	4682      	mov	sl, r0
 80099f4:	468b      	mov	fp, r1
 80099f6:	bf08      	it	eq
 80099f8:	6023      	streq	r3, [r4, #0]
 80099fa:	e62b      	b.n	8009654 <_strtod_l+0x4a4>
 80099fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009a00:	fa02 f303 	lsl.w	r3, r2, r3
 8009a04:	ea03 0a0a 	and.w	sl, r3, sl
 8009a08:	e6e3      	b.n	80097d2 <_strtod_l+0x622>
 8009a0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009a0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009a12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009a16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009a1a:	fa01 f308 	lsl.w	r3, r1, r8
 8009a1e:	9308      	str	r3, [sp, #32]
 8009a20:	910d      	str	r1, [sp, #52]	; 0x34
 8009a22:	e746      	b.n	80098b2 <_strtod_l+0x702>
 8009a24:	2300      	movs	r3, #0
 8009a26:	9308      	str	r3, [sp, #32]
 8009a28:	2301      	movs	r3, #1
 8009a2a:	930d      	str	r3, [sp, #52]	; 0x34
 8009a2c:	e741      	b.n	80098b2 <_strtod_l+0x702>
 8009a2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a30:	4642      	mov	r2, r8
 8009a32:	4620      	mov	r0, r4
 8009a34:	f001 febe 	bl	800b7b4 <__lshift>
 8009a38:	9018      	str	r0, [sp, #96]	; 0x60
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	f47f af6b 	bne.w	8009916 <_strtod_l+0x766>
 8009a40:	e5fe      	b.n	8009640 <_strtod_l+0x490>
 8009a42:	465f      	mov	r7, fp
 8009a44:	d16e      	bne.n	8009b24 <_strtod_l+0x974>
 8009a46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a4c:	b342      	cbz	r2, 8009aa0 <_strtod_l+0x8f0>
 8009a4e:	4a32      	ldr	r2, [pc, #200]	; (8009b18 <_strtod_l+0x968>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d128      	bne.n	8009aa6 <_strtod_l+0x8f6>
 8009a54:	9b04      	ldr	r3, [sp, #16]
 8009a56:	4651      	mov	r1, sl
 8009a58:	b1eb      	cbz	r3, 8009a96 <_strtod_l+0x8e6>
 8009a5a:	4b2d      	ldr	r3, [pc, #180]	; (8009b10 <_strtod_l+0x960>)
 8009a5c:	403b      	ands	r3, r7
 8009a5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a62:	f04f 32ff 	mov.w	r2, #4294967295
 8009a66:	d819      	bhi.n	8009a9c <_strtod_l+0x8ec>
 8009a68:	0d1b      	lsrs	r3, r3, #20
 8009a6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a72:	4299      	cmp	r1, r3
 8009a74:	d117      	bne.n	8009aa6 <_strtod_l+0x8f6>
 8009a76:	4b29      	ldr	r3, [pc, #164]	; (8009b1c <_strtod_l+0x96c>)
 8009a78:	429f      	cmp	r7, r3
 8009a7a:	d102      	bne.n	8009a82 <_strtod_l+0x8d2>
 8009a7c:	3101      	adds	r1, #1
 8009a7e:	f43f addf 	beq.w	8009640 <_strtod_l+0x490>
 8009a82:	4b23      	ldr	r3, [pc, #140]	; (8009b10 <_strtod_l+0x960>)
 8009a84:	403b      	ands	r3, r7
 8009a86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009a8a:	f04f 0a00 	mov.w	sl, #0
 8009a8e:	9b04      	ldr	r3, [sp, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1a4      	bne.n	80099de <_strtod_l+0x82e>
 8009a94:	e5de      	b.n	8009654 <_strtod_l+0x4a4>
 8009a96:	f04f 33ff 	mov.w	r3, #4294967295
 8009a9a:	e7ea      	b.n	8009a72 <_strtod_l+0x8c2>
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	e7e8      	b.n	8009a72 <_strtod_l+0x8c2>
 8009aa0:	ea53 030a 	orrs.w	r3, r3, sl
 8009aa4:	d08c      	beq.n	80099c0 <_strtod_l+0x810>
 8009aa6:	9b08      	ldr	r3, [sp, #32]
 8009aa8:	b1db      	cbz	r3, 8009ae2 <_strtod_l+0x932>
 8009aaa:	423b      	tst	r3, r7
 8009aac:	d0ef      	beq.n	8009a8e <_strtod_l+0x8de>
 8009aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ab0:	9a04      	ldr	r2, [sp, #16]
 8009ab2:	4650      	mov	r0, sl
 8009ab4:	4659      	mov	r1, fp
 8009ab6:	b1c3      	cbz	r3, 8009aea <_strtod_l+0x93a>
 8009ab8:	f7ff fb5e 	bl	8009178 <sulp>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	ec51 0b18 	vmov	r0, r1, d8
 8009ac4:	f7f6 fbe2 	bl	800028c <__adddf3>
 8009ac8:	4682      	mov	sl, r0
 8009aca:	468b      	mov	fp, r1
 8009acc:	e7df      	b.n	8009a8e <_strtod_l+0x8de>
 8009ace:	4013      	ands	r3, r2
 8009ad0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009ad4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ad8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009adc:	f04f 3aff 	mov.w	sl, #4294967295
 8009ae0:	e7d5      	b.n	8009a8e <_strtod_l+0x8de>
 8009ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ae4:	ea13 0f0a 	tst.w	r3, sl
 8009ae8:	e7e0      	b.n	8009aac <_strtod_l+0x8fc>
 8009aea:	f7ff fb45 	bl	8009178 <sulp>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	ec51 0b18 	vmov	r0, r1, d8
 8009af6:	f7f6 fbc7 	bl	8000288 <__aeabi_dsub>
 8009afa:	2200      	movs	r2, #0
 8009afc:	2300      	movs	r3, #0
 8009afe:	4682      	mov	sl, r0
 8009b00:	468b      	mov	fp, r1
 8009b02:	f7f6 ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d0c1      	beq.n	8009a8e <_strtod_l+0x8de>
 8009b0a:	e611      	b.n	8009730 <_strtod_l+0x580>
 8009b0c:	fffffc02 	.word	0xfffffc02
 8009b10:	7ff00000 	.word	0x7ff00000
 8009b14:	39500000 	.word	0x39500000
 8009b18:	000fffff 	.word	0x000fffff
 8009b1c:	7fefffff 	.word	0x7fefffff
 8009b20:	0800de88 	.word	0x0800de88
 8009b24:	4631      	mov	r1, r6
 8009b26:	4628      	mov	r0, r5
 8009b28:	f002 f832 	bl	800bb90 <__ratio>
 8009b2c:	ec59 8b10 	vmov	r8, r9, d0
 8009b30:	ee10 0a10 	vmov	r0, s0
 8009b34:	2200      	movs	r2, #0
 8009b36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	f7f6 ffd8 	bl	8000af0 <__aeabi_dcmple>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d07a      	beq.n	8009c3a <_strtod_l+0xa8a>
 8009b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d04a      	beq.n	8009be0 <_strtod_l+0xa30>
 8009b4a:	4b95      	ldr	r3, [pc, #596]	; (8009da0 <_strtod_l+0xbf0>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009da0 <_strtod_l+0xbf0>
 8009b56:	f04f 0800 	mov.w	r8, #0
 8009b5a:	4b92      	ldr	r3, [pc, #584]	; (8009da4 <_strtod_l+0xbf4>)
 8009b5c:	403b      	ands	r3, r7
 8009b5e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b62:	4b91      	ldr	r3, [pc, #580]	; (8009da8 <_strtod_l+0xbf8>)
 8009b64:	429a      	cmp	r2, r3
 8009b66:	f040 80b0 	bne.w	8009cca <_strtod_l+0xb1a>
 8009b6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009b72:	ec4b ab10 	vmov	d0, sl, fp
 8009b76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b7a:	f001 ff31 	bl	800b9e0 <__ulp>
 8009b7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b82:	ec53 2b10 	vmov	r2, r3, d0
 8009b86:	f7f6 fd37 	bl	80005f8 <__aeabi_dmul>
 8009b8a:	4652      	mov	r2, sl
 8009b8c:	465b      	mov	r3, fp
 8009b8e:	f7f6 fb7d 	bl	800028c <__adddf3>
 8009b92:	460b      	mov	r3, r1
 8009b94:	4983      	ldr	r1, [pc, #524]	; (8009da4 <_strtod_l+0xbf4>)
 8009b96:	4a85      	ldr	r2, [pc, #532]	; (8009dac <_strtod_l+0xbfc>)
 8009b98:	4019      	ands	r1, r3
 8009b9a:	4291      	cmp	r1, r2
 8009b9c:	4682      	mov	sl, r0
 8009b9e:	d960      	bls.n	8009c62 <_strtod_l+0xab2>
 8009ba0:	ee18 3a90 	vmov	r3, s17
 8009ba4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d104      	bne.n	8009bb6 <_strtod_l+0xa06>
 8009bac:	ee18 3a10 	vmov	r3, s16
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	f43f ad45 	beq.w	8009640 <_strtod_l+0x490>
 8009bb6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009db8 <_strtod_l+0xc08>
 8009bba:	f04f 3aff 	mov.w	sl, #4294967295
 8009bbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f001 fbdb 	bl	800b37c <_Bfree>
 8009bc6:	9905      	ldr	r1, [sp, #20]
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f001 fbd7 	bl	800b37c <_Bfree>
 8009bce:	4631      	mov	r1, r6
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f001 fbd3 	bl	800b37c <_Bfree>
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f001 fbcf 	bl	800b37c <_Bfree>
 8009bde:	e61a      	b.n	8009816 <_strtod_l+0x666>
 8009be0:	f1ba 0f00 	cmp.w	sl, #0
 8009be4:	d11b      	bne.n	8009c1e <_strtod_l+0xa6e>
 8009be6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bea:	b9f3      	cbnz	r3, 8009c2a <_strtod_l+0xa7a>
 8009bec:	4b6c      	ldr	r3, [pc, #432]	; (8009da0 <_strtod_l+0xbf0>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	4649      	mov	r1, r9
 8009bf4:	f7f6 ff72 	bl	8000adc <__aeabi_dcmplt>
 8009bf8:	b9d0      	cbnz	r0, 8009c30 <_strtod_l+0xa80>
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	4b6c      	ldr	r3, [pc, #432]	; (8009db0 <_strtod_l+0xc00>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	f7f6 fcf9 	bl	80005f8 <__aeabi_dmul>
 8009c06:	4680      	mov	r8, r0
 8009c08:	4689      	mov	r9, r1
 8009c0a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009c0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009c12:	9315      	str	r3, [sp, #84]	; 0x54
 8009c14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009c18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c1c:	e79d      	b.n	8009b5a <_strtod_l+0x9aa>
 8009c1e:	f1ba 0f01 	cmp.w	sl, #1
 8009c22:	d102      	bne.n	8009c2a <_strtod_l+0xa7a>
 8009c24:	2f00      	cmp	r7, #0
 8009c26:	f43f ad83 	beq.w	8009730 <_strtod_l+0x580>
 8009c2a:	4b62      	ldr	r3, [pc, #392]	; (8009db4 <_strtod_l+0xc04>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	e78e      	b.n	8009b4e <_strtod_l+0x99e>
 8009c30:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009db0 <_strtod_l+0xc00>
 8009c34:	f04f 0800 	mov.w	r8, #0
 8009c38:	e7e7      	b.n	8009c0a <_strtod_l+0xa5a>
 8009c3a:	4b5d      	ldr	r3, [pc, #372]	; (8009db0 <_strtod_l+0xc00>)
 8009c3c:	4640      	mov	r0, r8
 8009c3e:	4649      	mov	r1, r9
 8009c40:	2200      	movs	r2, #0
 8009c42:	f7f6 fcd9 	bl	80005f8 <__aeabi_dmul>
 8009c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c48:	4680      	mov	r8, r0
 8009c4a:	4689      	mov	r9, r1
 8009c4c:	b933      	cbnz	r3, 8009c5c <_strtod_l+0xaac>
 8009c4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c52:	900e      	str	r0, [sp, #56]	; 0x38
 8009c54:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009c5a:	e7dd      	b.n	8009c18 <_strtod_l+0xa68>
 8009c5c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009c60:	e7f9      	b.n	8009c56 <_strtod_l+0xaa6>
 8009c62:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009c66:	9b04      	ldr	r3, [sp, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1a8      	bne.n	8009bbe <_strtod_l+0xa0e>
 8009c6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c72:	0d1b      	lsrs	r3, r3, #20
 8009c74:	051b      	lsls	r3, r3, #20
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d1a1      	bne.n	8009bbe <_strtod_l+0xa0e>
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	f7f7 f803 	bl	8000c88 <__aeabi_d2lz>
 8009c82:	f7f6 fc8b 	bl	800059c <__aeabi_l2d>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 fafb 	bl	8000288 <__aeabi_dsub>
 8009c92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c98:	ea43 030a 	orr.w	r3, r3, sl
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	4680      	mov	r8, r0
 8009ca0:	4689      	mov	r9, r1
 8009ca2:	d055      	beq.n	8009d50 <_strtod_l+0xba0>
 8009ca4:	a336      	add	r3, pc, #216	; (adr r3, 8009d80 <_strtod_l+0xbd0>)
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f7f6 ff17 	bl	8000adc <__aeabi_dcmplt>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f47f acd0 	bne.w	8009654 <_strtod_l+0x4a4>
 8009cb4:	a334      	add	r3, pc, #208	; (adr r3, 8009d88 <_strtod_l+0xbd8>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	4640      	mov	r0, r8
 8009cbc:	4649      	mov	r1, r9
 8009cbe:	f7f6 ff2b 	bl	8000b18 <__aeabi_dcmpgt>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	f43f af7b 	beq.w	8009bbe <_strtod_l+0xa0e>
 8009cc8:	e4c4      	b.n	8009654 <_strtod_l+0x4a4>
 8009cca:	9b04      	ldr	r3, [sp, #16]
 8009ccc:	b333      	cbz	r3, 8009d1c <_strtod_l+0xb6c>
 8009cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cd0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009cd4:	d822      	bhi.n	8009d1c <_strtod_l+0xb6c>
 8009cd6:	a32e      	add	r3, pc, #184	; (adr r3, 8009d90 <_strtod_l+0xbe0>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	4640      	mov	r0, r8
 8009cde:	4649      	mov	r1, r9
 8009ce0:	f7f6 ff06 	bl	8000af0 <__aeabi_dcmple>
 8009ce4:	b1a0      	cbz	r0, 8009d10 <_strtod_l+0xb60>
 8009ce6:	4649      	mov	r1, r9
 8009ce8:	4640      	mov	r0, r8
 8009cea:	f7f6 ff5d 	bl	8000ba8 <__aeabi_d2uiz>
 8009cee:	2801      	cmp	r0, #1
 8009cf0:	bf38      	it	cc
 8009cf2:	2001      	movcc	r0, #1
 8009cf4:	f7f6 fc06 	bl	8000504 <__aeabi_ui2d>
 8009cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cfa:	4680      	mov	r8, r0
 8009cfc:	4689      	mov	r9, r1
 8009cfe:	bb23      	cbnz	r3, 8009d4a <_strtod_l+0xb9a>
 8009d00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d04:	9010      	str	r0, [sp, #64]	; 0x40
 8009d06:	9311      	str	r3, [sp, #68]	; 0x44
 8009d08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009d18:	1a9b      	subs	r3, r3, r2
 8009d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d20:	eeb0 0a48 	vmov.f32	s0, s16
 8009d24:	eef0 0a68 	vmov.f32	s1, s17
 8009d28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d2c:	f001 fe58 	bl	800b9e0 <__ulp>
 8009d30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d34:	ec53 2b10 	vmov	r2, r3, d0
 8009d38:	f7f6 fc5e 	bl	80005f8 <__aeabi_dmul>
 8009d3c:	ec53 2b18 	vmov	r2, r3, d8
 8009d40:	f7f6 faa4 	bl	800028c <__adddf3>
 8009d44:	4682      	mov	sl, r0
 8009d46:	468b      	mov	fp, r1
 8009d48:	e78d      	b.n	8009c66 <_strtod_l+0xab6>
 8009d4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009d4e:	e7db      	b.n	8009d08 <_strtod_l+0xb58>
 8009d50:	a311      	add	r3, pc, #68	; (adr r3, 8009d98 <_strtod_l+0xbe8>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	f7f6 fec1 	bl	8000adc <__aeabi_dcmplt>
 8009d5a:	e7b2      	b.n	8009cc2 <_strtod_l+0xb12>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d64:	6013      	str	r3, [r2, #0]
 8009d66:	f7ff ba6b 	b.w	8009240 <_strtod_l+0x90>
 8009d6a:	2a65      	cmp	r2, #101	; 0x65
 8009d6c:	f43f ab5f 	beq.w	800942e <_strtod_l+0x27e>
 8009d70:	2a45      	cmp	r2, #69	; 0x45
 8009d72:	f43f ab5c 	beq.w	800942e <_strtod_l+0x27e>
 8009d76:	2301      	movs	r3, #1
 8009d78:	f7ff bb94 	b.w	80094a4 <_strtod_l+0x2f4>
 8009d7c:	f3af 8000 	nop.w
 8009d80:	94a03595 	.word	0x94a03595
 8009d84:	3fdfffff 	.word	0x3fdfffff
 8009d88:	35afe535 	.word	0x35afe535
 8009d8c:	3fe00000 	.word	0x3fe00000
 8009d90:	ffc00000 	.word	0xffc00000
 8009d94:	41dfffff 	.word	0x41dfffff
 8009d98:	94a03595 	.word	0x94a03595
 8009d9c:	3fcfffff 	.word	0x3fcfffff
 8009da0:	3ff00000 	.word	0x3ff00000
 8009da4:	7ff00000 	.word	0x7ff00000
 8009da8:	7fe00000 	.word	0x7fe00000
 8009dac:	7c9fffff 	.word	0x7c9fffff
 8009db0:	3fe00000 	.word	0x3fe00000
 8009db4:	bff00000 	.word	0xbff00000
 8009db8:	7fefffff 	.word	0x7fefffff

08009dbc <_strtod_r>:
 8009dbc:	4b01      	ldr	r3, [pc, #4]	; (8009dc4 <_strtod_r+0x8>)
 8009dbe:	f7ff b9f7 	b.w	80091b0 <_strtod_l>
 8009dc2:	bf00      	nop
 8009dc4:	20000164 	.word	0x20000164

08009dc8 <_strtol_l.constprop.0>:
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dce:	d001      	beq.n	8009dd4 <_strtol_l.constprop.0+0xc>
 8009dd0:	2b24      	cmp	r3, #36	; 0x24
 8009dd2:	d906      	bls.n	8009de2 <_strtol_l.constprop.0+0x1a>
 8009dd4:	f7fe fafe 	bl	80083d4 <__errno>
 8009dd8:	2316      	movs	r3, #22
 8009dda:	6003      	str	r3, [r0, #0]
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009ec8 <_strtol_l.constprop.0+0x100>
 8009de6:	460d      	mov	r5, r1
 8009de8:	462e      	mov	r6, r5
 8009dea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dee:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009df2:	f017 0708 	ands.w	r7, r7, #8
 8009df6:	d1f7      	bne.n	8009de8 <_strtol_l.constprop.0+0x20>
 8009df8:	2c2d      	cmp	r4, #45	; 0x2d
 8009dfa:	d132      	bne.n	8009e62 <_strtol_l.constprop.0+0x9a>
 8009dfc:	782c      	ldrb	r4, [r5, #0]
 8009dfe:	2701      	movs	r7, #1
 8009e00:	1cb5      	adds	r5, r6, #2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d05b      	beq.n	8009ebe <_strtol_l.constprop.0+0xf6>
 8009e06:	2b10      	cmp	r3, #16
 8009e08:	d109      	bne.n	8009e1e <_strtol_l.constprop.0+0x56>
 8009e0a:	2c30      	cmp	r4, #48	; 0x30
 8009e0c:	d107      	bne.n	8009e1e <_strtol_l.constprop.0+0x56>
 8009e0e:	782c      	ldrb	r4, [r5, #0]
 8009e10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009e14:	2c58      	cmp	r4, #88	; 0x58
 8009e16:	d14d      	bne.n	8009eb4 <_strtol_l.constprop.0+0xec>
 8009e18:	786c      	ldrb	r4, [r5, #1]
 8009e1a:	2310      	movs	r3, #16
 8009e1c:	3502      	adds	r5, #2
 8009e1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009e22:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e26:	f04f 0c00 	mov.w	ip, #0
 8009e2a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009e2e:	4666      	mov	r6, ip
 8009e30:	fb03 8a19 	mls	sl, r3, r9, r8
 8009e34:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009e38:	f1be 0f09 	cmp.w	lr, #9
 8009e3c:	d816      	bhi.n	8009e6c <_strtol_l.constprop.0+0xa4>
 8009e3e:	4674      	mov	r4, lr
 8009e40:	42a3      	cmp	r3, r4
 8009e42:	dd24      	ble.n	8009e8e <_strtol_l.constprop.0+0xc6>
 8009e44:	f1bc 0f00 	cmp.w	ip, #0
 8009e48:	db1e      	blt.n	8009e88 <_strtol_l.constprop.0+0xc0>
 8009e4a:	45b1      	cmp	r9, r6
 8009e4c:	d31c      	bcc.n	8009e88 <_strtol_l.constprop.0+0xc0>
 8009e4e:	d101      	bne.n	8009e54 <_strtol_l.constprop.0+0x8c>
 8009e50:	45a2      	cmp	sl, r4
 8009e52:	db19      	blt.n	8009e88 <_strtol_l.constprop.0+0xc0>
 8009e54:	fb06 4603 	mla	r6, r6, r3, r4
 8009e58:	f04f 0c01 	mov.w	ip, #1
 8009e5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e60:	e7e8      	b.n	8009e34 <_strtol_l.constprop.0+0x6c>
 8009e62:	2c2b      	cmp	r4, #43	; 0x2b
 8009e64:	bf04      	itt	eq
 8009e66:	782c      	ldrbeq	r4, [r5, #0]
 8009e68:	1cb5      	addeq	r5, r6, #2
 8009e6a:	e7ca      	b.n	8009e02 <_strtol_l.constprop.0+0x3a>
 8009e6c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009e70:	f1be 0f19 	cmp.w	lr, #25
 8009e74:	d801      	bhi.n	8009e7a <_strtol_l.constprop.0+0xb2>
 8009e76:	3c37      	subs	r4, #55	; 0x37
 8009e78:	e7e2      	b.n	8009e40 <_strtol_l.constprop.0+0x78>
 8009e7a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009e7e:	f1be 0f19 	cmp.w	lr, #25
 8009e82:	d804      	bhi.n	8009e8e <_strtol_l.constprop.0+0xc6>
 8009e84:	3c57      	subs	r4, #87	; 0x57
 8009e86:	e7db      	b.n	8009e40 <_strtol_l.constprop.0+0x78>
 8009e88:	f04f 3cff 	mov.w	ip, #4294967295
 8009e8c:	e7e6      	b.n	8009e5c <_strtol_l.constprop.0+0x94>
 8009e8e:	f1bc 0f00 	cmp.w	ip, #0
 8009e92:	da05      	bge.n	8009ea0 <_strtol_l.constprop.0+0xd8>
 8009e94:	2322      	movs	r3, #34	; 0x22
 8009e96:	6003      	str	r3, [r0, #0]
 8009e98:	4646      	mov	r6, r8
 8009e9a:	b942      	cbnz	r2, 8009eae <_strtol_l.constprop.0+0xe6>
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	e79e      	b.n	8009dde <_strtol_l.constprop.0+0x16>
 8009ea0:	b107      	cbz	r7, 8009ea4 <_strtol_l.constprop.0+0xdc>
 8009ea2:	4276      	negs	r6, r6
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	d0f9      	beq.n	8009e9c <_strtol_l.constprop.0+0xd4>
 8009ea8:	f1bc 0f00 	cmp.w	ip, #0
 8009eac:	d000      	beq.n	8009eb0 <_strtol_l.constprop.0+0xe8>
 8009eae:	1e69      	subs	r1, r5, #1
 8009eb0:	6011      	str	r1, [r2, #0]
 8009eb2:	e7f3      	b.n	8009e9c <_strtol_l.constprop.0+0xd4>
 8009eb4:	2430      	movs	r4, #48	; 0x30
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1b1      	bne.n	8009e1e <_strtol_l.constprop.0+0x56>
 8009eba:	2308      	movs	r3, #8
 8009ebc:	e7af      	b.n	8009e1e <_strtol_l.constprop.0+0x56>
 8009ebe:	2c30      	cmp	r4, #48	; 0x30
 8009ec0:	d0a5      	beq.n	8009e0e <_strtol_l.constprop.0+0x46>
 8009ec2:	230a      	movs	r3, #10
 8009ec4:	e7ab      	b.n	8009e1e <_strtol_l.constprop.0+0x56>
 8009ec6:	bf00      	nop
 8009ec8:	0800deb1 	.word	0x0800deb1

08009ecc <_strtol_r>:
 8009ecc:	f7ff bf7c 	b.w	8009dc8 <_strtol_l.constprop.0>

08009ed0 <quorem>:
 8009ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	6903      	ldr	r3, [r0, #16]
 8009ed6:	690c      	ldr	r4, [r1, #16]
 8009ed8:	42a3      	cmp	r3, r4
 8009eda:	4607      	mov	r7, r0
 8009edc:	f2c0 8081 	blt.w	8009fe2 <quorem+0x112>
 8009ee0:	3c01      	subs	r4, #1
 8009ee2:	f101 0814 	add.w	r8, r1, #20
 8009ee6:	f100 0514 	add.w	r5, r0, #20
 8009eea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ef4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	429a      	cmp	r2, r3
 8009efc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f04:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f08:	d331      	bcc.n	8009f6e <quorem+0x9e>
 8009f0a:	f04f 0e00 	mov.w	lr, #0
 8009f0e:	4640      	mov	r0, r8
 8009f10:	46ac      	mov	ip, r5
 8009f12:	46f2      	mov	sl, lr
 8009f14:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f18:	b293      	uxth	r3, r2
 8009f1a:	fb06 e303 	mla	r3, r6, r3, lr
 8009f1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	ebaa 0303 	sub.w	r3, sl, r3
 8009f28:	f8dc a000 	ldr.w	sl, [ip]
 8009f2c:	0c12      	lsrs	r2, r2, #16
 8009f2e:	fa13 f38a 	uxtah	r3, r3, sl
 8009f32:	fb06 e202 	mla	r2, r6, r2, lr
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	9b00      	ldr	r3, [sp, #0]
 8009f3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f3e:	b292      	uxth	r2, r2
 8009f40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f48:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f4c:	4581      	cmp	r9, r0
 8009f4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f52:	f84c 3b04 	str.w	r3, [ip], #4
 8009f56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f5a:	d2db      	bcs.n	8009f14 <quorem+0x44>
 8009f5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f60:	b92b      	cbnz	r3, 8009f6e <quorem+0x9e>
 8009f62:	9b01      	ldr	r3, [sp, #4]
 8009f64:	3b04      	subs	r3, #4
 8009f66:	429d      	cmp	r5, r3
 8009f68:	461a      	mov	r2, r3
 8009f6a:	d32e      	bcc.n	8009fca <quorem+0xfa>
 8009f6c:	613c      	str	r4, [r7, #16]
 8009f6e:	4638      	mov	r0, r7
 8009f70:	f001 fc90 	bl	800b894 <__mcmp>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	db24      	blt.n	8009fc2 <quorem+0xf2>
 8009f78:	3601      	adds	r6, #1
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f04f 0c00 	mov.w	ip, #0
 8009f80:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f84:	f8d0 e000 	ldr.w	lr, [r0]
 8009f88:	b293      	uxth	r3, r2
 8009f8a:	ebac 0303 	sub.w	r3, ip, r3
 8009f8e:	0c12      	lsrs	r2, r2, #16
 8009f90:	fa13 f38e 	uxtah	r3, r3, lr
 8009f94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fa2:	45c1      	cmp	r9, r8
 8009fa4:	f840 3b04 	str.w	r3, [r0], #4
 8009fa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009fac:	d2e8      	bcs.n	8009f80 <quorem+0xb0>
 8009fae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fb6:	b922      	cbnz	r2, 8009fc2 <quorem+0xf2>
 8009fb8:	3b04      	subs	r3, #4
 8009fba:	429d      	cmp	r5, r3
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	d30a      	bcc.n	8009fd6 <quorem+0x106>
 8009fc0:	613c      	str	r4, [r7, #16]
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	b003      	add	sp, #12
 8009fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fca:	6812      	ldr	r2, [r2, #0]
 8009fcc:	3b04      	subs	r3, #4
 8009fce:	2a00      	cmp	r2, #0
 8009fd0:	d1cc      	bne.n	8009f6c <quorem+0x9c>
 8009fd2:	3c01      	subs	r4, #1
 8009fd4:	e7c7      	b.n	8009f66 <quorem+0x96>
 8009fd6:	6812      	ldr	r2, [r2, #0]
 8009fd8:	3b04      	subs	r3, #4
 8009fda:	2a00      	cmp	r2, #0
 8009fdc:	d1f0      	bne.n	8009fc0 <quorem+0xf0>
 8009fde:	3c01      	subs	r4, #1
 8009fe0:	e7eb      	b.n	8009fba <quorem+0xea>
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	e7ee      	b.n	8009fc4 <quorem+0xf4>
	...

08009fe8 <_dtoa_r>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	ed2d 8b04 	vpush	{d8-d9}
 8009ff0:	ec57 6b10 	vmov	r6, r7, d0
 8009ff4:	b093      	sub	sp, #76	; 0x4c
 8009ff6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ff8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ffc:	9106      	str	r1, [sp, #24]
 8009ffe:	ee10 aa10 	vmov	sl, s0
 800a002:	4604      	mov	r4, r0
 800a004:	9209      	str	r2, [sp, #36]	; 0x24
 800a006:	930c      	str	r3, [sp, #48]	; 0x30
 800a008:	46bb      	mov	fp, r7
 800a00a:	b975      	cbnz	r5, 800a02a <_dtoa_r+0x42>
 800a00c:	2010      	movs	r0, #16
 800a00e:	f001 f94d 	bl	800b2ac <malloc>
 800a012:	4602      	mov	r2, r0
 800a014:	6260      	str	r0, [r4, #36]	; 0x24
 800a016:	b920      	cbnz	r0, 800a022 <_dtoa_r+0x3a>
 800a018:	4ba7      	ldr	r3, [pc, #668]	; (800a2b8 <_dtoa_r+0x2d0>)
 800a01a:	21ea      	movs	r1, #234	; 0xea
 800a01c:	48a7      	ldr	r0, [pc, #668]	; (800a2bc <_dtoa_r+0x2d4>)
 800a01e:	f002 f8bd 	bl	800c19c <__assert_func>
 800a022:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a026:	6005      	str	r5, [r0, #0]
 800a028:	60c5      	str	r5, [r0, #12]
 800a02a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a02c:	6819      	ldr	r1, [r3, #0]
 800a02e:	b151      	cbz	r1, 800a046 <_dtoa_r+0x5e>
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	604a      	str	r2, [r1, #4]
 800a034:	2301      	movs	r3, #1
 800a036:	4093      	lsls	r3, r2
 800a038:	608b      	str	r3, [r1, #8]
 800a03a:	4620      	mov	r0, r4
 800a03c:	f001 f99e 	bl	800b37c <_Bfree>
 800a040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
 800a046:	1e3b      	subs	r3, r7, #0
 800a048:	bfaa      	itet	ge
 800a04a:	2300      	movge	r3, #0
 800a04c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a050:	f8c8 3000 	strge.w	r3, [r8]
 800a054:	4b9a      	ldr	r3, [pc, #616]	; (800a2c0 <_dtoa_r+0x2d8>)
 800a056:	bfbc      	itt	lt
 800a058:	2201      	movlt	r2, #1
 800a05a:	f8c8 2000 	strlt.w	r2, [r8]
 800a05e:	ea33 030b 	bics.w	r3, r3, fp
 800a062:	d11b      	bne.n	800a09c <_dtoa_r+0xb4>
 800a064:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a066:	f242 730f 	movw	r3, #9999	; 0x270f
 800a06a:	6013      	str	r3, [r2, #0]
 800a06c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a070:	4333      	orrs	r3, r6
 800a072:	f000 8592 	beq.w	800ab9a <_dtoa_r+0xbb2>
 800a076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a078:	b963      	cbnz	r3, 800a094 <_dtoa_r+0xac>
 800a07a:	4b92      	ldr	r3, [pc, #584]	; (800a2c4 <_dtoa_r+0x2dc>)
 800a07c:	e022      	b.n	800a0c4 <_dtoa_r+0xdc>
 800a07e:	4b92      	ldr	r3, [pc, #584]	; (800a2c8 <_dtoa_r+0x2e0>)
 800a080:	9301      	str	r3, [sp, #4]
 800a082:	3308      	adds	r3, #8
 800a084:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	9801      	ldr	r0, [sp, #4]
 800a08a:	b013      	add	sp, #76	; 0x4c
 800a08c:	ecbd 8b04 	vpop	{d8-d9}
 800a090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a094:	4b8b      	ldr	r3, [pc, #556]	; (800a2c4 <_dtoa_r+0x2dc>)
 800a096:	9301      	str	r3, [sp, #4]
 800a098:	3303      	adds	r3, #3
 800a09a:	e7f3      	b.n	800a084 <_dtoa_r+0x9c>
 800a09c:	2200      	movs	r2, #0
 800a09e:	2300      	movs	r3, #0
 800a0a0:	4650      	mov	r0, sl
 800a0a2:	4659      	mov	r1, fp
 800a0a4:	f7f6 fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0a8:	ec4b ab19 	vmov	d9, sl, fp
 800a0ac:	4680      	mov	r8, r0
 800a0ae:	b158      	cbz	r0, 800a0c8 <_dtoa_r+0xe0>
 800a0b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	6013      	str	r3, [r2, #0]
 800a0b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f000 856b 	beq.w	800ab94 <_dtoa_r+0xbac>
 800a0be:	4883      	ldr	r0, [pc, #524]	; (800a2cc <_dtoa_r+0x2e4>)
 800a0c0:	6018      	str	r0, [r3, #0]
 800a0c2:	1e43      	subs	r3, r0, #1
 800a0c4:	9301      	str	r3, [sp, #4]
 800a0c6:	e7df      	b.n	800a088 <_dtoa_r+0xa0>
 800a0c8:	ec4b ab10 	vmov	d0, sl, fp
 800a0cc:	aa10      	add	r2, sp, #64	; 0x40
 800a0ce:	a911      	add	r1, sp, #68	; 0x44
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f001 fd01 	bl	800bad8 <__d2b>
 800a0d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a0da:	ee08 0a10 	vmov	s16, r0
 800a0de:	2d00      	cmp	r5, #0
 800a0e0:	f000 8084 	beq.w	800a1ec <_dtoa_r+0x204>
 800a0e4:	ee19 3a90 	vmov	r3, s19
 800a0e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a0f0:	4656      	mov	r6, sl
 800a0f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a0f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a0fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a0fe:	4b74      	ldr	r3, [pc, #464]	; (800a2d0 <_dtoa_r+0x2e8>)
 800a100:	2200      	movs	r2, #0
 800a102:	4630      	mov	r0, r6
 800a104:	4639      	mov	r1, r7
 800a106:	f7f6 f8bf 	bl	8000288 <__aeabi_dsub>
 800a10a:	a365      	add	r3, pc, #404	; (adr r3, 800a2a0 <_dtoa_r+0x2b8>)
 800a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a110:	f7f6 fa72 	bl	80005f8 <__aeabi_dmul>
 800a114:	a364      	add	r3, pc, #400	; (adr r3, 800a2a8 <_dtoa_r+0x2c0>)
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	f7f6 f8b7 	bl	800028c <__adddf3>
 800a11e:	4606      	mov	r6, r0
 800a120:	4628      	mov	r0, r5
 800a122:	460f      	mov	r7, r1
 800a124:	f7f6 f9fe 	bl	8000524 <__aeabi_i2d>
 800a128:	a361      	add	r3, pc, #388	; (adr r3, 800a2b0 <_dtoa_r+0x2c8>)
 800a12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12e:	f7f6 fa63 	bl	80005f8 <__aeabi_dmul>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4630      	mov	r0, r6
 800a138:	4639      	mov	r1, r7
 800a13a:	f7f6 f8a7 	bl	800028c <__adddf3>
 800a13e:	4606      	mov	r6, r0
 800a140:	460f      	mov	r7, r1
 800a142:	f7f6 fd09 	bl	8000b58 <__aeabi_d2iz>
 800a146:	2200      	movs	r2, #0
 800a148:	9000      	str	r0, [sp, #0]
 800a14a:	2300      	movs	r3, #0
 800a14c:	4630      	mov	r0, r6
 800a14e:	4639      	mov	r1, r7
 800a150:	f7f6 fcc4 	bl	8000adc <__aeabi_dcmplt>
 800a154:	b150      	cbz	r0, 800a16c <_dtoa_r+0x184>
 800a156:	9800      	ldr	r0, [sp, #0]
 800a158:	f7f6 f9e4 	bl	8000524 <__aeabi_i2d>
 800a15c:	4632      	mov	r2, r6
 800a15e:	463b      	mov	r3, r7
 800a160:	f7f6 fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a164:	b910      	cbnz	r0, 800a16c <_dtoa_r+0x184>
 800a166:	9b00      	ldr	r3, [sp, #0]
 800a168:	3b01      	subs	r3, #1
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	9b00      	ldr	r3, [sp, #0]
 800a16e:	2b16      	cmp	r3, #22
 800a170:	d85a      	bhi.n	800a228 <_dtoa_r+0x240>
 800a172:	9a00      	ldr	r2, [sp, #0]
 800a174:	4b57      	ldr	r3, [pc, #348]	; (800a2d4 <_dtoa_r+0x2ec>)
 800a176:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	ec51 0b19 	vmov	r0, r1, d9
 800a182:	f7f6 fcab 	bl	8000adc <__aeabi_dcmplt>
 800a186:	2800      	cmp	r0, #0
 800a188:	d050      	beq.n	800a22c <_dtoa_r+0x244>
 800a18a:	9b00      	ldr	r3, [sp, #0]
 800a18c:	3b01      	subs	r3, #1
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	2300      	movs	r3, #0
 800a192:	930b      	str	r3, [sp, #44]	; 0x2c
 800a194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a196:	1b5d      	subs	r5, r3, r5
 800a198:	1e6b      	subs	r3, r5, #1
 800a19a:	9305      	str	r3, [sp, #20]
 800a19c:	bf45      	ittet	mi
 800a19e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a1a2:	9304      	strmi	r3, [sp, #16]
 800a1a4:	2300      	movpl	r3, #0
 800a1a6:	2300      	movmi	r3, #0
 800a1a8:	bf4c      	ite	mi
 800a1aa:	9305      	strmi	r3, [sp, #20]
 800a1ac:	9304      	strpl	r3, [sp, #16]
 800a1ae:	9b00      	ldr	r3, [sp, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	db3d      	blt.n	800a230 <_dtoa_r+0x248>
 800a1b4:	9b05      	ldr	r3, [sp, #20]
 800a1b6:	9a00      	ldr	r2, [sp, #0]
 800a1b8:	920a      	str	r2, [sp, #40]	; 0x28
 800a1ba:	4413      	add	r3, r2
 800a1bc:	9305      	str	r3, [sp, #20]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	9307      	str	r3, [sp, #28]
 800a1c2:	9b06      	ldr	r3, [sp, #24]
 800a1c4:	2b09      	cmp	r3, #9
 800a1c6:	f200 8089 	bhi.w	800a2dc <_dtoa_r+0x2f4>
 800a1ca:	2b05      	cmp	r3, #5
 800a1cc:	bfc4      	itt	gt
 800a1ce:	3b04      	subgt	r3, #4
 800a1d0:	9306      	strgt	r3, [sp, #24]
 800a1d2:	9b06      	ldr	r3, [sp, #24]
 800a1d4:	f1a3 0302 	sub.w	r3, r3, #2
 800a1d8:	bfcc      	ite	gt
 800a1da:	2500      	movgt	r5, #0
 800a1dc:	2501      	movle	r5, #1
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	f200 8087 	bhi.w	800a2f2 <_dtoa_r+0x30a>
 800a1e4:	e8df f003 	tbb	[pc, r3]
 800a1e8:	59383a2d 	.word	0x59383a2d
 800a1ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a1f0:	441d      	add	r5, r3
 800a1f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a1f6:	2b20      	cmp	r3, #32
 800a1f8:	bfc1      	itttt	gt
 800a1fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a202:	fa0b f303 	lslgt.w	r3, fp, r3
 800a206:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a20a:	bfda      	itte	le
 800a20c:	f1c3 0320 	rsble	r3, r3, #32
 800a210:	fa06 f003 	lslle.w	r0, r6, r3
 800a214:	4318      	orrgt	r0, r3
 800a216:	f7f6 f975 	bl	8000504 <__aeabi_ui2d>
 800a21a:	2301      	movs	r3, #1
 800a21c:	4606      	mov	r6, r0
 800a21e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a222:	3d01      	subs	r5, #1
 800a224:	930e      	str	r3, [sp, #56]	; 0x38
 800a226:	e76a      	b.n	800a0fe <_dtoa_r+0x116>
 800a228:	2301      	movs	r3, #1
 800a22a:	e7b2      	b.n	800a192 <_dtoa_r+0x1aa>
 800a22c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a22e:	e7b1      	b.n	800a194 <_dtoa_r+0x1ac>
 800a230:	9b04      	ldr	r3, [sp, #16]
 800a232:	9a00      	ldr	r2, [sp, #0]
 800a234:	1a9b      	subs	r3, r3, r2
 800a236:	9304      	str	r3, [sp, #16]
 800a238:	4253      	negs	r3, r2
 800a23a:	9307      	str	r3, [sp, #28]
 800a23c:	2300      	movs	r3, #0
 800a23e:	930a      	str	r3, [sp, #40]	; 0x28
 800a240:	e7bf      	b.n	800a1c2 <_dtoa_r+0x1da>
 800a242:	2300      	movs	r3, #0
 800a244:	9308      	str	r3, [sp, #32]
 800a246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a248:	2b00      	cmp	r3, #0
 800a24a:	dc55      	bgt.n	800a2f8 <_dtoa_r+0x310>
 800a24c:	2301      	movs	r3, #1
 800a24e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a252:	461a      	mov	r2, r3
 800a254:	9209      	str	r2, [sp, #36]	; 0x24
 800a256:	e00c      	b.n	800a272 <_dtoa_r+0x28a>
 800a258:	2301      	movs	r3, #1
 800a25a:	e7f3      	b.n	800a244 <_dtoa_r+0x25c>
 800a25c:	2300      	movs	r3, #0
 800a25e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a260:	9308      	str	r3, [sp, #32]
 800a262:	9b00      	ldr	r3, [sp, #0]
 800a264:	4413      	add	r3, r2
 800a266:	9302      	str	r3, [sp, #8]
 800a268:	3301      	adds	r3, #1
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	9303      	str	r3, [sp, #12]
 800a26e:	bfb8      	it	lt
 800a270:	2301      	movlt	r3, #1
 800a272:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a274:	2200      	movs	r2, #0
 800a276:	6042      	str	r2, [r0, #4]
 800a278:	2204      	movs	r2, #4
 800a27a:	f102 0614 	add.w	r6, r2, #20
 800a27e:	429e      	cmp	r6, r3
 800a280:	6841      	ldr	r1, [r0, #4]
 800a282:	d93d      	bls.n	800a300 <_dtoa_r+0x318>
 800a284:	4620      	mov	r0, r4
 800a286:	f001 f839 	bl	800b2fc <_Balloc>
 800a28a:	9001      	str	r0, [sp, #4]
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d13b      	bne.n	800a308 <_dtoa_r+0x320>
 800a290:	4b11      	ldr	r3, [pc, #68]	; (800a2d8 <_dtoa_r+0x2f0>)
 800a292:	4602      	mov	r2, r0
 800a294:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a298:	e6c0      	b.n	800a01c <_dtoa_r+0x34>
 800a29a:	2301      	movs	r3, #1
 800a29c:	e7df      	b.n	800a25e <_dtoa_r+0x276>
 800a29e:	bf00      	nop
 800a2a0:	636f4361 	.word	0x636f4361
 800a2a4:	3fd287a7 	.word	0x3fd287a7
 800a2a8:	8b60c8b3 	.word	0x8b60c8b3
 800a2ac:	3fc68a28 	.word	0x3fc68a28
 800a2b0:	509f79fb 	.word	0x509f79fb
 800a2b4:	3fd34413 	.word	0x3fd34413
 800a2b8:	0800dfbe 	.word	0x0800dfbe
 800a2bc:	0800dfd5 	.word	0x0800dfd5
 800a2c0:	7ff00000 	.word	0x7ff00000
 800a2c4:	0800dfba 	.word	0x0800dfba
 800a2c8:	0800dfb1 	.word	0x0800dfb1
 800a2cc:	0800de31 	.word	0x0800de31
 800a2d0:	3ff80000 	.word	0x3ff80000
 800a2d4:	0800e140 	.word	0x0800e140
 800a2d8:	0800e030 	.word	0x0800e030
 800a2dc:	2501      	movs	r5, #1
 800a2de:	2300      	movs	r3, #0
 800a2e0:	9306      	str	r3, [sp, #24]
 800a2e2:	9508      	str	r5, [sp, #32]
 800a2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	2312      	movs	r3, #18
 800a2f0:	e7b0      	b.n	800a254 <_dtoa_r+0x26c>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	9308      	str	r3, [sp, #32]
 800a2f6:	e7f5      	b.n	800a2e4 <_dtoa_r+0x2fc>
 800a2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2fe:	e7b8      	b.n	800a272 <_dtoa_r+0x28a>
 800a300:	3101      	adds	r1, #1
 800a302:	6041      	str	r1, [r0, #4]
 800a304:	0052      	lsls	r2, r2, #1
 800a306:	e7b8      	b.n	800a27a <_dtoa_r+0x292>
 800a308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a30a:	9a01      	ldr	r2, [sp, #4]
 800a30c:	601a      	str	r2, [r3, #0]
 800a30e:	9b03      	ldr	r3, [sp, #12]
 800a310:	2b0e      	cmp	r3, #14
 800a312:	f200 809d 	bhi.w	800a450 <_dtoa_r+0x468>
 800a316:	2d00      	cmp	r5, #0
 800a318:	f000 809a 	beq.w	800a450 <_dtoa_r+0x468>
 800a31c:	9b00      	ldr	r3, [sp, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	dd32      	ble.n	800a388 <_dtoa_r+0x3a0>
 800a322:	4ab7      	ldr	r2, [pc, #732]	; (800a600 <_dtoa_r+0x618>)
 800a324:	f003 030f 	and.w	r3, r3, #15
 800a328:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a32c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a330:	9b00      	ldr	r3, [sp, #0]
 800a332:	05d8      	lsls	r0, r3, #23
 800a334:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a338:	d516      	bpl.n	800a368 <_dtoa_r+0x380>
 800a33a:	4bb2      	ldr	r3, [pc, #712]	; (800a604 <_dtoa_r+0x61c>)
 800a33c:	ec51 0b19 	vmov	r0, r1, d9
 800a340:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a344:	f7f6 fa82 	bl	800084c <__aeabi_ddiv>
 800a348:	f007 070f 	and.w	r7, r7, #15
 800a34c:	4682      	mov	sl, r0
 800a34e:	468b      	mov	fp, r1
 800a350:	2503      	movs	r5, #3
 800a352:	4eac      	ldr	r6, [pc, #688]	; (800a604 <_dtoa_r+0x61c>)
 800a354:	b957      	cbnz	r7, 800a36c <_dtoa_r+0x384>
 800a356:	4642      	mov	r2, r8
 800a358:	464b      	mov	r3, r9
 800a35a:	4650      	mov	r0, sl
 800a35c:	4659      	mov	r1, fp
 800a35e:	f7f6 fa75 	bl	800084c <__aeabi_ddiv>
 800a362:	4682      	mov	sl, r0
 800a364:	468b      	mov	fp, r1
 800a366:	e028      	b.n	800a3ba <_dtoa_r+0x3d2>
 800a368:	2502      	movs	r5, #2
 800a36a:	e7f2      	b.n	800a352 <_dtoa_r+0x36a>
 800a36c:	07f9      	lsls	r1, r7, #31
 800a36e:	d508      	bpl.n	800a382 <_dtoa_r+0x39a>
 800a370:	4640      	mov	r0, r8
 800a372:	4649      	mov	r1, r9
 800a374:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a378:	f7f6 f93e 	bl	80005f8 <__aeabi_dmul>
 800a37c:	3501      	adds	r5, #1
 800a37e:	4680      	mov	r8, r0
 800a380:	4689      	mov	r9, r1
 800a382:	107f      	asrs	r7, r7, #1
 800a384:	3608      	adds	r6, #8
 800a386:	e7e5      	b.n	800a354 <_dtoa_r+0x36c>
 800a388:	f000 809b 	beq.w	800a4c2 <_dtoa_r+0x4da>
 800a38c:	9b00      	ldr	r3, [sp, #0]
 800a38e:	4f9d      	ldr	r7, [pc, #628]	; (800a604 <_dtoa_r+0x61c>)
 800a390:	425e      	negs	r6, r3
 800a392:	4b9b      	ldr	r3, [pc, #620]	; (800a600 <_dtoa_r+0x618>)
 800a394:	f006 020f 	and.w	r2, r6, #15
 800a398:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	ec51 0b19 	vmov	r0, r1, d9
 800a3a4:	f7f6 f928 	bl	80005f8 <__aeabi_dmul>
 800a3a8:	1136      	asrs	r6, r6, #4
 800a3aa:	4682      	mov	sl, r0
 800a3ac:	468b      	mov	fp, r1
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	2502      	movs	r5, #2
 800a3b2:	2e00      	cmp	r6, #0
 800a3b4:	d17a      	bne.n	800a4ac <_dtoa_r+0x4c4>
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1d3      	bne.n	800a362 <_dtoa_r+0x37a>
 800a3ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 8082 	beq.w	800a4c6 <_dtoa_r+0x4de>
 800a3c2:	4b91      	ldr	r3, [pc, #580]	; (800a608 <_dtoa_r+0x620>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	4650      	mov	r0, sl
 800a3c8:	4659      	mov	r1, fp
 800a3ca:	f7f6 fb87 	bl	8000adc <__aeabi_dcmplt>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d079      	beq.n	800a4c6 <_dtoa_r+0x4de>
 800a3d2:	9b03      	ldr	r3, [sp, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d076      	beq.n	800a4c6 <_dtoa_r+0x4de>
 800a3d8:	9b02      	ldr	r3, [sp, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	dd36      	ble.n	800a44c <_dtoa_r+0x464>
 800a3de:	9b00      	ldr	r3, [sp, #0]
 800a3e0:	4650      	mov	r0, sl
 800a3e2:	4659      	mov	r1, fp
 800a3e4:	1e5f      	subs	r7, r3, #1
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	4b88      	ldr	r3, [pc, #544]	; (800a60c <_dtoa_r+0x624>)
 800a3ea:	f7f6 f905 	bl	80005f8 <__aeabi_dmul>
 800a3ee:	9e02      	ldr	r6, [sp, #8]
 800a3f0:	4682      	mov	sl, r0
 800a3f2:	468b      	mov	fp, r1
 800a3f4:	3501      	adds	r5, #1
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	f7f6 f894 	bl	8000524 <__aeabi_i2d>
 800a3fc:	4652      	mov	r2, sl
 800a3fe:	465b      	mov	r3, fp
 800a400:	f7f6 f8fa 	bl	80005f8 <__aeabi_dmul>
 800a404:	4b82      	ldr	r3, [pc, #520]	; (800a610 <_dtoa_r+0x628>)
 800a406:	2200      	movs	r2, #0
 800a408:	f7f5 ff40 	bl	800028c <__adddf3>
 800a40c:	46d0      	mov	r8, sl
 800a40e:	46d9      	mov	r9, fp
 800a410:	4682      	mov	sl, r0
 800a412:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a416:	2e00      	cmp	r6, #0
 800a418:	d158      	bne.n	800a4cc <_dtoa_r+0x4e4>
 800a41a:	4b7e      	ldr	r3, [pc, #504]	; (800a614 <_dtoa_r+0x62c>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	4640      	mov	r0, r8
 800a420:	4649      	mov	r1, r9
 800a422:	f7f5 ff31 	bl	8000288 <__aeabi_dsub>
 800a426:	4652      	mov	r2, sl
 800a428:	465b      	mov	r3, fp
 800a42a:	4680      	mov	r8, r0
 800a42c:	4689      	mov	r9, r1
 800a42e:	f7f6 fb73 	bl	8000b18 <__aeabi_dcmpgt>
 800a432:	2800      	cmp	r0, #0
 800a434:	f040 8295 	bne.w	800a962 <_dtoa_r+0x97a>
 800a438:	4652      	mov	r2, sl
 800a43a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a43e:	4640      	mov	r0, r8
 800a440:	4649      	mov	r1, r9
 800a442:	f7f6 fb4b 	bl	8000adc <__aeabi_dcmplt>
 800a446:	2800      	cmp	r0, #0
 800a448:	f040 8289 	bne.w	800a95e <_dtoa_r+0x976>
 800a44c:	ec5b ab19 	vmov	sl, fp, d9
 800a450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a452:	2b00      	cmp	r3, #0
 800a454:	f2c0 8148 	blt.w	800a6e8 <_dtoa_r+0x700>
 800a458:	9a00      	ldr	r2, [sp, #0]
 800a45a:	2a0e      	cmp	r2, #14
 800a45c:	f300 8144 	bgt.w	800a6e8 <_dtoa_r+0x700>
 800a460:	4b67      	ldr	r3, [pc, #412]	; (800a600 <_dtoa_r+0x618>)
 800a462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a466:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f280 80d5 	bge.w	800a61c <_dtoa_r+0x634>
 800a472:	9b03      	ldr	r3, [sp, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	f300 80d1 	bgt.w	800a61c <_dtoa_r+0x634>
 800a47a:	f040 826f 	bne.w	800a95c <_dtoa_r+0x974>
 800a47e:	4b65      	ldr	r3, [pc, #404]	; (800a614 <_dtoa_r+0x62c>)
 800a480:	2200      	movs	r2, #0
 800a482:	4640      	mov	r0, r8
 800a484:	4649      	mov	r1, r9
 800a486:	f7f6 f8b7 	bl	80005f8 <__aeabi_dmul>
 800a48a:	4652      	mov	r2, sl
 800a48c:	465b      	mov	r3, fp
 800a48e:	f7f6 fb39 	bl	8000b04 <__aeabi_dcmpge>
 800a492:	9e03      	ldr	r6, [sp, #12]
 800a494:	4637      	mov	r7, r6
 800a496:	2800      	cmp	r0, #0
 800a498:	f040 8245 	bne.w	800a926 <_dtoa_r+0x93e>
 800a49c:	9d01      	ldr	r5, [sp, #4]
 800a49e:	2331      	movs	r3, #49	; 0x31
 800a4a0:	f805 3b01 	strb.w	r3, [r5], #1
 800a4a4:	9b00      	ldr	r3, [sp, #0]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	e240      	b.n	800a92e <_dtoa_r+0x946>
 800a4ac:	07f2      	lsls	r2, r6, #31
 800a4ae:	d505      	bpl.n	800a4bc <_dtoa_r+0x4d4>
 800a4b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4b4:	f7f6 f8a0 	bl	80005f8 <__aeabi_dmul>
 800a4b8:	3501      	adds	r5, #1
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	1076      	asrs	r6, r6, #1
 800a4be:	3708      	adds	r7, #8
 800a4c0:	e777      	b.n	800a3b2 <_dtoa_r+0x3ca>
 800a4c2:	2502      	movs	r5, #2
 800a4c4:	e779      	b.n	800a3ba <_dtoa_r+0x3d2>
 800a4c6:	9f00      	ldr	r7, [sp, #0]
 800a4c8:	9e03      	ldr	r6, [sp, #12]
 800a4ca:	e794      	b.n	800a3f6 <_dtoa_r+0x40e>
 800a4cc:	9901      	ldr	r1, [sp, #4]
 800a4ce:	4b4c      	ldr	r3, [pc, #304]	; (800a600 <_dtoa_r+0x618>)
 800a4d0:	4431      	add	r1, r6
 800a4d2:	910d      	str	r1, [sp, #52]	; 0x34
 800a4d4:	9908      	ldr	r1, [sp, #32]
 800a4d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a4da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4de:	2900      	cmp	r1, #0
 800a4e0:	d043      	beq.n	800a56a <_dtoa_r+0x582>
 800a4e2:	494d      	ldr	r1, [pc, #308]	; (800a618 <_dtoa_r+0x630>)
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	f7f6 f9b1 	bl	800084c <__aeabi_ddiv>
 800a4ea:	4652      	mov	r2, sl
 800a4ec:	465b      	mov	r3, fp
 800a4ee:	f7f5 fecb 	bl	8000288 <__aeabi_dsub>
 800a4f2:	9d01      	ldr	r5, [sp, #4]
 800a4f4:	4682      	mov	sl, r0
 800a4f6:	468b      	mov	fp, r1
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	f7f6 fb2c 	bl	8000b58 <__aeabi_d2iz>
 800a500:	4606      	mov	r6, r0
 800a502:	f7f6 f80f 	bl	8000524 <__aeabi_i2d>
 800a506:	4602      	mov	r2, r0
 800a508:	460b      	mov	r3, r1
 800a50a:	4640      	mov	r0, r8
 800a50c:	4649      	mov	r1, r9
 800a50e:	f7f5 febb 	bl	8000288 <__aeabi_dsub>
 800a512:	3630      	adds	r6, #48	; 0x30
 800a514:	f805 6b01 	strb.w	r6, [r5], #1
 800a518:	4652      	mov	r2, sl
 800a51a:	465b      	mov	r3, fp
 800a51c:	4680      	mov	r8, r0
 800a51e:	4689      	mov	r9, r1
 800a520:	f7f6 fadc 	bl	8000adc <__aeabi_dcmplt>
 800a524:	2800      	cmp	r0, #0
 800a526:	d163      	bne.n	800a5f0 <_dtoa_r+0x608>
 800a528:	4642      	mov	r2, r8
 800a52a:	464b      	mov	r3, r9
 800a52c:	4936      	ldr	r1, [pc, #216]	; (800a608 <_dtoa_r+0x620>)
 800a52e:	2000      	movs	r0, #0
 800a530:	f7f5 feaa 	bl	8000288 <__aeabi_dsub>
 800a534:	4652      	mov	r2, sl
 800a536:	465b      	mov	r3, fp
 800a538:	f7f6 fad0 	bl	8000adc <__aeabi_dcmplt>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	f040 80b5 	bne.w	800a6ac <_dtoa_r+0x6c4>
 800a542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a544:	429d      	cmp	r5, r3
 800a546:	d081      	beq.n	800a44c <_dtoa_r+0x464>
 800a548:	4b30      	ldr	r3, [pc, #192]	; (800a60c <_dtoa_r+0x624>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	4650      	mov	r0, sl
 800a54e:	4659      	mov	r1, fp
 800a550:	f7f6 f852 	bl	80005f8 <__aeabi_dmul>
 800a554:	4b2d      	ldr	r3, [pc, #180]	; (800a60c <_dtoa_r+0x624>)
 800a556:	4682      	mov	sl, r0
 800a558:	468b      	mov	fp, r1
 800a55a:	4640      	mov	r0, r8
 800a55c:	4649      	mov	r1, r9
 800a55e:	2200      	movs	r2, #0
 800a560:	f7f6 f84a 	bl	80005f8 <__aeabi_dmul>
 800a564:	4680      	mov	r8, r0
 800a566:	4689      	mov	r9, r1
 800a568:	e7c6      	b.n	800a4f8 <_dtoa_r+0x510>
 800a56a:	4650      	mov	r0, sl
 800a56c:	4659      	mov	r1, fp
 800a56e:	f7f6 f843 	bl	80005f8 <__aeabi_dmul>
 800a572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a574:	9d01      	ldr	r5, [sp, #4]
 800a576:	930f      	str	r3, [sp, #60]	; 0x3c
 800a578:	4682      	mov	sl, r0
 800a57a:	468b      	mov	fp, r1
 800a57c:	4649      	mov	r1, r9
 800a57e:	4640      	mov	r0, r8
 800a580:	f7f6 faea 	bl	8000b58 <__aeabi_d2iz>
 800a584:	4606      	mov	r6, r0
 800a586:	f7f5 ffcd 	bl	8000524 <__aeabi_i2d>
 800a58a:	3630      	adds	r6, #48	; 0x30
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4640      	mov	r0, r8
 800a592:	4649      	mov	r1, r9
 800a594:	f7f5 fe78 	bl	8000288 <__aeabi_dsub>
 800a598:	f805 6b01 	strb.w	r6, [r5], #1
 800a59c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a59e:	429d      	cmp	r5, r3
 800a5a0:	4680      	mov	r8, r0
 800a5a2:	4689      	mov	r9, r1
 800a5a4:	f04f 0200 	mov.w	r2, #0
 800a5a8:	d124      	bne.n	800a5f4 <_dtoa_r+0x60c>
 800a5aa:	4b1b      	ldr	r3, [pc, #108]	; (800a618 <_dtoa_r+0x630>)
 800a5ac:	4650      	mov	r0, sl
 800a5ae:	4659      	mov	r1, fp
 800a5b0:	f7f5 fe6c 	bl	800028c <__adddf3>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	f7f6 faac 	bl	8000b18 <__aeabi_dcmpgt>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d173      	bne.n	800a6ac <_dtoa_r+0x6c4>
 800a5c4:	4652      	mov	r2, sl
 800a5c6:	465b      	mov	r3, fp
 800a5c8:	4913      	ldr	r1, [pc, #76]	; (800a618 <_dtoa_r+0x630>)
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	f7f5 fe5c 	bl	8000288 <__aeabi_dsub>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4640      	mov	r0, r8
 800a5d6:	4649      	mov	r1, r9
 800a5d8:	f7f6 fa80 	bl	8000adc <__aeabi_dcmplt>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	f43f af35 	beq.w	800a44c <_dtoa_r+0x464>
 800a5e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a5e4:	1e6b      	subs	r3, r5, #1
 800a5e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5ec:	2b30      	cmp	r3, #48	; 0x30
 800a5ee:	d0f8      	beq.n	800a5e2 <_dtoa_r+0x5fa>
 800a5f0:	9700      	str	r7, [sp, #0]
 800a5f2:	e049      	b.n	800a688 <_dtoa_r+0x6a0>
 800a5f4:	4b05      	ldr	r3, [pc, #20]	; (800a60c <_dtoa_r+0x624>)
 800a5f6:	f7f5 ffff 	bl	80005f8 <__aeabi_dmul>
 800a5fa:	4680      	mov	r8, r0
 800a5fc:	4689      	mov	r9, r1
 800a5fe:	e7bd      	b.n	800a57c <_dtoa_r+0x594>
 800a600:	0800e140 	.word	0x0800e140
 800a604:	0800e118 	.word	0x0800e118
 800a608:	3ff00000 	.word	0x3ff00000
 800a60c:	40240000 	.word	0x40240000
 800a610:	401c0000 	.word	0x401c0000
 800a614:	40140000 	.word	0x40140000
 800a618:	3fe00000 	.word	0x3fe00000
 800a61c:	9d01      	ldr	r5, [sp, #4]
 800a61e:	4656      	mov	r6, sl
 800a620:	465f      	mov	r7, fp
 800a622:	4642      	mov	r2, r8
 800a624:	464b      	mov	r3, r9
 800a626:	4630      	mov	r0, r6
 800a628:	4639      	mov	r1, r7
 800a62a:	f7f6 f90f 	bl	800084c <__aeabi_ddiv>
 800a62e:	f7f6 fa93 	bl	8000b58 <__aeabi_d2iz>
 800a632:	4682      	mov	sl, r0
 800a634:	f7f5 ff76 	bl	8000524 <__aeabi_i2d>
 800a638:	4642      	mov	r2, r8
 800a63a:	464b      	mov	r3, r9
 800a63c:	f7f5 ffdc 	bl	80005f8 <__aeabi_dmul>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4630      	mov	r0, r6
 800a646:	4639      	mov	r1, r7
 800a648:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a64c:	f7f5 fe1c 	bl	8000288 <__aeabi_dsub>
 800a650:	f805 6b01 	strb.w	r6, [r5], #1
 800a654:	9e01      	ldr	r6, [sp, #4]
 800a656:	9f03      	ldr	r7, [sp, #12]
 800a658:	1bae      	subs	r6, r5, r6
 800a65a:	42b7      	cmp	r7, r6
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	d135      	bne.n	800a6ce <_dtoa_r+0x6e6>
 800a662:	f7f5 fe13 	bl	800028c <__adddf3>
 800a666:	4642      	mov	r2, r8
 800a668:	464b      	mov	r3, r9
 800a66a:	4606      	mov	r6, r0
 800a66c:	460f      	mov	r7, r1
 800a66e:	f7f6 fa53 	bl	8000b18 <__aeabi_dcmpgt>
 800a672:	b9d0      	cbnz	r0, 800a6aa <_dtoa_r+0x6c2>
 800a674:	4642      	mov	r2, r8
 800a676:	464b      	mov	r3, r9
 800a678:	4630      	mov	r0, r6
 800a67a:	4639      	mov	r1, r7
 800a67c:	f7f6 fa24 	bl	8000ac8 <__aeabi_dcmpeq>
 800a680:	b110      	cbz	r0, 800a688 <_dtoa_r+0x6a0>
 800a682:	f01a 0f01 	tst.w	sl, #1
 800a686:	d110      	bne.n	800a6aa <_dtoa_r+0x6c2>
 800a688:	4620      	mov	r0, r4
 800a68a:	ee18 1a10 	vmov	r1, s16
 800a68e:	f000 fe75 	bl	800b37c <_Bfree>
 800a692:	2300      	movs	r3, #0
 800a694:	9800      	ldr	r0, [sp, #0]
 800a696:	702b      	strb	r3, [r5, #0]
 800a698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a69a:	3001      	adds	r0, #1
 800a69c:	6018      	str	r0, [r3, #0]
 800a69e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f43f acf1 	beq.w	800a088 <_dtoa_r+0xa0>
 800a6a6:	601d      	str	r5, [r3, #0]
 800a6a8:	e4ee      	b.n	800a088 <_dtoa_r+0xa0>
 800a6aa:	9f00      	ldr	r7, [sp, #0]
 800a6ac:	462b      	mov	r3, r5
 800a6ae:	461d      	mov	r5, r3
 800a6b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6b4:	2a39      	cmp	r2, #57	; 0x39
 800a6b6:	d106      	bne.n	800a6c6 <_dtoa_r+0x6de>
 800a6b8:	9a01      	ldr	r2, [sp, #4]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d1f7      	bne.n	800a6ae <_dtoa_r+0x6c6>
 800a6be:	9901      	ldr	r1, [sp, #4]
 800a6c0:	2230      	movs	r2, #48	; 0x30
 800a6c2:	3701      	adds	r7, #1
 800a6c4:	700a      	strb	r2, [r1, #0]
 800a6c6:	781a      	ldrb	r2, [r3, #0]
 800a6c8:	3201      	adds	r2, #1
 800a6ca:	701a      	strb	r2, [r3, #0]
 800a6cc:	e790      	b.n	800a5f0 <_dtoa_r+0x608>
 800a6ce:	4ba6      	ldr	r3, [pc, #664]	; (800a968 <_dtoa_r+0x980>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f7f5 ff91 	bl	80005f8 <__aeabi_dmul>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4606      	mov	r6, r0
 800a6dc:	460f      	mov	r7, r1
 800a6de:	f7f6 f9f3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d09d      	beq.n	800a622 <_dtoa_r+0x63a>
 800a6e6:	e7cf      	b.n	800a688 <_dtoa_r+0x6a0>
 800a6e8:	9a08      	ldr	r2, [sp, #32]
 800a6ea:	2a00      	cmp	r2, #0
 800a6ec:	f000 80d7 	beq.w	800a89e <_dtoa_r+0x8b6>
 800a6f0:	9a06      	ldr	r2, [sp, #24]
 800a6f2:	2a01      	cmp	r2, #1
 800a6f4:	f300 80ba 	bgt.w	800a86c <_dtoa_r+0x884>
 800a6f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6fa:	2a00      	cmp	r2, #0
 800a6fc:	f000 80b2 	beq.w	800a864 <_dtoa_r+0x87c>
 800a700:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a704:	9e07      	ldr	r6, [sp, #28]
 800a706:	9d04      	ldr	r5, [sp, #16]
 800a708:	9a04      	ldr	r2, [sp, #16]
 800a70a:	441a      	add	r2, r3
 800a70c:	9204      	str	r2, [sp, #16]
 800a70e:	9a05      	ldr	r2, [sp, #20]
 800a710:	2101      	movs	r1, #1
 800a712:	441a      	add	r2, r3
 800a714:	4620      	mov	r0, r4
 800a716:	9205      	str	r2, [sp, #20]
 800a718:	f000 ff32 	bl	800b580 <__i2b>
 800a71c:	4607      	mov	r7, r0
 800a71e:	2d00      	cmp	r5, #0
 800a720:	dd0c      	ble.n	800a73c <_dtoa_r+0x754>
 800a722:	9b05      	ldr	r3, [sp, #20]
 800a724:	2b00      	cmp	r3, #0
 800a726:	dd09      	ble.n	800a73c <_dtoa_r+0x754>
 800a728:	42ab      	cmp	r3, r5
 800a72a:	9a04      	ldr	r2, [sp, #16]
 800a72c:	bfa8      	it	ge
 800a72e:	462b      	movge	r3, r5
 800a730:	1ad2      	subs	r2, r2, r3
 800a732:	9204      	str	r2, [sp, #16]
 800a734:	9a05      	ldr	r2, [sp, #20]
 800a736:	1aed      	subs	r5, r5, r3
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	9305      	str	r3, [sp, #20]
 800a73c:	9b07      	ldr	r3, [sp, #28]
 800a73e:	b31b      	cbz	r3, 800a788 <_dtoa_r+0x7a0>
 800a740:	9b08      	ldr	r3, [sp, #32]
 800a742:	2b00      	cmp	r3, #0
 800a744:	f000 80af 	beq.w	800a8a6 <_dtoa_r+0x8be>
 800a748:	2e00      	cmp	r6, #0
 800a74a:	dd13      	ble.n	800a774 <_dtoa_r+0x78c>
 800a74c:	4639      	mov	r1, r7
 800a74e:	4632      	mov	r2, r6
 800a750:	4620      	mov	r0, r4
 800a752:	f000 ffd5 	bl	800b700 <__pow5mult>
 800a756:	ee18 2a10 	vmov	r2, s16
 800a75a:	4601      	mov	r1, r0
 800a75c:	4607      	mov	r7, r0
 800a75e:	4620      	mov	r0, r4
 800a760:	f000 ff24 	bl	800b5ac <__multiply>
 800a764:	ee18 1a10 	vmov	r1, s16
 800a768:	4680      	mov	r8, r0
 800a76a:	4620      	mov	r0, r4
 800a76c:	f000 fe06 	bl	800b37c <_Bfree>
 800a770:	ee08 8a10 	vmov	s16, r8
 800a774:	9b07      	ldr	r3, [sp, #28]
 800a776:	1b9a      	subs	r2, r3, r6
 800a778:	d006      	beq.n	800a788 <_dtoa_r+0x7a0>
 800a77a:	ee18 1a10 	vmov	r1, s16
 800a77e:	4620      	mov	r0, r4
 800a780:	f000 ffbe 	bl	800b700 <__pow5mult>
 800a784:	ee08 0a10 	vmov	s16, r0
 800a788:	2101      	movs	r1, #1
 800a78a:	4620      	mov	r0, r4
 800a78c:	f000 fef8 	bl	800b580 <__i2b>
 800a790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a792:	2b00      	cmp	r3, #0
 800a794:	4606      	mov	r6, r0
 800a796:	f340 8088 	ble.w	800a8aa <_dtoa_r+0x8c2>
 800a79a:	461a      	mov	r2, r3
 800a79c:	4601      	mov	r1, r0
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f000 ffae 	bl	800b700 <__pow5mult>
 800a7a4:	9b06      	ldr	r3, [sp, #24]
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	f340 8081 	ble.w	800a8b0 <_dtoa_r+0x8c8>
 800a7ae:	f04f 0800 	mov.w	r8, #0
 800a7b2:	6933      	ldr	r3, [r6, #16]
 800a7b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a7b8:	6918      	ldr	r0, [r3, #16]
 800a7ba:	f000 fe91 	bl	800b4e0 <__hi0bits>
 800a7be:	f1c0 0020 	rsb	r0, r0, #32
 800a7c2:	9b05      	ldr	r3, [sp, #20]
 800a7c4:	4418      	add	r0, r3
 800a7c6:	f010 001f 	ands.w	r0, r0, #31
 800a7ca:	f000 8092 	beq.w	800a8f2 <_dtoa_r+0x90a>
 800a7ce:	f1c0 0320 	rsb	r3, r0, #32
 800a7d2:	2b04      	cmp	r3, #4
 800a7d4:	f340 808a 	ble.w	800a8ec <_dtoa_r+0x904>
 800a7d8:	f1c0 001c 	rsb	r0, r0, #28
 800a7dc:	9b04      	ldr	r3, [sp, #16]
 800a7de:	4403      	add	r3, r0
 800a7e0:	9304      	str	r3, [sp, #16]
 800a7e2:	9b05      	ldr	r3, [sp, #20]
 800a7e4:	4403      	add	r3, r0
 800a7e6:	4405      	add	r5, r0
 800a7e8:	9305      	str	r3, [sp, #20]
 800a7ea:	9b04      	ldr	r3, [sp, #16]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dd07      	ble.n	800a800 <_dtoa_r+0x818>
 800a7f0:	ee18 1a10 	vmov	r1, s16
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f000 ffdc 	bl	800b7b4 <__lshift>
 800a7fc:	ee08 0a10 	vmov	s16, r0
 800a800:	9b05      	ldr	r3, [sp, #20]
 800a802:	2b00      	cmp	r3, #0
 800a804:	dd05      	ble.n	800a812 <_dtoa_r+0x82a>
 800a806:	4631      	mov	r1, r6
 800a808:	461a      	mov	r2, r3
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 ffd2 	bl	800b7b4 <__lshift>
 800a810:	4606      	mov	r6, r0
 800a812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a814:	2b00      	cmp	r3, #0
 800a816:	d06e      	beq.n	800a8f6 <_dtoa_r+0x90e>
 800a818:	ee18 0a10 	vmov	r0, s16
 800a81c:	4631      	mov	r1, r6
 800a81e:	f001 f839 	bl	800b894 <__mcmp>
 800a822:	2800      	cmp	r0, #0
 800a824:	da67      	bge.n	800a8f6 <_dtoa_r+0x90e>
 800a826:	9b00      	ldr	r3, [sp, #0]
 800a828:	3b01      	subs	r3, #1
 800a82a:	ee18 1a10 	vmov	r1, s16
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	220a      	movs	r2, #10
 800a832:	2300      	movs	r3, #0
 800a834:	4620      	mov	r0, r4
 800a836:	f000 fdc3 	bl	800b3c0 <__multadd>
 800a83a:	9b08      	ldr	r3, [sp, #32]
 800a83c:	ee08 0a10 	vmov	s16, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	f000 81b1 	beq.w	800aba8 <_dtoa_r+0xbc0>
 800a846:	2300      	movs	r3, #0
 800a848:	4639      	mov	r1, r7
 800a84a:	220a      	movs	r2, #10
 800a84c:	4620      	mov	r0, r4
 800a84e:	f000 fdb7 	bl	800b3c0 <__multadd>
 800a852:	9b02      	ldr	r3, [sp, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	4607      	mov	r7, r0
 800a858:	f300 808e 	bgt.w	800a978 <_dtoa_r+0x990>
 800a85c:	9b06      	ldr	r3, [sp, #24]
 800a85e:	2b02      	cmp	r3, #2
 800a860:	dc51      	bgt.n	800a906 <_dtoa_r+0x91e>
 800a862:	e089      	b.n	800a978 <_dtoa_r+0x990>
 800a864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a86a:	e74b      	b.n	800a704 <_dtoa_r+0x71c>
 800a86c:	9b03      	ldr	r3, [sp, #12]
 800a86e:	1e5e      	subs	r6, r3, #1
 800a870:	9b07      	ldr	r3, [sp, #28]
 800a872:	42b3      	cmp	r3, r6
 800a874:	bfbf      	itttt	lt
 800a876:	9b07      	ldrlt	r3, [sp, #28]
 800a878:	9607      	strlt	r6, [sp, #28]
 800a87a:	1af2      	sublt	r2, r6, r3
 800a87c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a87e:	bfb6      	itet	lt
 800a880:	189b      	addlt	r3, r3, r2
 800a882:	1b9e      	subge	r6, r3, r6
 800a884:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a886:	9b03      	ldr	r3, [sp, #12]
 800a888:	bfb8      	it	lt
 800a88a:	2600      	movlt	r6, #0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	bfb7      	itett	lt
 800a890:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a894:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a898:	1a9d      	sublt	r5, r3, r2
 800a89a:	2300      	movlt	r3, #0
 800a89c:	e734      	b.n	800a708 <_dtoa_r+0x720>
 800a89e:	9e07      	ldr	r6, [sp, #28]
 800a8a0:	9d04      	ldr	r5, [sp, #16]
 800a8a2:	9f08      	ldr	r7, [sp, #32]
 800a8a4:	e73b      	b.n	800a71e <_dtoa_r+0x736>
 800a8a6:	9a07      	ldr	r2, [sp, #28]
 800a8a8:	e767      	b.n	800a77a <_dtoa_r+0x792>
 800a8aa:	9b06      	ldr	r3, [sp, #24]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	dc18      	bgt.n	800a8e2 <_dtoa_r+0x8fa>
 800a8b0:	f1ba 0f00 	cmp.w	sl, #0
 800a8b4:	d115      	bne.n	800a8e2 <_dtoa_r+0x8fa>
 800a8b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8ba:	b993      	cbnz	r3, 800a8e2 <_dtoa_r+0x8fa>
 800a8bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a8c0:	0d1b      	lsrs	r3, r3, #20
 800a8c2:	051b      	lsls	r3, r3, #20
 800a8c4:	b183      	cbz	r3, 800a8e8 <_dtoa_r+0x900>
 800a8c6:	9b04      	ldr	r3, [sp, #16]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	9b05      	ldr	r3, [sp, #20]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	9305      	str	r3, [sp, #20]
 800a8d2:	f04f 0801 	mov.w	r8, #1
 800a8d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f47f af6a 	bne.w	800a7b2 <_dtoa_r+0x7ca>
 800a8de:	2001      	movs	r0, #1
 800a8e0:	e76f      	b.n	800a7c2 <_dtoa_r+0x7da>
 800a8e2:	f04f 0800 	mov.w	r8, #0
 800a8e6:	e7f6      	b.n	800a8d6 <_dtoa_r+0x8ee>
 800a8e8:	4698      	mov	r8, r3
 800a8ea:	e7f4      	b.n	800a8d6 <_dtoa_r+0x8ee>
 800a8ec:	f43f af7d 	beq.w	800a7ea <_dtoa_r+0x802>
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	301c      	adds	r0, #28
 800a8f4:	e772      	b.n	800a7dc <_dtoa_r+0x7f4>
 800a8f6:	9b03      	ldr	r3, [sp, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	dc37      	bgt.n	800a96c <_dtoa_r+0x984>
 800a8fc:	9b06      	ldr	r3, [sp, #24]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	dd34      	ble.n	800a96c <_dtoa_r+0x984>
 800a902:	9b03      	ldr	r3, [sp, #12]
 800a904:	9302      	str	r3, [sp, #8]
 800a906:	9b02      	ldr	r3, [sp, #8]
 800a908:	b96b      	cbnz	r3, 800a926 <_dtoa_r+0x93e>
 800a90a:	4631      	mov	r1, r6
 800a90c:	2205      	movs	r2, #5
 800a90e:	4620      	mov	r0, r4
 800a910:	f000 fd56 	bl	800b3c0 <__multadd>
 800a914:	4601      	mov	r1, r0
 800a916:	4606      	mov	r6, r0
 800a918:	ee18 0a10 	vmov	r0, s16
 800a91c:	f000 ffba 	bl	800b894 <__mcmp>
 800a920:	2800      	cmp	r0, #0
 800a922:	f73f adbb 	bgt.w	800a49c <_dtoa_r+0x4b4>
 800a926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a928:	9d01      	ldr	r5, [sp, #4]
 800a92a:	43db      	mvns	r3, r3
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	f04f 0800 	mov.w	r8, #0
 800a932:	4631      	mov	r1, r6
 800a934:	4620      	mov	r0, r4
 800a936:	f000 fd21 	bl	800b37c <_Bfree>
 800a93a:	2f00      	cmp	r7, #0
 800a93c:	f43f aea4 	beq.w	800a688 <_dtoa_r+0x6a0>
 800a940:	f1b8 0f00 	cmp.w	r8, #0
 800a944:	d005      	beq.n	800a952 <_dtoa_r+0x96a>
 800a946:	45b8      	cmp	r8, r7
 800a948:	d003      	beq.n	800a952 <_dtoa_r+0x96a>
 800a94a:	4641      	mov	r1, r8
 800a94c:	4620      	mov	r0, r4
 800a94e:	f000 fd15 	bl	800b37c <_Bfree>
 800a952:	4639      	mov	r1, r7
 800a954:	4620      	mov	r0, r4
 800a956:	f000 fd11 	bl	800b37c <_Bfree>
 800a95a:	e695      	b.n	800a688 <_dtoa_r+0x6a0>
 800a95c:	2600      	movs	r6, #0
 800a95e:	4637      	mov	r7, r6
 800a960:	e7e1      	b.n	800a926 <_dtoa_r+0x93e>
 800a962:	9700      	str	r7, [sp, #0]
 800a964:	4637      	mov	r7, r6
 800a966:	e599      	b.n	800a49c <_dtoa_r+0x4b4>
 800a968:	40240000 	.word	0x40240000
 800a96c:	9b08      	ldr	r3, [sp, #32]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f000 80ca 	beq.w	800ab08 <_dtoa_r+0xb20>
 800a974:	9b03      	ldr	r3, [sp, #12]
 800a976:	9302      	str	r3, [sp, #8]
 800a978:	2d00      	cmp	r5, #0
 800a97a:	dd05      	ble.n	800a988 <_dtoa_r+0x9a0>
 800a97c:	4639      	mov	r1, r7
 800a97e:	462a      	mov	r2, r5
 800a980:	4620      	mov	r0, r4
 800a982:	f000 ff17 	bl	800b7b4 <__lshift>
 800a986:	4607      	mov	r7, r0
 800a988:	f1b8 0f00 	cmp.w	r8, #0
 800a98c:	d05b      	beq.n	800aa46 <_dtoa_r+0xa5e>
 800a98e:	6879      	ldr	r1, [r7, #4]
 800a990:	4620      	mov	r0, r4
 800a992:	f000 fcb3 	bl	800b2fc <_Balloc>
 800a996:	4605      	mov	r5, r0
 800a998:	b928      	cbnz	r0, 800a9a6 <_dtoa_r+0x9be>
 800a99a:	4b87      	ldr	r3, [pc, #540]	; (800abb8 <_dtoa_r+0xbd0>)
 800a99c:	4602      	mov	r2, r0
 800a99e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a9a2:	f7ff bb3b 	b.w	800a01c <_dtoa_r+0x34>
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	3202      	adds	r2, #2
 800a9aa:	0092      	lsls	r2, r2, #2
 800a9ac:	f107 010c 	add.w	r1, r7, #12
 800a9b0:	300c      	adds	r0, #12
 800a9b2:	f000 fc95 	bl	800b2e0 <memcpy>
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f000 fefa 	bl	800b7b4 <__lshift>
 800a9c0:	9b01      	ldr	r3, [sp, #4]
 800a9c2:	f103 0901 	add.w	r9, r3, #1
 800a9c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	9305      	str	r3, [sp, #20]
 800a9ce:	f00a 0301 	and.w	r3, sl, #1
 800a9d2:	46b8      	mov	r8, r7
 800a9d4:	9304      	str	r3, [sp, #16]
 800a9d6:	4607      	mov	r7, r0
 800a9d8:	4631      	mov	r1, r6
 800a9da:	ee18 0a10 	vmov	r0, s16
 800a9de:	f7ff fa77 	bl	8009ed0 <quorem>
 800a9e2:	4641      	mov	r1, r8
 800a9e4:	9002      	str	r0, [sp, #8]
 800a9e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a9ea:	ee18 0a10 	vmov	r0, s16
 800a9ee:	f000 ff51 	bl	800b894 <__mcmp>
 800a9f2:	463a      	mov	r2, r7
 800a9f4:	9003      	str	r0, [sp, #12]
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f000 ff67 	bl	800b8cc <__mdiff>
 800a9fe:	68c2      	ldr	r2, [r0, #12]
 800aa00:	f109 3bff 	add.w	fp, r9, #4294967295
 800aa04:	4605      	mov	r5, r0
 800aa06:	bb02      	cbnz	r2, 800aa4a <_dtoa_r+0xa62>
 800aa08:	4601      	mov	r1, r0
 800aa0a:	ee18 0a10 	vmov	r0, s16
 800aa0e:	f000 ff41 	bl	800b894 <__mcmp>
 800aa12:	4602      	mov	r2, r0
 800aa14:	4629      	mov	r1, r5
 800aa16:	4620      	mov	r0, r4
 800aa18:	9207      	str	r2, [sp, #28]
 800aa1a:	f000 fcaf 	bl	800b37c <_Bfree>
 800aa1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aa22:	ea43 0102 	orr.w	r1, r3, r2
 800aa26:	9b04      	ldr	r3, [sp, #16]
 800aa28:	430b      	orrs	r3, r1
 800aa2a:	464d      	mov	r5, r9
 800aa2c:	d10f      	bne.n	800aa4e <_dtoa_r+0xa66>
 800aa2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa32:	d02a      	beq.n	800aa8a <_dtoa_r+0xaa2>
 800aa34:	9b03      	ldr	r3, [sp, #12]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	dd02      	ble.n	800aa40 <_dtoa_r+0xa58>
 800aa3a:	9b02      	ldr	r3, [sp, #8]
 800aa3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aa40:	f88b a000 	strb.w	sl, [fp]
 800aa44:	e775      	b.n	800a932 <_dtoa_r+0x94a>
 800aa46:	4638      	mov	r0, r7
 800aa48:	e7ba      	b.n	800a9c0 <_dtoa_r+0x9d8>
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	e7e2      	b.n	800aa14 <_dtoa_r+0xa2c>
 800aa4e:	9b03      	ldr	r3, [sp, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	db04      	blt.n	800aa5e <_dtoa_r+0xa76>
 800aa54:	9906      	ldr	r1, [sp, #24]
 800aa56:	430b      	orrs	r3, r1
 800aa58:	9904      	ldr	r1, [sp, #16]
 800aa5a:	430b      	orrs	r3, r1
 800aa5c:	d122      	bne.n	800aaa4 <_dtoa_r+0xabc>
 800aa5e:	2a00      	cmp	r2, #0
 800aa60:	ddee      	ble.n	800aa40 <_dtoa_r+0xa58>
 800aa62:	ee18 1a10 	vmov	r1, s16
 800aa66:	2201      	movs	r2, #1
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f000 fea3 	bl	800b7b4 <__lshift>
 800aa6e:	4631      	mov	r1, r6
 800aa70:	ee08 0a10 	vmov	s16, r0
 800aa74:	f000 ff0e 	bl	800b894 <__mcmp>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	dc03      	bgt.n	800aa84 <_dtoa_r+0xa9c>
 800aa7c:	d1e0      	bne.n	800aa40 <_dtoa_r+0xa58>
 800aa7e:	f01a 0f01 	tst.w	sl, #1
 800aa82:	d0dd      	beq.n	800aa40 <_dtoa_r+0xa58>
 800aa84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa88:	d1d7      	bne.n	800aa3a <_dtoa_r+0xa52>
 800aa8a:	2339      	movs	r3, #57	; 0x39
 800aa8c:	f88b 3000 	strb.w	r3, [fp]
 800aa90:	462b      	mov	r3, r5
 800aa92:	461d      	mov	r5, r3
 800aa94:	3b01      	subs	r3, #1
 800aa96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa9a:	2a39      	cmp	r2, #57	; 0x39
 800aa9c:	d071      	beq.n	800ab82 <_dtoa_r+0xb9a>
 800aa9e:	3201      	adds	r2, #1
 800aaa0:	701a      	strb	r2, [r3, #0]
 800aaa2:	e746      	b.n	800a932 <_dtoa_r+0x94a>
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	dd07      	ble.n	800aab8 <_dtoa_r+0xad0>
 800aaa8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aaac:	d0ed      	beq.n	800aa8a <_dtoa_r+0xaa2>
 800aaae:	f10a 0301 	add.w	r3, sl, #1
 800aab2:	f88b 3000 	strb.w	r3, [fp]
 800aab6:	e73c      	b.n	800a932 <_dtoa_r+0x94a>
 800aab8:	9b05      	ldr	r3, [sp, #20]
 800aaba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aabe:	4599      	cmp	r9, r3
 800aac0:	d047      	beq.n	800ab52 <_dtoa_r+0xb6a>
 800aac2:	ee18 1a10 	vmov	r1, s16
 800aac6:	2300      	movs	r3, #0
 800aac8:	220a      	movs	r2, #10
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 fc78 	bl	800b3c0 <__multadd>
 800aad0:	45b8      	cmp	r8, r7
 800aad2:	ee08 0a10 	vmov	s16, r0
 800aad6:	f04f 0300 	mov.w	r3, #0
 800aada:	f04f 020a 	mov.w	r2, #10
 800aade:	4641      	mov	r1, r8
 800aae0:	4620      	mov	r0, r4
 800aae2:	d106      	bne.n	800aaf2 <_dtoa_r+0xb0a>
 800aae4:	f000 fc6c 	bl	800b3c0 <__multadd>
 800aae8:	4680      	mov	r8, r0
 800aaea:	4607      	mov	r7, r0
 800aaec:	f109 0901 	add.w	r9, r9, #1
 800aaf0:	e772      	b.n	800a9d8 <_dtoa_r+0x9f0>
 800aaf2:	f000 fc65 	bl	800b3c0 <__multadd>
 800aaf6:	4639      	mov	r1, r7
 800aaf8:	4680      	mov	r8, r0
 800aafa:	2300      	movs	r3, #0
 800aafc:	220a      	movs	r2, #10
 800aafe:	4620      	mov	r0, r4
 800ab00:	f000 fc5e 	bl	800b3c0 <__multadd>
 800ab04:	4607      	mov	r7, r0
 800ab06:	e7f1      	b.n	800aaec <_dtoa_r+0xb04>
 800ab08:	9b03      	ldr	r3, [sp, #12]
 800ab0a:	9302      	str	r3, [sp, #8]
 800ab0c:	9d01      	ldr	r5, [sp, #4]
 800ab0e:	ee18 0a10 	vmov	r0, s16
 800ab12:	4631      	mov	r1, r6
 800ab14:	f7ff f9dc 	bl	8009ed0 <quorem>
 800ab18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab1c:	9b01      	ldr	r3, [sp, #4]
 800ab1e:	f805 ab01 	strb.w	sl, [r5], #1
 800ab22:	1aea      	subs	r2, r5, r3
 800ab24:	9b02      	ldr	r3, [sp, #8]
 800ab26:	4293      	cmp	r3, r2
 800ab28:	dd09      	ble.n	800ab3e <_dtoa_r+0xb56>
 800ab2a:	ee18 1a10 	vmov	r1, s16
 800ab2e:	2300      	movs	r3, #0
 800ab30:	220a      	movs	r2, #10
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 fc44 	bl	800b3c0 <__multadd>
 800ab38:	ee08 0a10 	vmov	s16, r0
 800ab3c:	e7e7      	b.n	800ab0e <_dtoa_r+0xb26>
 800ab3e:	9b02      	ldr	r3, [sp, #8]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	bfc8      	it	gt
 800ab44:	461d      	movgt	r5, r3
 800ab46:	9b01      	ldr	r3, [sp, #4]
 800ab48:	bfd8      	it	le
 800ab4a:	2501      	movle	r5, #1
 800ab4c:	441d      	add	r5, r3
 800ab4e:	f04f 0800 	mov.w	r8, #0
 800ab52:	ee18 1a10 	vmov	r1, s16
 800ab56:	2201      	movs	r2, #1
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 fe2b 	bl	800b7b4 <__lshift>
 800ab5e:	4631      	mov	r1, r6
 800ab60:	ee08 0a10 	vmov	s16, r0
 800ab64:	f000 fe96 	bl	800b894 <__mcmp>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	dc91      	bgt.n	800aa90 <_dtoa_r+0xaa8>
 800ab6c:	d102      	bne.n	800ab74 <_dtoa_r+0xb8c>
 800ab6e:	f01a 0f01 	tst.w	sl, #1
 800ab72:	d18d      	bne.n	800aa90 <_dtoa_r+0xaa8>
 800ab74:	462b      	mov	r3, r5
 800ab76:	461d      	mov	r5, r3
 800ab78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab7c:	2a30      	cmp	r2, #48	; 0x30
 800ab7e:	d0fa      	beq.n	800ab76 <_dtoa_r+0xb8e>
 800ab80:	e6d7      	b.n	800a932 <_dtoa_r+0x94a>
 800ab82:	9a01      	ldr	r2, [sp, #4]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d184      	bne.n	800aa92 <_dtoa_r+0xaaa>
 800ab88:	9b00      	ldr	r3, [sp, #0]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	2331      	movs	r3, #49	; 0x31
 800ab90:	7013      	strb	r3, [r2, #0]
 800ab92:	e6ce      	b.n	800a932 <_dtoa_r+0x94a>
 800ab94:	4b09      	ldr	r3, [pc, #36]	; (800abbc <_dtoa_r+0xbd4>)
 800ab96:	f7ff ba95 	b.w	800a0c4 <_dtoa_r+0xdc>
 800ab9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f47f aa6e 	bne.w	800a07e <_dtoa_r+0x96>
 800aba2:	4b07      	ldr	r3, [pc, #28]	; (800abc0 <_dtoa_r+0xbd8>)
 800aba4:	f7ff ba8e 	b.w	800a0c4 <_dtoa_r+0xdc>
 800aba8:	9b02      	ldr	r3, [sp, #8]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	dcae      	bgt.n	800ab0c <_dtoa_r+0xb24>
 800abae:	9b06      	ldr	r3, [sp, #24]
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	f73f aea8 	bgt.w	800a906 <_dtoa_r+0x91e>
 800abb6:	e7a9      	b.n	800ab0c <_dtoa_r+0xb24>
 800abb8:	0800e030 	.word	0x0800e030
 800abbc:	0800de30 	.word	0x0800de30
 800abc0:	0800dfb1 	.word	0x0800dfb1

0800abc4 <rshift>:
 800abc4:	6903      	ldr	r3, [r0, #16]
 800abc6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800abca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800abd2:	f100 0414 	add.w	r4, r0, #20
 800abd6:	dd45      	ble.n	800ac64 <rshift+0xa0>
 800abd8:	f011 011f 	ands.w	r1, r1, #31
 800abdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800abe0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800abe4:	d10c      	bne.n	800ac00 <rshift+0x3c>
 800abe6:	f100 0710 	add.w	r7, r0, #16
 800abea:	4629      	mov	r1, r5
 800abec:	42b1      	cmp	r1, r6
 800abee:	d334      	bcc.n	800ac5a <rshift+0x96>
 800abf0:	1a9b      	subs	r3, r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	1eea      	subs	r2, r5, #3
 800abf6:	4296      	cmp	r6, r2
 800abf8:	bf38      	it	cc
 800abfa:	2300      	movcc	r3, #0
 800abfc:	4423      	add	r3, r4
 800abfe:	e015      	b.n	800ac2c <rshift+0x68>
 800ac00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ac04:	f1c1 0820 	rsb	r8, r1, #32
 800ac08:	40cf      	lsrs	r7, r1
 800ac0a:	f105 0e04 	add.w	lr, r5, #4
 800ac0e:	46a1      	mov	r9, r4
 800ac10:	4576      	cmp	r6, lr
 800ac12:	46f4      	mov	ip, lr
 800ac14:	d815      	bhi.n	800ac42 <rshift+0x7e>
 800ac16:	1a9a      	subs	r2, r3, r2
 800ac18:	0092      	lsls	r2, r2, #2
 800ac1a:	3a04      	subs	r2, #4
 800ac1c:	3501      	adds	r5, #1
 800ac1e:	42ae      	cmp	r6, r5
 800ac20:	bf38      	it	cc
 800ac22:	2200      	movcc	r2, #0
 800ac24:	18a3      	adds	r3, r4, r2
 800ac26:	50a7      	str	r7, [r4, r2]
 800ac28:	b107      	cbz	r7, 800ac2c <rshift+0x68>
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	1b1a      	subs	r2, r3, r4
 800ac2e:	42a3      	cmp	r3, r4
 800ac30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ac34:	bf08      	it	eq
 800ac36:	2300      	moveq	r3, #0
 800ac38:	6102      	str	r2, [r0, #16]
 800ac3a:	bf08      	it	eq
 800ac3c:	6143      	streq	r3, [r0, #20]
 800ac3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac42:	f8dc c000 	ldr.w	ip, [ip]
 800ac46:	fa0c fc08 	lsl.w	ip, ip, r8
 800ac4a:	ea4c 0707 	orr.w	r7, ip, r7
 800ac4e:	f849 7b04 	str.w	r7, [r9], #4
 800ac52:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac56:	40cf      	lsrs	r7, r1
 800ac58:	e7da      	b.n	800ac10 <rshift+0x4c>
 800ac5a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac5e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac62:	e7c3      	b.n	800abec <rshift+0x28>
 800ac64:	4623      	mov	r3, r4
 800ac66:	e7e1      	b.n	800ac2c <rshift+0x68>

0800ac68 <__hexdig_fun>:
 800ac68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ac6c:	2b09      	cmp	r3, #9
 800ac6e:	d802      	bhi.n	800ac76 <__hexdig_fun+0xe>
 800ac70:	3820      	subs	r0, #32
 800ac72:	b2c0      	uxtb	r0, r0
 800ac74:	4770      	bx	lr
 800ac76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ac7a:	2b05      	cmp	r3, #5
 800ac7c:	d801      	bhi.n	800ac82 <__hexdig_fun+0x1a>
 800ac7e:	3847      	subs	r0, #71	; 0x47
 800ac80:	e7f7      	b.n	800ac72 <__hexdig_fun+0xa>
 800ac82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ac86:	2b05      	cmp	r3, #5
 800ac88:	d801      	bhi.n	800ac8e <__hexdig_fun+0x26>
 800ac8a:	3827      	subs	r0, #39	; 0x27
 800ac8c:	e7f1      	b.n	800ac72 <__hexdig_fun+0xa>
 800ac8e:	2000      	movs	r0, #0
 800ac90:	4770      	bx	lr
	...

0800ac94 <__gethex>:
 800ac94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac98:	ed2d 8b02 	vpush	{d8}
 800ac9c:	b089      	sub	sp, #36	; 0x24
 800ac9e:	ee08 0a10 	vmov	s16, r0
 800aca2:	9304      	str	r3, [sp, #16]
 800aca4:	4bb4      	ldr	r3, [pc, #720]	; (800af78 <__gethex+0x2e4>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	9301      	str	r3, [sp, #4]
 800acaa:	4618      	mov	r0, r3
 800acac:	468b      	mov	fp, r1
 800acae:	4690      	mov	r8, r2
 800acb0:	f7f5 fa8e 	bl	80001d0 <strlen>
 800acb4:	9b01      	ldr	r3, [sp, #4]
 800acb6:	f8db 2000 	ldr.w	r2, [fp]
 800acba:	4403      	add	r3, r0
 800acbc:	4682      	mov	sl, r0
 800acbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800acc2:	9305      	str	r3, [sp, #20]
 800acc4:	1c93      	adds	r3, r2, #2
 800acc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800acca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800acce:	32fe      	adds	r2, #254	; 0xfe
 800acd0:	18d1      	adds	r1, r2, r3
 800acd2:	461f      	mov	r7, r3
 800acd4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800acd8:	9100      	str	r1, [sp, #0]
 800acda:	2830      	cmp	r0, #48	; 0x30
 800acdc:	d0f8      	beq.n	800acd0 <__gethex+0x3c>
 800acde:	f7ff ffc3 	bl	800ac68 <__hexdig_fun>
 800ace2:	4604      	mov	r4, r0
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d13a      	bne.n	800ad5e <__gethex+0xca>
 800ace8:	9901      	ldr	r1, [sp, #4]
 800acea:	4652      	mov	r2, sl
 800acec:	4638      	mov	r0, r7
 800acee:	f001 fa33 	bl	800c158 <strncmp>
 800acf2:	4605      	mov	r5, r0
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d168      	bne.n	800adca <__gethex+0x136>
 800acf8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800acfc:	eb07 060a 	add.w	r6, r7, sl
 800ad00:	f7ff ffb2 	bl	800ac68 <__hexdig_fun>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d062      	beq.n	800adce <__gethex+0x13a>
 800ad08:	4633      	mov	r3, r6
 800ad0a:	7818      	ldrb	r0, [r3, #0]
 800ad0c:	2830      	cmp	r0, #48	; 0x30
 800ad0e:	461f      	mov	r7, r3
 800ad10:	f103 0301 	add.w	r3, r3, #1
 800ad14:	d0f9      	beq.n	800ad0a <__gethex+0x76>
 800ad16:	f7ff ffa7 	bl	800ac68 <__hexdig_fun>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	fab0 f480 	clz	r4, r0
 800ad20:	0964      	lsrs	r4, r4, #5
 800ad22:	4635      	mov	r5, r6
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	463a      	mov	r2, r7
 800ad28:	4616      	mov	r6, r2
 800ad2a:	3201      	adds	r2, #1
 800ad2c:	7830      	ldrb	r0, [r6, #0]
 800ad2e:	f7ff ff9b 	bl	800ac68 <__hexdig_fun>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d1f8      	bne.n	800ad28 <__gethex+0x94>
 800ad36:	9901      	ldr	r1, [sp, #4]
 800ad38:	4652      	mov	r2, sl
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f001 fa0c 	bl	800c158 <strncmp>
 800ad40:	b980      	cbnz	r0, 800ad64 <__gethex+0xd0>
 800ad42:	b94d      	cbnz	r5, 800ad58 <__gethex+0xc4>
 800ad44:	eb06 050a 	add.w	r5, r6, sl
 800ad48:	462a      	mov	r2, r5
 800ad4a:	4616      	mov	r6, r2
 800ad4c:	3201      	adds	r2, #1
 800ad4e:	7830      	ldrb	r0, [r6, #0]
 800ad50:	f7ff ff8a 	bl	800ac68 <__hexdig_fun>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	d1f8      	bne.n	800ad4a <__gethex+0xb6>
 800ad58:	1bad      	subs	r5, r5, r6
 800ad5a:	00ad      	lsls	r5, r5, #2
 800ad5c:	e004      	b.n	800ad68 <__gethex+0xd4>
 800ad5e:	2400      	movs	r4, #0
 800ad60:	4625      	mov	r5, r4
 800ad62:	e7e0      	b.n	800ad26 <__gethex+0x92>
 800ad64:	2d00      	cmp	r5, #0
 800ad66:	d1f7      	bne.n	800ad58 <__gethex+0xc4>
 800ad68:	7833      	ldrb	r3, [r6, #0]
 800ad6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad6e:	2b50      	cmp	r3, #80	; 0x50
 800ad70:	d13b      	bne.n	800adea <__gethex+0x156>
 800ad72:	7873      	ldrb	r3, [r6, #1]
 800ad74:	2b2b      	cmp	r3, #43	; 0x2b
 800ad76:	d02c      	beq.n	800add2 <__gethex+0x13e>
 800ad78:	2b2d      	cmp	r3, #45	; 0x2d
 800ad7a:	d02e      	beq.n	800adda <__gethex+0x146>
 800ad7c:	1c71      	adds	r1, r6, #1
 800ad7e:	f04f 0900 	mov.w	r9, #0
 800ad82:	7808      	ldrb	r0, [r1, #0]
 800ad84:	f7ff ff70 	bl	800ac68 <__hexdig_fun>
 800ad88:	1e43      	subs	r3, r0, #1
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b18      	cmp	r3, #24
 800ad8e:	d82c      	bhi.n	800adea <__gethex+0x156>
 800ad90:	f1a0 0210 	sub.w	r2, r0, #16
 800ad94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad98:	f7ff ff66 	bl	800ac68 <__hexdig_fun>
 800ad9c:	1e43      	subs	r3, r0, #1
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	2b18      	cmp	r3, #24
 800ada2:	d91d      	bls.n	800ade0 <__gethex+0x14c>
 800ada4:	f1b9 0f00 	cmp.w	r9, #0
 800ada8:	d000      	beq.n	800adac <__gethex+0x118>
 800adaa:	4252      	negs	r2, r2
 800adac:	4415      	add	r5, r2
 800adae:	f8cb 1000 	str.w	r1, [fp]
 800adb2:	b1e4      	cbz	r4, 800adee <__gethex+0x15a>
 800adb4:	9b00      	ldr	r3, [sp, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	bf14      	ite	ne
 800adba:	2700      	movne	r7, #0
 800adbc:	2706      	moveq	r7, #6
 800adbe:	4638      	mov	r0, r7
 800adc0:	b009      	add	sp, #36	; 0x24
 800adc2:	ecbd 8b02 	vpop	{d8}
 800adc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adca:	463e      	mov	r6, r7
 800adcc:	4625      	mov	r5, r4
 800adce:	2401      	movs	r4, #1
 800add0:	e7ca      	b.n	800ad68 <__gethex+0xd4>
 800add2:	f04f 0900 	mov.w	r9, #0
 800add6:	1cb1      	adds	r1, r6, #2
 800add8:	e7d3      	b.n	800ad82 <__gethex+0xee>
 800adda:	f04f 0901 	mov.w	r9, #1
 800adde:	e7fa      	b.n	800add6 <__gethex+0x142>
 800ade0:	230a      	movs	r3, #10
 800ade2:	fb03 0202 	mla	r2, r3, r2, r0
 800ade6:	3a10      	subs	r2, #16
 800ade8:	e7d4      	b.n	800ad94 <__gethex+0x100>
 800adea:	4631      	mov	r1, r6
 800adec:	e7df      	b.n	800adae <__gethex+0x11a>
 800adee:	1bf3      	subs	r3, r6, r7
 800adf0:	3b01      	subs	r3, #1
 800adf2:	4621      	mov	r1, r4
 800adf4:	2b07      	cmp	r3, #7
 800adf6:	dc0b      	bgt.n	800ae10 <__gethex+0x17c>
 800adf8:	ee18 0a10 	vmov	r0, s16
 800adfc:	f000 fa7e 	bl	800b2fc <_Balloc>
 800ae00:	4604      	mov	r4, r0
 800ae02:	b940      	cbnz	r0, 800ae16 <__gethex+0x182>
 800ae04:	4b5d      	ldr	r3, [pc, #372]	; (800af7c <__gethex+0x2e8>)
 800ae06:	4602      	mov	r2, r0
 800ae08:	21de      	movs	r1, #222	; 0xde
 800ae0a:	485d      	ldr	r0, [pc, #372]	; (800af80 <__gethex+0x2ec>)
 800ae0c:	f001 f9c6 	bl	800c19c <__assert_func>
 800ae10:	3101      	adds	r1, #1
 800ae12:	105b      	asrs	r3, r3, #1
 800ae14:	e7ee      	b.n	800adf4 <__gethex+0x160>
 800ae16:	f100 0914 	add.w	r9, r0, #20
 800ae1a:	f04f 0b00 	mov.w	fp, #0
 800ae1e:	f1ca 0301 	rsb	r3, sl, #1
 800ae22:	f8cd 9008 	str.w	r9, [sp, #8]
 800ae26:	f8cd b000 	str.w	fp, [sp]
 800ae2a:	9306      	str	r3, [sp, #24]
 800ae2c:	42b7      	cmp	r7, r6
 800ae2e:	d340      	bcc.n	800aeb2 <__gethex+0x21e>
 800ae30:	9802      	ldr	r0, [sp, #8]
 800ae32:	9b00      	ldr	r3, [sp, #0]
 800ae34:	f840 3b04 	str.w	r3, [r0], #4
 800ae38:	eba0 0009 	sub.w	r0, r0, r9
 800ae3c:	1080      	asrs	r0, r0, #2
 800ae3e:	0146      	lsls	r6, r0, #5
 800ae40:	6120      	str	r0, [r4, #16]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f000 fb4c 	bl	800b4e0 <__hi0bits>
 800ae48:	1a30      	subs	r0, r6, r0
 800ae4a:	f8d8 6000 	ldr.w	r6, [r8]
 800ae4e:	42b0      	cmp	r0, r6
 800ae50:	dd63      	ble.n	800af1a <__gethex+0x286>
 800ae52:	1b87      	subs	r7, r0, r6
 800ae54:	4639      	mov	r1, r7
 800ae56:	4620      	mov	r0, r4
 800ae58:	f000 fef0 	bl	800bc3c <__any_on>
 800ae5c:	4682      	mov	sl, r0
 800ae5e:	b1a8      	cbz	r0, 800ae8c <__gethex+0x1f8>
 800ae60:	1e7b      	subs	r3, r7, #1
 800ae62:	1159      	asrs	r1, r3, #5
 800ae64:	f003 021f 	and.w	r2, r3, #31
 800ae68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ae6c:	f04f 0a01 	mov.w	sl, #1
 800ae70:	fa0a f202 	lsl.w	r2, sl, r2
 800ae74:	420a      	tst	r2, r1
 800ae76:	d009      	beq.n	800ae8c <__gethex+0x1f8>
 800ae78:	4553      	cmp	r3, sl
 800ae7a:	dd05      	ble.n	800ae88 <__gethex+0x1f4>
 800ae7c:	1eb9      	subs	r1, r7, #2
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f000 fedc 	bl	800bc3c <__any_on>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d145      	bne.n	800af14 <__gethex+0x280>
 800ae88:	f04f 0a02 	mov.w	sl, #2
 800ae8c:	4639      	mov	r1, r7
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f7ff fe98 	bl	800abc4 <rshift>
 800ae94:	443d      	add	r5, r7
 800ae96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae9a:	42ab      	cmp	r3, r5
 800ae9c:	da4c      	bge.n	800af38 <__gethex+0x2a4>
 800ae9e:	ee18 0a10 	vmov	r0, s16
 800aea2:	4621      	mov	r1, r4
 800aea4:	f000 fa6a 	bl	800b37c <_Bfree>
 800aea8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6013      	str	r3, [r2, #0]
 800aeae:	27a3      	movs	r7, #163	; 0xa3
 800aeb0:	e785      	b.n	800adbe <__gethex+0x12a>
 800aeb2:	1e73      	subs	r3, r6, #1
 800aeb4:	9a05      	ldr	r2, [sp, #20]
 800aeb6:	9303      	str	r3, [sp, #12]
 800aeb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d019      	beq.n	800aef4 <__gethex+0x260>
 800aec0:	f1bb 0f20 	cmp.w	fp, #32
 800aec4:	d107      	bne.n	800aed6 <__gethex+0x242>
 800aec6:	9b02      	ldr	r3, [sp, #8]
 800aec8:	9a00      	ldr	r2, [sp, #0]
 800aeca:	f843 2b04 	str.w	r2, [r3], #4
 800aece:	9302      	str	r3, [sp, #8]
 800aed0:	2300      	movs	r3, #0
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	469b      	mov	fp, r3
 800aed6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aeda:	f7ff fec5 	bl	800ac68 <__hexdig_fun>
 800aede:	9b00      	ldr	r3, [sp, #0]
 800aee0:	f000 000f 	and.w	r0, r0, #15
 800aee4:	fa00 f00b 	lsl.w	r0, r0, fp
 800aee8:	4303      	orrs	r3, r0
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	f10b 0b04 	add.w	fp, fp, #4
 800aef0:	9b03      	ldr	r3, [sp, #12]
 800aef2:	e00d      	b.n	800af10 <__gethex+0x27c>
 800aef4:	9b03      	ldr	r3, [sp, #12]
 800aef6:	9a06      	ldr	r2, [sp, #24]
 800aef8:	4413      	add	r3, r2
 800aefa:	42bb      	cmp	r3, r7
 800aefc:	d3e0      	bcc.n	800aec0 <__gethex+0x22c>
 800aefe:	4618      	mov	r0, r3
 800af00:	9901      	ldr	r1, [sp, #4]
 800af02:	9307      	str	r3, [sp, #28]
 800af04:	4652      	mov	r2, sl
 800af06:	f001 f927 	bl	800c158 <strncmp>
 800af0a:	9b07      	ldr	r3, [sp, #28]
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d1d7      	bne.n	800aec0 <__gethex+0x22c>
 800af10:	461e      	mov	r6, r3
 800af12:	e78b      	b.n	800ae2c <__gethex+0x198>
 800af14:	f04f 0a03 	mov.w	sl, #3
 800af18:	e7b8      	b.n	800ae8c <__gethex+0x1f8>
 800af1a:	da0a      	bge.n	800af32 <__gethex+0x29e>
 800af1c:	1a37      	subs	r7, r6, r0
 800af1e:	4621      	mov	r1, r4
 800af20:	ee18 0a10 	vmov	r0, s16
 800af24:	463a      	mov	r2, r7
 800af26:	f000 fc45 	bl	800b7b4 <__lshift>
 800af2a:	1bed      	subs	r5, r5, r7
 800af2c:	4604      	mov	r4, r0
 800af2e:	f100 0914 	add.w	r9, r0, #20
 800af32:	f04f 0a00 	mov.w	sl, #0
 800af36:	e7ae      	b.n	800ae96 <__gethex+0x202>
 800af38:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800af3c:	42a8      	cmp	r0, r5
 800af3e:	dd72      	ble.n	800b026 <__gethex+0x392>
 800af40:	1b45      	subs	r5, r0, r5
 800af42:	42ae      	cmp	r6, r5
 800af44:	dc36      	bgt.n	800afb4 <__gethex+0x320>
 800af46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d02a      	beq.n	800afa4 <__gethex+0x310>
 800af4e:	2b03      	cmp	r3, #3
 800af50:	d02c      	beq.n	800afac <__gethex+0x318>
 800af52:	2b01      	cmp	r3, #1
 800af54:	d11c      	bne.n	800af90 <__gethex+0x2fc>
 800af56:	42ae      	cmp	r6, r5
 800af58:	d11a      	bne.n	800af90 <__gethex+0x2fc>
 800af5a:	2e01      	cmp	r6, #1
 800af5c:	d112      	bne.n	800af84 <__gethex+0x2f0>
 800af5e:	9a04      	ldr	r2, [sp, #16]
 800af60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	2301      	movs	r3, #1
 800af68:	6123      	str	r3, [r4, #16]
 800af6a:	f8c9 3000 	str.w	r3, [r9]
 800af6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af70:	2762      	movs	r7, #98	; 0x62
 800af72:	601c      	str	r4, [r3, #0]
 800af74:	e723      	b.n	800adbe <__gethex+0x12a>
 800af76:	bf00      	nop
 800af78:	0800e0a8 	.word	0x0800e0a8
 800af7c:	0800e030 	.word	0x0800e030
 800af80:	0800e041 	.word	0x0800e041
 800af84:	1e71      	subs	r1, r6, #1
 800af86:	4620      	mov	r0, r4
 800af88:	f000 fe58 	bl	800bc3c <__any_on>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d1e6      	bne.n	800af5e <__gethex+0x2ca>
 800af90:	ee18 0a10 	vmov	r0, s16
 800af94:	4621      	mov	r1, r4
 800af96:	f000 f9f1 	bl	800b37c <_Bfree>
 800af9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af9c:	2300      	movs	r3, #0
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	2750      	movs	r7, #80	; 0x50
 800afa2:	e70c      	b.n	800adbe <__gethex+0x12a>
 800afa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1f2      	bne.n	800af90 <__gethex+0x2fc>
 800afaa:	e7d8      	b.n	800af5e <__gethex+0x2ca>
 800afac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d1d5      	bne.n	800af5e <__gethex+0x2ca>
 800afb2:	e7ed      	b.n	800af90 <__gethex+0x2fc>
 800afb4:	1e6f      	subs	r7, r5, #1
 800afb6:	f1ba 0f00 	cmp.w	sl, #0
 800afba:	d131      	bne.n	800b020 <__gethex+0x38c>
 800afbc:	b127      	cbz	r7, 800afc8 <__gethex+0x334>
 800afbe:	4639      	mov	r1, r7
 800afc0:	4620      	mov	r0, r4
 800afc2:	f000 fe3b 	bl	800bc3c <__any_on>
 800afc6:	4682      	mov	sl, r0
 800afc8:	117b      	asrs	r3, r7, #5
 800afca:	2101      	movs	r1, #1
 800afcc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800afd0:	f007 071f 	and.w	r7, r7, #31
 800afd4:	fa01 f707 	lsl.w	r7, r1, r7
 800afd8:	421f      	tst	r7, r3
 800afda:	4629      	mov	r1, r5
 800afdc:	4620      	mov	r0, r4
 800afde:	bf18      	it	ne
 800afe0:	f04a 0a02 	orrne.w	sl, sl, #2
 800afe4:	1b76      	subs	r6, r6, r5
 800afe6:	f7ff fded 	bl	800abc4 <rshift>
 800afea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800afee:	2702      	movs	r7, #2
 800aff0:	f1ba 0f00 	cmp.w	sl, #0
 800aff4:	d048      	beq.n	800b088 <__gethex+0x3f4>
 800aff6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800affa:	2b02      	cmp	r3, #2
 800affc:	d015      	beq.n	800b02a <__gethex+0x396>
 800affe:	2b03      	cmp	r3, #3
 800b000:	d017      	beq.n	800b032 <__gethex+0x39e>
 800b002:	2b01      	cmp	r3, #1
 800b004:	d109      	bne.n	800b01a <__gethex+0x386>
 800b006:	f01a 0f02 	tst.w	sl, #2
 800b00a:	d006      	beq.n	800b01a <__gethex+0x386>
 800b00c:	f8d9 0000 	ldr.w	r0, [r9]
 800b010:	ea4a 0a00 	orr.w	sl, sl, r0
 800b014:	f01a 0f01 	tst.w	sl, #1
 800b018:	d10e      	bne.n	800b038 <__gethex+0x3a4>
 800b01a:	f047 0710 	orr.w	r7, r7, #16
 800b01e:	e033      	b.n	800b088 <__gethex+0x3f4>
 800b020:	f04f 0a01 	mov.w	sl, #1
 800b024:	e7d0      	b.n	800afc8 <__gethex+0x334>
 800b026:	2701      	movs	r7, #1
 800b028:	e7e2      	b.n	800aff0 <__gethex+0x35c>
 800b02a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b02c:	f1c3 0301 	rsb	r3, r3, #1
 800b030:	9315      	str	r3, [sp, #84]	; 0x54
 800b032:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b034:	2b00      	cmp	r3, #0
 800b036:	d0f0      	beq.n	800b01a <__gethex+0x386>
 800b038:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b03c:	f104 0314 	add.w	r3, r4, #20
 800b040:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b044:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b048:	f04f 0c00 	mov.w	ip, #0
 800b04c:	4618      	mov	r0, r3
 800b04e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b052:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b056:	d01c      	beq.n	800b092 <__gethex+0x3fe>
 800b058:	3201      	adds	r2, #1
 800b05a:	6002      	str	r2, [r0, #0]
 800b05c:	2f02      	cmp	r7, #2
 800b05e:	f104 0314 	add.w	r3, r4, #20
 800b062:	d13f      	bne.n	800b0e4 <__gethex+0x450>
 800b064:	f8d8 2000 	ldr.w	r2, [r8]
 800b068:	3a01      	subs	r2, #1
 800b06a:	42b2      	cmp	r2, r6
 800b06c:	d10a      	bne.n	800b084 <__gethex+0x3f0>
 800b06e:	1171      	asrs	r1, r6, #5
 800b070:	2201      	movs	r2, #1
 800b072:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b076:	f006 061f 	and.w	r6, r6, #31
 800b07a:	fa02 f606 	lsl.w	r6, r2, r6
 800b07e:	421e      	tst	r6, r3
 800b080:	bf18      	it	ne
 800b082:	4617      	movne	r7, r2
 800b084:	f047 0720 	orr.w	r7, r7, #32
 800b088:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b08a:	601c      	str	r4, [r3, #0]
 800b08c:	9b04      	ldr	r3, [sp, #16]
 800b08e:	601d      	str	r5, [r3, #0]
 800b090:	e695      	b.n	800adbe <__gethex+0x12a>
 800b092:	4299      	cmp	r1, r3
 800b094:	f843 cc04 	str.w	ip, [r3, #-4]
 800b098:	d8d8      	bhi.n	800b04c <__gethex+0x3b8>
 800b09a:	68a3      	ldr	r3, [r4, #8]
 800b09c:	459b      	cmp	fp, r3
 800b09e:	db19      	blt.n	800b0d4 <__gethex+0x440>
 800b0a0:	6861      	ldr	r1, [r4, #4]
 800b0a2:	ee18 0a10 	vmov	r0, s16
 800b0a6:	3101      	adds	r1, #1
 800b0a8:	f000 f928 	bl	800b2fc <_Balloc>
 800b0ac:	4681      	mov	r9, r0
 800b0ae:	b918      	cbnz	r0, 800b0b8 <__gethex+0x424>
 800b0b0:	4b1a      	ldr	r3, [pc, #104]	; (800b11c <__gethex+0x488>)
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	2184      	movs	r1, #132	; 0x84
 800b0b6:	e6a8      	b.n	800ae0a <__gethex+0x176>
 800b0b8:	6922      	ldr	r2, [r4, #16]
 800b0ba:	3202      	adds	r2, #2
 800b0bc:	f104 010c 	add.w	r1, r4, #12
 800b0c0:	0092      	lsls	r2, r2, #2
 800b0c2:	300c      	adds	r0, #12
 800b0c4:	f000 f90c 	bl	800b2e0 <memcpy>
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	ee18 0a10 	vmov	r0, s16
 800b0ce:	f000 f955 	bl	800b37c <_Bfree>
 800b0d2:	464c      	mov	r4, r9
 800b0d4:	6923      	ldr	r3, [r4, #16]
 800b0d6:	1c5a      	adds	r2, r3, #1
 800b0d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0dc:	6122      	str	r2, [r4, #16]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	615a      	str	r2, [r3, #20]
 800b0e2:	e7bb      	b.n	800b05c <__gethex+0x3c8>
 800b0e4:	6922      	ldr	r2, [r4, #16]
 800b0e6:	455a      	cmp	r2, fp
 800b0e8:	dd0b      	ble.n	800b102 <__gethex+0x46e>
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f7ff fd69 	bl	800abc4 <rshift>
 800b0f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0f6:	3501      	adds	r5, #1
 800b0f8:	42ab      	cmp	r3, r5
 800b0fa:	f6ff aed0 	blt.w	800ae9e <__gethex+0x20a>
 800b0fe:	2701      	movs	r7, #1
 800b100:	e7c0      	b.n	800b084 <__gethex+0x3f0>
 800b102:	f016 061f 	ands.w	r6, r6, #31
 800b106:	d0fa      	beq.n	800b0fe <__gethex+0x46a>
 800b108:	4453      	add	r3, sl
 800b10a:	f1c6 0620 	rsb	r6, r6, #32
 800b10e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b112:	f000 f9e5 	bl	800b4e0 <__hi0bits>
 800b116:	42b0      	cmp	r0, r6
 800b118:	dbe7      	blt.n	800b0ea <__gethex+0x456>
 800b11a:	e7f0      	b.n	800b0fe <__gethex+0x46a>
 800b11c:	0800e030 	.word	0x0800e030

0800b120 <L_shift>:
 800b120:	f1c2 0208 	rsb	r2, r2, #8
 800b124:	0092      	lsls	r2, r2, #2
 800b126:	b570      	push	{r4, r5, r6, lr}
 800b128:	f1c2 0620 	rsb	r6, r2, #32
 800b12c:	6843      	ldr	r3, [r0, #4]
 800b12e:	6804      	ldr	r4, [r0, #0]
 800b130:	fa03 f506 	lsl.w	r5, r3, r6
 800b134:	432c      	orrs	r4, r5
 800b136:	40d3      	lsrs	r3, r2
 800b138:	6004      	str	r4, [r0, #0]
 800b13a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b13e:	4288      	cmp	r0, r1
 800b140:	d3f4      	bcc.n	800b12c <L_shift+0xc>
 800b142:	bd70      	pop	{r4, r5, r6, pc}

0800b144 <__match>:
 800b144:	b530      	push	{r4, r5, lr}
 800b146:	6803      	ldr	r3, [r0, #0]
 800b148:	3301      	adds	r3, #1
 800b14a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b14e:	b914      	cbnz	r4, 800b156 <__match+0x12>
 800b150:	6003      	str	r3, [r0, #0]
 800b152:	2001      	movs	r0, #1
 800b154:	bd30      	pop	{r4, r5, pc}
 800b156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b15a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b15e:	2d19      	cmp	r5, #25
 800b160:	bf98      	it	ls
 800b162:	3220      	addls	r2, #32
 800b164:	42a2      	cmp	r2, r4
 800b166:	d0f0      	beq.n	800b14a <__match+0x6>
 800b168:	2000      	movs	r0, #0
 800b16a:	e7f3      	b.n	800b154 <__match+0x10>

0800b16c <__hexnan>:
 800b16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b170:	680b      	ldr	r3, [r1, #0]
 800b172:	115e      	asrs	r6, r3, #5
 800b174:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b178:	f013 031f 	ands.w	r3, r3, #31
 800b17c:	b087      	sub	sp, #28
 800b17e:	bf18      	it	ne
 800b180:	3604      	addne	r6, #4
 800b182:	2500      	movs	r5, #0
 800b184:	1f37      	subs	r7, r6, #4
 800b186:	4690      	mov	r8, r2
 800b188:	6802      	ldr	r2, [r0, #0]
 800b18a:	9301      	str	r3, [sp, #4]
 800b18c:	4682      	mov	sl, r0
 800b18e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b192:	46b9      	mov	r9, r7
 800b194:	463c      	mov	r4, r7
 800b196:	9502      	str	r5, [sp, #8]
 800b198:	46ab      	mov	fp, r5
 800b19a:	7851      	ldrb	r1, [r2, #1]
 800b19c:	1c53      	adds	r3, r2, #1
 800b19e:	9303      	str	r3, [sp, #12]
 800b1a0:	b341      	cbz	r1, 800b1f4 <__hexnan+0x88>
 800b1a2:	4608      	mov	r0, r1
 800b1a4:	9205      	str	r2, [sp, #20]
 800b1a6:	9104      	str	r1, [sp, #16]
 800b1a8:	f7ff fd5e 	bl	800ac68 <__hexdig_fun>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d14f      	bne.n	800b250 <__hexnan+0xe4>
 800b1b0:	9904      	ldr	r1, [sp, #16]
 800b1b2:	9a05      	ldr	r2, [sp, #20]
 800b1b4:	2920      	cmp	r1, #32
 800b1b6:	d818      	bhi.n	800b1ea <__hexnan+0x7e>
 800b1b8:	9b02      	ldr	r3, [sp, #8]
 800b1ba:	459b      	cmp	fp, r3
 800b1bc:	dd13      	ble.n	800b1e6 <__hexnan+0x7a>
 800b1be:	454c      	cmp	r4, r9
 800b1c0:	d206      	bcs.n	800b1d0 <__hexnan+0x64>
 800b1c2:	2d07      	cmp	r5, #7
 800b1c4:	dc04      	bgt.n	800b1d0 <__hexnan+0x64>
 800b1c6:	462a      	mov	r2, r5
 800b1c8:	4649      	mov	r1, r9
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f7ff ffa8 	bl	800b120 <L_shift>
 800b1d0:	4544      	cmp	r4, r8
 800b1d2:	d950      	bls.n	800b276 <__hexnan+0x10a>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f1a4 0904 	sub.w	r9, r4, #4
 800b1da:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1de:	f8cd b008 	str.w	fp, [sp, #8]
 800b1e2:	464c      	mov	r4, r9
 800b1e4:	461d      	mov	r5, r3
 800b1e6:	9a03      	ldr	r2, [sp, #12]
 800b1e8:	e7d7      	b.n	800b19a <__hexnan+0x2e>
 800b1ea:	2929      	cmp	r1, #41	; 0x29
 800b1ec:	d156      	bne.n	800b29c <__hexnan+0x130>
 800b1ee:	3202      	adds	r2, #2
 800b1f0:	f8ca 2000 	str.w	r2, [sl]
 800b1f4:	f1bb 0f00 	cmp.w	fp, #0
 800b1f8:	d050      	beq.n	800b29c <__hexnan+0x130>
 800b1fa:	454c      	cmp	r4, r9
 800b1fc:	d206      	bcs.n	800b20c <__hexnan+0xa0>
 800b1fe:	2d07      	cmp	r5, #7
 800b200:	dc04      	bgt.n	800b20c <__hexnan+0xa0>
 800b202:	462a      	mov	r2, r5
 800b204:	4649      	mov	r1, r9
 800b206:	4620      	mov	r0, r4
 800b208:	f7ff ff8a 	bl	800b120 <L_shift>
 800b20c:	4544      	cmp	r4, r8
 800b20e:	d934      	bls.n	800b27a <__hexnan+0x10e>
 800b210:	f1a8 0204 	sub.w	r2, r8, #4
 800b214:	4623      	mov	r3, r4
 800b216:	f853 1b04 	ldr.w	r1, [r3], #4
 800b21a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b21e:	429f      	cmp	r7, r3
 800b220:	d2f9      	bcs.n	800b216 <__hexnan+0xaa>
 800b222:	1b3b      	subs	r3, r7, r4
 800b224:	f023 0303 	bic.w	r3, r3, #3
 800b228:	3304      	adds	r3, #4
 800b22a:	3401      	adds	r4, #1
 800b22c:	3e03      	subs	r6, #3
 800b22e:	42b4      	cmp	r4, r6
 800b230:	bf88      	it	hi
 800b232:	2304      	movhi	r3, #4
 800b234:	4443      	add	r3, r8
 800b236:	2200      	movs	r2, #0
 800b238:	f843 2b04 	str.w	r2, [r3], #4
 800b23c:	429f      	cmp	r7, r3
 800b23e:	d2fb      	bcs.n	800b238 <__hexnan+0xcc>
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	b91b      	cbnz	r3, 800b24c <__hexnan+0xe0>
 800b244:	4547      	cmp	r7, r8
 800b246:	d127      	bne.n	800b298 <__hexnan+0x12c>
 800b248:	2301      	movs	r3, #1
 800b24a:	603b      	str	r3, [r7, #0]
 800b24c:	2005      	movs	r0, #5
 800b24e:	e026      	b.n	800b29e <__hexnan+0x132>
 800b250:	3501      	adds	r5, #1
 800b252:	2d08      	cmp	r5, #8
 800b254:	f10b 0b01 	add.w	fp, fp, #1
 800b258:	dd06      	ble.n	800b268 <__hexnan+0xfc>
 800b25a:	4544      	cmp	r4, r8
 800b25c:	d9c3      	bls.n	800b1e6 <__hexnan+0x7a>
 800b25e:	2300      	movs	r3, #0
 800b260:	f844 3c04 	str.w	r3, [r4, #-4]
 800b264:	2501      	movs	r5, #1
 800b266:	3c04      	subs	r4, #4
 800b268:	6822      	ldr	r2, [r4, #0]
 800b26a:	f000 000f 	and.w	r0, r0, #15
 800b26e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b272:	6022      	str	r2, [r4, #0]
 800b274:	e7b7      	b.n	800b1e6 <__hexnan+0x7a>
 800b276:	2508      	movs	r5, #8
 800b278:	e7b5      	b.n	800b1e6 <__hexnan+0x7a>
 800b27a:	9b01      	ldr	r3, [sp, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d0df      	beq.n	800b240 <__hexnan+0xd4>
 800b280:	f04f 32ff 	mov.w	r2, #4294967295
 800b284:	f1c3 0320 	rsb	r3, r3, #32
 800b288:	fa22 f303 	lsr.w	r3, r2, r3
 800b28c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b290:	401a      	ands	r2, r3
 800b292:	f846 2c04 	str.w	r2, [r6, #-4]
 800b296:	e7d3      	b.n	800b240 <__hexnan+0xd4>
 800b298:	3f04      	subs	r7, #4
 800b29a:	e7d1      	b.n	800b240 <__hexnan+0xd4>
 800b29c:	2004      	movs	r0, #4
 800b29e:	b007      	add	sp, #28
 800b2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2a4 <_localeconv_r>:
 800b2a4:	4800      	ldr	r0, [pc, #0]	; (800b2a8 <_localeconv_r+0x4>)
 800b2a6:	4770      	bx	lr
 800b2a8:	20000254 	.word	0x20000254

0800b2ac <malloc>:
 800b2ac:	4b02      	ldr	r3, [pc, #8]	; (800b2b8 <malloc+0xc>)
 800b2ae:	4601      	mov	r1, r0
 800b2b0:	6818      	ldr	r0, [r3, #0]
 800b2b2:	f000 bd67 	b.w	800bd84 <_malloc_r>
 800b2b6:	bf00      	nop
 800b2b8:	200000fc 	.word	0x200000fc

0800b2bc <__ascii_mbtowc>:
 800b2bc:	b082      	sub	sp, #8
 800b2be:	b901      	cbnz	r1, 800b2c2 <__ascii_mbtowc+0x6>
 800b2c0:	a901      	add	r1, sp, #4
 800b2c2:	b142      	cbz	r2, 800b2d6 <__ascii_mbtowc+0x1a>
 800b2c4:	b14b      	cbz	r3, 800b2da <__ascii_mbtowc+0x1e>
 800b2c6:	7813      	ldrb	r3, [r2, #0]
 800b2c8:	600b      	str	r3, [r1, #0]
 800b2ca:	7812      	ldrb	r2, [r2, #0]
 800b2cc:	1e10      	subs	r0, r2, #0
 800b2ce:	bf18      	it	ne
 800b2d0:	2001      	movne	r0, #1
 800b2d2:	b002      	add	sp, #8
 800b2d4:	4770      	bx	lr
 800b2d6:	4610      	mov	r0, r2
 800b2d8:	e7fb      	b.n	800b2d2 <__ascii_mbtowc+0x16>
 800b2da:	f06f 0001 	mvn.w	r0, #1
 800b2de:	e7f8      	b.n	800b2d2 <__ascii_mbtowc+0x16>

0800b2e0 <memcpy>:
 800b2e0:	440a      	add	r2, r1
 800b2e2:	4291      	cmp	r1, r2
 800b2e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2e8:	d100      	bne.n	800b2ec <memcpy+0xc>
 800b2ea:	4770      	bx	lr
 800b2ec:	b510      	push	{r4, lr}
 800b2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2f6:	4291      	cmp	r1, r2
 800b2f8:	d1f9      	bne.n	800b2ee <memcpy+0xe>
 800b2fa:	bd10      	pop	{r4, pc}

0800b2fc <_Balloc>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b300:	4604      	mov	r4, r0
 800b302:	460d      	mov	r5, r1
 800b304:	b976      	cbnz	r6, 800b324 <_Balloc+0x28>
 800b306:	2010      	movs	r0, #16
 800b308:	f7ff ffd0 	bl	800b2ac <malloc>
 800b30c:	4602      	mov	r2, r0
 800b30e:	6260      	str	r0, [r4, #36]	; 0x24
 800b310:	b920      	cbnz	r0, 800b31c <_Balloc+0x20>
 800b312:	4b18      	ldr	r3, [pc, #96]	; (800b374 <_Balloc+0x78>)
 800b314:	4818      	ldr	r0, [pc, #96]	; (800b378 <_Balloc+0x7c>)
 800b316:	2166      	movs	r1, #102	; 0x66
 800b318:	f000 ff40 	bl	800c19c <__assert_func>
 800b31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b320:	6006      	str	r6, [r0, #0]
 800b322:	60c6      	str	r6, [r0, #12]
 800b324:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b326:	68f3      	ldr	r3, [r6, #12]
 800b328:	b183      	cbz	r3, 800b34c <_Balloc+0x50>
 800b32a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b332:	b9b8      	cbnz	r0, 800b364 <_Balloc+0x68>
 800b334:	2101      	movs	r1, #1
 800b336:	fa01 f605 	lsl.w	r6, r1, r5
 800b33a:	1d72      	adds	r2, r6, #5
 800b33c:	0092      	lsls	r2, r2, #2
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 fc9d 	bl	800bc7e <_calloc_r>
 800b344:	b160      	cbz	r0, 800b360 <_Balloc+0x64>
 800b346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b34a:	e00e      	b.n	800b36a <_Balloc+0x6e>
 800b34c:	2221      	movs	r2, #33	; 0x21
 800b34e:	2104      	movs	r1, #4
 800b350:	4620      	mov	r0, r4
 800b352:	f000 fc94 	bl	800bc7e <_calloc_r>
 800b356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b358:	60f0      	str	r0, [r6, #12]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1e4      	bne.n	800b32a <_Balloc+0x2e>
 800b360:	2000      	movs	r0, #0
 800b362:	bd70      	pop	{r4, r5, r6, pc}
 800b364:	6802      	ldr	r2, [r0, #0]
 800b366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b36a:	2300      	movs	r3, #0
 800b36c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b370:	e7f7      	b.n	800b362 <_Balloc+0x66>
 800b372:	bf00      	nop
 800b374:	0800dfbe 	.word	0x0800dfbe
 800b378:	0800e0bc 	.word	0x0800e0bc

0800b37c <_Bfree>:
 800b37c:	b570      	push	{r4, r5, r6, lr}
 800b37e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b380:	4605      	mov	r5, r0
 800b382:	460c      	mov	r4, r1
 800b384:	b976      	cbnz	r6, 800b3a4 <_Bfree+0x28>
 800b386:	2010      	movs	r0, #16
 800b388:	f7ff ff90 	bl	800b2ac <malloc>
 800b38c:	4602      	mov	r2, r0
 800b38e:	6268      	str	r0, [r5, #36]	; 0x24
 800b390:	b920      	cbnz	r0, 800b39c <_Bfree+0x20>
 800b392:	4b09      	ldr	r3, [pc, #36]	; (800b3b8 <_Bfree+0x3c>)
 800b394:	4809      	ldr	r0, [pc, #36]	; (800b3bc <_Bfree+0x40>)
 800b396:	218a      	movs	r1, #138	; 0x8a
 800b398:	f000 ff00 	bl	800c19c <__assert_func>
 800b39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3a0:	6006      	str	r6, [r0, #0]
 800b3a2:	60c6      	str	r6, [r0, #12]
 800b3a4:	b13c      	cbz	r4, 800b3b6 <_Bfree+0x3a>
 800b3a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b3a8:	6862      	ldr	r2, [r4, #4]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3b0:	6021      	str	r1, [r4, #0]
 800b3b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3b6:	bd70      	pop	{r4, r5, r6, pc}
 800b3b8:	0800dfbe 	.word	0x0800dfbe
 800b3bc:	0800e0bc 	.word	0x0800e0bc

0800b3c0 <__multadd>:
 800b3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c4:	690d      	ldr	r5, [r1, #16]
 800b3c6:	4607      	mov	r7, r0
 800b3c8:	460c      	mov	r4, r1
 800b3ca:	461e      	mov	r6, r3
 800b3cc:	f101 0c14 	add.w	ip, r1, #20
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	f8dc 3000 	ldr.w	r3, [ip]
 800b3d6:	b299      	uxth	r1, r3
 800b3d8:	fb02 6101 	mla	r1, r2, r1, r6
 800b3dc:	0c1e      	lsrs	r6, r3, #16
 800b3de:	0c0b      	lsrs	r3, r1, #16
 800b3e0:	fb02 3306 	mla	r3, r2, r6, r3
 800b3e4:	b289      	uxth	r1, r1
 800b3e6:	3001      	adds	r0, #1
 800b3e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b3ec:	4285      	cmp	r5, r0
 800b3ee:	f84c 1b04 	str.w	r1, [ip], #4
 800b3f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b3f6:	dcec      	bgt.n	800b3d2 <__multadd+0x12>
 800b3f8:	b30e      	cbz	r6, 800b43e <__multadd+0x7e>
 800b3fa:	68a3      	ldr	r3, [r4, #8]
 800b3fc:	42ab      	cmp	r3, r5
 800b3fe:	dc19      	bgt.n	800b434 <__multadd+0x74>
 800b400:	6861      	ldr	r1, [r4, #4]
 800b402:	4638      	mov	r0, r7
 800b404:	3101      	adds	r1, #1
 800b406:	f7ff ff79 	bl	800b2fc <_Balloc>
 800b40a:	4680      	mov	r8, r0
 800b40c:	b928      	cbnz	r0, 800b41a <__multadd+0x5a>
 800b40e:	4602      	mov	r2, r0
 800b410:	4b0c      	ldr	r3, [pc, #48]	; (800b444 <__multadd+0x84>)
 800b412:	480d      	ldr	r0, [pc, #52]	; (800b448 <__multadd+0x88>)
 800b414:	21b5      	movs	r1, #181	; 0xb5
 800b416:	f000 fec1 	bl	800c19c <__assert_func>
 800b41a:	6922      	ldr	r2, [r4, #16]
 800b41c:	3202      	adds	r2, #2
 800b41e:	f104 010c 	add.w	r1, r4, #12
 800b422:	0092      	lsls	r2, r2, #2
 800b424:	300c      	adds	r0, #12
 800b426:	f7ff ff5b 	bl	800b2e0 <memcpy>
 800b42a:	4621      	mov	r1, r4
 800b42c:	4638      	mov	r0, r7
 800b42e:	f7ff ffa5 	bl	800b37c <_Bfree>
 800b432:	4644      	mov	r4, r8
 800b434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b438:	3501      	adds	r5, #1
 800b43a:	615e      	str	r6, [r3, #20]
 800b43c:	6125      	str	r5, [r4, #16]
 800b43e:	4620      	mov	r0, r4
 800b440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b444:	0800e030 	.word	0x0800e030
 800b448:	0800e0bc 	.word	0x0800e0bc

0800b44c <__s2b>:
 800b44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b450:	460c      	mov	r4, r1
 800b452:	4615      	mov	r5, r2
 800b454:	461f      	mov	r7, r3
 800b456:	2209      	movs	r2, #9
 800b458:	3308      	adds	r3, #8
 800b45a:	4606      	mov	r6, r0
 800b45c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b460:	2100      	movs	r1, #0
 800b462:	2201      	movs	r2, #1
 800b464:	429a      	cmp	r2, r3
 800b466:	db09      	blt.n	800b47c <__s2b+0x30>
 800b468:	4630      	mov	r0, r6
 800b46a:	f7ff ff47 	bl	800b2fc <_Balloc>
 800b46e:	b940      	cbnz	r0, 800b482 <__s2b+0x36>
 800b470:	4602      	mov	r2, r0
 800b472:	4b19      	ldr	r3, [pc, #100]	; (800b4d8 <__s2b+0x8c>)
 800b474:	4819      	ldr	r0, [pc, #100]	; (800b4dc <__s2b+0x90>)
 800b476:	21ce      	movs	r1, #206	; 0xce
 800b478:	f000 fe90 	bl	800c19c <__assert_func>
 800b47c:	0052      	lsls	r2, r2, #1
 800b47e:	3101      	adds	r1, #1
 800b480:	e7f0      	b.n	800b464 <__s2b+0x18>
 800b482:	9b08      	ldr	r3, [sp, #32]
 800b484:	6143      	str	r3, [r0, #20]
 800b486:	2d09      	cmp	r5, #9
 800b488:	f04f 0301 	mov.w	r3, #1
 800b48c:	6103      	str	r3, [r0, #16]
 800b48e:	dd16      	ble.n	800b4be <__s2b+0x72>
 800b490:	f104 0909 	add.w	r9, r4, #9
 800b494:	46c8      	mov	r8, r9
 800b496:	442c      	add	r4, r5
 800b498:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b49c:	4601      	mov	r1, r0
 800b49e:	3b30      	subs	r3, #48	; 0x30
 800b4a0:	220a      	movs	r2, #10
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f7ff ff8c 	bl	800b3c0 <__multadd>
 800b4a8:	45a0      	cmp	r8, r4
 800b4aa:	d1f5      	bne.n	800b498 <__s2b+0x4c>
 800b4ac:	f1a5 0408 	sub.w	r4, r5, #8
 800b4b0:	444c      	add	r4, r9
 800b4b2:	1b2d      	subs	r5, r5, r4
 800b4b4:	1963      	adds	r3, r4, r5
 800b4b6:	42bb      	cmp	r3, r7
 800b4b8:	db04      	blt.n	800b4c4 <__s2b+0x78>
 800b4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4be:	340a      	adds	r4, #10
 800b4c0:	2509      	movs	r5, #9
 800b4c2:	e7f6      	b.n	800b4b2 <__s2b+0x66>
 800b4c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b4c8:	4601      	mov	r1, r0
 800b4ca:	3b30      	subs	r3, #48	; 0x30
 800b4cc:	220a      	movs	r2, #10
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f7ff ff76 	bl	800b3c0 <__multadd>
 800b4d4:	e7ee      	b.n	800b4b4 <__s2b+0x68>
 800b4d6:	bf00      	nop
 800b4d8:	0800e030 	.word	0x0800e030
 800b4dc:	0800e0bc 	.word	0x0800e0bc

0800b4e0 <__hi0bits>:
 800b4e0:	0c03      	lsrs	r3, r0, #16
 800b4e2:	041b      	lsls	r3, r3, #16
 800b4e4:	b9d3      	cbnz	r3, 800b51c <__hi0bits+0x3c>
 800b4e6:	0400      	lsls	r0, r0, #16
 800b4e8:	2310      	movs	r3, #16
 800b4ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b4ee:	bf04      	itt	eq
 800b4f0:	0200      	lsleq	r0, r0, #8
 800b4f2:	3308      	addeq	r3, #8
 800b4f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b4f8:	bf04      	itt	eq
 800b4fa:	0100      	lsleq	r0, r0, #4
 800b4fc:	3304      	addeq	r3, #4
 800b4fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b502:	bf04      	itt	eq
 800b504:	0080      	lsleq	r0, r0, #2
 800b506:	3302      	addeq	r3, #2
 800b508:	2800      	cmp	r0, #0
 800b50a:	db05      	blt.n	800b518 <__hi0bits+0x38>
 800b50c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b510:	f103 0301 	add.w	r3, r3, #1
 800b514:	bf08      	it	eq
 800b516:	2320      	moveq	r3, #32
 800b518:	4618      	mov	r0, r3
 800b51a:	4770      	bx	lr
 800b51c:	2300      	movs	r3, #0
 800b51e:	e7e4      	b.n	800b4ea <__hi0bits+0xa>

0800b520 <__lo0bits>:
 800b520:	6803      	ldr	r3, [r0, #0]
 800b522:	f013 0207 	ands.w	r2, r3, #7
 800b526:	4601      	mov	r1, r0
 800b528:	d00b      	beq.n	800b542 <__lo0bits+0x22>
 800b52a:	07da      	lsls	r2, r3, #31
 800b52c:	d423      	bmi.n	800b576 <__lo0bits+0x56>
 800b52e:	0798      	lsls	r0, r3, #30
 800b530:	bf49      	itett	mi
 800b532:	085b      	lsrmi	r3, r3, #1
 800b534:	089b      	lsrpl	r3, r3, #2
 800b536:	2001      	movmi	r0, #1
 800b538:	600b      	strmi	r3, [r1, #0]
 800b53a:	bf5c      	itt	pl
 800b53c:	600b      	strpl	r3, [r1, #0]
 800b53e:	2002      	movpl	r0, #2
 800b540:	4770      	bx	lr
 800b542:	b298      	uxth	r0, r3
 800b544:	b9a8      	cbnz	r0, 800b572 <__lo0bits+0x52>
 800b546:	0c1b      	lsrs	r3, r3, #16
 800b548:	2010      	movs	r0, #16
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	b90a      	cbnz	r2, 800b552 <__lo0bits+0x32>
 800b54e:	3008      	adds	r0, #8
 800b550:	0a1b      	lsrs	r3, r3, #8
 800b552:	071a      	lsls	r2, r3, #28
 800b554:	bf04      	itt	eq
 800b556:	091b      	lsreq	r3, r3, #4
 800b558:	3004      	addeq	r0, #4
 800b55a:	079a      	lsls	r2, r3, #30
 800b55c:	bf04      	itt	eq
 800b55e:	089b      	lsreq	r3, r3, #2
 800b560:	3002      	addeq	r0, #2
 800b562:	07da      	lsls	r2, r3, #31
 800b564:	d403      	bmi.n	800b56e <__lo0bits+0x4e>
 800b566:	085b      	lsrs	r3, r3, #1
 800b568:	f100 0001 	add.w	r0, r0, #1
 800b56c:	d005      	beq.n	800b57a <__lo0bits+0x5a>
 800b56e:	600b      	str	r3, [r1, #0]
 800b570:	4770      	bx	lr
 800b572:	4610      	mov	r0, r2
 800b574:	e7e9      	b.n	800b54a <__lo0bits+0x2a>
 800b576:	2000      	movs	r0, #0
 800b578:	4770      	bx	lr
 800b57a:	2020      	movs	r0, #32
 800b57c:	4770      	bx	lr
	...

0800b580 <__i2b>:
 800b580:	b510      	push	{r4, lr}
 800b582:	460c      	mov	r4, r1
 800b584:	2101      	movs	r1, #1
 800b586:	f7ff feb9 	bl	800b2fc <_Balloc>
 800b58a:	4602      	mov	r2, r0
 800b58c:	b928      	cbnz	r0, 800b59a <__i2b+0x1a>
 800b58e:	4b05      	ldr	r3, [pc, #20]	; (800b5a4 <__i2b+0x24>)
 800b590:	4805      	ldr	r0, [pc, #20]	; (800b5a8 <__i2b+0x28>)
 800b592:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b596:	f000 fe01 	bl	800c19c <__assert_func>
 800b59a:	2301      	movs	r3, #1
 800b59c:	6144      	str	r4, [r0, #20]
 800b59e:	6103      	str	r3, [r0, #16]
 800b5a0:	bd10      	pop	{r4, pc}
 800b5a2:	bf00      	nop
 800b5a4:	0800e030 	.word	0x0800e030
 800b5a8:	0800e0bc 	.word	0x0800e0bc

0800b5ac <__multiply>:
 800b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	4691      	mov	r9, r2
 800b5b2:	690a      	ldr	r2, [r1, #16]
 800b5b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	bfb8      	it	lt
 800b5bc:	460b      	movlt	r3, r1
 800b5be:	460c      	mov	r4, r1
 800b5c0:	bfbc      	itt	lt
 800b5c2:	464c      	movlt	r4, r9
 800b5c4:	4699      	movlt	r9, r3
 800b5c6:	6927      	ldr	r7, [r4, #16]
 800b5c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5cc:	68a3      	ldr	r3, [r4, #8]
 800b5ce:	6861      	ldr	r1, [r4, #4]
 800b5d0:	eb07 060a 	add.w	r6, r7, sl
 800b5d4:	42b3      	cmp	r3, r6
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	bfb8      	it	lt
 800b5da:	3101      	addlt	r1, #1
 800b5dc:	f7ff fe8e 	bl	800b2fc <_Balloc>
 800b5e0:	b930      	cbnz	r0, 800b5f0 <__multiply+0x44>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	4b44      	ldr	r3, [pc, #272]	; (800b6f8 <__multiply+0x14c>)
 800b5e6:	4845      	ldr	r0, [pc, #276]	; (800b6fc <__multiply+0x150>)
 800b5e8:	f240 115d 	movw	r1, #349	; 0x15d
 800b5ec:	f000 fdd6 	bl	800c19c <__assert_func>
 800b5f0:	f100 0514 	add.w	r5, r0, #20
 800b5f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b5f8:	462b      	mov	r3, r5
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	4543      	cmp	r3, r8
 800b5fe:	d321      	bcc.n	800b644 <__multiply+0x98>
 800b600:	f104 0314 	add.w	r3, r4, #20
 800b604:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b608:	f109 0314 	add.w	r3, r9, #20
 800b60c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b610:	9202      	str	r2, [sp, #8]
 800b612:	1b3a      	subs	r2, r7, r4
 800b614:	3a15      	subs	r2, #21
 800b616:	f022 0203 	bic.w	r2, r2, #3
 800b61a:	3204      	adds	r2, #4
 800b61c:	f104 0115 	add.w	r1, r4, #21
 800b620:	428f      	cmp	r7, r1
 800b622:	bf38      	it	cc
 800b624:	2204      	movcc	r2, #4
 800b626:	9201      	str	r2, [sp, #4]
 800b628:	9a02      	ldr	r2, [sp, #8]
 800b62a:	9303      	str	r3, [sp, #12]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d80c      	bhi.n	800b64a <__multiply+0x9e>
 800b630:	2e00      	cmp	r6, #0
 800b632:	dd03      	ble.n	800b63c <__multiply+0x90>
 800b634:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d05a      	beq.n	800b6f2 <__multiply+0x146>
 800b63c:	6106      	str	r6, [r0, #16]
 800b63e:	b005      	add	sp, #20
 800b640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b644:	f843 2b04 	str.w	r2, [r3], #4
 800b648:	e7d8      	b.n	800b5fc <__multiply+0x50>
 800b64a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b64e:	f1ba 0f00 	cmp.w	sl, #0
 800b652:	d024      	beq.n	800b69e <__multiply+0xf2>
 800b654:	f104 0e14 	add.w	lr, r4, #20
 800b658:	46a9      	mov	r9, r5
 800b65a:	f04f 0c00 	mov.w	ip, #0
 800b65e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b662:	f8d9 1000 	ldr.w	r1, [r9]
 800b666:	fa1f fb82 	uxth.w	fp, r2
 800b66a:	b289      	uxth	r1, r1
 800b66c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b670:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b674:	f8d9 2000 	ldr.w	r2, [r9]
 800b678:	4461      	add	r1, ip
 800b67a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b67e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b682:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b686:	b289      	uxth	r1, r1
 800b688:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b68c:	4577      	cmp	r7, lr
 800b68e:	f849 1b04 	str.w	r1, [r9], #4
 800b692:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b696:	d8e2      	bhi.n	800b65e <__multiply+0xb2>
 800b698:	9a01      	ldr	r2, [sp, #4]
 800b69a:	f845 c002 	str.w	ip, [r5, r2]
 800b69e:	9a03      	ldr	r2, [sp, #12]
 800b6a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	f1b9 0f00 	cmp.w	r9, #0
 800b6aa:	d020      	beq.n	800b6ee <__multiply+0x142>
 800b6ac:	6829      	ldr	r1, [r5, #0]
 800b6ae:	f104 0c14 	add.w	ip, r4, #20
 800b6b2:	46ae      	mov	lr, r5
 800b6b4:	f04f 0a00 	mov.w	sl, #0
 800b6b8:	f8bc b000 	ldrh.w	fp, [ip]
 800b6bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b6c0:	fb09 220b 	mla	r2, r9, fp, r2
 800b6c4:	4492      	add	sl, r2
 800b6c6:	b289      	uxth	r1, r1
 800b6c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b6cc:	f84e 1b04 	str.w	r1, [lr], #4
 800b6d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b6d4:	f8be 1000 	ldrh.w	r1, [lr]
 800b6d8:	0c12      	lsrs	r2, r2, #16
 800b6da:	fb09 1102 	mla	r1, r9, r2, r1
 800b6de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b6e2:	4567      	cmp	r7, ip
 800b6e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b6e8:	d8e6      	bhi.n	800b6b8 <__multiply+0x10c>
 800b6ea:	9a01      	ldr	r2, [sp, #4]
 800b6ec:	50a9      	str	r1, [r5, r2]
 800b6ee:	3504      	adds	r5, #4
 800b6f0:	e79a      	b.n	800b628 <__multiply+0x7c>
 800b6f2:	3e01      	subs	r6, #1
 800b6f4:	e79c      	b.n	800b630 <__multiply+0x84>
 800b6f6:	bf00      	nop
 800b6f8:	0800e030 	.word	0x0800e030
 800b6fc:	0800e0bc 	.word	0x0800e0bc

0800b700 <__pow5mult>:
 800b700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b704:	4615      	mov	r5, r2
 800b706:	f012 0203 	ands.w	r2, r2, #3
 800b70a:	4606      	mov	r6, r0
 800b70c:	460f      	mov	r7, r1
 800b70e:	d007      	beq.n	800b720 <__pow5mult+0x20>
 800b710:	4c25      	ldr	r4, [pc, #148]	; (800b7a8 <__pow5mult+0xa8>)
 800b712:	3a01      	subs	r2, #1
 800b714:	2300      	movs	r3, #0
 800b716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b71a:	f7ff fe51 	bl	800b3c0 <__multadd>
 800b71e:	4607      	mov	r7, r0
 800b720:	10ad      	asrs	r5, r5, #2
 800b722:	d03d      	beq.n	800b7a0 <__pow5mult+0xa0>
 800b724:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b726:	b97c      	cbnz	r4, 800b748 <__pow5mult+0x48>
 800b728:	2010      	movs	r0, #16
 800b72a:	f7ff fdbf 	bl	800b2ac <malloc>
 800b72e:	4602      	mov	r2, r0
 800b730:	6270      	str	r0, [r6, #36]	; 0x24
 800b732:	b928      	cbnz	r0, 800b740 <__pow5mult+0x40>
 800b734:	4b1d      	ldr	r3, [pc, #116]	; (800b7ac <__pow5mult+0xac>)
 800b736:	481e      	ldr	r0, [pc, #120]	; (800b7b0 <__pow5mult+0xb0>)
 800b738:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b73c:	f000 fd2e 	bl	800c19c <__assert_func>
 800b740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b744:	6004      	str	r4, [r0, #0]
 800b746:	60c4      	str	r4, [r0, #12]
 800b748:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b74c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b750:	b94c      	cbnz	r4, 800b766 <__pow5mult+0x66>
 800b752:	f240 2171 	movw	r1, #625	; 0x271
 800b756:	4630      	mov	r0, r6
 800b758:	f7ff ff12 	bl	800b580 <__i2b>
 800b75c:	2300      	movs	r3, #0
 800b75e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b762:	4604      	mov	r4, r0
 800b764:	6003      	str	r3, [r0, #0]
 800b766:	f04f 0900 	mov.w	r9, #0
 800b76a:	07eb      	lsls	r3, r5, #31
 800b76c:	d50a      	bpl.n	800b784 <__pow5mult+0x84>
 800b76e:	4639      	mov	r1, r7
 800b770:	4622      	mov	r2, r4
 800b772:	4630      	mov	r0, r6
 800b774:	f7ff ff1a 	bl	800b5ac <__multiply>
 800b778:	4639      	mov	r1, r7
 800b77a:	4680      	mov	r8, r0
 800b77c:	4630      	mov	r0, r6
 800b77e:	f7ff fdfd 	bl	800b37c <_Bfree>
 800b782:	4647      	mov	r7, r8
 800b784:	106d      	asrs	r5, r5, #1
 800b786:	d00b      	beq.n	800b7a0 <__pow5mult+0xa0>
 800b788:	6820      	ldr	r0, [r4, #0]
 800b78a:	b938      	cbnz	r0, 800b79c <__pow5mult+0x9c>
 800b78c:	4622      	mov	r2, r4
 800b78e:	4621      	mov	r1, r4
 800b790:	4630      	mov	r0, r6
 800b792:	f7ff ff0b 	bl	800b5ac <__multiply>
 800b796:	6020      	str	r0, [r4, #0]
 800b798:	f8c0 9000 	str.w	r9, [r0]
 800b79c:	4604      	mov	r4, r0
 800b79e:	e7e4      	b.n	800b76a <__pow5mult+0x6a>
 800b7a0:	4638      	mov	r0, r7
 800b7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7a6:	bf00      	nop
 800b7a8:	0800e208 	.word	0x0800e208
 800b7ac:	0800dfbe 	.word	0x0800dfbe
 800b7b0:	0800e0bc 	.word	0x0800e0bc

0800b7b4 <__lshift>:
 800b7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	6849      	ldr	r1, [r1, #4]
 800b7bc:	6923      	ldr	r3, [r4, #16]
 800b7be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7c2:	68a3      	ldr	r3, [r4, #8]
 800b7c4:	4607      	mov	r7, r0
 800b7c6:	4691      	mov	r9, r2
 800b7c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7cc:	f108 0601 	add.w	r6, r8, #1
 800b7d0:	42b3      	cmp	r3, r6
 800b7d2:	db0b      	blt.n	800b7ec <__lshift+0x38>
 800b7d4:	4638      	mov	r0, r7
 800b7d6:	f7ff fd91 	bl	800b2fc <_Balloc>
 800b7da:	4605      	mov	r5, r0
 800b7dc:	b948      	cbnz	r0, 800b7f2 <__lshift+0x3e>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	4b2a      	ldr	r3, [pc, #168]	; (800b88c <__lshift+0xd8>)
 800b7e2:	482b      	ldr	r0, [pc, #172]	; (800b890 <__lshift+0xdc>)
 800b7e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b7e8:	f000 fcd8 	bl	800c19c <__assert_func>
 800b7ec:	3101      	adds	r1, #1
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	e7ee      	b.n	800b7d0 <__lshift+0x1c>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f100 0114 	add.w	r1, r0, #20
 800b7f8:	f100 0210 	add.w	r2, r0, #16
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	4553      	cmp	r3, sl
 800b800:	db37      	blt.n	800b872 <__lshift+0xbe>
 800b802:	6920      	ldr	r0, [r4, #16]
 800b804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b808:	f104 0314 	add.w	r3, r4, #20
 800b80c:	f019 091f 	ands.w	r9, r9, #31
 800b810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b814:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b818:	d02f      	beq.n	800b87a <__lshift+0xc6>
 800b81a:	f1c9 0e20 	rsb	lr, r9, #32
 800b81e:	468a      	mov	sl, r1
 800b820:	f04f 0c00 	mov.w	ip, #0
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	fa02 f209 	lsl.w	r2, r2, r9
 800b82a:	ea42 020c 	orr.w	r2, r2, ip
 800b82e:	f84a 2b04 	str.w	r2, [sl], #4
 800b832:	f853 2b04 	ldr.w	r2, [r3], #4
 800b836:	4298      	cmp	r0, r3
 800b838:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b83c:	d8f2      	bhi.n	800b824 <__lshift+0x70>
 800b83e:	1b03      	subs	r3, r0, r4
 800b840:	3b15      	subs	r3, #21
 800b842:	f023 0303 	bic.w	r3, r3, #3
 800b846:	3304      	adds	r3, #4
 800b848:	f104 0215 	add.w	r2, r4, #21
 800b84c:	4290      	cmp	r0, r2
 800b84e:	bf38      	it	cc
 800b850:	2304      	movcc	r3, #4
 800b852:	f841 c003 	str.w	ip, [r1, r3]
 800b856:	f1bc 0f00 	cmp.w	ip, #0
 800b85a:	d001      	beq.n	800b860 <__lshift+0xac>
 800b85c:	f108 0602 	add.w	r6, r8, #2
 800b860:	3e01      	subs	r6, #1
 800b862:	4638      	mov	r0, r7
 800b864:	612e      	str	r6, [r5, #16]
 800b866:	4621      	mov	r1, r4
 800b868:	f7ff fd88 	bl	800b37c <_Bfree>
 800b86c:	4628      	mov	r0, r5
 800b86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b872:	f842 0f04 	str.w	r0, [r2, #4]!
 800b876:	3301      	adds	r3, #1
 800b878:	e7c1      	b.n	800b7fe <__lshift+0x4a>
 800b87a:	3904      	subs	r1, #4
 800b87c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b880:	f841 2f04 	str.w	r2, [r1, #4]!
 800b884:	4298      	cmp	r0, r3
 800b886:	d8f9      	bhi.n	800b87c <__lshift+0xc8>
 800b888:	e7ea      	b.n	800b860 <__lshift+0xac>
 800b88a:	bf00      	nop
 800b88c:	0800e030 	.word	0x0800e030
 800b890:	0800e0bc 	.word	0x0800e0bc

0800b894 <__mcmp>:
 800b894:	b530      	push	{r4, r5, lr}
 800b896:	6902      	ldr	r2, [r0, #16]
 800b898:	690c      	ldr	r4, [r1, #16]
 800b89a:	1b12      	subs	r2, r2, r4
 800b89c:	d10e      	bne.n	800b8bc <__mcmp+0x28>
 800b89e:	f100 0314 	add.w	r3, r0, #20
 800b8a2:	3114      	adds	r1, #20
 800b8a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b8a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b8ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b8b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b8b4:	42a5      	cmp	r5, r4
 800b8b6:	d003      	beq.n	800b8c0 <__mcmp+0x2c>
 800b8b8:	d305      	bcc.n	800b8c6 <__mcmp+0x32>
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	4610      	mov	r0, r2
 800b8be:	bd30      	pop	{r4, r5, pc}
 800b8c0:	4283      	cmp	r3, r0
 800b8c2:	d3f3      	bcc.n	800b8ac <__mcmp+0x18>
 800b8c4:	e7fa      	b.n	800b8bc <__mcmp+0x28>
 800b8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ca:	e7f7      	b.n	800b8bc <__mcmp+0x28>

0800b8cc <__mdiff>:
 800b8cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	4690      	mov	r8, r2
 800b8da:	f7ff ffdb 	bl	800b894 <__mcmp>
 800b8de:	1e05      	subs	r5, r0, #0
 800b8e0:	d110      	bne.n	800b904 <__mdiff+0x38>
 800b8e2:	4629      	mov	r1, r5
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	f7ff fd09 	bl	800b2fc <_Balloc>
 800b8ea:	b930      	cbnz	r0, 800b8fa <__mdiff+0x2e>
 800b8ec:	4b3a      	ldr	r3, [pc, #232]	; (800b9d8 <__mdiff+0x10c>)
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	f240 2132 	movw	r1, #562	; 0x232
 800b8f4:	4839      	ldr	r0, [pc, #228]	; (800b9dc <__mdiff+0x110>)
 800b8f6:	f000 fc51 	bl	800c19c <__assert_func>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b904:	bfa4      	itt	ge
 800b906:	4643      	movge	r3, r8
 800b908:	46a0      	movge	r8, r4
 800b90a:	4630      	mov	r0, r6
 800b90c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b910:	bfa6      	itte	ge
 800b912:	461c      	movge	r4, r3
 800b914:	2500      	movge	r5, #0
 800b916:	2501      	movlt	r5, #1
 800b918:	f7ff fcf0 	bl	800b2fc <_Balloc>
 800b91c:	b920      	cbnz	r0, 800b928 <__mdiff+0x5c>
 800b91e:	4b2e      	ldr	r3, [pc, #184]	; (800b9d8 <__mdiff+0x10c>)
 800b920:	4602      	mov	r2, r0
 800b922:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b926:	e7e5      	b.n	800b8f4 <__mdiff+0x28>
 800b928:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b92c:	6926      	ldr	r6, [r4, #16]
 800b92e:	60c5      	str	r5, [r0, #12]
 800b930:	f104 0914 	add.w	r9, r4, #20
 800b934:	f108 0514 	add.w	r5, r8, #20
 800b938:	f100 0e14 	add.w	lr, r0, #20
 800b93c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b940:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b944:	f108 0210 	add.w	r2, r8, #16
 800b948:	46f2      	mov	sl, lr
 800b94a:	2100      	movs	r1, #0
 800b94c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b950:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b954:	fa1f f883 	uxth.w	r8, r3
 800b958:	fa11 f18b 	uxtah	r1, r1, fp
 800b95c:	0c1b      	lsrs	r3, r3, #16
 800b95e:	eba1 0808 	sub.w	r8, r1, r8
 800b962:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b966:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b96a:	fa1f f888 	uxth.w	r8, r8
 800b96e:	1419      	asrs	r1, r3, #16
 800b970:	454e      	cmp	r6, r9
 800b972:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b976:	f84a 3b04 	str.w	r3, [sl], #4
 800b97a:	d8e7      	bhi.n	800b94c <__mdiff+0x80>
 800b97c:	1b33      	subs	r3, r6, r4
 800b97e:	3b15      	subs	r3, #21
 800b980:	f023 0303 	bic.w	r3, r3, #3
 800b984:	3304      	adds	r3, #4
 800b986:	3415      	adds	r4, #21
 800b988:	42a6      	cmp	r6, r4
 800b98a:	bf38      	it	cc
 800b98c:	2304      	movcc	r3, #4
 800b98e:	441d      	add	r5, r3
 800b990:	4473      	add	r3, lr
 800b992:	469e      	mov	lr, r3
 800b994:	462e      	mov	r6, r5
 800b996:	4566      	cmp	r6, ip
 800b998:	d30e      	bcc.n	800b9b8 <__mdiff+0xec>
 800b99a:	f10c 0203 	add.w	r2, ip, #3
 800b99e:	1b52      	subs	r2, r2, r5
 800b9a0:	f022 0203 	bic.w	r2, r2, #3
 800b9a4:	3d03      	subs	r5, #3
 800b9a6:	45ac      	cmp	ip, r5
 800b9a8:	bf38      	it	cc
 800b9aa:	2200      	movcc	r2, #0
 800b9ac:	441a      	add	r2, r3
 800b9ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b9b2:	b17b      	cbz	r3, 800b9d4 <__mdiff+0x108>
 800b9b4:	6107      	str	r7, [r0, #16]
 800b9b6:	e7a3      	b.n	800b900 <__mdiff+0x34>
 800b9b8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b9bc:	fa11 f288 	uxtah	r2, r1, r8
 800b9c0:	1414      	asrs	r4, r2, #16
 800b9c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b9c6:	b292      	uxth	r2, r2
 800b9c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b9cc:	f84e 2b04 	str.w	r2, [lr], #4
 800b9d0:	1421      	asrs	r1, r4, #16
 800b9d2:	e7e0      	b.n	800b996 <__mdiff+0xca>
 800b9d4:	3f01      	subs	r7, #1
 800b9d6:	e7ea      	b.n	800b9ae <__mdiff+0xe2>
 800b9d8:	0800e030 	.word	0x0800e030
 800b9dc:	0800e0bc 	.word	0x0800e0bc

0800b9e0 <__ulp>:
 800b9e0:	b082      	sub	sp, #8
 800b9e2:	ed8d 0b00 	vstr	d0, [sp]
 800b9e6:	9b01      	ldr	r3, [sp, #4]
 800b9e8:	4912      	ldr	r1, [pc, #72]	; (800ba34 <__ulp+0x54>)
 800b9ea:	4019      	ands	r1, r3
 800b9ec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b9f0:	2900      	cmp	r1, #0
 800b9f2:	dd05      	ble.n	800ba00 <__ulp+0x20>
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	ec43 2b10 	vmov	d0, r2, r3
 800b9fc:	b002      	add	sp, #8
 800b9fe:	4770      	bx	lr
 800ba00:	4249      	negs	r1, r1
 800ba02:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ba06:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ba0a:	f04f 0200 	mov.w	r2, #0
 800ba0e:	f04f 0300 	mov.w	r3, #0
 800ba12:	da04      	bge.n	800ba1e <__ulp+0x3e>
 800ba14:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ba18:	fa41 f300 	asr.w	r3, r1, r0
 800ba1c:	e7ec      	b.n	800b9f8 <__ulp+0x18>
 800ba1e:	f1a0 0114 	sub.w	r1, r0, #20
 800ba22:	291e      	cmp	r1, #30
 800ba24:	bfda      	itte	le
 800ba26:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ba2a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ba2e:	2101      	movgt	r1, #1
 800ba30:	460a      	mov	r2, r1
 800ba32:	e7e1      	b.n	800b9f8 <__ulp+0x18>
 800ba34:	7ff00000 	.word	0x7ff00000

0800ba38 <__b2d>:
 800ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3a:	6905      	ldr	r5, [r0, #16]
 800ba3c:	f100 0714 	add.w	r7, r0, #20
 800ba40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ba44:	1f2e      	subs	r6, r5, #4
 800ba46:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f7ff fd48 	bl	800b4e0 <__hi0bits>
 800ba50:	f1c0 0320 	rsb	r3, r0, #32
 800ba54:	280a      	cmp	r0, #10
 800ba56:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bad4 <__b2d+0x9c>
 800ba5a:	600b      	str	r3, [r1, #0]
 800ba5c:	dc14      	bgt.n	800ba88 <__b2d+0x50>
 800ba5e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ba62:	fa24 f10e 	lsr.w	r1, r4, lr
 800ba66:	42b7      	cmp	r7, r6
 800ba68:	ea41 030c 	orr.w	r3, r1, ip
 800ba6c:	bf34      	ite	cc
 800ba6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba72:	2100      	movcs	r1, #0
 800ba74:	3015      	adds	r0, #21
 800ba76:	fa04 f000 	lsl.w	r0, r4, r0
 800ba7a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ba7e:	ea40 0201 	orr.w	r2, r0, r1
 800ba82:	ec43 2b10 	vmov	d0, r2, r3
 800ba86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba88:	42b7      	cmp	r7, r6
 800ba8a:	bf3a      	itte	cc
 800ba8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba90:	f1a5 0608 	subcc.w	r6, r5, #8
 800ba94:	2100      	movcs	r1, #0
 800ba96:	380b      	subs	r0, #11
 800ba98:	d017      	beq.n	800baca <__b2d+0x92>
 800ba9a:	f1c0 0c20 	rsb	ip, r0, #32
 800ba9e:	fa04 f500 	lsl.w	r5, r4, r0
 800baa2:	42be      	cmp	r6, r7
 800baa4:	fa21 f40c 	lsr.w	r4, r1, ip
 800baa8:	ea45 0504 	orr.w	r5, r5, r4
 800baac:	bf8c      	ite	hi
 800baae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bab2:	2400      	movls	r4, #0
 800bab4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bab8:	fa01 f000 	lsl.w	r0, r1, r0
 800babc:	fa24 f40c 	lsr.w	r4, r4, ip
 800bac0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bac4:	ea40 0204 	orr.w	r2, r0, r4
 800bac8:	e7db      	b.n	800ba82 <__b2d+0x4a>
 800baca:	ea44 030c 	orr.w	r3, r4, ip
 800bace:	460a      	mov	r2, r1
 800bad0:	e7d7      	b.n	800ba82 <__b2d+0x4a>
 800bad2:	bf00      	nop
 800bad4:	3ff00000 	.word	0x3ff00000

0800bad8 <__d2b>:
 800bad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800badc:	4689      	mov	r9, r1
 800bade:	2101      	movs	r1, #1
 800bae0:	ec57 6b10 	vmov	r6, r7, d0
 800bae4:	4690      	mov	r8, r2
 800bae6:	f7ff fc09 	bl	800b2fc <_Balloc>
 800baea:	4604      	mov	r4, r0
 800baec:	b930      	cbnz	r0, 800bafc <__d2b+0x24>
 800baee:	4602      	mov	r2, r0
 800baf0:	4b25      	ldr	r3, [pc, #148]	; (800bb88 <__d2b+0xb0>)
 800baf2:	4826      	ldr	r0, [pc, #152]	; (800bb8c <__d2b+0xb4>)
 800baf4:	f240 310a 	movw	r1, #778	; 0x30a
 800baf8:	f000 fb50 	bl	800c19c <__assert_func>
 800bafc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bb00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb04:	bb35      	cbnz	r5, 800bb54 <__d2b+0x7c>
 800bb06:	2e00      	cmp	r6, #0
 800bb08:	9301      	str	r3, [sp, #4]
 800bb0a:	d028      	beq.n	800bb5e <__d2b+0x86>
 800bb0c:	4668      	mov	r0, sp
 800bb0e:	9600      	str	r6, [sp, #0]
 800bb10:	f7ff fd06 	bl	800b520 <__lo0bits>
 800bb14:	9900      	ldr	r1, [sp, #0]
 800bb16:	b300      	cbz	r0, 800bb5a <__d2b+0x82>
 800bb18:	9a01      	ldr	r2, [sp, #4]
 800bb1a:	f1c0 0320 	rsb	r3, r0, #32
 800bb1e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb22:	430b      	orrs	r3, r1
 800bb24:	40c2      	lsrs	r2, r0
 800bb26:	6163      	str	r3, [r4, #20]
 800bb28:	9201      	str	r2, [sp, #4]
 800bb2a:	9b01      	ldr	r3, [sp, #4]
 800bb2c:	61a3      	str	r3, [r4, #24]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	bf14      	ite	ne
 800bb32:	2202      	movne	r2, #2
 800bb34:	2201      	moveq	r2, #1
 800bb36:	6122      	str	r2, [r4, #16]
 800bb38:	b1d5      	cbz	r5, 800bb70 <__d2b+0x98>
 800bb3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bb3e:	4405      	add	r5, r0
 800bb40:	f8c9 5000 	str.w	r5, [r9]
 800bb44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb48:	f8c8 0000 	str.w	r0, [r8]
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	b003      	add	sp, #12
 800bb50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb58:	e7d5      	b.n	800bb06 <__d2b+0x2e>
 800bb5a:	6161      	str	r1, [r4, #20]
 800bb5c:	e7e5      	b.n	800bb2a <__d2b+0x52>
 800bb5e:	a801      	add	r0, sp, #4
 800bb60:	f7ff fcde 	bl	800b520 <__lo0bits>
 800bb64:	9b01      	ldr	r3, [sp, #4]
 800bb66:	6163      	str	r3, [r4, #20]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	6122      	str	r2, [r4, #16]
 800bb6c:	3020      	adds	r0, #32
 800bb6e:	e7e3      	b.n	800bb38 <__d2b+0x60>
 800bb70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb78:	f8c9 0000 	str.w	r0, [r9]
 800bb7c:	6918      	ldr	r0, [r3, #16]
 800bb7e:	f7ff fcaf 	bl	800b4e0 <__hi0bits>
 800bb82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb86:	e7df      	b.n	800bb48 <__d2b+0x70>
 800bb88:	0800e030 	.word	0x0800e030
 800bb8c:	0800e0bc 	.word	0x0800e0bc

0800bb90 <__ratio>:
 800bb90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	4688      	mov	r8, r1
 800bb96:	4669      	mov	r1, sp
 800bb98:	4681      	mov	r9, r0
 800bb9a:	f7ff ff4d 	bl	800ba38 <__b2d>
 800bb9e:	a901      	add	r1, sp, #4
 800bba0:	4640      	mov	r0, r8
 800bba2:	ec55 4b10 	vmov	r4, r5, d0
 800bba6:	f7ff ff47 	bl	800ba38 <__b2d>
 800bbaa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bbb2:	eba3 0c02 	sub.w	ip, r3, r2
 800bbb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bbba:	1a9b      	subs	r3, r3, r2
 800bbbc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bbc0:	ec51 0b10 	vmov	r0, r1, d0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	bfd6      	itet	le
 800bbc8:	460a      	movle	r2, r1
 800bbca:	462a      	movgt	r2, r5
 800bbcc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bbd0:	468b      	mov	fp, r1
 800bbd2:	462f      	mov	r7, r5
 800bbd4:	bfd4      	ite	le
 800bbd6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bbda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bbde:	4620      	mov	r0, r4
 800bbe0:	ee10 2a10 	vmov	r2, s0
 800bbe4:	465b      	mov	r3, fp
 800bbe6:	4639      	mov	r1, r7
 800bbe8:	f7f4 fe30 	bl	800084c <__aeabi_ddiv>
 800bbec:	ec41 0b10 	vmov	d0, r0, r1
 800bbf0:	b003      	add	sp, #12
 800bbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bbf6 <__copybits>:
 800bbf6:	3901      	subs	r1, #1
 800bbf8:	b570      	push	{r4, r5, r6, lr}
 800bbfa:	1149      	asrs	r1, r1, #5
 800bbfc:	6914      	ldr	r4, [r2, #16]
 800bbfe:	3101      	adds	r1, #1
 800bc00:	f102 0314 	add.w	r3, r2, #20
 800bc04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc0c:	1f05      	subs	r5, r0, #4
 800bc0e:	42a3      	cmp	r3, r4
 800bc10:	d30c      	bcc.n	800bc2c <__copybits+0x36>
 800bc12:	1aa3      	subs	r3, r4, r2
 800bc14:	3b11      	subs	r3, #17
 800bc16:	f023 0303 	bic.w	r3, r3, #3
 800bc1a:	3211      	adds	r2, #17
 800bc1c:	42a2      	cmp	r2, r4
 800bc1e:	bf88      	it	hi
 800bc20:	2300      	movhi	r3, #0
 800bc22:	4418      	add	r0, r3
 800bc24:	2300      	movs	r3, #0
 800bc26:	4288      	cmp	r0, r1
 800bc28:	d305      	bcc.n	800bc36 <__copybits+0x40>
 800bc2a:	bd70      	pop	{r4, r5, r6, pc}
 800bc2c:	f853 6b04 	ldr.w	r6, [r3], #4
 800bc30:	f845 6f04 	str.w	r6, [r5, #4]!
 800bc34:	e7eb      	b.n	800bc0e <__copybits+0x18>
 800bc36:	f840 3b04 	str.w	r3, [r0], #4
 800bc3a:	e7f4      	b.n	800bc26 <__copybits+0x30>

0800bc3c <__any_on>:
 800bc3c:	f100 0214 	add.w	r2, r0, #20
 800bc40:	6900      	ldr	r0, [r0, #16]
 800bc42:	114b      	asrs	r3, r1, #5
 800bc44:	4298      	cmp	r0, r3
 800bc46:	b510      	push	{r4, lr}
 800bc48:	db11      	blt.n	800bc6e <__any_on+0x32>
 800bc4a:	dd0a      	ble.n	800bc62 <__any_on+0x26>
 800bc4c:	f011 011f 	ands.w	r1, r1, #31
 800bc50:	d007      	beq.n	800bc62 <__any_on+0x26>
 800bc52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bc56:	fa24 f001 	lsr.w	r0, r4, r1
 800bc5a:	fa00 f101 	lsl.w	r1, r0, r1
 800bc5e:	428c      	cmp	r4, r1
 800bc60:	d10b      	bne.n	800bc7a <__any_on+0x3e>
 800bc62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d803      	bhi.n	800bc72 <__any_on+0x36>
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	bd10      	pop	{r4, pc}
 800bc6e:	4603      	mov	r3, r0
 800bc70:	e7f7      	b.n	800bc62 <__any_on+0x26>
 800bc72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc76:	2900      	cmp	r1, #0
 800bc78:	d0f5      	beq.n	800bc66 <__any_on+0x2a>
 800bc7a:	2001      	movs	r0, #1
 800bc7c:	e7f6      	b.n	800bc6c <__any_on+0x30>

0800bc7e <_calloc_r>:
 800bc7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc80:	fba1 2402 	umull	r2, r4, r1, r2
 800bc84:	b94c      	cbnz	r4, 800bc9a <_calloc_r+0x1c>
 800bc86:	4611      	mov	r1, r2
 800bc88:	9201      	str	r2, [sp, #4]
 800bc8a:	f000 f87b 	bl	800bd84 <_malloc_r>
 800bc8e:	9a01      	ldr	r2, [sp, #4]
 800bc90:	4605      	mov	r5, r0
 800bc92:	b930      	cbnz	r0, 800bca2 <_calloc_r+0x24>
 800bc94:	4628      	mov	r0, r5
 800bc96:	b003      	add	sp, #12
 800bc98:	bd30      	pop	{r4, r5, pc}
 800bc9a:	220c      	movs	r2, #12
 800bc9c:	6002      	str	r2, [r0, #0]
 800bc9e:	2500      	movs	r5, #0
 800bca0:	e7f8      	b.n	800bc94 <_calloc_r+0x16>
 800bca2:	4621      	mov	r1, r4
 800bca4:	f7fc fbc0 	bl	8008428 <memset>
 800bca8:	e7f4      	b.n	800bc94 <_calloc_r+0x16>
	...

0800bcac <_free_r>:
 800bcac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcae:	2900      	cmp	r1, #0
 800bcb0:	d044      	beq.n	800bd3c <_free_r+0x90>
 800bcb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcb6:	9001      	str	r0, [sp, #4]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	f1a1 0404 	sub.w	r4, r1, #4
 800bcbe:	bfb8      	it	lt
 800bcc0:	18e4      	addlt	r4, r4, r3
 800bcc2:	f000 fab5 	bl	800c230 <__malloc_lock>
 800bcc6:	4a1e      	ldr	r2, [pc, #120]	; (800bd40 <_free_r+0x94>)
 800bcc8:	9801      	ldr	r0, [sp, #4]
 800bcca:	6813      	ldr	r3, [r2, #0]
 800bccc:	b933      	cbnz	r3, 800bcdc <_free_r+0x30>
 800bcce:	6063      	str	r3, [r4, #4]
 800bcd0:	6014      	str	r4, [r2, #0]
 800bcd2:	b003      	add	sp, #12
 800bcd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcd8:	f000 bab0 	b.w	800c23c <__malloc_unlock>
 800bcdc:	42a3      	cmp	r3, r4
 800bcde:	d908      	bls.n	800bcf2 <_free_r+0x46>
 800bce0:	6825      	ldr	r5, [r4, #0]
 800bce2:	1961      	adds	r1, r4, r5
 800bce4:	428b      	cmp	r3, r1
 800bce6:	bf01      	itttt	eq
 800bce8:	6819      	ldreq	r1, [r3, #0]
 800bcea:	685b      	ldreq	r3, [r3, #4]
 800bcec:	1949      	addeq	r1, r1, r5
 800bcee:	6021      	streq	r1, [r4, #0]
 800bcf0:	e7ed      	b.n	800bcce <_free_r+0x22>
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	b10b      	cbz	r3, 800bcfc <_free_r+0x50>
 800bcf8:	42a3      	cmp	r3, r4
 800bcfa:	d9fa      	bls.n	800bcf2 <_free_r+0x46>
 800bcfc:	6811      	ldr	r1, [r2, #0]
 800bcfe:	1855      	adds	r5, r2, r1
 800bd00:	42a5      	cmp	r5, r4
 800bd02:	d10b      	bne.n	800bd1c <_free_r+0x70>
 800bd04:	6824      	ldr	r4, [r4, #0]
 800bd06:	4421      	add	r1, r4
 800bd08:	1854      	adds	r4, r2, r1
 800bd0a:	42a3      	cmp	r3, r4
 800bd0c:	6011      	str	r1, [r2, #0]
 800bd0e:	d1e0      	bne.n	800bcd2 <_free_r+0x26>
 800bd10:	681c      	ldr	r4, [r3, #0]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	6053      	str	r3, [r2, #4]
 800bd16:	4421      	add	r1, r4
 800bd18:	6011      	str	r1, [r2, #0]
 800bd1a:	e7da      	b.n	800bcd2 <_free_r+0x26>
 800bd1c:	d902      	bls.n	800bd24 <_free_r+0x78>
 800bd1e:	230c      	movs	r3, #12
 800bd20:	6003      	str	r3, [r0, #0]
 800bd22:	e7d6      	b.n	800bcd2 <_free_r+0x26>
 800bd24:	6825      	ldr	r5, [r4, #0]
 800bd26:	1961      	adds	r1, r4, r5
 800bd28:	428b      	cmp	r3, r1
 800bd2a:	bf04      	itt	eq
 800bd2c:	6819      	ldreq	r1, [r3, #0]
 800bd2e:	685b      	ldreq	r3, [r3, #4]
 800bd30:	6063      	str	r3, [r4, #4]
 800bd32:	bf04      	itt	eq
 800bd34:	1949      	addeq	r1, r1, r5
 800bd36:	6021      	streq	r1, [r4, #0]
 800bd38:	6054      	str	r4, [r2, #4]
 800bd3a:	e7ca      	b.n	800bcd2 <_free_r+0x26>
 800bd3c:	b003      	add	sp, #12
 800bd3e:	bd30      	pop	{r4, r5, pc}
 800bd40:	20000824 	.word	0x20000824

0800bd44 <sbrk_aligned>:
 800bd44:	b570      	push	{r4, r5, r6, lr}
 800bd46:	4e0e      	ldr	r6, [pc, #56]	; (800bd80 <sbrk_aligned+0x3c>)
 800bd48:	460c      	mov	r4, r1
 800bd4a:	6831      	ldr	r1, [r6, #0]
 800bd4c:	4605      	mov	r5, r0
 800bd4e:	b911      	cbnz	r1, 800bd56 <sbrk_aligned+0x12>
 800bd50:	f000 f9f2 	bl	800c138 <_sbrk_r>
 800bd54:	6030      	str	r0, [r6, #0]
 800bd56:	4621      	mov	r1, r4
 800bd58:	4628      	mov	r0, r5
 800bd5a:	f000 f9ed 	bl	800c138 <_sbrk_r>
 800bd5e:	1c43      	adds	r3, r0, #1
 800bd60:	d00a      	beq.n	800bd78 <sbrk_aligned+0x34>
 800bd62:	1cc4      	adds	r4, r0, #3
 800bd64:	f024 0403 	bic.w	r4, r4, #3
 800bd68:	42a0      	cmp	r0, r4
 800bd6a:	d007      	beq.n	800bd7c <sbrk_aligned+0x38>
 800bd6c:	1a21      	subs	r1, r4, r0
 800bd6e:	4628      	mov	r0, r5
 800bd70:	f000 f9e2 	bl	800c138 <_sbrk_r>
 800bd74:	3001      	adds	r0, #1
 800bd76:	d101      	bne.n	800bd7c <sbrk_aligned+0x38>
 800bd78:	f04f 34ff 	mov.w	r4, #4294967295
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
 800bd80:	20000828 	.word	0x20000828

0800bd84 <_malloc_r>:
 800bd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd88:	1ccd      	adds	r5, r1, #3
 800bd8a:	f025 0503 	bic.w	r5, r5, #3
 800bd8e:	3508      	adds	r5, #8
 800bd90:	2d0c      	cmp	r5, #12
 800bd92:	bf38      	it	cc
 800bd94:	250c      	movcc	r5, #12
 800bd96:	2d00      	cmp	r5, #0
 800bd98:	4607      	mov	r7, r0
 800bd9a:	db01      	blt.n	800bda0 <_malloc_r+0x1c>
 800bd9c:	42a9      	cmp	r1, r5
 800bd9e:	d905      	bls.n	800bdac <_malloc_r+0x28>
 800bda0:	230c      	movs	r3, #12
 800bda2:	603b      	str	r3, [r7, #0]
 800bda4:	2600      	movs	r6, #0
 800bda6:	4630      	mov	r0, r6
 800bda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdac:	4e2e      	ldr	r6, [pc, #184]	; (800be68 <_malloc_r+0xe4>)
 800bdae:	f000 fa3f 	bl	800c230 <__malloc_lock>
 800bdb2:	6833      	ldr	r3, [r6, #0]
 800bdb4:	461c      	mov	r4, r3
 800bdb6:	bb34      	cbnz	r4, 800be06 <_malloc_r+0x82>
 800bdb8:	4629      	mov	r1, r5
 800bdba:	4638      	mov	r0, r7
 800bdbc:	f7ff ffc2 	bl	800bd44 <sbrk_aligned>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	d14d      	bne.n	800be62 <_malloc_r+0xde>
 800bdc6:	6834      	ldr	r4, [r6, #0]
 800bdc8:	4626      	mov	r6, r4
 800bdca:	2e00      	cmp	r6, #0
 800bdcc:	d140      	bne.n	800be50 <_malloc_r+0xcc>
 800bdce:	6823      	ldr	r3, [r4, #0]
 800bdd0:	4631      	mov	r1, r6
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	eb04 0803 	add.w	r8, r4, r3
 800bdd8:	f000 f9ae 	bl	800c138 <_sbrk_r>
 800bddc:	4580      	cmp	r8, r0
 800bdde:	d13a      	bne.n	800be56 <_malloc_r+0xd2>
 800bde0:	6821      	ldr	r1, [r4, #0]
 800bde2:	3503      	adds	r5, #3
 800bde4:	1a6d      	subs	r5, r5, r1
 800bde6:	f025 0503 	bic.w	r5, r5, #3
 800bdea:	3508      	adds	r5, #8
 800bdec:	2d0c      	cmp	r5, #12
 800bdee:	bf38      	it	cc
 800bdf0:	250c      	movcc	r5, #12
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	4638      	mov	r0, r7
 800bdf6:	f7ff ffa5 	bl	800bd44 <sbrk_aligned>
 800bdfa:	3001      	adds	r0, #1
 800bdfc:	d02b      	beq.n	800be56 <_malloc_r+0xd2>
 800bdfe:	6823      	ldr	r3, [r4, #0]
 800be00:	442b      	add	r3, r5
 800be02:	6023      	str	r3, [r4, #0]
 800be04:	e00e      	b.n	800be24 <_malloc_r+0xa0>
 800be06:	6822      	ldr	r2, [r4, #0]
 800be08:	1b52      	subs	r2, r2, r5
 800be0a:	d41e      	bmi.n	800be4a <_malloc_r+0xc6>
 800be0c:	2a0b      	cmp	r2, #11
 800be0e:	d916      	bls.n	800be3e <_malloc_r+0xba>
 800be10:	1961      	adds	r1, r4, r5
 800be12:	42a3      	cmp	r3, r4
 800be14:	6025      	str	r5, [r4, #0]
 800be16:	bf18      	it	ne
 800be18:	6059      	strne	r1, [r3, #4]
 800be1a:	6863      	ldr	r3, [r4, #4]
 800be1c:	bf08      	it	eq
 800be1e:	6031      	streq	r1, [r6, #0]
 800be20:	5162      	str	r2, [r4, r5]
 800be22:	604b      	str	r3, [r1, #4]
 800be24:	4638      	mov	r0, r7
 800be26:	f104 060b 	add.w	r6, r4, #11
 800be2a:	f000 fa07 	bl	800c23c <__malloc_unlock>
 800be2e:	f026 0607 	bic.w	r6, r6, #7
 800be32:	1d23      	adds	r3, r4, #4
 800be34:	1af2      	subs	r2, r6, r3
 800be36:	d0b6      	beq.n	800bda6 <_malloc_r+0x22>
 800be38:	1b9b      	subs	r3, r3, r6
 800be3a:	50a3      	str	r3, [r4, r2]
 800be3c:	e7b3      	b.n	800bda6 <_malloc_r+0x22>
 800be3e:	6862      	ldr	r2, [r4, #4]
 800be40:	42a3      	cmp	r3, r4
 800be42:	bf0c      	ite	eq
 800be44:	6032      	streq	r2, [r6, #0]
 800be46:	605a      	strne	r2, [r3, #4]
 800be48:	e7ec      	b.n	800be24 <_malloc_r+0xa0>
 800be4a:	4623      	mov	r3, r4
 800be4c:	6864      	ldr	r4, [r4, #4]
 800be4e:	e7b2      	b.n	800bdb6 <_malloc_r+0x32>
 800be50:	4634      	mov	r4, r6
 800be52:	6876      	ldr	r6, [r6, #4]
 800be54:	e7b9      	b.n	800bdca <_malloc_r+0x46>
 800be56:	230c      	movs	r3, #12
 800be58:	603b      	str	r3, [r7, #0]
 800be5a:	4638      	mov	r0, r7
 800be5c:	f000 f9ee 	bl	800c23c <__malloc_unlock>
 800be60:	e7a1      	b.n	800bda6 <_malloc_r+0x22>
 800be62:	6025      	str	r5, [r4, #0]
 800be64:	e7de      	b.n	800be24 <_malloc_r+0xa0>
 800be66:	bf00      	nop
 800be68:	20000824 	.word	0x20000824

0800be6c <__ssputs_r>:
 800be6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be70:	688e      	ldr	r6, [r1, #8]
 800be72:	429e      	cmp	r6, r3
 800be74:	4682      	mov	sl, r0
 800be76:	460c      	mov	r4, r1
 800be78:	4690      	mov	r8, r2
 800be7a:	461f      	mov	r7, r3
 800be7c:	d838      	bhi.n	800bef0 <__ssputs_r+0x84>
 800be7e:	898a      	ldrh	r2, [r1, #12]
 800be80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be84:	d032      	beq.n	800beec <__ssputs_r+0x80>
 800be86:	6825      	ldr	r5, [r4, #0]
 800be88:	6909      	ldr	r1, [r1, #16]
 800be8a:	eba5 0901 	sub.w	r9, r5, r1
 800be8e:	6965      	ldr	r5, [r4, #20]
 800be90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be98:	3301      	adds	r3, #1
 800be9a:	444b      	add	r3, r9
 800be9c:	106d      	asrs	r5, r5, #1
 800be9e:	429d      	cmp	r5, r3
 800bea0:	bf38      	it	cc
 800bea2:	461d      	movcc	r5, r3
 800bea4:	0553      	lsls	r3, r2, #21
 800bea6:	d531      	bpl.n	800bf0c <__ssputs_r+0xa0>
 800bea8:	4629      	mov	r1, r5
 800beaa:	f7ff ff6b 	bl	800bd84 <_malloc_r>
 800beae:	4606      	mov	r6, r0
 800beb0:	b950      	cbnz	r0, 800bec8 <__ssputs_r+0x5c>
 800beb2:	230c      	movs	r3, #12
 800beb4:	f8ca 3000 	str.w	r3, [sl]
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bebe:	81a3      	strh	r3, [r4, #12]
 800bec0:	f04f 30ff 	mov.w	r0, #4294967295
 800bec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bec8:	6921      	ldr	r1, [r4, #16]
 800beca:	464a      	mov	r2, r9
 800becc:	f7ff fa08 	bl	800b2e0 <memcpy>
 800bed0:	89a3      	ldrh	r3, [r4, #12]
 800bed2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800beda:	81a3      	strh	r3, [r4, #12]
 800bedc:	6126      	str	r6, [r4, #16]
 800bede:	6165      	str	r5, [r4, #20]
 800bee0:	444e      	add	r6, r9
 800bee2:	eba5 0509 	sub.w	r5, r5, r9
 800bee6:	6026      	str	r6, [r4, #0]
 800bee8:	60a5      	str	r5, [r4, #8]
 800beea:	463e      	mov	r6, r7
 800beec:	42be      	cmp	r6, r7
 800beee:	d900      	bls.n	800bef2 <__ssputs_r+0x86>
 800bef0:	463e      	mov	r6, r7
 800bef2:	6820      	ldr	r0, [r4, #0]
 800bef4:	4632      	mov	r2, r6
 800bef6:	4641      	mov	r1, r8
 800bef8:	f000 f980 	bl	800c1fc <memmove>
 800befc:	68a3      	ldr	r3, [r4, #8]
 800befe:	1b9b      	subs	r3, r3, r6
 800bf00:	60a3      	str	r3, [r4, #8]
 800bf02:	6823      	ldr	r3, [r4, #0]
 800bf04:	4433      	add	r3, r6
 800bf06:	6023      	str	r3, [r4, #0]
 800bf08:	2000      	movs	r0, #0
 800bf0a:	e7db      	b.n	800bec4 <__ssputs_r+0x58>
 800bf0c:	462a      	mov	r2, r5
 800bf0e:	f000 f99b 	bl	800c248 <_realloc_r>
 800bf12:	4606      	mov	r6, r0
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d1e1      	bne.n	800bedc <__ssputs_r+0x70>
 800bf18:	6921      	ldr	r1, [r4, #16]
 800bf1a:	4650      	mov	r0, sl
 800bf1c:	f7ff fec6 	bl	800bcac <_free_r>
 800bf20:	e7c7      	b.n	800beb2 <__ssputs_r+0x46>
	...

0800bf24 <_svfiprintf_r>:
 800bf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf28:	4698      	mov	r8, r3
 800bf2a:	898b      	ldrh	r3, [r1, #12]
 800bf2c:	061b      	lsls	r3, r3, #24
 800bf2e:	b09d      	sub	sp, #116	; 0x74
 800bf30:	4607      	mov	r7, r0
 800bf32:	460d      	mov	r5, r1
 800bf34:	4614      	mov	r4, r2
 800bf36:	d50e      	bpl.n	800bf56 <_svfiprintf_r+0x32>
 800bf38:	690b      	ldr	r3, [r1, #16]
 800bf3a:	b963      	cbnz	r3, 800bf56 <_svfiprintf_r+0x32>
 800bf3c:	2140      	movs	r1, #64	; 0x40
 800bf3e:	f7ff ff21 	bl	800bd84 <_malloc_r>
 800bf42:	6028      	str	r0, [r5, #0]
 800bf44:	6128      	str	r0, [r5, #16]
 800bf46:	b920      	cbnz	r0, 800bf52 <_svfiprintf_r+0x2e>
 800bf48:	230c      	movs	r3, #12
 800bf4a:	603b      	str	r3, [r7, #0]
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	e0d1      	b.n	800c0f6 <_svfiprintf_r+0x1d2>
 800bf52:	2340      	movs	r3, #64	; 0x40
 800bf54:	616b      	str	r3, [r5, #20]
 800bf56:	2300      	movs	r3, #0
 800bf58:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5a:	2320      	movs	r3, #32
 800bf5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf60:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf64:	2330      	movs	r3, #48	; 0x30
 800bf66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c110 <_svfiprintf_r+0x1ec>
 800bf6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf6e:	f04f 0901 	mov.w	r9, #1
 800bf72:	4623      	mov	r3, r4
 800bf74:	469a      	mov	sl, r3
 800bf76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf7a:	b10a      	cbz	r2, 800bf80 <_svfiprintf_r+0x5c>
 800bf7c:	2a25      	cmp	r2, #37	; 0x25
 800bf7e:	d1f9      	bne.n	800bf74 <_svfiprintf_r+0x50>
 800bf80:	ebba 0b04 	subs.w	fp, sl, r4
 800bf84:	d00b      	beq.n	800bf9e <_svfiprintf_r+0x7a>
 800bf86:	465b      	mov	r3, fp
 800bf88:	4622      	mov	r2, r4
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	4638      	mov	r0, r7
 800bf8e:	f7ff ff6d 	bl	800be6c <__ssputs_r>
 800bf92:	3001      	adds	r0, #1
 800bf94:	f000 80aa 	beq.w	800c0ec <_svfiprintf_r+0x1c8>
 800bf98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf9a:	445a      	add	r2, fp
 800bf9c:	9209      	str	r2, [sp, #36]	; 0x24
 800bf9e:	f89a 3000 	ldrb.w	r3, [sl]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f000 80a2 	beq.w	800c0ec <_svfiprintf_r+0x1c8>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	f04f 32ff 	mov.w	r2, #4294967295
 800bfae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfb2:	f10a 0a01 	add.w	sl, sl, #1
 800bfb6:	9304      	str	r3, [sp, #16]
 800bfb8:	9307      	str	r3, [sp, #28]
 800bfba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfbe:	931a      	str	r3, [sp, #104]	; 0x68
 800bfc0:	4654      	mov	r4, sl
 800bfc2:	2205      	movs	r2, #5
 800bfc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc8:	4851      	ldr	r0, [pc, #324]	; (800c110 <_svfiprintf_r+0x1ec>)
 800bfca:	f7f4 f909 	bl	80001e0 <memchr>
 800bfce:	9a04      	ldr	r2, [sp, #16]
 800bfd0:	b9d8      	cbnz	r0, 800c00a <_svfiprintf_r+0xe6>
 800bfd2:	06d0      	lsls	r0, r2, #27
 800bfd4:	bf44      	itt	mi
 800bfd6:	2320      	movmi	r3, #32
 800bfd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfdc:	0711      	lsls	r1, r2, #28
 800bfde:	bf44      	itt	mi
 800bfe0:	232b      	movmi	r3, #43	; 0x2b
 800bfe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfe6:	f89a 3000 	ldrb.w	r3, [sl]
 800bfea:	2b2a      	cmp	r3, #42	; 0x2a
 800bfec:	d015      	beq.n	800c01a <_svfiprintf_r+0xf6>
 800bfee:	9a07      	ldr	r2, [sp, #28]
 800bff0:	4654      	mov	r4, sl
 800bff2:	2000      	movs	r0, #0
 800bff4:	f04f 0c0a 	mov.w	ip, #10
 800bff8:	4621      	mov	r1, r4
 800bffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bffe:	3b30      	subs	r3, #48	; 0x30
 800c000:	2b09      	cmp	r3, #9
 800c002:	d94e      	bls.n	800c0a2 <_svfiprintf_r+0x17e>
 800c004:	b1b0      	cbz	r0, 800c034 <_svfiprintf_r+0x110>
 800c006:	9207      	str	r2, [sp, #28]
 800c008:	e014      	b.n	800c034 <_svfiprintf_r+0x110>
 800c00a:	eba0 0308 	sub.w	r3, r0, r8
 800c00e:	fa09 f303 	lsl.w	r3, r9, r3
 800c012:	4313      	orrs	r3, r2
 800c014:	9304      	str	r3, [sp, #16]
 800c016:	46a2      	mov	sl, r4
 800c018:	e7d2      	b.n	800bfc0 <_svfiprintf_r+0x9c>
 800c01a:	9b03      	ldr	r3, [sp, #12]
 800c01c:	1d19      	adds	r1, r3, #4
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	9103      	str	r1, [sp, #12]
 800c022:	2b00      	cmp	r3, #0
 800c024:	bfbb      	ittet	lt
 800c026:	425b      	neglt	r3, r3
 800c028:	f042 0202 	orrlt.w	r2, r2, #2
 800c02c:	9307      	strge	r3, [sp, #28]
 800c02e:	9307      	strlt	r3, [sp, #28]
 800c030:	bfb8      	it	lt
 800c032:	9204      	strlt	r2, [sp, #16]
 800c034:	7823      	ldrb	r3, [r4, #0]
 800c036:	2b2e      	cmp	r3, #46	; 0x2e
 800c038:	d10c      	bne.n	800c054 <_svfiprintf_r+0x130>
 800c03a:	7863      	ldrb	r3, [r4, #1]
 800c03c:	2b2a      	cmp	r3, #42	; 0x2a
 800c03e:	d135      	bne.n	800c0ac <_svfiprintf_r+0x188>
 800c040:	9b03      	ldr	r3, [sp, #12]
 800c042:	1d1a      	adds	r2, r3, #4
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	9203      	str	r2, [sp, #12]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	bfb8      	it	lt
 800c04c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c050:	3402      	adds	r4, #2
 800c052:	9305      	str	r3, [sp, #20]
 800c054:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c120 <_svfiprintf_r+0x1fc>
 800c058:	7821      	ldrb	r1, [r4, #0]
 800c05a:	2203      	movs	r2, #3
 800c05c:	4650      	mov	r0, sl
 800c05e:	f7f4 f8bf 	bl	80001e0 <memchr>
 800c062:	b140      	cbz	r0, 800c076 <_svfiprintf_r+0x152>
 800c064:	2340      	movs	r3, #64	; 0x40
 800c066:	eba0 000a 	sub.w	r0, r0, sl
 800c06a:	fa03 f000 	lsl.w	r0, r3, r0
 800c06e:	9b04      	ldr	r3, [sp, #16]
 800c070:	4303      	orrs	r3, r0
 800c072:	3401      	adds	r4, #1
 800c074:	9304      	str	r3, [sp, #16]
 800c076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c07a:	4826      	ldr	r0, [pc, #152]	; (800c114 <_svfiprintf_r+0x1f0>)
 800c07c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c080:	2206      	movs	r2, #6
 800c082:	f7f4 f8ad 	bl	80001e0 <memchr>
 800c086:	2800      	cmp	r0, #0
 800c088:	d038      	beq.n	800c0fc <_svfiprintf_r+0x1d8>
 800c08a:	4b23      	ldr	r3, [pc, #140]	; (800c118 <_svfiprintf_r+0x1f4>)
 800c08c:	bb1b      	cbnz	r3, 800c0d6 <_svfiprintf_r+0x1b2>
 800c08e:	9b03      	ldr	r3, [sp, #12]
 800c090:	3307      	adds	r3, #7
 800c092:	f023 0307 	bic.w	r3, r3, #7
 800c096:	3308      	adds	r3, #8
 800c098:	9303      	str	r3, [sp, #12]
 800c09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c09c:	4433      	add	r3, r6
 800c09e:	9309      	str	r3, [sp, #36]	; 0x24
 800c0a0:	e767      	b.n	800bf72 <_svfiprintf_r+0x4e>
 800c0a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0a6:	460c      	mov	r4, r1
 800c0a8:	2001      	movs	r0, #1
 800c0aa:	e7a5      	b.n	800bff8 <_svfiprintf_r+0xd4>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	3401      	adds	r4, #1
 800c0b0:	9305      	str	r3, [sp, #20]
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	f04f 0c0a 	mov.w	ip, #10
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0be:	3a30      	subs	r2, #48	; 0x30
 800c0c0:	2a09      	cmp	r2, #9
 800c0c2:	d903      	bls.n	800c0cc <_svfiprintf_r+0x1a8>
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d0c5      	beq.n	800c054 <_svfiprintf_r+0x130>
 800c0c8:	9105      	str	r1, [sp, #20]
 800c0ca:	e7c3      	b.n	800c054 <_svfiprintf_r+0x130>
 800c0cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e7f0      	b.n	800c0b8 <_svfiprintf_r+0x194>
 800c0d6:	ab03      	add	r3, sp, #12
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	462a      	mov	r2, r5
 800c0dc:	4b0f      	ldr	r3, [pc, #60]	; (800c11c <_svfiprintf_r+0x1f8>)
 800c0de:	a904      	add	r1, sp, #16
 800c0e0:	4638      	mov	r0, r7
 800c0e2:	f7fc fa49 	bl	8008578 <_printf_float>
 800c0e6:	1c42      	adds	r2, r0, #1
 800c0e8:	4606      	mov	r6, r0
 800c0ea:	d1d6      	bne.n	800c09a <_svfiprintf_r+0x176>
 800c0ec:	89ab      	ldrh	r3, [r5, #12]
 800c0ee:	065b      	lsls	r3, r3, #25
 800c0f0:	f53f af2c 	bmi.w	800bf4c <_svfiprintf_r+0x28>
 800c0f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0f6:	b01d      	add	sp, #116	; 0x74
 800c0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fc:	ab03      	add	r3, sp, #12
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	462a      	mov	r2, r5
 800c102:	4b06      	ldr	r3, [pc, #24]	; (800c11c <_svfiprintf_r+0x1f8>)
 800c104:	a904      	add	r1, sp, #16
 800c106:	4638      	mov	r0, r7
 800c108:	f7fc fcda 	bl	8008ac0 <_printf_i>
 800c10c:	e7eb      	b.n	800c0e6 <_svfiprintf_r+0x1c2>
 800c10e:	bf00      	nop
 800c110:	0800e214 	.word	0x0800e214
 800c114:	0800e21e 	.word	0x0800e21e
 800c118:	08008579 	.word	0x08008579
 800c11c:	0800be6d 	.word	0x0800be6d
 800c120:	0800e21a 	.word	0x0800e21a
 800c124:	00000000 	.word	0x00000000

0800c128 <nan>:
 800c128:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c130 <nan+0x8>
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	00000000 	.word	0x00000000
 800c134:	7ff80000 	.word	0x7ff80000

0800c138 <_sbrk_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4d06      	ldr	r5, [pc, #24]	; (800c154 <_sbrk_r+0x1c>)
 800c13c:	2300      	movs	r3, #0
 800c13e:	4604      	mov	r4, r0
 800c140:	4608      	mov	r0, r1
 800c142:	602b      	str	r3, [r5, #0]
 800c144:	f7f6 f908 	bl	8002358 <_sbrk>
 800c148:	1c43      	adds	r3, r0, #1
 800c14a:	d102      	bne.n	800c152 <_sbrk_r+0x1a>
 800c14c:	682b      	ldr	r3, [r5, #0]
 800c14e:	b103      	cbz	r3, 800c152 <_sbrk_r+0x1a>
 800c150:	6023      	str	r3, [r4, #0]
 800c152:	bd38      	pop	{r3, r4, r5, pc}
 800c154:	2000082c 	.word	0x2000082c

0800c158 <strncmp>:
 800c158:	b510      	push	{r4, lr}
 800c15a:	b17a      	cbz	r2, 800c17c <strncmp+0x24>
 800c15c:	4603      	mov	r3, r0
 800c15e:	3901      	subs	r1, #1
 800c160:	1884      	adds	r4, r0, r2
 800c162:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c166:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c16a:	4290      	cmp	r0, r2
 800c16c:	d101      	bne.n	800c172 <strncmp+0x1a>
 800c16e:	42a3      	cmp	r3, r4
 800c170:	d101      	bne.n	800c176 <strncmp+0x1e>
 800c172:	1a80      	subs	r0, r0, r2
 800c174:	bd10      	pop	{r4, pc}
 800c176:	2800      	cmp	r0, #0
 800c178:	d1f3      	bne.n	800c162 <strncmp+0xa>
 800c17a:	e7fa      	b.n	800c172 <strncmp+0x1a>
 800c17c:	4610      	mov	r0, r2
 800c17e:	e7f9      	b.n	800c174 <strncmp+0x1c>

0800c180 <__ascii_wctomb>:
 800c180:	b149      	cbz	r1, 800c196 <__ascii_wctomb+0x16>
 800c182:	2aff      	cmp	r2, #255	; 0xff
 800c184:	bf85      	ittet	hi
 800c186:	238a      	movhi	r3, #138	; 0x8a
 800c188:	6003      	strhi	r3, [r0, #0]
 800c18a:	700a      	strbls	r2, [r1, #0]
 800c18c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c190:	bf98      	it	ls
 800c192:	2001      	movls	r0, #1
 800c194:	4770      	bx	lr
 800c196:	4608      	mov	r0, r1
 800c198:	4770      	bx	lr
	...

0800c19c <__assert_func>:
 800c19c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c19e:	4614      	mov	r4, r2
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	4b09      	ldr	r3, [pc, #36]	; (800c1c8 <__assert_func+0x2c>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	68d8      	ldr	r0, [r3, #12]
 800c1aa:	b14c      	cbz	r4, 800c1c0 <__assert_func+0x24>
 800c1ac:	4b07      	ldr	r3, [pc, #28]	; (800c1cc <__assert_func+0x30>)
 800c1ae:	9100      	str	r1, [sp, #0]
 800c1b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1b4:	4906      	ldr	r1, [pc, #24]	; (800c1d0 <__assert_func+0x34>)
 800c1b6:	462b      	mov	r3, r5
 800c1b8:	f000 f80e 	bl	800c1d8 <fiprintf>
 800c1bc:	f000 fa8c 	bl	800c6d8 <abort>
 800c1c0:	4b04      	ldr	r3, [pc, #16]	; (800c1d4 <__assert_func+0x38>)
 800c1c2:	461c      	mov	r4, r3
 800c1c4:	e7f3      	b.n	800c1ae <__assert_func+0x12>
 800c1c6:	bf00      	nop
 800c1c8:	200000fc 	.word	0x200000fc
 800c1cc:	0800e225 	.word	0x0800e225
 800c1d0:	0800e232 	.word	0x0800e232
 800c1d4:	0800e260 	.word	0x0800e260

0800c1d8 <fiprintf>:
 800c1d8:	b40e      	push	{r1, r2, r3}
 800c1da:	b503      	push	{r0, r1, lr}
 800c1dc:	4601      	mov	r1, r0
 800c1de:	ab03      	add	r3, sp, #12
 800c1e0:	4805      	ldr	r0, [pc, #20]	; (800c1f8 <fiprintf+0x20>)
 800c1e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1e6:	6800      	ldr	r0, [r0, #0]
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	f000 f885 	bl	800c2f8 <_vfiprintf_r>
 800c1ee:	b002      	add	sp, #8
 800c1f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1f4:	b003      	add	sp, #12
 800c1f6:	4770      	bx	lr
 800c1f8:	200000fc 	.word	0x200000fc

0800c1fc <memmove>:
 800c1fc:	4288      	cmp	r0, r1
 800c1fe:	b510      	push	{r4, lr}
 800c200:	eb01 0402 	add.w	r4, r1, r2
 800c204:	d902      	bls.n	800c20c <memmove+0x10>
 800c206:	4284      	cmp	r4, r0
 800c208:	4623      	mov	r3, r4
 800c20a:	d807      	bhi.n	800c21c <memmove+0x20>
 800c20c:	1e43      	subs	r3, r0, #1
 800c20e:	42a1      	cmp	r1, r4
 800c210:	d008      	beq.n	800c224 <memmove+0x28>
 800c212:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c21a:	e7f8      	b.n	800c20e <memmove+0x12>
 800c21c:	4402      	add	r2, r0
 800c21e:	4601      	mov	r1, r0
 800c220:	428a      	cmp	r2, r1
 800c222:	d100      	bne.n	800c226 <memmove+0x2a>
 800c224:	bd10      	pop	{r4, pc}
 800c226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c22a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c22e:	e7f7      	b.n	800c220 <memmove+0x24>

0800c230 <__malloc_lock>:
 800c230:	4801      	ldr	r0, [pc, #4]	; (800c238 <__malloc_lock+0x8>)
 800c232:	f000 bc11 	b.w	800ca58 <__retarget_lock_acquire_recursive>
 800c236:	bf00      	nop
 800c238:	20000830 	.word	0x20000830

0800c23c <__malloc_unlock>:
 800c23c:	4801      	ldr	r0, [pc, #4]	; (800c244 <__malloc_unlock+0x8>)
 800c23e:	f000 bc0c 	b.w	800ca5a <__retarget_lock_release_recursive>
 800c242:	bf00      	nop
 800c244:	20000830 	.word	0x20000830

0800c248 <_realloc_r>:
 800c248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c24c:	4680      	mov	r8, r0
 800c24e:	4614      	mov	r4, r2
 800c250:	460e      	mov	r6, r1
 800c252:	b921      	cbnz	r1, 800c25e <_realloc_r+0x16>
 800c254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c258:	4611      	mov	r1, r2
 800c25a:	f7ff bd93 	b.w	800bd84 <_malloc_r>
 800c25e:	b92a      	cbnz	r2, 800c26c <_realloc_r+0x24>
 800c260:	f7ff fd24 	bl	800bcac <_free_r>
 800c264:	4625      	mov	r5, r4
 800c266:	4628      	mov	r0, r5
 800c268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c26c:	f000 fc5c 	bl	800cb28 <_malloc_usable_size_r>
 800c270:	4284      	cmp	r4, r0
 800c272:	4607      	mov	r7, r0
 800c274:	d802      	bhi.n	800c27c <_realloc_r+0x34>
 800c276:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c27a:	d812      	bhi.n	800c2a2 <_realloc_r+0x5a>
 800c27c:	4621      	mov	r1, r4
 800c27e:	4640      	mov	r0, r8
 800c280:	f7ff fd80 	bl	800bd84 <_malloc_r>
 800c284:	4605      	mov	r5, r0
 800c286:	2800      	cmp	r0, #0
 800c288:	d0ed      	beq.n	800c266 <_realloc_r+0x1e>
 800c28a:	42bc      	cmp	r4, r7
 800c28c:	4622      	mov	r2, r4
 800c28e:	4631      	mov	r1, r6
 800c290:	bf28      	it	cs
 800c292:	463a      	movcs	r2, r7
 800c294:	f7ff f824 	bl	800b2e0 <memcpy>
 800c298:	4631      	mov	r1, r6
 800c29a:	4640      	mov	r0, r8
 800c29c:	f7ff fd06 	bl	800bcac <_free_r>
 800c2a0:	e7e1      	b.n	800c266 <_realloc_r+0x1e>
 800c2a2:	4635      	mov	r5, r6
 800c2a4:	e7df      	b.n	800c266 <_realloc_r+0x1e>

0800c2a6 <__sfputc_r>:
 800c2a6:	6893      	ldr	r3, [r2, #8]
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	b410      	push	{r4}
 800c2ae:	6093      	str	r3, [r2, #8]
 800c2b0:	da08      	bge.n	800c2c4 <__sfputc_r+0x1e>
 800c2b2:	6994      	ldr	r4, [r2, #24]
 800c2b4:	42a3      	cmp	r3, r4
 800c2b6:	db01      	blt.n	800c2bc <__sfputc_r+0x16>
 800c2b8:	290a      	cmp	r1, #10
 800c2ba:	d103      	bne.n	800c2c4 <__sfputc_r+0x1e>
 800c2bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2c0:	f000 b94a 	b.w	800c558 <__swbuf_r>
 800c2c4:	6813      	ldr	r3, [r2, #0]
 800c2c6:	1c58      	adds	r0, r3, #1
 800c2c8:	6010      	str	r0, [r2, #0]
 800c2ca:	7019      	strb	r1, [r3, #0]
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <__sfputs_r>:
 800c2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d6:	4606      	mov	r6, r0
 800c2d8:	460f      	mov	r7, r1
 800c2da:	4614      	mov	r4, r2
 800c2dc:	18d5      	adds	r5, r2, r3
 800c2de:	42ac      	cmp	r4, r5
 800c2e0:	d101      	bne.n	800c2e6 <__sfputs_r+0x12>
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	e007      	b.n	800c2f6 <__sfputs_r+0x22>
 800c2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ea:	463a      	mov	r2, r7
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	f7ff ffda 	bl	800c2a6 <__sfputc_r>
 800c2f2:	1c43      	adds	r3, r0, #1
 800c2f4:	d1f3      	bne.n	800c2de <__sfputs_r+0xa>
 800c2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2f8 <_vfiprintf_r>:
 800c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	460d      	mov	r5, r1
 800c2fe:	b09d      	sub	sp, #116	; 0x74
 800c300:	4614      	mov	r4, r2
 800c302:	4698      	mov	r8, r3
 800c304:	4606      	mov	r6, r0
 800c306:	b118      	cbz	r0, 800c310 <_vfiprintf_r+0x18>
 800c308:	6983      	ldr	r3, [r0, #24]
 800c30a:	b90b      	cbnz	r3, 800c310 <_vfiprintf_r+0x18>
 800c30c:	f000 fb06 	bl	800c91c <__sinit>
 800c310:	4b89      	ldr	r3, [pc, #548]	; (800c538 <_vfiprintf_r+0x240>)
 800c312:	429d      	cmp	r5, r3
 800c314:	d11b      	bne.n	800c34e <_vfiprintf_r+0x56>
 800c316:	6875      	ldr	r5, [r6, #4]
 800c318:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c31a:	07d9      	lsls	r1, r3, #31
 800c31c:	d405      	bmi.n	800c32a <_vfiprintf_r+0x32>
 800c31e:	89ab      	ldrh	r3, [r5, #12]
 800c320:	059a      	lsls	r2, r3, #22
 800c322:	d402      	bmi.n	800c32a <_vfiprintf_r+0x32>
 800c324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c326:	f000 fb97 	bl	800ca58 <__retarget_lock_acquire_recursive>
 800c32a:	89ab      	ldrh	r3, [r5, #12]
 800c32c:	071b      	lsls	r3, r3, #28
 800c32e:	d501      	bpl.n	800c334 <_vfiprintf_r+0x3c>
 800c330:	692b      	ldr	r3, [r5, #16]
 800c332:	b9eb      	cbnz	r3, 800c370 <_vfiprintf_r+0x78>
 800c334:	4629      	mov	r1, r5
 800c336:	4630      	mov	r0, r6
 800c338:	f000 f960 	bl	800c5fc <__swsetup_r>
 800c33c:	b1c0      	cbz	r0, 800c370 <_vfiprintf_r+0x78>
 800c33e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c340:	07dc      	lsls	r4, r3, #31
 800c342:	d50e      	bpl.n	800c362 <_vfiprintf_r+0x6a>
 800c344:	f04f 30ff 	mov.w	r0, #4294967295
 800c348:	b01d      	add	sp, #116	; 0x74
 800c34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c34e:	4b7b      	ldr	r3, [pc, #492]	; (800c53c <_vfiprintf_r+0x244>)
 800c350:	429d      	cmp	r5, r3
 800c352:	d101      	bne.n	800c358 <_vfiprintf_r+0x60>
 800c354:	68b5      	ldr	r5, [r6, #8]
 800c356:	e7df      	b.n	800c318 <_vfiprintf_r+0x20>
 800c358:	4b79      	ldr	r3, [pc, #484]	; (800c540 <_vfiprintf_r+0x248>)
 800c35a:	429d      	cmp	r5, r3
 800c35c:	bf08      	it	eq
 800c35e:	68f5      	ldreq	r5, [r6, #12]
 800c360:	e7da      	b.n	800c318 <_vfiprintf_r+0x20>
 800c362:	89ab      	ldrh	r3, [r5, #12]
 800c364:	0598      	lsls	r0, r3, #22
 800c366:	d4ed      	bmi.n	800c344 <_vfiprintf_r+0x4c>
 800c368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c36a:	f000 fb76 	bl	800ca5a <__retarget_lock_release_recursive>
 800c36e:	e7e9      	b.n	800c344 <_vfiprintf_r+0x4c>
 800c370:	2300      	movs	r3, #0
 800c372:	9309      	str	r3, [sp, #36]	; 0x24
 800c374:	2320      	movs	r3, #32
 800c376:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c37a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c37e:	2330      	movs	r3, #48	; 0x30
 800c380:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c544 <_vfiprintf_r+0x24c>
 800c384:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c388:	f04f 0901 	mov.w	r9, #1
 800c38c:	4623      	mov	r3, r4
 800c38e:	469a      	mov	sl, r3
 800c390:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c394:	b10a      	cbz	r2, 800c39a <_vfiprintf_r+0xa2>
 800c396:	2a25      	cmp	r2, #37	; 0x25
 800c398:	d1f9      	bne.n	800c38e <_vfiprintf_r+0x96>
 800c39a:	ebba 0b04 	subs.w	fp, sl, r4
 800c39e:	d00b      	beq.n	800c3b8 <_vfiprintf_r+0xc0>
 800c3a0:	465b      	mov	r3, fp
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f7ff ff94 	bl	800c2d4 <__sfputs_r>
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	f000 80aa 	beq.w	800c506 <_vfiprintf_r+0x20e>
 800c3b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3b4:	445a      	add	r2, fp
 800c3b6:	9209      	str	r2, [sp, #36]	; 0x24
 800c3b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f000 80a2 	beq.w	800c506 <_vfiprintf_r+0x20e>
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3cc:	f10a 0a01 	add.w	sl, sl, #1
 800c3d0:	9304      	str	r3, [sp, #16]
 800c3d2:	9307      	str	r3, [sp, #28]
 800c3d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3d8:	931a      	str	r3, [sp, #104]	; 0x68
 800c3da:	4654      	mov	r4, sl
 800c3dc:	2205      	movs	r2, #5
 800c3de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e2:	4858      	ldr	r0, [pc, #352]	; (800c544 <_vfiprintf_r+0x24c>)
 800c3e4:	f7f3 fefc 	bl	80001e0 <memchr>
 800c3e8:	9a04      	ldr	r2, [sp, #16]
 800c3ea:	b9d8      	cbnz	r0, 800c424 <_vfiprintf_r+0x12c>
 800c3ec:	06d1      	lsls	r1, r2, #27
 800c3ee:	bf44      	itt	mi
 800c3f0:	2320      	movmi	r3, #32
 800c3f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3f6:	0713      	lsls	r3, r2, #28
 800c3f8:	bf44      	itt	mi
 800c3fa:	232b      	movmi	r3, #43	; 0x2b
 800c3fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c400:	f89a 3000 	ldrb.w	r3, [sl]
 800c404:	2b2a      	cmp	r3, #42	; 0x2a
 800c406:	d015      	beq.n	800c434 <_vfiprintf_r+0x13c>
 800c408:	9a07      	ldr	r2, [sp, #28]
 800c40a:	4654      	mov	r4, sl
 800c40c:	2000      	movs	r0, #0
 800c40e:	f04f 0c0a 	mov.w	ip, #10
 800c412:	4621      	mov	r1, r4
 800c414:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c418:	3b30      	subs	r3, #48	; 0x30
 800c41a:	2b09      	cmp	r3, #9
 800c41c:	d94e      	bls.n	800c4bc <_vfiprintf_r+0x1c4>
 800c41e:	b1b0      	cbz	r0, 800c44e <_vfiprintf_r+0x156>
 800c420:	9207      	str	r2, [sp, #28]
 800c422:	e014      	b.n	800c44e <_vfiprintf_r+0x156>
 800c424:	eba0 0308 	sub.w	r3, r0, r8
 800c428:	fa09 f303 	lsl.w	r3, r9, r3
 800c42c:	4313      	orrs	r3, r2
 800c42e:	9304      	str	r3, [sp, #16]
 800c430:	46a2      	mov	sl, r4
 800c432:	e7d2      	b.n	800c3da <_vfiprintf_r+0xe2>
 800c434:	9b03      	ldr	r3, [sp, #12]
 800c436:	1d19      	adds	r1, r3, #4
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	9103      	str	r1, [sp, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	bfbb      	ittet	lt
 800c440:	425b      	neglt	r3, r3
 800c442:	f042 0202 	orrlt.w	r2, r2, #2
 800c446:	9307      	strge	r3, [sp, #28]
 800c448:	9307      	strlt	r3, [sp, #28]
 800c44a:	bfb8      	it	lt
 800c44c:	9204      	strlt	r2, [sp, #16]
 800c44e:	7823      	ldrb	r3, [r4, #0]
 800c450:	2b2e      	cmp	r3, #46	; 0x2e
 800c452:	d10c      	bne.n	800c46e <_vfiprintf_r+0x176>
 800c454:	7863      	ldrb	r3, [r4, #1]
 800c456:	2b2a      	cmp	r3, #42	; 0x2a
 800c458:	d135      	bne.n	800c4c6 <_vfiprintf_r+0x1ce>
 800c45a:	9b03      	ldr	r3, [sp, #12]
 800c45c:	1d1a      	adds	r2, r3, #4
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	9203      	str	r2, [sp, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	bfb8      	it	lt
 800c466:	f04f 33ff 	movlt.w	r3, #4294967295
 800c46a:	3402      	adds	r4, #2
 800c46c:	9305      	str	r3, [sp, #20]
 800c46e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c554 <_vfiprintf_r+0x25c>
 800c472:	7821      	ldrb	r1, [r4, #0]
 800c474:	2203      	movs	r2, #3
 800c476:	4650      	mov	r0, sl
 800c478:	f7f3 feb2 	bl	80001e0 <memchr>
 800c47c:	b140      	cbz	r0, 800c490 <_vfiprintf_r+0x198>
 800c47e:	2340      	movs	r3, #64	; 0x40
 800c480:	eba0 000a 	sub.w	r0, r0, sl
 800c484:	fa03 f000 	lsl.w	r0, r3, r0
 800c488:	9b04      	ldr	r3, [sp, #16]
 800c48a:	4303      	orrs	r3, r0
 800c48c:	3401      	adds	r4, #1
 800c48e:	9304      	str	r3, [sp, #16]
 800c490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c494:	482c      	ldr	r0, [pc, #176]	; (800c548 <_vfiprintf_r+0x250>)
 800c496:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c49a:	2206      	movs	r2, #6
 800c49c:	f7f3 fea0 	bl	80001e0 <memchr>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d03f      	beq.n	800c524 <_vfiprintf_r+0x22c>
 800c4a4:	4b29      	ldr	r3, [pc, #164]	; (800c54c <_vfiprintf_r+0x254>)
 800c4a6:	bb1b      	cbnz	r3, 800c4f0 <_vfiprintf_r+0x1f8>
 800c4a8:	9b03      	ldr	r3, [sp, #12]
 800c4aa:	3307      	adds	r3, #7
 800c4ac:	f023 0307 	bic.w	r3, r3, #7
 800c4b0:	3308      	adds	r3, #8
 800c4b2:	9303      	str	r3, [sp, #12]
 800c4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4b6:	443b      	add	r3, r7
 800c4b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ba:	e767      	b.n	800c38c <_vfiprintf_r+0x94>
 800c4bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4c0:	460c      	mov	r4, r1
 800c4c2:	2001      	movs	r0, #1
 800c4c4:	e7a5      	b.n	800c412 <_vfiprintf_r+0x11a>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	3401      	adds	r4, #1
 800c4ca:	9305      	str	r3, [sp, #20]
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	f04f 0c0a 	mov.w	ip, #10
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4d8:	3a30      	subs	r2, #48	; 0x30
 800c4da:	2a09      	cmp	r2, #9
 800c4dc:	d903      	bls.n	800c4e6 <_vfiprintf_r+0x1ee>
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d0c5      	beq.n	800c46e <_vfiprintf_r+0x176>
 800c4e2:	9105      	str	r1, [sp, #20]
 800c4e4:	e7c3      	b.n	800c46e <_vfiprintf_r+0x176>
 800c4e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e7f0      	b.n	800c4d2 <_vfiprintf_r+0x1da>
 800c4f0:	ab03      	add	r3, sp, #12
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	462a      	mov	r2, r5
 800c4f6:	4b16      	ldr	r3, [pc, #88]	; (800c550 <_vfiprintf_r+0x258>)
 800c4f8:	a904      	add	r1, sp, #16
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	f7fc f83c 	bl	8008578 <_printf_float>
 800c500:	4607      	mov	r7, r0
 800c502:	1c78      	adds	r0, r7, #1
 800c504:	d1d6      	bne.n	800c4b4 <_vfiprintf_r+0x1bc>
 800c506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c508:	07d9      	lsls	r1, r3, #31
 800c50a:	d405      	bmi.n	800c518 <_vfiprintf_r+0x220>
 800c50c:	89ab      	ldrh	r3, [r5, #12]
 800c50e:	059a      	lsls	r2, r3, #22
 800c510:	d402      	bmi.n	800c518 <_vfiprintf_r+0x220>
 800c512:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c514:	f000 faa1 	bl	800ca5a <__retarget_lock_release_recursive>
 800c518:	89ab      	ldrh	r3, [r5, #12]
 800c51a:	065b      	lsls	r3, r3, #25
 800c51c:	f53f af12 	bmi.w	800c344 <_vfiprintf_r+0x4c>
 800c520:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c522:	e711      	b.n	800c348 <_vfiprintf_r+0x50>
 800c524:	ab03      	add	r3, sp, #12
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	462a      	mov	r2, r5
 800c52a:	4b09      	ldr	r3, [pc, #36]	; (800c550 <_vfiprintf_r+0x258>)
 800c52c:	a904      	add	r1, sp, #16
 800c52e:	4630      	mov	r0, r6
 800c530:	f7fc fac6 	bl	8008ac0 <_printf_i>
 800c534:	e7e4      	b.n	800c500 <_vfiprintf_r+0x208>
 800c536:	bf00      	nop
 800c538:	0800e284 	.word	0x0800e284
 800c53c:	0800e2a4 	.word	0x0800e2a4
 800c540:	0800e264 	.word	0x0800e264
 800c544:	0800e214 	.word	0x0800e214
 800c548:	0800e21e 	.word	0x0800e21e
 800c54c:	08008579 	.word	0x08008579
 800c550:	0800c2d5 	.word	0x0800c2d5
 800c554:	0800e21a 	.word	0x0800e21a

0800c558 <__swbuf_r>:
 800c558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55a:	460e      	mov	r6, r1
 800c55c:	4614      	mov	r4, r2
 800c55e:	4605      	mov	r5, r0
 800c560:	b118      	cbz	r0, 800c56a <__swbuf_r+0x12>
 800c562:	6983      	ldr	r3, [r0, #24]
 800c564:	b90b      	cbnz	r3, 800c56a <__swbuf_r+0x12>
 800c566:	f000 f9d9 	bl	800c91c <__sinit>
 800c56a:	4b21      	ldr	r3, [pc, #132]	; (800c5f0 <__swbuf_r+0x98>)
 800c56c:	429c      	cmp	r4, r3
 800c56e:	d12b      	bne.n	800c5c8 <__swbuf_r+0x70>
 800c570:	686c      	ldr	r4, [r5, #4]
 800c572:	69a3      	ldr	r3, [r4, #24]
 800c574:	60a3      	str	r3, [r4, #8]
 800c576:	89a3      	ldrh	r3, [r4, #12]
 800c578:	071a      	lsls	r2, r3, #28
 800c57a:	d52f      	bpl.n	800c5dc <__swbuf_r+0x84>
 800c57c:	6923      	ldr	r3, [r4, #16]
 800c57e:	b36b      	cbz	r3, 800c5dc <__swbuf_r+0x84>
 800c580:	6923      	ldr	r3, [r4, #16]
 800c582:	6820      	ldr	r0, [r4, #0]
 800c584:	1ac0      	subs	r0, r0, r3
 800c586:	6963      	ldr	r3, [r4, #20]
 800c588:	b2f6      	uxtb	r6, r6
 800c58a:	4283      	cmp	r3, r0
 800c58c:	4637      	mov	r7, r6
 800c58e:	dc04      	bgt.n	800c59a <__swbuf_r+0x42>
 800c590:	4621      	mov	r1, r4
 800c592:	4628      	mov	r0, r5
 800c594:	f000 f92e 	bl	800c7f4 <_fflush_r>
 800c598:	bb30      	cbnz	r0, 800c5e8 <__swbuf_r+0x90>
 800c59a:	68a3      	ldr	r3, [r4, #8]
 800c59c:	3b01      	subs	r3, #1
 800c59e:	60a3      	str	r3, [r4, #8]
 800c5a0:	6823      	ldr	r3, [r4, #0]
 800c5a2:	1c5a      	adds	r2, r3, #1
 800c5a4:	6022      	str	r2, [r4, #0]
 800c5a6:	701e      	strb	r6, [r3, #0]
 800c5a8:	6963      	ldr	r3, [r4, #20]
 800c5aa:	3001      	adds	r0, #1
 800c5ac:	4283      	cmp	r3, r0
 800c5ae:	d004      	beq.n	800c5ba <__swbuf_r+0x62>
 800c5b0:	89a3      	ldrh	r3, [r4, #12]
 800c5b2:	07db      	lsls	r3, r3, #31
 800c5b4:	d506      	bpl.n	800c5c4 <__swbuf_r+0x6c>
 800c5b6:	2e0a      	cmp	r6, #10
 800c5b8:	d104      	bne.n	800c5c4 <__swbuf_r+0x6c>
 800c5ba:	4621      	mov	r1, r4
 800c5bc:	4628      	mov	r0, r5
 800c5be:	f000 f919 	bl	800c7f4 <_fflush_r>
 800c5c2:	b988      	cbnz	r0, 800c5e8 <__swbuf_r+0x90>
 800c5c4:	4638      	mov	r0, r7
 800c5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5c8:	4b0a      	ldr	r3, [pc, #40]	; (800c5f4 <__swbuf_r+0x9c>)
 800c5ca:	429c      	cmp	r4, r3
 800c5cc:	d101      	bne.n	800c5d2 <__swbuf_r+0x7a>
 800c5ce:	68ac      	ldr	r4, [r5, #8]
 800c5d0:	e7cf      	b.n	800c572 <__swbuf_r+0x1a>
 800c5d2:	4b09      	ldr	r3, [pc, #36]	; (800c5f8 <__swbuf_r+0xa0>)
 800c5d4:	429c      	cmp	r4, r3
 800c5d6:	bf08      	it	eq
 800c5d8:	68ec      	ldreq	r4, [r5, #12]
 800c5da:	e7ca      	b.n	800c572 <__swbuf_r+0x1a>
 800c5dc:	4621      	mov	r1, r4
 800c5de:	4628      	mov	r0, r5
 800c5e0:	f000 f80c 	bl	800c5fc <__swsetup_r>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d0cb      	beq.n	800c580 <__swbuf_r+0x28>
 800c5e8:	f04f 37ff 	mov.w	r7, #4294967295
 800c5ec:	e7ea      	b.n	800c5c4 <__swbuf_r+0x6c>
 800c5ee:	bf00      	nop
 800c5f0:	0800e284 	.word	0x0800e284
 800c5f4:	0800e2a4 	.word	0x0800e2a4
 800c5f8:	0800e264 	.word	0x0800e264

0800c5fc <__swsetup_r>:
 800c5fc:	4b32      	ldr	r3, [pc, #200]	; (800c6c8 <__swsetup_r+0xcc>)
 800c5fe:	b570      	push	{r4, r5, r6, lr}
 800c600:	681d      	ldr	r5, [r3, #0]
 800c602:	4606      	mov	r6, r0
 800c604:	460c      	mov	r4, r1
 800c606:	b125      	cbz	r5, 800c612 <__swsetup_r+0x16>
 800c608:	69ab      	ldr	r3, [r5, #24]
 800c60a:	b913      	cbnz	r3, 800c612 <__swsetup_r+0x16>
 800c60c:	4628      	mov	r0, r5
 800c60e:	f000 f985 	bl	800c91c <__sinit>
 800c612:	4b2e      	ldr	r3, [pc, #184]	; (800c6cc <__swsetup_r+0xd0>)
 800c614:	429c      	cmp	r4, r3
 800c616:	d10f      	bne.n	800c638 <__swsetup_r+0x3c>
 800c618:	686c      	ldr	r4, [r5, #4]
 800c61a:	89a3      	ldrh	r3, [r4, #12]
 800c61c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c620:	0719      	lsls	r1, r3, #28
 800c622:	d42c      	bmi.n	800c67e <__swsetup_r+0x82>
 800c624:	06dd      	lsls	r5, r3, #27
 800c626:	d411      	bmi.n	800c64c <__swsetup_r+0x50>
 800c628:	2309      	movs	r3, #9
 800c62a:	6033      	str	r3, [r6, #0]
 800c62c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c630:	81a3      	strh	r3, [r4, #12]
 800c632:	f04f 30ff 	mov.w	r0, #4294967295
 800c636:	e03e      	b.n	800c6b6 <__swsetup_r+0xba>
 800c638:	4b25      	ldr	r3, [pc, #148]	; (800c6d0 <__swsetup_r+0xd4>)
 800c63a:	429c      	cmp	r4, r3
 800c63c:	d101      	bne.n	800c642 <__swsetup_r+0x46>
 800c63e:	68ac      	ldr	r4, [r5, #8]
 800c640:	e7eb      	b.n	800c61a <__swsetup_r+0x1e>
 800c642:	4b24      	ldr	r3, [pc, #144]	; (800c6d4 <__swsetup_r+0xd8>)
 800c644:	429c      	cmp	r4, r3
 800c646:	bf08      	it	eq
 800c648:	68ec      	ldreq	r4, [r5, #12]
 800c64a:	e7e6      	b.n	800c61a <__swsetup_r+0x1e>
 800c64c:	0758      	lsls	r0, r3, #29
 800c64e:	d512      	bpl.n	800c676 <__swsetup_r+0x7a>
 800c650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c652:	b141      	cbz	r1, 800c666 <__swsetup_r+0x6a>
 800c654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c658:	4299      	cmp	r1, r3
 800c65a:	d002      	beq.n	800c662 <__swsetup_r+0x66>
 800c65c:	4630      	mov	r0, r6
 800c65e:	f7ff fb25 	bl	800bcac <_free_r>
 800c662:	2300      	movs	r3, #0
 800c664:	6363      	str	r3, [r4, #52]	; 0x34
 800c666:	89a3      	ldrh	r3, [r4, #12]
 800c668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c66c:	81a3      	strh	r3, [r4, #12]
 800c66e:	2300      	movs	r3, #0
 800c670:	6063      	str	r3, [r4, #4]
 800c672:	6923      	ldr	r3, [r4, #16]
 800c674:	6023      	str	r3, [r4, #0]
 800c676:	89a3      	ldrh	r3, [r4, #12]
 800c678:	f043 0308 	orr.w	r3, r3, #8
 800c67c:	81a3      	strh	r3, [r4, #12]
 800c67e:	6923      	ldr	r3, [r4, #16]
 800c680:	b94b      	cbnz	r3, 800c696 <__swsetup_r+0x9a>
 800c682:	89a3      	ldrh	r3, [r4, #12]
 800c684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c68c:	d003      	beq.n	800c696 <__swsetup_r+0x9a>
 800c68e:	4621      	mov	r1, r4
 800c690:	4630      	mov	r0, r6
 800c692:	f000 fa09 	bl	800caa8 <__smakebuf_r>
 800c696:	89a0      	ldrh	r0, [r4, #12]
 800c698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c69c:	f010 0301 	ands.w	r3, r0, #1
 800c6a0:	d00a      	beq.n	800c6b8 <__swsetup_r+0xbc>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	60a3      	str	r3, [r4, #8]
 800c6a6:	6963      	ldr	r3, [r4, #20]
 800c6a8:	425b      	negs	r3, r3
 800c6aa:	61a3      	str	r3, [r4, #24]
 800c6ac:	6923      	ldr	r3, [r4, #16]
 800c6ae:	b943      	cbnz	r3, 800c6c2 <__swsetup_r+0xc6>
 800c6b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c6b4:	d1ba      	bne.n	800c62c <__swsetup_r+0x30>
 800c6b6:	bd70      	pop	{r4, r5, r6, pc}
 800c6b8:	0781      	lsls	r1, r0, #30
 800c6ba:	bf58      	it	pl
 800c6bc:	6963      	ldrpl	r3, [r4, #20]
 800c6be:	60a3      	str	r3, [r4, #8]
 800c6c0:	e7f4      	b.n	800c6ac <__swsetup_r+0xb0>
 800c6c2:	2000      	movs	r0, #0
 800c6c4:	e7f7      	b.n	800c6b6 <__swsetup_r+0xba>
 800c6c6:	bf00      	nop
 800c6c8:	200000fc 	.word	0x200000fc
 800c6cc:	0800e284 	.word	0x0800e284
 800c6d0:	0800e2a4 	.word	0x0800e2a4
 800c6d4:	0800e264 	.word	0x0800e264

0800c6d8 <abort>:
 800c6d8:	b508      	push	{r3, lr}
 800c6da:	2006      	movs	r0, #6
 800c6dc:	f000 fa54 	bl	800cb88 <raise>
 800c6e0:	2001      	movs	r0, #1
 800c6e2:	f7f5 fdc1 	bl	8002268 <_exit>
	...

0800c6e8 <__sflush_r>:
 800c6e8:	898a      	ldrh	r2, [r1, #12]
 800c6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ee:	4605      	mov	r5, r0
 800c6f0:	0710      	lsls	r0, r2, #28
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	d458      	bmi.n	800c7a8 <__sflush_r+0xc0>
 800c6f6:	684b      	ldr	r3, [r1, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	dc05      	bgt.n	800c708 <__sflush_r+0x20>
 800c6fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	dc02      	bgt.n	800c708 <__sflush_r+0x20>
 800c702:	2000      	movs	r0, #0
 800c704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c70a:	2e00      	cmp	r6, #0
 800c70c:	d0f9      	beq.n	800c702 <__sflush_r+0x1a>
 800c70e:	2300      	movs	r3, #0
 800c710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c714:	682f      	ldr	r7, [r5, #0]
 800c716:	602b      	str	r3, [r5, #0]
 800c718:	d032      	beq.n	800c780 <__sflush_r+0x98>
 800c71a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c71c:	89a3      	ldrh	r3, [r4, #12]
 800c71e:	075a      	lsls	r2, r3, #29
 800c720:	d505      	bpl.n	800c72e <__sflush_r+0x46>
 800c722:	6863      	ldr	r3, [r4, #4]
 800c724:	1ac0      	subs	r0, r0, r3
 800c726:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c728:	b10b      	cbz	r3, 800c72e <__sflush_r+0x46>
 800c72a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c72c:	1ac0      	subs	r0, r0, r3
 800c72e:	2300      	movs	r3, #0
 800c730:	4602      	mov	r2, r0
 800c732:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c734:	6a21      	ldr	r1, [r4, #32]
 800c736:	4628      	mov	r0, r5
 800c738:	47b0      	blx	r6
 800c73a:	1c43      	adds	r3, r0, #1
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	d106      	bne.n	800c74e <__sflush_r+0x66>
 800c740:	6829      	ldr	r1, [r5, #0]
 800c742:	291d      	cmp	r1, #29
 800c744:	d82c      	bhi.n	800c7a0 <__sflush_r+0xb8>
 800c746:	4a2a      	ldr	r2, [pc, #168]	; (800c7f0 <__sflush_r+0x108>)
 800c748:	40ca      	lsrs	r2, r1
 800c74a:	07d6      	lsls	r6, r2, #31
 800c74c:	d528      	bpl.n	800c7a0 <__sflush_r+0xb8>
 800c74e:	2200      	movs	r2, #0
 800c750:	6062      	str	r2, [r4, #4]
 800c752:	04d9      	lsls	r1, r3, #19
 800c754:	6922      	ldr	r2, [r4, #16]
 800c756:	6022      	str	r2, [r4, #0]
 800c758:	d504      	bpl.n	800c764 <__sflush_r+0x7c>
 800c75a:	1c42      	adds	r2, r0, #1
 800c75c:	d101      	bne.n	800c762 <__sflush_r+0x7a>
 800c75e:	682b      	ldr	r3, [r5, #0]
 800c760:	b903      	cbnz	r3, 800c764 <__sflush_r+0x7c>
 800c762:	6560      	str	r0, [r4, #84]	; 0x54
 800c764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c766:	602f      	str	r7, [r5, #0]
 800c768:	2900      	cmp	r1, #0
 800c76a:	d0ca      	beq.n	800c702 <__sflush_r+0x1a>
 800c76c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c770:	4299      	cmp	r1, r3
 800c772:	d002      	beq.n	800c77a <__sflush_r+0x92>
 800c774:	4628      	mov	r0, r5
 800c776:	f7ff fa99 	bl	800bcac <_free_r>
 800c77a:	2000      	movs	r0, #0
 800c77c:	6360      	str	r0, [r4, #52]	; 0x34
 800c77e:	e7c1      	b.n	800c704 <__sflush_r+0x1c>
 800c780:	6a21      	ldr	r1, [r4, #32]
 800c782:	2301      	movs	r3, #1
 800c784:	4628      	mov	r0, r5
 800c786:	47b0      	blx	r6
 800c788:	1c41      	adds	r1, r0, #1
 800c78a:	d1c7      	bne.n	800c71c <__sflush_r+0x34>
 800c78c:	682b      	ldr	r3, [r5, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d0c4      	beq.n	800c71c <__sflush_r+0x34>
 800c792:	2b1d      	cmp	r3, #29
 800c794:	d001      	beq.n	800c79a <__sflush_r+0xb2>
 800c796:	2b16      	cmp	r3, #22
 800c798:	d101      	bne.n	800c79e <__sflush_r+0xb6>
 800c79a:	602f      	str	r7, [r5, #0]
 800c79c:	e7b1      	b.n	800c702 <__sflush_r+0x1a>
 800c79e:	89a3      	ldrh	r3, [r4, #12]
 800c7a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a4:	81a3      	strh	r3, [r4, #12]
 800c7a6:	e7ad      	b.n	800c704 <__sflush_r+0x1c>
 800c7a8:	690f      	ldr	r7, [r1, #16]
 800c7aa:	2f00      	cmp	r7, #0
 800c7ac:	d0a9      	beq.n	800c702 <__sflush_r+0x1a>
 800c7ae:	0793      	lsls	r3, r2, #30
 800c7b0:	680e      	ldr	r6, [r1, #0]
 800c7b2:	bf08      	it	eq
 800c7b4:	694b      	ldreq	r3, [r1, #20]
 800c7b6:	600f      	str	r7, [r1, #0]
 800c7b8:	bf18      	it	ne
 800c7ba:	2300      	movne	r3, #0
 800c7bc:	eba6 0807 	sub.w	r8, r6, r7
 800c7c0:	608b      	str	r3, [r1, #8]
 800c7c2:	f1b8 0f00 	cmp.w	r8, #0
 800c7c6:	dd9c      	ble.n	800c702 <__sflush_r+0x1a>
 800c7c8:	6a21      	ldr	r1, [r4, #32]
 800c7ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7cc:	4643      	mov	r3, r8
 800c7ce:	463a      	mov	r2, r7
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	47b0      	blx	r6
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	dc06      	bgt.n	800c7e6 <__sflush_r+0xfe>
 800c7d8:	89a3      	ldrh	r3, [r4, #12]
 800c7da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7de:	81a3      	strh	r3, [r4, #12]
 800c7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e4:	e78e      	b.n	800c704 <__sflush_r+0x1c>
 800c7e6:	4407      	add	r7, r0
 800c7e8:	eba8 0800 	sub.w	r8, r8, r0
 800c7ec:	e7e9      	b.n	800c7c2 <__sflush_r+0xda>
 800c7ee:	bf00      	nop
 800c7f0:	20400001 	.word	0x20400001

0800c7f4 <_fflush_r>:
 800c7f4:	b538      	push	{r3, r4, r5, lr}
 800c7f6:	690b      	ldr	r3, [r1, #16]
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	460c      	mov	r4, r1
 800c7fc:	b913      	cbnz	r3, 800c804 <_fflush_r+0x10>
 800c7fe:	2500      	movs	r5, #0
 800c800:	4628      	mov	r0, r5
 800c802:	bd38      	pop	{r3, r4, r5, pc}
 800c804:	b118      	cbz	r0, 800c80e <_fflush_r+0x1a>
 800c806:	6983      	ldr	r3, [r0, #24]
 800c808:	b90b      	cbnz	r3, 800c80e <_fflush_r+0x1a>
 800c80a:	f000 f887 	bl	800c91c <__sinit>
 800c80e:	4b14      	ldr	r3, [pc, #80]	; (800c860 <_fflush_r+0x6c>)
 800c810:	429c      	cmp	r4, r3
 800c812:	d11b      	bne.n	800c84c <_fflush_r+0x58>
 800c814:	686c      	ldr	r4, [r5, #4]
 800c816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d0ef      	beq.n	800c7fe <_fflush_r+0xa>
 800c81e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c820:	07d0      	lsls	r0, r2, #31
 800c822:	d404      	bmi.n	800c82e <_fflush_r+0x3a>
 800c824:	0599      	lsls	r1, r3, #22
 800c826:	d402      	bmi.n	800c82e <_fflush_r+0x3a>
 800c828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c82a:	f000 f915 	bl	800ca58 <__retarget_lock_acquire_recursive>
 800c82e:	4628      	mov	r0, r5
 800c830:	4621      	mov	r1, r4
 800c832:	f7ff ff59 	bl	800c6e8 <__sflush_r>
 800c836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c838:	07da      	lsls	r2, r3, #31
 800c83a:	4605      	mov	r5, r0
 800c83c:	d4e0      	bmi.n	800c800 <_fflush_r+0xc>
 800c83e:	89a3      	ldrh	r3, [r4, #12]
 800c840:	059b      	lsls	r3, r3, #22
 800c842:	d4dd      	bmi.n	800c800 <_fflush_r+0xc>
 800c844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c846:	f000 f908 	bl	800ca5a <__retarget_lock_release_recursive>
 800c84a:	e7d9      	b.n	800c800 <_fflush_r+0xc>
 800c84c:	4b05      	ldr	r3, [pc, #20]	; (800c864 <_fflush_r+0x70>)
 800c84e:	429c      	cmp	r4, r3
 800c850:	d101      	bne.n	800c856 <_fflush_r+0x62>
 800c852:	68ac      	ldr	r4, [r5, #8]
 800c854:	e7df      	b.n	800c816 <_fflush_r+0x22>
 800c856:	4b04      	ldr	r3, [pc, #16]	; (800c868 <_fflush_r+0x74>)
 800c858:	429c      	cmp	r4, r3
 800c85a:	bf08      	it	eq
 800c85c:	68ec      	ldreq	r4, [r5, #12]
 800c85e:	e7da      	b.n	800c816 <_fflush_r+0x22>
 800c860:	0800e284 	.word	0x0800e284
 800c864:	0800e2a4 	.word	0x0800e2a4
 800c868:	0800e264 	.word	0x0800e264

0800c86c <std>:
 800c86c:	2300      	movs	r3, #0
 800c86e:	b510      	push	{r4, lr}
 800c870:	4604      	mov	r4, r0
 800c872:	e9c0 3300 	strd	r3, r3, [r0]
 800c876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c87a:	6083      	str	r3, [r0, #8]
 800c87c:	8181      	strh	r1, [r0, #12]
 800c87e:	6643      	str	r3, [r0, #100]	; 0x64
 800c880:	81c2      	strh	r2, [r0, #14]
 800c882:	6183      	str	r3, [r0, #24]
 800c884:	4619      	mov	r1, r3
 800c886:	2208      	movs	r2, #8
 800c888:	305c      	adds	r0, #92	; 0x5c
 800c88a:	f7fb fdcd 	bl	8008428 <memset>
 800c88e:	4b05      	ldr	r3, [pc, #20]	; (800c8a4 <std+0x38>)
 800c890:	6263      	str	r3, [r4, #36]	; 0x24
 800c892:	4b05      	ldr	r3, [pc, #20]	; (800c8a8 <std+0x3c>)
 800c894:	62a3      	str	r3, [r4, #40]	; 0x28
 800c896:	4b05      	ldr	r3, [pc, #20]	; (800c8ac <std+0x40>)
 800c898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c89a:	4b05      	ldr	r3, [pc, #20]	; (800c8b0 <std+0x44>)
 800c89c:	6224      	str	r4, [r4, #32]
 800c89e:	6323      	str	r3, [r4, #48]	; 0x30
 800c8a0:	bd10      	pop	{r4, pc}
 800c8a2:	bf00      	nop
 800c8a4:	0800cbc1 	.word	0x0800cbc1
 800c8a8:	0800cbe3 	.word	0x0800cbe3
 800c8ac:	0800cc1b 	.word	0x0800cc1b
 800c8b0:	0800cc3f 	.word	0x0800cc3f

0800c8b4 <_cleanup_r>:
 800c8b4:	4901      	ldr	r1, [pc, #4]	; (800c8bc <_cleanup_r+0x8>)
 800c8b6:	f000 b8af 	b.w	800ca18 <_fwalk_reent>
 800c8ba:	bf00      	nop
 800c8bc:	0800c7f5 	.word	0x0800c7f5

0800c8c0 <__sfmoreglue>:
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	2268      	movs	r2, #104	; 0x68
 800c8c4:	1e4d      	subs	r5, r1, #1
 800c8c6:	4355      	muls	r5, r2
 800c8c8:	460e      	mov	r6, r1
 800c8ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c8ce:	f7ff fa59 	bl	800bd84 <_malloc_r>
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	b140      	cbz	r0, 800c8e8 <__sfmoreglue+0x28>
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	e9c0 1600 	strd	r1, r6, [r0]
 800c8dc:	300c      	adds	r0, #12
 800c8de:	60a0      	str	r0, [r4, #8]
 800c8e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c8e4:	f7fb fda0 	bl	8008428 <memset>
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	bd70      	pop	{r4, r5, r6, pc}

0800c8ec <__sfp_lock_acquire>:
 800c8ec:	4801      	ldr	r0, [pc, #4]	; (800c8f4 <__sfp_lock_acquire+0x8>)
 800c8ee:	f000 b8b3 	b.w	800ca58 <__retarget_lock_acquire_recursive>
 800c8f2:	bf00      	nop
 800c8f4:	20000831 	.word	0x20000831

0800c8f8 <__sfp_lock_release>:
 800c8f8:	4801      	ldr	r0, [pc, #4]	; (800c900 <__sfp_lock_release+0x8>)
 800c8fa:	f000 b8ae 	b.w	800ca5a <__retarget_lock_release_recursive>
 800c8fe:	bf00      	nop
 800c900:	20000831 	.word	0x20000831

0800c904 <__sinit_lock_acquire>:
 800c904:	4801      	ldr	r0, [pc, #4]	; (800c90c <__sinit_lock_acquire+0x8>)
 800c906:	f000 b8a7 	b.w	800ca58 <__retarget_lock_acquire_recursive>
 800c90a:	bf00      	nop
 800c90c:	20000832 	.word	0x20000832

0800c910 <__sinit_lock_release>:
 800c910:	4801      	ldr	r0, [pc, #4]	; (800c918 <__sinit_lock_release+0x8>)
 800c912:	f000 b8a2 	b.w	800ca5a <__retarget_lock_release_recursive>
 800c916:	bf00      	nop
 800c918:	20000832 	.word	0x20000832

0800c91c <__sinit>:
 800c91c:	b510      	push	{r4, lr}
 800c91e:	4604      	mov	r4, r0
 800c920:	f7ff fff0 	bl	800c904 <__sinit_lock_acquire>
 800c924:	69a3      	ldr	r3, [r4, #24]
 800c926:	b11b      	cbz	r3, 800c930 <__sinit+0x14>
 800c928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c92c:	f7ff bff0 	b.w	800c910 <__sinit_lock_release>
 800c930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c934:	6523      	str	r3, [r4, #80]	; 0x50
 800c936:	4b13      	ldr	r3, [pc, #76]	; (800c984 <__sinit+0x68>)
 800c938:	4a13      	ldr	r2, [pc, #76]	; (800c988 <__sinit+0x6c>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c93e:	42a3      	cmp	r3, r4
 800c940:	bf04      	itt	eq
 800c942:	2301      	moveq	r3, #1
 800c944:	61a3      	streq	r3, [r4, #24]
 800c946:	4620      	mov	r0, r4
 800c948:	f000 f820 	bl	800c98c <__sfp>
 800c94c:	6060      	str	r0, [r4, #4]
 800c94e:	4620      	mov	r0, r4
 800c950:	f000 f81c 	bl	800c98c <__sfp>
 800c954:	60a0      	str	r0, [r4, #8]
 800c956:	4620      	mov	r0, r4
 800c958:	f000 f818 	bl	800c98c <__sfp>
 800c95c:	2200      	movs	r2, #0
 800c95e:	60e0      	str	r0, [r4, #12]
 800c960:	2104      	movs	r1, #4
 800c962:	6860      	ldr	r0, [r4, #4]
 800c964:	f7ff ff82 	bl	800c86c <std>
 800c968:	68a0      	ldr	r0, [r4, #8]
 800c96a:	2201      	movs	r2, #1
 800c96c:	2109      	movs	r1, #9
 800c96e:	f7ff ff7d 	bl	800c86c <std>
 800c972:	68e0      	ldr	r0, [r4, #12]
 800c974:	2202      	movs	r2, #2
 800c976:	2112      	movs	r1, #18
 800c978:	f7ff ff78 	bl	800c86c <std>
 800c97c:	2301      	movs	r3, #1
 800c97e:	61a3      	str	r3, [r4, #24]
 800c980:	e7d2      	b.n	800c928 <__sinit+0xc>
 800c982:	bf00      	nop
 800c984:	0800de1c 	.word	0x0800de1c
 800c988:	0800c8b5 	.word	0x0800c8b5

0800c98c <__sfp>:
 800c98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98e:	4607      	mov	r7, r0
 800c990:	f7ff ffac 	bl	800c8ec <__sfp_lock_acquire>
 800c994:	4b1e      	ldr	r3, [pc, #120]	; (800ca10 <__sfp+0x84>)
 800c996:	681e      	ldr	r6, [r3, #0]
 800c998:	69b3      	ldr	r3, [r6, #24]
 800c99a:	b913      	cbnz	r3, 800c9a2 <__sfp+0x16>
 800c99c:	4630      	mov	r0, r6
 800c99e:	f7ff ffbd 	bl	800c91c <__sinit>
 800c9a2:	3648      	adds	r6, #72	; 0x48
 800c9a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	d503      	bpl.n	800c9b4 <__sfp+0x28>
 800c9ac:	6833      	ldr	r3, [r6, #0]
 800c9ae:	b30b      	cbz	r3, 800c9f4 <__sfp+0x68>
 800c9b0:	6836      	ldr	r6, [r6, #0]
 800c9b2:	e7f7      	b.n	800c9a4 <__sfp+0x18>
 800c9b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c9b8:	b9d5      	cbnz	r5, 800c9f0 <__sfp+0x64>
 800c9ba:	4b16      	ldr	r3, [pc, #88]	; (800ca14 <__sfp+0x88>)
 800c9bc:	60e3      	str	r3, [r4, #12]
 800c9be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c9c2:	6665      	str	r5, [r4, #100]	; 0x64
 800c9c4:	f000 f847 	bl	800ca56 <__retarget_lock_init_recursive>
 800c9c8:	f7ff ff96 	bl	800c8f8 <__sfp_lock_release>
 800c9cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c9d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c9d4:	6025      	str	r5, [r4, #0]
 800c9d6:	61a5      	str	r5, [r4, #24]
 800c9d8:	2208      	movs	r2, #8
 800c9da:	4629      	mov	r1, r5
 800c9dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c9e0:	f7fb fd22 	bl	8008428 <memset>
 800c9e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c9e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9f0:	3468      	adds	r4, #104	; 0x68
 800c9f2:	e7d9      	b.n	800c9a8 <__sfp+0x1c>
 800c9f4:	2104      	movs	r1, #4
 800c9f6:	4638      	mov	r0, r7
 800c9f8:	f7ff ff62 	bl	800c8c0 <__sfmoreglue>
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	6030      	str	r0, [r6, #0]
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d1d5      	bne.n	800c9b0 <__sfp+0x24>
 800ca04:	f7ff ff78 	bl	800c8f8 <__sfp_lock_release>
 800ca08:	230c      	movs	r3, #12
 800ca0a:	603b      	str	r3, [r7, #0]
 800ca0c:	e7ee      	b.n	800c9ec <__sfp+0x60>
 800ca0e:	bf00      	nop
 800ca10:	0800de1c 	.word	0x0800de1c
 800ca14:	ffff0001 	.word	0xffff0001

0800ca18 <_fwalk_reent>:
 800ca18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca1c:	4606      	mov	r6, r0
 800ca1e:	4688      	mov	r8, r1
 800ca20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ca24:	2700      	movs	r7, #0
 800ca26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca2a:	f1b9 0901 	subs.w	r9, r9, #1
 800ca2e:	d505      	bpl.n	800ca3c <_fwalk_reent+0x24>
 800ca30:	6824      	ldr	r4, [r4, #0]
 800ca32:	2c00      	cmp	r4, #0
 800ca34:	d1f7      	bne.n	800ca26 <_fwalk_reent+0xe>
 800ca36:	4638      	mov	r0, r7
 800ca38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca3c:	89ab      	ldrh	r3, [r5, #12]
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d907      	bls.n	800ca52 <_fwalk_reent+0x3a>
 800ca42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca46:	3301      	adds	r3, #1
 800ca48:	d003      	beq.n	800ca52 <_fwalk_reent+0x3a>
 800ca4a:	4629      	mov	r1, r5
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	47c0      	blx	r8
 800ca50:	4307      	orrs	r7, r0
 800ca52:	3568      	adds	r5, #104	; 0x68
 800ca54:	e7e9      	b.n	800ca2a <_fwalk_reent+0x12>

0800ca56 <__retarget_lock_init_recursive>:
 800ca56:	4770      	bx	lr

0800ca58 <__retarget_lock_acquire_recursive>:
 800ca58:	4770      	bx	lr

0800ca5a <__retarget_lock_release_recursive>:
 800ca5a:	4770      	bx	lr

0800ca5c <__swhatbuf_r>:
 800ca5c:	b570      	push	{r4, r5, r6, lr}
 800ca5e:	460e      	mov	r6, r1
 800ca60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca64:	2900      	cmp	r1, #0
 800ca66:	b096      	sub	sp, #88	; 0x58
 800ca68:	4614      	mov	r4, r2
 800ca6a:	461d      	mov	r5, r3
 800ca6c:	da08      	bge.n	800ca80 <__swhatbuf_r+0x24>
 800ca6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ca72:	2200      	movs	r2, #0
 800ca74:	602a      	str	r2, [r5, #0]
 800ca76:	061a      	lsls	r2, r3, #24
 800ca78:	d410      	bmi.n	800ca9c <__swhatbuf_r+0x40>
 800ca7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca7e:	e00e      	b.n	800ca9e <__swhatbuf_r+0x42>
 800ca80:	466a      	mov	r2, sp
 800ca82:	f000 f903 	bl	800cc8c <_fstat_r>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	dbf1      	blt.n	800ca6e <__swhatbuf_r+0x12>
 800ca8a:	9a01      	ldr	r2, [sp, #4]
 800ca8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca94:	425a      	negs	r2, r3
 800ca96:	415a      	adcs	r2, r3
 800ca98:	602a      	str	r2, [r5, #0]
 800ca9a:	e7ee      	b.n	800ca7a <__swhatbuf_r+0x1e>
 800ca9c:	2340      	movs	r3, #64	; 0x40
 800ca9e:	2000      	movs	r0, #0
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	b016      	add	sp, #88	; 0x58
 800caa4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800caa8 <__smakebuf_r>:
 800caa8:	898b      	ldrh	r3, [r1, #12]
 800caaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800caac:	079d      	lsls	r5, r3, #30
 800caae:	4606      	mov	r6, r0
 800cab0:	460c      	mov	r4, r1
 800cab2:	d507      	bpl.n	800cac4 <__smakebuf_r+0x1c>
 800cab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	6123      	str	r3, [r4, #16]
 800cabc:	2301      	movs	r3, #1
 800cabe:	6163      	str	r3, [r4, #20]
 800cac0:	b002      	add	sp, #8
 800cac2:	bd70      	pop	{r4, r5, r6, pc}
 800cac4:	ab01      	add	r3, sp, #4
 800cac6:	466a      	mov	r2, sp
 800cac8:	f7ff ffc8 	bl	800ca5c <__swhatbuf_r>
 800cacc:	9900      	ldr	r1, [sp, #0]
 800cace:	4605      	mov	r5, r0
 800cad0:	4630      	mov	r0, r6
 800cad2:	f7ff f957 	bl	800bd84 <_malloc_r>
 800cad6:	b948      	cbnz	r0, 800caec <__smakebuf_r+0x44>
 800cad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cadc:	059a      	lsls	r2, r3, #22
 800cade:	d4ef      	bmi.n	800cac0 <__smakebuf_r+0x18>
 800cae0:	f023 0303 	bic.w	r3, r3, #3
 800cae4:	f043 0302 	orr.w	r3, r3, #2
 800cae8:	81a3      	strh	r3, [r4, #12]
 800caea:	e7e3      	b.n	800cab4 <__smakebuf_r+0xc>
 800caec:	4b0d      	ldr	r3, [pc, #52]	; (800cb24 <__smakebuf_r+0x7c>)
 800caee:	62b3      	str	r3, [r6, #40]	; 0x28
 800caf0:	89a3      	ldrh	r3, [r4, #12]
 800caf2:	6020      	str	r0, [r4, #0]
 800caf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caf8:	81a3      	strh	r3, [r4, #12]
 800cafa:	9b00      	ldr	r3, [sp, #0]
 800cafc:	6163      	str	r3, [r4, #20]
 800cafe:	9b01      	ldr	r3, [sp, #4]
 800cb00:	6120      	str	r0, [r4, #16]
 800cb02:	b15b      	cbz	r3, 800cb1c <__smakebuf_r+0x74>
 800cb04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb08:	4630      	mov	r0, r6
 800cb0a:	f000 f8d1 	bl	800ccb0 <_isatty_r>
 800cb0e:	b128      	cbz	r0, 800cb1c <__smakebuf_r+0x74>
 800cb10:	89a3      	ldrh	r3, [r4, #12]
 800cb12:	f023 0303 	bic.w	r3, r3, #3
 800cb16:	f043 0301 	orr.w	r3, r3, #1
 800cb1a:	81a3      	strh	r3, [r4, #12]
 800cb1c:	89a0      	ldrh	r0, [r4, #12]
 800cb1e:	4305      	orrs	r5, r0
 800cb20:	81a5      	strh	r5, [r4, #12]
 800cb22:	e7cd      	b.n	800cac0 <__smakebuf_r+0x18>
 800cb24:	0800c8b5 	.word	0x0800c8b5

0800cb28 <_malloc_usable_size_r>:
 800cb28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb2c:	1f18      	subs	r0, r3, #4
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	bfbc      	itt	lt
 800cb32:	580b      	ldrlt	r3, [r1, r0]
 800cb34:	18c0      	addlt	r0, r0, r3
 800cb36:	4770      	bx	lr

0800cb38 <_raise_r>:
 800cb38:	291f      	cmp	r1, #31
 800cb3a:	b538      	push	{r3, r4, r5, lr}
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	460d      	mov	r5, r1
 800cb40:	d904      	bls.n	800cb4c <_raise_r+0x14>
 800cb42:	2316      	movs	r3, #22
 800cb44:	6003      	str	r3, [r0, #0]
 800cb46:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4a:	bd38      	pop	{r3, r4, r5, pc}
 800cb4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb4e:	b112      	cbz	r2, 800cb56 <_raise_r+0x1e>
 800cb50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb54:	b94b      	cbnz	r3, 800cb6a <_raise_r+0x32>
 800cb56:	4620      	mov	r0, r4
 800cb58:	f000 f830 	bl	800cbbc <_getpid_r>
 800cb5c:	462a      	mov	r2, r5
 800cb5e:	4601      	mov	r1, r0
 800cb60:	4620      	mov	r0, r4
 800cb62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb66:	f000 b817 	b.w	800cb98 <_kill_r>
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d00a      	beq.n	800cb84 <_raise_r+0x4c>
 800cb6e:	1c59      	adds	r1, r3, #1
 800cb70:	d103      	bne.n	800cb7a <_raise_r+0x42>
 800cb72:	2316      	movs	r3, #22
 800cb74:	6003      	str	r3, [r0, #0]
 800cb76:	2001      	movs	r0, #1
 800cb78:	e7e7      	b.n	800cb4a <_raise_r+0x12>
 800cb7a:	2400      	movs	r4, #0
 800cb7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb80:	4628      	mov	r0, r5
 800cb82:	4798      	blx	r3
 800cb84:	2000      	movs	r0, #0
 800cb86:	e7e0      	b.n	800cb4a <_raise_r+0x12>

0800cb88 <raise>:
 800cb88:	4b02      	ldr	r3, [pc, #8]	; (800cb94 <raise+0xc>)
 800cb8a:	4601      	mov	r1, r0
 800cb8c:	6818      	ldr	r0, [r3, #0]
 800cb8e:	f7ff bfd3 	b.w	800cb38 <_raise_r>
 800cb92:	bf00      	nop
 800cb94:	200000fc 	.word	0x200000fc

0800cb98 <_kill_r>:
 800cb98:	b538      	push	{r3, r4, r5, lr}
 800cb9a:	4d07      	ldr	r5, [pc, #28]	; (800cbb8 <_kill_r+0x20>)
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	4604      	mov	r4, r0
 800cba0:	4608      	mov	r0, r1
 800cba2:	4611      	mov	r1, r2
 800cba4:	602b      	str	r3, [r5, #0]
 800cba6:	f7f5 fb4f 	bl	8002248 <_kill>
 800cbaa:	1c43      	adds	r3, r0, #1
 800cbac:	d102      	bne.n	800cbb4 <_kill_r+0x1c>
 800cbae:	682b      	ldr	r3, [r5, #0]
 800cbb0:	b103      	cbz	r3, 800cbb4 <_kill_r+0x1c>
 800cbb2:	6023      	str	r3, [r4, #0]
 800cbb4:	bd38      	pop	{r3, r4, r5, pc}
 800cbb6:	bf00      	nop
 800cbb8:	2000082c 	.word	0x2000082c

0800cbbc <_getpid_r>:
 800cbbc:	f7f5 bb3c 	b.w	8002238 <_getpid>

0800cbc0 <__sread>:
 800cbc0:	b510      	push	{r4, lr}
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc8:	f000 f894 	bl	800ccf4 <_read_r>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	bfab      	itete	ge
 800cbd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbd2:	89a3      	ldrhlt	r3, [r4, #12]
 800cbd4:	181b      	addge	r3, r3, r0
 800cbd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbda:	bfac      	ite	ge
 800cbdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cbde:	81a3      	strhlt	r3, [r4, #12]
 800cbe0:	bd10      	pop	{r4, pc}

0800cbe2 <__swrite>:
 800cbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe6:	461f      	mov	r7, r3
 800cbe8:	898b      	ldrh	r3, [r1, #12]
 800cbea:	05db      	lsls	r3, r3, #23
 800cbec:	4605      	mov	r5, r0
 800cbee:	460c      	mov	r4, r1
 800cbf0:	4616      	mov	r6, r2
 800cbf2:	d505      	bpl.n	800cc00 <__swrite+0x1e>
 800cbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f000 f868 	bl	800ccd0 <_lseek_r>
 800cc00:	89a3      	ldrh	r3, [r4, #12]
 800cc02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc0a:	81a3      	strh	r3, [r4, #12]
 800cc0c:	4632      	mov	r2, r6
 800cc0e:	463b      	mov	r3, r7
 800cc10:	4628      	mov	r0, r5
 800cc12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc16:	f000 b817 	b.w	800cc48 <_write_r>

0800cc1a <__sseek>:
 800cc1a:	b510      	push	{r4, lr}
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc22:	f000 f855 	bl	800ccd0 <_lseek_r>
 800cc26:	1c43      	adds	r3, r0, #1
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	bf15      	itete	ne
 800cc2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc36:	81a3      	strheq	r3, [r4, #12]
 800cc38:	bf18      	it	ne
 800cc3a:	81a3      	strhne	r3, [r4, #12]
 800cc3c:	bd10      	pop	{r4, pc}

0800cc3e <__sclose>:
 800cc3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc42:	f000 b813 	b.w	800cc6c <_close_r>
	...

0800cc48 <_write_r>:
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	4d07      	ldr	r5, [pc, #28]	; (800cc68 <_write_r+0x20>)
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	4608      	mov	r0, r1
 800cc50:	4611      	mov	r1, r2
 800cc52:	2200      	movs	r2, #0
 800cc54:	602a      	str	r2, [r5, #0]
 800cc56:	461a      	mov	r2, r3
 800cc58:	f7f5 fb2d 	bl	80022b6 <_write>
 800cc5c:	1c43      	adds	r3, r0, #1
 800cc5e:	d102      	bne.n	800cc66 <_write_r+0x1e>
 800cc60:	682b      	ldr	r3, [r5, #0]
 800cc62:	b103      	cbz	r3, 800cc66 <_write_r+0x1e>
 800cc64:	6023      	str	r3, [r4, #0]
 800cc66:	bd38      	pop	{r3, r4, r5, pc}
 800cc68:	2000082c 	.word	0x2000082c

0800cc6c <_close_r>:
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	4d06      	ldr	r5, [pc, #24]	; (800cc88 <_close_r+0x1c>)
 800cc70:	2300      	movs	r3, #0
 800cc72:	4604      	mov	r4, r0
 800cc74:	4608      	mov	r0, r1
 800cc76:	602b      	str	r3, [r5, #0]
 800cc78:	f7f5 fb39 	bl	80022ee <_close>
 800cc7c:	1c43      	adds	r3, r0, #1
 800cc7e:	d102      	bne.n	800cc86 <_close_r+0x1a>
 800cc80:	682b      	ldr	r3, [r5, #0]
 800cc82:	b103      	cbz	r3, 800cc86 <_close_r+0x1a>
 800cc84:	6023      	str	r3, [r4, #0]
 800cc86:	bd38      	pop	{r3, r4, r5, pc}
 800cc88:	2000082c 	.word	0x2000082c

0800cc8c <_fstat_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4d07      	ldr	r5, [pc, #28]	; (800ccac <_fstat_r+0x20>)
 800cc90:	2300      	movs	r3, #0
 800cc92:	4604      	mov	r4, r0
 800cc94:	4608      	mov	r0, r1
 800cc96:	4611      	mov	r1, r2
 800cc98:	602b      	str	r3, [r5, #0]
 800cc9a:	f7f5 fb34 	bl	8002306 <_fstat>
 800cc9e:	1c43      	adds	r3, r0, #1
 800cca0:	d102      	bne.n	800cca8 <_fstat_r+0x1c>
 800cca2:	682b      	ldr	r3, [r5, #0]
 800cca4:	b103      	cbz	r3, 800cca8 <_fstat_r+0x1c>
 800cca6:	6023      	str	r3, [r4, #0]
 800cca8:	bd38      	pop	{r3, r4, r5, pc}
 800ccaa:	bf00      	nop
 800ccac:	2000082c 	.word	0x2000082c

0800ccb0 <_isatty_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	4d06      	ldr	r5, [pc, #24]	; (800cccc <_isatty_r+0x1c>)
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	4608      	mov	r0, r1
 800ccba:	602b      	str	r3, [r5, #0]
 800ccbc:	f7f5 fb33 	bl	8002326 <_isatty>
 800ccc0:	1c43      	adds	r3, r0, #1
 800ccc2:	d102      	bne.n	800ccca <_isatty_r+0x1a>
 800ccc4:	682b      	ldr	r3, [r5, #0]
 800ccc6:	b103      	cbz	r3, 800ccca <_isatty_r+0x1a>
 800ccc8:	6023      	str	r3, [r4, #0]
 800ccca:	bd38      	pop	{r3, r4, r5, pc}
 800cccc:	2000082c 	.word	0x2000082c

0800ccd0 <_lseek_r>:
 800ccd0:	b538      	push	{r3, r4, r5, lr}
 800ccd2:	4d07      	ldr	r5, [pc, #28]	; (800ccf0 <_lseek_r+0x20>)
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	4608      	mov	r0, r1
 800ccd8:	4611      	mov	r1, r2
 800ccda:	2200      	movs	r2, #0
 800ccdc:	602a      	str	r2, [r5, #0]
 800ccde:	461a      	mov	r2, r3
 800cce0:	f7f5 fb2c 	bl	800233c <_lseek>
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	d102      	bne.n	800ccee <_lseek_r+0x1e>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	b103      	cbz	r3, 800ccee <_lseek_r+0x1e>
 800ccec:	6023      	str	r3, [r4, #0]
 800ccee:	bd38      	pop	{r3, r4, r5, pc}
 800ccf0:	2000082c 	.word	0x2000082c

0800ccf4 <_read_r>:
 800ccf4:	b538      	push	{r3, r4, r5, lr}
 800ccf6:	4d07      	ldr	r5, [pc, #28]	; (800cd14 <_read_r+0x20>)
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	4608      	mov	r0, r1
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	2200      	movs	r2, #0
 800cd00:	602a      	str	r2, [r5, #0]
 800cd02:	461a      	mov	r2, r3
 800cd04:	f7f5 faba 	bl	800227c <_read>
 800cd08:	1c43      	adds	r3, r0, #1
 800cd0a:	d102      	bne.n	800cd12 <_read_r+0x1e>
 800cd0c:	682b      	ldr	r3, [r5, #0]
 800cd0e:	b103      	cbz	r3, 800cd12 <_read_r+0x1e>
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	bd38      	pop	{r3, r4, r5, pc}
 800cd14:	2000082c 	.word	0x2000082c

0800cd18 <sin>:
 800cd18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd1a:	ec53 2b10 	vmov	r2, r3, d0
 800cd1e:	4828      	ldr	r0, [pc, #160]	; (800cdc0 <sin+0xa8>)
 800cd20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cd24:	4281      	cmp	r1, r0
 800cd26:	dc07      	bgt.n	800cd38 <sin+0x20>
 800cd28:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800cdb8 <sin+0xa0>
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	b005      	add	sp, #20
 800cd30:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd34:	f000 be6c 	b.w	800da10 <__kernel_sin>
 800cd38:	4822      	ldr	r0, [pc, #136]	; (800cdc4 <sin+0xac>)
 800cd3a:	4281      	cmp	r1, r0
 800cd3c:	dd09      	ble.n	800cd52 <sin+0x3a>
 800cd3e:	ee10 0a10 	vmov	r0, s0
 800cd42:	4619      	mov	r1, r3
 800cd44:	f7f3 faa0 	bl	8000288 <__aeabi_dsub>
 800cd48:	ec41 0b10 	vmov	d0, r0, r1
 800cd4c:	b005      	add	sp, #20
 800cd4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd52:	4668      	mov	r0, sp
 800cd54:	f000 f838 	bl	800cdc8 <__ieee754_rem_pio2>
 800cd58:	f000 0003 	and.w	r0, r0, #3
 800cd5c:	2801      	cmp	r0, #1
 800cd5e:	d00c      	beq.n	800cd7a <sin+0x62>
 800cd60:	2802      	cmp	r0, #2
 800cd62:	d011      	beq.n	800cd88 <sin+0x70>
 800cd64:	b9f0      	cbnz	r0, 800cda4 <sin+0x8c>
 800cd66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd6a:	ed9d 0b00 	vldr	d0, [sp]
 800cd6e:	2001      	movs	r0, #1
 800cd70:	f000 fe4e 	bl	800da10 <__kernel_sin>
 800cd74:	ec51 0b10 	vmov	r0, r1, d0
 800cd78:	e7e6      	b.n	800cd48 <sin+0x30>
 800cd7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd7e:	ed9d 0b00 	vldr	d0, [sp]
 800cd82:	f000 fa2d 	bl	800d1e0 <__kernel_cos>
 800cd86:	e7f5      	b.n	800cd74 <sin+0x5c>
 800cd88:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd8c:	ed9d 0b00 	vldr	d0, [sp]
 800cd90:	2001      	movs	r0, #1
 800cd92:	f000 fe3d 	bl	800da10 <__kernel_sin>
 800cd96:	ec53 2b10 	vmov	r2, r3, d0
 800cd9a:	ee10 0a10 	vmov	r0, s0
 800cd9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cda2:	e7d1      	b.n	800cd48 <sin+0x30>
 800cda4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cda8:	ed9d 0b00 	vldr	d0, [sp]
 800cdac:	f000 fa18 	bl	800d1e0 <__kernel_cos>
 800cdb0:	e7f1      	b.n	800cd96 <sin+0x7e>
 800cdb2:	bf00      	nop
 800cdb4:	f3af 8000 	nop.w
	...
 800cdc0:	3fe921fb 	.word	0x3fe921fb
 800cdc4:	7fefffff 	.word	0x7fefffff

0800cdc8 <__ieee754_rem_pio2>:
 800cdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdcc:	ed2d 8b02 	vpush	{d8}
 800cdd0:	ec55 4b10 	vmov	r4, r5, d0
 800cdd4:	4bca      	ldr	r3, [pc, #808]	; (800d100 <__ieee754_rem_pio2+0x338>)
 800cdd6:	b08b      	sub	sp, #44	; 0x2c
 800cdd8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cddc:	4598      	cmp	r8, r3
 800cdde:	4682      	mov	sl, r0
 800cde0:	9502      	str	r5, [sp, #8]
 800cde2:	dc08      	bgt.n	800cdf6 <__ieee754_rem_pio2+0x2e>
 800cde4:	2200      	movs	r2, #0
 800cde6:	2300      	movs	r3, #0
 800cde8:	ed80 0b00 	vstr	d0, [r0]
 800cdec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cdf0:	f04f 0b00 	mov.w	fp, #0
 800cdf4:	e028      	b.n	800ce48 <__ieee754_rem_pio2+0x80>
 800cdf6:	4bc3      	ldr	r3, [pc, #780]	; (800d104 <__ieee754_rem_pio2+0x33c>)
 800cdf8:	4598      	cmp	r8, r3
 800cdfa:	dc78      	bgt.n	800ceee <__ieee754_rem_pio2+0x126>
 800cdfc:	9b02      	ldr	r3, [sp, #8]
 800cdfe:	4ec2      	ldr	r6, [pc, #776]	; (800d108 <__ieee754_rem_pio2+0x340>)
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	ee10 0a10 	vmov	r0, s0
 800ce06:	a3b0      	add	r3, pc, #704	; (adr r3, 800d0c8 <__ieee754_rem_pio2+0x300>)
 800ce08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	dd39      	ble.n	800ce84 <__ieee754_rem_pio2+0xbc>
 800ce10:	f7f3 fa3a 	bl	8000288 <__aeabi_dsub>
 800ce14:	45b0      	cmp	r8, r6
 800ce16:	4604      	mov	r4, r0
 800ce18:	460d      	mov	r5, r1
 800ce1a:	d01b      	beq.n	800ce54 <__ieee754_rem_pio2+0x8c>
 800ce1c:	a3ac      	add	r3, pc, #688	; (adr r3, 800d0d0 <__ieee754_rem_pio2+0x308>)
 800ce1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce22:	f7f3 fa31 	bl	8000288 <__aeabi_dsub>
 800ce26:	4602      	mov	r2, r0
 800ce28:	460b      	mov	r3, r1
 800ce2a:	e9ca 2300 	strd	r2, r3, [sl]
 800ce2e:	4620      	mov	r0, r4
 800ce30:	4629      	mov	r1, r5
 800ce32:	f7f3 fa29 	bl	8000288 <__aeabi_dsub>
 800ce36:	a3a6      	add	r3, pc, #664	; (adr r3, 800d0d0 <__ieee754_rem_pio2+0x308>)
 800ce38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3c:	f7f3 fa24 	bl	8000288 <__aeabi_dsub>
 800ce40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ce44:	f04f 0b01 	mov.w	fp, #1
 800ce48:	4658      	mov	r0, fp
 800ce4a:	b00b      	add	sp, #44	; 0x2c
 800ce4c:	ecbd 8b02 	vpop	{d8}
 800ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce54:	a3a0      	add	r3, pc, #640	; (adr r3, 800d0d8 <__ieee754_rem_pio2+0x310>)
 800ce56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5a:	f7f3 fa15 	bl	8000288 <__aeabi_dsub>
 800ce5e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d0e0 <__ieee754_rem_pio2+0x318>)
 800ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce64:	4604      	mov	r4, r0
 800ce66:	460d      	mov	r5, r1
 800ce68:	f7f3 fa0e 	bl	8000288 <__aeabi_dsub>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	460b      	mov	r3, r1
 800ce70:	e9ca 2300 	strd	r2, r3, [sl]
 800ce74:	4620      	mov	r0, r4
 800ce76:	4629      	mov	r1, r5
 800ce78:	f7f3 fa06 	bl	8000288 <__aeabi_dsub>
 800ce7c:	a398      	add	r3, pc, #608	; (adr r3, 800d0e0 <__ieee754_rem_pio2+0x318>)
 800ce7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce82:	e7db      	b.n	800ce3c <__ieee754_rem_pio2+0x74>
 800ce84:	f7f3 fa02 	bl	800028c <__adddf3>
 800ce88:	45b0      	cmp	r8, r6
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	460d      	mov	r5, r1
 800ce8e:	d016      	beq.n	800cebe <__ieee754_rem_pio2+0xf6>
 800ce90:	a38f      	add	r3, pc, #572	; (adr r3, 800d0d0 <__ieee754_rem_pio2+0x308>)
 800ce92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce96:	f7f3 f9f9 	bl	800028c <__adddf3>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	e9ca 2300 	strd	r2, r3, [sl]
 800cea2:	4620      	mov	r0, r4
 800cea4:	4629      	mov	r1, r5
 800cea6:	f7f3 f9ef 	bl	8000288 <__aeabi_dsub>
 800ceaa:	a389      	add	r3, pc, #548	; (adr r3, 800d0d0 <__ieee754_rem_pio2+0x308>)
 800ceac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb0:	f7f3 f9ec 	bl	800028c <__adddf3>
 800ceb4:	f04f 3bff 	mov.w	fp, #4294967295
 800ceb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cebc:	e7c4      	b.n	800ce48 <__ieee754_rem_pio2+0x80>
 800cebe:	a386      	add	r3, pc, #536	; (adr r3, 800d0d8 <__ieee754_rem_pio2+0x310>)
 800cec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec4:	f7f3 f9e2 	bl	800028c <__adddf3>
 800cec8:	a385      	add	r3, pc, #532	; (adr r3, 800d0e0 <__ieee754_rem_pio2+0x318>)
 800ceca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cece:	4604      	mov	r4, r0
 800ced0:	460d      	mov	r5, r1
 800ced2:	f7f3 f9db 	bl	800028c <__adddf3>
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	e9ca 2300 	strd	r2, r3, [sl]
 800cede:	4620      	mov	r0, r4
 800cee0:	4629      	mov	r1, r5
 800cee2:	f7f3 f9d1 	bl	8000288 <__aeabi_dsub>
 800cee6:	a37e      	add	r3, pc, #504	; (adr r3, 800d0e0 <__ieee754_rem_pio2+0x318>)
 800cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceec:	e7e0      	b.n	800ceb0 <__ieee754_rem_pio2+0xe8>
 800ceee:	4b87      	ldr	r3, [pc, #540]	; (800d10c <__ieee754_rem_pio2+0x344>)
 800cef0:	4598      	cmp	r8, r3
 800cef2:	f300 80d9 	bgt.w	800d0a8 <__ieee754_rem_pio2+0x2e0>
 800cef6:	f000 fe49 	bl	800db8c <fabs>
 800cefa:	ec55 4b10 	vmov	r4, r5, d0
 800cefe:	ee10 0a10 	vmov	r0, s0
 800cf02:	a379      	add	r3, pc, #484	; (adr r3, 800d0e8 <__ieee754_rem_pio2+0x320>)
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	4629      	mov	r1, r5
 800cf0a:	f7f3 fb75 	bl	80005f8 <__aeabi_dmul>
 800cf0e:	4b80      	ldr	r3, [pc, #512]	; (800d110 <__ieee754_rem_pio2+0x348>)
 800cf10:	2200      	movs	r2, #0
 800cf12:	f7f3 f9bb 	bl	800028c <__adddf3>
 800cf16:	f7f3 fe1f 	bl	8000b58 <__aeabi_d2iz>
 800cf1a:	4683      	mov	fp, r0
 800cf1c:	f7f3 fb02 	bl	8000524 <__aeabi_i2d>
 800cf20:	4602      	mov	r2, r0
 800cf22:	460b      	mov	r3, r1
 800cf24:	ec43 2b18 	vmov	d8, r2, r3
 800cf28:	a367      	add	r3, pc, #412	; (adr r3, 800d0c8 <__ieee754_rem_pio2+0x300>)
 800cf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2e:	f7f3 fb63 	bl	80005f8 <__aeabi_dmul>
 800cf32:	4602      	mov	r2, r0
 800cf34:	460b      	mov	r3, r1
 800cf36:	4620      	mov	r0, r4
 800cf38:	4629      	mov	r1, r5
 800cf3a:	f7f3 f9a5 	bl	8000288 <__aeabi_dsub>
 800cf3e:	a364      	add	r3, pc, #400	; (adr r3, 800d0d0 <__ieee754_rem_pio2+0x308>)
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	4606      	mov	r6, r0
 800cf46:	460f      	mov	r7, r1
 800cf48:	ec51 0b18 	vmov	r0, r1, d8
 800cf4c:	f7f3 fb54 	bl	80005f8 <__aeabi_dmul>
 800cf50:	f1bb 0f1f 	cmp.w	fp, #31
 800cf54:	4604      	mov	r4, r0
 800cf56:	460d      	mov	r5, r1
 800cf58:	dc0d      	bgt.n	800cf76 <__ieee754_rem_pio2+0x1ae>
 800cf5a:	4b6e      	ldr	r3, [pc, #440]	; (800d114 <__ieee754_rem_pio2+0x34c>)
 800cf5c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cf60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf64:	4543      	cmp	r3, r8
 800cf66:	d006      	beq.n	800cf76 <__ieee754_rem_pio2+0x1ae>
 800cf68:	4622      	mov	r2, r4
 800cf6a:	462b      	mov	r3, r5
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	4639      	mov	r1, r7
 800cf70:	f7f3 f98a 	bl	8000288 <__aeabi_dsub>
 800cf74:	e00f      	b.n	800cf96 <__ieee754_rem_pio2+0x1ce>
 800cf76:	462b      	mov	r3, r5
 800cf78:	4622      	mov	r2, r4
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	4639      	mov	r1, r7
 800cf7e:	f7f3 f983 	bl	8000288 <__aeabi_dsub>
 800cf82:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cf86:	9303      	str	r3, [sp, #12]
 800cf88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cf8c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800cf90:	f1b8 0f10 	cmp.w	r8, #16
 800cf94:	dc02      	bgt.n	800cf9c <__ieee754_rem_pio2+0x1d4>
 800cf96:	e9ca 0100 	strd	r0, r1, [sl]
 800cf9a:	e039      	b.n	800d010 <__ieee754_rem_pio2+0x248>
 800cf9c:	a34e      	add	r3, pc, #312	; (adr r3, 800d0d8 <__ieee754_rem_pio2+0x310>)
 800cf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa2:	ec51 0b18 	vmov	r0, r1, d8
 800cfa6:	f7f3 fb27 	bl	80005f8 <__aeabi_dmul>
 800cfaa:	4604      	mov	r4, r0
 800cfac:	460d      	mov	r5, r1
 800cfae:	4602      	mov	r2, r0
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	4639      	mov	r1, r7
 800cfb6:	f7f3 f967 	bl	8000288 <__aeabi_dsub>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	4680      	mov	r8, r0
 800cfc0:	4689      	mov	r9, r1
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	4639      	mov	r1, r7
 800cfc6:	f7f3 f95f 	bl	8000288 <__aeabi_dsub>
 800cfca:	4622      	mov	r2, r4
 800cfcc:	462b      	mov	r3, r5
 800cfce:	f7f3 f95b 	bl	8000288 <__aeabi_dsub>
 800cfd2:	a343      	add	r3, pc, #268	; (adr r3, 800d0e0 <__ieee754_rem_pio2+0x318>)
 800cfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd8:	4604      	mov	r4, r0
 800cfda:	460d      	mov	r5, r1
 800cfdc:	ec51 0b18 	vmov	r0, r1, d8
 800cfe0:	f7f3 fb0a 	bl	80005f8 <__aeabi_dmul>
 800cfe4:	4622      	mov	r2, r4
 800cfe6:	462b      	mov	r3, r5
 800cfe8:	f7f3 f94e 	bl	8000288 <__aeabi_dsub>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	4604      	mov	r4, r0
 800cff2:	460d      	mov	r5, r1
 800cff4:	4640      	mov	r0, r8
 800cff6:	4649      	mov	r1, r9
 800cff8:	f7f3 f946 	bl	8000288 <__aeabi_dsub>
 800cffc:	9a03      	ldr	r2, [sp, #12]
 800cffe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	2b31      	cmp	r3, #49	; 0x31
 800d006:	dc24      	bgt.n	800d052 <__ieee754_rem_pio2+0x28a>
 800d008:	e9ca 0100 	strd	r0, r1, [sl]
 800d00c:	4646      	mov	r6, r8
 800d00e:	464f      	mov	r7, r9
 800d010:	e9da 8900 	ldrd	r8, r9, [sl]
 800d014:	4630      	mov	r0, r6
 800d016:	4642      	mov	r2, r8
 800d018:	464b      	mov	r3, r9
 800d01a:	4639      	mov	r1, r7
 800d01c:	f7f3 f934 	bl	8000288 <__aeabi_dsub>
 800d020:	462b      	mov	r3, r5
 800d022:	4622      	mov	r2, r4
 800d024:	f7f3 f930 	bl	8000288 <__aeabi_dsub>
 800d028:	9b02      	ldr	r3, [sp, #8]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d030:	f6bf af0a 	bge.w	800ce48 <__ieee754_rem_pio2+0x80>
 800d034:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d038:	f8ca 3004 	str.w	r3, [sl, #4]
 800d03c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d040:	f8ca 8000 	str.w	r8, [sl]
 800d044:	f8ca 0008 	str.w	r0, [sl, #8]
 800d048:	f8ca 300c 	str.w	r3, [sl, #12]
 800d04c:	f1cb 0b00 	rsb	fp, fp, #0
 800d050:	e6fa      	b.n	800ce48 <__ieee754_rem_pio2+0x80>
 800d052:	a327      	add	r3, pc, #156	; (adr r3, 800d0f0 <__ieee754_rem_pio2+0x328>)
 800d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d058:	ec51 0b18 	vmov	r0, r1, d8
 800d05c:	f7f3 facc 	bl	80005f8 <__aeabi_dmul>
 800d060:	4604      	mov	r4, r0
 800d062:	460d      	mov	r5, r1
 800d064:	4602      	mov	r2, r0
 800d066:	460b      	mov	r3, r1
 800d068:	4640      	mov	r0, r8
 800d06a:	4649      	mov	r1, r9
 800d06c:	f7f3 f90c 	bl	8000288 <__aeabi_dsub>
 800d070:	4602      	mov	r2, r0
 800d072:	460b      	mov	r3, r1
 800d074:	4606      	mov	r6, r0
 800d076:	460f      	mov	r7, r1
 800d078:	4640      	mov	r0, r8
 800d07a:	4649      	mov	r1, r9
 800d07c:	f7f3 f904 	bl	8000288 <__aeabi_dsub>
 800d080:	4622      	mov	r2, r4
 800d082:	462b      	mov	r3, r5
 800d084:	f7f3 f900 	bl	8000288 <__aeabi_dsub>
 800d088:	a31b      	add	r3, pc, #108	; (adr r3, 800d0f8 <__ieee754_rem_pio2+0x330>)
 800d08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08e:	4604      	mov	r4, r0
 800d090:	460d      	mov	r5, r1
 800d092:	ec51 0b18 	vmov	r0, r1, d8
 800d096:	f7f3 faaf 	bl	80005f8 <__aeabi_dmul>
 800d09a:	4622      	mov	r2, r4
 800d09c:	462b      	mov	r3, r5
 800d09e:	f7f3 f8f3 	bl	8000288 <__aeabi_dsub>
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	460d      	mov	r5, r1
 800d0a6:	e75f      	b.n	800cf68 <__ieee754_rem_pio2+0x1a0>
 800d0a8:	4b1b      	ldr	r3, [pc, #108]	; (800d118 <__ieee754_rem_pio2+0x350>)
 800d0aa:	4598      	cmp	r8, r3
 800d0ac:	dd36      	ble.n	800d11c <__ieee754_rem_pio2+0x354>
 800d0ae:	ee10 2a10 	vmov	r2, s0
 800d0b2:	462b      	mov	r3, r5
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	f7f3 f8e6 	bl	8000288 <__aeabi_dsub>
 800d0bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d0c0:	e9ca 0100 	strd	r0, r1, [sl]
 800d0c4:	e694      	b.n	800cdf0 <__ieee754_rem_pio2+0x28>
 800d0c6:	bf00      	nop
 800d0c8:	54400000 	.word	0x54400000
 800d0cc:	3ff921fb 	.word	0x3ff921fb
 800d0d0:	1a626331 	.word	0x1a626331
 800d0d4:	3dd0b461 	.word	0x3dd0b461
 800d0d8:	1a600000 	.word	0x1a600000
 800d0dc:	3dd0b461 	.word	0x3dd0b461
 800d0e0:	2e037073 	.word	0x2e037073
 800d0e4:	3ba3198a 	.word	0x3ba3198a
 800d0e8:	6dc9c883 	.word	0x6dc9c883
 800d0ec:	3fe45f30 	.word	0x3fe45f30
 800d0f0:	2e000000 	.word	0x2e000000
 800d0f4:	3ba3198a 	.word	0x3ba3198a
 800d0f8:	252049c1 	.word	0x252049c1
 800d0fc:	397b839a 	.word	0x397b839a
 800d100:	3fe921fb 	.word	0x3fe921fb
 800d104:	4002d97b 	.word	0x4002d97b
 800d108:	3ff921fb 	.word	0x3ff921fb
 800d10c:	413921fb 	.word	0x413921fb
 800d110:	3fe00000 	.word	0x3fe00000
 800d114:	0800e2c4 	.word	0x0800e2c4
 800d118:	7fefffff 	.word	0x7fefffff
 800d11c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d120:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d124:	ee10 0a10 	vmov	r0, s0
 800d128:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d12c:	ee10 6a10 	vmov	r6, s0
 800d130:	460f      	mov	r7, r1
 800d132:	f7f3 fd11 	bl	8000b58 <__aeabi_d2iz>
 800d136:	f7f3 f9f5 	bl	8000524 <__aeabi_i2d>
 800d13a:	4602      	mov	r2, r0
 800d13c:	460b      	mov	r3, r1
 800d13e:	4630      	mov	r0, r6
 800d140:	4639      	mov	r1, r7
 800d142:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d146:	f7f3 f89f 	bl	8000288 <__aeabi_dsub>
 800d14a:	4b23      	ldr	r3, [pc, #140]	; (800d1d8 <__ieee754_rem_pio2+0x410>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	f7f3 fa53 	bl	80005f8 <__aeabi_dmul>
 800d152:	460f      	mov	r7, r1
 800d154:	4606      	mov	r6, r0
 800d156:	f7f3 fcff 	bl	8000b58 <__aeabi_d2iz>
 800d15a:	f7f3 f9e3 	bl	8000524 <__aeabi_i2d>
 800d15e:	4602      	mov	r2, r0
 800d160:	460b      	mov	r3, r1
 800d162:	4630      	mov	r0, r6
 800d164:	4639      	mov	r1, r7
 800d166:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d16a:	f7f3 f88d 	bl	8000288 <__aeabi_dsub>
 800d16e:	4b1a      	ldr	r3, [pc, #104]	; (800d1d8 <__ieee754_rem_pio2+0x410>)
 800d170:	2200      	movs	r2, #0
 800d172:	f7f3 fa41 	bl	80005f8 <__aeabi_dmul>
 800d176:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d17a:	ad04      	add	r5, sp, #16
 800d17c:	f04f 0803 	mov.w	r8, #3
 800d180:	46a9      	mov	r9, r5
 800d182:	2600      	movs	r6, #0
 800d184:	2700      	movs	r7, #0
 800d186:	4632      	mov	r2, r6
 800d188:	463b      	mov	r3, r7
 800d18a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d18e:	46c3      	mov	fp, r8
 800d190:	3d08      	subs	r5, #8
 800d192:	f108 38ff 	add.w	r8, r8, #4294967295
 800d196:	f7f3 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d1f3      	bne.n	800d186 <__ieee754_rem_pio2+0x3be>
 800d19e:	4b0f      	ldr	r3, [pc, #60]	; (800d1dc <__ieee754_rem_pio2+0x414>)
 800d1a0:	9301      	str	r3, [sp, #4]
 800d1a2:	2302      	movs	r3, #2
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	4622      	mov	r2, r4
 800d1a8:	465b      	mov	r3, fp
 800d1aa:	4651      	mov	r1, sl
 800d1ac:	4648      	mov	r0, r9
 800d1ae:	f000 f8df 	bl	800d370 <__kernel_rem_pio2>
 800d1b2:	9b02      	ldr	r3, [sp, #8]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	4683      	mov	fp, r0
 800d1b8:	f6bf ae46 	bge.w	800ce48 <__ieee754_rem_pio2+0x80>
 800d1bc:	e9da 2100 	ldrd	r2, r1, [sl]
 800d1c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1c4:	e9ca 2300 	strd	r2, r3, [sl]
 800d1c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d1cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d1d4:	e73a      	b.n	800d04c <__ieee754_rem_pio2+0x284>
 800d1d6:	bf00      	nop
 800d1d8:	41700000 	.word	0x41700000
 800d1dc:	0800e344 	.word	0x0800e344

0800d1e0 <__kernel_cos>:
 800d1e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e4:	ec57 6b10 	vmov	r6, r7, d0
 800d1e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d1ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d1f0:	ed8d 1b00 	vstr	d1, [sp]
 800d1f4:	da07      	bge.n	800d206 <__kernel_cos+0x26>
 800d1f6:	ee10 0a10 	vmov	r0, s0
 800d1fa:	4639      	mov	r1, r7
 800d1fc:	f7f3 fcac 	bl	8000b58 <__aeabi_d2iz>
 800d200:	2800      	cmp	r0, #0
 800d202:	f000 8088 	beq.w	800d316 <__kernel_cos+0x136>
 800d206:	4632      	mov	r2, r6
 800d208:	463b      	mov	r3, r7
 800d20a:	4630      	mov	r0, r6
 800d20c:	4639      	mov	r1, r7
 800d20e:	f7f3 f9f3 	bl	80005f8 <__aeabi_dmul>
 800d212:	4b51      	ldr	r3, [pc, #324]	; (800d358 <__kernel_cos+0x178>)
 800d214:	2200      	movs	r2, #0
 800d216:	4604      	mov	r4, r0
 800d218:	460d      	mov	r5, r1
 800d21a:	f7f3 f9ed 	bl	80005f8 <__aeabi_dmul>
 800d21e:	a340      	add	r3, pc, #256	; (adr r3, 800d320 <__kernel_cos+0x140>)
 800d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d224:	4682      	mov	sl, r0
 800d226:	468b      	mov	fp, r1
 800d228:	4620      	mov	r0, r4
 800d22a:	4629      	mov	r1, r5
 800d22c:	f7f3 f9e4 	bl	80005f8 <__aeabi_dmul>
 800d230:	a33d      	add	r3, pc, #244	; (adr r3, 800d328 <__kernel_cos+0x148>)
 800d232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d236:	f7f3 f829 	bl	800028c <__adddf3>
 800d23a:	4622      	mov	r2, r4
 800d23c:	462b      	mov	r3, r5
 800d23e:	f7f3 f9db 	bl	80005f8 <__aeabi_dmul>
 800d242:	a33b      	add	r3, pc, #236	; (adr r3, 800d330 <__kernel_cos+0x150>)
 800d244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d248:	f7f3 f81e 	bl	8000288 <__aeabi_dsub>
 800d24c:	4622      	mov	r2, r4
 800d24e:	462b      	mov	r3, r5
 800d250:	f7f3 f9d2 	bl	80005f8 <__aeabi_dmul>
 800d254:	a338      	add	r3, pc, #224	; (adr r3, 800d338 <__kernel_cos+0x158>)
 800d256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25a:	f7f3 f817 	bl	800028c <__adddf3>
 800d25e:	4622      	mov	r2, r4
 800d260:	462b      	mov	r3, r5
 800d262:	f7f3 f9c9 	bl	80005f8 <__aeabi_dmul>
 800d266:	a336      	add	r3, pc, #216	; (adr r3, 800d340 <__kernel_cos+0x160>)
 800d268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26c:	f7f3 f80c 	bl	8000288 <__aeabi_dsub>
 800d270:	4622      	mov	r2, r4
 800d272:	462b      	mov	r3, r5
 800d274:	f7f3 f9c0 	bl	80005f8 <__aeabi_dmul>
 800d278:	a333      	add	r3, pc, #204	; (adr r3, 800d348 <__kernel_cos+0x168>)
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	f7f3 f805 	bl	800028c <__adddf3>
 800d282:	4622      	mov	r2, r4
 800d284:	462b      	mov	r3, r5
 800d286:	f7f3 f9b7 	bl	80005f8 <__aeabi_dmul>
 800d28a:	4622      	mov	r2, r4
 800d28c:	462b      	mov	r3, r5
 800d28e:	f7f3 f9b3 	bl	80005f8 <__aeabi_dmul>
 800d292:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d296:	4604      	mov	r4, r0
 800d298:	460d      	mov	r5, r1
 800d29a:	4630      	mov	r0, r6
 800d29c:	4639      	mov	r1, r7
 800d29e:	f7f3 f9ab 	bl	80005f8 <__aeabi_dmul>
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f7f2 ffed 	bl	8000288 <__aeabi_dsub>
 800d2ae:	4b2b      	ldr	r3, [pc, #172]	; (800d35c <__kernel_cos+0x17c>)
 800d2b0:	4598      	cmp	r8, r3
 800d2b2:	4606      	mov	r6, r0
 800d2b4:	460f      	mov	r7, r1
 800d2b6:	dc10      	bgt.n	800d2da <__kernel_cos+0xfa>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	4650      	mov	r0, sl
 800d2be:	4659      	mov	r1, fp
 800d2c0:	f7f2 ffe2 	bl	8000288 <__aeabi_dsub>
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	4926      	ldr	r1, [pc, #152]	; (800d360 <__kernel_cos+0x180>)
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	f7f2 ffdc 	bl	8000288 <__aeabi_dsub>
 800d2d0:	ec41 0b10 	vmov	d0, r0, r1
 800d2d4:	b003      	add	sp, #12
 800d2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2da:	4b22      	ldr	r3, [pc, #136]	; (800d364 <__kernel_cos+0x184>)
 800d2dc:	4920      	ldr	r1, [pc, #128]	; (800d360 <__kernel_cos+0x180>)
 800d2de:	4598      	cmp	r8, r3
 800d2e0:	bfcc      	ite	gt
 800d2e2:	4d21      	ldrgt	r5, [pc, #132]	; (800d368 <__kernel_cos+0x188>)
 800d2e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d2e8:	2400      	movs	r4, #0
 800d2ea:	4622      	mov	r2, r4
 800d2ec:	462b      	mov	r3, r5
 800d2ee:	2000      	movs	r0, #0
 800d2f0:	f7f2 ffca 	bl	8000288 <__aeabi_dsub>
 800d2f4:	4622      	mov	r2, r4
 800d2f6:	4680      	mov	r8, r0
 800d2f8:	4689      	mov	r9, r1
 800d2fa:	462b      	mov	r3, r5
 800d2fc:	4650      	mov	r0, sl
 800d2fe:	4659      	mov	r1, fp
 800d300:	f7f2 ffc2 	bl	8000288 <__aeabi_dsub>
 800d304:	4632      	mov	r2, r6
 800d306:	463b      	mov	r3, r7
 800d308:	f7f2 ffbe 	bl	8000288 <__aeabi_dsub>
 800d30c:	4602      	mov	r2, r0
 800d30e:	460b      	mov	r3, r1
 800d310:	4640      	mov	r0, r8
 800d312:	4649      	mov	r1, r9
 800d314:	e7da      	b.n	800d2cc <__kernel_cos+0xec>
 800d316:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d350 <__kernel_cos+0x170>
 800d31a:	e7db      	b.n	800d2d4 <__kernel_cos+0xf4>
 800d31c:	f3af 8000 	nop.w
 800d320:	be8838d4 	.word	0xbe8838d4
 800d324:	bda8fae9 	.word	0xbda8fae9
 800d328:	bdb4b1c4 	.word	0xbdb4b1c4
 800d32c:	3e21ee9e 	.word	0x3e21ee9e
 800d330:	809c52ad 	.word	0x809c52ad
 800d334:	3e927e4f 	.word	0x3e927e4f
 800d338:	19cb1590 	.word	0x19cb1590
 800d33c:	3efa01a0 	.word	0x3efa01a0
 800d340:	16c15177 	.word	0x16c15177
 800d344:	3f56c16c 	.word	0x3f56c16c
 800d348:	5555554c 	.word	0x5555554c
 800d34c:	3fa55555 	.word	0x3fa55555
 800d350:	00000000 	.word	0x00000000
 800d354:	3ff00000 	.word	0x3ff00000
 800d358:	3fe00000 	.word	0x3fe00000
 800d35c:	3fd33332 	.word	0x3fd33332
 800d360:	3ff00000 	.word	0x3ff00000
 800d364:	3fe90000 	.word	0x3fe90000
 800d368:	3fd20000 	.word	0x3fd20000
 800d36c:	00000000 	.word	0x00000000

0800d370 <__kernel_rem_pio2>:
 800d370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d374:	ed2d 8b02 	vpush	{d8}
 800d378:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d37c:	f112 0f14 	cmn.w	r2, #20
 800d380:	9308      	str	r3, [sp, #32]
 800d382:	9101      	str	r1, [sp, #4]
 800d384:	4bc4      	ldr	r3, [pc, #784]	; (800d698 <__kernel_rem_pio2+0x328>)
 800d386:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d388:	900b      	str	r0, [sp, #44]	; 0x2c
 800d38a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d38e:	9302      	str	r3, [sp, #8]
 800d390:	9b08      	ldr	r3, [sp, #32]
 800d392:	f103 33ff 	add.w	r3, r3, #4294967295
 800d396:	bfa8      	it	ge
 800d398:	1ed4      	subge	r4, r2, #3
 800d39a:	9306      	str	r3, [sp, #24]
 800d39c:	bfb2      	itee	lt
 800d39e:	2400      	movlt	r4, #0
 800d3a0:	2318      	movge	r3, #24
 800d3a2:	fb94 f4f3 	sdivge	r4, r4, r3
 800d3a6:	f06f 0317 	mvn.w	r3, #23
 800d3aa:	fb04 3303 	mla	r3, r4, r3, r3
 800d3ae:	eb03 0a02 	add.w	sl, r3, r2
 800d3b2:	9b02      	ldr	r3, [sp, #8]
 800d3b4:	9a06      	ldr	r2, [sp, #24]
 800d3b6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d688 <__kernel_rem_pio2+0x318>
 800d3ba:	eb03 0802 	add.w	r8, r3, r2
 800d3be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d3c0:	1aa7      	subs	r7, r4, r2
 800d3c2:	ae22      	add	r6, sp, #136	; 0x88
 800d3c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d3c8:	2500      	movs	r5, #0
 800d3ca:	4545      	cmp	r5, r8
 800d3cc:	dd13      	ble.n	800d3f6 <__kernel_rem_pio2+0x86>
 800d3ce:	9b08      	ldr	r3, [sp, #32]
 800d3d0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800d688 <__kernel_rem_pio2+0x318>
 800d3d4:	aa22      	add	r2, sp, #136	; 0x88
 800d3d6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d3da:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d3de:	f04f 0800 	mov.w	r8, #0
 800d3e2:	9b02      	ldr	r3, [sp, #8]
 800d3e4:	4598      	cmp	r8, r3
 800d3e6:	dc2f      	bgt.n	800d448 <__kernel_rem_pio2+0xd8>
 800d3e8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d3ec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d3f0:	462f      	mov	r7, r5
 800d3f2:	2600      	movs	r6, #0
 800d3f4:	e01b      	b.n	800d42e <__kernel_rem_pio2+0xbe>
 800d3f6:	42ef      	cmn	r7, r5
 800d3f8:	d407      	bmi.n	800d40a <__kernel_rem_pio2+0x9a>
 800d3fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d3fe:	f7f3 f891 	bl	8000524 <__aeabi_i2d>
 800d402:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d406:	3501      	adds	r5, #1
 800d408:	e7df      	b.n	800d3ca <__kernel_rem_pio2+0x5a>
 800d40a:	ec51 0b18 	vmov	r0, r1, d8
 800d40e:	e7f8      	b.n	800d402 <__kernel_rem_pio2+0x92>
 800d410:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d414:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d418:	f7f3 f8ee 	bl	80005f8 <__aeabi_dmul>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d424:	f7f2 ff32 	bl	800028c <__adddf3>
 800d428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d42c:	3601      	adds	r6, #1
 800d42e:	9b06      	ldr	r3, [sp, #24]
 800d430:	429e      	cmp	r6, r3
 800d432:	f1a7 0708 	sub.w	r7, r7, #8
 800d436:	ddeb      	ble.n	800d410 <__kernel_rem_pio2+0xa0>
 800d438:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d43c:	f108 0801 	add.w	r8, r8, #1
 800d440:	ecab 7b02 	vstmia	fp!, {d7}
 800d444:	3508      	adds	r5, #8
 800d446:	e7cc      	b.n	800d3e2 <__kernel_rem_pio2+0x72>
 800d448:	9b02      	ldr	r3, [sp, #8]
 800d44a:	aa0e      	add	r2, sp, #56	; 0x38
 800d44c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d450:	930d      	str	r3, [sp, #52]	; 0x34
 800d452:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d454:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d458:	9c02      	ldr	r4, [sp, #8]
 800d45a:	930c      	str	r3, [sp, #48]	; 0x30
 800d45c:	00e3      	lsls	r3, r4, #3
 800d45e:	930a      	str	r3, [sp, #40]	; 0x28
 800d460:	ab9a      	add	r3, sp, #616	; 0x268
 800d462:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d466:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d46a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d46e:	ab72      	add	r3, sp, #456	; 0x1c8
 800d470:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d474:	46c3      	mov	fp, r8
 800d476:	46a1      	mov	r9, r4
 800d478:	f1b9 0f00 	cmp.w	r9, #0
 800d47c:	f1a5 0508 	sub.w	r5, r5, #8
 800d480:	dc77      	bgt.n	800d572 <__kernel_rem_pio2+0x202>
 800d482:	ec47 6b10 	vmov	d0, r6, r7
 800d486:	4650      	mov	r0, sl
 800d488:	f000 fc0a 	bl	800dca0 <scalbn>
 800d48c:	ec57 6b10 	vmov	r6, r7, d0
 800d490:	2200      	movs	r2, #0
 800d492:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d496:	ee10 0a10 	vmov	r0, s0
 800d49a:	4639      	mov	r1, r7
 800d49c:	f7f3 f8ac 	bl	80005f8 <__aeabi_dmul>
 800d4a0:	ec41 0b10 	vmov	d0, r0, r1
 800d4a4:	f000 fb7c 	bl	800dba0 <floor>
 800d4a8:	4b7c      	ldr	r3, [pc, #496]	; (800d69c <__kernel_rem_pio2+0x32c>)
 800d4aa:	ec51 0b10 	vmov	r0, r1, d0
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f7f3 f8a2 	bl	80005f8 <__aeabi_dmul>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	4639      	mov	r1, r7
 800d4bc:	f7f2 fee4 	bl	8000288 <__aeabi_dsub>
 800d4c0:	460f      	mov	r7, r1
 800d4c2:	4606      	mov	r6, r0
 800d4c4:	f7f3 fb48 	bl	8000b58 <__aeabi_d2iz>
 800d4c8:	9004      	str	r0, [sp, #16]
 800d4ca:	f7f3 f82b 	bl	8000524 <__aeabi_i2d>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	4639      	mov	r1, r7
 800d4d6:	f7f2 fed7 	bl	8000288 <__aeabi_dsub>
 800d4da:	f1ba 0f00 	cmp.w	sl, #0
 800d4de:	4606      	mov	r6, r0
 800d4e0:	460f      	mov	r7, r1
 800d4e2:	dd6d      	ble.n	800d5c0 <__kernel_rem_pio2+0x250>
 800d4e4:	1e62      	subs	r2, r4, #1
 800d4e6:	ab0e      	add	r3, sp, #56	; 0x38
 800d4e8:	9d04      	ldr	r5, [sp, #16]
 800d4ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d4ee:	f1ca 0118 	rsb	r1, sl, #24
 800d4f2:	fa40 f301 	asr.w	r3, r0, r1
 800d4f6:	441d      	add	r5, r3
 800d4f8:	408b      	lsls	r3, r1
 800d4fa:	1ac0      	subs	r0, r0, r3
 800d4fc:	ab0e      	add	r3, sp, #56	; 0x38
 800d4fe:	9504      	str	r5, [sp, #16]
 800d500:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d504:	f1ca 0317 	rsb	r3, sl, #23
 800d508:	fa40 fb03 	asr.w	fp, r0, r3
 800d50c:	f1bb 0f00 	cmp.w	fp, #0
 800d510:	dd65      	ble.n	800d5de <__kernel_rem_pio2+0x26e>
 800d512:	9b04      	ldr	r3, [sp, #16]
 800d514:	2200      	movs	r2, #0
 800d516:	3301      	adds	r3, #1
 800d518:	9304      	str	r3, [sp, #16]
 800d51a:	4615      	mov	r5, r2
 800d51c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d520:	4294      	cmp	r4, r2
 800d522:	f300 809c 	bgt.w	800d65e <__kernel_rem_pio2+0x2ee>
 800d526:	f1ba 0f00 	cmp.w	sl, #0
 800d52a:	dd07      	ble.n	800d53c <__kernel_rem_pio2+0x1cc>
 800d52c:	f1ba 0f01 	cmp.w	sl, #1
 800d530:	f000 80c0 	beq.w	800d6b4 <__kernel_rem_pio2+0x344>
 800d534:	f1ba 0f02 	cmp.w	sl, #2
 800d538:	f000 80c6 	beq.w	800d6c8 <__kernel_rem_pio2+0x358>
 800d53c:	f1bb 0f02 	cmp.w	fp, #2
 800d540:	d14d      	bne.n	800d5de <__kernel_rem_pio2+0x26e>
 800d542:	4632      	mov	r2, r6
 800d544:	463b      	mov	r3, r7
 800d546:	4956      	ldr	r1, [pc, #344]	; (800d6a0 <__kernel_rem_pio2+0x330>)
 800d548:	2000      	movs	r0, #0
 800d54a:	f7f2 fe9d 	bl	8000288 <__aeabi_dsub>
 800d54e:	4606      	mov	r6, r0
 800d550:	460f      	mov	r7, r1
 800d552:	2d00      	cmp	r5, #0
 800d554:	d043      	beq.n	800d5de <__kernel_rem_pio2+0x26e>
 800d556:	4650      	mov	r0, sl
 800d558:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d690 <__kernel_rem_pio2+0x320>
 800d55c:	f000 fba0 	bl	800dca0 <scalbn>
 800d560:	4630      	mov	r0, r6
 800d562:	4639      	mov	r1, r7
 800d564:	ec53 2b10 	vmov	r2, r3, d0
 800d568:	f7f2 fe8e 	bl	8000288 <__aeabi_dsub>
 800d56c:	4606      	mov	r6, r0
 800d56e:	460f      	mov	r7, r1
 800d570:	e035      	b.n	800d5de <__kernel_rem_pio2+0x26e>
 800d572:	4b4c      	ldr	r3, [pc, #304]	; (800d6a4 <__kernel_rem_pio2+0x334>)
 800d574:	2200      	movs	r2, #0
 800d576:	4630      	mov	r0, r6
 800d578:	4639      	mov	r1, r7
 800d57a:	f7f3 f83d 	bl	80005f8 <__aeabi_dmul>
 800d57e:	f7f3 faeb 	bl	8000b58 <__aeabi_d2iz>
 800d582:	f7f2 ffcf 	bl	8000524 <__aeabi_i2d>
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	ec43 2b18 	vmov	d8, r2, r3
 800d58e:	4b46      	ldr	r3, [pc, #280]	; (800d6a8 <__kernel_rem_pio2+0x338>)
 800d590:	2200      	movs	r2, #0
 800d592:	f7f3 f831 	bl	80005f8 <__aeabi_dmul>
 800d596:	4602      	mov	r2, r0
 800d598:	460b      	mov	r3, r1
 800d59a:	4630      	mov	r0, r6
 800d59c:	4639      	mov	r1, r7
 800d59e:	f7f2 fe73 	bl	8000288 <__aeabi_dsub>
 800d5a2:	f7f3 fad9 	bl	8000b58 <__aeabi_d2iz>
 800d5a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5aa:	f84b 0b04 	str.w	r0, [fp], #4
 800d5ae:	ec51 0b18 	vmov	r0, r1, d8
 800d5b2:	f7f2 fe6b 	bl	800028c <__adddf3>
 800d5b6:	f109 39ff 	add.w	r9, r9, #4294967295
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	460f      	mov	r7, r1
 800d5be:	e75b      	b.n	800d478 <__kernel_rem_pio2+0x108>
 800d5c0:	d106      	bne.n	800d5d0 <__kernel_rem_pio2+0x260>
 800d5c2:	1e63      	subs	r3, r4, #1
 800d5c4:	aa0e      	add	r2, sp, #56	; 0x38
 800d5c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d5ca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d5ce:	e79d      	b.n	800d50c <__kernel_rem_pio2+0x19c>
 800d5d0:	4b36      	ldr	r3, [pc, #216]	; (800d6ac <__kernel_rem_pio2+0x33c>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f7f3 fa96 	bl	8000b04 <__aeabi_dcmpge>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d13d      	bne.n	800d658 <__kernel_rem_pio2+0x2e8>
 800d5dc:	4683      	mov	fp, r0
 800d5de:	2200      	movs	r2, #0
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	4639      	mov	r1, r7
 800d5e6:	f7f3 fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	f000 80c0 	beq.w	800d770 <__kernel_rem_pio2+0x400>
 800d5f0:	1e65      	subs	r5, r4, #1
 800d5f2:	462b      	mov	r3, r5
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	9902      	ldr	r1, [sp, #8]
 800d5f8:	428b      	cmp	r3, r1
 800d5fa:	da6c      	bge.n	800d6d6 <__kernel_rem_pio2+0x366>
 800d5fc:	2a00      	cmp	r2, #0
 800d5fe:	f000 8089 	beq.w	800d714 <__kernel_rem_pio2+0x3a4>
 800d602:	ab0e      	add	r3, sp, #56	; 0x38
 800d604:	f1aa 0a18 	sub.w	sl, sl, #24
 800d608:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f000 80ad 	beq.w	800d76c <__kernel_rem_pio2+0x3fc>
 800d612:	4650      	mov	r0, sl
 800d614:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800d690 <__kernel_rem_pio2+0x320>
 800d618:	f000 fb42 	bl	800dca0 <scalbn>
 800d61c:	ab9a      	add	r3, sp, #616	; 0x268
 800d61e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d622:	ec57 6b10 	vmov	r6, r7, d0
 800d626:	00ec      	lsls	r4, r5, #3
 800d628:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d62c:	46aa      	mov	sl, r5
 800d62e:	f1ba 0f00 	cmp.w	sl, #0
 800d632:	f280 80d6 	bge.w	800d7e2 <__kernel_rem_pio2+0x472>
 800d636:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800d688 <__kernel_rem_pio2+0x318>
 800d63a:	462e      	mov	r6, r5
 800d63c:	2e00      	cmp	r6, #0
 800d63e:	f2c0 8104 	blt.w	800d84a <__kernel_rem_pio2+0x4da>
 800d642:	ab72      	add	r3, sp, #456	; 0x1c8
 800d644:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d648:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d6b0 <__kernel_rem_pio2+0x340>
 800d64c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d650:	f04f 0800 	mov.w	r8, #0
 800d654:	1baf      	subs	r7, r5, r6
 800d656:	e0ea      	b.n	800d82e <__kernel_rem_pio2+0x4be>
 800d658:	f04f 0b02 	mov.w	fp, #2
 800d65c:	e759      	b.n	800d512 <__kernel_rem_pio2+0x1a2>
 800d65e:	f8d8 3000 	ldr.w	r3, [r8]
 800d662:	b955      	cbnz	r5, 800d67a <__kernel_rem_pio2+0x30a>
 800d664:	b123      	cbz	r3, 800d670 <__kernel_rem_pio2+0x300>
 800d666:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d66a:	f8c8 3000 	str.w	r3, [r8]
 800d66e:	2301      	movs	r3, #1
 800d670:	3201      	adds	r2, #1
 800d672:	f108 0804 	add.w	r8, r8, #4
 800d676:	461d      	mov	r5, r3
 800d678:	e752      	b.n	800d520 <__kernel_rem_pio2+0x1b0>
 800d67a:	1acb      	subs	r3, r1, r3
 800d67c:	f8c8 3000 	str.w	r3, [r8]
 800d680:	462b      	mov	r3, r5
 800d682:	e7f5      	b.n	800d670 <__kernel_rem_pio2+0x300>
 800d684:	f3af 8000 	nop.w
	...
 800d694:	3ff00000 	.word	0x3ff00000
 800d698:	0800e490 	.word	0x0800e490
 800d69c:	40200000 	.word	0x40200000
 800d6a0:	3ff00000 	.word	0x3ff00000
 800d6a4:	3e700000 	.word	0x3e700000
 800d6a8:	41700000 	.word	0x41700000
 800d6ac:	3fe00000 	.word	0x3fe00000
 800d6b0:	0800e450 	.word	0x0800e450
 800d6b4:	1e62      	subs	r2, r4, #1
 800d6b6:	ab0e      	add	r3, sp, #56	; 0x38
 800d6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d6c0:	a90e      	add	r1, sp, #56	; 0x38
 800d6c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d6c6:	e739      	b.n	800d53c <__kernel_rem_pio2+0x1cc>
 800d6c8:	1e62      	subs	r2, r4, #1
 800d6ca:	ab0e      	add	r3, sp, #56	; 0x38
 800d6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d6d4:	e7f4      	b.n	800d6c0 <__kernel_rem_pio2+0x350>
 800d6d6:	a90e      	add	r1, sp, #56	; 0x38
 800d6d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	430a      	orrs	r2, r1
 800d6e0:	e789      	b.n	800d5f6 <__kernel_rem_pio2+0x286>
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d6e8:	2900      	cmp	r1, #0
 800d6ea:	d0fa      	beq.n	800d6e2 <__kernel_rem_pio2+0x372>
 800d6ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6ee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d6f2:	446a      	add	r2, sp
 800d6f4:	3a98      	subs	r2, #152	; 0x98
 800d6f6:	920a      	str	r2, [sp, #40]	; 0x28
 800d6f8:	9a08      	ldr	r2, [sp, #32]
 800d6fa:	18e3      	adds	r3, r4, r3
 800d6fc:	18a5      	adds	r5, r4, r2
 800d6fe:	aa22      	add	r2, sp, #136	; 0x88
 800d700:	f104 0801 	add.w	r8, r4, #1
 800d704:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d708:	9304      	str	r3, [sp, #16]
 800d70a:	9b04      	ldr	r3, [sp, #16]
 800d70c:	4543      	cmp	r3, r8
 800d70e:	da04      	bge.n	800d71a <__kernel_rem_pio2+0x3aa>
 800d710:	461c      	mov	r4, r3
 800d712:	e6a3      	b.n	800d45c <__kernel_rem_pio2+0xec>
 800d714:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d716:	2301      	movs	r3, #1
 800d718:	e7e4      	b.n	800d6e4 <__kernel_rem_pio2+0x374>
 800d71a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d71c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d720:	f7f2 ff00 	bl	8000524 <__aeabi_i2d>
 800d724:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d72a:	46ab      	mov	fp, r5
 800d72c:	461c      	mov	r4, r3
 800d72e:	f04f 0900 	mov.w	r9, #0
 800d732:	2600      	movs	r6, #0
 800d734:	2700      	movs	r7, #0
 800d736:	9b06      	ldr	r3, [sp, #24]
 800d738:	4599      	cmp	r9, r3
 800d73a:	dd06      	ble.n	800d74a <__kernel_rem_pio2+0x3da>
 800d73c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d73e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d742:	f108 0801 	add.w	r8, r8, #1
 800d746:	930a      	str	r3, [sp, #40]	; 0x28
 800d748:	e7df      	b.n	800d70a <__kernel_rem_pio2+0x39a>
 800d74a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d74e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d752:	f7f2 ff51 	bl	80005f8 <__aeabi_dmul>
 800d756:	4602      	mov	r2, r0
 800d758:	460b      	mov	r3, r1
 800d75a:	4630      	mov	r0, r6
 800d75c:	4639      	mov	r1, r7
 800d75e:	f7f2 fd95 	bl	800028c <__adddf3>
 800d762:	f109 0901 	add.w	r9, r9, #1
 800d766:	4606      	mov	r6, r0
 800d768:	460f      	mov	r7, r1
 800d76a:	e7e4      	b.n	800d736 <__kernel_rem_pio2+0x3c6>
 800d76c:	3d01      	subs	r5, #1
 800d76e:	e748      	b.n	800d602 <__kernel_rem_pio2+0x292>
 800d770:	ec47 6b10 	vmov	d0, r6, r7
 800d774:	f1ca 0000 	rsb	r0, sl, #0
 800d778:	f000 fa92 	bl	800dca0 <scalbn>
 800d77c:	ec57 6b10 	vmov	r6, r7, d0
 800d780:	4ba0      	ldr	r3, [pc, #640]	; (800da04 <__kernel_rem_pio2+0x694>)
 800d782:	ee10 0a10 	vmov	r0, s0
 800d786:	2200      	movs	r2, #0
 800d788:	4639      	mov	r1, r7
 800d78a:	f7f3 f9bb 	bl	8000b04 <__aeabi_dcmpge>
 800d78e:	b1f8      	cbz	r0, 800d7d0 <__kernel_rem_pio2+0x460>
 800d790:	4b9d      	ldr	r3, [pc, #628]	; (800da08 <__kernel_rem_pio2+0x698>)
 800d792:	2200      	movs	r2, #0
 800d794:	4630      	mov	r0, r6
 800d796:	4639      	mov	r1, r7
 800d798:	f7f2 ff2e 	bl	80005f8 <__aeabi_dmul>
 800d79c:	f7f3 f9dc 	bl	8000b58 <__aeabi_d2iz>
 800d7a0:	4680      	mov	r8, r0
 800d7a2:	f7f2 febf 	bl	8000524 <__aeabi_i2d>
 800d7a6:	4b97      	ldr	r3, [pc, #604]	; (800da04 <__kernel_rem_pio2+0x694>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f7f2 ff25 	bl	80005f8 <__aeabi_dmul>
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	4639      	mov	r1, r7
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	f7f2 fd67 	bl	8000288 <__aeabi_dsub>
 800d7ba:	f7f3 f9cd 	bl	8000b58 <__aeabi_d2iz>
 800d7be:	1c65      	adds	r5, r4, #1
 800d7c0:	ab0e      	add	r3, sp, #56	; 0x38
 800d7c2:	f10a 0a18 	add.w	sl, sl, #24
 800d7c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d7ca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d7ce:	e720      	b.n	800d612 <__kernel_rem_pio2+0x2a2>
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	4639      	mov	r1, r7
 800d7d4:	f7f3 f9c0 	bl	8000b58 <__aeabi_d2iz>
 800d7d8:	ab0e      	add	r3, sp, #56	; 0x38
 800d7da:	4625      	mov	r5, r4
 800d7dc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d7e0:	e717      	b.n	800d612 <__kernel_rem_pio2+0x2a2>
 800d7e2:	ab0e      	add	r3, sp, #56	; 0x38
 800d7e4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d7e8:	f7f2 fe9c 	bl	8000524 <__aeabi_i2d>
 800d7ec:	4632      	mov	r2, r6
 800d7ee:	463b      	mov	r3, r7
 800d7f0:	f7f2 ff02 	bl	80005f8 <__aeabi_dmul>
 800d7f4:	4b84      	ldr	r3, [pc, #528]	; (800da08 <__kernel_rem_pio2+0x698>)
 800d7f6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	4639      	mov	r1, r7
 800d800:	f7f2 fefa 	bl	80005f8 <__aeabi_dmul>
 800d804:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d808:	4606      	mov	r6, r0
 800d80a:	460f      	mov	r7, r1
 800d80c:	e70f      	b.n	800d62e <__kernel_rem_pio2+0x2be>
 800d80e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d812:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d816:	f7f2 feef 	bl	80005f8 <__aeabi_dmul>
 800d81a:	4602      	mov	r2, r0
 800d81c:	460b      	mov	r3, r1
 800d81e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d822:	f7f2 fd33 	bl	800028c <__adddf3>
 800d826:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d82a:	f108 0801 	add.w	r8, r8, #1
 800d82e:	9b02      	ldr	r3, [sp, #8]
 800d830:	4598      	cmp	r8, r3
 800d832:	dc01      	bgt.n	800d838 <__kernel_rem_pio2+0x4c8>
 800d834:	45b8      	cmp	r8, r7
 800d836:	ddea      	ble.n	800d80e <__kernel_rem_pio2+0x49e>
 800d838:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d83c:	ab4a      	add	r3, sp, #296	; 0x128
 800d83e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d842:	ed87 7b00 	vstr	d7, [r7]
 800d846:	3e01      	subs	r6, #1
 800d848:	e6f8      	b.n	800d63c <__kernel_rem_pio2+0x2cc>
 800d84a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	dc0b      	bgt.n	800d868 <__kernel_rem_pio2+0x4f8>
 800d850:	2b00      	cmp	r3, #0
 800d852:	dc35      	bgt.n	800d8c0 <__kernel_rem_pio2+0x550>
 800d854:	d059      	beq.n	800d90a <__kernel_rem_pio2+0x59a>
 800d856:	9b04      	ldr	r3, [sp, #16]
 800d858:	f003 0007 	and.w	r0, r3, #7
 800d85c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d860:	ecbd 8b02 	vpop	{d8}
 800d864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d868:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	d1f3      	bne.n	800d856 <__kernel_rem_pio2+0x4e6>
 800d86e:	ab4a      	add	r3, sp, #296	; 0x128
 800d870:	4423      	add	r3, r4
 800d872:	9306      	str	r3, [sp, #24]
 800d874:	461c      	mov	r4, r3
 800d876:	469a      	mov	sl, r3
 800d878:	9502      	str	r5, [sp, #8]
 800d87a:	9b02      	ldr	r3, [sp, #8]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	f1aa 0a08 	sub.w	sl, sl, #8
 800d882:	dc6b      	bgt.n	800d95c <__kernel_rem_pio2+0x5ec>
 800d884:	46aa      	mov	sl, r5
 800d886:	f1ba 0f01 	cmp.w	sl, #1
 800d88a:	f1a4 0408 	sub.w	r4, r4, #8
 800d88e:	f300 8085 	bgt.w	800d99c <__kernel_rem_pio2+0x62c>
 800d892:	9c06      	ldr	r4, [sp, #24]
 800d894:	2000      	movs	r0, #0
 800d896:	3408      	adds	r4, #8
 800d898:	2100      	movs	r1, #0
 800d89a:	2d01      	cmp	r5, #1
 800d89c:	f300 809d 	bgt.w	800d9da <__kernel_rem_pio2+0x66a>
 800d8a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d8a4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800d8a8:	f1bb 0f00 	cmp.w	fp, #0
 800d8ac:	f040 809b 	bne.w	800d9e6 <__kernel_rem_pio2+0x676>
 800d8b0:	9b01      	ldr	r3, [sp, #4]
 800d8b2:	e9c3 5600 	strd	r5, r6, [r3]
 800d8b6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d8ba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d8be:	e7ca      	b.n	800d856 <__kernel_rem_pio2+0x4e6>
 800d8c0:	3408      	adds	r4, #8
 800d8c2:	ab4a      	add	r3, sp, #296	; 0x128
 800d8c4:	441c      	add	r4, r3
 800d8c6:	462e      	mov	r6, r5
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	2100      	movs	r1, #0
 800d8cc:	2e00      	cmp	r6, #0
 800d8ce:	da36      	bge.n	800d93e <__kernel_rem_pio2+0x5ce>
 800d8d0:	f1bb 0f00 	cmp.w	fp, #0
 800d8d4:	d039      	beq.n	800d94a <__kernel_rem_pio2+0x5da>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8dc:	9c01      	ldr	r4, [sp, #4]
 800d8de:	e9c4 2300 	strd	r2, r3, [r4]
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d8ea:	f7f2 fccd 	bl	8000288 <__aeabi_dsub>
 800d8ee:	ae4c      	add	r6, sp, #304	; 0x130
 800d8f0:	2401      	movs	r4, #1
 800d8f2:	42a5      	cmp	r5, r4
 800d8f4:	da2c      	bge.n	800d950 <__kernel_rem_pio2+0x5e0>
 800d8f6:	f1bb 0f00 	cmp.w	fp, #0
 800d8fa:	d002      	beq.n	800d902 <__kernel_rem_pio2+0x592>
 800d8fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d900:	4619      	mov	r1, r3
 800d902:	9b01      	ldr	r3, [sp, #4]
 800d904:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d908:	e7a5      	b.n	800d856 <__kernel_rem_pio2+0x4e6>
 800d90a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800d90e:	eb0d 0403 	add.w	r4, sp, r3
 800d912:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d916:	2000      	movs	r0, #0
 800d918:	2100      	movs	r1, #0
 800d91a:	2d00      	cmp	r5, #0
 800d91c:	da09      	bge.n	800d932 <__kernel_rem_pio2+0x5c2>
 800d91e:	f1bb 0f00 	cmp.w	fp, #0
 800d922:	d002      	beq.n	800d92a <__kernel_rem_pio2+0x5ba>
 800d924:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d928:	4619      	mov	r1, r3
 800d92a:	9b01      	ldr	r3, [sp, #4]
 800d92c:	e9c3 0100 	strd	r0, r1, [r3]
 800d930:	e791      	b.n	800d856 <__kernel_rem_pio2+0x4e6>
 800d932:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d936:	f7f2 fca9 	bl	800028c <__adddf3>
 800d93a:	3d01      	subs	r5, #1
 800d93c:	e7ed      	b.n	800d91a <__kernel_rem_pio2+0x5aa>
 800d93e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d942:	f7f2 fca3 	bl	800028c <__adddf3>
 800d946:	3e01      	subs	r6, #1
 800d948:	e7c0      	b.n	800d8cc <__kernel_rem_pio2+0x55c>
 800d94a:	4602      	mov	r2, r0
 800d94c:	460b      	mov	r3, r1
 800d94e:	e7c5      	b.n	800d8dc <__kernel_rem_pio2+0x56c>
 800d950:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d954:	f7f2 fc9a 	bl	800028c <__adddf3>
 800d958:	3401      	adds	r4, #1
 800d95a:	e7ca      	b.n	800d8f2 <__kernel_rem_pio2+0x582>
 800d95c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d960:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d964:	9b02      	ldr	r3, [sp, #8]
 800d966:	3b01      	subs	r3, #1
 800d968:	9302      	str	r3, [sp, #8]
 800d96a:	4632      	mov	r2, r6
 800d96c:	463b      	mov	r3, r7
 800d96e:	4640      	mov	r0, r8
 800d970:	4649      	mov	r1, r9
 800d972:	f7f2 fc8b 	bl	800028c <__adddf3>
 800d976:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d97a:	4602      	mov	r2, r0
 800d97c:	460b      	mov	r3, r1
 800d97e:	4640      	mov	r0, r8
 800d980:	4649      	mov	r1, r9
 800d982:	f7f2 fc81 	bl	8000288 <__aeabi_dsub>
 800d986:	4632      	mov	r2, r6
 800d988:	463b      	mov	r3, r7
 800d98a:	f7f2 fc7f 	bl	800028c <__adddf3>
 800d98e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d992:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d996:	ed8a 7b00 	vstr	d7, [sl]
 800d99a:	e76e      	b.n	800d87a <__kernel_rem_pio2+0x50a>
 800d99c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d9a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d9a4:	4640      	mov	r0, r8
 800d9a6:	4632      	mov	r2, r6
 800d9a8:	463b      	mov	r3, r7
 800d9aa:	4649      	mov	r1, r9
 800d9ac:	f7f2 fc6e 	bl	800028c <__adddf3>
 800d9b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	4640      	mov	r0, r8
 800d9ba:	4649      	mov	r1, r9
 800d9bc:	f7f2 fc64 	bl	8000288 <__aeabi_dsub>
 800d9c0:	4632      	mov	r2, r6
 800d9c2:	463b      	mov	r3, r7
 800d9c4:	f7f2 fc62 	bl	800028c <__adddf3>
 800d9c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d9cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d9d0:	ed84 7b00 	vstr	d7, [r4]
 800d9d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d9d8:	e755      	b.n	800d886 <__kernel_rem_pio2+0x516>
 800d9da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d9de:	f7f2 fc55 	bl	800028c <__adddf3>
 800d9e2:	3d01      	subs	r5, #1
 800d9e4:	e759      	b.n	800d89a <__kernel_rem_pio2+0x52a>
 800d9e6:	9b01      	ldr	r3, [sp, #4]
 800d9e8:	9a01      	ldr	r2, [sp, #4]
 800d9ea:	601d      	str	r5, [r3, #0]
 800d9ec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d9f0:	605c      	str	r4, [r3, #4]
 800d9f2:	609f      	str	r7, [r3, #8]
 800d9f4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d9f8:	60d3      	str	r3, [r2, #12]
 800d9fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9fe:	6110      	str	r0, [r2, #16]
 800da00:	6153      	str	r3, [r2, #20]
 800da02:	e728      	b.n	800d856 <__kernel_rem_pio2+0x4e6>
 800da04:	41700000 	.word	0x41700000
 800da08:	3e700000 	.word	0x3e700000
 800da0c:	00000000 	.word	0x00000000

0800da10 <__kernel_sin>:
 800da10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da14:	ed2d 8b04 	vpush	{d8-d9}
 800da18:	eeb0 8a41 	vmov.f32	s16, s2
 800da1c:	eef0 8a61 	vmov.f32	s17, s3
 800da20:	ec55 4b10 	vmov	r4, r5, d0
 800da24:	b083      	sub	sp, #12
 800da26:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800da2a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800da2e:	9001      	str	r0, [sp, #4]
 800da30:	da06      	bge.n	800da40 <__kernel_sin+0x30>
 800da32:	ee10 0a10 	vmov	r0, s0
 800da36:	4629      	mov	r1, r5
 800da38:	f7f3 f88e 	bl	8000b58 <__aeabi_d2iz>
 800da3c:	2800      	cmp	r0, #0
 800da3e:	d051      	beq.n	800dae4 <__kernel_sin+0xd4>
 800da40:	4622      	mov	r2, r4
 800da42:	462b      	mov	r3, r5
 800da44:	4620      	mov	r0, r4
 800da46:	4629      	mov	r1, r5
 800da48:	f7f2 fdd6 	bl	80005f8 <__aeabi_dmul>
 800da4c:	4682      	mov	sl, r0
 800da4e:	468b      	mov	fp, r1
 800da50:	4602      	mov	r2, r0
 800da52:	460b      	mov	r3, r1
 800da54:	4620      	mov	r0, r4
 800da56:	4629      	mov	r1, r5
 800da58:	f7f2 fdce 	bl	80005f8 <__aeabi_dmul>
 800da5c:	a341      	add	r3, pc, #260	; (adr r3, 800db64 <__kernel_sin+0x154>)
 800da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da62:	4680      	mov	r8, r0
 800da64:	4689      	mov	r9, r1
 800da66:	4650      	mov	r0, sl
 800da68:	4659      	mov	r1, fp
 800da6a:	f7f2 fdc5 	bl	80005f8 <__aeabi_dmul>
 800da6e:	a33f      	add	r3, pc, #252	; (adr r3, 800db6c <__kernel_sin+0x15c>)
 800da70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da74:	f7f2 fc08 	bl	8000288 <__aeabi_dsub>
 800da78:	4652      	mov	r2, sl
 800da7a:	465b      	mov	r3, fp
 800da7c:	f7f2 fdbc 	bl	80005f8 <__aeabi_dmul>
 800da80:	a33c      	add	r3, pc, #240	; (adr r3, 800db74 <__kernel_sin+0x164>)
 800da82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da86:	f7f2 fc01 	bl	800028c <__adddf3>
 800da8a:	4652      	mov	r2, sl
 800da8c:	465b      	mov	r3, fp
 800da8e:	f7f2 fdb3 	bl	80005f8 <__aeabi_dmul>
 800da92:	a33a      	add	r3, pc, #232	; (adr r3, 800db7c <__kernel_sin+0x16c>)
 800da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da98:	f7f2 fbf6 	bl	8000288 <__aeabi_dsub>
 800da9c:	4652      	mov	r2, sl
 800da9e:	465b      	mov	r3, fp
 800daa0:	f7f2 fdaa 	bl	80005f8 <__aeabi_dmul>
 800daa4:	a337      	add	r3, pc, #220	; (adr r3, 800db84 <__kernel_sin+0x174>)
 800daa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daaa:	f7f2 fbef 	bl	800028c <__adddf3>
 800daae:	9b01      	ldr	r3, [sp, #4]
 800dab0:	4606      	mov	r6, r0
 800dab2:	460f      	mov	r7, r1
 800dab4:	b9eb      	cbnz	r3, 800daf2 <__kernel_sin+0xe2>
 800dab6:	4602      	mov	r2, r0
 800dab8:	460b      	mov	r3, r1
 800daba:	4650      	mov	r0, sl
 800dabc:	4659      	mov	r1, fp
 800dabe:	f7f2 fd9b 	bl	80005f8 <__aeabi_dmul>
 800dac2:	a325      	add	r3, pc, #148	; (adr r3, 800db58 <__kernel_sin+0x148>)
 800dac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac8:	f7f2 fbde 	bl	8000288 <__aeabi_dsub>
 800dacc:	4642      	mov	r2, r8
 800dace:	464b      	mov	r3, r9
 800dad0:	f7f2 fd92 	bl	80005f8 <__aeabi_dmul>
 800dad4:	4602      	mov	r2, r0
 800dad6:	460b      	mov	r3, r1
 800dad8:	4620      	mov	r0, r4
 800dada:	4629      	mov	r1, r5
 800dadc:	f7f2 fbd6 	bl	800028c <__adddf3>
 800dae0:	4604      	mov	r4, r0
 800dae2:	460d      	mov	r5, r1
 800dae4:	ec45 4b10 	vmov	d0, r4, r5
 800dae8:	b003      	add	sp, #12
 800daea:	ecbd 8b04 	vpop	{d8-d9}
 800daee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf2:	4b1b      	ldr	r3, [pc, #108]	; (800db60 <__kernel_sin+0x150>)
 800daf4:	ec51 0b18 	vmov	r0, r1, d8
 800daf8:	2200      	movs	r2, #0
 800dafa:	f7f2 fd7d 	bl	80005f8 <__aeabi_dmul>
 800dafe:	4632      	mov	r2, r6
 800db00:	ec41 0b19 	vmov	d9, r0, r1
 800db04:	463b      	mov	r3, r7
 800db06:	4640      	mov	r0, r8
 800db08:	4649      	mov	r1, r9
 800db0a:	f7f2 fd75 	bl	80005f8 <__aeabi_dmul>
 800db0e:	4602      	mov	r2, r0
 800db10:	460b      	mov	r3, r1
 800db12:	ec51 0b19 	vmov	r0, r1, d9
 800db16:	f7f2 fbb7 	bl	8000288 <__aeabi_dsub>
 800db1a:	4652      	mov	r2, sl
 800db1c:	465b      	mov	r3, fp
 800db1e:	f7f2 fd6b 	bl	80005f8 <__aeabi_dmul>
 800db22:	ec53 2b18 	vmov	r2, r3, d8
 800db26:	f7f2 fbaf 	bl	8000288 <__aeabi_dsub>
 800db2a:	a30b      	add	r3, pc, #44	; (adr r3, 800db58 <__kernel_sin+0x148>)
 800db2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db30:	4606      	mov	r6, r0
 800db32:	460f      	mov	r7, r1
 800db34:	4640      	mov	r0, r8
 800db36:	4649      	mov	r1, r9
 800db38:	f7f2 fd5e 	bl	80005f8 <__aeabi_dmul>
 800db3c:	4602      	mov	r2, r0
 800db3e:	460b      	mov	r3, r1
 800db40:	4630      	mov	r0, r6
 800db42:	4639      	mov	r1, r7
 800db44:	f7f2 fba2 	bl	800028c <__adddf3>
 800db48:	4602      	mov	r2, r0
 800db4a:	460b      	mov	r3, r1
 800db4c:	4620      	mov	r0, r4
 800db4e:	4629      	mov	r1, r5
 800db50:	f7f2 fb9a 	bl	8000288 <__aeabi_dsub>
 800db54:	e7c4      	b.n	800dae0 <__kernel_sin+0xd0>
 800db56:	bf00      	nop
 800db58:	55555549 	.word	0x55555549
 800db5c:	3fc55555 	.word	0x3fc55555
 800db60:	3fe00000 	.word	0x3fe00000
 800db64:	5acfd57c 	.word	0x5acfd57c
 800db68:	3de5d93a 	.word	0x3de5d93a
 800db6c:	8a2b9ceb 	.word	0x8a2b9ceb
 800db70:	3e5ae5e6 	.word	0x3e5ae5e6
 800db74:	57b1fe7d 	.word	0x57b1fe7d
 800db78:	3ec71de3 	.word	0x3ec71de3
 800db7c:	19c161d5 	.word	0x19c161d5
 800db80:	3f2a01a0 	.word	0x3f2a01a0
 800db84:	1110f8a6 	.word	0x1110f8a6
 800db88:	3f811111 	.word	0x3f811111

0800db8c <fabs>:
 800db8c:	ec51 0b10 	vmov	r0, r1, d0
 800db90:	ee10 2a10 	vmov	r2, s0
 800db94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db98:	ec43 2b10 	vmov	d0, r2, r3
 800db9c:	4770      	bx	lr
	...

0800dba0 <floor>:
 800dba0:	ec51 0b10 	vmov	r0, r1, d0
 800dba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800dbac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800dbb0:	2e13      	cmp	r6, #19
 800dbb2:	ee10 5a10 	vmov	r5, s0
 800dbb6:	ee10 8a10 	vmov	r8, s0
 800dbba:	460c      	mov	r4, r1
 800dbbc:	dc32      	bgt.n	800dc24 <floor+0x84>
 800dbbe:	2e00      	cmp	r6, #0
 800dbc0:	da14      	bge.n	800dbec <floor+0x4c>
 800dbc2:	a333      	add	r3, pc, #204	; (adr r3, 800dc90 <floor+0xf0>)
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	f7f2 fb60 	bl	800028c <__adddf3>
 800dbcc:	2200      	movs	r2, #0
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f7f2 ffa2 	bl	8000b18 <__aeabi_dcmpgt>
 800dbd4:	b138      	cbz	r0, 800dbe6 <floor+0x46>
 800dbd6:	2c00      	cmp	r4, #0
 800dbd8:	da57      	bge.n	800dc8a <floor+0xea>
 800dbda:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dbde:	431d      	orrs	r5, r3
 800dbe0:	d001      	beq.n	800dbe6 <floor+0x46>
 800dbe2:	4c2d      	ldr	r4, [pc, #180]	; (800dc98 <floor+0xf8>)
 800dbe4:	2500      	movs	r5, #0
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	4628      	mov	r0, r5
 800dbea:	e025      	b.n	800dc38 <floor+0x98>
 800dbec:	4f2b      	ldr	r7, [pc, #172]	; (800dc9c <floor+0xfc>)
 800dbee:	4137      	asrs	r7, r6
 800dbf0:	ea01 0307 	and.w	r3, r1, r7
 800dbf4:	4303      	orrs	r3, r0
 800dbf6:	d01f      	beq.n	800dc38 <floor+0x98>
 800dbf8:	a325      	add	r3, pc, #148	; (adr r3, 800dc90 <floor+0xf0>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	f7f2 fb45 	bl	800028c <__adddf3>
 800dc02:	2200      	movs	r2, #0
 800dc04:	2300      	movs	r3, #0
 800dc06:	f7f2 ff87 	bl	8000b18 <__aeabi_dcmpgt>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d0eb      	beq.n	800dbe6 <floor+0x46>
 800dc0e:	2c00      	cmp	r4, #0
 800dc10:	bfbe      	ittt	lt
 800dc12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dc16:	fa43 f606 	asrlt.w	r6, r3, r6
 800dc1a:	19a4      	addlt	r4, r4, r6
 800dc1c:	ea24 0407 	bic.w	r4, r4, r7
 800dc20:	2500      	movs	r5, #0
 800dc22:	e7e0      	b.n	800dbe6 <floor+0x46>
 800dc24:	2e33      	cmp	r6, #51	; 0x33
 800dc26:	dd0b      	ble.n	800dc40 <floor+0xa0>
 800dc28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dc2c:	d104      	bne.n	800dc38 <floor+0x98>
 800dc2e:	ee10 2a10 	vmov	r2, s0
 800dc32:	460b      	mov	r3, r1
 800dc34:	f7f2 fb2a 	bl	800028c <__adddf3>
 800dc38:	ec41 0b10 	vmov	d0, r0, r1
 800dc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc40:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800dc44:	f04f 33ff 	mov.w	r3, #4294967295
 800dc48:	fa23 f707 	lsr.w	r7, r3, r7
 800dc4c:	4207      	tst	r7, r0
 800dc4e:	d0f3      	beq.n	800dc38 <floor+0x98>
 800dc50:	a30f      	add	r3, pc, #60	; (adr r3, 800dc90 <floor+0xf0>)
 800dc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc56:	f7f2 fb19 	bl	800028c <__adddf3>
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	f7f2 ff5b 	bl	8000b18 <__aeabi_dcmpgt>
 800dc62:	2800      	cmp	r0, #0
 800dc64:	d0bf      	beq.n	800dbe6 <floor+0x46>
 800dc66:	2c00      	cmp	r4, #0
 800dc68:	da02      	bge.n	800dc70 <floor+0xd0>
 800dc6a:	2e14      	cmp	r6, #20
 800dc6c:	d103      	bne.n	800dc76 <floor+0xd6>
 800dc6e:	3401      	adds	r4, #1
 800dc70:	ea25 0507 	bic.w	r5, r5, r7
 800dc74:	e7b7      	b.n	800dbe6 <floor+0x46>
 800dc76:	2301      	movs	r3, #1
 800dc78:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dc7c:	fa03 f606 	lsl.w	r6, r3, r6
 800dc80:	4435      	add	r5, r6
 800dc82:	4545      	cmp	r5, r8
 800dc84:	bf38      	it	cc
 800dc86:	18e4      	addcc	r4, r4, r3
 800dc88:	e7f2      	b.n	800dc70 <floor+0xd0>
 800dc8a:	2500      	movs	r5, #0
 800dc8c:	462c      	mov	r4, r5
 800dc8e:	e7aa      	b.n	800dbe6 <floor+0x46>
 800dc90:	8800759c 	.word	0x8800759c
 800dc94:	7e37e43c 	.word	0x7e37e43c
 800dc98:	bff00000 	.word	0xbff00000
 800dc9c:	000fffff 	.word	0x000fffff

0800dca0 <scalbn>:
 800dca0:	b570      	push	{r4, r5, r6, lr}
 800dca2:	ec55 4b10 	vmov	r4, r5, d0
 800dca6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dcaa:	4606      	mov	r6, r0
 800dcac:	462b      	mov	r3, r5
 800dcae:	b99a      	cbnz	r2, 800dcd8 <scalbn+0x38>
 800dcb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dcb4:	4323      	orrs	r3, r4
 800dcb6:	d036      	beq.n	800dd26 <scalbn+0x86>
 800dcb8:	4b39      	ldr	r3, [pc, #228]	; (800dda0 <scalbn+0x100>)
 800dcba:	4629      	mov	r1, r5
 800dcbc:	ee10 0a10 	vmov	r0, s0
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f7f2 fc99 	bl	80005f8 <__aeabi_dmul>
 800dcc6:	4b37      	ldr	r3, [pc, #220]	; (800dda4 <scalbn+0x104>)
 800dcc8:	429e      	cmp	r6, r3
 800dcca:	4604      	mov	r4, r0
 800dccc:	460d      	mov	r5, r1
 800dcce:	da10      	bge.n	800dcf2 <scalbn+0x52>
 800dcd0:	a32b      	add	r3, pc, #172	; (adr r3, 800dd80 <scalbn+0xe0>)
 800dcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd6:	e03a      	b.n	800dd4e <scalbn+0xae>
 800dcd8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dcdc:	428a      	cmp	r2, r1
 800dcde:	d10c      	bne.n	800dcfa <scalbn+0x5a>
 800dce0:	ee10 2a10 	vmov	r2, s0
 800dce4:	4620      	mov	r0, r4
 800dce6:	4629      	mov	r1, r5
 800dce8:	f7f2 fad0 	bl	800028c <__adddf3>
 800dcec:	4604      	mov	r4, r0
 800dcee:	460d      	mov	r5, r1
 800dcf0:	e019      	b.n	800dd26 <scalbn+0x86>
 800dcf2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	3a36      	subs	r2, #54	; 0x36
 800dcfa:	4432      	add	r2, r6
 800dcfc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dd00:	428a      	cmp	r2, r1
 800dd02:	dd08      	ble.n	800dd16 <scalbn+0x76>
 800dd04:	2d00      	cmp	r5, #0
 800dd06:	a120      	add	r1, pc, #128	; (adr r1, 800dd88 <scalbn+0xe8>)
 800dd08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd0c:	da1c      	bge.n	800dd48 <scalbn+0xa8>
 800dd0e:	a120      	add	r1, pc, #128	; (adr r1, 800dd90 <scalbn+0xf0>)
 800dd10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd14:	e018      	b.n	800dd48 <scalbn+0xa8>
 800dd16:	2a00      	cmp	r2, #0
 800dd18:	dd08      	ble.n	800dd2c <scalbn+0x8c>
 800dd1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dd1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dd22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dd26:	ec45 4b10 	vmov	d0, r4, r5
 800dd2a:	bd70      	pop	{r4, r5, r6, pc}
 800dd2c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dd30:	da19      	bge.n	800dd66 <scalbn+0xc6>
 800dd32:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dd36:	429e      	cmp	r6, r3
 800dd38:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800dd3c:	dd0a      	ble.n	800dd54 <scalbn+0xb4>
 800dd3e:	a112      	add	r1, pc, #72	; (adr r1, 800dd88 <scalbn+0xe8>)
 800dd40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d1e2      	bne.n	800dd0e <scalbn+0x6e>
 800dd48:	a30f      	add	r3, pc, #60	; (adr r3, 800dd88 <scalbn+0xe8>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	f7f2 fc53 	bl	80005f8 <__aeabi_dmul>
 800dd52:	e7cb      	b.n	800dcec <scalbn+0x4c>
 800dd54:	a10a      	add	r1, pc, #40	; (adr r1, 800dd80 <scalbn+0xe0>)
 800dd56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d0b8      	beq.n	800dcd0 <scalbn+0x30>
 800dd5e:	a10e      	add	r1, pc, #56	; (adr r1, 800dd98 <scalbn+0xf8>)
 800dd60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd64:	e7b4      	b.n	800dcd0 <scalbn+0x30>
 800dd66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dd6a:	3236      	adds	r2, #54	; 0x36
 800dd6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dd70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dd74:	4620      	mov	r0, r4
 800dd76:	4b0c      	ldr	r3, [pc, #48]	; (800dda8 <scalbn+0x108>)
 800dd78:	2200      	movs	r2, #0
 800dd7a:	e7e8      	b.n	800dd4e <scalbn+0xae>
 800dd7c:	f3af 8000 	nop.w
 800dd80:	c2f8f359 	.word	0xc2f8f359
 800dd84:	01a56e1f 	.word	0x01a56e1f
 800dd88:	8800759c 	.word	0x8800759c
 800dd8c:	7e37e43c 	.word	0x7e37e43c
 800dd90:	8800759c 	.word	0x8800759c
 800dd94:	fe37e43c 	.word	0xfe37e43c
 800dd98:	c2f8f359 	.word	0xc2f8f359
 800dd9c:	81a56e1f 	.word	0x81a56e1f
 800dda0:	43500000 	.word	0x43500000
 800dda4:	ffff3cb0 	.word	0xffff3cb0
 800dda8:	3c900000 	.word	0x3c900000

0800ddac <_init>:
 800ddac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddae:	bf00      	nop
 800ddb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddb2:	bc08      	pop	{r3}
 800ddb4:	469e      	mov	lr, r3
 800ddb6:	4770      	bx	lr

0800ddb8 <_fini>:
 800ddb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddba:	bf00      	nop
 800ddbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddbe:	bc08      	pop	{r3}
 800ddc0:	469e      	mov	lr, r3
 800ddc2:	4770      	bx	lr
