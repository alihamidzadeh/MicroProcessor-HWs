
Final-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08008958  08008958  00018958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b84  08008b84  00020174  2**0
                  CONTENTS
  4 .ARM          00000000  08008b84  08008b84  00020174  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b84  08008b84  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b84  08008b84  00018b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b88  08008b88  00018b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08008b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020174  2**0
                  CONTENTS
 10 .bss          00000674  20000174  20000174  00020174  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007e8  200007e8  00020174  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d05a  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000364a  00000000  00000000  0003d1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  00040848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001648  00000000  00000000  00041fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021387  00000000  00000000  00043618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d3f2  00000000  00000000  0006499f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5a62  00000000  00000000  00081d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001477f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f54  00000000  00000000  00147844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000174 	.word	0x20000174
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008940 	.word	0x08008940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000178 	.word	0x20000178
 80001cc:	08008940 	.word	0x08008940

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000192 	.word	0x20000192
 800039c:	20000194 	.word	0x20000194
 80003a0:	20000196 	.word	0x20000196
 80003a4:	200001a8 	.word	0x200001a8
 80003a8:	20000198 	.word	0x20000198
 80003ac:	200001ac 	.word	0x200001ac

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f002 fda1 	bl	8002ff8 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f002 fbf2 	bl	8002ca0 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 ff28 	bl	800331c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 ff20 	bl	800331c <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 ff14 	bl	800331c <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f002 fbca 	bl	8002ca0 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f002 fbc4 	bl	8002ca0 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f002 fbbe 	bl	8002ca0 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f002 fbaf 	bl	8002ca0 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f002 fba4 	bl	8002ca0 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200001ac 	.word	0x200001ac
 80005a8:	200001af 	.word	0x200001af
 80005ac:	20000190 	.word	0x20000190
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000192 	.word	0x20000192
 80005b8:	20000194 	.word	0x20000194
 80005bc:	20000196 	.word	0x20000196
 80005c0:	20000198 	.word	0x20000198
 80005c4:	200001a8 	.word	0x200001a8
 80005c8:	200001ad 	.word	0x200001ad
 80005cc:	200001ae 	.word	0x200001ae

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200001a8 	.word	0x200001a8
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200001b0 	.word	0x200001b0

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f002 faac 	bl	8002ca0 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001af 	.word	0x200001af
 80007ac:	200001b0 	.word	0x200001b0

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001ad 	.word	0x200001ad

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fd1e 	bl	800331c <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fd12 	bl	800331c <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001a8 	.word	0x200001a8
 8000930:	20000192 	.word	0x20000192
 8000934:	20000194 	.word	0x20000194
 8000938:	200001ac 	.word	0x200001ac

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fce6 	bl	800331c <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f002 f9a5 	bl	8002ca0 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fcdb 	bl	800331c <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f002 f99a 	bl	8002ca0 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fcd0 	bl	800331c <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f002 f98f 	bl	8002ca0 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001a8 	.word	0x200001a8
 800098c:	20000196 	.word	0x20000196

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f002 fcad 	bl	800331c <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200001a8 	.word	0x200001a8
 80009e0:	20000198 	.word	0x20000198

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f002 fc83 	bl	800331c <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001a8 	.word	0x200001a8
 8000a34:	20000198 	.word	0x20000198

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f002 f8ca 	bl	8002bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f834 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 fa12 	bl	8000e6c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a48:	f000 f898 	bl	8000b7c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a4c:	f000 f930 	bl	8000cb0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000a50:	f000 f9ea 	bl	8000e28 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8000a54:	f000 f8d2 	bl	8000bfc <MX_RTC_Init>
  MX_TIM4_Init();
 8000a58:	f000 f968 	bl	8000d2c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000a5c:	f000 f9b4 	bl	8000dc8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000a60:	4810      	ldr	r0, [pc, #64]	; (8000aa4 <main+0x6c>)
 8000a62:	f004 fe81 	bl	8005768 <HAL_TIM_Base_Start_IT>
  programInit();
 8000a66:	f000 fe61 	bl	800172c <programInit>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <main+0x70>)
 8000a72:	f002 fc53 	bl	800331c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7c:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <main+0x70>)
 8000a7e:	f002 fc4d 	bl	800331c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a88:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <main+0x70>)
 8000a8a:	f002 fc47 	bl	800331c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <main+0x70>)
 8000a96:	f002 fc41 	bl	800331c <HAL_GPIO_WritePin>
  uart_rx_enable_it();
 8000a9a:	f001 fd53 	bl	8002544 <uart_rx_enable_it>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  programLoop();
 8000a9e:	f001 f9c5 	bl	8001e2c <programLoop>
  {
 8000aa2:	e7fc      	b.n	8000a9e <main+0x66>
 8000aa4:	2000028c 	.word	0x2000028c
 8000aa8:	48000c00 	.word	0x48000c00

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b09e      	sub	sp, #120	; 0x78
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ab6:	2228      	movs	r2, #40	; 0x28
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f006 fd24 	bl	8007508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	223c      	movs	r2, #60	; 0x3c
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f006 fd16 	bl	8007508 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000adc:	230b      	movs	r3, #11
 8000ade:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ae0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ae4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aea:	2301      	movs	r3, #1
 8000aec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aee:	2310      	movs	r3, #16
 8000af0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000af2:	2301      	movs	r3, #1
 8000af4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	2302      	movs	r3, #2
 8000af8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000afe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b00:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b04:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fe48 	bl	80037a0 <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b16:	f000 fab9 	bl	800108c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b34:	2102      	movs	r1, #2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 fe70 	bl	800481c <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b42:	f000 faa3 	bl	800108c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <SystemClock_Config+0xcc>)
 8000b48:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b56:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f004 f892 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b6a:	f000 fa8f 	bl	800108c <Error_Handler>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3778      	adds	r7, #120	; 0x78
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	00030021 	.word	0x00030021

08000b7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000b82:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <MX_I2C1_Init+0x78>)
 8000b84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <MX_I2C1_Init+0x7c>)
 8000b8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb6:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000bb8:	f002 fbfa 	bl	80033b0 <HAL_I2C_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bc2:	f000 fa63 	bl	800108c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000bca:	f002 fc80 	bl	80034ce <HAL_I2CEx_ConfigAnalogFilter>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bd4:	f000 fa5a 	bl	800108c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000bdc:	f002 fcc2 	bl	8003564 <HAL_I2CEx_ConfigDigitalFilter>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000be6:	f000 fa51 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200001b4 	.word	0x200001b4
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	2000090e 	.word	0x2000090e

08000bfc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c10:	2300      	movs	r3, #0
 8000c12:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <MX_RTC_Init+0xac>)
 8000c16:	4a25      	ldr	r2, [pc, #148]	; (8000cac <MX_RTC_Init+0xb0>)
 8000c18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <MX_RTC_Init+0xac>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 8000c20:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_RTC_Init+0xac>)
 8000c22:	2227      	movs	r2, #39	; 0x27
 8000c24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <MX_RTC_Init+0xac>)
 8000c28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c2c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_RTC_Init+0xac>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_RTC_Init+0xac>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_RTC_Init+0xac>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c40:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <MX_RTC_Init+0xac>)
 8000c42:	f004 f9d1 	bl	8004fe8 <HAL_RTC_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000c4c:	f000 fa1e 	bl	800108c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2201      	movs	r2, #1
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <MX_RTC_Init+0xac>)
 8000c6c:	f004 fa3f 	bl	80050ee <HAL_RTC_SetTime>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000c76:	f000 fa09 	bl	800108c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_RTC_Init+0xac>)
 8000c92:	f004 fb24 	bl	80052de <HAL_RTC_SetDate>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000c9c:	f000 f9f6 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000208 	.word	0x20000208
 8000cac:	40002800 	.word	0x40002800

08000cb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <MX_SPI1_Init+0x78>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cca:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000ce6:	2208      	movs	r2, #8
 8000ce8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000cfe:	2207      	movs	r2, #7
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_SPI1_Init+0x74>)
 8000d10:	f004 fc28 	bl	8005564 <HAL_SPI_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d1a:	f000 f9b7 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000228 	.word	0x20000228
 8000d28:	40013000 	.word	0x40013000

08000d2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <MX_TIM4_Init+0x94>)
 8000d4c:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <MX_TIM4_Init+0x98>)
 8000d4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48-1;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_TIM4_Init+0x94>)
 8000d52:	222f      	movs	r2, #47	; 0x2f
 8000d54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_TIM4_Init+0x94>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_TIM4_Init+0x94>)
 8000d5e:	2209      	movs	r2, #9
 8000d60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_TIM4_Init+0x94>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_TIM4_Init+0x94>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d6e:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <MX_TIM4_Init+0x94>)
 8000d70:	f004 fca3 	bl	80056ba <HAL_TIM_Base_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d7a:	f000 f987 	bl	800108c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <MX_TIM4_Init+0x94>)
 8000d8c:	f004 fe75 	bl	8005a7a <HAL_TIM_ConfigClockSource>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d96:	f000 f979 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <MX_TIM4_Init+0x94>)
 8000da8:	f005 f882 	bl	8005eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000db2:	f000 f96b 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3720      	adds	r7, #32
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000028c 	.word	0x2000028c
 8000dc4:	40000800 	.word	0x40000800

08000dc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_USART1_UART_Init+0x58>)
 8000dce:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <MX_USART1_UART_Init+0x5c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MX_USART1_UART_Init+0x58>)
 8000dd4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_USART1_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_USART1_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_USART1_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_USART1_UART_Init+0x58>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_USART1_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_USART1_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <MX_USART1_UART_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_USART1_UART_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_USART1_UART_Init+0x58>)
 8000e0c:	f005 f8ee 	bl	8005fec <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e16:	f000 f939 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200002d8 	.word	0x200002d8
 8000e24:	40013800 	.word	0x40013800

08000e28 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <MX_USB_PCD_Init+0x3c>)
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <MX_USB_PCD_Init+0x40>)
 8000e30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_USB_PCD_Init+0x3c>)
 8000e34:	2208      	movs	r2, #8
 8000e36:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_USB_PCD_Init+0x3c>)
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_USB_PCD_Init+0x3c>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_USB_PCD_Init+0x3c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_USB_PCD_Init+0x3c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_USB_PCD_Init+0x3c>)
 8000e52:	f002 fbd3 	bl	80035fc <HAL_PCD_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000e5c:	f000 f916 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000360 	.word	0x20000360
 8000e68:	40005c00 	.word	0x40005c00

08000e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	; 0x30
 8000e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e82:	4b7d      	ldr	r3, [pc, #500]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a7c      	ldr	r2, [pc, #496]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b7a      	ldr	r3, [pc, #488]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	4b77      	ldr	r3, [pc, #476]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a76      	ldr	r2, [pc, #472]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000ea0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b74      	ldr	r3, [pc, #464]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb2:	4b71      	ldr	r3, [pc, #452]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a70      	ldr	r2, [pc, #448]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ebc:	6153      	str	r3, [r2, #20]
 8000ebe:	4b6e      	ldr	r3, [pc, #440]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b6b      	ldr	r3, [pc, #428]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	4a6a      	ldr	r2, [pc, #424]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	6153      	str	r3, [r2, #20]
 8000ed6:	4b68      	ldr	r3, [pc, #416]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b65      	ldr	r3, [pc, #404]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a64      	ldr	r2, [pc, #400]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b62      	ldr	r3, [pc, #392]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efa:	4b5f      	ldr	r3, [pc, #380]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a5e      	ldr	r2, [pc, #376]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f04:	6153      	str	r3, [r2, #20]
 8000f06:	4b5c      	ldr	r3, [pc, #368]	; (8001078 <MX_GPIO_Init+0x20c>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000f12:	2200      	movs	r2, #0
 8000f14:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000f18:	4858      	ldr	r0, [pc, #352]	; (800107c <MX_GPIO_Init+0x210>)
 8000f1a:	f002 f9ff 	bl	800331c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2110      	movs	r1, #16
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f002 f9f9 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2150      	movs	r1, #80	; 0x50
 8000f2e:	4854      	ldr	r0, [pc, #336]	; (8001080 <MX_GPIO_Init+0x214>)
 8000f30:	f002 f9f4 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f242 0105 	movw	r1, #8197	; 0x2005
 8000f3a:	4852      	ldr	r0, [pc, #328]	; (8001084 <MX_GPIO_Init+0x218>)
 8000f3c:	f002 f9ee 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 413e 	mov.w	r1, #48640	; 0xbe00
 8000f46:	4850      	ldr	r0, [pc, #320]	; (8001088 <MX_GPIO_Init+0x21c>)
 8000f48:	f002 f9e8 	bl	800331c <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000f4c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000f50:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4845      	ldr	r0, [pc, #276]	; (800107c <MX_GPIO_Init+0x210>)
 8000f66:	f002 f847 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f6e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	483f      	ldr	r0, [pc, #252]	; (800107c <MX_GPIO_Init+0x210>)
 8000f80:	f002 f83a 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f002 f82d 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f002 f81e 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000fbc:	2350      	movs	r3, #80	; 0x50
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	482b      	ldr	r0, [pc, #172]	; (8001080 <MX_GPIO_Init+0x214>)
 8000fd4:	f002 f810 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 8000fd8:	f242 0305 	movw	r3, #8197	; 0x2005
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4824      	ldr	r0, [pc, #144]	; (8001084 <MX_GPIO_Init+0x218>)
 8000ff2:	f002 f801 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000ff6:	f44f 433e 	mov.w	r3, #48640	; 0xbe00
 8000ffa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	481e      	ldr	r0, [pc, #120]	; (8001088 <MX_GPIO_Init+0x21c>)
 8001010:	f001 fff2 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001014:	230f      	movs	r3, #15
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001018:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800101e:	2302      	movs	r3, #2
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4817      	ldr	r0, [pc, #92]	; (8001088 <MX_GPIO_Init+0x21c>)
 800102a:	f001 ffe5 	bl	8002ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 800102e:	2201      	movs	r2, #1
 8001030:	2100      	movs	r1, #0
 8001032:	2006      	movs	r0, #6
 8001034:	f001 ff33 	bl	8002e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001038:	2006      	movs	r0, #6
 800103a:	f001 ff4c 	bl	8002ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 1);
 800103e:	2201      	movs	r2, #1
 8001040:	2100      	movs	r1, #0
 8001042:	2007      	movs	r0, #7
 8001044:	f001 ff2b 	bl	8002e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001048:	2007      	movs	r0, #7
 800104a:	f001 ff44 	bl	8002ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 1);
 800104e:	2201      	movs	r2, #1
 8001050:	2100      	movs	r1, #0
 8001052:	2008      	movs	r0, #8
 8001054:	f001 ff23 	bl	8002e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001058:	2008      	movs	r0, #8
 800105a:	f001 ff3c 	bl	8002ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 800105e:	2201      	movs	r2, #1
 8001060:	2100      	movs	r1, #0
 8001062:	2009      	movs	r0, #9
 8001064:	f001 ff1b 	bl	8002e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001068:	2009      	movs	r0, #9
 800106a:	f001 ff34 	bl	8002ed6 <HAL_NVIC_EnableIRQ>

}
 800106e:	bf00      	nop
 8001070:	3730      	adds	r7, #48	; 0x30
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000
 800107c:	48001000 	.word	0x48001000
 8001080:	48000800 	.word	0x48000800
 8001084:	48000400 	.word	0x48000400
 8001088:	48000c00 	.word	0x48000c00

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	e7fe      	b.n	8001094 <Error_Handler+0x8>
	...

08001098 <set_start_time>:
extern RTC_HandleTypeDef hrtc;

RTC_TimeTypeDef mytime ;
RTC_DateTypeDef mydate ;

void set_start_time(int hour, int minute, int second){
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]

	RTC_TimeTypeDef start_t ;

	start_t.Hours = 20;
 80010a4:	2314      	movs	r3, #20
 80010a6:	753b      	strb	r3, [r7, #20]
	start_t.Minutes = 20;
 80010a8:	2314      	movs	r3, #20
 80010aa:	757b      	strb	r3, [r7, #21]
	start_t.Seconds = 20;
 80010ac:	2314      	movs	r3, #20
 80010ae:	75bb      	strb	r3, [r7, #22]

    HAL_RTC_SetTime(&hrtc, &start_t, RTC_FORMAT_BIN);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <set_start_time+0x30>)
 80010ba:	f004 f818 	bl	80050ee <HAL_RTC_SetTime>
}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000208 	.word	0x20000208

080010cc <set_start_day>:

void set_start_day(int year, int month, int day){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef start_t ;

	start_t.Year = 20;
 80010d8:	2314      	movs	r3, #20
 80010da:	75fb      	strb	r3, [r7, #23]
	start_t.Month = 20;
 80010dc:	2314      	movs	r3, #20
 80010de:	757b      	strb	r3, [r7, #21]
	start_t.Date = 20;
 80010e0:	2314      	movs	r3, #20
 80010e2:	75bb      	strb	r3, [r7, #22]

    HAL_RTC_SetDate(&hrtc, &start_t, RTC_FORMAT_BIN);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	4803      	ldr	r0, [pc, #12]	; (80010fc <set_start_day+0x30>)
 80010ee:	f004 f8f6 	bl	80052de <HAL_RTC_SetDate>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000208 	.word	0x20000208

08001100 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
  if (last_gpio_exti + 70 > HAL_GetTick()) // Simple button debouncing
 800110a:	4bbd      	ldr	r3, [pc, #756]	; (8001400 <HAL_GPIO_EXTI_Callback+0x300>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f103 0446 	add.w	r4, r3, #70	; 0x46
 8001112:	f001 fdb9 	bl	8002c88 <HAL_GetTick>
 8001116:	4603      	mov	r3, r0
 8001118:	429c      	cmp	r4, r3
 800111a:	f200 81b1 	bhi.w	8001480 <HAL_GPIO_EXTI_Callback+0x380>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 800111e:	f001 fdb3 	bl	8002c88 <HAL_GetTick>
 8001122:	4603      	mov	r3, r0
 8001124:	4ab6      	ldr	r2, [pc, #728]	; (8001400 <HAL_GPIO_EXTI_Callback+0x300>)
 8001126:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 8001128:	23ff      	movs	r3, #255	; 0xff
 800112a:	73fb      	strb	r3, [r7, #15]
  int8_t column_number = -1;
 800112c:	23ff      	movs	r3, #255	; 0xff
 800112e:	73bb      	strb	r3, [r7, #14]
  {
    // blue_button_pressed = 1;
    // return;
  }

  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8001130:	2300      	movs	r3, #0
 8001132:	737b      	strb	r3, [r7, #13]
 8001134:	e00b      	b.n	800114e <HAL_GPIO_EXTI_Callback+0x4e>
  {
    if (GPIO_Pin == Row_pins[row])
 8001136:	7b7b      	ldrb	r3, [r7, #13]
 8001138:	4ab2      	ldr	r2, [pc, #712]	; (8001404 <HAL_GPIO_EXTI_Callback+0x304>)
 800113a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800113e:	88fa      	ldrh	r2, [r7, #6]
 8001140:	429a      	cmp	r2, r3
 8001142:	d101      	bne.n	8001148 <HAL_GPIO_EXTI_Callback+0x48>
    {
      row_number = row;
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	73fb      	strb	r3, [r7, #15]
  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8001148:	7b7b      	ldrb	r3, [r7, #13]
 800114a:	3301      	adds	r3, #1
 800114c:	737b      	strb	r3, [r7, #13]
 800114e:	7b7b      	ldrb	r3, [r7, #13]
 8001150:	2b03      	cmp	r3, #3
 8001152:	d9f0      	bls.n	8001136 <HAL_GPIO_EXTI_Callback+0x36>
    }
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8001154:	4bac      	ldr	r3, [pc, #688]	; (8001408 <HAL_GPIO_EXTI_Callback+0x308>)
 8001156:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115a:	2200      	movs	r2, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f002 f8dd 	bl	800331c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8001162:	4ba9      	ldr	r3, [pc, #676]	; (8001408 <HAL_GPIO_EXTI_Callback+0x308>)
 8001164:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001168:	2200      	movs	r2, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f002 f8d6 	bl	800331c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8001170:	4ba5      	ldr	r3, [pc, #660]	; (8001408 <HAL_GPIO_EXTI_Callback+0x308>)
 8001172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001176:	2200      	movs	r2, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f002 f8cf 	bl	800331c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 800117e:	4ba2      	ldr	r3, [pc, #648]	; (8001408 <HAL_GPIO_EXTI_Callback+0x308>)
 8001180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001184:	2200      	movs	r2, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f002 f8c8 	bl	800331c <HAL_GPIO_WritePin>

  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 800118c:	2300      	movs	r3, #0
 800118e:	733b      	strb	r3, [r7, #12]
 8001190:	e02d      	b.n	80011ee <HAL_GPIO_EXTI_Callback+0xee>
  {
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8001192:	7b3b      	ldrb	r3, [r7, #12]
 8001194:	4a9d      	ldr	r2, [pc, #628]	; (800140c <HAL_GPIO_EXTI_Callback+0x30c>)
 8001196:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800119a:	7b3b      	ldrb	r3, [r7, #12]
 800119c:	4a9c      	ldr	r2, [pc, #624]	; (8001410 <HAL_GPIO_EXTI_Callback+0x310>)
 800119e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4619      	mov	r1, r3
 80011a6:	f002 f8b9 	bl	800331c <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number]))
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4a99      	ldr	r2, [pc, #612]	; (8001414 <HAL_GPIO_EXTI_Callback+0x314>)
 80011b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b8:	4992      	ldr	r1, [pc, #584]	; (8001404 <HAL_GPIO_EXTI_Callback+0x304>)
 80011ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011be:	4619      	mov	r1, r3
 80011c0:	4610      	mov	r0, r2
 80011c2:	f002 f893 	bl	80032ec <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_GPIO_EXTI_Callback+0xd0>
    {
      column_number = col;
 80011cc:	7b3b      	ldrb	r3, [r7, #12]
 80011ce:	73bb      	strb	r3, [r7, #14]
    }
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 80011d0:	7b3b      	ldrb	r3, [r7, #12]
 80011d2:	4a8e      	ldr	r2, [pc, #568]	; (800140c <HAL_GPIO_EXTI_Callback+0x30c>)
 80011d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011d8:	7b3b      	ldrb	r3, [r7, #12]
 80011da:	4a8d      	ldr	r2, [pc, #564]	; (8001410 <HAL_GPIO_EXTI_Callback+0x310>)
 80011dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f002 f89a 	bl	800331c <HAL_GPIO_WritePin>
  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 80011e8:	7b3b      	ldrb	r3, [r7, #12]
 80011ea:	3301      	adds	r3, #1
 80011ec:	733b      	strb	r3, [r7, #12]
 80011ee:	7b3b      	ldrb	r3, [r7, #12]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d9ce      	bls.n	8001192 <HAL_GPIO_EXTI_Callback+0x92>
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 80011f4:	4b84      	ldr	r3, [pc, #528]	; (8001408 <HAL_GPIO_EXTI_Callback+0x308>)
 80011f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fa:	2201      	movs	r2, #1
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 f88d 	bl	800331c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8001202:	4b81      	ldr	r3, [pc, #516]	; (8001408 <HAL_GPIO_EXTI_Callback+0x308>)
 8001204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001208:	2201      	movs	r2, #1
 800120a:	4618      	mov	r0, r3
 800120c:	f002 f886 	bl	800331c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8001210:	4b7d      	ldr	r3, [pc, #500]	; (8001408 <HAL_GPIO_EXTI_Callback+0x308>)
 8001212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001216:	2201      	movs	r2, #1
 8001218:	4618      	mov	r0, r3
 800121a:	f002 f87f 	bl	800331c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 800121e:	4b7a      	ldr	r3, [pc, #488]	; (8001408 <HAL_GPIO_EXTI_Callback+0x308>)
 8001220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001224:	2201      	movs	r2, #1
 8001226:	4618      	mov	r0, r3
 8001228:	f002 f878 	bl	800331c <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 800122c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	f000 8126 	beq.w	8001484 <HAL_GPIO_EXTI_Callback+0x384>
 8001238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	f000 8120 	beq.w	8001484 <HAL_GPIO_EXTI_Callback+0x384>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	b2da      	uxtb	r2, r3
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	4413      	add	r3, r2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	3301      	adds	r3, #1
 8001252:	72fb      	strb	r3, [r7, #11]
  switch (button_number){
 8001254:	7afb      	ldrb	r3, [r7, #11]
 8001256:	3b01      	subs	r3, #1
 8001258:	2b0f      	cmp	r3, #15
 800125a:	f200 8115 	bhi.w	8001488 <HAL_GPIO_EXTI_Callback+0x388>
 800125e:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <HAL_GPIO_EXTI_Callback+0x164>)
 8001260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001264:	080012a5 	.word	0x080012a5
 8001268:	080012b9 	.word	0x080012b9
 800126c:	080012cd 	.word	0x080012cd
 8001270:	080012db 	.word	0x080012db
 8001274:	080012e9 	.word	0x080012e9
 8001278:	080012fd 	.word	0x080012fd
 800127c:	0800130b 	.word	0x0800130b
 8001280:	08001319 	.word	0x08001319
 8001284:	08001327 	.word	0x08001327
 8001288:	08001353 	.word	0x08001353
 800128c:	0800137f 	.word	0x0800137f
 8001290:	0800138d 	.word	0x0800138d
 8001294:	080013a1 	.word	0x080013a1
 8001298:	080013d1 	.word	0x080013d1
 800129c:	08001459 	.word	0x08001459
 80012a0:	0800146d 	.word	0x0800146d
  case 1: //move	//1
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012aa:	485b      	ldr	r0, [pc, #364]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 80012ac:	f002 f836 	bl	800331c <HAL_GPIO_WritePin>
	move(1);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f000 fead 	bl	8002010 <move>

    break;
 80012b6:	e0f0      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
  case 2: //boom 	//2
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012be:	4856      	ldr	r0, [pc, #344]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 80012c0:	f002 f82c 	bl	800331c <HAL_GPIO_WritePin>
	boom(1);
 80012c4:	2001      	movs	r0, #1
 80012c6:	f000 fe23 	bl	8001f10 <boom>
    break;
 80012ca:	e0e6      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
  case 3:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012d2:	4851      	ldr	r0, [pc, #324]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 80012d4:	f002 f822 	bl	800331c <HAL_GPIO_WritePin>
    break;
 80012d8:	e0df      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
  case 4:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e0:	484d      	ldr	r0, [pc, #308]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 80012e2:	f002 f81b 	bl	800331c <HAL_GPIO_WritePin>
    break;
 80012e6:	e0d8      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
  case 5: //dir	 	//4
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ee:	484a      	ldr	r0, [pc, #296]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 80012f0:	f002 f814 	bl	800331c <HAL_GPIO_WritePin>
	 change_dir(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f000 fdc1 	bl	8001e7c <change_dir>
    break;
 80012fa:	e0ce      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
  case 6:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001302:	4845      	ldr	r0, [pc, #276]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 8001304:	f002 f80a 	bl	800331c <HAL_GPIO_WritePin>
    break;
 8001308:	e0c7      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
  case 7:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001310:	4841      	ldr	r0, [pc, #260]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 8001312:	f002 f803 	bl	800331c <HAL_GPIO_WritePin>
    break;
 8001316:	e0c0      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
  case 8:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131e:	483e      	ldr	r0, [pc, #248]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 8001320:	f001 fffc 	bl	800331c <HAL_GPIO_WritePin>
    break;
 8001324:	e0b9      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
  case 9: // menu curser up
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800132c:	483a      	ldr	r0, [pc, #232]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 800132e:	f001 fff5 	bl	800331c <HAL_GPIO_WritePin>
		if(pageflag==1){
 8001332:	4b3a      	ldr	r3, [pc, #232]	; (800141c <HAL_GPIO_EXTI_Callback+0x31c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	f040 80a8 	bne.w	800148c <HAL_GPIO_EXTI_Callback+0x38c>
			if (menu_curser_r > 1){
 800133c:	4b38      	ldr	r3, [pc, #224]	; (8001420 <HAL_GPIO_EXTI_Callback+0x320>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	f340 80a3 	ble.w	800148c <HAL_GPIO_EXTI_Callback+0x38c>
				menu_curser_r -= 1;
 8001346:	4b36      	ldr	r3, [pc, #216]	; (8001420 <HAL_GPIO_EXTI_Callback+0x320>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	3b01      	subs	r3, #1
 800134c:	4a34      	ldr	r2, [pc, #208]	; (8001420 <HAL_GPIO_EXTI_Callback+0x320>)
 800134e:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 8001350:	e09c      	b.n	800148c <HAL_GPIO_EXTI_Callback+0x38c>
  case 10: // menu cursor down
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001358:	482f      	ldr	r0, [pc, #188]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 800135a:	f001 ffdf 	bl	800331c <HAL_GPIO_WritePin>
		if(pageflag==1){
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <HAL_GPIO_EXTI_Callback+0x31c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	f040 8094 	bne.w	8001490 <HAL_GPIO_EXTI_Callback+0x390>
			if (menu_curser_r  < 3){
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_GPIO_EXTI_Callback+0x320>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b02      	cmp	r3, #2
 800136e:	f300 808f 	bgt.w	8001490 <HAL_GPIO_EXTI_Callback+0x390>
				menu_curser_r +=1;
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_GPIO_EXTI_Callback+0x320>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a29      	ldr	r2, [pc, #164]	; (8001420 <HAL_GPIO_EXTI_Callback+0x320>)
 800137a:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 800137c:	e088      	b.n	8001490 <HAL_GPIO_EXTI_Callback+0x390>
  case 11:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 800137e:	2201      	movs	r2, #1
 8001380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001384:	4824      	ldr	r0, [pc, #144]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 8001386:	f001 ffc9 	bl	800331c <HAL_GPIO_WritePin>
    break;
 800138a:	e086      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
  case 12: //Dir	//C
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001392:	4821      	ldr	r0, [pc, #132]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 8001394:	f001 ffc2 	bl	800331c <HAL_GPIO_WritePin>
		change_dir(2);
 8001398:	2002      	movs	r0, #2
 800139a:	f000 fd6f 	bl	8001e7c <change_dir>
    break;
 800139e:	e07c      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
  case 13: //goto menu
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 80013a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a4:	481c      	ldr	r0, [pc, #112]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 80013a6:	f001 ffd1 	bl	800334c <HAL_GPIO_TogglePin>
		if(pageflag == 0 || pageflag == 3 || pageflag == 4){
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <HAL_GPIO_EXTI_Callback+0x31c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_EXTI_Callback+0x2c2>
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_GPIO_EXTI_Callback+0x31c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_EXTI_Callback+0x2c2>
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_GPIO_EXTI_Callback+0x31c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d168      	bne.n	8001494 <HAL_GPIO_EXTI_Callback+0x394>
			change_page = 1;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_GPIO_EXTI_Callback+0x324>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
			pageflag = 1;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_GPIO_EXTI_Callback+0x31c>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
		}
    break;
 80013ce:	e061      	b.n	8001494 <HAL_GPIO_EXTI_Callback+0x394>
  case 14: // select in menu
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d6:	4810      	ldr	r0, [pc, #64]	; (8001418 <HAL_GPIO_EXTI_Callback+0x318>)
 80013d8:	f001 ffa0 	bl	800331c <HAL_GPIO_WritePin>
		if(pageflag == 1){
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_GPIO_EXTI_Callback+0x31c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d159      	bne.n	8001498 <HAL_GPIO_EXTI_Callback+0x398>
			if(menu_curser_r == 1){
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_GPIO_EXTI_Callback+0x320>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d11f      	bne.n	800142c <HAL_GPIO_EXTI_Callback+0x32c>
				pageflag = 2;
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_GPIO_EXTI_Callback+0x31c>)
 80013ee:	2202      	movs	r2, #2
 80013f0:	601a      	str	r2, [r3, #0]
				change_page = 1;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_GPIO_EXTI_Callback+0x324>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
				game_started = 1;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_GPIO_EXTI_Callback+0x328>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
				change_page = 1;

			}
		}

    break;
 80013fe:	e04b      	b.n	8001498 <HAL_GPIO_EXTI_Callback+0x398>
 8001400:	20000654 	.word	0x20000654
 8001404:	080089e4 	.word	0x080089e4
 8001408:	48000c00 	.word	0x48000c00
 800140c:	080089ec 	.word	0x080089ec
 8001410:	080089fc 	.word	0x080089fc
 8001414:	080089d4 	.word	0x080089d4
 8001418:	48001000 	.word	0x48001000
 800141c:	2000064c 	.word	0x2000064c
 8001420:	20000004 	.word	0x20000004
 8001424:	20000658 	.word	0x20000658
 8001428:	20000650 	.word	0x20000650
			else if(menu_curser_r == 2){
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_GPIO_EXTI_Callback+0x3a0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d106      	bne.n	8001442 <HAL_GPIO_EXTI_Callback+0x342>
				pageflag = 3;
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001436:	2203      	movs	r2, #3
 8001438:	601a      	str	r2, [r3, #0]
				change_page = 1;
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_GPIO_EXTI_Callback+0x3a8>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
    break;
 8001440:	e02a      	b.n	8001498 <HAL_GPIO_EXTI_Callback+0x398>
			else if(menu_curser_r == 3){
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d126      	bne.n	8001498 <HAL_GPIO_EXTI_Callback+0x398>
				pageflag = 4;
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_GPIO_EXTI_Callback+0x3a4>)
 800144c:	2204      	movs	r2, #4
 800144e:	601a      	str	r2, [r3, #0]
				change_page = 1;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_GPIO_EXTI_Callback+0x3a8>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]
    break;
 8001456:	e01f      	b.n	8001498 <HAL_GPIO_EXTI_Callback+0x398>
  case 15: //Boom	//#
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145e:	4813      	ldr	r0, [pc, #76]	; (80014ac <HAL_GPIO_EXTI_Callback+0x3ac>)
 8001460:	f001 ff5c 	bl	800331c <HAL_GPIO_WritePin>
		boom(2);
 8001464:	2002      	movs	r0, #2
 8001466:	f000 fd53 	bl	8001f10 <boom>
    break;
 800146a:	e016      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
  case 16: //move	//D
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001472:	480e      	ldr	r0, [pc, #56]	; (80014ac <HAL_GPIO_EXTI_Callback+0x3ac>)
 8001474:	f001 ff52 	bl	800331c <HAL_GPIO_WritePin>
		move(2);
 8001478:	2002      	movs	r0, #2
 800147a:	f000 fdc9 	bl	8002010 <move>
    break;
 800147e:	e00c      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
    return;
 8001480:	bf00      	nop
 8001482:	e00a      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
    return; // Reject invalid scan
 8001484:	bf00      	nop
 8001486:	e008      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>

  default:
    break;
 8001488:	bf00      	nop
 800148a:	e006      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
    break;
 800148c:	bf00      	nop
 800148e:	e004      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
    break;
 8001490:	bf00      	nop
 8001492:	e002      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
    break;
 8001494:	bf00      	nop
 8001496:	e000      	b.n	800149a <HAL_GPIO_EXTI_Callback+0x39a>
    break;
 8001498:	bf00      	nop
  }
}
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	20000004 	.word	0x20000004
 80014a4:	2000064c 	.word	0x2000064c
 80014a8:	20000658 	.word	0x20000658
 80014ac:	48001000 	.word	0x48001000

080014b0 <seven_segment_display_decimal>:
	.digits={0, 0, 0, 0},
	.number = 0};



void seven_segment_display_decimal(uint32_t n) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    if (n < 10) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b09      	cmp	r3, #9
 80014bc:	d832      	bhi.n	8001524 <seven_segment_display_decimal+0x74>
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin, (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <seven_segment_display_decimal+0x7c>)
 80014c0:	6a18      	ldr	r0, [r3, #32]
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <seven_segment_display_decimal+0x7c>)
 80014c4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	f001 ff23 	bl	800331c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin, (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <seven_segment_display_decimal+0x7c>)
 80014d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <seven_segment_display_decimal+0x7c>)
 80014dc:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	f001 ff16 	bl	800331c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin, (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <seven_segment_display_decimal+0x7c>)
 80014f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <seven_segment_display_decimal+0x7c>)
 80014f6:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	461a      	mov	r2, r3
 8001506:	f001 ff09 	bl	800331c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin, (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <seven_segment_display_decimal+0x7c>)
 800150c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <seven_segment_display_decimal+0x7c>)
 8001510:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	08db      	lsrs	r3, r3, #3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	f001 fefc 	bl	800331c <HAL_GPIO_WritePin>
    }
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200000b0 	.word	0x200000b0

08001530 <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i)
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	e00f      	b.n	800155c <seven_segment_deactivate_digits+0x2c>
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin, GPIO_PIN_SET);
 800153c:	4a0b      	ldr	r2, [pc, #44]	; (800156c <seven_segment_deactivate_digits+0x3c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001544:	4a09      	ldr	r2, [pc, #36]	; (800156c <seven_segment_deactivate_digits+0x3c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	889b      	ldrh	r3, [r3, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	4619      	mov	r1, r3
 8001552:	f001 fee3 	bl	800331c <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; ++i)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3301      	adds	r3, #1
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b03      	cmp	r3, #3
 8001560:	ddec      	ble.n	800153c <seven_segment_deactivate_digits+0xc>
}
 8001562:	bf00      	nop
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200000b0 	.word	0x200000b0

08001570 <seven_segment_activate_digit>:

int last_time_on = 0;
void seven_segment_activate_digit(uint32_t d) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    if (d < 4) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b03      	cmp	r3, #3
 800157c:	d80c      	bhi.n	8001598 <seven_segment_activate_digit+0x28>
    	HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <seven_segment_activate_digit+0x30>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001586:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <seven_segment_activate_digit+0x30>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4413      	add	r3, r2
 800158e:	889b      	ldrh	r3, [r3, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	4619      	mov	r1, r3
 8001594:	f001 fec2 	bl	800331c <HAL_GPIO_WritePin>
//		}
//		else if (d != state){
//			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
//		}
    }
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200000b0 	.word	0x200000b0

080015a4 <seven_segment_set_num>:

void seven_segment_set_num(int num[4]) {
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i <= 3; ++i) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	e00d      	b.n	80015ce <seven_segment_set_num+0x2a>
		seven_segment.digits[i] = num[i];
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <seven_segment_set_num+0x40>)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3310      	adds	r3, #16
 80015c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i <= 3; ++i) {
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3301      	adds	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d9ee      	bls.n	80015b2 <seven_segment_set_num+0xe>
	}
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	200000b0 	.word	0x200000b0

080015e8 <seven_segment_refresh>:

void seven_segment_refresh(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
    static uint32_t state_tmp = 0;
    static uint32_t last_time_tmp = 0;
    if (HAL_GetTick() - last_time_tmp > 5) {
 80015ec:	f001 fb4c 	bl	8002c88 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <seven_segment_refresh+0x50>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d91b      	bls.n	8001634 <seven_segment_refresh+0x4c>
        seven_segment_deactivate_digits();
 80015fc:	f7ff ff98 	bl	8001530 <seven_segment_deactivate_digits>
        seven_segment_activate_digit(state_tmp);
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <seven_segment_refresh+0x54>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ffb3 	bl	8001570 <seven_segment_activate_digit>
        seven_segment_display_decimal(seven_segment.digits[state_tmp]);
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <seven_segment_refresh+0x54>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <seven_segment_refresh+0x58>)
 8001610:	3310      	adds	r3, #16
 8001612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff4a 	bl	80014b0 <seven_segment_display_decimal>
        state_tmp = (state_tmp + 1) % 4;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <seven_segment_refresh+0x54>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <seven_segment_refresh+0x54>)
 8001628:	6013      	str	r3, [r2, #0]
        last_time_tmp = HAL_GetTick();
 800162a:	f001 fb2d 	bl	8002c88 <HAL_GetTick>
 800162e:	4603      	mov	r3, r0
 8001630:	4a01      	ldr	r2, [pc, #4]	; (8001638 <seven_segment_refresh+0x50>)
 8001632:	6013      	str	r3, [r2, #0]
    }
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200007c8 	.word	0x200007c8
 800163c:	200007cc 	.word	0x200007cc
 8001640:	200000b0 	.word	0x200000b0

08001644 <setNumber>:


void setNumber(int number){
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	int a = 0, b = 0, c = 0, d = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
	if (number <= 9999 && number >= 0){
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001662:	4293      	cmp	r3, r2
 8001664:	dc5b      	bgt.n	800171e <setNumber+0xda>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db58      	blt.n	800171e <setNumber+0xda>
		a = number % 10;
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <setNumber+0xe4>)
 8001670:	fb83 1302 	smull	r1, r3, r3, r2
 8001674:	1099      	asrs	r1, r3, #2
 8001676:	17d3      	asrs	r3, r2, #31
 8001678:	1ac9      	subs	r1, r1, r3
 800167a:	460b      	mov	r3, r1
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
		number /= 10;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <setNumber+0xe4>)
 800168a:	fb82 1203 	smull	r1, r2, r2, r3
 800168e:	1092      	asrs	r2, r2, #2
 8001690:	17db      	asrs	r3, r3, #31
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	607b      	str	r3, [r7, #4]
		b = number % 10;
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <setNumber+0xe4>)
 800169a:	fb83 1302 	smull	r1, r3, r3, r2
 800169e:	1099      	asrs	r1, r3, #2
 80016a0:	17d3      	asrs	r3, r2, #31
 80016a2:	1ac9      	subs	r1, r1, r3
 80016a4:	460b      	mov	r3, r1
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	623b      	str	r3, [r7, #32]
		number /= 10;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <setNumber+0xe4>)
 80016b4:	fb82 1203 	smull	r1, r2, r2, r3
 80016b8:	1092      	asrs	r2, r2, #2
 80016ba:	17db      	asrs	r3, r3, #31
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	607b      	str	r3, [r7, #4]
		c = number % 10;
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <setNumber+0xe4>)
 80016c4:	fb83 1302 	smull	r1, r3, r3, r2
 80016c8:	1099      	asrs	r1, r3, #2
 80016ca:	17d3      	asrs	r3, r2, #31
 80016cc:	1ac9      	subs	r1, r1, r3
 80016ce:	460b      	mov	r3, r1
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	61fb      	str	r3, [r7, #28]
		number /= 10;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a12      	ldr	r2, [pc, #72]	; (8001728 <setNumber+0xe4>)
 80016de:	fb82 1203 	smull	r1, r2, r2, r3
 80016e2:	1092      	asrs	r2, r2, #2
 80016e4:	17db      	asrs	r3, r3, #31
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	607b      	str	r3, [r7, #4]
		d = number % 10;
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <setNumber+0xe4>)
 80016ee:	fb83 1302 	smull	r1, r3, r3, r2
 80016f2:	1099      	asrs	r1, r3, #2
 80016f4:	17d3      	asrs	r3, r2, #31
 80016f6:	1ac9      	subs	r1, r1, r3
 80016f8:	460b      	mov	r3, r1
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	61bb      	str	r3, [r7, #24]
//		int numbers2[4]={d,c,b,a};
		int numbers2[4]={a,b,c,d};
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	617b      	str	r3, [r7, #20]
		seven_segment_set_num(numbers2);
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff43 	bl	80015a4 <seven_segment_set_num>
	}

}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	; 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	66666667 	.word	0x66666667

0800172c <programInit>:
	int active;
};

struct bullet bul[10];

void programInit() {
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af04      	add	r7, sp, #16
	LiquidCrystal(GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_7);
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	9303      	str	r3, [sp, #12]
 8001736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	2308      	movs	r3, #8
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2304      	movs	r3, #4
 8001748:	2202      	movs	r2, #2
 800174a:	2101      	movs	r1, #1
 800174c:	4842      	ldr	r0, [pc, #264]	; (8001858 <programInit+0x12c>)
 800174e:	f7fe fd97 	bl	8000280 <LiquidCrystal>
	begin(20, 4);
 8001752:	2104      	movs	r1, #4
 8001754:	2014      	movs	r0, #20
 8001756:	f7fe fe2b 	bl	80003b0 <begin>
//	int n = sprintf(data, "Salammmmm");
//	setCursor(5, 1);
	//	print(data);


	set_start_time(20, 20, 20);
 800175a:	2214      	movs	r2, #20
 800175c:	2114      	movs	r1, #20
 800175e:	2014      	movs	r0, #20
 8001760:	f7ff fc9a 	bl	8001098 <set_start_time>
	set_start_day(20,20,20);
 8001764:	2214      	movs	r2, #20
 8001766:	2114      	movs	r1, #20
 8001768:	2014      	movs	r0, #20
 800176a:	f7ff fcaf 	bl	80010cc <set_start_day>
	createChar(num_tank_right, tank_right);
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <programInit+0x130>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	493b      	ldr	r1, [pc, #236]	; (8001860 <programInit+0x134>)
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff f85c 	bl	8000832 <createChar>
	createChar(num_tank_up, tank_up);
 800177a:	4b3a      	ldr	r3, [pc, #232]	; (8001864 <programInit+0x138>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	493a      	ldr	r1, [pc, #232]	; (8001868 <programInit+0x13c>)
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff f856 	bl	8000832 <createChar>
	createChar(num_tank_down, tank_down);
 8001786:	4b39      	ldr	r3, [pc, #228]	; (800186c <programInit+0x140>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4939      	ldr	r1, [pc, #228]	; (8001870 <programInit+0x144>)
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff f850 	bl	8000832 <createChar>
	createChar(num_tank_left, tank_left);
 8001792:	4b38      	ldr	r3, [pc, #224]	; (8001874 <programInit+0x148>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4938      	ldr	r1, [pc, #224]	; (8001878 <programInit+0x14c>)
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff f84a 	bl	8000832 <createChar>
	createChar(num_extra_bullet, extra_bullet);
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <programInit+0x150>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4937      	ldr	r1, [pc, #220]	; (8001880 <programInit+0x154>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff f844 	bl	8000832 <createChar>
	createChar(num_chance, chance);
 80017aa:	4b36      	ldr	r3, [pc, #216]	; (8001884 <programInit+0x158>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4936      	ldr	r1, [pc, #216]	; (8001888 <programInit+0x15c>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff f83e 	bl	8000832 <createChar>
	createChar(num_health, health);
 80017b6:	4b35      	ldr	r3, [pc, #212]	; (800188c <programInit+0x160>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4935      	ldr	r1, [pc, #212]	; (8001890 <programInit+0x164>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f838 	bl	8000832 <createChar>
	createChar(num_arrow, arrow);
 80017c2:	4b34      	ldr	r3, [pc, #208]	; (8001894 <programInit+0x168>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4934      	ldr	r1, [pc, #208]	; (8001898 <programInit+0x16c>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff f832 	bl	8000832 <createChar>
//	starter();
	pageflag=0;
 80017ce:	4b33      	ldr	r3, [pc, #204]	; (800189c <programInit+0x170>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
//TODO init bullet array
	for(int i = 0; i < 10; i++){
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	e035      	b.n	8001846 <programInit+0x11a>
		bul[i].active=0;
 80017da:	4931      	ldr	r1, [pc, #196]	; (80018a0 <programInit+0x174>)
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	3310      	adds	r3, #16
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
		bul[i].direction=1;
 80017ee:	492c      	ldr	r1, [pc, #176]	; (80018a0 <programInit+0x174>)
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	330c      	adds	r3, #12
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
		bul[i].player_id=1;
 8001802:	4927      	ldr	r1, [pc, #156]	; (80018a0 <programInit+0x174>)
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]
		bul[i].position_x=-1;
 8001814:	4922      	ldr	r1, [pc, #136]	; (80018a0 <programInit+0x174>)
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	3304      	adds	r3, #4
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	601a      	str	r2, [r3, #0]
		bul[i].position_y=-1;
 800182a:	491d      	ldr	r1, [pc, #116]	; (80018a0 <programInit+0x174>)
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	3308      	adds	r3, #8
 800183a:	f04f 32ff 	mov.w	r2, #4294967295
 800183e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3301      	adds	r3, #1
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b09      	cmp	r3, #9
 800184a:	ddc6      	ble.n	80017da <programInit+0xae>

	}
//	init_board();


}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	48000800 	.word	0x48000800
 800185c:	20000090 	.word	0x20000090
 8001860:	20000028 	.word	0x20000028
 8001864:	2000008c 	.word	0x2000008c
 8001868:	20000018 	.word	0x20000018
 800186c:	20000094 	.word	0x20000094
 8001870:	20000038 	.word	0x20000038
 8001874:	20000088 	.word	0x20000088
 8001878:	20000020 	.word	0x20000020
 800187c:	20000098 	.word	0x20000098
 8001880:	20000008 	.word	0x20000008
 8001884:	2000009c 	.word	0x2000009c
 8001888:	20000010 	.word	0x20000010
 800188c:	200000a0 	.word	0x200000a0
 8001890:	20000030 	.word	0x20000030
 8001894:	200000a4 	.word	0x200000a4
 8001898:	20000040 	.word	0x20000040
 800189c:	2000064c 	.word	0x2000064c
 80018a0:	200006c0 	.word	0x200006c0

080018a4 <starter>:

void starter(){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b09a      	sub	sp, #104	; 0x68
 80018a8:	af00      	add	r7, sp, #0
	setCursor(0, 2);
 80018aa:	2102      	movs	r1, #2
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7fe ff4d 	bl	800074c <setCursor>
	write(num_tank_right, tank_right);
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <starter+0xa8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4926      	ldr	r1, [pc, #152]	; (8001950 <starter+0xac>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fff1 	bl	80008a0 <write>

	setCursor(1, 1);
 80018be:	2101      	movs	r1, #1
 80018c0:	2001      	movs	r0, #1
 80018c2:	f7fe ff43 	bl	800074c <setCursor>
	print("#");
 80018c6:	4823      	ldr	r0, [pc, #140]	; (8001954 <starter+0xb0>)
 80018c8:	f7fe ff88 	bl	80007dc <print>

	setCursor(1, 2);
 80018cc:	2102      	movs	r1, #2
 80018ce:	2001      	movs	r0, #1
 80018d0:	f7fe ff3c 	bl	800074c <setCursor>
	print("#");
 80018d4:	481f      	ldr	r0, [pc, #124]	; (8001954 <starter+0xb0>)
 80018d6:	f7fe ff81 	bl	80007dc <print>

	char data[100];
	int n = sprintf(data, "TANK BATTLE");
 80018da:	463b      	mov	r3, r7
 80018dc:	491e      	ldr	r1, [pc, #120]	; (8001958 <starter+0xb4>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f005 fe58 	bl	8007594 <siprintf>
 80018e4:	6678      	str	r0, [r7, #100]	; 0x64
	setCursor(4, 1);
 80018e6:	2101      	movs	r1, #1
 80018e8:	2004      	movs	r0, #4
 80018ea:	f7fe ff2f 	bl	800074c <setCursor>
	print(data);
 80018ee:	463b      	mov	r3, r7
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe ff73 	bl	80007dc <print>
	setCursor(4, 2);
 80018f6:	2102      	movs	r1, #2
 80018f8:	2004      	movs	r0, #4
 80018fa:	f7fe ff27 	bl	800074c <setCursor>
	n = sprintf(data, "===========");
 80018fe:	463b      	mov	r3, r7
 8001900:	4916      	ldr	r1, [pc, #88]	; (800195c <starter+0xb8>)
 8001902:	4618      	mov	r0, r3
 8001904:	f005 fe46 	bl	8007594 <siprintf>
 8001908:	6678      	str	r0, [r7, #100]	; 0x64
	print(data);
 800190a:	463b      	mov	r3, r7
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe ff65 	bl	80007dc <print>

	setCursor(18, 1);
 8001912:	2101      	movs	r1, #1
 8001914:	2012      	movs	r0, #18
 8001916:	f7fe ff19 	bl	800074c <setCursor>
	print("#");
 800191a:	480e      	ldr	r0, [pc, #56]	; (8001954 <starter+0xb0>)
 800191c:	f7fe ff5e 	bl	80007dc <print>
	setCursor(18, 2);
 8001920:	2102      	movs	r1, #2
 8001922:	2012      	movs	r0, #18
 8001924:	f7fe ff12 	bl	800074c <setCursor>
	print("#");
 8001928:	480a      	ldr	r0, [pc, #40]	; (8001954 <starter+0xb0>)
 800192a:	f7fe ff57 	bl	80007dc <print>

	setCursor(19, 1);
 800192e:	2101      	movs	r1, #1
 8001930:	2013      	movs	r0, #19
 8001932:	f7fe ff0b 	bl	800074c <setCursor>
	write(num_tank_left, tank_left);
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <starter+0xbc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	490a      	ldr	r1, [pc, #40]	; (8001964 <starter+0xc0>)
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe ffaf 	bl	80008a0 <write>

}
 8001942:	bf00      	nop
 8001944:	3768      	adds	r7, #104	; 0x68
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000090 	.word	0x20000090
 8001950:	20000028 	.word	0x20000028
 8001954:	08008958 	.word	0x08008958
 8001958:	0800895c 	.word	0x0800895c
 800195c:	08008968 	.word	0x08008968
 8001960:	20000088 	.word	0x20000088
 8001964:	20000020 	.word	0x20000020

08001968 <init_board>:

void init_board(){
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
	//i == soton, j ==> radif

    for (int i = 0; i < 20; i++) {
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
 8001972:	e017      	b.n	80019a4 <init_board+0x3c>
        for (int j = 0; j < 4; j++) {
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
 8001978:	e00e      	b.n	8001998 <init_board+0x30>
        	setCursor(i, j);
 800197a:	6a39      	ldr	r1, [r7, #32]
 800197c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800197e:	f7fe fee5 	bl	800074c <setCursor>
        	lcd[i][j] = 0;
 8001982:	4a6f      	ldr	r2, [pc, #444]	; (8001b40 <init_board+0x1d8>)
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	441a      	add	r2, r3
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	4413      	add	r3, r2
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	3301      	adds	r3, #1
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	2b03      	cmp	r3, #3
 800199c:	dded      	ble.n	800197a <init_board+0x12>
    for (int i = 0; i < 20; i++) {
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	3301      	adds	r3, #1
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	2b13      	cmp	r3, #19
 80019a8:	dde4      	ble.n	8001974 <init_board+0xc>
//    		print(" ");

        }
    }

	lcd[1][1] = num_wall;
 80019aa:	4b66      	ldr	r3, [pc, #408]	; (8001b44 <init_board+0x1dc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <init_board+0x1d8>)
 80019b2:	715a      	strb	r2, [r3, #5]
	lcd[1][2] = num_wall;
 80019b4:	4b63      	ldr	r3, [pc, #396]	; (8001b44 <init_board+0x1dc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b61      	ldr	r3, [pc, #388]	; (8001b40 <init_board+0x1d8>)
 80019bc:	719a      	strb	r2, [r3, #6]
	lcd[18][1] = num_wall;
 80019be:	4b61      	ldr	r3, [pc, #388]	; (8001b44 <init_board+0x1dc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b5e      	ldr	r3, [pc, #376]	; (8001b40 <init_board+0x1d8>)
 80019c6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	lcd[18][2] = num_wall;
 80019ca:	4b5e      	ldr	r3, [pc, #376]	; (8001b44 <init_board+0x1dc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b5b      	ldr	r3, [pc, #364]	; (8001b40 <init_board+0x1d8>)
 80019d2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	lcd[0][1] = num_tank_right;
 80019d6:	4b5c      	ldr	r3, [pc, #368]	; (8001b48 <init_board+0x1e0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b58      	ldr	r3, [pc, #352]	; (8001b40 <init_board+0x1d8>)
 80019de:	705a      	strb	r2, [r3, #1]
	lcd[19][2] = num_tank_left;
 80019e0:	4b5a      	ldr	r3, [pc, #360]	; (8001b4c <init_board+0x1e4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b56      	ldr	r3, [pc, #344]	; (8001b40 <init_board+0x1d8>)
 80019e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	int element_counter = 2;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 80019f0:	e030      	b.n	8001a54 <init_board+0xec>
		int col = rand() % 24;
 80019f2:	f005 fd91 	bl	8007518 <rand>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b55      	ldr	r3, [pc, #340]	; (8001b50 <init_board+0x1e8>)
 80019fa:	fb83 1302 	smull	r1, r3, r3, r2
 80019fe:	1099      	asrs	r1, r3, #2
 8001a00:	17d3      	asrs	r3, r2, #31
 8001a02:	1ac9      	subs	r1, r1, r3
 8001a04:	460b      	mov	r3, r1
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	440b      	add	r3, r1
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	60bb      	str	r3, [r7, #8]
		int row = rand() % 4;
 8001a10:	f005 fd82 	bl	8007518 <rand>
 8001a14:	4603      	mov	r3, r0
 8001a16:	425a      	negs	r2, r3
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	f002 0203 	and.w	r2, r2, #3
 8001a20:	bf58      	it	pl
 8001a22:	4253      	negpl	r3, r2
 8001a24:	607b      	str	r3, [r7, #4]
		if(lcd[col][row] == 0){
 8001a26:	4a46      	ldr	r2, [pc, #280]	; (8001b40 <init_board+0x1d8>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	441a      	add	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10d      	bne.n	8001a54 <init_board+0xec>
			lcd[col][row] = num_extra_bullet;
 8001a38:	4b46      	ldr	r3, [pc, #280]	; (8001b54 <init_board+0x1ec>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b2d9      	uxtb	r1, r3
 8001a3e:	4a40      	ldr	r2, [pc, #256]	; (8001b40 <init_board+0x1d8>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	441a      	add	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	460a      	mov	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	dccb      	bgt.n	80019f2 <init_board+0x8a>
		}
	}

	element_counter = 2;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 8001a5e:	e030      	b.n	8001ac2 <init_board+0x15a>
		int col = rand() % 24;
 8001a60:	f005 fd5a 	bl	8007518 <rand>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <init_board+0x1e8>)
 8001a68:	fb83 1302 	smull	r1, r3, r3, r2
 8001a6c:	1099      	asrs	r1, r3, #2
 8001a6e:	17d3      	asrs	r3, r2, #31
 8001a70:	1ac9      	subs	r1, r1, r3
 8001a72:	460b      	mov	r3, r1
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	440b      	add	r3, r1
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	613b      	str	r3, [r7, #16]
		int row = rand() % 4;
 8001a7e:	f005 fd4b 	bl	8007518 <rand>
 8001a82:	4603      	mov	r3, r0
 8001a84:	425a      	negs	r2, r3
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	bf58      	it	pl
 8001a90:	4253      	negpl	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
		if(lcd[col][row] == 0){
 8001a94:	4a2a      	ldr	r2, [pc, #168]	; (8001b40 <init_board+0x1d8>)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	441a      	add	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10d      	bne.n	8001ac2 <init_board+0x15a>
			lcd[col][row] = num_health;
 8001aa6:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <init_board+0x1f0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	b2d9      	uxtb	r1, r3
 8001aac:	4a24      	ldr	r2, [pc, #144]	; (8001b40 <init_board+0x1d8>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	441a      	add	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	460a      	mov	r2, r1
 8001aba:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	dccb      	bgt.n	8001a60 <init_board+0xf8>
		}
	}

	element_counter = 2;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 8001acc:	e030      	b.n	8001b30 <init_board+0x1c8>
		int col = rand() % 24;
 8001ace:	f005 fd23 	bl	8007518 <rand>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <init_board+0x1e8>)
 8001ad6:	fb83 1302 	smull	r1, r3, r3, r2
 8001ada:	1099      	asrs	r1, r3, #2
 8001adc:	17d3      	asrs	r3, r2, #31
 8001ade:	1ac9      	subs	r1, r1, r3
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	440b      	add	r3, r1
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	61bb      	str	r3, [r7, #24]
		int row = rand() % 4;
 8001aec:	f005 fd14 	bl	8007518 <rand>
 8001af0:	4603      	mov	r3, r0
 8001af2:	425a      	negs	r2, r3
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	f002 0203 	and.w	r2, r2, #3
 8001afc:	bf58      	it	pl
 8001afe:	4253      	negpl	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
		if(lcd[col][row] == 0){
 8001b02:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <init_board+0x1d8>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	441a      	add	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10d      	bne.n	8001b30 <init_board+0x1c8>
			lcd[col][row] = num_obstacle;
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <init_board+0x1f4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	b2d9      	uxtb	r1, r3
 8001b1a:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <init_board+0x1d8>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	441a      	add	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	4413      	add	r3, r2
 8001b26:	460a      	mov	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	dccb      	bgt.n	8001ace <init_board+0x166>
		}
	}

}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000670 	.word	0x20000670
 8001b44:	200000a8 	.word	0x200000a8
 8001b48:	20000090 	.word	0x20000090
 8001b4c:	20000088 	.word	0x20000088
 8001b50:	2aaaaaab 	.word	0x2aaaaaab
 8001b54:	20000098 	.word	0x20000098
 8001b58:	200000a0 	.word	0x200000a0
 8001b5c:	200000ac 	.word	0x200000ac

08001b60 <update_lcd>:
// D11 -> C3
// D12 -> C9
// D13 -> C8
// D14 -> C7

void update_lcd(){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
	if (game_started==1){
 8001b66:	4b55      	ldr	r3, [pc, #340]	; (8001cbc <update_lcd+0x15c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d109      	bne.n	8001b82 <update_lcd+0x22>
		clear();
 8001b6e:	f7fe fde3 	bl	8000738 <clear>
		init_board();
 8001b72:	f7ff fef9 	bl	8001968 <init_board>
		change_page = 0;
 8001b76:	4b52      	ldr	r3, [pc, #328]	; (8001cc0 <update_lcd+0x160>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
		game_started = 0;
 8001b7c:	4b4f      	ldr	r3, [pc, #316]	; (8001cbc <update_lcd+0x15c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
	}

	if(pageflag==0){
 8001b82:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <update_lcd+0x164>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <update_lcd+0x2e>
		starter();
 8001b8a:	f7ff fe8b 	bl	80018a4 <starter>
	}


	if(pageflag==2){
 8001b8e:	4b4d      	ldr	r3, [pc, #308]	; (8001cc4 <update_lcd+0x164>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d166      	bne.n	8001c64 <update_lcd+0x104>
		for (int i = 0; i < 20; i++) {
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	e05f      	b.n	8001c5c <update_lcd+0xfc>
			for (int j = 0; j < 4; j++) {
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	e056      	b.n	8001c50 <update_lcd+0xf0>
				setCursor(i, j);
 8001ba2:	6839      	ldr	r1, [r7, #0]
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7fe fdd1 	bl	800074c <setCursor>
				if(lcd[i][j] != 9 && lcd[i][j] != 10 && lcd[i][j] != 0)
 8001baa:	4a47      	ldr	r2, [pc, #284]	; (8001cc8 <update_lcd+0x168>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	441a      	add	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	d01c      	beq.n	8001bf6 <update_lcd+0x96>
 8001bbc:	4a42      	ldr	r2, [pc, #264]	; (8001cc8 <update_lcd+0x168>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	441a      	add	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b0a      	cmp	r3, #10
 8001bcc:	d013      	beq.n	8001bf6 <update_lcd+0x96>
 8001bce:	4a3e      	ldr	r2, [pc, #248]	; (8001cc8 <update_lcd+0x168>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	441a      	add	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00a      	beq.n	8001bf6 <update_lcd+0x96>
					write(lcd[i][j]);
 8001be0:	4a39      	ldr	r2, [pc, #228]	; (8001cc8 <update_lcd+0x168>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	441a      	add	r2, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fe56 	bl	80008a0 <write>
 8001bf4:	e029      	b.n	8001c4a <update_lcd+0xea>
				else if (lcd[i][j] == 9)
 8001bf6:	4a34      	ldr	r2, [pc, #208]	; (8001cc8 <update_lcd+0x168>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	441a      	add	r2, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b09      	cmp	r3, #9
 8001c06:	d103      	bne.n	8001c10 <update_lcd+0xb0>
					print("#");
 8001c08:	4830      	ldr	r0, [pc, #192]	; (8001ccc <update_lcd+0x16c>)
 8001c0a:	f7fe fde7 	bl	80007dc <print>
 8001c0e:	e01c      	b.n	8001c4a <update_lcd+0xea>
				else if (lcd[i][j] == 10)
 8001c10:	4a2d      	ldr	r2, [pc, #180]	; (8001cc8 <update_lcd+0x168>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	441a      	add	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b0a      	cmp	r3, #10
 8001c20:	d103      	bne.n	8001c2a <update_lcd+0xca>
					print("I");
 8001c22:	482b      	ldr	r0, [pc, #172]	; (8001cd0 <update_lcd+0x170>)
 8001c24:	f7fe fdda 	bl	80007dc <print>
 8001c28:	e00f      	b.n	8001c4a <update_lcd+0xea>
				else if (lcd[i][j] == 0)
 8001c2a:	4a27      	ldr	r2, [pc, #156]	; (8001cc8 <update_lcd+0x168>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	441a      	add	r2, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	4413      	add	r3, r2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d103      	bne.n	8001c44 <update_lcd+0xe4>
					print(" ");
 8001c3c:	4825      	ldr	r0, [pc, #148]	; (8001cd4 <update_lcd+0x174>)
 8001c3e:	f7fe fdcd 	bl	80007dc <print>
 8001c42:	e002      	b.n	8001c4a <update_lcd+0xea>
				else
					print("U");
 8001c44:	4824      	ldr	r0, [pc, #144]	; (8001cd8 <update_lcd+0x178>)
 8001c46:	f7fe fdc9 	bl	80007dc <print>
			for (int j = 0; j < 4; j++) {
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	dda5      	ble.n	8001ba2 <update_lcd+0x42>
		for (int i = 0; i < 20; i++) {
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b13      	cmp	r3, #19
 8001c60:	dd9c      	ble.n	8001b9c <update_lcd+0x3c>
	}
	else if (pageflag==4){
		about_page();
	}

}
 8001c62:	e027      	b.n	8001cb4 <update_lcd+0x154>
	else if (change_page==1){
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <update_lcd+0x160>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <update_lcd+0x118>
		clear();
 8001c6c:	f7fe fd64 	bl	8000738 <clear>
		change_page = 0;
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <update_lcd+0x160>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
}
 8001c76:	e01d      	b.n	8001cb4 <update_lcd+0x154>
	else if (change_page==1){
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <update_lcd+0x160>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <update_lcd+0x12c>
		clear();
 8001c80:	f7fe fd5a 	bl	8000738 <clear>
		change_page = 0;
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <update_lcd+0x160>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
}
 8001c8a:	e013      	b.n	8001cb4 <update_lcd+0x154>
	else if (pageflag==1){
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <update_lcd+0x164>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d102      	bne.n	8001c9a <update_lcd+0x13a>
		menu();
 8001c94:	f000 f876 	bl	8001d84 <menu>
}
 8001c98:	e00c      	b.n	8001cb4 <update_lcd+0x154>
	else if (pageflag==3){
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <update_lcd+0x164>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d102      	bne.n	8001ca8 <update_lcd+0x148>
		setting_page();
 8001ca2:	f000 f861 	bl	8001d68 <setting_page>
}
 8001ca6:	e005      	b.n	8001cb4 <update_lcd+0x154>
	else if (pageflag==4){
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <update_lcd+0x164>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d101      	bne.n	8001cb4 <update_lcd+0x154>
		about_page();
 8001cb0:	f000 f814 	bl	8001cdc <about_page>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000650 	.word	0x20000650
 8001cc0:	20000658 	.word	0x20000658
 8001cc4:	2000064c 	.word	0x2000064c
 8001cc8:	20000670 	.word	0x20000670
 8001ccc:	08008958 	.word	0x08008958
 8001cd0:	08008974 	.word	0x08008974
 8001cd4:	08008978 	.word	0x08008978
 8001cd8:	0800897c 	.word	0x0800897c

08001cdc <about_page>:
void about_page(){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b0b4      	sub	sp, #208	; 0xd0
 8001ce0:	af02      	add	r7, sp, #8
	setCursor(6, 1);
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2006      	movs	r0, #6
 8001ce6:	f7fe fd31 	bl	800074c <setCursor>
	print("POURIA");
 8001cea:	4819      	ldr	r0, [pc, #100]	; (8001d50 <about_page+0x74>)
 8001cec:	f7fe fd76 	bl	80007dc <print>
	setCursor(8, 2);
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	2008      	movs	r0, #8
 8001cf4:	f7fe fd2a 	bl	800074c <setCursor>
	print("ALI");
 8001cf8:	4816      	ldr	r0, [pc, #88]	; (8001d54 <about_page+0x78>)
 8001cfa:	f7fe fd6f 	bl	80007dc <print>
	char timeStr[100];
	char dateStr[100];

	setCursor(5, 3);
 8001cfe:	2103      	movs	r1, #3
 8001d00:	2005      	movs	r0, #5
 8001d02:	f7fe fd23 	bl	800074c <setCursor>
	print("          ");
 8001d06:	4814      	ldr	r0, [pc, #80]	; (8001d58 <about_page+0x7c>)
 8001d08:	f7fe fd68 	bl	80007dc <print>
	HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	4913      	ldr	r1, [pc, #76]	; (8001d5c <about_page+0x80>)
 8001d10:	4813      	ldr	r0, [pc, #76]	; (8001d60 <about_page+0x84>)
 8001d12:	f003 fa86 	bl	8005222 <HAL_RTC_GetTime>
//	HAL_RTC_GetDate(&hrtc, &mytime, RTC_FORMAT_BIN);

	sprintf(timeStr, "%02d:%02d:%02d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <about_page+0x80>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <about_page+0x80>)
 8001d1e:	785b      	ldrb	r3, [r3, #1]
 8001d20:	4619      	mov	r1, r3
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <about_page+0x80>)
 8001d24:	789b      	ldrb	r3, [r3, #2]
 8001d26:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	490d      	ldr	r1, [pc, #52]	; (8001d64 <about_page+0x88>)
 8001d30:	f005 fc30 	bl	8007594 <siprintf>

	setCursor(5, 3);
 8001d34:	2103      	movs	r1, #3
 8001d36:	2005      	movs	r0, #5
 8001d38:	f7fe fd08 	bl	800074c <setCursor>
	print(timeStr);
 8001d3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fd4b 	bl	80007dc <print>

}
 8001d46:	bf00      	nop
 8001d48:	37c8      	adds	r7, #200	; 0xc8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	08008980 	.word	0x08008980
 8001d54:	08008988 	.word	0x08008988
 8001d58:	0800898c 	.word	0x0800898c
 8001d5c:	2000065c 	.word	0x2000065c
 8001d60:	20000208 	.word	0x20000208
 8001d64:	08008998 	.word	0x08008998

08001d68 <setting_page>:

void setting_page(){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	setCursor(6, 1);
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	2006      	movs	r0, #6
 8001d70:	f7fe fcec 	bl	800074c <setCursor>
	print("KHALI");
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <setting_page+0x18>)
 8001d76:	f7fe fd31 	bl	80007dc <print>

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	080089a8 	.word	0x080089a8

08001d84 <menu>:
//			pageflag = 1;
//
//		}
//}

void menu(){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0

	setCursor(1, 0);
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f7fe fcde 	bl	800074c <setCursor>
	print("MENU:");
 8001d90:	481f      	ldr	r0, [pc, #124]	; (8001e10 <menu+0x8c>)
 8001d92:	f7fe fd23 	bl	80007dc <print>
	setCursor(1, 1);
 8001d96:	2101      	movs	r1, #1
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7fe fcd7 	bl	800074c <setCursor>
	print("PLAY");
 8001d9e:	481d      	ldr	r0, [pc, #116]	; (8001e14 <menu+0x90>)
 8001da0:	f7fe fd1c 	bl	80007dc <print>
	setCursor(1, 2);
 8001da4:	2102      	movs	r1, #2
 8001da6:	2001      	movs	r0, #1
 8001da8:	f7fe fcd0 	bl	800074c <setCursor>
	print("SETTING");
 8001dac:	481a      	ldr	r0, [pc, #104]	; (8001e18 <menu+0x94>)
 8001dae:	f7fe fd15 	bl	80007dc <print>
	setCursor(1, 3);
 8001db2:	2103      	movs	r1, #3
 8001db4:	2001      	movs	r0, #1
 8001db6:	f7fe fcc9 	bl	800074c <setCursor>
	print("ABOUT");
 8001dba:	4818      	ldr	r0, [pc, #96]	; (8001e1c <menu+0x98>)
 8001dbc:	f7fe fd0e 	bl	80007dc <print>
	setCursor(0, 0);
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7fe fcc2 	bl	800074c <setCursor>
	print(" ");
 8001dc8:	4815      	ldr	r0, [pc, #84]	; (8001e20 <menu+0x9c>)
 8001dca:	f7fe fd07 	bl	80007dc <print>
	setCursor(0, 1);
 8001dce:	2101      	movs	r1, #1
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7fe fcbb 	bl	800074c <setCursor>
	print(" ");
 8001dd6:	4812      	ldr	r0, [pc, #72]	; (8001e20 <menu+0x9c>)
 8001dd8:	f7fe fd00 	bl	80007dc <print>
	setCursor(0, 2);
 8001ddc:	2102      	movs	r1, #2
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7fe fcb4 	bl	800074c <setCursor>
	print(" ");
 8001de4:	480e      	ldr	r0, [pc, #56]	; (8001e20 <menu+0x9c>)
 8001de6:	f7fe fcf9 	bl	80007dc <print>
	setCursor(0, 3);
 8001dea:	2103      	movs	r1, #3
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7fe fcad 	bl	800074c <setCursor>
	print(" ");
 8001df2:	480b      	ldr	r0, [pc, #44]	; (8001e20 <menu+0x9c>)
 8001df4:	f7fe fcf2 	bl	80007dc <print>
	setCursor(0, menu_curser_r);
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <menu+0xa0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7fe fca4 	bl	800074c <setCursor>
	print(">");
 8001e04:	4808      	ldr	r0, [pc, #32]	; (8001e28 <menu+0xa4>)
 8001e06:	f7fe fce9 	bl	80007dc <print>

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	080089b0 	.word	0x080089b0
 8001e14:	080089b8 	.word	0x080089b8
 8001e18:	080089c0 	.word	0x080089c0
 8001e1c:	080089c8 	.word	0x080089c8
 8001e20:	08008978 	.word	0x08008978
 8001e24:	20000004 	.word	0x20000004
 8001e28:	080089d0 	.word	0x080089d0

08001e2c <programLoop>:

void programLoop() {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
//    seven_segment_refresh();

    update_lcd();
 8001e30:	f7ff fe96 	bl	8001b60 <update_lcd>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d110      	bne.n	8001e6c <HAL_TIM_PeriodElapsedCallback+0x34>
//		update_lcd();
		seven_segment_refresh();
 8001e4a:	f7ff fbcd 	bl	80015e8 <seven_segment_refresh>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8001e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e52:	4809      	ldr	r0, [pc, #36]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001e54:	f001 fa7a 	bl	800334c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8001e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e5c:	4806      	ldr	r0, [pc, #24]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001e5e:	f001 fa75 	bl	800334c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8001e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e66:	4804      	ldr	r0, [pc, #16]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001e68:	f001 fa70 	bl	800334c <HAL_GPIO_TogglePin>

	}

}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40000800 	.word	0x40000800
 8001e78:	48001000 	.word	0x48001000

08001e7c <change_dir>:


void change_dir(int player){
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	if (player == 1){
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d119      	bne.n	8001ebe <change_dir+0x42>
		int new_dir = player1.direction + 1;
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <change_dir+0x88>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
		if(new_dir == 5){
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d101      	bne.n	8001e9c <change_dir+0x20>
			new_dir = 1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
		}
		player1.direction = new_dir;
 8001e9c:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <change_dir+0x88>)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	60d3      	str	r3, [r2, #12]
		lcd[player1.position_x][player1.position_y] = player1.direction;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <change_dir+0x88>)
 8001ea4:	68d9      	ldr	r1, [r3, #12]
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <change_dir+0x88>)
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <change_dir+0x88>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	b2c8      	uxtb	r0, r1
 8001eb0:	4915      	ldr	r1, [pc, #84]	; (8001f08 <change_dir+0x8c>)
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	440a      	add	r2, r1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4602      	mov	r2, r0
 8001eba:	701a      	strb	r2, [r3, #0]
		}
		player2.direction = new_dir;
		lcd[player2.position_x][player2.position_y] = player2.direction;

	}
}
 8001ebc:	e01b      	b.n	8001ef6 <change_dir+0x7a>
	}else if (player == 2){
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d118      	bne.n	8001ef6 <change_dir+0x7a>
		int new_dir = player2.direction + 1;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <change_dir+0x90>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
		if(new_dir == 5){
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d101      	bne.n	8001ed6 <change_dir+0x5a>
			new_dir = 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
		player2.direction = new_dir;
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <change_dir+0x90>)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	60d3      	str	r3, [r2, #12]
		lcd[player2.position_x][player2.position_y] = player2.direction;
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <change_dir+0x90>)
 8001ede:	68d9      	ldr	r1, [r3, #12]
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <change_dir+0x90>)
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <change_dir+0x90>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	b2c8      	uxtb	r0, r1
 8001eea:	4907      	ldr	r1, [pc, #28]	; (8001f08 <change_dir+0x8c>)
 8001eec:	0092      	lsls	r2, r2, #2
 8001eee:	440a      	add	r2, r1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000048 	.word	0x20000048
 8001f08:	20000670 	.word	0x20000670
 8001f0c:	20000068 	.word	0x20000068

08001f10 <boom>:

void boom(int player){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0); //Temp
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f1e:	480d      	ldr	r0, [pc, #52]	; (8001f54 <boom+0x44>)
 8001f20:	f001 f9fc 	bl	800331c <HAL_GPIO_WritePin>
	int dir;
	if (player == 1){
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d108      	bne.n	8001f3c <boom+0x2c>
		dir = player1.direction;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <boom+0x48>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	60fb      	str	r3, [r7, #12]
		player1.arrow--;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <boom+0x48>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <boom+0x48>)
 8001f38:	6193      	str	r3, [r2, #24]
		dir = player2.direction;
		player2.arrow--;
	}
//entesab be array

}
 8001f3a:	e007      	b.n	8001f4c <boom+0x3c>
		dir = player2.direction;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <boom+0x4c>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60fb      	str	r3, [r7, #12]
		player2.arrow--;
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <boom+0x4c>)
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <boom+0x4c>)
 8001f4a:	6193      	str	r3, [r2, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	48001000 	.word	0x48001000
 8001f58:	20000048 	.word	0x20000048
 8001f5c:	20000068 	.word	0x20000068

08001f60 <collect>:

int sev_result = 0;
void collect(uint8_t pos, int player){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
	if (pos == num_extra_bullet){
 8001f6c:	79fa      	ldrb	r2, [r7, #7]
 8001f6e:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <collect+0x9c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d10e      	bne.n	8001f94 <collect+0x34>
		if (player == 1)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <collect+0x28>
			player1.arrow+=1;
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <collect+0xa0>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	3301      	adds	r3, #1
 8001f82:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <collect+0xa0>)
 8001f84:	6193      	str	r3, [r2, #24]
 8001f86:	e018      	b.n	8001fba <collect+0x5a>
		else
			player2.arrow+=1;
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <collect+0xa4>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <collect+0xa4>)
 8001f90:	6193      	str	r3, [r2, #24]
 8001f92:	e012      	b.n	8001fba <collect+0x5a>
	}else if (pos == num_health){
 8001f94:	79fa      	ldrb	r2, [r7, #7]
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <collect+0xa8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d10d      	bne.n	8001fba <collect+0x5a>
		if (player == 1)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <collect+0x50>
			player1.health+=1;
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <collect+0xa0>)
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <collect+0xa0>)
 8001fac:	6153      	str	r3, [r2, #20]
 8001fae:	e004      	b.n	8001fba <collect+0x5a>
		else
			player2.health+=1;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <collect+0xa4>)
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4a13      	ldr	r2, [pc, #76]	; (8002004 <collect+0xa4>)
 8001fb8:	6153      	str	r3, [r2, #20]
//	uint8_t c = player1.arrow;
//	uint8_t d = player1.health;
//	int results[4] = {d,c,b,a};
//	seven_segment_set_num(results);

	sev_result = player2.arrow * 1000 + player2.health * 100 + player1.arrow * 10 + player1.health;
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <collect+0xa4>)
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fc2:	fb03 f202 	mul.w	r2, r3, r2
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <collect+0xa4>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	2164      	movs	r1, #100	; 0x64
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	18d1      	adds	r1, r2, r3
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <collect+0xa0>)
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	18ca      	adds	r2, r1, r3
 8001fe0:	4b07      	ldr	r3, [pc, #28]	; (8002000 <collect+0xa0>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a09      	ldr	r2, [pc, #36]	; (800200c <collect+0xac>)
 8001fe8:	6013      	str	r3, [r2, #0]
	setNumber(sev_result);
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <collect+0xac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fb28 	bl	8001644 <setNumber>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000098 	.word	0x20000098
 8002000:	20000048 	.word	0x20000048
 8002004:	20000068 	.word	0x20000068
 8002008:	200000a0 	.word	0x200000a0
 800200c:	20000788 	.word	0x20000788

08002010 <move>:

void move(int player){
 8002010:	b580      	push	{r7, lr}
 8002012:	b094      	sub	sp, #80	; 0x50
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	int dir;

	if (player == 1){
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	f040 8148 	bne.w	80022b0 <move+0x2a0>
		dir = player1.direction;
 8002020:	4b9f      	ldr	r3, [pc, #636]	; (80022a0 <move+0x290>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 8002026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002028:	2b01      	cmp	r3, #1
 800202a:	d14b      	bne.n	80020c4 <move+0xb4>
			int curr_col = player1.position_x;
 800202c:	4b9c      	ldr	r3, [pc, #624]	; (80022a0 <move+0x290>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	613b      	str	r3, [r7, #16]
			int curr_row = player1.position_y;
 8002032:	4b9b      	ldr	r3, [pc, #620]	; (80022a0 <move+0x290>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	60fb      	str	r3, [r7, #12]
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f340 8275 	ble.w	800252a <move+0x51a>
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	3b01      	subs	r3, #1
 8002044:	4a97      	ldr	r2, [pc, #604]	; (80022a4 <move+0x294>)
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	441a      	add	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b95      	ldr	r3, [pc, #596]	; (80022a8 <move+0x298>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	f000 8267 	beq.w	800252a <move+0x51a>
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	3b01      	subs	r3, #1
 8002060:	4a90      	ldr	r2, [pc, #576]	; (80022a4 <move+0x294>)
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	441a      	add	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	4b8f      	ldr	r3, [pc, #572]	; (80022ac <move+0x29c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	f000 8259 	beq.w	800252a <move+0x51a>
				collect(lcd[curr_col - 1][curr_row], 1); //TODO add prizes
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	3b01      	subs	r3, #1
 800207c:	4a89      	ldr	r2, [pc, #548]	; (80022a4 <move+0x294>)
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	441a      	add	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4413      	add	r3, r2
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2101      	movs	r1, #1
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff68 	bl	8001f60 <collect>
				lcd[curr_col][curr_row] = 0;
 8002090:	4a84      	ldr	r2, [pc, #528]	; (80022a4 <move+0x294>)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	441a      	add	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player1.direction;
 80020a0:	4b7f      	ldr	r3, [pc, #508]	; (80022a0 <move+0x290>)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b2d1      	uxtb	r1, r2
 80020aa:	4a7e      	ldr	r2, [pc, #504]	; (80022a4 <move+0x294>)
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	441a      	add	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	460a      	mov	r2, r1
 80020b6:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x - 1;
 80020b8:	4b79      	ldr	r3, [pc, #484]	; (80022a0 <move+0x290>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	3b01      	subs	r3, #1
 80020be:	4a78      	ldr	r2, [pc, #480]	; (80022a0 <move+0x290>)
 80020c0:	6053      	str	r3, [r2, #4]
				lcd[curr_col][curr_row + 1] = player2.direction;
				player2.position_y = player2.position_y + 1;
			}
		}
	}
}
 80020c2:	e232      	b.n	800252a <move+0x51a>
		}else if (dir == 2){
 80020c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d14b      	bne.n	8002162 <move+0x152>
			int curr_col = player1.position_x;
 80020ca:	4b75      	ldr	r3, [pc, #468]	; (80022a0 <move+0x290>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	61bb      	str	r3, [r7, #24]
			int curr_row = player1.position_y;
 80020d0:	4b73      	ldr	r3, [pc, #460]	; (80022a0 <move+0x290>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	617b      	str	r3, [r7, #20]
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f340 8226 	ble.w	800252a <move+0x51a>
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	4970      	ldr	r1, [pc, #448]	; (80022a4 <move+0x294>)
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	440a      	add	r2, r1
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <move+0x298>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	f000 8218 	beq.w	800252a <move+0x51a>
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	4969      	ldr	r1, [pc, #420]	; (80022a4 <move+0x294>)
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	440a      	add	r2, r1
 8002106:	4413      	add	r3, r2
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	4b67      	ldr	r3, [pc, #412]	; (80022ac <move+0x29c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	f000 820a 	beq.w	800252a <move+0x51a>
				collect(lcd[curr_col][curr_row - 1], 1); //TODO add prizes
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3b01      	subs	r3, #1
 800211a:	4962      	ldr	r1, [pc, #392]	; (80022a4 <move+0x294>)
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	440a      	add	r2, r1
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2101      	movs	r1, #1
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff19 	bl	8001f60 <collect>
				lcd[curr_col][curr_row] = 0;
 800212e:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <move+0x294>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	441a      	add	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	4413      	add	r3, r2
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player1.direction;
 800213e:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <move+0x290>)
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3b01      	subs	r3, #1
 8002146:	b2d0      	uxtb	r0, r2
 8002148:	4956      	ldr	r1, [pc, #344]	; (80022a4 <move+0x294>)
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	0092      	lsls	r2, r2, #2
 800214e:	440a      	add	r2, r1
 8002150:	4413      	add	r3, r2
 8002152:	4602      	mov	r2, r0
 8002154:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y - 1;
 8002156:	4b52      	ldr	r3, [pc, #328]	; (80022a0 <move+0x290>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	3b01      	subs	r3, #1
 800215c:	4a50      	ldr	r2, [pc, #320]	; (80022a0 <move+0x290>)
 800215e:	6093      	str	r3, [r2, #8]
}
 8002160:	e1e3      	b.n	800252a <move+0x51a>
		}else if (dir == 3){
 8002162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002164:	2b03      	cmp	r3, #3
 8002166:	d14b      	bne.n	8002200 <move+0x1f0>
			int curr_col = player1.position_x;
 8002168:	4b4d      	ldr	r3, [pc, #308]	; (80022a0 <move+0x290>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	623b      	str	r3, [r7, #32]
			int curr_row = player1.position_y;
 800216e:	4b4c      	ldr	r3, [pc, #304]	; (80022a0 <move+0x290>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61fb      	str	r3, [r7, #28]
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	2b12      	cmp	r3, #18
 8002178:	f300 81d7 	bgt.w	800252a <move+0x51a>
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	3301      	adds	r3, #1
 8002180:	4a48      	ldr	r2, [pc, #288]	; (80022a4 <move+0x294>)
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	441a      	add	r2, r3
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	4413      	add	r3, r2
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4b46      	ldr	r3, [pc, #280]	; (80022a8 <move+0x298>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	f000 81c9 	beq.w	800252a <move+0x51a>
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	3301      	adds	r3, #1
 800219c:	4a41      	ldr	r2, [pc, #260]	; (80022a4 <move+0x294>)
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	441a      	add	r2, r3
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	4413      	add	r3, r2
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b40      	ldr	r3, [pc, #256]	; (80022ac <move+0x29c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	f000 81bb 	beq.w	800252a <move+0x51a>
				collect(lcd[curr_col + 1][curr_row], 1); //TODO add prizes
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	3301      	adds	r3, #1
 80021b8:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <move+0x294>)
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	441a      	add	r2, r3
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4413      	add	r3, r2
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2101      	movs	r1, #1
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff feca 	bl	8001f60 <collect>
				lcd[curr_col][curr_row] = 0;
 80021cc:	4a35      	ldr	r2, [pc, #212]	; (80022a4 <move+0x294>)
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	441a      	add	r2, r3
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	4413      	add	r3, r2
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player1.direction;
 80021dc:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <move+0x290>)
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	3301      	adds	r3, #1
 80021e4:	b2d1      	uxtb	r1, r2
 80021e6:	4a2f      	ldr	r2, [pc, #188]	; (80022a4 <move+0x294>)
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	441a      	add	r2, r3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	4413      	add	r3, r2
 80021f0:	460a      	mov	r2, r1
 80021f2:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x + 1;
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <move+0x290>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	3301      	adds	r3, #1
 80021fa:	4a29      	ldr	r2, [pc, #164]	; (80022a0 <move+0x290>)
 80021fc:	6053      	str	r3, [r2, #4]
}
 80021fe:	e194      	b.n	800252a <move+0x51a>
		}else if (dir == 4){
 8002200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002202:	2b04      	cmp	r3, #4
 8002204:	f040 8191 	bne.w	800252a <move+0x51a>
			int curr_col = player1.position_x;
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <move+0x290>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
			int curr_row = player1.position_y;
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <move+0x290>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	2b02      	cmp	r3, #2
 8002218:	f300 8187 	bgt.w	800252a <move+0x51a>
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	3301      	adds	r3, #1
 8002220:	4920      	ldr	r1, [pc, #128]	; (80022a4 <move+0x294>)
 8002222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002224:	0092      	lsls	r2, r2, #2
 8002226:	440a      	add	r2, r1
 8002228:	4413      	add	r3, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <move+0x298>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	f000 8179 	beq.w	800252a <move+0x51a>
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	3301      	adds	r3, #1
 800223c:	4919      	ldr	r1, [pc, #100]	; (80022a4 <move+0x294>)
 800223e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002240:	0092      	lsls	r2, r2, #2
 8002242:	440a      	add	r2, r1
 8002244:	4413      	add	r3, r2
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <move+0x29c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	f000 816b 	beq.w	800252a <move+0x51a>
				collect(lcd[curr_col][curr_row + 1], 1); //TODO add prizes
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	3301      	adds	r3, #1
 8002258:	4912      	ldr	r1, [pc, #72]	; (80022a4 <move+0x294>)
 800225a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	440a      	add	r2, r1
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fe7a 	bl	8001f60 <collect>
				lcd[curr_col][curr_row] = 0;
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <move+0x294>)
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	441a      	add	r2, r3
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	4413      	add	r3, r2
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player1.direction;
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <move+0x290>)
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	3301      	adds	r3, #1
 8002284:	b2d0      	uxtb	r0, r2
 8002286:	4907      	ldr	r1, [pc, #28]	; (80022a4 <move+0x294>)
 8002288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800228a:	0092      	lsls	r2, r2, #2
 800228c:	440a      	add	r2, r1
 800228e:	4413      	add	r3, r2
 8002290:	4602      	mov	r2, r0
 8002292:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y + 1;
 8002294:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <move+0x290>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	3301      	adds	r3, #1
 800229a:	4a01      	ldr	r2, [pc, #4]	; (80022a0 <move+0x290>)
 800229c:	6093      	str	r3, [r2, #8]
}
 800229e:	e144      	b.n	800252a <move+0x51a>
 80022a0:	20000048 	.word	0x20000048
 80022a4:	20000670 	.word	0x20000670
 80022a8:	200000ac 	.word	0x200000ac
 80022ac:	200000a8 	.word	0x200000a8
	}else if (player == 2){
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	f040 8139 	bne.w	800252a <move+0x51a>
		dir = player2.direction;
 80022b8:	4b9e      	ldr	r3, [pc, #632]	; (8002534 <move+0x524>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 80022be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d14b      	bne.n	800235c <move+0x34c>
			int curr_col = player2.position_x;
 80022c4:	4b9b      	ldr	r3, [pc, #620]	; (8002534 <move+0x524>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
			int curr_row = player2.position_y;
 80022ca:	4b9a      	ldr	r3, [pc, #616]	; (8002534 <move+0x524>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 80022d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f340 8129 	ble.w	800252a <move+0x51a>
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	3b01      	subs	r3, #1
 80022dc:	4a96      	ldr	r2, [pc, #600]	; (8002538 <move+0x528>)
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	441a      	add	r2, r3
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	4413      	add	r3, r2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b94      	ldr	r3, [pc, #592]	; (800253c <move+0x52c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	f000 811b 	beq.w	800252a <move+0x51a>
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	3b01      	subs	r3, #1
 80022f8:	4a8f      	ldr	r2, [pc, #572]	; (8002538 <move+0x528>)
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	441a      	add	r2, r3
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b8e      	ldr	r3, [pc, #568]	; (8002540 <move+0x530>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	f000 810d 	beq.w	800252a <move+0x51a>
				collect(lcd[curr_col - 1][curr_row], 2); //TODO add prizes
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	3b01      	subs	r3, #1
 8002314:	4a88      	ldr	r2, [pc, #544]	; (8002538 <move+0x528>)
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	441a      	add	r2, r3
 800231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231c:	4413      	add	r3, r2
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2102      	movs	r1, #2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fe1c 	bl	8001f60 <collect>
				lcd[curr_col][curr_row] = 0;
 8002328:	4a83      	ldr	r2, [pc, #524]	; (8002538 <move+0x528>)
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	441a      	add	r2, r3
 8002330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002332:	4413      	add	r3, r2
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player2.direction;
 8002338:	4b7e      	ldr	r3, [pc, #504]	; (8002534 <move+0x524>)
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	3b01      	subs	r3, #1
 8002340:	b2d1      	uxtb	r1, r2
 8002342:	4a7d      	ldr	r2, [pc, #500]	; (8002538 <move+0x528>)
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	441a      	add	r2, r3
 8002348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234a:	4413      	add	r3, r2
 800234c:	460a      	mov	r2, r1
 800234e:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x - 1;
 8002350:	4b78      	ldr	r3, [pc, #480]	; (8002534 <move+0x524>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	3b01      	subs	r3, #1
 8002356:	4a77      	ldr	r2, [pc, #476]	; (8002534 <move+0x524>)
 8002358:	6053      	str	r3, [r2, #4]
}
 800235a:	e0e6      	b.n	800252a <move+0x51a>
		}else if (dir == 2){
 800235c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235e:	2b02      	cmp	r3, #2
 8002360:	d14b      	bne.n	80023fa <move+0x3ea>
			int curr_col = player2.position_x;
 8002362:	4b74      	ldr	r3, [pc, #464]	; (8002534 <move+0x524>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	63bb      	str	r3, [r7, #56]	; 0x38
			int curr_row = player2.position_y;
 8002368:	4b72      	ldr	r3, [pc, #456]	; (8002534 <move+0x524>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 800236e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002370:	2b00      	cmp	r3, #0
 8002372:	f340 80da 	ble.w	800252a <move+0x51a>
 8002376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002378:	3b01      	subs	r3, #1
 800237a:	496f      	ldr	r1, [pc, #444]	; (8002538 <move+0x528>)
 800237c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800237e:	0092      	lsls	r2, r2, #2
 8002380:	440a      	add	r2, r1
 8002382:	4413      	add	r3, r2
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	4b6c      	ldr	r3, [pc, #432]	; (800253c <move+0x52c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	f000 80cc 	beq.w	800252a <move+0x51a>
 8002392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002394:	3b01      	subs	r3, #1
 8002396:	4968      	ldr	r1, [pc, #416]	; (8002538 <move+0x528>)
 8002398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800239a:	0092      	lsls	r2, r2, #2
 800239c:	440a      	add	r2, r1
 800239e:	4413      	add	r3, r2
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b66      	ldr	r3, [pc, #408]	; (8002540 <move+0x530>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	f000 80be 	beq.w	800252a <move+0x51a>
				collect(lcd[curr_col][curr_row - 1], 2); //TODO add prizes
 80023ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b0:	3b01      	subs	r3, #1
 80023b2:	4961      	ldr	r1, [pc, #388]	; (8002538 <move+0x528>)
 80023b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	440a      	add	r2, r1
 80023ba:	4413      	add	r3, r2
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2102      	movs	r1, #2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fdcd 	bl	8001f60 <collect>
				lcd[curr_col][curr_row] = 0;
 80023c6:	4a5c      	ldr	r2, [pc, #368]	; (8002538 <move+0x528>)
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	441a      	add	r2, r3
 80023ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d0:	4413      	add	r3, r2
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player2.direction;
 80023d6:	4b57      	ldr	r3, [pc, #348]	; (8002534 <move+0x524>)
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023dc:	3b01      	subs	r3, #1
 80023de:	b2d0      	uxtb	r0, r2
 80023e0:	4955      	ldr	r1, [pc, #340]	; (8002538 <move+0x528>)
 80023e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	440a      	add	r2, r1
 80023e8:	4413      	add	r3, r2
 80023ea:	4602      	mov	r2, r0
 80023ec:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y - 1;
 80023ee:	4b51      	ldr	r3, [pc, #324]	; (8002534 <move+0x524>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	4a4f      	ldr	r2, [pc, #316]	; (8002534 <move+0x524>)
 80023f6:	6093      	str	r3, [r2, #8]
}
 80023f8:	e097      	b.n	800252a <move+0x51a>
		}else if (dir == 3){
 80023fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d149      	bne.n	8002494 <move+0x484>
			int curr_col = player2.position_x;
 8002400:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <move+0x524>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	643b      	str	r3, [r7, #64]	; 0x40
			int curr_row = player2.position_y;
 8002406:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <move+0x524>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 800240c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800240e:	2b12      	cmp	r3, #18
 8002410:	f300 808b 	bgt.w	800252a <move+0x51a>
 8002414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002416:	3301      	adds	r3, #1
 8002418:	4a47      	ldr	r2, [pc, #284]	; (8002538 <move+0x528>)
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	441a      	add	r2, r3
 800241e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002420:	4413      	add	r3, r2
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4b45      	ldr	r3, [pc, #276]	; (800253c <move+0x52c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d07d      	beq.n	800252a <move+0x51a>
 800242e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002430:	3301      	adds	r3, #1
 8002432:	4a41      	ldr	r2, [pc, #260]	; (8002538 <move+0x528>)
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	441a      	add	r2, r3
 8002438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243a:	4413      	add	r3, r2
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <move+0x530>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d070      	beq.n	800252a <move+0x51a>
				collect(lcd[curr_col + 1][curr_row], 2); //TODO add prizes
 8002448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800244a:	3301      	adds	r3, #1
 800244c:	4a3a      	ldr	r2, [pc, #232]	; (8002538 <move+0x528>)
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	441a      	add	r2, r3
 8002452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002454:	4413      	add	r3, r2
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2102      	movs	r1, #2
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fd80 	bl	8001f60 <collect>
				lcd[curr_col][curr_row] = 0;
 8002460:	4a35      	ldr	r2, [pc, #212]	; (8002538 <move+0x528>)
 8002462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	441a      	add	r2, r3
 8002468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246a:	4413      	add	r3, r2
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player2.direction;
 8002470:	4b30      	ldr	r3, [pc, #192]	; (8002534 <move+0x524>)
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002476:	3301      	adds	r3, #1
 8002478:	b2d1      	uxtb	r1, r2
 800247a:	4a2f      	ldr	r2, [pc, #188]	; (8002538 <move+0x528>)
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	441a      	add	r2, r3
 8002480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002482:	4413      	add	r3, r2
 8002484:	460a      	mov	r2, r1
 8002486:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x + 1;
 8002488:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <move+0x524>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	3301      	adds	r3, #1
 800248e:	4a29      	ldr	r2, [pc, #164]	; (8002534 <move+0x524>)
 8002490:	6053      	str	r3, [r2, #4]
}
 8002492:	e04a      	b.n	800252a <move+0x51a>
		}else if (dir == 4){
 8002494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002496:	2b04      	cmp	r3, #4
 8002498:	d147      	bne.n	800252a <move+0x51a>
			int curr_col = player2.position_x;
 800249a:	4b26      	ldr	r3, [pc, #152]	; (8002534 <move+0x524>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	64bb      	str	r3, [r7, #72]	; 0x48
			int curr_row = player2.position_y;
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <move+0x524>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	647b      	str	r3, [r7, #68]	; 0x44
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 80024a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	dc3e      	bgt.n	800252a <move+0x51a>
 80024ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ae:	3301      	adds	r3, #1
 80024b0:	4921      	ldr	r1, [pc, #132]	; (8002538 <move+0x528>)
 80024b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	440a      	add	r2, r1
 80024b8:	4413      	add	r3, r2
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b1f      	ldr	r3, [pc, #124]	; (800253c <move+0x52c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d031      	beq.n	800252a <move+0x51a>
 80024c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c8:	3301      	adds	r3, #1
 80024ca:	491b      	ldr	r1, [pc, #108]	; (8002538 <move+0x528>)
 80024cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	440a      	add	r2, r1
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <move+0x530>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d024      	beq.n	800252a <move+0x51a>
				collect(lcd[curr_col][curr_row + 1], 2); //TODO add prizes
 80024e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e2:	3301      	adds	r3, #1
 80024e4:	4914      	ldr	r1, [pc, #80]	; (8002538 <move+0x528>)
 80024e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024e8:	0092      	lsls	r2, r2, #2
 80024ea:	440a      	add	r2, r1
 80024ec:	4413      	add	r3, r2
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2102      	movs	r1, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fd34 	bl	8001f60 <collect>
				lcd[curr_col][curr_row] = 0;
 80024f8:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <move+0x528>)
 80024fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	441a      	add	r2, r3
 8002500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002502:	4413      	add	r3, r2
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player2.direction;
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <move+0x524>)
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800250e:	3301      	adds	r3, #1
 8002510:	b2d0      	uxtb	r0, r2
 8002512:	4909      	ldr	r1, [pc, #36]	; (8002538 <move+0x528>)
 8002514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002516:	0092      	lsls	r2, r2, #2
 8002518:	440a      	add	r2, r1
 800251a:	4413      	add	r3, r2
 800251c:	4602      	mov	r2, r0
 800251e:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y + 1;
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <move+0x524>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	3301      	adds	r3, #1
 8002526:	4a03      	ldr	r2, [pc, #12]	; (8002534 <move+0x524>)
 8002528:	6093      	str	r3, [r2, #8]
}
 800252a:	bf00      	nop
 800252c:	3750      	adds	r7, #80	; 0x50
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000068 	.word	0x20000068
 8002538:	20000670 	.word	0x20000670
 800253c:	200000ac 	.word	0x200000ac
 8002540:	200000a8 	.word	0x200000a8

08002544 <uart_rx_enable_it>:
char character;
char input[50];
int  index_arr = 0;
extern UART_HandleTypeDef huart1;

void uart_rx_enable_it(void) {
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &character, 1);
 8002548:	2201      	movs	r2, #1
 800254a:	4903      	ldr	r1, [pc, #12]	; (8002558 <uart_rx_enable_it+0x14>)
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <uart_rx_enable_it+0x18>)
 800254e:	f003 fd9b 	bl	8006088 <HAL_UART_Receive_IT>
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2000078c 	.word	0x2000078c
 800255c:	200002d8 	.word	0x200002d8

08002560 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002560:	b580      	push	{r7, lr}
 8002562:	b09c      	sub	sp, #112	; 0x70
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	char data[100];

    if (huart->Instance == USART1){
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a13      	ldr	r2, [pc, #76]	; (80025bc <HAL_UART_RxCpltCallback+0x5c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d11f      	bne.n	80025b2 <HAL_UART_RxCpltCallback+0x52>
    	if(character != 10){
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_UART_RxCpltCallback+0x60>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b0a      	cmp	r3, #10
 8002578:	d009      	beq.n	800258e <HAL_UART_RxCpltCallback+0x2e>
    		input[index_arr++] = character;
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_UART_RxCpltCallback+0x64>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	4910      	ldr	r1, [pc, #64]	; (80025c4 <HAL_UART_RxCpltCallback+0x64>)
 8002582:	600a      	str	r2, [r1, #0]
 8002584:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <HAL_UART_RxCpltCallback+0x60>)
 8002586:	7811      	ldrb	r1, [r2, #0]
 8002588:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <HAL_UART_RxCpltCallback+0x68>)
 800258a:	54d1      	strb	r1, [r2, r3]
 800258c:	e00f      	b.n	80025ae <HAL_UART_RxCpltCallback+0x4e>
    	}else{
			input[index_arr++] = '\0';
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <HAL_UART_RxCpltCallback+0x64>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	490b      	ldr	r1, [pc, #44]	; (80025c4 <HAL_UART_RxCpltCallback+0x64>)
 8002596:	600a      	str	r2, [r1, #0]
 8002598:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <HAL_UART_RxCpltCallback+0x68>)
 800259a:	2100      	movs	r1, #0
 800259c:	54d1      	strb	r1, [r2, r3]
			index_arr = 0;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_UART_RxCpltCallback+0x64>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
			int value;
			HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 80025a4:	2200      	movs	r2, #0
 80025a6:	4909      	ldr	r1, [pc, #36]	; (80025cc <HAL_UART_RxCpltCallback+0x6c>)
 80025a8:	4809      	ldr	r0, [pc, #36]	; (80025d0 <HAL_UART_RxCpltCallback+0x70>)
 80025aa:	f002 fe3a 	bl	8005222 <HAL_RTC_GetTime>
//			sprintf(timeStr, "%02d:%02d:%02d", mytime.Hours, mytime.Minutes, mytime.Seconds);
		}
		uart_rx_enable_it();
 80025ae:	f7ff ffc9 	bl	8002544 <uart_rx_enable_it>
    }
}
 80025b2:	bf00      	nop
 80025b4:	3770      	adds	r7, #112	; 0x70
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40013800 	.word	0x40013800
 80025c0:	2000078c 	.word	0x2000078c
 80025c4:	200007c4 	.word	0x200007c4
 80025c8:	20000790 	.word	0x20000790
 80025cc:	2000065c 	.word	0x2000065c
 80025d0:	20000208 	.word	0x20000208

080025d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_MspInit+0x44>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <HAL_MspInit+0x44>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6193      	str	r3, [r2, #24]
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_MspInit+0x44>)
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_MspInit+0x44>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4a08      	ldr	r2, [pc, #32]	; (8002618 <HAL_MspInit+0x44>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	61d3      	str	r3, [r2, #28]
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_MspInit+0x44>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800260a:	2007      	movs	r0, #7
 800260c:	f000 fc3c 	bl	8002e88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000

0800261c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a17      	ldr	r2, [pc, #92]	; (8002698 <HAL_I2C_MspInit+0x7c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d127      	bne.n	800268e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <HAL_I2C_MspInit+0x80>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	4a16      	ldr	r2, [pc, #88]	; (800269c <HAL_I2C_MspInit+0x80>)
 8002644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002648:	6153      	str	r3, [r2, #20]
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_I2C_MspInit+0x80>)
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002656:	23c0      	movs	r3, #192	; 0xc0
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800265a:	2312      	movs	r3, #18
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800265e:	2301      	movs	r3, #1
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002666:	2304      	movs	r3, #4
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	480b      	ldr	r0, [pc, #44]	; (80026a0 <HAL_I2C_MspInit+0x84>)
 8002672:	f000 fcc1 	bl	8002ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_I2C_MspInit+0x80>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_I2C_MspInit+0x80>)
 800267c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002680:	61d3      	str	r3, [r2, #28]
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_I2C_MspInit+0x80>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800268e:	bf00      	nop
 8002690:	3728      	adds	r7, #40	; 0x28
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40005400 	.word	0x40005400
 800269c:	40021000 	.word	0x40021000
 80026a0:	48000400 	.word	0x48000400

080026a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <HAL_RTC_MspInit+0x44>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d111      	bne.n	80026da <HAL_RTC_MspInit+0x36>
 80026b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ba:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026c4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <HAL_RTC_MspInit+0x48>)
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	461a      	mov	r2, r3
 80026d6:	2301      	movs	r3, #1
 80026d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40002800 	.word	0x40002800
 80026ec:	10908100 	.word	0x10908100

080026f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a17      	ldr	r2, [pc, #92]	; (800276c <HAL_SPI_MspInit+0x7c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d128      	bne.n	8002764 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002712:	4b17      	ldr	r3, [pc, #92]	; (8002770 <HAL_SPI_MspInit+0x80>)
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	4a16      	ldr	r2, [pc, #88]	; (8002770 <HAL_SPI_MspInit+0x80>)
 8002718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800271c:	6193      	str	r3, [r2, #24]
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <HAL_SPI_MspInit+0x80>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_SPI_MspInit+0x80>)
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	4a10      	ldr	r2, [pc, #64]	; (8002770 <HAL_SPI_MspInit+0x80>)
 8002730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002734:	6153      	str	r3, [r2, #20]
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <HAL_SPI_MspInit+0x80>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002742:	23e0      	movs	r3, #224	; 0xe0
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002752:	2305      	movs	r3, #5
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002760:	f000 fc4a 	bl	8002ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002764:	bf00      	nop
 8002766:	3728      	adds	r7, #40	; 0x28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40013000 	.word	0x40013000
 8002770:	40021000 	.word	0x40021000

08002774 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0d      	ldr	r2, [pc, #52]	; (80027b8 <HAL_TIM_Base_MspInit+0x44>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d113      	bne.n	80027ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <HAL_TIM_Base_MspInit+0x48>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <HAL_TIM_Base_MspInit+0x48>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	61d3      	str	r3, [r2, #28]
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_TIM_Base_MspInit+0x48>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 2);
 800279e:	2202      	movs	r2, #2
 80027a0:	2100      	movs	r1, #0
 80027a2:	201e      	movs	r0, #30
 80027a4:	f000 fb7b 	bl	8002e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027a8:	201e      	movs	r0, #30
 80027aa:	f000 fb94 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40000800 	.word	0x40000800
 80027bc:	40021000 	.word	0x40021000

080027c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2a      	ldr	r2, [pc, #168]	; (8002888 <HAL_UART_MspInit+0xc8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d14d      	bne.n	800287e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027e2:	4b2a      	ldr	r3, [pc, #168]	; (800288c <HAL_UART_MspInit+0xcc>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	4a29      	ldr	r2, [pc, #164]	; (800288c <HAL_UART_MspInit+0xcc>)
 80027e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ec:	6193      	str	r3, [r2, #24]
 80027ee:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_UART_MspInit+0xcc>)
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_UART_MspInit+0xcc>)
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	4a23      	ldr	r2, [pc, #140]	; (800288c <HAL_UART_MspInit+0xcc>)
 8002800:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002804:	6153      	str	r3, [r2, #20]
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <HAL_UART_MspInit+0xcc>)
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <HAL_UART_MspInit+0xcc>)
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	4a1d      	ldr	r2, [pc, #116]	; (800288c <HAL_UART_MspInit+0xcc>)
 8002818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281c:	6153      	str	r3, [r2, #20]
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_UART_MspInit+0xcc>)
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC5     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800282a:	2320      	movs	r3, #32
 800282c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800283a:	2307      	movs	r3, #7
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	4812      	ldr	r0, [pc, #72]	; (8002890 <HAL_UART_MspInit+0xd0>)
 8002846:	f000 fbd7 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800284a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800284e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800285c:	2307      	movs	r3, #7
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	4619      	mov	r1, r3
 8002866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800286a:	f000 fbc5 	bl	8002ff8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	2025      	movs	r0, #37	; 0x25
 8002874:	f000 fb13 	bl	8002e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002878:	2025      	movs	r0, #37	; 0x25
 800287a:	f000 fb2c 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800287e:	bf00      	nop
 8002880:	3728      	adds	r7, #40	; 0x28
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40013800 	.word	0x40013800
 800288c:	40021000 	.word	0x40021000
 8002890:	48000800 	.word	0x48000800

08002894 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a18      	ldr	r2, [pc, #96]	; (8002914 <HAL_PCD_MspInit+0x80>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d129      	bne.n	800290a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <HAL_PCD_MspInit+0x84>)
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	4a17      	ldr	r2, [pc, #92]	; (8002918 <HAL_PCD_MspInit+0x84>)
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c0:	6153      	str	r3, [r2, #20]
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_PCD_MspInit+0x84>)
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80028ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80028e0:	230e      	movs	r3, #14
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	4619      	mov	r1, r3
 80028ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ee:	f000 fb83 	bl	8002ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_PCD_MspInit+0x84>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <HAL_PCD_MspInit+0x84>)
 80028f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028fc:	61d3      	str	r3, [r2, #28]
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_PCD_MspInit+0x84>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800290a:	bf00      	nop
 800290c:	3728      	adds	r7, #40	; 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40005c00 	.word	0x40005c00
 8002918:	40021000 	.word	0x40021000

0800291c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <NMI_Handler+0x4>

08002922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <HardFault_Handler+0x4>

08002928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <MemManage_Handler+0x4>

0800292e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002932:	e7fe      	b.n	8002932 <BusFault_Handler+0x4>

08002934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <UsageFault_Handler+0x4>

0800293a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002968:	f000 f97a 	bl	8002c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}

08002970 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002974:	2001      	movs	r0, #1
 8002976:	f000 fd03 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}

0800297e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002982:	2002      	movs	r0, #2
 8002984:	f000 fcfc 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}

0800298c <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002990:	2004      	movs	r0, #4
 8002992:	f000 fcf5 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}

0800299a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800299e:	2008      	movs	r0, #8
 80029a0:	f000 fcee 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <TIM4_IRQHandler+0x10>)
 80029ae:	f002 ff45 	bl	800583c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	2000028c 	.word	0x2000028c

080029bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <USART1_IRQHandler+0x10>)
 80029c2:	f003 fba5 	bl	8006110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200002d8 	.word	0x200002d8

080029d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return 1;
 80029d4:	2301      	movs	r3, #1
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <_kill>:

int _kill(int pid, int sig)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029ea:	f004 fd63 	bl	80074b4 <__errno>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2216      	movs	r2, #22
 80029f2:	601a      	str	r2, [r3, #0]
  return -1;
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <_exit>:

void _exit (int status)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ffe7 	bl	80029e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a12:	e7fe      	b.n	8002a12 <_exit+0x12>

08002a14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	e00a      	b.n	8002a3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a26:	f3af 8000 	nop.w
 8002a2a:	4601      	mov	r1, r0
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	60ba      	str	r2, [r7, #8]
 8002a32:	b2ca      	uxtb	r2, r1
 8002a34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	dbf0      	blt.n	8002a26 <_read+0x12>
  }

  return len;
 8002a44:	687b      	ldr	r3, [r7, #4]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e009      	b.n	8002a74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	60ba      	str	r2, [r7, #8]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3301      	adds	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	dbf1      	blt.n	8002a60 <_write+0x12>
  }
  return len;
 8002a7c:	687b      	ldr	r3, [r7, #4]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_close>:

int _close(int file)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aae:	605a      	str	r2, [r3, #4]
  return 0;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_isatty>:

int _isatty(int file)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <_sbrk+0x5c>)
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <_sbrk+0x60>)
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <_sbrk+0x64>)
 8002b0e:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <_sbrk+0x68>)
 8002b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <_sbrk+0x64>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d207      	bcs.n	8002b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b20:	f004 fcc8 	bl	80074b4 <__errno>
 8002b24:	4603      	mov	r3, r0
 8002b26:	220c      	movs	r2, #12
 8002b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	e009      	b.n	8002b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b30:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <_sbrk+0x64>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <_sbrk+0x64>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <_sbrk+0x64>)
 8002b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	2000a000 	.word	0x2000a000
 8002b50:	00000400 	.word	0x00000400
 8002b54:	200007d0 	.word	0x200007d0
 8002b58:	200007e8 	.word	0x200007e8

08002b5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <SystemInit+0x20>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <SystemInit+0x20>)
 8002b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b84:	f7ff ffea 	bl	8002b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8002b8a:	490d      	ldr	r1, [pc, #52]	; (8002bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <LoopForever+0xe>)
  movs r3, #0
 8002b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b90:	e002      	b.n	8002b98 <LoopCopyDataInit>

08002b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b96:	3304      	adds	r3, #4

08002b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b9c:	d3f9      	bcc.n	8002b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ba0:	4c0a      	ldr	r4, [pc, #40]	; (8002bcc <LoopForever+0x16>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba4:	e001      	b.n	8002baa <LoopFillZerobss>

08002ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba8:	3204      	adds	r2, #4

08002baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bac:	d3fb      	bcc.n	8002ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bae:	f004 fc87 	bl	80074c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bb2:	f7fd ff41 	bl	8000a38 <main>

08002bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8002bb6:	e7fe      	b.n	8002bb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002bb8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc0:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8002bc4:	08008b8c 	.word	0x08008b8c
  ldr r2, =_sbss
 8002bc8:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8002bcc:	200007e8 	.word	0x200007e8

08002bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bd0:	e7fe      	b.n	8002bd0 <ADC1_2_IRQHandler>
	...

08002bd4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <HAL_Init+0x28>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <HAL_Init+0x28>)
 8002bde:	f043 0310 	orr.w	r3, r3, #16
 8002be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be4:	2003      	movs	r0, #3
 8002be6:	f000 f94f 	bl	8002e88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bea:	2000      	movs	r0, #0
 8002bec:	f000 f808 	bl	8002c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf0:	f7ff fcf0 	bl	80025d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40022000 	.word	0x40022000

08002c00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_InitTick+0x54>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_InitTick+0x58>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	4619      	mov	r1, r3
 8002c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f967 	bl	8002ef2 <HAL_SYSTICK_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e00e      	b.n	8002c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b0f      	cmp	r3, #15
 8002c32:	d80a      	bhi.n	8002c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c34:	2200      	movs	r2, #0
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3c:	f000 f92f 	bl	8002e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c40:	4a06      	ldr	r2, [pc, #24]	; (8002c5c <HAL_InitTick+0x5c>)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000104 	.word	0x20000104
 8002c58:	2000010c 	.word	0x2000010c
 8002c5c:	20000108 	.word	0x20000108

08002c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_IncTick+0x20>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_IncTick+0x24>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <HAL_IncTick+0x24>)
 8002c72:	6013      	str	r3, [r2, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	2000010c 	.word	0x2000010c
 8002c84:	200007d4 	.word	0x200007d4

08002c88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002c8c:	4b03      	ldr	r3, [pc, #12]	; (8002c9c <HAL_GetTick+0x14>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	200007d4 	.word	0x200007d4

08002ca0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca8:	f7ff ffee 	bl	8002c88 <HAL_GetTick>
 8002cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d005      	beq.n	8002cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_Delay+0x44>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002cc6:	bf00      	nop
 8002cc8:	f7ff ffde 	bl	8002c88 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d8f7      	bhi.n	8002cc8 <HAL_Delay+0x28>
  {
  }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	2000010c 	.word	0x2000010c

08002ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <__NVIC_SetPriorityGrouping+0x44>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d04:	4013      	ands	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d1a:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <__NVIC_SetPriorityGrouping+0x44>)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	60d3      	str	r3, [r2, #12]
}
 8002d20:	bf00      	nop
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d34:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <__NVIC_GetPriorityGrouping+0x18>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	f003 0307 	and.w	r3, r3, #7
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	db0b      	blt.n	8002d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	f003 021f 	and.w	r2, r3, #31
 8002d64:	4907      	ldr	r1, [pc, #28]	; (8002d84 <__NVIC_EnableIRQ+0x38>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	e000e100 	.word	0xe000e100

08002d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	6039      	str	r1, [r7, #0]
 8002d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	db0a      	blt.n	8002db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	490c      	ldr	r1, [pc, #48]	; (8002dd4 <__NVIC_SetPriority+0x4c>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	0112      	lsls	r2, r2, #4
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	440b      	add	r3, r1
 8002dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002db0:	e00a      	b.n	8002dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4908      	ldr	r1, [pc, #32]	; (8002dd8 <__NVIC_SetPriority+0x50>)
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	3b04      	subs	r3, #4
 8002dc0:	0112      	lsls	r2, r2, #4
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	761a      	strb	r2, [r3, #24]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000e100 	.word	0xe000e100
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f1c3 0307 	rsb	r3, r3, #7
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	bf28      	it	cs
 8002dfa:	2304      	movcs	r3, #4
 8002dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3304      	adds	r3, #4
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d902      	bls.n	8002e0c <NVIC_EncodePriority+0x30>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3b03      	subs	r3, #3
 8002e0a:	e000      	b.n	8002e0e <NVIC_EncodePriority+0x32>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	f04f 32ff 	mov.w	r2, #4294967295
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	401a      	ands	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e24:	f04f 31ff 	mov.w	r1, #4294967295
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	43d9      	mvns	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e34:	4313      	orrs	r3, r2
         );
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3724      	adds	r7, #36	; 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e54:	d301      	bcc.n	8002e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00f      	b.n	8002e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <SysTick_Config+0x40>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e62:	210f      	movs	r1, #15
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295
 8002e68:	f7ff ff8e 	bl	8002d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <SysTick_Config+0x40>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e72:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <SysTick_Config+0x40>)
 8002e74:	2207      	movs	r2, #7
 8002e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	e000e010 	.word	0xe000e010

08002e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff ff29 	bl	8002ce8 <__NVIC_SetPriorityGrouping>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb0:	f7ff ff3e 	bl	8002d30 <__NVIC_GetPriorityGrouping>
 8002eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	6978      	ldr	r0, [r7, #20]
 8002ebc:	f7ff ff8e 	bl	8002ddc <NVIC_EncodePriority>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff5d 	bl	8002d88 <__NVIC_SetPriority>
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff31 	bl	8002d4c <__NVIC_EnableIRQ>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ffa2 	bl	8002e44 <SysTick_Config>
 8002f00:	4603      	mov	r3, r0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d008      	beq.n	8002f2e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e020      	b.n	8002f70 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 020e 	bic.w	r2, r2, #14
 8002f3c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d005      	beq.n	8002f9e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2204      	movs	r2, #4
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e027      	b.n	8002fee <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 020e 	bic.w	r2, r2, #14
 8002fac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
    } 
  }
  return status;
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003006:	e154      	b.n	80032b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	4013      	ands	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8146 	beq.w	80032ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d005      	beq.n	8003038 <HAL_GPIO_Init+0x40>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d130      	bne.n	800309a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800306e:	2201      	movs	r2, #1
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	091b      	lsrs	r3, r3, #4
 8003084:	f003 0201 	and.w	r2, r3, #1
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d017      	beq.n	80030d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	2203      	movs	r2, #3
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d123      	bne.n	800312a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	08da      	lsrs	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3208      	adds	r2, #8
 80030ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	220f      	movs	r2, #15
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	08da      	lsrs	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3208      	adds	r2, #8
 8003124:	6939      	ldr	r1, [r7, #16]
 8003126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	2203      	movs	r2, #3
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 0203 	and.w	r2, r3, #3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80a0 	beq.w	80032ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316c:	4b58      	ldr	r3, [pc, #352]	; (80032d0 <HAL_GPIO_Init+0x2d8>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	4a57      	ldr	r2, [pc, #348]	; (80032d0 <HAL_GPIO_Init+0x2d8>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6193      	str	r3, [r2, #24]
 8003178:	4b55      	ldr	r3, [pc, #340]	; (80032d0 <HAL_GPIO_Init+0x2d8>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003184:	4a53      	ldr	r2, [pc, #332]	; (80032d4 <HAL_GPIO_Init+0x2dc>)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	220f      	movs	r2, #15
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031ae:	d019      	beq.n	80031e4 <HAL_GPIO_Init+0x1ec>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a49      	ldr	r2, [pc, #292]	; (80032d8 <HAL_GPIO_Init+0x2e0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d013      	beq.n	80031e0 <HAL_GPIO_Init+0x1e8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a48      	ldr	r2, [pc, #288]	; (80032dc <HAL_GPIO_Init+0x2e4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00d      	beq.n	80031dc <HAL_GPIO_Init+0x1e4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a47      	ldr	r2, [pc, #284]	; (80032e0 <HAL_GPIO_Init+0x2e8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d007      	beq.n	80031d8 <HAL_GPIO_Init+0x1e0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a46      	ldr	r2, [pc, #280]	; (80032e4 <HAL_GPIO_Init+0x2ec>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d101      	bne.n	80031d4 <HAL_GPIO_Init+0x1dc>
 80031d0:	2304      	movs	r3, #4
 80031d2:	e008      	b.n	80031e6 <HAL_GPIO_Init+0x1ee>
 80031d4:	2305      	movs	r3, #5
 80031d6:	e006      	b.n	80031e6 <HAL_GPIO_Init+0x1ee>
 80031d8:	2303      	movs	r3, #3
 80031da:	e004      	b.n	80031e6 <HAL_GPIO_Init+0x1ee>
 80031dc:	2302      	movs	r3, #2
 80031de:	e002      	b.n	80031e6 <HAL_GPIO_Init+0x1ee>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_GPIO_Init+0x1ee>
 80031e4:	2300      	movs	r3, #0
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	f002 0203 	and.w	r2, r2, #3
 80031ec:	0092      	lsls	r2, r2, #2
 80031ee:	4093      	lsls	r3, r2
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031f6:	4937      	ldr	r1, [pc, #220]	; (80032d4 <HAL_GPIO_Init+0x2dc>)
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	3302      	adds	r3, #2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003204:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_GPIO_Init+0x2f0>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	43db      	mvns	r3, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003228:	4a2f      	ldr	r2, [pc, #188]	; (80032e8 <HAL_GPIO_Init+0x2f0>)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800322e:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <HAL_GPIO_Init+0x2f0>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	43db      	mvns	r3, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003252:	4a25      	ldr	r2, [pc, #148]	; (80032e8 <HAL_GPIO_Init+0x2f0>)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003258:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <HAL_GPIO_Init+0x2f0>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	43db      	mvns	r3, r3
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4013      	ands	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800327c:	4a1a      	ldr	r2, [pc, #104]	; (80032e8 <HAL_GPIO_Init+0x2f0>)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003282:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <HAL_GPIO_Init+0x2f0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	43db      	mvns	r3, r3
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032a6:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <HAL_GPIO_Init+0x2f0>)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3301      	adds	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f47f aea3 	bne.w	8003008 <HAL_GPIO_Init+0x10>
  }
}
 80032c2:	bf00      	nop
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40010000 	.word	0x40010000
 80032d8:	48000400 	.word	0x48000400
 80032dc:	48000800 	.word	0x48000800
 80032e0:	48000c00 	.word	0x48000c00
 80032e4:	48001000 	.word	0x48001000
 80032e8:	40010400 	.word	0x40010400

080032ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	887b      	ldrh	r3, [r7, #2]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
 8003308:	e001      	b.n	800330e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	807b      	strh	r3, [r7, #2]
 8003328:	4613      	mov	r3, r2
 800332a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800332c:	787b      	ldrb	r3, [r7, #1]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003332:	887a      	ldrh	r2, [r7, #2]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003338:	e002      	b.n	8003340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4013      	ands	r3, r2
 8003364:	041a      	lsls	r2, r3, #16
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	43d9      	mvns	r1, r3
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	400b      	ands	r3, r1
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	619a      	str	r2, [r3, #24]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800338a:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003396:	4a05      	ldr	r2, [pc, #20]	; (80033ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd feae 	bl	8001100 <HAL_GPIO_EXTI_Callback>
  }
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40010400 	.word	0x40010400

080033b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e081      	b.n	80034c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff f920 	bl	800261c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2224      	movs	r2, #36	; 0x24
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003400:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003410:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d107      	bne.n	800342a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	e006      	b.n	8003438 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003436:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d104      	bne.n	800344a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003448:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800346c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69d9      	ldr	r1, [r3, #28]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1a      	ldr	r2, [r3, #32]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d138      	bne.n	8003556 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e032      	b.n	8003558 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2224      	movs	r2, #36	; 0x24
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003520:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6819      	ldr	r1, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0201 	orr.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e000      	b.n	8003558 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003556:	2302      	movs	r3, #2
  }
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b20      	cmp	r3, #32
 8003578:	d139      	bne.n	80035ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003584:	2302      	movs	r3, #2
 8003586:	e033      	b.n	80035f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fe:	b08b      	sub	sp, #44	; 0x2c
 8003600:	af06      	add	r7, sp, #24
 8003602:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0c4      	b.n	8003798 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff f936 	bl	8002894 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2203      	movs	r2, #3
 800362c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f003 ff01 	bl	800743c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	e040      	b.n	80036c2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	440b      	add	r3, r1
 8003650:	3301      	adds	r3, #1
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	440b      	add	r3, r1
 800367a:	3303      	adds	r3, #3
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003680:	7bfa      	ldrb	r2, [r7, #15]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	440b      	add	r3, r1
 800368e:	3338      	adds	r3, #56	; 0x38
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	440b      	add	r3, r1
 80036a2:	333c      	adds	r3, #60	; 0x3c
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	3340      	adds	r3, #64	; 0x40
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	3301      	adds	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d3b9      	bcc.n	8003640 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036cc:	2300      	movs	r3, #0
 80036ce:	73fb      	strb	r3, [r7, #15]
 80036d0:	e044      	b.n	800375c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036d2:	7bfa      	ldrb	r2, [r7, #15]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036e8:	7bfa      	ldrb	r2, [r7, #15]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	440b      	add	r3, r1
 80036f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036fa:	7bfa      	ldrb	r2, [r7, #15]
 80036fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	440b      	add	r3, r1
 800370c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003740:	7bfa      	ldrb	r2, [r7, #15]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	440b      	add	r3, r1
 800374e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	3301      	adds	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	7bfa      	ldrb	r2, [r7, #15]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d3b5      	bcc.n	80036d2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	687e      	ldr	r6, [r7, #4]
 800376e:	466d      	mov	r5, sp
 8003770:	f106 0410 	add.w	r4, r6, #16
 8003774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	602b      	str	r3, [r5, #0]
 800377c:	1d33      	adds	r3, r6, #4
 800377e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003780:	6838      	ldr	r0, [r7, #0]
 8003782:	f003 fe76 	bl	8007472 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f001 b823 	b.w	800480c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 817d 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80037dc:	4bbc      	ldr	r3, [pc, #752]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d00c      	beq.n	8003802 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037e8:	4bb9      	ldr	r3, [pc, #740]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d15c      	bne.n	80038ae <HAL_RCC_OscConfig+0x10e>
 80037f4:	4bb6      	ldr	r3, [pc, #728]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003800:	d155      	bne.n	80038ae <HAL_RCC_OscConfig+0x10e>
 8003802:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003806:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8003816:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d102      	bne.n	8003834 <HAL_RCC_OscConfig+0x94>
 800382e:	4ba8      	ldr	r3, [pc, #672]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	e015      	b.n	8003860 <HAL_RCC_OscConfig+0xc0>
 8003834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003838:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800384c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003850:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800385c:	4b9c      	ldr	r3, [pc, #624]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003864:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003868:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800386c:	fa92 f2a2 	rbit	r2, r2
 8003870:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003874:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003878:	fab2 f282 	clz	r2, r2
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f042 0220 	orr.w	r2, r2, #32
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f002 021f 	and.w	r2, r2, #31
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f202 	lsl.w	r2, r1, r2
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 811f 	beq.w	8003ad4 <HAL_RCC_OscConfig+0x334>
 8003896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 8116 	bne.w	8003ad4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f000 bfaf 	b.w	800480c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038be:	d106      	bne.n	80038ce <HAL_RCC_OscConfig+0x12e>
 80038c0:	4b83      	ldr	r3, [pc, #524]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a82      	ldr	r2, [pc, #520]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 80038c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	e036      	b.n	800393c <HAL_RCC_OscConfig+0x19c>
 80038ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x158>
 80038de:	4b7c      	ldr	r3, [pc, #496]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a7b      	ldr	r2, [pc, #492]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 80038e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	4b79      	ldr	r3, [pc, #484]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a78      	ldr	r2, [pc, #480]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 80038f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e021      	b.n	800393c <HAL_RCC_OscConfig+0x19c>
 80038f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0x184>
 800390a:	4b71      	ldr	r3, [pc, #452]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a70      	ldr	r2, [pc, #448]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 8003910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b6e      	ldr	r3, [pc, #440]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6d      	ldr	r2, [pc, #436]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e00b      	b.n	800393c <HAL_RCC_OscConfig+0x19c>
 8003924:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a69      	ldr	r2, [pc, #420]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 800392a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b67      	ldr	r3, [pc, #412]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a66      	ldr	r2, [pc, #408]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 8003936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800393c:	4b64      	ldr	r3, [pc, #400]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	f023 020f 	bic.w	r2, r3, #15
 8003944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003948:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	495f      	ldr	r1, [pc, #380]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 8003952:	4313      	orrs	r3, r2
 8003954:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d059      	beq.n	8003a1a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003966:	f7ff f98f 	bl	8002c88 <HAL_GetTick>
 800396a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	e00a      	b.n	8003986 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003970:	f7ff f98a 	bl	8002c88 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b64      	cmp	r3, #100	; 0x64
 800397e:	d902      	bls.n	8003986 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	f000 bf43 	b.w	800480c <HAL_RCC_OscConfig+0x106c>
 8003986:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800398a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003992:	fa93 f3a3 	rbit	r3, r3
 8003996:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800399a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	fab3 f383 	clz	r3, r3
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d102      	bne.n	80039b8 <HAL_RCC_OscConfig+0x218>
 80039b2:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	e015      	b.n	80039e4 <HAL_RCC_OscConfig+0x244>
 80039b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039bc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80039cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039d0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80039d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80039e0:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039e8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80039ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80039f0:	fa92 f2a2 	rbit	r2, r2
 80039f4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80039f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80039fc:	fab2 f282 	clz	r2, r2
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	f042 0220 	orr.w	r2, r2, #32
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	f002 021f 	and.w	r2, r2, #31
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0ab      	beq.n	8003970 <HAL_RCC_OscConfig+0x1d0>
 8003a18:	e05d      	b.n	8003ad6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1a:	f7ff f935 	bl	8002c88 <HAL_GetTick>
 8003a1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a24:	f7ff f930 	bl	8002c88 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b64      	cmp	r3, #100	; 0x64
 8003a32:	d902      	bls.n	8003a3a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	f000 bee9 	b.w	800480c <HAL_RCC_OscConfig+0x106c>
 8003a3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a3e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003a4e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a52:	fab3 f383 	clz	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d102      	bne.n	8003a6c <HAL_RCC_OscConfig+0x2cc>
 8003a66:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	e015      	b.n	8003a98 <HAL_RCC_OscConfig+0x2f8>
 8003a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a70:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003a78:	fa93 f3a3 	rbit	r3, r3
 8003a7c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a84:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003a88:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003a8c:	fa93 f3a3 	rbit	r3, r3
 8003a90:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003a94:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <HAL_RCC_OscConfig+0x330>)
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a9c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003aa0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003aa4:	fa92 f2a2 	rbit	r2, r2
 8003aa8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003aac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003ab0:	fab2 f282 	clz	r2, r2
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	f042 0220 	orr.w	r2, r2, #32
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	f002 021f 	and.w	r2, r2, #31
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ab      	bne.n	8003a24 <HAL_RCC_OscConfig+0x284>
 8003acc:	e003      	b.n	8003ad6 <HAL_RCC_OscConfig+0x336>
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ada:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 817d 	beq.w	8003de6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003aec:	4ba6      	ldr	r3, [pc, #664]	; (8003d88 <HAL_RCC_OscConfig+0x5e8>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 030c 	and.w	r3, r3, #12
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003af8:	4ba3      	ldr	r3, [pc, #652]	; (8003d88 <HAL_RCC_OscConfig+0x5e8>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d172      	bne.n	8003bea <HAL_RCC_OscConfig+0x44a>
 8003b04:	4ba0      	ldr	r3, [pc, #640]	; (8003d88 <HAL_RCC_OscConfig+0x5e8>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d16c      	bne.n	8003bea <HAL_RCC_OscConfig+0x44a>
 8003b10:	2302      	movs	r3, #2
 8003b12:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003b22:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d102      	bne.n	8003b40 <HAL_RCC_OscConfig+0x3a0>
 8003b3a:	4b93      	ldr	r3, [pc, #588]	; (8003d88 <HAL_RCC_OscConfig+0x5e8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	e013      	b.n	8003b68 <HAL_RCC_OscConfig+0x3c8>
 8003b40:	2302      	movs	r3, #2
 8003b42:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003b4a:	fa93 f3a3 	rbit	r3, r3
 8003b4e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003b52:	2302      	movs	r3, #2
 8003b54:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003b58:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b5c:	fa93 f3a3 	rbit	r3, r3
 8003b60:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003b64:	4b88      	ldr	r3, [pc, #544]	; (8003d88 <HAL_RCC_OscConfig+0x5e8>)
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003b6e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003b72:	fa92 f2a2 	rbit	r2, r2
 8003b76:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003b7a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003b7e:	fab2 f282 	clz	r2, r2
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	f042 0220 	orr.w	r2, r2, #32
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	f002 021f 	and.w	r2, r2, #31
 8003b8e:	2101      	movs	r1, #1
 8003b90:	fa01 f202 	lsl.w	r2, r1, r2
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x410>
 8003b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d002      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f000 be2e 	b.w	800480c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb0:	4b75      	ldr	r3, [pc, #468]	; (8003d88 <HAL_RCC_OscConfig+0x5e8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	21f8      	movs	r1, #248	; 0xf8
 8003bc6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003bce:	fa91 f1a1 	rbit	r1, r1
 8003bd2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003bd6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003bda:	fab1 f181 	clz	r1, r1
 8003bde:	b2c9      	uxtb	r1, r1
 8003be0:	408b      	lsls	r3, r1
 8003be2:	4969      	ldr	r1, [pc, #420]	; (8003d88 <HAL_RCC_OscConfig+0x5e8>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be8:	e0fd      	b.n	8003de6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8088 	beq.w	8003d0c <HAL_RCC_OscConfig+0x56c>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003c0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	461a      	mov	r2, r3
 8003c24:	2301      	movs	r3, #1
 8003c26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7ff f82e 	bl	8002c88 <HAL_GetTick>
 8003c2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c32:	f7ff f829 	bl	8002c88 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d902      	bls.n	8003c48 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	f000 bde2 	b.w	800480c <HAL_RCC_OscConfig+0x106c>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c52:	fa93 f3a3 	rbit	r3, r3
 8003c56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003c5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d102      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4d8>
 8003c72:	4b45      	ldr	r3, [pc, #276]	; (8003d88 <HAL_RCC_OscConfig+0x5e8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	e013      	b.n	8003ca0 <HAL_RCC_OscConfig+0x500>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003c82:	fa93 f3a3 	rbit	r3, r3
 8003c86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003c90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003c9c:	4b3a      	ldr	r3, [pc, #232]	; (8003d88 <HAL_RCC_OscConfig+0x5e8>)
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003ca6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003caa:	fa92 f2a2 	rbit	r2, r2
 8003cae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003cb2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003cb6:	fab2 f282 	clz	r2, r2
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	f042 0220 	orr.w	r2, r2, #32
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	f002 021f 	and.w	r2, r2, #31
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0af      	beq.n	8003c32 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd2:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_RCC_OscConfig+0x5e8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	21f8      	movs	r1, #248	; 0xf8
 8003ce8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003cf0:	fa91 f1a1 	rbit	r1, r1
 8003cf4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003cf8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003cfc:	fab1 f181 	clz	r1, r1
 8003d00:	b2c9      	uxtb	r1, r1
 8003d02:	408b      	lsls	r3, r1
 8003d04:	4920      	ldr	r1, [pc, #128]	; (8003d88 <HAL_RCC_OscConfig+0x5e8>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]
 8003d0a:	e06c      	b.n	8003de6 <HAL_RCC_OscConfig+0x646>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003d1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	461a      	mov	r2, r3
 8003d34:	2300      	movs	r3, #0
 8003d36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fe ffa6 	bl	8002c88 <HAL_GetTick>
 8003d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fe ffa1 	bl	8002c88 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d902      	bls.n	8003d58 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	f000 bd5a 	b.w	800480c <HAL_RCC_OscConfig+0x106c>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6e:	fab3 f383 	clz	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d104      	bne.n	8003d8c <HAL_RCC_OscConfig+0x5ec>
 8003d82:	4b01      	ldr	r3, [pc, #4]	; (8003d88 <HAL_RCC_OscConfig+0x5e8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	e015      	b.n	8003db4 <HAL_RCC_OscConfig+0x614>
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d9e:	2302      	movs	r3, #2
 8003da0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003da4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003da8:	fa93 f3a3 	rbit	r3, r3
 8003dac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003db0:	4bc8      	ldr	r3, [pc, #800]	; (80040d4 <HAL_RCC_OscConfig+0x934>)
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	2202      	movs	r2, #2
 8003db6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003dba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003dbe:	fa92 f2a2 	rbit	r2, r2
 8003dc2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003dc6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003dca:	fab2 f282 	clz	r2, r2
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	f042 0220 	orr.w	r2, r2, #32
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	f002 021f 	and.w	r2, r2, #31
 8003dda:	2101      	movs	r1, #1
 8003ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1ad      	bne.n	8003d42 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 8110 	beq.w	800401c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d079      	beq.n	8003f00 <HAL_RCC_OscConfig+0x760>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e16:	fa93 f3a3 	rbit	r3, r3
 8003e1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e22:	fab3 f383 	clz	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4bab      	ldr	r3, [pc, #684]	; (80040d8 <HAL_RCC_OscConfig+0x938>)
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	461a      	mov	r2, r3
 8003e32:	2301      	movs	r3, #1
 8003e34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e36:	f7fe ff27 	bl	8002c88 <HAL_GetTick>
 8003e3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e40:	f7fe ff22 	bl	8002c88 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d902      	bls.n	8003e56 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	f000 bcdb 	b.w	800480c <HAL_RCC_OscConfig+0x106c>
 8003e56:	2302      	movs	r3, #2
 8003e58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e60:	fa93 f3a3 	rbit	r3, r3
 8003e64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003e70:	2202      	movs	r2, #2
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	fa93 f2a3 	rbit	r2, r3
 8003e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e94:	2202      	movs	r2, #2
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	fa93 f2a3 	rbit	r2, r3
 8003ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eaa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003eae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb0:	4b88      	ldr	r3, [pc, #544]	; (80040d4 <HAL_RCC_OscConfig+0x934>)
 8003eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	6019      	str	r1, [r3, #0]
 8003ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	fa93 f1a3 	rbit	r1, r3
 8003ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ed6:	6019      	str	r1, [r3, #0]
  return result;
 8003ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003edc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0a0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x6a0>
 8003efe:	e08d      	b.n	800401c <HAL_RCC_OscConfig+0x87c>
 8003f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	fa93 f2a3 	rbit	r2, r3
 8003f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f22:	601a      	str	r2, [r3, #0]
  return result;
 8003f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f2c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b68      	ldr	r3, [pc, #416]	; (80040d8 <HAL_RCC_OscConfig+0x938>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2300      	movs	r3, #0
 8003f40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f42:	f7fe fea1 	bl	8002c88 <HAL_GetTick>
 8003f46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4c:	f7fe fe9c 	bl	8002c88 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d902      	bls.n	8003f62 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	f000 bc55 	b.w	800480c <HAL_RCC_OscConfig+0x106c>
 8003f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	fa93 f2a3 	rbit	r2, r3
 8003f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f80:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f8e:	2202      	movs	r2, #2
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	fa93 f2a3 	rbit	r2, r3
 8003fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	fa93 f2a3 	rbit	r2, r3
 8003fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003fcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fce:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <HAL_RCC_OscConfig+0x934>)
 8003fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003fda:	2102      	movs	r1, #2
 8003fdc:	6019      	str	r1, [r3, #0]
 8003fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	fa93 f1a3 	rbit	r1, r3
 8003fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ff4:	6019      	str	r1, [r3, #0]
  return result;
 8003ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	fab3 f383 	clz	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	2101      	movs	r1, #1
 8004012:	fa01 f303 	lsl.w	r3, r1, r3
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d197      	bne.n	8003f4c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800401c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004020:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 81a1 	beq.w	8004374 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004038:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <HAL_RCC_OscConfig+0x934>)
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d116      	bne.n	8004072 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004044:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_RCC_OscConfig+0x934>)
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	4a22      	ldr	r2, [pc, #136]	; (80040d4 <HAL_RCC_OscConfig+0x934>)
 800404a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404e:	61d3      	str	r3, [r2, #28]
 8004050:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <HAL_RCC_OscConfig+0x934>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004066:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800406a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004072:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <HAL_RCC_OscConfig+0x93c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d11a      	bne.n	80040b4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407e:	4b17      	ldr	r3, [pc, #92]	; (80040dc <HAL_RCC_OscConfig+0x93c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a16      	ldr	r2, [pc, #88]	; (80040dc <HAL_RCC_OscConfig+0x93c>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004088:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408a:	f7fe fdfd 	bl	8002c88 <HAL_GetTick>
 800408e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004092:	e009      	b.n	80040a8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7fe fdf8 	bl	8002c88 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b64      	cmp	r3, #100	; 0x64
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e3b1      	b.n	800480c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a8:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <HAL_RCC_OscConfig+0x93c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ef      	beq.n	8004094 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d10d      	bne.n	80040e0 <HAL_RCC_OscConfig+0x940>
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <HAL_RCC_OscConfig+0x934>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	4a02      	ldr	r2, [pc, #8]	; (80040d4 <HAL_RCC_OscConfig+0x934>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6213      	str	r3, [r2, #32]
 80040d0:	e03c      	b.n	800414c <HAL_RCC_OscConfig+0x9ac>
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000
 80040d8:	10908120 	.word	0x10908120
 80040dc:	40007000 	.word	0x40007000
 80040e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10c      	bne.n	800410a <HAL_RCC_OscConfig+0x96a>
 80040f0:	4bc1      	ldr	r3, [pc, #772]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	4ac0      	ldr	r2, [pc, #768]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	6213      	str	r3, [r2, #32]
 80040fc:	4bbe      	ldr	r3, [pc, #760]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	4abd      	ldr	r2, [pc, #756]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 8004102:	f023 0304 	bic.w	r3, r3, #4
 8004106:	6213      	str	r3, [r2, #32]
 8004108:	e020      	b.n	800414c <HAL_RCC_OscConfig+0x9ac>
 800410a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b05      	cmp	r3, #5
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0x994>
 800411a:	4bb7      	ldr	r3, [pc, #732]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	4ab6      	ldr	r2, [pc, #728]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 8004120:	f043 0304 	orr.w	r3, r3, #4
 8004124:	6213      	str	r3, [r2, #32]
 8004126:	4bb4      	ldr	r3, [pc, #720]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	4ab3      	ldr	r2, [pc, #716]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	6213      	str	r3, [r2, #32]
 8004132:	e00b      	b.n	800414c <HAL_RCC_OscConfig+0x9ac>
 8004134:	4bb0      	ldr	r3, [pc, #704]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	4aaf      	ldr	r2, [pc, #700]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 800413a:	f023 0301 	bic.w	r3, r3, #1
 800413e:	6213      	str	r3, [r2, #32]
 8004140:	4bad      	ldr	r3, [pc, #692]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	4aac      	ldr	r2, [pc, #688]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 8004146:	f023 0304 	bic.w	r3, r3, #4
 800414a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800414c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004150:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8081 	beq.w	8004260 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415e:	f7fe fd93 	bl	8002c88 <HAL_GetTick>
 8004162:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004168:	f7fe fd8e 	bl	8002c88 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f241 3288 	movw	r2, #5000	; 0x1388
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e345      	b.n	800480c <HAL_RCC_OscConfig+0x106c>
 8004180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004184:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004188:	2202      	movs	r2, #2
 800418a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004190:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	fa93 f2a3 	rbit	r2, r3
 800419a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80041ac:	2202      	movs	r2, #2
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	fa93 f2a3 	rbit	r2, r3
 80041be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80041c6:	601a      	str	r2, [r3, #0]
  return result;
 80041c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041cc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80041d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d102      	bne.n	80041ec <HAL_RCC_OscConfig+0xa4c>
 80041e6:	4b84      	ldr	r3, [pc, #528]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	e013      	b.n	8004214 <HAL_RCC_OscConfig+0xa74>
 80041ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80041f4:	2202      	movs	r2, #2
 80041f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	fa93 f2a3 	rbit	r2, r3
 8004206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	4b79      	ldr	r3, [pc, #484]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004218:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800421c:	2102      	movs	r1, #2
 800421e:	6011      	str	r1, [r2, #0]
 8004220:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004224:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	fa92 f1a2 	rbit	r1, r2
 800422e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004232:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004236:	6011      	str	r1, [r2, #0]
  return result;
 8004238:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800423c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	fab2 f282 	clz	r2, r2
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	f002 021f 	and.w	r2, r2, #31
 8004252:	2101      	movs	r1, #1
 8004254:	fa01 f202 	lsl.w	r2, r1, r2
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d084      	beq.n	8004168 <HAL_RCC_OscConfig+0x9c8>
 800425e:	e07f      	b.n	8004360 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004260:	f7fe fd12 	bl	8002c88 <HAL_GetTick>
 8004264:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004268:	e00b      	b.n	8004282 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426a:	f7fe fd0d 	bl	8002c88 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e2c4      	b.n	800480c <HAL_RCC_OscConfig+0x106c>
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800428a:	2202      	movs	r2, #2
 800428c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004292:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	fa93 f2a3 	rbit	r2, r3
 800429c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80042ae:	2202      	movs	r2, #2
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	fa93 f2a3 	rbit	r2, r3
 80042c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80042c8:	601a      	str	r2, [r3, #0]
  return result;
 80042ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ce:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80042d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d4:	fab3 f383 	clz	r3, r3
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f043 0302 	orr.w	r3, r3, #2
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d102      	bne.n	80042ee <HAL_RCC_OscConfig+0xb4e>
 80042e8:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	e013      	b.n	8004316 <HAL_RCC_OscConfig+0xb76>
 80042ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80042f6:	2202      	movs	r2, #2
 80042f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	fa93 f2a3 	rbit	r2, r3
 8004308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800431a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800431e:	2102      	movs	r1, #2
 8004320:	6011      	str	r1, [r2, #0]
 8004322:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004326:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	fa92 f1a2 	rbit	r1, r2
 8004330:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004334:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004338:	6011      	str	r1, [r2, #0]
  return result;
 800433a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800433e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	fab2 f282 	clz	r2, r2
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	f002 021f 	and.w	r2, r2, #31
 8004354:	2101      	movs	r1, #1
 8004356:	fa01 f202 	lsl.w	r2, r1, r2
 800435a:	4013      	ands	r3, r2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d184      	bne.n	800426a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004360:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004364:	2b01      	cmp	r3, #1
 8004366:	d105      	bne.n	8004374 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004368:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	4a22      	ldr	r2, [pc, #136]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 800436e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004372:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004378:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8242 	beq.w	800480a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004386:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <HAL_RCC_OscConfig+0xc58>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b08      	cmp	r3, #8
 8004390:	f000 8213 	beq.w	80047ba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004398:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	f040 8162 	bne.w	800466a <HAL_RCC_OscConfig+0xeca>
 80043a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043aa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80043ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	fa93 f2a3 	rbit	r2, r3
 80043c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80043ca:	601a      	str	r2, [r3, #0]
  return result;
 80043cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80043d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d6:	fab3 f383 	clz	r3, r3
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	461a      	mov	r2, r3
 80043e8:	2300      	movs	r3, #0
 80043ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ec:	f7fe fc4c 	bl	8002c88 <HAL_GetTick>
 80043f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043f4:	e00c      	b.n	8004410 <HAL_RCC_OscConfig+0xc70>
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fc:	f7fe fc44 	bl	8002c88 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e1fd      	b.n	800480c <HAL_RCC_OscConfig+0x106c>
 8004410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004414:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004418:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800441c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004422:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	fa93 f2a3 	rbit	r2, r3
 800442c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004430:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004434:	601a      	str	r2, [r3, #0]
  return result;
 8004436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800443e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004440:	fab3 f383 	clz	r3, r3
 8004444:	b2db      	uxtb	r3, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d102      	bne.n	800445a <HAL_RCC_OscConfig+0xcba>
 8004454:	4bb0      	ldr	r3, [pc, #704]	; (8004718 <HAL_RCC_OscConfig+0xf78>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	e027      	b.n	80044aa <HAL_RCC_OscConfig+0xd0a>
 800445a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004462:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	fa93 f2a3 	rbit	r2, r3
 8004476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004484:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004488:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004492:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	fa93 f2a3 	rbit	r2, r3
 800449c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	4b9c      	ldr	r3, [pc, #624]	; (8004718 <HAL_RCC_OscConfig+0xf78>)
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044ae:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80044b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044b6:	6011      	str	r1, [r2, #0]
 80044b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044bc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	fa92 f1a2 	rbit	r1, r2
 80044c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044ca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80044ce:	6011      	str	r1, [r2, #0]
  return result;
 80044d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	fab2 f282 	clz	r2, r2
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	f042 0220 	orr.w	r2, r2, #32
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	f002 021f 	and.w	r2, r2, #31
 80044ea:	2101      	movs	r1, #1
 80044ec:	fa01 f202 	lsl.w	r2, r1, r2
 80044f0:	4013      	ands	r3, r2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d182      	bne.n	80043fc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f6:	4b88      	ldr	r3, [pc, #544]	; (8004718 <HAL_RCC_OscConfig+0xf78>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800450a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800450e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	430b      	orrs	r3, r1
 8004518:	497f      	ldr	r1, [pc, #508]	; (8004718 <HAL_RCC_OscConfig+0xf78>)
 800451a:	4313      	orrs	r3, r2
 800451c:	604b      	str	r3, [r1, #4]
 800451e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004522:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004526:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800452a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004530:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	fa93 f2a3 	rbit	r2, r3
 800453a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800453e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004542:	601a      	str	r2, [r3, #0]
  return result;
 8004544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004548:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800454c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800454e:	fab3 f383 	clz	r3, r3
 8004552:	b2db      	uxtb	r3, r3
 8004554:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004558:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	461a      	mov	r2, r3
 8004560:	2301      	movs	r3, #1
 8004562:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004564:	f7fe fb90 	bl	8002c88 <HAL_GetTick>
 8004568:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800456c:	e009      	b.n	8004582 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456e:	f7fe fb8b 	bl	8002c88 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e144      	b.n	800480c <HAL_RCC_OscConfig+0x106c>
 8004582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004586:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800458a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800458e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004594:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	fa93 f2a3 	rbit	r2, r3
 800459e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80045a6:	601a      	str	r2, [r3, #0]
  return result;
 80045a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80045b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d102      	bne.n	80045cc <HAL_RCC_OscConfig+0xe2c>
 80045c6:	4b54      	ldr	r3, [pc, #336]	; (8004718 <HAL_RCC_OscConfig+0xf78>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	e027      	b.n	800461c <HAL_RCC_OscConfig+0xe7c>
 80045cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80045d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	fa93 f2a3 	rbit	r2, r3
 80045e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80045fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004604:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	fa93 f2a3 	rbit	r2, r3
 800460e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004612:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCC_OscConfig+0xf78>)
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004620:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004624:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800462e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	fa92 f1a2 	rbit	r1, r2
 8004638:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800463c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004640:	6011      	str	r1, [r2, #0]
  return result;
 8004642:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004646:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	fab2 f282 	clz	r2, r2
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	f042 0220 	orr.w	r2, r2, #32
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	f002 021f 	and.w	r2, r2, #31
 800465c:	2101      	movs	r1, #1
 800465e:	fa01 f202 	lsl.w	r2, r1, r2
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d082      	beq.n	800456e <HAL_RCC_OscConfig+0xdce>
 8004668:	e0cf      	b.n	800480a <HAL_RCC_OscConfig+0x106a>
 800466a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004672:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	fa93 f2a3 	rbit	r2, r3
 8004686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800468e:	601a      	str	r2, [r3, #0]
  return result;
 8004690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004694:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004698:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	461a      	mov	r2, r3
 80046ac:	2300      	movs	r3, #0
 80046ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fe faea 	bl	8002c88 <HAL_GetTick>
 80046b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b8:	e009      	b.n	80046ce <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fe fae5 	bl	8002c88 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e09e      	b.n	800480c <HAL_RCC_OscConfig+0x106c>
 80046ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80046d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	fa93 f2a3 	rbit	r2, r3
 80046ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80046f2:	601a      	str	r2, [r3, #0]
  return result;
 80046f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80046fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046fe:	fab3 f383 	clz	r3, r3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b01      	cmp	r3, #1
 8004710:	d104      	bne.n	800471c <HAL_RCC_OscConfig+0xf7c>
 8004712:	4b01      	ldr	r3, [pc, #4]	; (8004718 <HAL_RCC_OscConfig+0xf78>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	e029      	b.n	800476c <HAL_RCC_OscConfig+0xfcc>
 8004718:	40021000 	.word	0x40021000
 800471c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004720:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004724:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	fa93 f2a3 	rbit	r2, r3
 8004738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004746:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800474a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004754:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	fa93 f2a3 	rbit	r2, r3
 800475e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004762:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <HAL_RCC_OscConfig+0x1078>)
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004770:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004774:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004778:	6011      	str	r1, [r2, #0]
 800477a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800477e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	fa92 f1a2 	rbit	r1, r2
 8004788:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800478c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004790:	6011      	str	r1, [r2, #0]
  return result;
 8004792:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004796:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	fab2 f282 	clz	r2, r2
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	f042 0220 	orr.w	r2, r2, #32
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	f002 021f 	and.w	r2, r2, #31
 80047ac:	2101      	movs	r1, #1
 80047ae:	fa01 f202 	lsl.w	r2, r1, r2
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d180      	bne.n	80046ba <HAL_RCC_OscConfig+0xf1a>
 80047b8:	e027      	b.n	800480a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e01e      	b.n	800480c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <HAL_RCC_OscConfig+0x1078>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80047da:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d10b      	bne.n	8004806 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80047ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80047f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004802:	429a      	cmp	r2, r3
 8004804:	d001      	beq.n	800480a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000

0800481c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b09e      	sub	sp, #120	; 0x78
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e162      	b.n	8004afa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004834:	4b90      	ldr	r3, [pc, #576]	; (8004a78 <HAL_RCC_ClockConfig+0x25c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d910      	bls.n	8004864 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004842:	4b8d      	ldr	r3, [pc, #564]	; (8004a78 <HAL_RCC_ClockConfig+0x25c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 0207 	bic.w	r2, r3, #7
 800484a:	498b      	ldr	r1, [pc, #556]	; (8004a78 <HAL_RCC_ClockConfig+0x25c>)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	4313      	orrs	r3, r2
 8004850:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004852:	4b89      	ldr	r3, [pc, #548]	; (8004a78 <HAL_RCC_ClockConfig+0x25c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e14a      	b.n	8004afa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004870:	4b82      	ldr	r3, [pc, #520]	; (8004a7c <HAL_RCC_ClockConfig+0x260>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	497f      	ldr	r1, [pc, #508]	; (8004a7c <HAL_RCC_ClockConfig+0x260>)
 800487e:	4313      	orrs	r3, r2
 8004880:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80dc 	beq.w	8004a48 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d13c      	bne.n	8004912 <HAL_RCC_ClockConfig+0xf6>
 8004898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800489c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048a0:	fa93 f3a3 	rbit	r3, r3
 80048a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80048a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a8:	fab3 f383 	clz	r3, r3
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d102      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xa6>
 80048bc:	4b6f      	ldr	r3, [pc, #444]	; (8004a7c <HAL_RCC_ClockConfig+0x260>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	e00f      	b.n	80048e2 <HAL_RCC_ClockConfig+0xc6>
 80048c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ca:	fa93 f3a3 	rbit	r3, r3
 80048ce:	667b      	str	r3, [r7, #100]	; 0x64
 80048d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048d4:	663b      	str	r3, [r7, #96]	; 0x60
 80048d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048de:	4b67      	ldr	r3, [pc, #412]	; (8004a7c <HAL_RCC_ClockConfig+0x260>)
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80048e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048ea:	fa92 f2a2 	rbit	r2, r2
 80048ee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80048f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048f2:	fab2 f282 	clz	r2, r2
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	f042 0220 	orr.w	r2, r2, #32
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	f002 021f 	and.w	r2, r2, #31
 8004902:	2101      	movs	r1, #1
 8004904:	fa01 f202 	lsl.w	r2, r1, r2
 8004908:	4013      	ands	r3, r2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d17b      	bne.n	8004a06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0f3      	b.n	8004afa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d13c      	bne.n	8004994 <HAL_RCC_ClockConfig+0x178>
 800491a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800491e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004922:	fa93 f3a3 	rbit	r3, r3
 8004926:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492a:	fab3 f383 	clz	r3, r3
 800492e:	b2db      	uxtb	r3, r3
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	b2db      	uxtb	r3, r3
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b01      	cmp	r3, #1
 800493c:	d102      	bne.n	8004944 <HAL_RCC_ClockConfig+0x128>
 800493e:	4b4f      	ldr	r3, [pc, #316]	; (8004a7c <HAL_RCC_ClockConfig+0x260>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	e00f      	b.n	8004964 <HAL_RCC_ClockConfig+0x148>
 8004944:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004948:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800494c:	fa93 f3a3 	rbit	r3, r3
 8004950:	647b      	str	r3, [r7, #68]	; 0x44
 8004952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004956:	643b      	str	r3, [r7, #64]	; 0x40
 8004958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800495a:	fa93 f3a3 	rbit	r3, r3
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004960:	4b46      	ldr	r3, [pc, #280]	; (8004a7c <HAL_RCC_ClockConfig+0x260>)
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004968:	63ba      	str	r2, [r7, #56]	; 0x38
 800496a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800496c:	fa92 f2a2 	rbit	r2, r2
 8004970:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004974:	fab2 f282 	clz	r2, r2
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	f042 0220 	orr.w	r2, r2, #32
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	f002 021f 	and.w	r2, r2, #31
 8004984:	2101      	movs	r1, #1
 8004986:	fa01 f202 	lsl.w	r2, r1, r2
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d13a      	bne.n	8004a06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0b2      	b.n	8004afa <HAL_RCC_ClockConfig+0x2de>
 8004994:	2302      	movs	r3, #2
 8004996:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	fa93 f3a3 	rbit	r3, r3
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d102      	bne.n	80049bc <HAL_RCC_ClockConfig+0x1a0>
 80049b6:	4b31      	ldr	r3, [pc, #196]	; (8004a7c <HAL_RCC_ClockConfig+0x260>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	e00d      	b.n	80049d8 <HAL_RCC_ClockConfig+0x1bc>
 80049bc:	2302      	movs	r3, #2
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	fa93 f3a3 	rbit	r3, r3
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
 80049c8:	2302      	movs	r3, #2
 80049ca:	623b      	str	r3, [r7, #32]
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	fa93 f3a3 	rbit	r3, r3
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <HAL_RCC_ClockConfig+0x260>)
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	2202      	movs	r2, #2
 80049da:	61ba      	str	r2, [r7, #24]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	fa92 f2a2 	rbit	r2, r2
 80049e2:	617a      	str	r2, [r7, #20]
  return result;
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	fab2 f282 	clz	r2, r2
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	f042 0220 	orr.w	r2, r2, #32
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	f002 021f 	and.w	r2, r2, #31
 80049f6:	2101      	movs	r1, #1
 80049f8:	fa01 f202 	lsl.w	r2, r1, r2
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e079      	b.n	8004afa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a06:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <HAL_RCC_ClockConfig+0x260>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f023 0203 	bic.w	r2, r3, #3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	491a      	ldr	r1, [pc, #104]	; (8004a7c <HAL_RCC_ClockConfig+0x260>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a18:	f7fe f936 	bl	8002c88 <HAL_GetTick>
 8004a1c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a20:	f7fe f932 	bl	8002c88 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e061      	b.n	8004afa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a36:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <HAL_RCC_ClockConfig+0x260>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 020c 	and.w	r2, r3, #12
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d1eb      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCC_ClockConfig+0x25c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d214      	bcs.n	8004a80 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <HAL_RCC_ClockConfig+0x25c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 0207 	bic.w	r2, r3, #7
 8004a5e:	4906      	ldr	r1, [pc, #24]	; (8004a78 <HAL_RCC_ClockConfig+0x25c>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <HAL_RCC_ClockConfig+0x25c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e040      	b.n	8004afa <HAL_RCC_ClockConfig+0x2de>
 8004a78:	40022000 	.word	0x40022000
 8004a7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <HAL_RCC_ClockConfig+0x2e8>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	491a      	ldr	r1, [pc, #104]	; (8004b04 <HAL_RCC_ClockConfig+0x2e8>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d009      	beq.n	8004abe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aaa:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <HAL_RCC_ClockConfig+0x2e8>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	4912      	ldr	r1, [pc, #72]	; (8004b04 <HAL_RCC_ClockConfig+0x2e8>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004abe:	f000 f829 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <HAL_RCC_ClockConfig+0x2e8>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004acc:	22f0      	movs	r2, #240	; 0xf0
 8004ace:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	fa92 f2a2 	rbit	r2, r2
 8004ad6:	60fa      	str	r2, [r7, #12]
  return result;
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	fab2 f282 	clz	r2, r2
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	40d3      	lsrs	r3, r2
 8004ae2:	4a09      	ldr	r2, [pc, #36]	; (8004b08 <HAL_RCC_ClockConfig+0x2ec>)
 8004ae4:	5cd3      	ldrb	r3, [r2, r3]
 8004ae6:	fa21 f303 	lsr.w	r3, r1, r3
 8004aea:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <HAL_RCC_ClockConfig+0x2f0>)
 8004aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004aee:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <HAL_RCC_ClockConfig+0x2f4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe f884 	bl	8002c00 <HAL_InitTick>
  
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3778      	adds	r7, #120	; 0x78
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000
 8004b08:	08008a04 	.word	0x08008a04
 8004b0c:	20000104 	.word	0x20000104
 8004b10:	20000108 	.word	0x20000108

08004b14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b08b      	sub	sp, #44	; 0x2c
 8004b18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	2300      	movs	r3, #0
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004b2e:	4b29      	ldr	r3, [pc, #164]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d002      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0x30>
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d003      	beq.n	8004b4a <HAL_RCC_GetSysClockFreq+0x36>
 8004b42:	e03c      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b44:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b46:	623b      	str	r3, [r7, #32]
      break;
 8004b48:	e03c      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004b50:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004b54:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	fa92 f2a2 	rbit	r2, r2
 8004b5c:	607a      	str	r2, [r7, #4]
  return result;
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	fab2 f282 	clz	r2, r2
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	40d3      	lsrs	r3, r2
 8004b68:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b6a:	5cd3      	ldrb	r3, [r2, r3]
 8004b6c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004b6e:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	220f      	movs	r2, #15
 8004b78:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	fa92 f2a2 	rbit	r2, r2
 8004b80:	60fa      	str	r2, [r7, #12]
  return result;
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	fab2 f282 	clz	r2, r2
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	40d3      	lsrs	r3, r2
 8004b8c:	4a14      	ldr	r2, [pc, #80]	; (8004be0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b8e:	5cd3      	ldrb	r3, [r2, r3]
 8004b90:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b9c:	4a0e      	ldr	r2, [pc, #56]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
 8004bac:	e004      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	4a0c      	ldr	r2, [pc, #48]	; (8004be4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	623b      	str	r3, [r7, #32]
      break;
 8004bbc:	e002      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bbe:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004bc0:	623b      	str	r3, [r7, #32]
      break;
 8004bc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	372c      	adds	r7, #44	; 0x2c
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	007a1200 	.word	0x007a1200
 8004bdc:	08008a1c 	.word	0x08008a1c
 8004be0:	08008a2c 	.word	0x08008a2c
 8004be4:	003d0900 	.word	0x003d0900

08004be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bec:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bee:	681b      	ldr	r3, [r3, #0]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000104 	.word	0x20000104

08004c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004c06:	f7ff ffef 	bl	8004be8 <HAL_RCC_GetHCLKFreq>
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c14:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004c18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	fa92 f2a2 	rbit	r2, r2
 8004c20:	603a      	str	r2, [r7, #0]
  return result;
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	fab2 f282 	clz	r2, r2
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	40d3      	lsrs	r3, r2
 8004c2c:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004c2e:	5cd3      	ldrb	r3, [r2, r3]
 8004c30:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	08008a14 	.word	0x08008a14

08004c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004c4a:	f7ff ffcd 	bl	8004be8 <HAL_RCC_GetHCLKFreq>
 8004c4e:	4601      	mov	r1, r0
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004c58:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004c5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	fa92 f2a2 	rbit	r2, r2
 8004c64:	603a      	str	r2, [r7, #0]
  return result;
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	fab2 f282 	clz	r2, r2
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	40d3      	lsrs	r3, r2
 8004c70:	4a04      	ldr	r2, [pc, #16]	; (8004c84 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004c72:	5cd3      	ldrb	r3, [r2, r3]
 8004c74:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40021000 	.word	0x40021000
 8004c84:	08008a14 	.word	0x08008a14

08004c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b092      	sub	sp, #72	; 0x48
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 80d4 	beq.w	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cac:	4b4e      	ldr	r3, [pc, #312]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10e      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb8:	4b4b      	ldr	r3, [pc, #300]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	4a4a      	ldr	r2, [pc, #296]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	61d3      	str	r3, [r2, #28]
 8004cc4:	4b48      	ldr	r3, [pc, #288]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd6:	4b45      	ldr	r3, [pc, #276]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d118      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce2:	4b42      	ldr	r3, [pc, #264]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a41      	ldr	r2, [pc, #260]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cee:	f7fd ffcb 	bl	8002c88 <HAL_GetTick>
 8004cf2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf4:	e008      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf6:	f7fd ffc7 	bl	8002c88 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b64      	cmp	r3, #100	; 0x64
 8004d02:	d901      	bls.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e169      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d08:	4b38      	ldr	r3, [pc, #224]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0f0      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d14:	4b34      	ldr	r3, [pc, #208]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8084 	beq.w	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d07c      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d34:	4b2c      	ldr	r3, [pc, #176]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	fa93 f3a3 	rbit	r3, r3
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d4e:	fab3 f383 	clz	r3, r3
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	4b26      	ldr	r3, [pc, #152]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2301      	movs	r3, #1
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	fa93 f3a3 	rbit	r3, r3
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d72:	fab3 f383 	clz	r3, r3
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4b1d      	ldr	r3, [pc, #116]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	461a      	mov	r2, r3
 8004d82:	2300      	movs	r3, #0
 8004d84:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d86:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d8a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d04b      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d96:	f7fd ff77 	bl	8002c88 <HAL_GetTick>
 8004d9a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9c:	e00a      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9e:	f7fd ff73 	bl	8002c88 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e113      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004db4:	2302      	movs	r3, #2
 8004db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	623b      	str	r3, [r7, #32]
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	61fb      	str	r3, [r7, #28]
  return result;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dce:	fab3 f383 	clz	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f043 0302 	orr.w	r3, r3, #2
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d108      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004de2:	4b01      	ldr	r3, [pc, #4]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	e00d      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004de8:	40021000 	.word	0x40021000
 8004dec:	40007000 	.word	0x40007000
 8004df0:	10908100 	.word	0x10908100
 8004df4:	2302      	movs	r3, #2
 8004df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	4b78      	ldr	r3, [pc, #480]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	2202      	movs	r2, #2
 8004e06:	613a      	str	r2, [r7, #16]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	fa92 f2a2 	rbit	r2, r2
 8004e0e:	60fa      	str	r2, [r7, #12]
  return result;
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	fab2 f282 	clz	r2, r2
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	f002 021f 	and.w	r2, r2, #31
 8004e22:	2101      	movs	r1, #1
 8004e24:	fa01 f202 	lsl.w	r2, r1, r2
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0b7      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e2e:	4b6d      	ldr	r3, [pc, #436]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	496a      	ldr	r1, [pc, #424]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d105      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e48:	4b66      	ldr	r3, [pc, #408]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	4a65      	ldr	r2, [pc, #404]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e60:	4b60      	ldr	r3, [pc, #384]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	f023 0203 	bic.w	r2, r3, #3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	495d      	ldr	r1, [pc, #372]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d008      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e7e:	4b59      	ldr	r3, [pc, #356]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	4956      	ldr	r1, [pc, #344]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e9c:	4b51      	ldr	r3, [pc, #324]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	494e      	ldr	r1, [pc, #312]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d008      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eba:	4b4a      	ldr	r3, [pc, #296]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	f023 0210 	bic.w	r2, r3, #16
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	4947      	ldr	r1, [pc, #284]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004ed8:	4b42      	ldr	r3, [pc, #264]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	493f      	ldr	r1, [pc, #252]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ef6:	4b3b      	ldr	r3, [pc, #236]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	f023 0220 	bic.w	r2, r3, #32
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	4938      	ldr	r1, [pc, #224]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f14:	4b33      	ldr	r3, [pc, #204]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	4930      	ldr	r1, [pc, #192]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f32:	4b2c      	ldr	r3, [pc, #176]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	4929      	ldr	r1, [pc, #164]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f50:	4b24      	ldr	r3, [pc, #144]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	4921      	ldr	r1, [pc, #132]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d008      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f6e:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	491a      	ldr	r1, [pc, #104]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d008      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004f8c:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	4912      	ldr	r1, [pc, #72]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d008      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004faa:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	490b      	ldr	r1, [pc, #44]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004fc8:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd4:	4903      	ldr	r1, [pc, #12]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3748      	adds	r7, #72	; 0x48
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40021000 	.word	0x40021000

08004fe8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e073      	b.n	80050e6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	7f5b      	ldrb	r3, [r3, #29]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d105      	bne.n	8005014 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fd fb48 	bl	80026a4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b10      	cmp	r3, #16
 8005026:	d055      	beq.n	80050d4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	22ca      	movs	r2, #202	; 0xca
 800502e:	625a      	str	r2, [r3, #36]	; 0x24
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2253      	movs	r2, #83	; 0x53
 8005036:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f9fb 	bl	8005434 <RTC_EnterInitMode>
 800503e:	4603      	mov	r3, r0
 8005040:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d12c      	bne.n	80050a2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6899      	ldr	r1, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	68d2      	ldr	r2, [r2, #12]
 8005082:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6919      	ldr	r1, [r3, #16]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	041a      	lsls	r2, r3, #16
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fa02 	bl	80054a2 <RTC_ExitInitMode>
 800509e:	4603      	mov	r3, r0
 80050a0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d110      	bne.n	80050ca <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	22ff      	movs	r2, #255	; 0xff
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24
 80050d2:	e001      	b.n	80050d8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d102      	bne.n	80050e4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80050ee:	b590      	push	{r4, r7, lr}
 80050f0:	b087      	sub	sp, #28
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	7f1b      	ldrb	r3, [r3, #28]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_RTC_SetTime+0x1c>
 8005106:	2302      	movs	r3, #2
 8005108:	e087      	b.n	800521a <HAL_RTC_SetTime+0x12c>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2202      	movs	r2, #2
 8005114:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d126      	bne.n	800516a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d102      	bne.n	8005130 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2200      	movs	r2, #0
 800512e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 f9d9 	bl	80054ec <RTC_ByteToBcd2>
 800513a:	4603      	mov	r3, r0
 800513c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f9d2 	bl	80054ec <RTC_ByteToBcd2>
 8005148:	4603      	mov	r3, r0
 800514a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800514c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	789b      	ldrb	r3, [r3, #2]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f9ca 	bl	80054ec <RTC_ByteToBcd2>
 8005158:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800515a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	78db      	ldrb	r3, [r3, #3]
 8005162:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	e018      	b.n	800519c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d102      	bne.n	800517e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2200      	movs	r2, #0
 800517c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800518a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005190:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	78db      	ldrb	r3, [r3, #3]
 8005196:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	22ca      	movs	r2, #202	; 0xca
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2253      	movs	r2, #83	; 0x53
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f941 	bl	8005434 <RTC_EnterInitMode>
 80051b2:	4603      	mov	r3, r0
 80051b4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80051b6:	7cfb      	ldrb	r3, [r7, #19]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d120      	bne.n	80051fe <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80051c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80051ca:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6899      	ldr	r1, [r3, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f954 	bl	80054a2 <RTC_ExitInitMode>
 80051fa:	4603      	mov	r3, r0
 80051fc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80051fe:	7cfb      	ldrb	r3, [r7, #19]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d102      	bne.n	800520a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	22ff      	movs	r2, #255	; 0xff
 8005210:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]

  return status;
 8005218:	7cfb      	ldrb	r3, [r7, #19]
}
 800521a:	4618      	mov	r0, r3
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	bd90      	pop	{r4, r7, pc}

08005222 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b086      	sub	sp, #24
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005254:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005258:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005264:	b2da      	uxtb	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005274:	b2da      	uxtb	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005282:	b2da      	uxtb	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	0d9b      	lsrs	r3, r3, #22
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	b2da      	uxtb	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d11a      	bne.n	80052d4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f940 	bl	8005528 <RTC_Bcd2ToByte>
 80052a8:	4603      	mov	r3, r0
 80052aa:	461a      	mov	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 f937 	bl	8005528 <RTC_Bcd2ToByte>
 80052ba:	4603      	mov	r3, r0
 80052bc:	461a      	mov	r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	789b      	ldrb	r3, [r3, #2]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f92e 	bl	8005528 <RTC_Bcd2ToByte>
 80052cc:	4603      	mov	r3, r0
 80052ce:	461a      	mov	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80052de:	b590      	push	{r4, r7, lr}
 80052e0:	b087      	sub	sp, #28
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	7f1b      	ldrb	r3, [r3, #28]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_RTC_SetDate+0x1c>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e071      	b.n	80053de <HAL_RTC_SetDate+0x100>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2202      	movs	r2, #2
 8005304:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10e      	bne.n	800532a <HAL_RTC_SetDate+0x4c>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b00      	cmp	r3, #0
 8005316:	d008      	beq.n	800532a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	785b      	ldrb	r3, [r3, #1]
 800531c:	f023 0310 	bic.w	r3, r3, #16
 8005320:	b2db      	uxtb	r3, r3
 8005322:	330a      	adds	r3, #10
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d11c      	bne.n	800536a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	78db      	ldrb	r3, [r3, #3]
 8005334:	4618      	mov	r0, r3
 8005336:	f000 f8d9 	bl	80054ec <RTC_ByteToBcd2>
 800533a:	4603      	mov	r3, r0
 800533c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 f8d2 	bl	80054ec <RTC_ByteToBcd2>
 8005348:	4603      	mov	r3, r0
 800534a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800534c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	789b      	ldrb	r3, [r3, #2]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 f8ca 	bl	80054ec <RTC_ByteToBcd2>
 8005358:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800535a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	e00e      	b.n	8005388 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	78db      	ldrb	r3, [r3, #3]
 800536e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005376:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800537c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	22ca      	movs	r2, #202	; 0xca
 800538e:	625a      	str	r2, [r3, #36]	; 0x24
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2253      	movs	r2, #83	; 0x53
 8005396:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f84b 	bl	8005434 <RTC_EnterInitMode>
 800539e:	4603      	mov	r3, r0
 80053a0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80053a2:	7cfb      	ldrb	r3, [r7, #19]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10c      	bne.n	80053c2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053b6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f872 	bl	80054a2 <RTC_ExitInitMode>
 80053be:	4603      	mov	r3, r0
 80053c0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80053c2:	7cfb      	ldrb	r3, [r7, #19]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	22ff      	movs	r2, #255	; 0xff
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]

  return status;
 80053dc:	7cfb      	ldrb	r3, [r7, #19]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd90      	pop	{r4, r7, pc}
	...

080053e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a0d      	ldr	r2, [pc, #52]	; (8005430 <HAL_RTC_WaitForSynchro+0x48>)
 80053fa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053fc:	f7fd fc44 	bl	8002c88 <HAL_GetTick>
 8005400:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005402:	e009      	b.n	8005418 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005404:	f7fd fc40 	bl	8002c88 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005412:	d901      	bls.n	8005418 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e007      	b.n	8005428 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0ee      	beq.n	8005404 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	0001ff5f 	.word	0x0001ff5f

08005434 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d122      	bne.n	8005498 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005460:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005462:	f7fd fc11 	bl	8002c88 <HAL_GetTick>
 8005466:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005468:	e00c      	b.n	8005484 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800546a:	f7fd fc0d 	bl	8002c88 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005478:	d904      	bls.n	8005484 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2204      	movs	r2, #4
 800547e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <RTC_EnterInitMode+0x64>
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d1e8      	bne.n	800546a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054bc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff ff8b 	bl	80053e8 <HAL_RTC_WaitForSynchro>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d004      	beq.n	80054e2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2204      	movs	r2, #4
 80054dc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80054fa:	e005      	b.n	8005508 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3301      	adds	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	3b0a      	subs	r3, #10
 8005506:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	2b09      	cmp	r3, #9
 800550c:	d8f6      	bhi.n	80054fc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	b2da      	uxtb	r2, r3
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	4313      	orrs	r3, r2
 800551a:	b2db      	uxtb	r3, r3
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	b2db      	uxtb	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	b2da      	uxtb	r2, r3
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	b2db      	uxtb	r3, r3
 8005554:	4413      	add	r3, r2
 8005556:	b2db      	uxtb	r3, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e09d      	b.n	80056b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	2b00      	cmp	r3, #0
 800557c:	d108      	bne.n	8005590 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005586:	d009      	beq.n	800559c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	61da      	str	r2, [r3, #28]
 800558e:	e005      	b.n	800559c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fd f89a 	bl	80026f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055dc:	d902      	bls.n	80055e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e002      	b.n	80055ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055f2:	d007      	beq.n	8005604 <HAL_SPI_Init+0xa0>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055fc:	d002      	beq.n	8005604 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005646:	ea42 0103 	orr.w	r1, r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	0c1b      	lsrs	r3, r3, #16
 8005660:	f003 0204 	and.w	r2, r3, #4
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005680:	ea42 0103 	orr.w	r1, r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e049      	b.n	8005760 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d106      	bne.n	80056e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7fd f847 	bl	8002774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2202      	movs	r2, #2
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4619      	mov	r1, r3
 80056f8:	4610      	mov	r0, r2
 80056fa:	f000 faaf 	bl	8005c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	d001      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e04a      	b.n	8005816 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a21      	ldr	r2, [pc, #132]	; (8005824 <HAL_TIM_Base_Start_IT+0xbc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d018      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0x6c>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057aa:	d013      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0x6c>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <HAL_TIM_Base_Start_IT+0xc0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00e      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0x6c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1c      	ldr	r2, [pc, #112]	; (800582c <HAL_TIM_Base_Start_IT+0xc4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0x6c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1a      	ldr	r2, [pc, #104]	; (8005830 <HAL_TIM_Base_Start_IT+0xc8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0x6c>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a19      	ldr	r2, [pc, #100]	; (8005834 <HAL_TIM_Base_Start_IT+0xcc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d115      	bne.n	8005800 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	4b17      	ldr	r3, [pc, #92]	; (8005838 <HAL_TIM_Base_Start_IT+0xd0>)
 80057dc:	4013      	ands	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b06      	cmp	r3, #6
 80057e4:	d015      	beq.n	8005812 <HAL_TIM_Base_Start_IT+0xaa>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ec:	d011      	beq.n	8005812 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fe:	e008      	b.n	8005812 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	e000      	b.n	8005814 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40013400 	.word	0x40013400
 8005834:	40014000 	.word	0x40014000
 8005838:	00010007 	.word	0x00010007

0800583c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b02      	cmp	r3, #2
 8005850:	d122      	bne.n	8005898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b02      	cmp	r3, #2
 800585e:	d11b      	bne.n	8005898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0202 	mvn.w	r2, #2
 8005868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f9ce 	bl	8005c20 <HAL_TIM_IC_CaptureCallback>
 8005884:	e005      	b.n	8005892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f9c0 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f9d1 	bl	8005c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d122      	bne.n	80058ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d11b      	bne.n	80058ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0204 	mvn.w	r2, #4
 80058bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2202      	movs	r2, #2
 80058c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f9a4 	bl	8005c20 <HAL_TIM_IC_CaptureCallback>
 80058d8:	e005      	b.n	80058e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f996 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f9a7 	bl	8005c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d122      	bne.n	8005940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b08      	cmp	r3, #8
 8005906:	d11b      	bne.n	8005940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0208 	mvn.w	r2, #8
 8005910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2204      	movs	r2, #4
 8005916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f97a 	bl	8005c20 <HAL_TIM_IC_CaptureCallback>
 800592c:	e005      	b.n	800593a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f96c 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f97d 	bl	8005c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b10      	cmp	r3, #16
 800594c:	d122      	bne.n	8005994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b10      	cmp	r3, #16
 800595a:	d11b      	bne.n	8005994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0210 	mvn.w	r2, #16
 8005964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2208      	movs	r2, #8
 800596a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f950 	bl	8005c20 <HAL_TIM_IC_CaptureCallback>
 8005980:	e005      	b.n	800598e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f942 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f953 	bl	8005c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d10e      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d107      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0201 	mvn.w	r2, #1
 80059b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fc fa3c 	bl	8001e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ca:	2b80      	cmp	r3, #128	; 0x80
 80059cc:	d10e      	bne.n	80059ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d8:	2b80      	cmp	r3, #128	; 0x80
 80059da:	d107      	bne.n	80059ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 faec 	bl	8005fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059fa:	d10e      	bne.n	8005a1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a06:	2b80      	cmp	r3, #128	; 0x80
 8005a08:	d107      	bne.n	8005a1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fadf 	bl	8005fd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d10e      	bne.n	8005a46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d107      	bne.n	8005a46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f901 	bl	8005c48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d10e      	bne.n	8005a72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d107      	bne.n	8005a72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f06f 0220 	mvn.w	r2, #32
 8005a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fa9f 	bl	8005fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a72:	bf00      	nop
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_TIM_ConfigClockSource+0x1c>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e0b6      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x18a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ab8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ac0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad2:	d03e      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0xd8>
 8005ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad8:	f200 8087 	bhi.w	8005bea <HAL_TIM_ConfigClockSource+0x170>
 8005adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae0:	f000 8086 	beq.w	8005bf0 <HAL_TIM_ConfigClockSource+0x176>
 8005ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae8:	d87f      	bhi.n	8005bea <HAL_TIM_ConfigClockSource+0x170>
 8005aea:	2b70      	cmp	r3, #112	; 0x70
 8005aec:	d01a      	beq.n	8005b24 <HAL_TIM_ConfigClockSource+0xaa>
 8005aee:	2b70      	cmp	r3, #112	; 0x70
 8005af0:	d87b      	bhi.n	8005bea <HAL_TIM_ConfigClockSource+0x170>
 8005af2:	2b60      	cmp	r3, #96	; 0x60
 8005af4:	d050      	beq.n	8005b98 <HAL_TIM_ConfigClockSource+0x11e>
 8005af6:	2b60      	cmp	r3, #96	; 0x60
 8005af8:	d877      	bhi.n	8005bea <HAL_TIM_ConfigClockSource+0x170>
 8005afa:	2b50      	cmp	r3, #80	; 0x50
 8005afc:	d03c      	beq.n	8005b78 <HAL_TIM_ConfigClockSource+0xfe>
 8005afe:	2b50      	cmp	r3, #80	; 0x50
 8005b00:	d873      	bhi.n	8005bea <HAL_TIM_ConfigClockSource+0x170>
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d058      	beq.n	8005bb8 <HAL_TIM_ConfigClockSource+0x13e>
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	d86f      	bhi.n	8005bea <HAL_TIM_ConfigClockSource+0x170>
 8005b0a:	2b30      	cmp	r3, #48	; 0x30
 8005b0c:	d064      	beq.n	8005bd8 <HAL_TIM_ConfigClockSource+0x15e>
 8005b0e:	2b30      	cmp	r3, #48	; 0x30
 8005b10:	d86b      	bhi.n	8005bea <HAL_TIM_ConfigClockSource+0x170>
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d060      	beq.n	8005bd8 <HAL_TIM_ConfigClockSource+0x15e>
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d867      	bhi.n	8005bea <HAL_TIM_ConfigClockSource+0x170>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d05c      	beq.n	8005bd8 <HAL_TIM_ConfigClockSource+0x15e>
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d05a      	beq.n	8005bd8 <HAL_TIM_ConfigClockSource+0x15e>
 8005b22:	e062      	b.n	8005bea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	6899      	ldr	r1, [r3, #8]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f000 f99c 	bl	8005e70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	609a      	str	r2, [r3, #8]
      break;
 8005b50:	e04f      	b.n	8005bf2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	6899      	ldr	r1, [r3, #8]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f000 f985 	bl	8005e70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b74:	609a      	str	r2, [r3, #8]
      break;
 8005b76:	e03c      	b.n	8005bf2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	6859      	ldr	r1, [r3, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	461a      	mov	r2, r3
 8005b86:	f000 f8f9 	bl	8005d7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2150      	movs	r1, #80	; 0x50
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 f952 	bl	8005e3a <TIM_ITRx_SetConfig>
      break;
 8005b96:	e02c      	b.n	8005bf2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	6859      	ldr	r1, [r3, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f000 f918 	bl	8005dda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2160      	movs	r1, #96	; 0x60
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 f942 	bl	8005e3a <TIM_ITRx_SetConfig>
      break;
 8005bb6:	e01c      	b.n	8005bf2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6818      	ldr	r0, [r3, #0]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	6859      	ldr	r1, [r3, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f000 f8d9 	bl	8005d7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2140      	movs	r1, #64	; 0x40
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 f932 	bl	8005e3a <TIM_ITRx_SetConfig>
      break;
 8005bd6:	e00c      	b.n	8005bf2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4619      	mov	r1, r3
 8005be2:	4610      	mov	r0, r2
 8005be4:	f000 f929 	bl	8005e3a <TIM_ITRx_SetConfig>
      break;
 8005be8:	e003      	b.n	8005bf2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	73fb      	strb	r3, [r7, #15]
      break;
 8005bee:	e000      	b.n	8005bf2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005bf0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a3c      	ldr	r2, [pc, #240]	; (8005d60 <TIM_Base_SetConfig+0x104>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00f      	beq.n	8005c94 <TIM_Base_SetConfig+0x38>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7a:	d00b      	beq.n	8005c94 <TIM_Base_SetConfig+0x38>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a39      	ldr	r2, [pc, #228]	; (8005d64 <TIM_Base_SetConfig+0x108>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <TIM_Base_SetConfig+0x38>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a38      	ldr	r2, [pc, #224]	; (8005d68 <TIM_Base_SetConfig+0x10c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_Base_SetConfig+0x38>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a37      	ldr	r2, [pc, #220]	; (8005d6c <TIM_Base_SetConfig+0x110>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d108      	bne.n	8005ca6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2d      	ldr	r2, [pc, #180]	; (8005d60 <TIM_Base_SetConfig+0x104>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d01b      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb4:	d017      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	; (8005d64 <TIM_Base_SetConfig+0x108>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a29      	ldr	r2, [pc, #164]	; (8005d68 <TIM_Base_SetConfig+0x10c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00f      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a28      	ldr	r2, [pc, #160]	; (8005d6c <TIM_Base_SetConfig+0x110>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00b      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a27      	ldr	r2, [pc, #156]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d007      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a26      	ldr	r2, [pc, #152]	; (8005d74 <TIM_Base_SetConfig+0x118>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d003      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a25      	ldr	r2, [pc, #148]	; (8005d78 <TIM_Base_SetConfig+0x11c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d108      	bne.n	8005cf8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a10      	ldr	r2, [pc, #64]	; (8005d60 <TIM_Base_SetConfig+0x104>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00f      	beq.n	8005d44 <TIM_Base_SetConfig+0xe8>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a11      	ldr	r2, [pc, #68]	; (8005d6c <TIM_Base_SetConfig+0x110>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00b      	beq.n	8005d44 <TIM_Base_SetConfig+0xe8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a10      	ldr	r2, [pc, #64]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d007      	beq.n	8005d44 <TIM_Base_SetConfig+0xe8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a0f      	ldr	r2, [pc, #60]	; (8005d74 <TIM_Base_SetConfig+0x118>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_Base_SetConfig+0xe8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a0e      	ldr	r2, [pc, #56]	; (8005d78 <TIM_Base_SetConfig+0x11c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d103      	bne.n	8005d4c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	615a      	str	r2, [r3, #20]
}
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40012c00 	.word	0x40012c00
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	40013400 	.word	0x40013400
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40014400 	.word	0x40014400
 8005d78:	40014800 	.word	0x40014800

08005d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f023 0201 	bic.w	r2, r3, #1
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f023 030a 	bic.w	r3, r3, #10
 8005db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	621a      	str	r2, [r3, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b087      	sub	sp, #28
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f023 0210 	bic.w	r2, r3, #16
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	031b      	lsls	r3, r3, #12
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f043 0307 	orr.w	r3, r3, #7
 8005e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	609a      	str	r2, [r3, #8]
}
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	021a      	lsls	r2, r3, #8
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	609a      	str	r2, [r3, #8]
}
 8005ea4:	bf00      	nop
 8005ea6:	371c      	adds	r7, #28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e063      	b.n	8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2b      	ldr	r2, [pc, #172]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d004      	beq.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a2a      	ldr	r2, [pc, #168]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d108      	bne.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1b      	ldr	r2, [pc, #108]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d018      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3a:	d013      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a18      	ldr	r2, [pc, #96]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00e      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a17      	ldr	r2, [pc, #92]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d009      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a12      	ldr	r2, [pc, #72]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d004      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a13      	ldr	r2, [pc, #76]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d10c      	bne.n	8005f7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40013400 	.word	0x40013400
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800
 8005fac:	40014000 	.word	0x40014000

08005fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e040      	b.n	8006080 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fc fbd6 	bl	80027c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2224      	movs	r2, #36	; 0x24
 8006018:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0201 	bic.w	r2, r2, #1
 8006028:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fb76 	bl	800671c <UART_SetConfig>
 8006030:	4603      	mov	r3, r0
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e022      	b.n	8006080 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fd3e 	bl	8006ac4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006056:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006066:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fdc5 	bl	8006c08 <UART_CheckIdleState>
 800607e:	4603      	mov	r3, r0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08a      	sub	sp, #40	; 0x28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800609c:	2b20      	cmp	r3, #32
 800609e:	d132      	bne.n	8006106 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_UART_Receive_IT+0x24>
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e02b      	b.n	8006108 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d018      	beq.n	80060f6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	613b      	str	r3, [r7, #16]
   return(result);
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	623b      	str	r3, [r7, #32]
 80060e4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	69f9      	ldr	r1, [r7, #28]
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e6      	bne.n	80060c4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	461a      	mov	r2, r3
 80060fa:	68b9      	ldr	r1, [r7, #8]
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 fe93 	bl	8006e28 <UART_Start_Receive_IT>
 8006102:	4603      	mov	r3, r0
 8006104:	e000      	b.n	8006108 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006106:	2302      	movs	r3, #2
  }
}
 8006108:	4618      	mov	r0, r3
 800610a:	3728      	adds	r7, #40	; 0x28
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b0ba      	sub	sp, #232	; 0xe8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006136:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800613a:	f640 030f 	movw	r3, #2063	; 0x80f
 800613e:	4013      	ands	r3, r2
 8006140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006148:	2b00      	cmp	r3, #0
 800614a:	d115      	bne.n	8006178 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800614c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00f      	beq.n	8006178 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 82ab 	beq.w	80066c4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	4798      	blx	r3
      }
      return;
 8006176:	e2a5      	b.n	80066c4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8117 	beq.w	80063b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800618e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006192:	4b85      	ldr	r3, [pc, #532]	; (80063a8 <HAL_UART_IRQHandler+0x298>)
 8006194:	4013      	ands	r3, r2
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 810a 	beq.w	80063b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800619c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d011      	beq.n	80061cc <HAL_UART_IRQHandler+0xbc>
 80061a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2201      	movs	r2, #1
 80061ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c2:	f043 0201 	orr.w	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d011      	beq.n	80061fc <HAL_UART_IRQHandler+0xec>
 80061d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00b      	beq.n	80061fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2202      	movs	r2, #2
 80061ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061f2:	f043 0204 	orr.w	r2, r3, #4
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d011      	beq.n	800622c <HAL_UART_IRQHandler+0x11c>
 8006208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2204      	movs	r2, #4
 800621a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006222:	f043 0202 	orr.w	r2, r3, #2
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800622c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b00      	cmp	r3, #0
 8006236:	d017      	beq.n	8006268 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006248:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2208      	movs	r2, #8
 8006256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800625e:	f043 0208 	orr.w	r2, r3, #8
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006270:	2b00      	cmp	r3, #0
 8006272:	d012      	beq.n	800629a <HAL_UART_IRQHandler+0x18a>
 8006274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00c      	beq.n	800629a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006290:	f043 0220 	orr.w	r2, r3, #32
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8211 	beq.w	80066c8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e2:	2b40      	cmp	r3, #64	; 0x40
 80062e4:	d005      	beq.n	80062f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d04f      	beq.n	8006392 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fe4c 	bl	8006f90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006302:	2b40      	cmp	r3, #64	; 0x40
 8006304:	d141      	bne.n	800638a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3308      	adds	r3, #8
 800630c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800631c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3308      	adds	r3, #8
 800632e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006332:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800633e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800634a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1d9      	bne.n	8006306 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006356:	2b00      	cmp	r3, #0
 8006358:	d013      	beq.n	8006382 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800635e:	4a13      	ldr	r2, [pc, #76]	; (80063ac <HAL_UART_IRQHandler+0x29c>)
 8006360:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006366:	4618      	mov	r0, r3
 8006368:	f7fc fe08 	bl	8002f7c <HAL_DMA_Abort_IT>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d017      	beq.n	80063a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800637c:	4610      	mov	r0, r2
 800637e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	e00f      	b.n	80063a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f9b4 	bl	80066f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006388:	e00b      	b.n	80063a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f9b0 	bl	80066f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	e007      	b.n	80063a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f9ac 	bl	80066f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80063a0:	e192      	b.n	80066c8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a2:	bf00      	nop
    return;
 80063a4:	e190      	b.n	80066c8 <HAL_UART_IRQHandler+0x5b8>
 80063a6:	bf00      	nop
 80063a8:	04000120 	.word	0x04000120
 80063ac:	08007059 	.word	0x08007059

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	f040 814b 	bne.w	8006650 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063be:	f003 0310 	and.w	r3, r3, #16
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8144 	beq.w	8006650 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063cc:	f003 0310 	and.w	r3, r3, #16
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 813d 	beq.w	8006650 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2210      	movs	r2, #16
 80063dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	f040 80b5 	bne.w	8006558 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 8164 	beq.w	80066cc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800640a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800640e:	429a      	cmp	r2, r3
 8006410:	f080 815c 	bcs.w	80066cc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800641a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	2b20      	cmp	r3, #32
 8006426:	f000 8086 	beq.w	8006536 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800643e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006446:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006454:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006458:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006460:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800646c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1da      	bne.n	800642a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3308      	adds	r3, #8
 800647a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006484:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006486:	f023 0301 	bic.w	r3, r3, #1
 800648a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3308      	adds	r3, #8
 8006494:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006498:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800649c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064a4:	e841 2300 	strex	r3, r2, [r1]
 80064a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e1      	bne.n	8006474 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3308      	adds	r3, #8
 80064b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3308      	adds	r3, #8
 80064d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e3      	bne.n	80064b0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006506:	f023 0310 	bic.w	r3, r3, #16
 800650a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006518:	65bb      	str	r3, [r7, #88]	; 0x58
 800651a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800651e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e4      	bne.n	80064f6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006530:	4618      	mov	r0, r3
 8006532:	f7fc fcea 	bl	8002f0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2202      	movs	r2, #2
 800653a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006548:	b29b      	uxth	r3, r3
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	b29b      	uxth	r3, r3
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f8d7 	bl	8006704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006556:	e0b9      	b.n	80066cc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006564:	b29b      	uxth	r3, r3
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006572:	b29b      	uxth	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 80ab 	beq.w	80066d0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800657a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 80a6 	beq.w	80066d0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006598:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065a6:	647b      	str	r3, [r7, #68]	; 0x44
 80065a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ae:	e841 2300 	strex	r3, r2, [r1]
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1e4      	bne.n	8006584 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3308      	adds	r3, #8
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	623b      	str	r3, [r7, #32]
   return(result);
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	f023 0301 	bic.w	r3, r3, #1
 80065d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3308      	adds	r3, #8
 80065da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065de:	633a      	str	r2, [r7, #48]	; 0x30
 80065e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e3      	bne.n	80065ba <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	60fb      	str	r3, [r7, #12]
   return(result);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0310 	bic.w	r3, r3, #16
 800661a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006628:	61fb      	str	r3, [r7, #28]
 800662a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	69b9      	ldr	r1, [r7, #24]
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	617b      	str	r3, [r7, #20]
   return(result);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e4      	bne.n	8006606 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f85b 	bl	8006704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800664e:	e03f      	b.n	80066d0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00e      	beq.n	800667a <HAL_UART_IRQHandler+0x56a>
 800665c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d008      	beq.n	800667a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fed8 	bl	8007428 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006678:	e02d      	b.n	80066d6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800667a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00e      	beq.n	80066a4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668e:	2b00      	cmp	r3, #0
 8006690:	d008      	beq.n	80066a4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01c      	beq.n	80066d4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
    }
    return;
 80066a2:	e017      	b.n	80066d4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d012      	beq.n	80066d6 <HAL_UART_IRQHandler+0x5c6>
 80066b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00c      	beq.n	80066d6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fce1 	bl	8007084 <UART_EndTransmit_IT>
    return;
 80066c2:	e008      	b.n	80066d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80066c4:	bf00      	nop
 80066c6:	e006      	b.n	80066d6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80066c8:	bf00      	nop
 80066ca:	e004      	b.n	80066d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80066cc:	bf00      	nop
 80066ce:	e002      	b.n	80066d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80066d0:	bf00      	nop
 80066d2:	e000      	b.n	80066d6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80066d4:	bf00      	nop
  }

}
 80066d6:	37e8      	adds	r7, #232	; 0xe8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800674a:	f023 030c 	bic.w	r3, r3, #12
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	6979      	ldr	r1, [r7, #20]
 8006754:	430b      	orrs	r3, r1
 8006756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	430a      	orrs	r2, r1
 8006790:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4aa7      	ldr	r2, [pc, #668]	; (8006a34 <UART_SetConfig+0x318>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d120      	bne.n	80067de <UART_SetConfig+0xc2>
 800679c:	4ba6      	ldr	r3, [pc, #664]	; (8006a38 <UART_SetConfig+0x31c>)
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d817      	bhi.n	80067d8 <UART_SetConfig+0xbc>
 80067a8:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0x94>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067c1 	.word	0x080067c1
 80067b4:	080067cd 	.word	0x080067cd
 80067b8:	080067d3 	.word	0x080067d3
 80067bc:	080067c7 	.word	0x080067c7
 80067c0:	2301      	movs	r3, #1
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e0b5      	b.n	8006932 <UART_SetConfig+0x216>
 80067c6:	2302      	movs	r3, #2
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e0b2      	b.n	8006932 <UART_SetConfig+0x216>
 80067cc:	2304      	movs	r3, #4
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e0af      	b.n	8006932 <UART_SetConfig+0x216>
 80067d2:	2308      	movs	r3, #8
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e0ac      	b.n	8006932 <UART_SetConfig+0x216>
 80067d8:	2310      	movs	r3, #16
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e0a9      	b.n	8006932 <UART_SetConfig+0x216>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a96      	ldr	r2, [pc, #600]	; (8006a3c <UART_SetConfig+0x320>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d124      	bne.n	8006832 <UART_SetConfig+0x116>
 80067e8:	4b93      	ldr	r3, [pc, #588]	; (8006a38 <UART_SetConfig+0x31c>)
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067f4:	d011      	beq.n	800681a <UART_SetConfig+0xfe>
 80067f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067fa:	d817      	bhi.n	800682c <UART_SetConfig+0x110>
 80067fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006800:	d011      	beq.n	8006826 <UART_SetConfig+0x10a>
 8006802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006806:	d811      	bhi.n	800682c <UART_SetConfig+0x110>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <UART_SetConfig+0xf8>
 800680c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006810:	d006      	beq.n	8006820 <UART_SetConfig+0x104>
 8006812:	e00b      	b.n	800682c <UART_SetConfig+0x110>
 8006814:	2300      	movs	r3, #0
 8006816:	77fb      	strb	r3, [r7, #31]
 8006818:	e08b      	b.n	8006932 <UART_SetConfig+0x216>
 800681a:	2302      	movs	r3, #2
 800681c:	77fb      	strb	r3, [r7, #31]
 800681e:	e088      	b.n	8006932 <UART_SetConfig+0x216>
 8006820:	2304      	movs	r3, #4
 8006822:	77fb      	strb	r3, [r7, #31]
 8006824:	e085      	b.n	8006932 <UART_SetConfig+0x216>
 8006826:	2308      	movs	r3, #8
 8006828:	77fb      	strb	r3, [r7, #31]
 800682a:	e082      	b.n	8006932 <UART_SetConfig+0x216>
 800682c:	2310      	movs	r3, #16
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e07f      	b.n	8006932 <UART_SetConfig+0x216>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a82      	ldr	r2, [pc, #520]	; (8006a40 <UART_SetConfig+0x324>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d124      	bne.n	8006886 <UART_SetConfig+0x16a>
 800683c:	4b7e      	ldr	r3, [pc, #504]	; (8006a38 <UART_SetConfig+0x31c>)
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006844:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006848:	d011      	beq.n	800686e <UART_SetConfig+0x152>
 800684a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800684e:	d817      	bhi.n	8006880 <UART_SetConfig+0x164>
 8006850:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006854:	d011      	beq.n	800687a <UART_SetConfig+0x15e>
 8006856:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800685a:	d811      	bhi.n	8006880 <UART_SetConfig+0x164>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <UART_SetConfig+0x14c>
 8006860:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006864:	d006      	beq.n	8006874 <UART_SetConfig+0x158>
 8006866:	e00b      	b.n	8006880 <UART_SetConfig+0x164>
 8006868:	2300      	movs	r3, #0
 800686a:	77fb      	strb	r3, [r7, #31]
 800686c:	e061      	b.n	8006932 <UART_SetConfig+0x216>
 800686e:	2302      	movs	r3, #2
 8006870:	77fb      	strb	r3, [r7, #31]
 8006872:	e05e      	b.n	8006932 <UART_SetConfig+0x216>
 8006874:	2304      	movs	r3, #4
 8006876:	77fb      	strb	r3, [r7, #31]
 8006878:	e05b      	b.n	8006932 <UART_SetConfig+0x216>
 800687a:	2308      	movs	r3, #8
 800687c:	77fb      	strb	r3, [r7, #31]
 800687e:	e058      	b.n	8006932 <UART_SetConfig+0x216>
 8006880:	2310      	movs	r3, #16
 8006882:	77fb      	strb	r3, [r7, #31]
 8006884:	e055      	b.n	8006932 <UART_SetConfig+0x216>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a6e      	ldr	r2, [pc, #440]	; (8006a44 <UART_SetConfig+0x328>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d124      	bne.n	80068da <UART_SetConfig+0x1be>
 8006890:	4b69      	ldr	r3, [pc, #420]	; (8006a38 <UART_SetConfig+0x31c>)
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006898:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800689c:	d011      	beq.n	80068c2 <UART_SetConfig+0x1a6>
 800689e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068a2:	d817      	bhi.n	80068d4 <UART_SetConfig+0x1b8>
 80068a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068a8:	d011      	beq.n	80068ce <UART_SetConfig+0x1b2>
 80068aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068ae:	d811      	bhi.n	80068d4 <UART_SetConfig+0x1b8>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <UART_SetConfig+0x1a0>
 80068b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b8:	d006      	beq.n	80068c8 <UART_SetConfig+0x1ac>
 80068ba:	e00b      	b.n	80068d4 <UART_SetConfig+0x1b8>
 80068bc:	2300      	movs	r3, #0
 80068be:	77fb      	strb	r3, [r7, #31]
 80068c0:	e037      	b.n	8006932 <UART_SetConfig+0x216>
 80068c2:	2302      	movs	r3, #2
 80068c4:	77fb      	strb	r3, [r7, #31]
 80068c6:	e034      	b.n	8006932 <UART_SetConfig+0x216>
 80068c8:	2304      	movs	r3, #4
 80068ca:	77fb      	strb	r3, [r7, #31]
 80068cc:	e031      	b.n	8006932 <UART_SetConfig+0x216>
 80068ce:	2308      	movs	r3, #8
 80068d0:	77fb      	strb	r3, [r7, #31]
 80068d2:	e02e      	b.n	8006932 <UART_SetConfig+0x216>
 80068d4:	2310      	movs	r3, #16
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e02b      	b.n	8006932 <UART_SetConfig+0x216>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a5a      	ldr	r2, [pc, #360]	; (8006a48 <UART_SetConfig+0x32c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d124      	bne.n	800692e <UART_SetConfig+0x212>
 80068e4:	4b54      	ldr	r3, [pc, #336]	; (8006a38 <UART_SetConfig+0x31c>)
 80068e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80068ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80068f0:	d011      	beq.n	8006916 <UART_SetConfig+0x1fa>
 80068f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80068f6:	d817      	bhi.n	8006928 <UART_SetConfig+0x20c>
 80068f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068fc:	d011      	beq.n	8006922 <UART_SetConfig+0x206>
 80068fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006902:	d811      	bhi.n	8006928 <UART_SetConfig+0x20c>
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <UART_SetConfig+0x1f4>
 8006908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800690c:	d006      	beq.n	800691c <UART_SetConfig+0x200>
 800690e:	e00b      	b.n	8006928 <UART_SetConfig+0x20c>
 8006910:	2300      	movs	r3, #0
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	e00d      	b.n	8006932 <UART_SetConfig+0x216>
 8006916:	2302      	movs	r3, #2
 8006918:	77fb      	strb	r3, [r7, #31]
 800691a:	e00a      	b.n	8006932 <UART_SetConfig+0x216>
 800691c:	2304      	movs	r3, #4
 800691e:	77fb      	strb	r3, [r7, #31]
 8006920:	e007      	b.n	8006932 <UART_SetConfig+0x216>
 8006922:	2308      	movs	r3, #8
 8006924:	77fb      	strb	r3, [r7, #31]
 8006926:	e004      	b.n	8006932 <UART_SetConfig+0x216>
 8006928:	2310      	movs	r3, #16
 800692a:	77fb      	strb	r3, [r7, #31]
 800692c:	e001      	b.n	8006932 <UART_SetConfig+0x216>
 800692e:	2310      	movs	r3, #16
 8006930:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800693a:	d15b      	bne.n	80069f4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800693c:	7ffb      	ldrb	r3, [r7, #31]
 800693e:	2b08      	cmp	r3, #8
 8006940:	d827      	bhi.n	8006992 <UART_SetConfig+0x276>
 8006942:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <UART_SetConfig+0x22c>)
 8006944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006948:	0800696d 	.word	0x0800696d
 800694c:	08006975 	.word	0x08006975
 8006950:	0800697d 	.word	0x0800697d
 8006954:	08006993 	.word	0x08006993
 8006958:	08006983 	.word	0x08006983
 800695c:	08006993 	.word	0x08006993
 8006960:	08006993 	.word	0x08006993
 8006964:	08006993 	.word	0x08006993
 8006968:	0800698b 	.word	0x0800698b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800696c:	f7fe f948 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 8006970:	61b8      	str	r0, [r7, #24]
        break;
 8006972:	e013      	b.n	800699c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006974:	f7fe f966 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 8006978:	61b8      	str	r0, [r7, #24]
        break;
 800697a:	e00f      	b.n	800699c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800697c:	4b33      	ldr	r3, [pc, #204]	; (8006a4c <UART_SetConfig+0x330>)
 800697e:	61bb      	str	r3, [r7, #24]
        break;
 8006980:	e00c      	b.n	800699c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006982:	f7fe f8c7 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8006986:	61b8      	str	r0, [r7, #24]
        break;
 8006988:	e008      	b.n	800699c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800698e:	61bb      	str	r3, [r7, #24]
        break;
 8006990:	e004      	b.n	800699c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	77bb      	strb	r3, [r7, #30]
        break;
 800699a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 8082 	beq.w	8006aa8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	005a      	lsls	r2, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	085b      	lsrs	r3, r3, #1
 80069ae:	441a      	add	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b0f      	cmp	r3, #15
 80069be:	d916      	bls.n	80069ee <UART_SetConfig+0x2d2>
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c6:	d212      	bcs.n	80069ee <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f023 030f 	bic.w	r3, r3, #15
 80069d0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	085b      	lsrs	r3, r3, #1
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f003 0307 	and.w	r3, r3, #7
 80069dc:	b29a      	uxth	r2, r3
 80069de:	89fb      	ldrh	r3, [r7, #14]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	89fa      	ldrh	r2, [r7, #14]
 80069ea:	60da      	str	r2, [r3, #12]
 80069ec:	e05c      	b.n	8006aa8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	77bb      	strb	r3, [r7, #30]
 80069f2:	e059      	b.n	8006aa8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069f4:	7ffb      	ldrb	r3, [r7, #31]
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	d835      	bhi.n	8006a66 <UART_SetConfig+0x34a>
 80069fa:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <UART_SetConfig+0x2e4>)
 80069fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a2d 	.word	0x08006a2d
 8006a08:	08006a51 	.word	0x08006a51
 8006a0c:	08006a67 	.word	0x08006a67
 8006a10:	08006a57 	.word	0x08006a57
 8006a14:	08006a67 	.word	0x08006a67
 8006a18:	08006a67 	.word	0x08006a67
 8006a1c:	08006a67 	.word	0x08006a67
 8006a20:	08006a5f 	.word	0x08006a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a24:	f7fe f8ec 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 8006a28:	61b8      	str	r0, [r7, #24]
        break;
 8006a2a:	e021      	b.n	8006a70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a2c:	f7fe f90a 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 8006a30:	61b8      	str	r0, [r7, #24]
        break;
 8006a32:	e01d      	b.n	8006a70 <UART_SetConfig+0x354>
 8006a34:	40013800 	.word	0x40013800
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	40004400 	.word	0x40004400
 8006a40:	40004800 	.word	0x40004800
 8006a44:	40004c00 	.word	0x40004c00
 8006a48:	40005000 	.word	0x40005000
 8006a4c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a50:	4b1b      	ldr	r3, [pc, #108]	; (8006ac0 <UART_SetConfig+0x3a4>)
 8006a52:	61bb      	str	r3, [r7, #24]
        break;
 8006a54:	e00c      	b.n	8006a70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a56:	f7fe f85d 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8006a5a:	61b8      	str	r0, [r7, #24]
        break;
 8006a5c:	e008      	b.n	8006a70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a62:	61bb      	str	r3, [r7, #24]
        break;
 8006a64:	e004      	b.n	8006a70 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	77bb      	strb	r3, [r7, #30]
        break;
 8006a6e:	bf00      	nop
    }

    if (pclk != 0U)
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d018      	beq.n	8006aa8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	085a      	lsrs	r2, r3, #1
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	441a      	add	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b0f      	cmp	r3, #15
 8006a8e:	d909      	bls.n	8006aa4 <UART_SetConfig+0x388>
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a96:	d205      	bcs.n	8006aa4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60da      	str	r2, [r3, #12]
 8006aa2:	e001      	b.n	8006aa8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ab4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3720      	adds	r7, #32
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	007a1200 	.word	0x007a1200

08006ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00a      	beq.n	8006aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00a      	beq.n	8006b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00a      	beq.n	8006b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	f003 0320 	and.w	r3, r3, #32
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01a      	beq.n	8006bda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bc2:	d10a      	bne.n	8006bda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	605a      	str	r2, [r3, #4]
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b098      	sub	sp, #96	; 0x60
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c18:	f7fc f836 	bl	8002c88 <HAL_GetTick>
 8006c1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d12e      	bne.n	8006c8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c34:	2200      	movs	r2, #0
 8006c36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f88c 	bl	8006d58 <UART_WaitOnFlagUntilTimeout>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d021      	beq.n	8006c8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c64:	647b      	str	r3, [r7, #68]	; 0x44
 8006c66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e6      	bne.n	8006c46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e062      	b.n	8006d50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d149      	bne.n	8006d2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f856 	bl	8006d58 <UART_WaitOnFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d03c      	beq.n	8006d2c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	623b      	str	r3, [r7, #32]
   return(result);
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8006cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e6      	bne.n	8006cb2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3308      	adds	r3, #8
 8006cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	e853 3f00 	ldrex	r3, [r3]
 8006cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0301 	bic.w	r3, r3, #1
 8006cfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3308      	adds	r3, #8
 8006d02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d04:	61fa      	str	r2, [r7, #28]
 8006d06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d08:	69b9      	ldr	r1, [r7, #24]
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	e841 2300 	strex	r3, r2, [r1]
 8006d10:	617b      	str	r3, [r7, #20]
   return(result);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1e5      	bne.n	8006ce4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e011      	b.n	8006d50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3758      	adds	r7, #88	; 0x58
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	4613      	mov	r3, r2
 8006d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d68:	e049      	b.n	8006dfe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d045      	beq.n	8006dfe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d72:	f7fb ff89 	bl	8002c88 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d302      	bcc.n	8006d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e048      	b.n	8006e1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0304 	and.w	r3, r3, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d031      	beq.n	8006dfe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	2b08      	cmp	r3, #8
 8006da6:	d110      	bne.n	8006dca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2208      	movs	r2, #8
 8006dae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 f8ed 	bl	8006f90 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2208      	movs	r2, #8
 8006dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e029      	b.n	8006e1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd8:	d111      	bne.n	8006dfe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006de2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 f8d3 	bl	8006f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e00f      	b.n	8006e1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69da      	ldr	r2, [r3, #28]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	4013      	ands	r3, r2
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	bf0c      	ite	eq
 8006e0e:	2301      	moveq	r3, #1
 8006e10:	2300      	movne	r3, #0
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	79fb      	ldrb	r3, [r7, #7]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d0a6      	beq.n	8006d6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b097      	sub	sp, #92	; 0x5c
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	4613      	mov	r3, r2
 8006e34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	88fa      	ldrh	r2, [r7, #6]
 8006e48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5a:	d10e      	bne.n	8006e7a <UART_Start_Receive_IT+0x52>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d105      	bne.n	8006e70 <UART_Start_Receive_IT+0x48>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006e6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e6e:	e01a      	b.n	8006ea6 <UART_Start_Receive_IT+0x7e>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	22ff      	movs	r2, #255	; 0xff
 8006e74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e78:	e015      	b.n	8006ea6 <UART_Start_Receive_IT+0x7e>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10d      	bne.n	8006e9e <UART_Start_Receive_IT+0x76>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d104      	bne.n	8006e94 <UART_Start_Receive_IT+0x6c>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	22ff      	movs	r2, #255	; 0xff
 8006e8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e92:	e008      	b.n	8006ea6 <UART_Start_Receive_IT+0x7e>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	227f      	movs	r2, #127	; 0x7f
 8006e98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e9c:	e003      	b.n	8006ea6 <UART_Start_Receive_IT+0x7e>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2222      	movs	r2, #34	; 0x22
 8006eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3308      	adds	r3, #8
 8006ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec0:	e853 3f00 	ldrex	r3, [r3]
 8006ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	f043 0301 	orr.w	r3, r3, #1
 8006ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ed6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ed8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e5      	bne.n	8006eb6 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef2:	d107      	bne.n	8006f04 <UART_Start_Receive_IT+0xdc>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d103      	bne.n	8006f04 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4a22      	ldr	r2, [pc, #136]	; (8006f88 <UART_Start_Receive_IT+0x160>)
 8006f00:	669a      	str	r2, [r3, #104]	; 0x68
 8006f02:	e002      	b.n	8006f0a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a21      	ldr	r2, [pc, #132]	; (8006f8c <UART_Start_Receive_IT+0x164>)
 8006f08:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d019      	beq.n	8006f46 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
 8006f32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e6      	bne.n	8006f12 <UART_Start_Receive_IT+0xea>
 8006f44:	e018      	b.n	8006f78 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	613b      	str	r3, [r7, #16]
   return(result);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f043 0320 	orr.w	r3, r3, #32
 8006f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f64:	623b      	str	r3, [r7, #32]
 8006f66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	69f9      	ldr	r1, [r7, #28]
 8006f6a:	6a3a      	ldr	r2, [r7, #32]
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e6      	bne.n	8006f46 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	375c      	adds	r7, #92	; 0x5c
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	08007281 	.word	0x08007281
 8006f8c:	080070d9 	.word	0x080070d9

08006f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b095      	sub	sp, #84	; 0x54
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e6      	bne.n	8006f98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3308      	adds	r3, #8
 8006fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e5      	bne.n	8006fca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007002:	2b01      	cmp	r3, #1
 8007004:	d118      	bne.n	8007038 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	60bb      	str	r3, [r7, #8]
   return(result);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f023 0310 	bic.w	r3, r3, #16
 800701a:	647b      	str	r3, [r7, #68]	; 0x44
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007024:	61bb      	str	r3, [r7, #24]
 8007026:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	613b      	str	r3, [r7, #16]
   return(result);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800704c:	bf00      	nop
 800704e:	3754      	adds	r7, #84	; 0x54
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff fb3a 	bl	80066f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	60bb      	str	r3, [r7, #8]
   return(result);
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a0:	61fb      	str	r3, [r7, #28]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	6979      	ldr	r1, [r7, #20]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	613b      	str	r3, [r7, #16]
   return(result);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e6      	bne.n	800708c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2220      	movs	r2, #32
 80070c2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff fb06 	bl	80066dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070d0:	bf00      	nop
 80070d2:	3720      	adds	r7, #32
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b09c      	sub	sp, #112	; 0x70
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070f0:	2b22      	cmp	r3, #34	; 0x22
 80070f2:	f040 80b9 	bne.w	8007268 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80070fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007100:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007104:	b2d9      	uxtb	r1, r3
 8007106:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800710a:	b2da      	uxtb	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007110:	400a      	ands	r2, r1
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007126:	b29b      	uxth	r3, r3
 8007128:	3b01      	subs	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	f040 809c 	bne.w	8007278 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800714e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007154:	66bb      	str	r3, [r7, #104]	; 0x68
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800715e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007160:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800716c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e6      	bne.n	8007140 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3308      	adds	r3, #8
 8007178:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	e853 3f00 	ldrex	r3, [r3]
 8007180:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007184:	f023 0301 	bic.w	r3, r3, #1
 8007188:	667b      	str	r3, [r7, #100]	; 0x64
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3308      	adds	r3, #8
 8007190:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007192:	647a      	str	r2, [r7, #68]	; 0x44
 8007194:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800719a:	e841 2300 	strex	r3, r2, [r1]
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1e5      	bne.n	8007172 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2220      	movs	r2, #32
 80071aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d018      	beq.n	80071fa <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	623b      	str	r3, [r7, #32]
   return(result);
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071dc:	663b      	str	r3, [r7, #96]	; 0x60
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071e6:	633b      	str	r3, [r7, #48]	; 0x30
 80071e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e6      	bne.n	80071c8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d12e      	bne.n	8007260 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	60fb      	str	r3, [r7, #12]
   return(result);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f023 0310 	bic.w	r3, r3, #16
 800721c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	69b9      	ldr	r1, [r7, #24]
 800722c:	69fa      	ldr	r2, [r7, #28]
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	617b      	str	r3, [r7, #20]
   return(result);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e6      	bne.n	8007208 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	2b10      	cmp	r3, #16
 8007246:	d103      	bne.n	8007250 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2210      	movs	r2, #16
 800724e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff fa53 	bl	8006704 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800725e:	e00b      	b.n	8007278 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7fb f97d 	bl	8002560 <HAL_UART_RxCpltCallback>
}
 8007266:	e007      	b.n	8007278 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699a      	ldr	r2, [r3, #24]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0208 	orr.w	r2, r2, #8
 8007276:	619a      	str	r2, [r3, #24]
}
 8007278:	bf00      	nop
 800727a:	3770      	adds	r7, #112	; 0x70
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b09c      	sub	sp, #112	; 0x70
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800728e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007298:	2b22      	cmp	r3, #34	; 0x22
 800729a:	f040 80b9 	bne.w	8007410 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80072ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80072b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80072b6:	4013      	ands	r3, r2
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c2:	1c9a      	adds	r2, r3, #2
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	3b01      	subs	r3, #1
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f040 809c 	bne.w	8007420 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80072f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072fc:	667b      	str	r3, [r7, #100]	; 0x64
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007306:	657b      	str	r3, [r7, #84]	; 0x54
 8007308:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800730c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e6      	bne.n	80072e8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	f023 0301 	bic.w	r3, r3, #1
 8007330:	663b      	str	r3, [r7, #96]	; 0x60
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3308      	adds	r3, #8
 8007338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800733a:	643a      	str	r2, [r7, #64]	; 0x40
 800733c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e5      	bne.n	800731a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2220      	movs	r2, #32
 8007352:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d018      	beq.n	80073a2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	61fb      	str	r3, [r7, #28]
   return(result);
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007384:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007390:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e6      	bne.n	8007370 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d12e      	bne.n	8007408 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f023 0310 	bic.w	r3, r3, #16
 80073c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073ce:	61bb      	str	r3, [r7, #24]
 80073d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6979      	ldr	r1, [r7, #20]
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	613b      	str	r3, [r7, #16]
   return(result);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e6      	bne.n	80073b0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	f003 0310 	and.w	r3, r3, #16
 80073ec:	2b10      	cmp	r3, #16
 80073ee:	d103      	bne.n	80073f8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2210      	movs	r2, #16
 80073f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff f97f 	bl	8006704 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007406:	e00b      	b.n	8007420 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7fb f8a9 	bl	8002560 <HAL_UART_RxCpltCallback>
}
 800740e:	e007      	b.n	8007420 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f042 0208 	orr.w	r2, r2, #8
 800741e:	619a      	str	r2, [r3, #24]
}
 8007420:	bf00      	nop
 8007422:	3770      	adds	r7, #112	; 0x70
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007444:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007448:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007450:	b29a      	uxth	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	b29b      	uxth	r3, r3
 8007456:	43db      	mvns	r3, r3
 8007458:	b29b      	uxth	r3, r3
 800745a:	4013      	ands	r3, r2
 800745c:	b29a      	uxth	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007472:	b084      	sub	sp, #16
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	f107 0014 	add.w	r0, r7, #20
 8007480:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	b004      	add	sp, #16
 80074b2:	4770      	bx	lr

080074b4 <__errno>:
 80074b4:	4b01      	ldr	r3, [pc, #4]	; (80074bc <__errno+0x8>)
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	20000110 	.word	0x20000110

080074c0 <__libc_init_array>:
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	4d0d      	ldr	r5, [pc, #52]	; (80074f8 <__libc_init_array+0x38>)
 80074c4:	4c0d      	ldr	r4, [pc, #52]	; (80074fc <__libc_init_array+0x3c>)
 80074c6:	1b64      	subs	r4, r4, r5
 80074c8:	10a4      	asrs	r4, r4, #2
 80074ca:	2600      	movs	r6, #0
 80074cc:	42a6      	cmp	r6, r4
 80074ce:	d109      	bne.n	80074e4 <__libc_init_array+0x24>
 80074d0:	4d0b      	ldr	r5, [pc, #44]	; (8007500 <__libc_init_array+0x40>)
 80074d2:	4c0c      	ldr	r4, [pc, #48]	; (8007504 <__libc_init_array+0x44>)
 80074d4:	f001 fa34 	bl	8008940 <_init>
 80074d8:	1b64      	subs	r4, r4, r5
 80074da:	10a4      	asrs	r4, r4, #2
 80074dc:	2600      	movs	r6, #0
 80074de:	42a6      	cmp	r6, r4
 80074e0:	d105      	bne.n	80074ee <__libc_init_array+0x2e>
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e8:	4798      	blx	r3
 80074ea:	3601      	adds	r6, #1
 80074ec:	e7ee      	b.n	80074cc <__libc_init_array+0xc>
 80074ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f2:	4798      	blx	r3
 80074f4:	3601      	adds	r6, #1
 80074f6:	e7f2      	b.n	80074de <__libc_init_array+0x1e>
 80074f8:	08008b84 	.word	0x08008b84
 80074fc:	08008b84 	.word	0x08008b84
 8007500:	08008b84 	.word	0x08008b84
 8007504:	08008b88 	.word	0x08008b88

08007508 <memset>:
 8007508:	4402      	add	r2, r0
 800750a:	4603      	mov	r3, r0
 800750c:	4293      	cmp	r3, r2
 800750e:	d100      	bne.n	8007512 <memset+0xa>
 8007510:	4770      	bx	lr
 8007512:	f803 1b01 	strb.w	r1, [r3], #1
 8007516:	e7f9      	b.n	800750c <memset+0x4>

08007518 <rand>:
 8007518:	4b16      	ldr	r3, [pc, #88]	; (8007574 <rand+0x5c>)
 800751a:	b510      	push	{r4, lr}
 800751c:	681c      	ldr	r4, [r3, #0]
 800751e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007520:	b9b3      	cbnz	r3, 8007550 <rand+0x38>
 8007522:	2018      	movs	r0, #24
 8007524:	f000 f886 	bl	8007634 <malloc>
 8007528:	63a0      	str	r0, [r4, #56]	; 0x38
 800752a:	b928      	cbnz	r0, 8007538 <rand+0x20>
 800752c:	4602      	mov	r2, r0
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <rand+0x60>)
 8007530:	4812      	ldr	r0, [pc, #72]	; (800757c <rand+0x64>)
 8007532:	214e      	movs	r1, #78	; 0x4e
 8007534:	f000 f84e 	bl	80075d4 <__assert_func>
 8007538:	4a11      	ldr	r2, [pc, #68]	; (8007580 <rand+0x68>)
 800753a:	4b12      	ldr	r3, [pc, #72]	; (8007584 <rand+0x6c>)
 800753c:	e9c0 2300 	strd	r2, r3, [r0]
 8007540:	4b11      	ldr	r3, [pc, #68]	; (8007588 <rand+0x70>)
 8007542:	6083      	str	r3, [r0, #8]
 8007544:	230b      	movs	r3, #11
 8007546:	8183      	strh	r3, [r0, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	2300      	movs	r3, #0
 800754c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007550:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007552:	4a0e      	ldr	r2, [pc, #56]	; (800758c <rand+0x74>)
 8007554:	6920      	ldr	r0, [r4, #16]
 8007556:	6963      	ldr	r3, [r4, #20]
 8007558:	490d      	ldr	r1, [pc, #52]	; (8007590 <rand+0x78>)
 800755a:	4342      	muls	r2, r0
 800755c:	fb01 2203 	mla	r2, r1, r3, r2
 8007560:	fba0 0101 	umull	r0, r1, r0, r1
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	eb42 0001 	adc.w	r0, r2, r1
 800756a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800756e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007572:	bd10      	pop	{r4, pc}
 8007574:	20000110 	.word	0x20000110
 8007578:	08008a40 	.word	0x08008a40
 800757c:	08008a57 	.word	0x08008a57
 8007580:	abcd330e 	.word	0xabcd330e
 8007584:	e66d1234 	.word	0xe66d1234
 8007588:	0005deec 	.word	0x0005deec
 800758c:	5851f42d 	.word	0x5851f42d
 8007590:	4c957f2d 	.word	0x4c957f2d

08007594 <siprintf>:
 8007594:	b40e      	push	{r1, r2, r3}
 8007596:	b500      	push	{lr}
 8007598:	b09c      	sub	sp, #112	; 0x70
 800759a:	ab1d      	add	r3, sp, #116	; 0x74
 800759c:	9002      	str	r0, [sp, #8]
 800759e:	9006      	str	r0, [sp, #24]
 80075a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075a4:	4809      	ldr	r0, [pc, #36]	; (80075cc <siprintf+0x38>)
 80075a6:	9107      	str	r1, [sp, #28]
 80075a8:	9104      	str	r1, [sp, #16]
 80075aa:	4909      	ldr	r1, [pc, #36]	; (80075d0 <siprintf+0x3c>)
 80075ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80075b0:	9105      	str	r1, [sp, #20]
 80075b2:	6800      	ldr	r0, [r0, #0]
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	a902      	add	r1, sp, #8
 80075b8:	f000 f980 	bl	80078bc <_svfiprintf_r>
 80075bc:	9b02      	ldr	r3, [sp, #8]
 80075be:	2200      	movs	r2, #0
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	b01c      	add	sp, #112	; 0x70
 80075c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075c8:	b003      	add	sp, #12
 80075ca:	4770      	bx	lr
 80075cc:	20000110 	.word	0x20000110
 80075d0:	ffff0208 	.word	0xffff0208

080075d4 <__assert_func>:
 80075d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075d6:	4614      	mov	r4, r2
 80075d8:	461a      	mov	r2, r3
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <__assert_func+0x2c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4605      	mov	r5, r0
 80075e0:	68d8      	ldr	r0, [r3, #12]
 80075e2:	b14c      	cbz	r4, 80075f8 <__assert_func+0x24>
 80075e4:	4b07      	ldr	r3, [pc, #28]	; (8007604 <__assert_func+0x30>)
 80075e6:	9100      	str	r1, [sp, #0]
 80075e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075ec:	4906      	ldr	r1, [pc, #24]	; (8007608 <__assert_func+0x34>)
 80075ee:	462b      	mov	r3, r5
 80075f0:	f000 f80e 	bl	8007610 <fiprintf>
 80075f4:	f000 fe20 	bl	8008238 <abort>
 80075f8:	4b04      	ldr	r3, [pc, #16]	; (800760c <__assert_func+0x38>)
 80075fa:	461c      	mov	r4, r3
 80075fc:	e7f3      	b.n	80075e6 <__assert_func+0x12>
 80075fe:	bf00      	nop
 8007600:	20000110 	.word	0x20000110
 8007604:	08008ab2 	.word	0x08008ab2
 8007608:	08008abf 	.word	0x08008abf
 800760c:	08008aed 	.word	0x08008aed

08007610 <fiprintf>:
 8007610:	b40e      	push	{r1, r2, r3}
 8007612:	b503      	push	{r0, r1, lr}
 8007614:	4601      	mov	r1, r0
 8007616:	ab03      	add	r3, sp, #12
 8007618:	4805      	ldr	r0, [pc, #20]	; (8007630 <fiprintf+0x20>)
 800761a:	f853 2b04 	ldr.w	r2, [r3], #4
 800761e:	6800      	ldr	r0, [r0, #0]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	f000 fa75 	bl	8007b10 <_vfiprintf_r>
 8007626:	b002      	add	sp, #8
 8007628:	f85d eb04 	ldr.w	lr, [sp], #4
 800762c:	b003      	add	sp, #12
 800762e:	4770      	bx	lr
 8007630:	20000110 	.word	0x20000110

08007634 <malloc>:
 8007634:	4b02      	ldr	r3, [pc, #8]	; (8007640 <malloc+0xc>)
 8007636:	4601      	mov	r1, r0
 8007638:	6818      	ldr	r0, [r3, #0]
 800763a:	f000 b86f 	b.w	800771c <_malloc_r>
 800763e:	bf00      	nop
 8007640:	20000110 	.word	0x20000110

08007644 <_free_r>:
 8007644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007646:	2900      	cmp	r1, #0
 8007648:	d044      	beq.n	80076d4 <_free_r+0x90>
 800764a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800764e:	9001      	str	r0, [sp, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	f1a1 0404 	sub.w	r4, r1, #4
 8007656:	bfb8      	it	lt
 8007658:	18e4      	addlt	r4, r4, r3
 800765a:	f001 f83d 	bl	80086d8 <__malloc_lock>
 800765e:	4a1e      	ldr	r2, [pc, #120]	; (80076d8 <_free_r+0x94>)
 8007660:	9801      	ldr	r0, [sp, #4]
 8007662:	6813      	ldr	r3, [r2, #0]
 8007664:	b933      	cbnz	r3, 8007674 <_free_r+0x30>
 8007666:	6063      	str	r3, [r4, #4]
 8007668:	6014      	str	r4, [r2, #0]
 800766a:	b003      	add	sp, #12
 800766c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007670:	f001 b838 	b.w	80086e4 <__malloc_unlock>
 8007674:	42a3      	cmp	r3, r4
 8007676:	d908      	bls.n	800768a <_free_r+0x46>
 8007678:	6825      	ldr	r5, [r4, #0]
 800767a:	1961      	adds	r1, r4, r5
 800767c:	428b      	cmp	r3, r1
 800767e:	bf01      	itttt	eq
 8007680:	6819      	ldreq	r1, [r3, #0]
 8007682:	685b      	ldreq	r3, [r3, #4]
 8007684:	1949      	addeq	r1, r1, r5
 8007686:	6021      	streq	r1, [r4, #0]
 8007688:	e7ed      	b.n	8007666 <_free_r+0x22>
 800768a:	461a      	mov	r2, r3
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	b10b      	cbz	r3, 8007694 <_free_r+0x50>
 8007690:	42a3      	cmp	r3, r4
 8007692:	d9fa      	bls.n	800768a <_free_r+0x46>
 8007694:	6811      	ldr	r1, [r2, #0]
 8007696:	1855      	adds	r5, r2, r1
 8007698:	42a5      	cmp	r5, r4
 800769a:	d10b      	bne.n	80076b4 <_free_r+0x70>
 800769c:	6824      	ldr	r4, [r4, #0]
 800769e:	4421      	add	r1, r4
 80076a0:	1854      	adds	r4, r2, r1
 80076a2:	42a3      	cmp	r3, r4
 80076a4:	6011      	str	r1, [r2, #0]
 80076a6:	d1e0      	bne.n	800766a <_free_r+0x26>
 80076a8:	681c      	ldr	r4, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	6053      	str	r3, [r2, #4]
 80076ae:	4421      	add	r1, r4
 80076b0:	6011      	str	r1, [r2, #0]
 80076b2:	e7da      	b.n	800766a <_free_r+0x26>
 80076b4:	d902      	bls.n	80076bc <_free_r+0x78>
 80076b6:	230c      	movs	r3, #12
 80076b8:	6003      	str	r3, [r0, #0]
 80076ba:	e7d6      	b.n	800766a <_free_r+0x26>
 80076bc:	6825      	ldr	r5, [r4, #0]
 80076be:	1961      	adds	r1, r4, r5
 80076c0:	428b      	cmp	r3, r1
 80076c2:	bf04      	itt	eq
 80076c4:	6819      	ldreq	r1, [r3, #0]
 80076c6:	685b      	ldreq	r3, [r3, #4]
 80076c8:	6063      	str	r3, [r4, #4]
 80076ca:	bf04      	itt	eq
 80076cc:	1949      	addeq	r1, r1, r5
 80076ce:	6021      	streq	r1, [r4, #0]
 80076d0:	6054      	str	r4, [r2, #4]
 80076d2:	e7ca      	b.n	800766a <_free_r+0x26>
 80076d4:	b003      	add	sp, #12
 80076d6:	bd30      	pop	{r4, r5, pc}
 80076d8:	200007d8 	.word	0x200007d8

080076dc <sbrk_aligned>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	4e0e      	ldr	r6, [pc, #56]	; (8007718 <sbrk_aligned+0x3c>)
 80076e0:	460c      	mov	r4, r1
 80076e2:	6831      	ldr	r1, [r6, #0]
 80076e4:	4605      	mov	r5, r0
 80076e6:	b911      	cbnz	r1, 80076ee <sbrk_aligned+0x12>
 80076e8:	f000 fcd6 	bl	8008098 <_sbrk_r>
 80076ec:	6030      	str	r0, [r6, #0]
 80076ee:	4621      	mov	r1, r4
 80076f0:	4628      	mov	r0, r5
 80076f2:	f000 fcd1 	bl	8008098 <_sbrk_r>
 80076f6:	1c43      	adds	r3, r0, #1
 80076f8:	d00a      	beq.n	8007710 <sbrk_aligned+0x34>
 80076fa:	1cc4      	adds	r4, r0, #3
 80076fc:	f024 0403 	bic.w	r4, r4, #3
 8007700:	42a0      	cmp	r0, r4
 8007702:	d007      	beq.n	8007714 <sbrk_aligned+0x38>
 8007704:	1a21      	subs	r1, r4, r0
 8007706:	4628      	mov	r0, r5
 8007708:	f000 fcc6 	bl	8008098 <_sbrk_r>
 800770c:	3001      	adds	r0, #1
 800770e:	d101      	bne.n	8007714 <sbrk_aligned+0x38>
 8007710:	f04f 34ff 	mov.w	r4, #4294967295
 8007714:	4620      	mov	r0, r4
 8007716:	bd70      	pop	{r4, r5, r6, pc}
 8007718:	200007dc 	.word	0x200007dc

0800771c <_malloc_r>:
 800771c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007720:	1ccd      	adds	r5, r1, #3
 8007722:	f025 0503 	bic.w	r5, r5, #3
 8007726:	3508      	adds	r5, #8
 8007728:	2d0c      	cmp	r5, #12
 800772a:	bf38      	it	cc
 800772c:	250c      	movcc	r5, #12
 800772e:	2d00      	cmp	r5, #0
 8007730:	4607      	mov	r7, r0
 8007732:	db01      	blt.n	8007738 <_malloc_r+0x1c>
 8007734:	42a9      	cmp	r1, r5
 8007736:	d905      	bls.n	8007744 <_malloc_r+0x28>
 8007738:	230c      	movs	r3, #12
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	2600      	movs	r6, #0
 800773e:	4630      	mov	r0, r6
 8007740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007744:	4e2e      	ldr	r6, [pc, #184]	; (8007800 <_malloc_r+0xe4>)
 8007746:	f000 ffc7 	bl	80086d8 <__malloc_lock>
 800774a:	6833      	ldr	r3, [r6, #0]
 800774c:	461c      	mov	r4, r3
 800774e:	bb34      	cbnz	r4, 800779e <_malloc_r+0x82>
 8007750:	4629      	mov	r1, r5
 8007752:	4638      	mov	r0, r7
 8007754:	f7ff ffc2 	bl	80076dc <sbrk_aligned>
 8007758:	1c43      	adds	r3, r0, #1
 800775a:	4604      	mov	r4, r0
 800775c:	d14d      	bne.n	80077fa <_malloc_r+0xde>
 800775e:	6834      	ldr	r4, [r6, #0]
 8007760:	4626      	mov	r6, r4
 8007762:	2e00      	cmp	r6, #0
 8007764:	d140      	bne.n	80077e8 <_malloc_r+0xcc>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	4631      	mov	r1, r6
 800776a:	4638      	mov	r0, r7
 800776c:	eb04 0803 	add.w	r8, r4, r3
 8007770:	f000 fc92 	bl	8008098 <_sbrk_r>
 8007774:	4580      	cmp	r8, r0
 8007776:	d13a      	bne.n	80077ee <_malloc_r+0xd2>
 8007778:	6821      	ldr	r1, [r4, #0]
 800777a:	3503      	adds	r5, #3
 800777c:	1a6d      	subs	r5, r5, r1
 800777e:	f025 0503 	bic.w	r5, r5, #3
 8007782:	3508      	adds	r5, #8
 8007784:	2d0c      	cmp	r5, #12
 8007786:	bf38      	it	cc
 8007788:	250c      	movcc	r5, #12
 800778a:	4629      	mov	r1, r5
 800778c:	4638      	mov	r0, r7
 800778e:	f7ff ffa5 	bl	80076dc <sbrk_aligned>
 8007792:	3001      	adds	r0, #1
 8007794:	d02b      	beq.n	80077ee <_malloc_r+0xd2>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	442b      	add	r3, r5
 800779a:	6023      	str	r3, [r4, #0]
 800779c:	e00e      	b.n	80077bc <_malloc_r+0xa0>
 800779e:	6822      	ldr	r2, [r4, #0]
 80077a0:	1b52      	subs	r2, r2, r5
 80077a2:	d41e      	bmi.n	80077e2 <_malloc_r+0xc6>
 80077a4:	2a0b      	cmp	r2, #11
 80077a6:	d916      	bls.n	80077d6 <_malloc_r+0xba>
 80077a8:	1961      	adds	r1, r4, r5
 80077aa:	42a3      	cmp	r3, r4
 80077ac:	6025      	str	r5, [r4, #0]
 80077ae:	bf18      	it	ne
 80077b0:	6059      	strne	r1, [r3, #4]
 80077b2:	6863      	ldr	r3, [r4, #4]
 80077b4:	bf08      	it	eq
 80077b6:	6031      	streq	r1, [r6, #0]
 80077b8:	5162      	str	r2, [r4, r5]
 80077ba:	604b      	str	r3, [r1, #4]
 80077bc:	4638      	mov	r0, r7
 80077be:	f104 060b 	add.w	r6, r4, #11
 80077c2:	f000 ff8f 	bl	80086e4 <__malloc_unlock>
 80077c6:	f026 0607 	bic.w	r6, r6, #7
 80077ca:	1d23      	adds	r3, r4, #4
 80077cc:	1af2      	subs	r2, r6, r3
 80077ce:	d0b6      	beq.n	800773e <_malloc_r+0x22>
 80077d0:	1b9b      	subs	r3, r3, r6
 80077d2:	50a3      	str	r3, [r4, r2]
 80077d4:	e7b3      	b.n	800773e <_malloc_r+0x22>
 80077d6:	6862      	ldr	r2, [r4, #4]
 80077d8:	42a3      	cmp	r3, r4
 80077da:	bf0c      	ite	eq
 80077dc:	6032      	streq	r2, [r6, #0]
 80077de:	605a      	strne	r2, [r3, #4]
 80077e0:	e7ec      	b.n	80077bc <_malloc_r+0xa0>
 80077e2:	4623      	mov	r3, r4
 80077e4:	6864      	ldr	r4, [r4, #4]
 80077e6:	e7b2      	b.n	800774e <_malloc_r+0x32>
 80077e8:	4634      	mov	r4, r6
 80077ea:	6876      	ldr	r6, [r6, #4]
 80077ec:	e7b9      	b.n	8007762 <_malloc_r+0x46>
 80077ee:	230c      	movs	r3, #12
 80077f0:	603b      	str	r3, [r7, #0]
 80077f2:	4638      	mov	r0, r7
 80077f4:	f000 ff76 	bl	80086e4 <__malloc_unlock>
 80077f8:	e7a1      	b.n	800773e <_malloc_r+0x22>
 80077fa:	6025      	str	r5, [r4, #0]
 80077fc:	e7de      	b.n	80077bc <_malloc_r+0xa0>
 80077fe:	bf00      	nop
 8007800:	200007d8 	.word	0x200007d8

08007804 <__ssputs_r>:
 8007804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007808:	688e      	ldr	r6, [r1, #8]
 800780a:	429e      	cmp	r6, r3
 800780c:	4682      	mov	sl, r0
 800780e:	460c      	mov	r4, r1
 8007810:	4690      	mov	r8, r2
 8007812:	461f      	mov	r7, r3
 8007814:	d838      	bhi.n	8007888 <__ssputs_r+0x84>
 8007816:	898a      	ldrh	r2, [r1, #12]
 8007818:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800781c:	d032      	beq.n	8007884 <__ssputs_r+0x80>
 800781e:	6825      	ldr	r5, [r4, #0]
 8007820:	6909      	ldr	r1, [r1, #16]
 8007822:	eba5 0901 	sub.w	r9, r5, r1
 8007826:	6965      	ldr	r5, [r4, #20]
 8007828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800782c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007830:	3301      	adds	r3, #1
 8007832:	444b      	add	r3, r9
 8007834:	106d      	asrs	r5, r5, #1
 8007836:	429d      	cmp	r5, r3
 8007838:	bf38      	it	cc
 800783a:	461d      	movcc	r5, r3
 800783c:	0553      	lsls	r3, r2, #21
 800783e:	d531      	bpl.n	80078a4 <__ssputs_r+0xa0>
 8007840:	4629      	mov	r1, r5
 8007842:	f7ff ff6b 	bl	800771c <_malloc_r>
 8007846:	4606      	mov	r6, r0
 8007848:	b950      	cbnz	r0, 8007860 <__ssputs_r+0x5c>
 800784a:	230c      	movs	r3, #12
 800784c:	f8ca 3000 	str.w	r3, [sl]
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007856:	81a3      	strh	r3, [r4, #12]
 8007858:	f04f 30ff 	mov.w	r0, #4294967295
 800785c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007860:	6921      	ldr	r1, [r4, #16]
 8007862:	464a      	mov	r2, r9
 8007864:	f000 ff10 	bl	8008688 <memcpy>
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800786e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007872:	81a3      	strh	r3, [r4, #12]
 8007874:	6126      	str	r6, [r4, #16]
 8007876:	6165      	str	r5, [r4, #20]
 8007878:	444e      	add	r6, r9
 800787a:	eba5 0509 	sub.w	r5, r5, r9
 800787e:	6026      	str	r6, [r4, #0]
 8007880:	60a5      	str	r5, [r4, #8]
 8007882:	463e      	mov	r6, r7
 8007884:	42be      	cmp	r6, r7
 8007886:	d900      	bls.n	800788a <__ssputs_r+0x86>
 8007888:	463e      	mov	r6, r7
 800788a:	6820      	ldr	r0, [r4, #0]
 800788c:	4632      	mov	r2, r6
 800788e:	4641      	mov	r1, r8
 8007890:	f000 ff08 	bl	80086a4 <memmove>
 8007894:	68a3      	ldr	r3, [r4, #8]
 8007896:	1b9b      	subs	r3, r3, r6
 8007898:	60a3      	str	r3, [r4, #8]
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	4433      	add	r3, r6
 800789e:	6023      	str	r3, [r4, #0]
 80078a0:	2000      	movs	r0, #0
 80078a2:	e7db      	b.n	800785c <__ssputs_r+0x58>
 80078a4:	462a      	mov	r2, r5
 80078a6:	f000 ff23 	bl	80086f0 <_realloc_r>
 80078aa:	4606      	mov	r6, r0
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d1e1      	bne.n	8007874 <__ssputs_r+0x70>
 80078b0:	6921      	ldr	r1, [r4, #16]
 80078b2:	4650      	mov	r0, sl
 80078b4:	f7ff fec6 	bl	8007644 <_free_r>
 80078b8:	e7c7      	b.n	800784a <__ssputs_r+0x46>
	...

080078bc <_svfiprintf_r>:
 80078bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c0:	4698      	mov	r8, r3
 80078c2:	898b      	ldrh	r3, [r1, #12]
 80078c4:	061b      	lsls	r3, r3, #24
 80078c6:	b09d      	sub	sp, #116	; 0x74
 80078c8:	4607      	mov	r7, r0
 80078ca:	460d      	mov	r5, r1
 80078cc:	4614      	mov	r4, r2
 80078ce:	d50e      	bpl.n	80078ee <_svfiprintf_r+0x32>
 80078d0:	690b      	ldr	r3, [r1, #16]
 80078d2:	b963      	cbnz	r3, 80078ee <_svfiprintf_r+0x32>
 80078d4:	2140      	movs	r1, #64	; 0x40
 80078d6:	f7ff ff21 	bl	800771c <_malloc_r>
 80078da:	6028      	str	r0, [r5, #0]
 80078dc:	6128      	str	r0, [r5, #16]
 80078de:	b920      	cbnz	r0, 80078ea <_svfiprintf_r+0x2e>
 80078e0:	230c      	movs	r3, #12
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295
 80078e8:	e0d1      	b.n	8007a8e <_svfiprintf_r+0x1d2>
 80078ea:	2340      	movs	r3, #64	; 0x40
 80078ec:	616b      	str	r3, [r5, #20]
 80078ee:	2300      	movs	r3, #0
 80078f0:	9309      	str	r3, [sp, #36]	; 0x24
 80078f2:	2320      	movs	r3, #32
 80078f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80078fc:	2330      	movs	r3, #48	; 0x30
 80078fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007aa8 <_svfiprintf_r+0x1ec>
 8007902:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007906:	f04f 0901 	mov.w	r9, #1
 800790a:	4623      	mov	r3, r4
 800790c:	469a      	mov	sl, r3
 800790e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007912:	b10a      	cbz	r2, 8007918 <_svfiprintf_r+0x5c>
 8007914:	2a25      	cmp	r2, #37	; 0x25
 8007916:	d1f9      	bne.n	800790c <_svfiprintf_r+0x50>
 8007918:	ebba 0b04 	subs.w	fp, sl, r4
 800791c:	d00b      	beq.n	8007936 <_svfiprintf_r+0x7a>
 800791e:	465b      	mov	r3, fp
 8007920:	4622      	mov	r2, r4
 8007922:	4629      	mov	r1, r5
 8007924:	4638      	mov	r0, r7
 8007926:	f7ff ff6d 	bl	8007804 <__ssputs_r>
 800792a:	3001      	adds	r0, #1
 800792c:	f000 80aa 	beq.w	8007a84 <_svfiprintf_r+0x1c8>
 8007930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007932:	445a      	add	r2, fp
 8007934:	9209      	str	r2, [sp, #36]	; 0x24
 8007936:	f89a 3000 	ldrb.w	r3, [sl]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 80a2 	beq.w	8007a84 <_svfiprintf_r+0x1c8>
 8007940:	2300      	movs	r3, #0
 8007942:	f04f 32ff 	mov.w	r2, #4294967295
 8007946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800794a:	f10a 0a01 	add.w	sl, sl, #1
 800794e:	9304      	str	r3, [sp, #16]
 8007950:	9307      	str	r3, [sp, #28]
 8007952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007956:	931a      	str	r3, [sp, #104]	; 0x68
 8007958:	4654      	mov	r4, sl
 800795a:	2205      	movs	r2, #5
 800795c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007960:	4851      	ldr	r0, [pc, #324]	; (8007aa8 <_svfiprintf_r+0x1ec>)
 8007962:	f7f8 fc3d 	bl	80001e0 <memchr>
 8007966:	9a04      	ldr	r2, [sp, #16]
 8007968:	b9d8      	cbnz	r0, 80079a2 <_svfiprintf_r+0xe6>
 800796a:	06d0      	lsls	r0, r2, #27
 800796c:	bf44      	itt	mi
 800796e:	2320      	movmi	r3, #32
 8007970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007974:	0711      	lsls	r1, r2, #28
 8007976:	bf44      	itt	mi
 8007978:	232b      	movmi	r3, #43	; 0x2b
 800797a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800797e:	f89a 3000 	ldrb.w	r3, [sl]
 8007982:	2b2a      	cmp	r3, #42	; 0x2a
 8007984:	d015      	beq.n	80079b2 <_svfiprintf_r+0xf6>
 8007986:	9a07      	ldr	r2, [sp, #28]
 8007988:	4654      	mov	r4, sl
 800798a:	2000      	movs	r0, #0
 800798c:	f04f 0c0a 	mov.w	ip, #10
 8007990:	4621      	mov	r1, r4
 8007992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007996:	3b30      	subs	r3, #48	; 0x30
 8007998:	2b09      	cmp	r3, #9
 800799a:	d94e      	bls.n	8007a3a <_svfiprintf_r+0x17e>
 800799c:	b1b0      	cbz	r0, 80079cc <_svfiprintf_r+0x110>
 800799e:	9207      	str	r2, [sp, #28]
 80079a0:	e014      	b.n	80079cc <_svfiprintf_r+0x110>
 80079a2:	eba0 0308 	sub.w	r3, r0, r8
 80079a6:	fa09 f303 	lsl.w	r3, r9, r3
 80079aa:	4313      	orrs	r3, r2
 80079ac:	9304      	str	r3, [sp, #16]
 80079ae:	46a2      	mov	sl, r4
 80079b0:	e7d2      	b.n	8007958 <_svfiprintf_r+0x9c>
 80079b2:	9b03      	ldr	r3, [sp, #12]
 80079b4:	1d19      	adds	r1, r3, #4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	9103      	str	r1, [sp, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bfbb      	ittet	lt
 80079be:	425b      	neglt	r3, r3
 80079c0:	f042 0202 	orrlt.w	r2, r2, #2
 80079c4:	9307      	strge	r3, [sp, #28]
 80079c6:	9307      	strlt	r3, [sp, #28]
 80079c8:	bfb8      	it	lt
 80079ca:	9204      	strlt	r2, [sp, #16]
 80079cc:	7823      	ldrb	r3, [r4, #0]
 80079ce:	2b2e      	cmp	r3, #46	; 0x2e
 80079d0:	d10c      	bne.n	80079ec <_svfiprintf_r+0x130>
 80079d2:	7863      	ldrb	r3, [r4, #1]
 80079d4:	2b2a      	cmp	r3, #42	; 0x2a
 80079d6:	d135      	bne.n	8007a44 <_svfiprintf_r+0x188>
 80079d8:	9b03      	ldr	r3, [sp, #12]
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	9203      	str	r2, [sp, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bfb8      	it	lt
 80079e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80079e8:	3402      	adds	r4, #2
 80079ea:	9305      	str	r3, [sp, #20]
 80079ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ab8 <_svfiprintf_r+0x1fc>
 80079f0:	7821      	ldrb	r1, [r4, #0]
 80079f2:	2203      	movs	r2, #3
 80079f4:	4650      	mov	r0, sl
 80079f6:	f7f8 fbf3 	bl	80001e0 <memchr>
 80079fa:	b140      	cbz	r0, 8007a0e <_svfiprintf_r+0x152>
 80079fc:	2340      	movs	r3, #64	; 0x40
 80079fe:	eba0 000a 	sub.w	r0, r0, sl
 8007a02:	fa03 f000 	lsl.w	r0, r3, r0
 8007a06:	9b04      	ldr	r3, [sp, #16]
 8007a08:	4303      	orrs	r3, r0
 8007a0a:	3401      	adds	r4, #1
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a12:	4826      	ldr	r0, [pc, #152]	; (8007aac <_svfiprintf_r+0x1f0>)
 8007a14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a18:	2206      	movs	r2, #6
 8007a1a:	f7f8 fbe1 	bl	80001e0 <memchr>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d038      	beq.n	8007a94 <_svfiprintf_r+0x1d8>
 8007a22:	4b23      	ldr	r3, [pc, #140]	; (8007ab0 <_svfiprintf_r+0x1f4>)
 8007a24:	bb1b      	cbnz	r3, 8007a6e <_svfiprintf_r+0x1b2>
 8007a26:	9b03      	ldr	r3, [sp, #12]
 8007a28:	3307      	adds	r3, #7
 8007a2a:	f023 0307 	bic.w	r3, r3, #7
 8007a2e:	3308      	adds	r3, #8
 8007a30:	9303      	str	r3, [sp, #12]
 8007a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a34:	4433      	add	r3, r6
 8007a36:	9309      	str	r3, [sp, #36]	; 0x24
 8007a38:	e767      	b.n	800790a <_svfiprintf_r+0x4e>
 8007a3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a3e:	460c      	mov	r4, r1
 8007a40:	2001      	movs	r0, #1
 8007a42:	e7a5      	b.n	8007990 <_svfiprintf_r+0xd4>
 8007a44:	2300      	movs	r3, #0
 8007a46:	3401      	adds	r4, #1
 8007a48:	9305      	str	r3, [sp, #20]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	f04f 0c0a 	mov.w	ip, #10
 8007a50:	4620      	mov	r0, r4
 8007a52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a56:	3a30      	subs	r2, #48	; 0x30
 8007a58:	2a09      	cmp	r2, #9
 8007a5a:	d903      	bls.n	8007a64 <_svfiprintf_r+0x1a8>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0c5      	beq.n	80079ec <_svfiprintf_r+0x130>
 8007a60:	9105      	str	r1, [sp, #20]
 8007a62:	e7c3      	b.n	80079ec <_svfiprintf_r+0x130>
 8007a64:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a68:	4604      	mov	r4, r0
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e7f0      	b.n	8007a50 <_svfiprintf_r+0x194>
 8007a6e:	ab03      	add	r3, sp, #12
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	462a      	mov	r2, r5
 8007a74:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <_svfiprintf_r+0x1f8>)
 8007a76:	a904      	add	r1, sp, #16
 8007a78:	4638      	mov	r0, r7
 8007a7a:	f3af 8000 	nop.w
 8007a7e:	1c42      	adds	r2, r0, #1
 8007a80:	4606      	mov	r6, r0
 8007a82:	d1d6      	bne.n	8007a32 <_svfiprintf_r+0x176>
 8007a84:	89ab      	ldrh	r3, [r5, #12]
 8007a86:	065b      	lsls	r3, r3, #25
 8007a88:	f53f af2c 	bmi.w	80078e4 <_svfiprintf_r+0x28>
 8007a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a8e:	b01d      	add	sp, #116	; 0x74
 8007a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a94:	ab03      	add	r3, sp, #12
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	462a      	mov	r2, r5
 8007a9a:	4b06      	ldr	r3, [pc, #24]	; (8007ab4 <_svfiprintf_r+0x1f8>)
 8007a9c:	a904      	add	r1, sp, #16
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	f000 f9d4 	bl	8007e4c <_printf_i>
 8007aa4:	e7eb      	b.n	8007a7e <_svfiprintf_r+0x1c2>
 8007aa6:	bf00      	nop
 8007aa8:	08008aee 	.word	0x08008aee
 8007aac:	08008af8 	.word	0x08008af8
 8007ab0:	00000000 	.word	0x00000000
 8007ab4:	08007805 	.word	0x08007805
 8007ab8:	08008af4 	.word	0x08008af4

08007abc <__sfputc_r>:
 8007abc:	6893      	ldr	r3, [r2, #8]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	b410      	push	{r4}
 8007ac4:	6093      	str	r3, [r2, #8]
 8007ac6:	da08      	bge.n	8007ada <__sfputc_r+0x1e>
 8007ac8:	6994      	ldr	r4, [r2, #24]
 8007aca:	42a3      	cmp	r3, r4
 8007acc:	db01      	blt.n	8007ad2 <__sfputc_r+0x16>
 8007ace:	290a      	cmp	r1, #10
 8007ad0:	d103      	bne.n	8007ada <__sfputc_r+0x1e>
 8007ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ad6:	f000 baef 	b.w	80080b8 <__swbuf_r>
 8007ada:	6813      	ldr	r3, [r2, #0]
 8007adc:	1c58      	adds	r0, r3, #1
 8007ade:	6010      	str	r0, [r2, #0]
 8007ae0:	7019      	strb	r1, [r3, #0]
 8007ae2:	4608      	mov	r0, r1
 8007ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <__sfputs_r>:
 8007aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aec:	4606      	mov	r6, r0
 8007aee:	460f      	mov	r7, r1
 8007af0:	4614      	mov	r4, r2
 8007af2:	18d5      	adds	r5, r2, r3
 8007af4:	42ac      	cmp	r4, r5
 8007af6:	d101      	bne.n	8007afc <__sfputs_r+0x12>
 8007af8:	2000      	movs	r0, #0
 8007afa:	e007      	b.n	8007b0c <__sfputs_r+0x22>
 8007afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b00:	463a      	mov	r2, r7
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7ff ffda 	bl	8007abc <__sfputc_r>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d1f3      	bne.n	8007af4 <__sfputs_r+0xa>
 8007b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b10 <_vfiprintf_r>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	460d      	mov	r5, r1
 8007b16:	b09d      	sub	sp, #116	; 0x74
 8007b18:	4614      	mov	r4, r2
 8007b1a:	4698      	mov	r8, r3
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	b118      	cbz	r0, 8007b28 <_vfiprintf_r+0x18>
 8007b20:	6983      	ldr	r3, [r0, #24]
 8007b22:	b90b      	cbnz	r3, 8007b28 <_vfiprintf_r+0x18>
 8007b24:	f000 fcaa 	bl	800847c <__sinit>
 8007b28:	4b89      	ldr	r3, [pc, #548]	; (8007d50 <_vfiprintf_r+0x240>)
 8007b2a:	429d      	cmp	r5, r3
 8007b2c:	d11b      	bne.n	8007b66 <_vfiprintf_r+0x56>
 8007b2e:	6875      	ldr	r5, [r6, #4]
 8007b30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b32:	07d9      	lsls	r1, r3, #31
 8007b34:	d405      	bmi.n	8007b42 <_vfiprintf_r+0x32>
 8007b36:	89ab      	ldrh	r3, [r5, #12]
 8007b38:	059a      	lsls	r2, r3, #22
 8007b3a:	d402      	bmi.n	8007b42 <_vfiprintf_r+0x32>
 8007b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b3e:	f000 fd3b 	bl	80085b8 <__retarget_lock_acquire_recursive>
 8007b42:	89ab      	ldrh	r3, [r5, #12]
 8007b44:	071b      	lsls	r3, r3, #28
 8007b46:	d501      	bpl.n	8007b4c <_vfiprintf_r+0x3c>
 8007b48:	692b      	ldr	r3, [r5, #16]
 8007b4a:	b9eb      	cbnz	r3, 8007b88 <_vfiprintf_r+0x78>
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f000 fb04 	bl	800815c <__swsetup_r>
 8007b54:	b1c0      	cbz	r0, 8007b88 <_vfiprintf_r+0x78>
 8007b56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b58:	07dc      	lsls	r4, r3, #31
 8007b5a:	d50e      	bpl.n	8007b7a <_vfiprintf_r+0x6a>
 8007b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b60:	b01d      	add	sp, #116	; 0x74
 8007b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b66:	4b7b      	ldr	r3, [pc, #492]	; (8007d54 <_vfiprintf_r+0x244>)
 8007b68:	429d      	cmp	r5, r3
 8007b6a:	d101      	bne.n	8007b70 <_vfiprintf_r+0x60>
 8007b6c:	68b5      	ldr	r5, [r6, #8]
 8007b6e:	e7df      	b.n	8007b30 <_vfiprintf_r+0x20>
 8007b70:	4b79      	ldr	r3, [pc, #484]	; (8007d58 <_vfiprintf_r+0x248>)
 8007b72:	429d      	cmp	r5, r3
 8007b74:	bf08      	it	eq
 8007b76:	68f5      	ldreq	r5, [r6, #12]
 8007b78:	e7da      	b.n	8007b30 <_vfiprintf_r+0x20>
 8007b7a:	89ab      	ldrh	r3, [r5, #12]
 8007b7c:	0598      	lsls	r0, r3, #22
 8007b7e:	d4ed      	bmi.n	8007b5c <_vfiprintf_r+0x4c>
 8007b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b82:	f000 fd1a 	bl	80085ba <__retarget_lock_release_recursive>
 8007b86:	e7e9      	b.n	8007b5c <_vfiprintf_r+0x4c>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b8c:	2320      	movs	r3, #32
 8007b8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b92:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b96:	2330      	movs	r3, #48	; 0x30
 8007b98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d5c <_vfiprintf_r+0x24c>
 8007b9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ba0:	f04f 0901 	mov.w	r9, #1
 8007ba4:	4623      	mov	r3, r4
 8007ba6:	469a      	mov	sl, r3
 8007ba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bac:	b10a      	cbz	r2, 8007bb2 <_vfiprintf_r+0xa2>
 8007bae:	2a25      	cmp	r2, #37	; 0x25
 8007bb0:	d1f9      	bne.n	8007ba6 <_vfiprintf_r+0x96>
 8007bb2:	ebba 0b04 	subs.w	fp, sl, r4
 8007bb6:	d00b      	beq.n	8007bd0 <_vfiprintf_r+0xc0>
 8007bb8:	465b      	mov	r3, fp
 8007bba:	4622      	mov	r2, r4
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f7ff ff93 	bl	8007aea <__sfputs_r>
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	f000 80aa 	beq.w	8007d1e <_vfiprintf_r+0x20e>
 8007bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bcc:	445a      	add	r2, fp
 8007bce:	9209      	str	r2, [sp, #36]	; 0x24
 8007bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 80a2 	beq.w	8007d1e <_vfiprintf_r+0x20e>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8007be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007be4:	f10a 0a01 	add.w	sl, sl, #1
 8007be8:	9304      	str	r3, [sp, #16]
 8007bea:	9307      	str	r3, [sp, #28]
 8007bec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bf0:	931a      	str	r3, [sp, #104]	; 0x68
 8007bf2:	4654      	mov	r4, sl
 8007bf4:	2205      	movs	r2, #5
 8007bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfa:	4858      	ldr	r0, [pc, #352]	; (8007d5c <_vfiprintf_r+0x24c>)
 8007bfc:	f7f8 faf0 	bl	80001e0 <memchr>
 8007c00:	9a04      	ldr	r2, [sp, #16]
 8007c02:	b9d8      	cbnz	r0, 8007c3c <_vfiprintf_r+0x12c>
 8007c04:	06d1      	lsls	r1, r2, #27
 8007c06:	bf44      	itt	mi
 8007c08:	2320      	movmi	r3, #32
 8007c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c0e:	0713      	lsls	r3, r2, #28
 8007c10:	bf44      	itt	mi
 8007c12:	232b      	movmi	r3, #43	; 0x2b
 8007c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c18:	f89a 3000 	ldrb.w	r3, [sl]
 8007c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c1e:	d015      	beq.n	8007c4c <_vfiprintf_r+0x13c>
 8007c20:	9a07      	ldr	r2, [sp, #28]
 8007c22:	4654      	mov	r4, sl
 8007c24:	2000      	movs	r0, #0
 8007c26:	f04f 0c0a 	mov.w	ip, #10
 8007c2a:	4621      	mov	r1, r4
 8007c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c30:	3b30      	subs	r3, #48	; 0x30
 8007c32:	2b09      	cmp	r3, #9
 8007c34:	d94e      	bls.n	8007cd4 <_vfiprintf_r+0x1c4>
 8007c36:	b1b0      	cbz	r0, 8007c66 <_vfiprintf_r+0x156>
 8007c38:	9207      	str	r2, [sp, #28]
 8007c3a:	e014      	b.n	8007c66 <_vfiprintf_r+0x156>
 8007c3c:	eba0 0308 	sub.w	r3, r0, r8
 8007c40:	fa09 f303 	lsl.w	r3, r9, r3
 8007c44:	4313      	orrs	r3, r2
 8007c46:	9304      	str	r3, [sp, #16]
 8007c48:	46a2      	mov	sl, r4
 8007c4a:	e7d2      	b.n	8007bf2 <_vfiprintf_r+0xe2>
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	1d19      	adds	r1, r3, #4
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	9103      	str	r1, [sp, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bfbb      	ittet	lt
 8007c58:	425b      	neglt	r3, r3
 8007c5a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c5e:	9307      	strge	r3, [sp, #28]
 8007c60:	9307      	strlt	r3, [sp, #28]
 8007c62:	bfb8      	it	lt
 8007c64:	9204      	strlt	r2, [sp, #16]
 8007c66:	7823      	ldrb	r3, [r4, #0]
 8007c68:	2b2e      	cmp	r3, #46	; 0x2e
 8007c6a:	d10c      	bne.n	8007c86 <_vfiprintf_r+0x176>
 8007c6c:	7863      	ldrb	r3, [r4, #1]
 8007c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c70:	d135      	bne.n	8007cde <_vfiprintf_r+0x1ce>
 8007c72:	9b03      	ldr	r3, [sp, #12]
 8007c74:	1d1a      	adds	r2, r3, #4
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	9203      	str	r2, [sp, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	bfb8      	it	lt
 8007c7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c82:	3402      	adds	r4, #2
 8007c84:	9305      	str	r3, [sp, #20]
 8007c86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d6c <_vfiprintf_r+0x25c>
 8007c8a:	7821      	ldrb	r1, [r4, #0]
 8007c8c:	2203      	movs	r2, #3
 8007c8e:	4650      	mov	r0, sl
 8007c90:	f7f8 faa6 	bl	80001e0 <memchr>
 8007c94:	b140      	cbz	r0, 8007ca8 <_vfiprintf_r+0x198>
 8007c96:	2340      	movs	r3, #64	; 0x40
 8007c98:	eba0 000a 	sub.w	r0, r0, sl
 8007c9c:	fa03 f000 	lsl.w	r0, r3, r0
 8007ca0:	9b04      	ldr	r3, [sp, #16]
 8007ca2:	4303      	orrs	r3, r0
 8007ca4:	3401      	adds	r4, #1
 8007ca6:	9304      	str	r3, [sp, #16]
 8007ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cac:	482c      	ldr	r0, [pc, #176]	; (8007d60 <_vfiprintf_r+0x250>)
 8007cae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cb2:	2206      	movs	r2, #6
 8007cb4:	f7f8 fa94 	bl	80001e0 <memchr>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d03f      	beq.n	8007d3c <_vfiprintf_r+0x22c>
 8007cbc:	4b29      	ldr	r3, [pc, #164]	; (8007d64 <_vfiprintf_r+0x254>)
 8007cbe:	bb1b      	cbnz	r3, 8007d08 <_vfiprintf_r+0x1f8>
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	3307      	adds	r3, #7
 8007cc4:	f023 0307 	bic.w	r3, r3, #7
 8007cc8:	3308      	adds	r3, #8
 8007cca:	9303      	str	r3, [sp, #12]
 8007ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cce:	443b      	add	r3, r7
 8007cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd2:	e767      	b.n	8007ba4 <_vfiprintf_r+0x94>
 8007cd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cd8:	460c      	mov	r4, r1
 8007cda:	2001      	movs	r0, #1
 8007cdc:	e7a5      	b.n	8007c2a <_vfiprintf_r+0x11a>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	3401      	adds	r4, #1
 8007ce2:	9305      	str	r3, [sp, #20]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f04f 0c0a 	mov.w	ip, #10
 8007cea:	4620      	mov	r0, r4
 8007cec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cf0:	3a30      	subs	r2, #48	; 0x30
 8007cf2:	2a09      	cmp	r2, #9
 8007cf4:	d903      	bls.n	8007cfe <_vfiprintf_r+0x1ee>
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0c5      	beq.n	8007c86 <_vfiprintf_r+0x176>
 8007cfa:	9105      	str	r1, [sp, #20]
 8007cfc:	e7c3      	b.n	8007c86 <_vfiprintf_r+0x176>
 8007cfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d02:	4604      	mov	r4, r0
 8007d04:	2301      	movs	r3, #1
 8007d06:	e7f0      	b.n	8007cea <_vfiprintf_r+0x1da>
 8007d08:	ab03      	add	r3, sp, #12
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	4b16      	ldr	r3, [pc, #88]	; (8007d68 <_vfiprintf_r+0x258>)
 8007d10:	a904      	add	r1, sp, #16
 8007d12:	4630      	mov	r0, r6
 8007d14:	f3af 8000 	nop.w
 8007d18:	4607      	mov	r7, r0
 8007d1a:	1c78      	adds	r0, r7, #1
 8007d1c:	d1d6      	bne.n	8007ccc <_vfiprintf_r+0x1bc>
 8007d1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d20:	07d9      	lsls	r1, r3, #31
 8007d22:	d405      	bmi.n	8007d30 <_vfiprintf_r+0x220>
 8007d24:	89ab      	ldrh	r3, [r5, #12]
 8007d26:	059a      	lsls	r2, r3, #22
 8007d28:	d402      	bmi.n	8007d30 <_vfiprintf_r+0x220>
 8007d2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d2c:	f000 fc45 	bl	80085ba <__retarget_lock_release_recursive>
 8007d30:	89ab      	ldrh	r3, [r5, #12]
 8007d32:	065b      	lsls	r3, r3, #25
 8007d34:	f53f af12 	bmi.w	8007b5c <_vfiprintf_r+0x4c>
 8007d38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d3a:	e711      	b.n	8007b60 <_vfiprintf_r+0x50>
 8007d3c:	ab03      	add	r3, sp, #12
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	462a      	mov	r2, r5
 8007d42:	4b09      	ldr	r3, [pc, #36]	; (8007d68 <_vfiprintf_r+0x258>)
 8007d44:	a904      	add	r1, sp, #16
 8007d46:	4630      	mov	r0, r6
 8007d48:	f000 f880 	bl	8007e4c <_printf_i>
 8007d4c:	e7e4      	b.n	8007d18 <_vfiprintf_r+0x208>
 8007d4e:	bf00      	nop
 8007d50:	08008b44 	.word	0x08008b44
 8007d54:	08008b64 	.word	0x08008b64
 8007d58:	08008b24 	.word	0x08008b24
 8007d5c:	08008aee 	.word	0x08008aee
 8007d60:	08008af8 	.word	0x08008af8
 8007d64:	00000000 	.word	0x00000000
 8007d68:	08007aeb 	.word	0x08007aeb
 8007d6c:	08008af4 	.word	0x08008af4

08007d70 <_printf_common>:
 8007d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	4616      	mov	r6, r2
 8007d76:	4699      	mov	r9, r3
 8007d78:	688a      	ldr	r2, [r1, #8]
 8007d7a:	690b      	ldr	r3, [r1, #16]
 8007d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d80:	4293      	cmp	r3, r2
 8007d82:	bfb8      	it	lt
 8007d84:	4613      	movlt	r3, r2
 8007d86:	6033      	str	r3, [r6, #0]
 8007d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d8c:	4607      	mov	r7, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	b10a      	cbz	r2, 8007d96 <_printf_common+0x26>
 8007d92:	3301      	adds	r3, #1
 8007d94:	6033      	str	r3, [r6, #0]
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	0699      	lsls	r1, r3, #26
 8007d9a:	bf42      	ittt	mi
 8007d9c:	6833      	ldrmi	r3, [r6, #0]
 8007d9e:	3302      	addmi	r3, #2
 8007da0:	6033      	strmi	r3, [r6, #0]
 8007da2:	6825      	ldr	r5, [r4, #0]
 8007da4:	f015 0506 	ands.w	r5, r5, #6
 8007da8:	d106      	bne.n	8007db8 <_printf_common+0x48>
 8007daa:	f104 0a19 	add.w	sl, r4, #25
 8007dae:	68e3      	ldr	r3, [r4, #12]
 8007db0:	6832      	ldr	r2, [r6, #0]
 8007db2:	1a9b      	subs	r3, r3, r2
 8007db4:	42ab      	cmp	r3, r5
 8007db6:	dc26      	bgt.n	8007e06 <_printf_common+0x96>
 8007db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dbc:	1e13      	subs	r3, r2, #0
 8007dbe:	6822      	ldr	r2, [r4, #0]
 8007dc0:	bf18      	it	ne
 8007dc2:	2301      	movne	r3, #1
 8007dc4:	0692      	lsls	r2, r2, #26
 8007dc6:	d42b      	bmi.n	8007e20 <_printf_common+0xb0>
 8007dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dcc:	4649      	mov	r1, r9
 8007dce:	4638      	mov	r0, r7
 8007dd0:	47c0      	blx	r8
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	d01e      	beq.n	8007e14 <_printf_common+0xa4>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	68e5      	ldr	r5, [r4, #12]
 8007dda:	6832      	ldr	r2, [r6, #0]
 8007ddc:	f003 0306 	and.w	r3, r3, #6
 8007de0:	2b04      	cmp	r3, #4
 8007de2:	bf08      	it	eq
 8007de4:	1aad      	subeq	r5, r5, r2
 8007de6:	68a3      	ldr	r3, [r4, #8]
 8007de8:	6922      	ldr	r2, [r4, #16]
 8007dea:	bf0c      	ite	eq
 8007dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007df0:	2500      	movne	r5, #0
 8007df2:	4293      	cmp	r3, r2
 8007df4:	bfc4      	itt	gt
 8007df6:	1a9b      	subgt	r3, r3, r2
 8007df8:	18ed      	addgt	r5, r5, r3
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	341a      	adds	r4, #26
 8007dfe:	42b5      	cmp	r5, r6
 8007e00:	d11a      	bne.n	8007e38 <_printf_common+0xc8>
 8007e02:	2000      	movs	r0, #0
 8007e04:	e008      	b.n	8007e18 <_printf_common+0xa8>
 8007e06:	2301      	movs	r3, #1
 8007e08:	4652      	mov	r2, sl
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	47c0      	blx	r8
 8007e10:	3001      	adds	r0, #1
 8007e12:	d103      	bne.n	8007e1c <_printf_common+0xac>
 8007e14:	f04f 30ff 	mov.w	r0, #4294967295
 8007e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e1c:	3501      	adds	r5, #1
 8007e1e:	e7c6      	b.n	8007dae <_printf_common+0x3e>
 8007e20:	18e1      	adds	r1, r4, r3
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	2030      	movs	r0, #48	; 0x30
 8007e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e2a:	4422      	add	r2, r4
 8007e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e34:	3302      	adds	r3, #2
 8007e36:	e7c7      	b.n	8007dc8 <_printf_common+0x58>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	4622      	mov	r2, r4
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	4638      	mov	r0, r7
 8007e40:	47c0      	blx	r8
 8007e42:	3001      	adds	r0, #1
 8007e44:	d0e6      	beq.n	8007e14 <_printf_common+0xa4>
 8007e46:	3601      	adds	r6, #1
 8007e48:	e7d9      	b.n	8007dfe <_printf_common+0x8e>
	...

08007e4c <_printf_i>:
 8007e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e50:	7e0f      	ldrb	r7, [r1, #24]
 8007e52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e54:	2f78      	cmp	r7, #120	; 0x78
 8007e56:	4691      	mov	r9, r2
 8007e58:	4680      	mov	r8, r0
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	469a      	mov	sl, r3
 8007e5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e62:	d807      	bhi.n	8007e74 <_printf_i+0x28>
 8007e64:	2f62      	cmp	r7, #98	; 0x62
 8007e66:	d80a      	bhi.n	8007e7e <_printf_i+0x32>
 8007e68:	2f00      	cmp	r7, #0
 8007e6a:	f000 80d8 	beq.w	800801e <_printf_i+0x1d2>
 8007e6e:	2f58      	cmp	r7, #88	; 0x58
 8007e70:	f000 80a3 	beq.w	8007fba <_printf_i+0x16e>
 8007e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e7c:	e03a      	b.n	8007ef4 <_printf_i+0xa8>
 8007e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e82:	2b15      	cmp	r3, #21
 8007e84:	d8f6      	bhi.n	8007e74 <_printf_i+0x28>
 8007e86:	a101      	add	r1, pc, #4	; (adr r1, 8007e8c <_printf_i+0x40>)
 8007e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e8c:	08007ee5 	.word	0x08007ee5
 8007e90:	08007ef9 	.word	0x08007ef9
 8007e94:	08007e75 	.word	0x08007e75
 8007e98:	08007e75 	.word	0x08007e75
 8007e9c:	08007e75 	.word	0x08007e75
 8007ea0:	08007e75 	.word	0x08007e75
 8007ea4:	08007ef9 	.word	0x08007ef9
 8007ea8:	08007e75 	.word	0x08007e75
 8007eac:	08007e75 	.word	0x08007e75
 8007eb0:	08007e75 	.word	0x08007e75
 8007eb4:	08007e75 	.word	0x08007e75
 8007eb8:	08008005 	.word	0x08008005
 8007ebc:	08007f29 	.word	0x08007f29
 8007ec0:	08007fe7 	.word	0x08007fe7
 8007ec4:	08007e75 	.word	0x08007e75
 8007ec8:	08007e75 	.word	0x08007e75
 8007ecc:	08008027 	.word	0x08008027
 8007ed0:	08007e75 	.word	0x08007e75
 8007ed4:	08007f29 	.word	0x08007f29
 8007ed8:	08007e75 	.word	0x08007e75
 8007edc:	08007e75 	.word	0x08007e75
 8007ee0:	08007fef 	.word	0x08007fef
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	1d1a      	adds	r2, r3, #4
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	602a      	str	r2, [r5, #0]
 8007eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e0a3      	b.n	8008040 <_printf_i+0x1f4>
 8007ef8:	6820      	ldr	r0, [r4, #0]
 8007efa:	6829      	ldr	r1, [r5, #0]
 8007efc:	0606      	lsls	r6, r0, #24
 8007efe:	f101 0304 	add.w	r3, r1, #4
 8007f02:	d50a      	bpl.n	8007f1a <_printf_i+0xce>
 8007f04:	680e      	ldr	r6, [r1, #0]
 8007f06:	602b      	str	r3, [r5, #0]
 8007f08:	2e00      	cmp	r6, #0
 8007f0a:	da03      	bge.n	8007f14 <_printf_i+0xc8>
 8007f0c:	232d      	movs	r3, #45	; 0x2d
 8007f0e:	4276      	negs	r6, r6
 8007f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f14:	485e      	ldr	r0, [pc, #376]	; (8008090 <_printf_i+0x244>)
 8007f16:	230a      	movs	r3, #10
 8007f18:	e019      	b.n	8007f4e <_printf_i+0x102>
 8007f1a:	680e      	ldr	r6, [r1, #0]
 8007f1c:	602b      	str	r3, [r5, #0]
 8007f1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f22:	bf18      	it	ne
 8007f24:	b236      	sxthne	r6, r6
 8007f26:	e7ef      	b.n	8007f08 <_printf_i+0xbc>
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	6820      	ldr	r0, [r4, #0]
 8007f2c:	1d19      	adds	r1, r3, #4
 8007f2e:	6029      	str	r1, [r5, #0]
 8007f30:	0601      	lsls	r1, r0, #24
 8007f32:	d501      	bpl.n	8007f38 <_printf_i+0xec>
 8007f34:	681e      	ldr	r6, [r3, #0]
 8007f36:	e002      	b.n	8007f3e <_printf_i+0xf2>
 8007f38:	0646      	lsls	r6, r0, #25
 8007f3a:	d5fb      	bpl.n	8007f34 <_printf_i+0xe8>
 8007f3c:	881e      	ldrh	r6, [r3, #0]
 8007f3e:	4854      	ldr	r0, [pc, #336]	; (8008090 <_printf_i+0x244>)
 8007f40:	2f6f      	cmp	r7, #111	; 0x6f
 8007f42:	bf0c      	ite	eq
 8007f44:	2308      	moveq	r3, #8
 8007f46:	230a      	movne	r3, #10
 8007f48:	2100      	movs	r1, #0
 8007f4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f4e:	6865      	ldr	r5, [r4, #4]
 8007f50:	60a5      	str	r5, [r4, #8]
 8007f52:	2d00      	cmp	r5, #0
 8007f54:	bfa2      	ittt	ge
 8007f56:	6821      	ldrge	r1, [r4, #0]
 8007f58:	f021 0104 	bicge.w	r1, r1, #4
 8007f5c:	6021      	strge	r1, [r4, #0]
 8007f5e:	b90e      	cbnz	r6, 8007f64 <_printf_i+0x118>
 8007f60:	2d00      	cmp	r5, #0
 8007f62:	d04d      	beq.n	8008000 <_printf_i+0x1b4>
 8007f64:	4615      	mov	r5, r2
 8007f66:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f6a:	fb03 6711 	mls	r7, r3, r1, r6
 8007f6e:	5dc7      	ldrb	r7, [r0, r7]
 8007f70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f74:	4637      	mov	r7, r6
 8007f76:	42bb      	cmp	r3, r7
 8007f78:	460e      	mov	r6, r1
 8007f7a:	d9f4      	bls.n	8007f66 <_printf_i+0x11a>
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d10b      	bne.n	8007f98 <_printf_i+0x14c>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	07de      	lsls	r6, r3, #31
 8007f84:	d508      	bpl.n	8007f98 <_printf_i+0x14c>
 8007f86:	6923      	ldr	r3, [r4, #16]
 8007f88:	6861      	ldr	r1, [r4, #4]
 8007f8a:	4299      	cmp	r1, r3
 8007f8c:	bfde      	ittt	le
 8007f8e:	2330      	movle	r3, #48	; 0x30
 8007f90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f98:	1b52      	subs	r2, r2, r5
 8007f9a:	6122      	str	r2, [r4, #16]
 8007f9c:	f8cd a000 	str.w	sl, [sp]
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	aa03      	add	r2, sp, #12
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	f7ff fee2 	bl	8007d70 <_printf_common>
 8007fac:	3001      	adds	r0, #1
 8007fae:	d14c      	bne.n	800804a <_printf_i+0x1fe>
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	b004      	add	sp, #16
 8007fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fba:	4835      	ldr	r0, [pc, #212]	; (8008090 <_printf_i+0x244>)
 8007fbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007fc0:	6829      	ldr	r1, [r5, #0]
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fc8:	6029      	str	r1, [r5, #0]
 8007fca:	061d      	lsls	r5, r3, #24
 8007fcc:	d514      	bpl.n	8007ff8 <_printf_i+0x1ac>
 8007fce:	07df      	lsls	r7, r3, #31
 8007fd0:	bf44      	itt	mi
 8007fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8007fd6:	6023      	strmi	r3, [r4, #0]
 8007fd8:	b91e      	cbnz	r6, 8007fe2 <_printf_i+0x196>
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	f023 0320 	bic.w	r3, r3, #32
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	2310      	movs	r3, #16
 8007fe4:	e7b0      	b.n	8007f48 <_printf_i+0xfc>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	f043 0320 	orr.w	r3, r3, #32
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	2378      	movs	r3, #120	; 0x78
 8007ff0:	4828      	ldr	r0, [pc, #160]	; (8008094 <_printf_i+0x248>)
 8007ff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ff6:	e7e3      	b.n	8007fc0 <_printf_i+0x174>
 8007ff8:	0659      	lsls	r1, r3, #25
 8007ffa:	bf48      	it	mi
 8007ffc:	b2b6      	uxthmi	r6, r6
 8007ffe:	e7e6      	b.n	8007fce <_printf_i+0x182>
 8008000:	4615      	mov	r5, r2
 8008002:	e7bb      	b.n	8007f7c <_printf_i+0x130>
 8008004:	682b      	ldr	r3, [r5, #0]
 8008006:	6826      	ldr	r6, [r4, #0]
 8008008:	6961      	ldr	r1, [r4, #20]
 800800a:	1d18      	adds	r0, r3, #4
 800800c:	6028      	str	r0, [r5, #0]
 800800e:	0635      	lsls	r5, r6, #24
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	d501      	bpl.n	8008018 <_printf_i+0x1cc>
 8008014:	6019      	str	r1, [r3, #0]
 8008016:	e002      	b.n	800801e <_printf_i+0x1d2>
 8008018:	0670      	lsls	r0, r6, #25
 800801a:	d5fb      	bpl.n	8008014 <_printf_i+0x1c8>
 800801c:	8019      	strh	r1, [r3, #0]
 800801e:	2300      	movs	r3, #0
 8008020:	6123      	str	r3, [r4, #16]
 8008022:	4615      	mov	r5, r2
 8008024:	e7ba      	b.n	8007f9c <_printf_i+0x150>
 8008026:	682b      	ldr	r3, [r5, #0]
 8008028:	1d1a      	adds	r2, r3, #4
 800802a:	602a      	str	r2, [r5, #0]
 800802c:	681d      	ldr	r5, [r3, #0]
 800802e:	6862      	ldr	r2, [r4, #4]
 8008030:	2100      	movs	r1, #0
 8008032:	4628      	mov	r0, r5
 8008034:	f7f8 f8d4 	bl	80001e0 <memchr>
 8008038:	b108      	cbz	r0, 800803e <_printf_i+0x1f2>
 800803a:	1b40      	subs	r0, r0, r5
 800803c:	6060      	str	r0, [r4, #4]
 800803e:	6863      	ldr	r3, [r4, #4]
 8008040:	6123      	str	r3, [r4, #16]
 8008042:	2300      	movs	r3, #0
 8008044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008048:	e7a8      	b.n	8007f9c <_printf_i+0x150>
 800804a:	6923      	ldr	r3, [r4, #16]
 800804c:	462a      	mov	r2, r5
 800804e:	4649      	mov	r1, r9
 8008050:	4640      	mov	r0, r8
 8008052:	47d0      	blx	sl
 8008054:	3001      	adds	r0, #1
 8008056:	d0ab      	beq.n	8007fb0 <_printf_i+0x164>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	079b      	lsls	r3, r3, #30
 800805c:	d413      	bmi.n	8008086 <_printf_i+0x23a>
 800805e:	68e0      	ldr	r0, [r4, #12]
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	4298      	cmp	r0, r3
 8008064:	bfb8      	it	lt
 8008066:	4618      	movlt	r0, r3
 8008068:	e7a4      	b.n	8007fb4 <_printf_i+0x168>
 800806a:	2301      	movs	r3, #1
 800806c:	4632      	mov	r2, r6
 800806e:	4649      	mov	r1, r9
 8008070:	4640      	mov	r0, r8
 8008072:	47d0      	blx	sl
 8008074:	3001      	adds	r0, #1
 8008076:	d09b      	beq.n	8007fb0 <_printf_i+0x164>
 8008078:	3501      	adds	r5, #1
 800807a:	68e3      	ldr	r3, [r4, #12]
 800807c:	9903      	ldr	r1, [sp, #12]
 800807e:	1a5b      	subs	r3, r3, r1
 8008080:	42ab      	cmp	r3, r5
 8008082:	dcf2      	bgt.n	800806a <_printf_i+0x21e>
 8008084:	e7eb      	b.n	800805e <_printf_i+0x212>
 8008086:	2500      	movs	r5, #0
 8008088:	f104 0619 	add.w	r6, r4, #25
 800808c:	e7f5      	b.n	800807a <_printf_i+0x22e>
 800808e:	bf00      	nop
 8008090:	08008aff 	.word	0x08008aff
 8008094:	08008b10 	.word	0x08008b10

08008098 <_sbrk_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4d06      	ldr	r5, [pc, #24]	; (80080b4 <_sbrk_r+0x1c>)
 800809c:	2300      	movs	r3, #0
 800809e:	4604      	mov	r4, r0
 80080a0:	4608      	mov	r0, r1
 80080a2:	602b      	str	r3, [r5, #0]
 80080a4:	f7fa fd24 	bl	8002af0 <_sbrk>
 80080a8:	1c43      	adds	r3, r0, #1
 80080aa:	d102      	bne.n	80080b2 <_sbrk_r+0x1a>
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	b103      	cbz	r3, 80080b2 <_sbrk_r+0x1a>
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	bd38      	pop	{r3, r4, r5, pc}
 80080b4:	200007e4 	.word	0x200007e4

080080b8 <__swbuf_r>:
 80080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ba:	460e      	mov	r6, r1
 80080bc:	4614      	mov	r4, r2
 80080be:	4605      	mov	r5, r0
 80080c0:	b118      	cbz	r0, 80080ca <__swbuf_r+0x12>
 80080c2:	6983      	ldr	r3, [r0, #24]
 80080c4:	b90b      	cbnz	r3, 80080ca <__swbuf_r+0x12>
 80080c6:	f000 f9d9 	bl	800847c <__sinit>
 80080ca:	4b21      	ldr	r3, [pc, #132]	; (8008150 <__swbuf_r+0x98>)
 80080cc:	429c      	cmp	r4, r3
 80080ce:	d12b      	bne.n	8008128 <__swbuf_r+0x70>
 80080d0:	686c      	ldr	r4, [r5, #4]
 80080d2:	69a3      	ldr	r3, [r4, #24]
 80080d4:	60a3      	str	r3, [r4, #8]
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	071a      	lsls	r2, r3, #28
 80080da:	d52f      	bpl.n	800813c <__swbuf_r+0x84>
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	b36b      	cbz	r3, 800813c <__swbuf_r+0x84>
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	6820      	ldr	r0, [r4, #0]
 80080e4:	1ac0      	subs	r0, r0, r3
 80080e6:	6963      	ldr	r3, [r4, #20]
 80080e8:	b2f6      	uxtb	r6, r6
 80080ea:	4283      	cmp	r3, r0
 80080ec:	4637      	mov	r7, r6
 80080ee:	dc04      	bgt.n	80080fa <__swbuf_r+0x42>
 80080f0:	4621      	mov	r1, r4
 80080f2:	4628      	mov	r0, r5
 80080f4:	f000 f92e 	bl	8008354 <_fflush_r>
 80080f8:	bb30      	cbnz	r0, 8008148 <__swbuf_r+0x90>
 80080fa:	68a3      	ldr	r3, [r4, #8]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	60a3      	str	r3, [r4, #8]
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	6022      	str	r2, [r4, #0]
 8008106:	701e      	strb	r6, [r3, #0]
 8008108:	6963      	ldr	r3, [r4, #20]
 800810a:	3001      	adds	r0, #1
 800810c:	4283      	cmp	r3, r0
 800810e:	d004      	beq.n	800811a <__swbuf_r+0x62>
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	07db      	lsls	r3, r3, #31
 8008114:	d506      	bpl.n	8008124 <__swbuf_r+0x6c>
 8008116:	2e0a      	cmp	r6, #10
 8008118:	d104      	bne.n	8008124 <__swbuf_r+0x6c>
 800811a:	4621      	mov	r1, r4
 800811c:	4628      	mov	r0, r5
 800811e:	f000 f919 	bl	8008354 <_fflush_r>
 8008122:	b988      	cbnz	r0, 8008148 <__swbuf_r+0x90>
 8008124:	4638      	mov	r0, r7
 8008126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008128:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <__swbuf_r+0x9c>)
 800812a:	429c      	cmp	r4, r3
 800812c:	d101      	bne.n	8008132 <__swbuf_r+0x7a>
 800812e:	68ac      	ldr	r4, [r5, #8]
 8008130:	e7cf      	b.n	80080d2 <__swbuf_r+0x1a>
 8008132:	4b09      	ldr	r3, [pc, #36]	; (8008158 <__swbuf_r+0xa0>)
 8008134:	429c      	cmp	r4, r3
 8008136:	bf08      	it	eq
 8008138:	68ec      	ldreq	r4, [r5, #12]
 800813a:	e7ca      	b.n	80080d2 <__swbuf_r+0x1a>
 800813c:	4621      	mov	r1, r4
 800813e:	4628      	mov	r0, r5
 8008140:	f000 f80c 	bl	800815c <__swsetup_r>
 8008144:	2800      	cmp	r0, #0
 8008146:	d0cb      	beq.n	80080e0 <__swbuf_r+0x28>
 8008148:	f04f 37ff 	mov.w	r7, #4294967295
 800814c:	e7ea      	b.n	8008124 <__swbuf_r+0x6c>
 800814e:	bf00      	nop
 8008150:	08008b44 	.word	0x08008b44
 8008154:	08008b64 	.word	0x08008b64
 8008158:	08008b24 	.word	0x08008b24

0800815c <__swsetup_r>:
 800815c:	4b32      	ldr	r3, [pc, #200]	; (8008228 <__swsetup_r+0xcc>)
 800815e:	b570      	push	{r4, r5, r6, lr}
 8008160:	681d      	ldr	r5, [r3, #0]
 8008162:	4606      	mov	r6, r0
 8008164:	460c      	mov	r4, r1
 8008166:	b125      	cbz	r5, 8008172 <__swsetup_r+0x16>
 8008168:	69ab      	ldr	r3, [r5, #24]
 800816a:	b913      	cbnz	r3, 8008172 <__swsetup_r+0x16>
 800816c:	4628      	mov	r0, r5
 800816e:	f000 f985 	bl	800847c <__sinit>
 8008172:	4b2e      	ldr	r3, [pc, #184]	; (800822c <__swsetup_r+0xd0>)
 8008174:	429c      	cmp	r4, r3
 8008176:	d10f      	bne.n	8008198 <__swsetup_r+0x3c>
 8008178:	686c      	ldr	r4, [r5, #4]
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008180:	0719      	lsls	r1, r3, #28
 8008182:	d42c      	bmi.n	80081de <__swsetup_r+0x82>
 8008184:	06dd      	lsls	r5, r3, #27
 8008186:	d411      	bmi.n	80081ac <__swsetup_r+0x50>
 8008188:	2309      	movs	r3, #9
 800818a:	6033      	str	r3, [r6, #0]
 800818c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008190:	81a3      	strh	r3, [r4, #12]
 8008192:	f04f 30ff 	mov.w	r0, #4294967295
 8008196:	e03e      	b.n	8008216 <__swsetup_r+0xba>
 8008198:	4b25      	ldr	r3, [pc, #148]	; (8008230 <__swsetup_r+0xd4>)
 800819a:	429c      	cmp	r4, r3
 800819c:	d101      	bne.n	80081a2 <__swsetup_r+0x46>
 800819e:	68ac      	ldr	r4, [r5, #8]
 80081a0:	e7eb      	b.n	800817a <__swsetup_r+0x1e>
 80081a2:	4b24      	ldr	r3, [pc, #144]	; (8008234 <__swsetup_r+0xd8>)
 80081a4:	429c      	cmp	r4, r3
 80081a6:	bf08      	it	eq
 80081a8:	68ec      	ldreq	r4, [r5, #12]
 80081aa:	e7e6      	b.n	800817a <__swsetup_r+0x1e>
 80081ac:	0758      	lsls	r0, r3, #29
 80081ae:	d512      	bpl.n	80081d6 <__swsetup_r+0x7a>
 80081b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081b2:	b141      	cbz	r1, 80081c6 <__swsetup_r+0x6a>
 80081b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081b8:	4299      	cmp	r1, r3
 80081ba:	d002      	beq.n	80081c2 <__swsetup_r+0x66>
 80081bc:	4630      	mov	r0, r6
 80081be:	f7ff fa41 	bl	8007644 <_free_r>
 80081c2:	2300      	movs	r3, #0
 80081c4:	6363      	str	r3, [r4, #52]	; 0x34
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081cc:	81a3      	strh	r3, [r4, #12]
 80081ce:	2300      	movs	r3, #0
 80081d0:	6063      	str	r3, [r4, #4]
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	f043 0308 	orr.w	r3, r3, #8
 80081dc:	81a3      	strh	r3, [r4, #12]
 80081de:	6923      	ldr	r3, [r4, #16]
 80081e0:	b94b      	cbnz	r3, 80081f6 <__swsetup_r+0x9a>
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ec:	d003      	beq.n	80081f6 <__swsetup_r+0x9a>
 80081ee:	4621      	mov	r1, r4
 80081f0:	4630      	mov	r0, r6
 80081f2:	f000 fa09 	bl	8008608 <__smakebuf_r>
 80081f6:	89a0      	ldrh	r0, [r4, #12]
 80081f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081fc:	f010 0301 	ands.w	r3, r0, #1
 8008200:	d00a      	beq.n	8008218 <__swsetup_r+0xbc>
 8008202:	2300      	movs	r3, #0
 8008204:	60a3      	str	r3, [r4, #8]
 8008206:	6963      	ldr	r3, [r4, #20]
 8008208:	425b      	negs	r3, r3
 800820a:	61a3      	str	r3, [r4, #24]
 800820c:	6923      	ldr	r3, [r4, #16]
 800820e:	b943      	cbnz	r3, 8008222 <__swsetup_r+0xc6>
 8008210:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008214:	d1ba      	bne.n	800818c <__swsetup_r+0x30>
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	0781      	lsls	r1, r0, #30
 800821a:	bf58      	it	pl
 800821c:	6963      	ldrpl	r3, [r4, #20]
 800821e:	60a3      	str	r3, [r4, #8]
 8008220:	e7f4      	b.n	800820c <__swsetup_r+0xb0>
 8008222:	2000      	movs	r0, #0
 8008224:	e7f7      	b.n	8008216 <__swsetup_r+0xba>
 8008226:	bf00      	nop
 8008228:	20000110 	.word	0x20000110
 800822c:	08008b44 	.word	0x08008b44
 8008230:	08008b64 	.word	0x08008b64
 8008234:	08008b24 	.word	0x08008b24

08008238 <abort>:
 8008238:	b508      	push	{r3, lr}
 800823a:	2006      	movs	r0, #6
 800823c:	f000 fab0 	bl	80087a0 <raise>
 8008240:	2001      	movs	r0, #1
 8008242:	f7fa fbdd 	bl	8002a00 <_exit>
	...

08008248 <__sflush_r>:
 8008248:	898a      	ldrh	r2, [r1, #12]
 800824a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800824e:	4605      	mov	r5, r0
 8008250:	0710      	lsls	r0, r2, #28
 8008252:	460c      	mov	r4, r1
 8008254:	d458      	bmi.n	8008308 <__sflush_r+0xc0>
 8008256:	684b      	ldr	r3, [r1, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	dc05      	bgt.n	8008268 <__sflush_r+0x20>
 800825c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800825e:	2b00      	cmp	r3, #0
 8008260:	dc02      	bgt.n	8008268 <__sflush_r+0x20>
 8008262:	2000      	movs	r0, #0
 8008264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800826a:	2e00      	cmp	r6, #0
 800826c:	d0f9      	beq.n	8008262 <__sflush_r+0x1a>
 800826e:	2300      	movs	r3, #0
 8008270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008274:	682f      	ldr	r7, [r5, #0]
 8008276:	602b      	str	r3, [r5, #0]
 8008278:	d032      	beq.n	80082e0 <__sflush_r+0x98>
 800827a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	075a      	lsls	r2, r3, #29
 8008280:	d505      	bpl.n	800828e <__sflush_r+0x46>
 8008282:	6863      	ldr	r3, [r4, #4]
 8008284:	1ac0      	subs	r0, r0, r3
 8008286:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008288:	b10b      	cbz	r3, 800828e <__sflush_r+0x46>
 800828a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800828c:	1ac0      	subs	r0, r0, r3
 800828e:	2300      	movs	r3, #0
 8008290:	4602      	mov	r2, r0
 8008292:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008294:	6a21      	ldr	r1, [r4, #32]
 8008296:	4628      	mov	r0, r5
 8008298:	47b0      	blx	r6
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	d106      	bne.n	80082ae <__sflush_r+0x66>
 80082a0:	6829      	ldr	r1, [r5, #0]
 80082a2:	291d      	cmp	r1, #29
 80082a4:	d82c      	bhi.n	8008300 <__sflush_r+0xb8>
 80082a6:	4a2a      	ldr	r2, [pc, #168]	; (8008350 <__sflush_r+0x108>)
 80082a8:	40ca      	lsrs	r2, r1
 80082aa:	07d6      	lsls	r6, r2, #31
 80082ac:	d528      	bpl.n	8008300 <__sflush_r+0xb8>
 80082ae:	2200      	movs	r2, #0
 80082b0:	6062      	str	r2, [r4, #4]
 80082b2:	04d9      	lsls	r1, r3, #19
 80082b4:	6922      	ldr	r2, [r4, #16]
 80082b6:	6022      	str	r2, [r4, #0]
 80082b8:	d504      	bpl.n	80082c4 <__sflush_r+0x7c>
 80082ba:	1c42      	adds	r2, r0, #1
 80082bc:	d101      	bne.n	80082c2 <__sflush_r+0x7a>
 80082be:	682b      	ldr	r3, [r5, #0]
 80082c0:	b903      	cbnz	r3, 80082c4 <__sflush_r+0x7c>
 80082c2:	6560      	str	r0, [r4, #84]	; 0x54
 80082c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082c6:	602f      	str	r7, [r5, #0]
 80082c8:	2900      	cmp	r1, #0
 80082ca:	d0ca      	beq.n	8008262 <__sflush_r+0x1a>
 80082cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082d0:	4299      	cmp	r1, r3
 80082d2:	d002      	beq.n	80082da <__sflush_r+0x92>
 80082d4:	4628      	mov	r0, r5
 80082d6:	f7ff f9b5 	bl	8007644 <_free_r>
 80082da:	2000      	movs	r0, #0
 80082dc:	6360      	str	r0, [r4, #52]	; 0x34
 80082de:	e7c1      	b.n	8008264 <__sflush_r+0x1c>
 80082e0:	6a21      	ldr	r1, [r4, #32]
 80082e2:	2301      	movs	r3, #1
 80082e4:	4628      	mov	r0, r5
 80082e6:	47b0      	blx	r6
 80082e8:	1c41      	adds	r1, r0, #1
 80082ea:	d1c7      	bne.n	800827c <__sflush_r+0x34>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0c4      	beq.n	800827c <__sflush_r+0x34>
 80082f2:	2b1d      	cmp	r3, #29
 80082f4:	d001      	beq.n	80082fa <__sflush_r+0xb2>
 80082f6:	2b16      	cmp	r3, #22
 80082f8:	d101      	bne.n	80082fe <__sflush_r+0xb6>
 80082fa:	602f      	str	r7, [r5, #0]
 80082fc:	e7b1      	b.n	8008262 <__sflush_r+0x1a>
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008304:	81a3      	strh	r3, [r4, #12]
 8008306:	e7ad      	b.n	8008264 <__sflush_r+0x1c>
 8008308:	690f      	ldr	r7, [r1, #16]
 800830a:	2f00      	cmp	r7, #0
 800830c:	d0a9      	beq.n	8008262 <__sflush_r+0x1a>
 800830e:	0793      	lsls	r3, r2, #30
 8008310:	680e      	ldr	r6, [r1, #0]
 8008312:	bf08      	it	eq
 8008314:	694b      	ldreq	r3, [r1, #20]
 8008316:	600f      	str	r7, [r1, #0]
 8008318:	bf18      	it	ne
 800831a:	2300      	movne	r3, #0
 800831c:	eba6 0807 	sub.w	r8, r6, r7
 8008320:	608b      	str	r3, [r1, #8]
 8008322:	f1b8 0f00 	cmp.w	r8, #0
 8008326:	dd9c      	ble.n	8008262 <__sflush_r+0x1a>
 8008328:	6a21      	ldr	r1, [r4, #32]
 800832a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800832c:	4643      	mov	r3, r8
 800832e:	463a      	mov	r2, r7
 8008330:	4628      	mov	r0, r5
 8008332:	47b0      	blx	r6
 8008334:	2800      	cmp	r0, #0
 8008336:	dc06      	bgt.n	8008346 <__sflush_r+0xfe>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	f04f 30ff 	mov.w	r0, #4294967295
 8008344:	e78e      	b.n	8008264 <__sflush_r+0x1c>
 8008346:	4407      	add	r7, r0
 8008348:	eba8 0800 	sub.w	r8, r8, r0
 800834c:	e7e9      	b.n	8008322 <__sflush_r+0xda>
 800834e:	bf00      	nop
 8008350:	20400001 	.word	0x20400001

08008354 <_fflush_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	690b      	ldr	r3, [r1, #16]
 8008358:	4605      	mov	r5, r0
 800835a:	460c      	mov	r4, r1
 800835c:	b913      	cbnz	r3, 8008364 <_fflush_r+0x10>
 800835e:	2500      	movs	r5, #0
 8008360:	4628      	mov	r0, r5
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	b118      	cbz	r0, 800836e <_fflush_r+0x1a>
 8008366:	6983      	ldr	r3, [r0, #24]
 8008368:	b90b      	cbnz	r3, 800836e <_fflush_r+0x1a>
 800836a:	f000 f887 	bl	800847c <__sinit>
 800836e:	4b14      	ldr	r3, [pc, #80]	; (80083c0 <_fflush_r+0x6c>)
 8008370:	429c      	cmp	r4, r3
 8008372:	d11b      	bne.n	80083ac <_fflush_r+0x58>
 8008374:	686c      	ldr	r4, [r5, #4]
 8008376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0ef      	beq.n	800835e <_fflush_r+0xa>
 800837e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008380:	07d0      	lsls	r0, r2, #31
 8008382:	d404      	bmi.n	800838e <_fflush_r+0x3a>
 8008384:	0599      	lsls	r1, r3, #22
 8008386:	d402      	bmi.n	800838e <_fflush_r+0x3a>
 8008388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800838a:	f000 f915 	bl	80085b8 <__retarget_lock_acquire_recursive>
 800838e:	4628      	mov	r0, r5
 8008390:	4621      	mov	r1, r4
 8008392:	f7ff ff59 	bl	8008248 <__sflush_r>
 8008396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008398:	07da      	lsls	r2, r3, #31
 800839a:	4605      	mov	r5, r0
 800839c:	d4e0      	bmi.n	8008360 <_fflush_r+0xc>
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	059b      	lsls	r3, r3, #22
 80083a2:	d4dd      	bmi.n	8008360 <_fflush_r+0xc>
 80083a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083a6:	f000 f908 	bl	80085ba <__retarget_lock_release_recursive>
 80083aa:	e7d9      	b.n	8008360 <_fflush_r+0xc>
 80083ac:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <_fflush_r+0x70>)
 80083ae:	429c      	cmp	r4, r3
 80083b0:	d101      	bne.n	80083b6 <_fflush_r+0x62>
 80083b2:	68ac      	ldr	r4, [r5, #8]
 80083b4:	e7df      	b.n	8008376 <_fflush_r+0x22>
 80083b6:	4b04      	ldr	r3, [pc, #16]	; (80083c8 <_fflush_r+0x74>)
 80083b8:	429c      	cmp	r4, r3
 80083ba:	bf08      	it	eq
 80083bc:	68ec      	ldreq	r4, [r5, #12]
 80083be:	e7da      	b.n	8008376 <_fflush_r+0x22>
 80083c0:	08008b44 	.word	0x08008b44
 80083c4:	08008b64 	.word	0x08008b64
 80083c8:	08008b24 	.word	0x08008b24

080083cc <std>:
 80083cc:	2300      	movs	r3, #0
 80083ce:	b510      	push	{r4, lr}
 80083d0:	4604      	mov	r4, r0
 80083d2:	e9c0 3300 	strd	r3, r3, [r0]
 80083d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083da:	6083      	str	r3, [r0, #8]
 80083dc:	8181      	strh	r1, [r0, #12]
 80083de:	6643      	str	r3, [r0, #100]	; 0x64
 80083e0:	81c2      	strh	r2, [r0, #14]
 80083e2:	6183      	str	r3, [r0, #24]
 80083e4:	4619      	mov	r1, r3
 80083e6:	2208      	movs	r2, #8
 80083e8:	305c      	adds	r0, #92	; 0x5c
 80083ea:	f7ff f88d 	bl	8007508 <memset>
 80083ee:	4b05      	ldr	r3, [pc, #20]	; (8008404 <std+0x38>)
 80083f0:	6263      	str	r3, [r4, #36]	; 0x24
 80083f2:	4b05      	ldr	r3, [pc, #20]	; (8008408 <std+0x3c>)
 80083f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80083f6:	4b05      	ldr	r3, [pc, #20]	; (800840c <std+0x40>)
 80083f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083fa:	4b05      	ldr	r3, [pc, #20]	; (8008410 <std+0x44>)
 80083fc:	6224      	str	r4, [r4, #32]
 80083fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008400:	bd10      	pop	{r4, pc}
 8008402:	bf00      	nop
 8008404:	080087d9 	.word	0x080087d9
 8008408:	080087fb 	.word	0x080087fb
 800840c:	08008833 	.word	0x08008833
 8008410:	08008857 	.word	0x08008857

08008414 <_cleanup_r>:
 8008414:	4901      	ldr	r1, [pc, #4]	; (800841c <_cleanup_r+0x8>)
 8008416:	f000 b8af 	b.w	8008578 <_fwalk_reent>
 800841a:	bf00      	nop
 800841c:	08008355 	.word	0x08008355

08008420 <__sfmoreglue>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	2268      	movs	r2, #104	; 0x68
 8008424:	1e4d      	subs	r5, r1, #1
 8008426:	4355      	muls	r5, r2
 8008428:	460e      	mov	r6, r1
 800842a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800842e:	f7ff f975 	bl	800771c <_malloc_r>
 8008432:	4604      	mov	r4, r0
 8008434:	b140      	cbz	r0, 8008448 <__sfmoreglue+0x28>
 8008436:	2100      	movs	r1, #0
 8008438:	e9c0 1600 	strd	r1, r6, [r0]
 800843c:	300c      	adds	r0, #12
 800843e:	60a0      	str	r0, [r4, #8]
 8008440:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008444:	f7ff f860 	bl	8007508 <memset>
 8008448:	4620      	mov	r0, r4
 800844a:	bd70      	pop	{r4, r5, r6, pc}

0800844c <__sfp_lock_acquire>:
 800844c:	4801      	ldr	r0, [pc, #4]	; (8008454 <__sfp_lock_acquire+0x8>)
 800844e:	f000 b8b3 	b.w	80085b8 <__retarget_lock_acquire_recursive>
 8008452:	bf00      	nop
 8008454:	200007e1 	.word	0x200007e1

08008458 <__sfp_lock_release>:
 8008458:	4801      	ldr	r0, [pc, #4]	; (8008460 <__sfp_lock_release+0x8>)
 800845a:	f000 b8ae 	b.w	80085ba <__retarget_lock_release_recursive>
 800845e:	bf00      	nop
 8008460:	200007e1 	.word	0x200007e1

08008464 <__sinit_lock_acquire>:
 8008464:	4801      	ldr	r0, [pc, #4]	; (800846c <__sinit_lock_acquire+0x8>)
 8008466:	f000 b8a7 	b.w	80085b8 <__retarget_lock_acquire_recursive>
 800846a:	bf00      	nop
 800846c:	200007e2 	.word	0x200007e2

08008470 <__sinit_lock_release>:
 8008470:	4801      	ldr	r0, [pc, #4]	; (8008478 <__sinit_lock_release+0x8>)
 8008472:	f000 b8a2 	b.w	80085ba <__retarget_lock_release_recursive>
 8008476:	bf00      	nop
 8008478:	200007e2 	.word	0x200007e2

0800847c <__sinit>:
 800847c:	b510      	push	{r4, lr}
 800847e:	4604      	mov	r4, r0
 8008480:	f7ff fff0 	bl	8008464 <__sinit_lock_acquire>
 8008484:	69a3      	ldr	r3, [r4, #24]
 8008486:	b11b      	cbz	r3, 8008490 <__sinit+0x14>
 8008488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800848c:	f7ff bff0 	b.w	8008470 <__sinit_lock_release>
 8008490:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008494:	6523      	str	r3, [r4, #80]	; 0x50
 8008496:	4b13      	ldr	r3, [pc, #76]	; (80084e4 <__sinit+0x68>)
 8008498:	4a13      	ldr	r2, [pc, #76]	; (80084e8 <__sinit+0x6c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	62a2      	str	r2, [r4, #40]	; 0x28
 800849e:	42a3      	cmp	r3, r4
 80084a0:	bf04      	itt	eq
 80084a2:	2301      	moveq	r3, #1
 80084a4:	61a3      	streq	r3, [r4, #24]
 80084a6:	4620      	mov	r0, r4
 80084a8:	f000 f820 	bl	80084ec <__sfp>
 80084ac:	6060      	str	r0, [r4, #4]
 80084ae:	4620      	mov	r0, r4
 80084b0:	f000 f81c 	bl	80084ec <__sfp>
 80084b4:	60a0      	str	r0, [r4, #8]
 80084b6:	4620      	mov	r0, r4
 80084b8:	f000 f818 	bl	80084ec <__sfp>
 80084bc:	2200      	movs	r2, #0
 80084be:	60e0      	str	r0, [r4, #12]
 80084c0:	2104      	movs	r1, #4
 80084c2:	6860      	ldr	r0, [r4, #4]
 80084c4:	f7ff ff82 	bl	80083cc <std>
 80084c8:	68a0      	ldr	r0, [r4, #8]
 80084ca:	2201      	movs	r2, #1
 80084cc:	2109      	movs	r1, #9
 80084ce:	f7ff ff7d 	bl	80083cc <std>
 80084d2:	68e0      	ldr	r0, [r4, #12]
 80084d4:	2202      	movs	r2, #2
 80084d6:	2112      	movs	r1, #18
 80084d8:	f7ff ff78 	bl	80083cc <std>
 80084dc:	2301      	movs	r3, #1
 80084de:	61a3      	str	r3, [r4, #24]
 80084e0:	e7d2      	b.n	8008488 <__sinit+0xc>
 80084e2:	bf00      	nop
 80084e4:	08008a3c 	.word	0x08008a3c
 80084e8:	08008415 	.word	0x08008415

080084ec <__sfp>:
 80084ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ee:	4607      	mov	r7, r0
 80084f0:	f7ff ffac 	bl	800844c <__sfp_lock_acquire>
 80084f4:	4b1e      	ldr	r3, [pc, #120]	; (8008570 <__sfp+0x84>)
 80084f6:	681e      	ldr	r6, [r3, #0]
 80084f8:	69b3      	ldr	r3, [r6, #24]
 80084fa:	b913      	cbnz	r3, 8008502 <__sfp+0x16>
 80084fc:	4630      	mov	r0, r6
 80084fe:	f7ff ffbd 	bl	800847c <__sinit>
 8008502:	3648      	adds	r6, #72	; 0x48
 8008504:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008508:	3b01      	subs	r3, #1
 800850a:	d503      	bpl.n	8008514 <__sfp+0x28>
 800850c:	6833      	ldr	r3, [r6, #0]
 800850e:	b30b      	cbz	r3, 8008554 <__sfp+0x68>
 8008510:	6836      	ldr	r6, [r6, #0]
 8008512:	e7f7      	b.n	8008504 <__sfp+0x18>
 8008514:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008518:	b9d5      	cbnz	r5, 8008550 <__sfp+0x64>
 800851a:	4b16      	ldr	r3, [pc, #88]	; (8008574 <__sfp+0x88>)
 800851c:	60e3      	str	r3, [r4, #12]
 800851e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008522:	6665      	str	r5, [r4, #100]	; 0x64
 8008524:	f000 f847 	bl	80085b6 <__retarget_lock_init_recursive>
 8008528:	f7ff ff96 	bl	8008458 <__sfp_lock_release>
 800852c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008530:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008534:	6025      	str	r5, [r4, #0]
 8008536:	61a5      	str	r5, [r4, #24]
 8008538:	2208      	movs	r2, #8
 800853a:	4629      	mov	r1, r5
 800853c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008540:	f7fe ffe2 	bl	8007508 <memset>
 8008544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800854c:	4620      	mov	r0, r4
 800854e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008550:	3468      	adds	r4, #104	; 0x68
 8008552:	e7d9      	b.n	8008508 <__sfp+0x1c>
 8008554:	2104      	movs	r1, #4
 8008556:	4638      	mov	r0, r7
 8008558:	f7ff ff62 	bl	8008420 <__sfmoreglue>
 800855c:	4604      	mov	r4, r0
 800855e:	6030      	str	r0, [r6, #0]
 8008560:	2800      	cmp	r0, #0
 8008562:	d1d5      	bne.n	8008510 <__sfp+0x24>
 8008564:	f7ff ff78 	bl	8008458 <__sfp_lock_release>
 8008568:	230c      	movs	r3, #12
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	e7ee      	b.n	800854c <__sfp+0x60>
 800856e:	bf00      	nop
 8008570:	08008a3c 	.word	0x08008a3c
 8008574:	ffff0001 	.word	0xffff0001

08008578 <_fwalk_reent>:
 8008578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800857c:	4606      	mov	r6, r0
 800857e:	4688      	mov	r8, r1
 8008580:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008584:	2700      	movs	r7, #0
 8008586:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800858a:	f1b9 0901 	subs.w	r9, r9, #1
 800858e:	d505      	bpl.n	800859c <_fwalk_reent+0x24>
 8008590:	6824      	ldr	r4, [r4, #0]
 8008592:	2c00      	cmp	r4, #0
 8008594:	d1f7      	bne.n	8008586 <_fwalk_reent+0xe>
 8008596:	4638      	mov	r0, r7
 8008598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800859c:	89ab      	ldrh	r3, [r5, #12]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d907      	bls.n	80085b2 <_fwalk_reent+0x3a>
 80085a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085a6:	3301      	adds	r3, #1
 80085a8:	d003      	beq.n	80085b2 <_fwalk_reent+0x3a>
 80085aa:	4629      	mov	r1, r5
 80085ac:	4630      	mov	r0, r6
 80085ae:	47c0      	blx	r8
 80085b0:	4307      	orrs	r7, r0
 80085b2:	3568      	adds	r5, #104	; 0x68
 80085b4:	e7e9      	b.n	800858a <_fwalk_reent+0x12>

080085b6 <__retarget_lock_init_recursive>:
 80085b6:	4770      	bx	lr

080085b8 <__retarget_lock_acquire_recursive>:
 80085b8:	4770      	bx	lr

080085ba <__retarget_lock_release_recursive>:
 80085ba:	4770      	bx	lr

080085bc <__swhatbuf_r>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	460e      	mov	r6, r1
 80085c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c4:	2900      	cmp	r1, #0
 80085c6:	b096      	sub	sp, #88	; 0x58
 80085c8:	4614      	mov	r4, r2
 80085ca:	461d      	mov	r5, r3
 80085cc:	da08      	bge.n	80085e0 <__swhatbuf_r+0x24>
 80085ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	602a      	str	r2, [r5, #0]
 80085d6:	061a      	lsls	r2, r3, #24
 80085d8:	d410      	bmi.n	80085fc <__swhatbuf_r+0x40>
 80085da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085de:	e00e      	b.n	80085fe <__swhatbuf_r+0x42>
 80085e0:	466a      	mov	r2, sp
 80085e2:	f000 f95f 	bl	80088a4 <_fstat_r>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	dbf1      	blt.n	80085ce <__swhatbuf_r+0x12>
 80085ea:	9a01      	ldr	r2, [sp, #4]
 80085ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085f4:	425a      	negs	r2, r3
 80085f6:	415a      	adcs	r2, r3
 80085f8:	602a      	str	r2, [r5, #0]
 80085fa:	e7ee      	b.n	80085da <__swhatbuf_r+0x1e>
 80085fc:	2340      	movs	r3, #64	; 0x40
 80085fe:	2000      	movs	r0, #0
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	b016      	add	sp, #88	; 0x58
 8008604:	bd70      	pop	{r4, r5, r6, pc}
	...

08008608 <__smakebuf_r>:
 8008608:	898b      	ldrh	r3, [r1, #12]
 800860a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800860c:	079d      	lsls	r5, r3, #30
 800860e:	4606      	mov	r6, r0
 8008610:	460c      	mov	r4, r1
 8008612:	d507      	bpl.n	8008624 <__smakebuf_r+0x1c>
 8008614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	6123      	str	r3, [r4, #16]
 800861c:	2301      	movs	r3, #1
 800861e:	6163      	str	r3, [r4, #20]
 8008620:	b002      	add	sp, #8
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	ab01      	add	r3, sp, #4
 8008626:	466a      	mov	r2, sp
 8008628:	f7ff ffc8 	bl	80085bc <__swhatbuf_r>
 800862c:	9900      	ldr	r1, [sp, #0]
 800862e:	4605      	mov	r5, r0
 8008630:	4630      	mov	r0, r6
 8008632:	f7ff f873 	bl	800771c <_malloc_r>
 8008636:	b948      	cbnz	r0, 800864c <__smakebuf_r+0x44>
 8008638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800863c:	059a      	lsls	r2, r3, #22
 800863e:	d4ef      	bmi.n	8008620 <__smakebuf_r+0x18>
 8008640:	f023 0303 	bic.w	r3, r3, #3
 8008644:	f043 0302 	orr.w	r3, r3, #2
 8008648:	81a3      	strh	r3, [r4, #12]
 800864a:	e7e3      	b.n	8008614 <__smakebuf_r+0xc>
 800864c:	4b0d      	ldr	r3, [pc, #52]	; (8008684 <__smakebuf_r+0x7c>)
 800864e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	6020      	str	r0, [r4, #0]
 8008654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008658:	81a3      	strh	r3, [r4, #12]
 800865a:	9b00      	ldr	r3, [sp, #0]
 800865c:	6163      	str	r3, [r4, #20]
 800865e:	9b01      	ldr	r3, [sp, #4]
 8008660:	6120      	str	r0, [r4, #16]
 8008662:	b15b      	cbz	r3, 800867c <__smakebuf_r+0x74>
 8008664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008668:	4630      	mov	r0, r6
 800866a:	f000 f92d 	bl	80088c8 <_isatty_r>
 800866e:	b128      	cbz	r0, 800867c <__smakebuf_r+0x74>
 8008670:	89a3      	ldrh	r3, [r4, #12]
 8008672:	f023 0303 	bic.w	r3, r3, #3
 8008676:	f043 0301 	orr.w	r3, r3, #1
 800867a:	81a3      	strh	r3, [r4, #12]
 800867c:	89a0      	ldrh	r0, [r4, #12]
 800867e:	4305      	orrs	r5, r0
 8008680:	81a5      	strh	r5, [r4, #12]
 8008682:	e7cd      	b.n	8008620 <__smakebuf_r+0x18>
 8008684:	08008415 	.word	0x08008415

08008688 <memcpy>:
 8008688:	440a      	add	r2, r1
 800868a:	4291      	cmp	r1, r2
 800868c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008690:	d100      	bne.n	8008694 <memcpy+0xc>
 8008692:	4770      	bx	lr
 8008694:	b510      	push	{r4, lr}
 8008696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800869a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800869e:	4291      	cmp	r1, r2
 80086a0:	d1f9      	bne.n	8008696 <memcpy+0xe>
 80086a2:	bd10      	pop	{r4, pc}

080086a4 <memmove>:
 80086a4:	4288      	cmp	r0, r1
 80086a6:	b510      	push	{r4, lr}
 80086a8:	eb01 0402 	add.w	r4, r1, r2
 80086ac:	d902      	bls.n	80086b4 <memmove+0x10>
 80086ae:	4284      	cmp	r4, r0
 80086b0:	4623      	mov	r3, r4
 80086b2:	d807      	bhi.n	80086c4 <memmove+0x20>
 80086b4:	1e43      	subs	r3, r0, #1
 80086b6:	42a1      	cmp	r1, r4
 80086b8:	d008      	beq.n	80086cc <memmove+0x28>
 80086ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086c2:	e7f8      	b.n	80086b6 <memmove+0x12>
 80086c4:	4402      	add	r2, r0
 80086c6:	4601      	mov	r1, r0
 80086c8:	428a      	cmp	r2, r1
 80086ca:	d100      	bne.n	80086ce <memmove+0x2a>
 80086cc:	bd10      	pop	{r4, pc}
 80086ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086d6:	e7f7      	b.n	80086c8 <memmove+0x24>

080086d8 <__malloc_lock>:
 80086d8:	4801      	ldr	r0, [pc, #4]	; (80086e0 <__malloc_lock+0x8>)
 80086da:	f7ff bf6d 	b.w	80085b8 <__retarget_lock_acquire_recursive>
 80086de:	bf00      	nop
 80086e0:	200007e0 	.word	0x200007e0

080086e4 <__malloc_unlock>:
 80086e4:	4801      	ldr	r0, [pc, #4]	; (80086ec <__malloc_unlock+0x8>)
 80086e6:	f7ff bf68 	b.w	80085ba <__retarget_lock_release_recursive>
 80086ea:	bf00      	nop
 80086ec:	200007e0 	.word	0x200007e0

080086f0 <_realloc_r>:
 80086f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f4:	4680      	mov	r8, r0
 80086f6:	4614      	mov	r4, r2
 80086f8:	460e      	mov	r6, r1
 80086fa:	b921      	cbnz	r1, 8008706 <_realloc_r+0x16>
 80086fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008700:	4611      	mov	r1, r2
 8008702:	f7ff b80b 	b.w	800771c <_malloc_r>
 8008706:	b92a      	cbnz	r2, 8008714 <_realloc_r+0x24>
 8008708:	f7fe ff9c 	bl	8007644 <_free_r>
 800870c:	4625      	mov	r5, r4
 800870e:	4628      	mov	r0, r5
 8008710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008714:	f000 f8fa 	bl	800890c <_malloc_usable_size_r>
 8008718:	4284      	cmp	r4, r0
 800871a:	4607      	mov	r7, r0
 800871c:	d802      	bhi.n	8008724 <_realloc_r+0x34>
 800871e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008722:	d812      	bhi.n	800874a <_realloc_r+0x5a>
 8008724:	4621      	mov	r1, r4
 8008726:	4640      	mov	r0, r8
 8008728:	f7fe fff8 	bl	800771c <_malloc_r>
 800872c:	4605      	mov	r5, r0
 800872e:	2800      	cmp	r0, #0
 8008730:	d0ed      	beq.n	800870e <_realloc_r+0x1e>
 8008732:	42bc      	cmp	r4, r7
 8008734:	4622      	mov	r2, r4
 8008736:	4631      	mov	r1, r6
 8008738:	bf28      	it	cs
 800873a:	463a      	movcs	r2, r7
 800873c:	f7ff ffa4 	bl	8008688 <memcpy>
 8008740:	4631      	mov	r1, r6
 8008742:	4640      	mov	r0, r8
 8008744:	f7fe ff7e 	bl	8007644 <_free_r>
 8008748:	e7e1      	b.n	800870e <_realloc_r+0x1e>
 800874a:	4635      	mov	r5, r6
 800874c:	e7df      	b.n	800870e <_realloc_r+0x1e>

0800874e <_raise_r>:
 800874e:	291f      	cmp	r1, #31
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4604      	mov	r4, r0
 8008754:	460d      	mov	r5, r1
 8008756:	d904      	bls.n	8008762 <_raise_r+0x14>
 8008758:	2316      	movs	r3, #22
 800875a:	6003      	str	r3, [r0, #0]
 800875c:	f04f 30ff 	mov.w	r0, #4294967295
 8008760:	bd38      	pop	{r3, r4, r5, pc}
 8008762:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008764:	b112      	cbz	r2, 800876c <_raise_r+0x1e>
 8008766:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800876a:	b94b      	cbnz	r3, 8008780 <_raise_r+0x32>
 800876c:	4620      	mov	r0, r4
 800876e:	f000 f831 	bl	80087d4 <_getpid_r>
 8008772:	462a      	mov	r2, r5
 8008774:	4601      	mov	r1, r0
 8008776:	4620      	mov	r0, r4
 8008778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800877c:	f000 b818 	b.w	80087b0 <_kill_r>
 8008780:	2b01      	cmp	r3, #1
 8008782:	d00a      	beq.n	800879a <_raise_r+0x4c>
 8008784:	1c59      	adds	r1, r3, #1
 8008786:	d103      	bne.n	8008790 <_raise_r+0x42>
 8008788:	2316      	movs	r3, #22
 800878a:	6003      	str	r3, [r0, #0]
 800878c:	2001      	movs	r0, #1
 800878e:	e7e7      	b.n	8008760 <_raise_r+0x12>
 8008790:	2400      	movs	r4, #0
 8008792:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008796:	4628      	mov	r0, r5
 8008798:	4798      	blx	r3
 800879a:	2000      	movs	r0, #0
 800879c:	e7e0      	b.n	8008760 <_raise_r+0x12>
	...

080087a0 <raise>:
 80087a0:	4b02      	ldr	r3, [pc, #8]	; (80087ac <raise+0xc>)
 80087a2:	4601      	mov	r1, r0
 80087a4:	6818      	ldr	r0, [r3, #0]
 80087a6:	f7ff bfd2 	b.w	800874e <_raise_r>
 80087aa:	bf00      	nop
 80087ac:	20000110 	.word	0x20000110

080087b0 <_kill_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d07      	ldr	r5, [pc, #28]	; (80087d0 <_kill_r+0x20>)
 80087b4:	2300      	movs	r3, #0
 80087b6:	4604      	mov	r4, r0
 80087b8:	4608      	mov	r0, r1
 80087ba:	4611      	mov	r1, r2
 80087bc:	602b      	str	r3, [r5, #0]
 80087be:	f7fa f90f 	bl	80029e0 <_kill>
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	d102      	bne.n	80087cc <_kill_r+0x1c>
 80087c6:	682b      	ldr	r3, [r5, #0]
 80087c8:	b103      	cbz	r3, 80087cc <_kill_r+0x1c>
 80087ca:	6023      	str	r3, [r4, #0]
 80087cc:	bd38      	pop	{r3, r4, r5, pc}
 80087ce:	bf00      	nop
 80087d0:	200007e4 	.word	0x200007e4

080087d4 <_getpid_r>:
 80087d4:	f7fa b8fc 	b.w	80029d0 <_getpid>

080087d8 <__sread>:
 80087d8:	b510      	push	{r4, lr}
 80087da:	460c      	mov	r4, r1
 80087dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e0:	f000 f89c 	bl	800891c <_read_r>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	bfab      	itete	ge
 80087e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087ea:	89a3      	ldrhlt	r3, [r4, #12]
 80087ec:	181b      	addge	r3, r3, r0
 80087ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087f2:	bfac      	ite	ge
 80087f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80087f6:	81a3      	strhlt	r3, [r4, #12]
 80087f8:	bd10      	pop	{r4, pc}

080087fa <__swrite>:
 80087fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087fe:	461f      	mov	r7, r3
 8008800:	898b      	ldrh	r3, [r1, #12]
 8008802:	05db      	lsls	r3, r3, #23
 8008804:	4605      	mov	r5, r0
 8008806:	460c      	mov	r4, r1
 8008808:	4616      	mov	r6, r2
 800880a:	d505      	bpl.n	8008818 <__swrite+0x1e>
 800880c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008810:	2302      	movs	r3, #2
 8008812:	2200      	movs	r2, #0
 8008814:	f000 f868 	bl	80088e8 <_lseek_r>
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800881e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008822:	81a3      	strh	r3, [r4, #12]
 8008824:	4632      	mov	r2, r6
 8008826:	463b      	mov	r3, r7
 8008828:	4628      	mov	r0, r5
 800882a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800882e:	f000 b817 	b.w	8008860 <_write_r>

08008832 <__sseek>:
 8008832:	b510      	push	{r4, lr}
 8008834:	460c      	mov	r4, r1
 8008836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883a:	f000 f855 	bl	80088e8 <_lseek_r>
 800883e:	1c43      	adds	r3, r0, #1
 8008840:	89a3      	ldrh	r3, [r4, #12]
 8008842:	bf15      	itete	ne
 8008844:	6560      	strne	r0, [r4, #84]	; 0x54
 8008846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800884a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800884e:	81a3      	strheq	r3, [r4, #12]
 8008850:	bf18      	it	ne
 8008852:	81a3      	strhne	r3, [r4, #12]
 8008854:	bd10      	pop	{r4, pc}

08008856 <__sclose>:
 8008856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885a:	f000 b813 	b.w	8008884 <_close_r>
	...

08008860 <_write_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4d07      	ldr	r5, [pc, #28]	; (8008880 <_write_r+0x20>)
 8008864:	4604      	mov	r4, r0
 8008866:	4608      	mov	r0, r1
 8008868:	4611      	mov	r1, r2
 800886a:	2200      	movs	r2, #0
 800886c:	602a      	str	r2, [r5, #0]
 800886e:	461a      	mov	r2, r3
 8008870:	f7fa f8ed 	bl	8002a4e <_write>
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	d102      	bne.n	800887e <_write_r+0x1e>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	b103      	cbz	r3, 800887e <_write_r+0x1e>
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	bd38      	pop	{r3, r4, r5, pc}
 8008880:	200007e4 	.word	0x200007e4

08008884 <_close_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4d06      	ldr	r5, [pc, #24]	; (80088a0 <_close_r+0x1c>)
 8008888:	2300      	movs	r3, #0
 800888a:	4604      	mov	r4, r0
 800888c:	4608      	mov	r0, r1
 800888e:	602b      	str	r3, [r5, #0]
 8008890:	f7fa f8f9 	bl	8002a86 <_close>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_close_r+0x1a>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b103      	cbz	r3, 800889e <_close_r+0x1a>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	200007e4 	.word	0x200007e4

080088a4 <_fstat_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4d07      	ldr	r5, [pc, #28]	; (80088c4 <_fstat_r+0x20>)
 80088a8:	2300      	movs	r3, #0
 80088aa:	4604      	mov	r4, r0
 80088ac:	4608      	mov	r0, r1
 80088ae:	4611      	mov	r1, r2
 80088b0:	602b      	str	r3, [r5, #0]
 80088b2:	f7fa f8f4 	bl	8002a9e <_fstat>
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	d102      	bne.n	80088c0 <_fstat_r+0x1c>
 80088ba:	682b      	ldr	r3, [r5, #0]
 80088bc:	b103      	cbz	r3, 80088c0 <_fstat_r+0x1c>
 80088be:	6023      	str	r3, [r4, #0]
 80088c0:	bd38      	pop	{r3, r4, r5, pc}
 80088c2:	bf00      	nop
 80088c4:	200007e4 	.word	0x200007e4

080088c8 <_isatty_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4d06      	ldr	r5, [pc, #24]	; (80088e4 <_isatty_r+0x1c>)
 80088cc:	2300      	movs	r3, #0
 80088ce:	4604      	mov	r4, r0
 80088d0:	4608      	mov	r0, r1
 80088d2:	602b      	str	r3, [r5, #0]
 80088d4:	f7fa f8f3 	bl	8002abe <_isatty>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	d102      	bne.n	80088e2 <_isatty_r+0x1a>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	b103      	cbz	r3, 80088e2 <_isatty_r+0x1a>
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	200007e4 	.word	0x200007e4

080088e8 <_lseek_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4d07      	ldr	r5, [pc, #28]	; (8008908 <_lseek_r+0x20>)
 80088ec:	4604      	mov	r4, r0
 80088ee:	4608      	mov	r0, r1
 80088f0:	4611      	mov	r1, r2
 80088f2:	2200      	movs	r2, #0
 80088f4:	602a      	str	r2, [r5, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	f7fa f8ec 	bl	8002ad4 <_lseek>
 80088fc:	1c43      	adds	r3, r0, #1
 80088fe:	d102      	bne.n	8008906 <_lseek_r+0x1e>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	b103      	cbz	r3, 8008906 <_lseek_r+0x1e>
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	200007e4 	.word	0x200007e4

0800890c <_malloc_usable_size_r>:
 800890c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008910:	1f18      	subs	r0, r3, #4
 8008912:	2b00      	cmp	r3, #0
 8008914:	bfbc      	itt	lt
 8008916:	580b      	ldrlt	r3, [r1, r0]
 8008918:	18c0      	addlt	r0, r0, r3
 800891a:	4770      	bx	lr

0800891c <_read_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	4d07      	ldr	r5, [pc, #28]	; (800893c <_read_r+0x20>)
 8008920:	4604      	mov	r4, r0
 8008922:	4608      	mov	r0, r1
 8008924:	4611      	mov	r1, r2
 8008926:	2200      	movs	r2, #0
 8008928:	602a      	str	r2, [r5, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	f7fa f872 	bl	8002a14 <_read>
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	d102      	bne.n	800893a <_read_r+0x1e>
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	b103      	cbz	r3, 800893a <_read_r+0x1e>
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	bd38      	pop	{r3, r4, r5, pc}
 800893c:	200007e4 	.word	0x200007e4

08008940 <_init>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	bf00      	nop
 8008944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008946:	bc08      	pop	{r3}
 8008948:	469e      	mov	lr, r3
 800894a:	4770      	bx	lr

0800894c <_fini>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	bf00      	nop
 8008950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008952:	bc08      	pop	{r3}
 8008954:	469e      	mov	lr, r3
 8008956:	4770      	bx	lr
