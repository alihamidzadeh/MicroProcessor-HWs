
Final-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800b57c  0800b57c  0001b57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baf0  0800baf0  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800baf0  0800baf0  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800baf0  0800baf0  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baf0  0800baf0  0001baf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baf4  0800baf4  0001baf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800baf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          0000072c  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a8  200008a8  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dcd4  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003767  00000000  00000000  0003de80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  000415e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016e8  00000000  00000000  00042dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216af  00000000  00000000  000444a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dc11  00000000  00000000  00065b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c64b3  00000000  00000000  00083768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149c1b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007390  00000000  00000000  00149c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b564 	.word	0x0800b564

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	0800b564 	.word	0x0800b564

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000019a 	.word	0x2000019a
 800039c:	2000019c 	.word	0x2000019c
 80003a0:	2000019e 	.word	0x2000019e
 80003a4:	200001b0 	.word	0x200001b0
 80003a8:	200001a0 	.word	0x200001a0
 80003ac:	200001b4 	.word	0x200001b4

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f004 f897 	bl	80045e4 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f003 fee8 	bl	800428c <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f004 fa1e 	bl	8004908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f004 fa16 	bl	8004908 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f004 fa0a 	bl	8004908 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f003 fec0 	bl	800428c <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f003 feba 	bl	800428c <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f003 feb4 	bl	800428c <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f003 fea5 	bl	800428c <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f003 fe9a 	bl	800428c <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200001b4 	.word	0x200001b4
 80005a8:	200001b7 	.word	0x200001b7
 80005ac:	20000198 	.word	0x20000198
 80005b0:	20000000 	.word	0x20000000
 80005b4:	2000019a 	.word	0x2000019a
 80005b8:	2000019c 	.word	0x2000019c
 80005bc:	2000019e 	.word	0x2000019e
 80005c0:	200001a0 	.word	0x200001a0
 80005c4:	200001b0 	.word	0x200001b0
 80005c8:	200001b5 	.word	0x200001b5
 80005cc:	200001b6 	.word	0x200001b6

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200001b0 	.word	0x200001b0
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200001b8 	.word	0x200001b8

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f003 fda2 	bl	800428c <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001b7 	.word	0x200001b7
 80007ac:	200001b8 	.word	0x200001b8

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001b5 	.word	0x200001b5

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 f814 	bl	8004908 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f004 f808 	bl	8004908 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001b0 	.word	0x200001b0
 8000930:	2000019a 	.word	0x2000019a
 8000934:	2000019c 	.word	0x2000019c
 8000938:	200001b4 	.word	0x200001b4

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f003 ffdc 	bl	8004908 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f003 fc9b 	bl	800428c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f003 ffd1 	bl	8004908 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f003 fc90 	bl	800428c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f003 ffc6 	bl	8004908 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f003 fc85 	bl	800428c <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001b0 	.word	0x200001b0
 800098c:	2000019e 	.word	0x2000019e

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f003 ffa3 	bl	8004908 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200001b0 	.word	0x200001b0
 80009e0:	200001a0 	.word	0x200001a0

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f003 ff79 	bl	8004908 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001b0 	.word	0x200001b0
 8000a34:	200001a0 	.word	0x200001a0

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f003 fbc0 	bl	80041c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f842 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 fae6 	bl	8001014 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a48:	f000 f8a6 	bl	8000b98 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a4c:	f000 f93e 	bl	8000ccc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000a50:	f000 fabe 	bl	8000fd0 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8000a54:	f000 f8e0 	bl	8000c18 <MX_RTC_Init>
  MX_TIM4_Init();
 8000a58:	f000 fa3c 	bl	8000ed4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000a5c:	f000 f974 	bl	8000d48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a60:	f000 f9c0 	bl	8000de4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000a64:	f000 fa84 	bl	8000f70 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000a68:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <main+0x80>)
 8000a6a:	f006 f9c1 	bl	8006df0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <main+0x84>)
 8000a70:	f006 f9be 	bl	8006df0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <main+0x88>)
 8000a76:	f006 f9bb 	bl	8006df0 <HAL_TIM_Base_Start_IT>


  programInit();
 8000a7a:	f000 ff37 	bl	80018ec <programInit>
  PWM_Start();
 8000a7e:	f003 f8e3 	bl	8003c48 <PWM_Start>


  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a88:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <main+0x8c>)
 8000a8a:	f003 ff3d 	bl	8004908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <main+0x8c>)
 8000a96:	f003 ff37 	bl	8004908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa0:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <main+0x8c>)
 8000aa2:	f003 ff31 	bl	8004908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <main+0x8c>)
 8000aae:	f003 ff2b 	bl	8004908 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  programLoop();
 8000ab2:	f001 fbc5 	bl	8002240 <programLoop>
  {
 8000ab6:	e7fc      	b.n	8000ab2 <main+0x7a>
 8000ab8:	2000032c 	.word	0x2000032c
 8000abc:	20000294 	.word	0x20000294
 8000ac0:	200002e0 	.word	0x200002e0
 8000ac4:	48000c00 	.word	0x48000c00

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b09e      	sub	sp, #120	; 0x78
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ad2:	2228      	movs	r2, #40	; 0x28
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f008 fe58 	bl	800978c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	463b      	mov	r3, r7
 8000aee:	223c      	movs	r2, #60	; 0x3c
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fe4a 	bl	800978c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000af8:	230b      	movs	r3, #11
 8000afa:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000afc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b00:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b06:	2301      	movs	r3, #1
 8000b08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b12:	2302      	movs	r3, #2
 8000b14:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b1c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b20:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b26:	4618      	mov	r0, r3
 8000b28:	f004 f930 	bl	8004d8c <HAL_RCC_OscConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b32:	f000 fb7f 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b36:	230f      	movs	r3, #15
 8000b38:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b50:	2102      	movs	r1, #2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f005 f958 	bl	8005e08 <HAL_RCC_ClockConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b5e:	f000 fb69 	bl	8001234 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <SystemClock_Config+0xcc>)
 8000b64:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b72:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f005 fb7a 	bl	8006274 <HAL_RCCEx_PeriphCLKConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b86:	f000 fb55 	bl	8001234 <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3778      	adds	r7, #120	; 0x78
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	00030024 	.word	0x00030024

08000b98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000b9e:	4a1c      	ldr	r2, [pc, #112]	; (8000c10 <MX_I2C1_Init+0x78>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <MX_I2C1_Init+0x7c>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd2:	480e      	ldr	r0, [pc, #56]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bd4:	f003 fee2 	bl	800499c <HAL_I2C_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bde:	f000 fb29 	bl	8001234 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000be2:	2100      	movs	r1, #0
 8000be4:	4809      	ldr	r0, [pc, #36]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000be6:	f003 ff68 	bl	8004aba <HAL_I2CEx_ConfigAnalogFilter>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bf0:	f000 fb20 	bl	8001234 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bf8:	f003 ffaa 	bl	8004b50 <HAL_I2CEx_ConfigDigitalFilter>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c02:	f000 fb17 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200001bc 	.word	0x200001bc
 8000c10:	40005400 	.word	0x40005400
 8000c14:	2000090e 	.word	0x2000090e

08000c18 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c32:	4a25      	ldr	r2, [pc, #148]	; (8000cc8 <MX_RTC_Init+0xb0>)
 8000c34:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 8000c3c:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c3e:	2227      	movs	r2, #39	; 0x27
 8000c40:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c48:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c5c:	4819      	ldr	r0, [pc, #100]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c5e:	f005 fcb9 	bl	80065d4 <HAL_RTC_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000c68:	f000 fae4 	bl	8001234 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2201      	movs	r2, #1
 8000c84:	4619      	mov	r1, r3
 8000c86:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c88:	f005 fd27 	bl	80066da <HAL_RTC_SetTime>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000c92:	f000 facf 	bl	8001234 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c96:	2301      	movs	r3, #1
 8000c98:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000cae:	f005 fe0c 	bl	80068ca <HAL_RTC_SetDate>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000cb8:	f000 fabc 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000210 	.word	0x20000210
 8000cc8:	40002800 	.word	0x40002800

08000ccc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <MX_SPI1_Init+0x78>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000cd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000ce6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cfe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d02:	2208      	movs	r2, #8
 8000d04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d1a:	2207      	movs	r2, #7
 8000d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d26:	2208      	movs	r2, #8
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d2c:	f005 ff5e 	bl	8006bec <HAL_SPI_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 fa7d 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000230 	.word	0x20000230
 8000d44:	40013000 	.word	0x40013000

08000d48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18000;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d70:	f244 6250 	movw	r2, #18000	; 0x4650
 8000d74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d90:	4813      	ldr	r0, [pc, #76]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d92:	f005 ffd6 	bl	8006d42 <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d9c:	f000 fa4a 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000dae:	f006 fc1f 	bl	80075f0 <HAL_TIM_ConfigClockSource>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000db8:	f000 fa3c 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000dca:	f007 f929 	bl	8008020 <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000dd4:	f000 fa2e 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000294 	.word	0x20000294

08000de4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	; 0x38
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e04:	463b      	mov	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
 8000e12:	615a      	str	r2, [r3, #20]
 8000e14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e18:	4a2d      	ldr	r2, [pc, #180]	; (8000ed0 <MX_TIM3_Init+0xec>)
 8000e1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e3c:	4823      	ldr	r0, [pc, #140]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e3e:	f005 ff80 	bl	8006d42 <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e48:	f000 f9f4 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e56:	4619      	mov	r1, r3
 8000e58:	481c      	ldr	r0, [pc, #112]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e5a:	f006 fbc9 	bl	80075f0 <HAL_TIM_ConfigClockSource>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e64:	f000 f9e6 	bl	8001234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e68:	4818      	ldr	r0, [pc, #96]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e6a:	f006 f82b 	bl	8006ec4 <HAL_TIM_PWM_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e74:	f000 f9de 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	4811      	ldr	r0, [pc, #68]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e88:	f007 f8ca 	bl	8008020 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e92:	f000 f9cf 	bl	8001234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e96:	2360      	movs	r3, #96	; 0x60
 8000e98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4807      	ldr	r0, [pc, #28]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000eae:	f006 fa8b 	bl	80073c8 <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000eb8:	f000 f9bc 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000ebe:	f002 fdfb 	bl	8003ab8 <HAL_TIM_MspPostInit>

}
 8000ec2:	bf00      	nop
 8000ec4:	3738      	adds	r7, #56	; 0x38
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200002e0 	.word	0x200002e0
 8000ed0:	40000400 	.word	0x40000400

08000ed4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <MX_TIM4_Init+0x98>)
 8000ef6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48-1;
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000efa:	222f      	movs	r2, #47	; 0x2f
 8000efc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f06:	2209      	movs	r2, #9
 8000f08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f16:	4814      	ldr	r0, [pc, #80]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f18:	f005 ff13 	bl	8006d42 <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000f22:	f000 f987 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	480d      	ldr	r0, [pc, #52]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f34:	f006 fb5c 	bl	80075f0 <HAL_TIM_ConfigClockSource>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f000 f979 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f50:	f007 f866 	bl	8008020 <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000f5a:	f000 f96b 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000032c 	.word	0x2000032c
 8000f6c:	40000800 	.word	0x40000800

08000f70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <MX_USART3_UART_Init+0x5c>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f7c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000fb4:	f007 f8d2 	bl	800815c <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fbe:	f000 f939 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000378 	.word	0x20000378
 8000fcc:	40004800 	.word	0x40004800

08000fd0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <MX_USB_PCD_Init+0x40>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000fdc:	2208      	movs	r2, #8
 8000fde:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000ffa:	f003 fdf5 	bl	8004be8 <HAL_PCD_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001004:	f000 f916 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000400 	.word	0x20000400
 8001010:	40005c00 	.word	0x40005c00

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	; 0x30
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800102a:	4b7d      	ldr	r3, [pc, #500]	; (8001220 <MX_GPIO_Init+0x20c>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	4a7c      	ldr	r2, [pc, #496]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001034:	6153      	str	r3, [r2, #20]
 8001036:	4b7a      	ldr	r3, [pc, #488]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b77      	ldr	r3, [pc, #476]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a76      	ldr	r2, [pc, #472]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001048:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800104c:	6153      	str	r3, [r2, #20]
 800104e:	4b74      	ldr	r3, [pc, #464]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105a:	4b71      	ldr	r3, [pc, #452]	; (8001220 <MX_GPIO_Init+0x20c>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a70      	ldr	r2, [pc, #448]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b6e      	ldr	r3, [pc, #440]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b6b      	ldr	r3, [pc, #428]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4a6a      	ldr	r2, [pc, #424]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	6153      	str	r3, [r2, #20]
 800107e:	4b68      	ldr	r3, [pc, #416]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b65      	ldr	r3, [pc, #404]	; (8001220 <MX_GPIO_Init+0x20c>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a64      	ldr	r2, [pc, #400]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b62      	ldr	r3, [pc, #392]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a2:	4b5f      	ldr	r3, [pc, #380]	; (8001220 <MX_GPIO_Init+0x20c>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a5e      	ldr	r2, [pc, #376]	; (8001220 <MX_GPIO_Init+0x20c>)
 80010a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b5c      	ldr	r3, [pc, #368]	; (8001220 <MX_GPIO_Init+0x20c>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010ba:	2200      	movs	r2, #0
 80010bc:	f64f 7108 	movw	r1, #65288	; 0xff08
 80010c0:	4858      	ldr	r0, [pc, #352]	; (8001224 <MX_GPIO_Init+0x210>)
 80010c2:	f003 fc21 	bl	8004908 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2110      	movs	r1, #16
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f003 fc1b 	bl	8004908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2150      	movs	r1, #80	; 0x50
 80010d6:	4854      	ldr	r0, [pc, #336]	; (8001228 <MX_GPIO_Init+0x214>)
 80010d8:	f003 fc16 	bl	8004908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f242 0105 	movw	r1, #8197	; 0x2005
 80010e2:	4852      	ldr	r0, [pc, #328]	; (800122c <MX_GPIO_Init+0x218>)
 80010e4:	f003 fc10 	bl	8004908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 413e 	mov.w	r1, #48640	; 0xbe00
 80010ee:	4850      	ldr	r0, [pc, #320]	; (8001230 <MX_GPIO_Init+0x21c>)
 80010f0:	f003 fc0a 	bl	8004908 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010f4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80010f8:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4845      	ldr	r0, [pc, #276]	; (8001224 <MX_GPIO_Init+0x210>)
 800110e:	f003 fa69 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8001112:	2320      	movs	r3, #32
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001116:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	483f      	ldr	r0, [pc, #252]	; (8001224 <MX_GPIO_Init+0x210>)
 8001128:	f003 fa5c 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800112c:	2301      	movs	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f003 fa4f 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001146:	2310      	movs	r3, #16
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f003 fa40 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001164:	2350      	movs	r3, #80	; 0x50
 8001166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	482b      	ldr	r0, [pc, #172]	; (8001228 <MX_GPIO_Init+0x214>)
 800117c:	f003 fa32 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 8001180:	f242 0305 	movw	r3, #8197	; 0x2005
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	4824      	ldr	r0, [pc, #144]	; (800122c <MX_GPIO_Init+0x218>)
 800119a:	f003 fa23 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800119e:	f44f 433e 	mov.w	r3, #48640	; 0xbe00
 80011a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	481e      	ldr	r0, [pc, #120]	; (8001230 <MX_GPIO_Init+0x21c>)
 80011b8:	f003 fa14 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011bc:	230f      	movs	r3, #15
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011c6:	2302      	movs	r3, #2
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4817      	ldr	r0, [pc, #92]	; (8001230 <MX_GPIO_Init+0x21c>)
 80011d2:	f003 fa07 	bl	80045e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2100      	movs	r1, #0
 80011da:	2006      	movs	r0, #6
 80011dc:	f003 f955 	bl	800448a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011e0:	2006      	movs	r0, #6
 80011e2:	f003 f96e 	bl	80044c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 1);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2100      	movs	r1, #0
 80011ea:	2007      	movs	r0, #7
 80011ec:	f003 f94d 	bl	800448a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011f0:	2007      	movs	r0, #7
 80011f2:	f003 f966 	bl	80044c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2100      	movs	r1, #0
 80011fa:	2008      	movs	r0, #8
 80011fc:	f003 f945 	bl	800448a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001200:	2008      	movs	r0, #8
 8001202:	f003 f95e 	bl	80044c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 8001206:	2201      	movs	r2, #1
 8001208:	2100      	movs	r1, #0
 800120a:	2009      	movs	r0, #9
 800120c:	f003 f93d 	bl	800448a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001210:	2009      	movs	r0, #9
 8001212:	f003 f956 	bl	80044c2 <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	; 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	48001000 	.word	0x48001000
 8001228:	48000800 	.word	0x48000800
 800122c:	48000400 	.word	0x48000400
 8001230:	48000c00 	.word	0x48000c00

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>
	...

08001240 <set_start_time>:
extern RTC_HandleTypeDef hrtc;

RTC_TimeTypeDef mytime ;
RTC_DateTypeDef mydate ;

void set_start_time(int hour, int minute, int second){
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]

	RTC_TimeTypeDef start_t ;

	start_t.Hours = 20;
 800124c:	2314      	movs	r3, #20
 800124e:	753b      	strb	r3, [r7, #20]
	start_t.Minutes = 20;
 8001250:	2314      	movs	r3, #20
 8001252:	757b      	strb	r3, [r7, #21]
	start_t.Seconds = 20;
 8001254:	2314      	movs	r3, #20
 8001256:	75bb      	strb	r3, [r7, #22]

    HAL_RTC_SetTime(&hrtc, &start_t, RTC_FORMAT_BIN);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <set_start_time+0x30>)
 8001262:	f005 fa3a 	bl	80066da <HAL_RTC_SetTime>
}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	; 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000210 	.word	0x20000210

08001274 <set_start_day>:

void set_start_day(int year, int month, int day){
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef start_t ;

	start_t.Year = 2024;
 8001280:	23e8      	movs	r3, #232	; 0xe8
 8001282:	75fb      	strb	r3, [r7, #23]
	start_t.Month = 3;
 8001284:	2303      	movs	r3, #3
 8001286:	757b      	strb	r3, [r7, #21]
	start_t.Date = 20;
 8001288:	2314      	movs	r3, #20
 800128a:	75bb      	strb	r3, [r7, #22]

    HAL_RTC_SetDate(&hrtc, &start_t, RTC_FORMAT_BIN);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <set_start_day+0x30>)
 8001296:	f005 fb18 	bl	80068ca <HAL_RTC_SetDate>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000210 	.word	0x20000210

080012a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
  if (last_gpio_exti + 70 > HAL_GetTick()) // Simple button debouncing
 80012b2:	4bb3      	ldr	r3, [pc, #716]	; (8001580 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f103 0446 	add.w	r4, r3, #70	; 0x46
 80012ba:	f002 ffdb 	bl	8004274 <HAL_GetTick>
 80012be:	4603      	mov	r3, r0
 80012c0:	429c      	cmp	r4, r3
 80012c2:	f200 81b8 	bhi.w	8001636 <HAL_GPIO_EXTI_Callback+0x38e>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 80012c6:	f002 ffd5 	bl	8004274 <HAL_GetTick>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4aac      	ldr	r2, [pc, #688]	; (8001580 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80012ce:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 80012d0:	23ff      	movs	r3, #255	; 0xff
 80012d2:	73fb      	strb	r3, [r7, #15]
  int8_t column_number = -1;
 80012d4:	23ff      	movs	r3, #255	; 0xff
 80012d6:	73bb      	strb	r3, [r7, #14]
  {
    // blue_button_pressed = 1;
    // return;
  }

  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 80012d8:	2300      	movs	r3, #0
 80012da:	737b      	strb	r3, [r7, #13]
 80012dc:	e00b      	b.n	80012f6 <HAL_GPIO_EXTI_Callback+0x4e>
  {
    if (GPIO_Pin == Row_pins[row])
 80012de:	7b7b      	ldrb	r3, [r7, #13]
 80012e0:	4aa8      	ldr	r2, [pc, #672]	; (8001584 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80012e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e6:	88fa      	ldrh	r2, [r7, #6]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d101      	bne.n	80012f0 <HAL_GPIO_EXTI_Callback+0x48>
    {
      row_number = row;
 80012ec:	7b7b      	ldrb	r3, [r7, #13]
 80012ee:	73fb      	strb	r3, [r7, #15]
  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 80012f0:	7b7b      	ldrb	r3, [r7, #13]
 80012f2:	3301      	adds	r3, #1
 80012f4:	737b      	strb	r3, [r7, #13]
 80012f6:	7b7b      	ldrb	r3, [r7, #13]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d9f0      	bls.n	80012de <HAL_GPIO_EXTI_Callback+0x36>
    }
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 80012fc:	4ba2      	ldr	r3, [pc, #648]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80012fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001302:	2200      	movs	r2, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f003 faff 	bl	8004908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 800130a:	4b9f      	ldr	r3, [pc, #636]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800130c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001310:	2200      	movs	r2, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f003 faf8 	bl	8004908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8001318:	4b9b      	ldr	r3, [pc, #620]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800131a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131e:	2200      	movs	r2, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f003 faf1 	bl	8004908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8001326:	4b98      	ldr	r3, [pc, #608]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132c:	2200      	movs	r2, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f003 faea 	bl	8004908 <HAL_GPIO_WritePin>

  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8001334:	2300      	movs	r3, #0
 8001336:	733b      	strb	r3, [r7, #12]
 8001338:	e02d      	b.n	8001396 <HAL_GPIO_EXTI_Callback+0xee>
  {
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 800133a:	7b3b      	ldrb	r3, [r7, #12]
 800133c:	4a93      	ldr	r2, [pc, #588]	; (800158c <HAL_GPIO_EXTI_Callback+0x2e4>)
 800133e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001342:	7b3b      	ldrb	r3, [r7, #12]
 8001344:	4a92      	ldr	r2, [pc, #584]	; (8001590 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134a:	2201      	movs	r2, #1
 800134c:	4619      	mov	r1, r3
 800134e:	f003 fadb 	bl	8004908 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number]))
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4a8f      	ldr	r2, [pc, #572]	; (8001594 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001360:	4988      	ldr	r1, [pc, #544]	; (8001584 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001362:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f003 fab5 	bl	80048d8 <HAL_GPIO_ReadPin>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_GPIO_EXTI_Callback+0xd0>
    {
      column_number = col;
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	73bb      	strb	r3, [r7, #14]
    }
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8001378:	7b3b      	ldrb	r3, [r7, #12]
 800137a:	4a84      	ldr	r2, [pc, #528]	; (800158c <HAL_GPIO_EXTI_Callback+0x2e4>)
 800137c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001380:	7b3b      	ldrb	r3, [r7, #12]
 8001382:	4a83      	ldr	r2, [pc, #524]	; (8001590 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	f003 fabc 	bl	8004908 <HAL_GPIO_WritePin>
  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8001390:	7b3b      	ldrb	r3, [r7, #12]
 8001392:	3301      	adds	r3, #1
 8001394:	733b      	strb	r3, [r7, #12]
 8001396:	7b3b      	ldrb	r3, [r7, #12]
 8001398:	2b03      	cmp	r3, #3
 800139a:	d9ce      	bls.n	800133a <HAL_GPIO_EXTI_Callback+0x92>
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 800139c:	4b7a      	ldr	r3, [pc, #488]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800139e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a2:	2201      	movs	r2, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 faaf 	bl	8004908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 80013aa:	4b77      	ldr	r3, [pc, #476]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80013ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b0:	2201      	movs	r2, #1
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 faa8 	bl	8004908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 80013b8:	4b73      	ldr	r3, [pc, #460]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80013ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013be:	2201      	movs	r2, #1
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 faa1 	bl	8004908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 80013c6:	4b70      	ldr	r3, [pc, #448]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80013c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013cc:	2201      	movs	r2, #1
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 fa9a 	bl	8004908 <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 80013d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	f000 812d 	beq.w	800163a <HAL_GPIO_EXTI_Callback+0x392>
 80013e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	f000 8127 	beq.w	800163a <HAL_GPIO_EXTI_Callback+0x392>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	7bbb      	ldrb	r3, [r7, #14]
 80013f4:	4413      	add	r3, r2
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	3301      	adds	r3, #1
 80013fa:	72fb      	strb	r3, [r7, #11]
  switch (button_number){
 80013fc:	7afb      	ldrb	r3, [r7, #11]
 80013fe:	3b01      	subs	r3, #1
 8001400:	2b0f      	cmp	r3, #15
 8001402:	f200 811c 	bhi.w	800163e <HAL_GPIO_EXTI_Callback+0x396>
 8001406:	a201      	add	r2, pc, #4	; (adr r2, 800140c <HAL_GPIO_EXTI_Callback+0x164>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	0800144d 	.word	0x0800144d
 8001410:	08001461 	.word	0x08001461
 8001414:	08001475 	.word	0x08001475
 8001418:	08001483 	.word	0x08001483
 800141c:	08001491 	.word	0x08001491
 8001420:	080014a5 	.word	0x080014a5
 8001424:	080014b3 	.word	0x080014b3
 8001428:	080014c1 	.word	0x080014c1
 800142c:	080014cf 	.word	0x080014cf
 8001430:	080014fb 	.word	0x080014fb
 8001434:	08001527 	.word	0x08001527
 8001438:	08001535 	.word	0x08001535
 800143c:	08001549 	.word	0x08001549
 8001440:	080015a9 	.word	0x080015a9
 8001444:	0800160f 	.word	0x0800160f
 8001448:	08001623 	.word	0x08001623
  case 1: //move	//1
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001452:	4851      	ldr	r0, [pc, #324]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001454:	f003 fa58 	bl	8004908 <HAL_GPIO_WritePin>
	move(1);
 8001458:	2001      	movs	r0, #1
 800145a:	f001 fd61 	bl	8002f20 <move>

    break;
 800145e:	e0f7      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 2: //boom 	//2
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001466:	484c      	ldr	r0, [pc, #304]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001468:	f003 fa4e 	bl	8004908 <HAL_GPIO_WritePin>
	boom(1);
 800146c:	2001      	movs	r0, #1
 800146e:	f000 ff83 	bl	8002378 <boom>
    break;
 8001472:	e0ed      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 3:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001474:	2201      	movs	r2, #1
 8001476:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800147a:	4847      	ldr	r0, [pc, #284]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800147c:	f003 fa44 	bl	8004908 <HAL_GPIO_WritePin>
    break;
 8001480:	e0e6      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 4:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001488:	4843      	ldr	r0, [pc, #268]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800148a:	f003 fa3d 	bl	8004908 <HAL_GPIO_WritePin>
    break;
 800148e:	e0df      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 5: //dir	 	//4
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001496:	4840      	ldr	r0, [pc, #256]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001498:	f003 fa36 	bl	8004908 <HAL_GPIO_WritePin>
	 change_dir(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f000 ff21 	bl	80022e4 <change_dir>
    break;
 80014a2:	e0d5      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 6:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014aa:	483b      	ldr	r0, [pc, #236]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80014ac:	f003 fa2c 	bl	8004908 <HAL_GPIO_WritePin>
    break;
 80014b0:	e0ce      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 7:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b8:	4837      	ldr	r0, [pc, #220]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80014ba:	f003 fa25 	bl	8004908 <HAL_GPIO_WritePin>
    break;
 80014be:	e0c7      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 8:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c6:	4834      	ldr	r0, [pc, #208]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80014c8:	f003 fa1e 	bl	8004908 <HAL_GPIO_WritePin>
    break;
 80014cc:	e0c0      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 9: // menu curser up
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d4:	4830      	ldr	r0, [pc, #192]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80014d6:	f003 fa17 	bl	8004908 <HAL_GPIO_WritePin>
		if(pageflag==1){
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	f040 80af 	bne.w	8001642 <HAL_GPIO_EXTI_Callback+0x39a>
			if (menu_curser_r > 1){
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	f340 80aa 	ble.w	8001642 <HAL_GPIO_EXTI_Callback+0x39a>
				menu_curser_r -= 1;
 80014ee:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	4a2a      	ldr	r2, [pc, #168]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80014f6:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 80014f8:	e0a3      	b.n	8001642 <HAL_GPIO_EXTI_Callback+0x39a>
  case 10: // menu cursor down
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001500:	4825      	ldr	r0, [pc, #148]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001502:	f003 fa01 	bl	8004908 <HAL_GPIO_WritePin>
		if(pageflag==1){
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	f040 809b 	bne.w	8001646 <HAL_GPIO_EXTI_Callback+0x39e>
			if (menu_curser_r  < 3){
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b02      	cmp	r3, #2
 8001516:	f300 8096 	bgt.w	8001646 <HAL_GPIO_EXTI_Callback+0x39e>
				menu_curser_r +=1;
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001522:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 8001524:	e08f      	b.n	8001646 <HAL_GPIO_EXTI_Callback+0x39e>
  case 11:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152c:	481a      	ldr	r0, [pc, #104]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800152e:	f003 f9eb 	bl	8004908 <HAL_GPIO_WritePin>
    break;
 8001532:	e08d      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 12: //Dir	//C
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153a:	4817      	ldr	r0, [pc, #92]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800153c:	f003 f9e4 	bl	8004908 <HAL_GPIO_WritePin>
		change_dir(2);
 8001540:	2002      	movs	r0, #2
 8001542:	f000 fecf 	bl	80022e4 <change_dir>
    break;
 8001546:	e083      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 13: //goto menu
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8001548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800154c:	4812      	ldr	r0, [pc, #72]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800154e:	f003 f9f3 	bl	8004938 <HAL_GPIO_TogglePin>
		if(pageflag == 0 || pageflag == 3 || pageflag == 4 || pageflag == 2){
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <HAL_GPIO_EXTI_Callback+0x2ca>
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_EXTI_Callback+0x2ca>
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b04      	cmp	r3, #4
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_EXTI_Callback+0x2ca>
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d16b      	bne.n	800164a <HAL_GPIO_EXTI_Callback+0x3a2>
			change_page = 1;
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]
			pageflag = 1;
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]
		}
    break;
 800157e:	e064      	b.n	800164a <HAL_GPIO_EXTI_Callback+0x3a2>
 8001580:	200006f8 	.word	0x200006f8
 8001584:	0800b730 	.word	0x0800b730
 8001588:	48000c00 	.word	0x48000c00
 800158c:	0800b738 	.word	0x0800b738
 8001590:	0800b748 	.word	0x0800b748
 8001594:	0800b720 	.word	0x0800b720
 8001598:	48001000 	.word	0x48001000
 800159c:	200006ec 	.word	0x200006ec
 80015a0:	20000004 	.word	0x20000004
 80015a4:	200006fc 	.word	0x200006fc
  case 14: // select in menu
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ae:	482a      	ldr	r0, [pc, #168]	; (8001658 <HAL_GPIO_EXTI_Callback+0x3b0>)
 80015b0:	f003 f9aa 	bl	8004908 <HAL_GPIO_WritePin>
		if(pageflag == 1){
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <HAL_GPIO_EXTI_Callback+0x3b4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d148      	bne.n	800164e <HAL_GPIO_EXTI_Callback+0x3a6>
			if(menu_curser_r == 1){
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10e      	bne.n	80015e2 <HAL_GPIO_EXTI_Callback+0x33a>
				pageflag = 2;
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <HAL_GPIO_EXTI_Callback+0x3b4>)
 80015c6:	2202      	movs	r2, #2
 80015c8:	601a      	str	r2, [r3, #0]
				change_page = 1;
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <HAL_GPIO_EXTI_Callback+0x3bc>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
				game_started = 1;
 80015d0:	4b25      	ldr	r3, [pc, #148]	; (8001668 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
				for30timer = HAL_GetTick();
 80015d6:	f002 fe4d 	bl	8004274 <HAL_GetTick>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a23      	ldr	r2, [pc, #140]	; (800166c <HAL_GPIO_EXTI_Callback+0x3c4>)
 80015de:	6013      	str	r3, [r2, #0]
				change_page = 1;

			}
		}

    break;
 80015e0:	e035      	b.n	800164e <HAL_GPIO_EXTI_Callback+0x3a6>
			else if(menu_curser_r == 2){
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d106      	bne.n	80015f8 <HAL_GPIO_EXTI_Callback+0x350>
				pageflag = 3;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_GPIO_EXTI_Callback+0x3b4>)
 80015ec:	2203      	movs	r2, #3
 80015ee:	601a      	str	r2, [r3, #0]
				change_page = 1;
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <HAL_GPIO_EXTI_Callback+0x3bc>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
    break;
 80015f6:	e02a      	b.n	800164e <HAL_GPIO_EXTI_Callback+0x3a6>
			else if(menu_curser_r == 3){
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d126      	bne.n	800164e <HAL_GPIO_EXTI_Callback+0x3a6>
				pageflag = 4;
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_GPIO_EXTI_Callback+0x3b4>)
 8001602:	2204      	movs	r2, #4
 8001604:	601a      	str	r2, [r3, #0]
				change_page = 1;
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_GPIO_EXTI_Callback+0x3bc>)
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]
    break;
 800160c:	e01f      	b.n	800164e <HAL_GPIO_EXTI_Callback+0x3a6>
  case 15: //Boom	//#
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001614:	4810      	ldr	r0, [pc, #64]	; (8001658 <HAL_GPIO_EXTI_Callback+0x3b0>)
 8001616:	f003 f977 	bl	8004908 <HAL_GPIO_WritePin>
		boom(2);
 800161a:	2002      	movs	r0, #2
 800161c:	f000 feac 	bl	8002378 <boom>
    break;
 8001620:	e016      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 16: //move	//D
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <HAL_GPIO_EXTI_Callback+0x3b0>)
 800162a:	f003 f96d 	bl	8004908 <HAL_GPIO_WritePin>
		move(2);
 800162e:	2002      	movs	r0, #2
 8001630:	f001 fc76 	bl	8002f20 <move>
    break;
 8001634:	e00c      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
    return;
 8001636:	bf00      	nop
 8001638:	e00a      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
    return; // Reject invalid scan
 800163a:	bf00      	nop
 800163c:	e008      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>

  default:
    break;
 800163e:	bf00      	nop
 8001640:	e006      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
    break;
 8001642:	bf00      	nop
 8001644:	e004      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
    break;
 8001646:	bf00      	nop
 8001648:	e002      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
    break;
 800164a:	bf00      	nop
 800164c:	e000      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x3a8>
    break;
 800164e:	bf00      	nop
  }
}
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bd90      	pop	{r4, r7, pc}
 8001656:	bf00      	nop
 8001658:	48001000 	.word	0x48001000
 800165c:	200006ec 	.word	0x200006ec
 8001660:	20000004 	.word	0x20000004
 8001664:	200006fc 	.word	0x200006fc
 8001668:	200006f0 	.word	0x200006f0
 800166c:	200006f4 	.word	0x200006f4

08001670 <seven_segment_display_decimal>:
	.digits={0, 0, 0, 0},
	.number = 0};



void seven_segment_display_decimal(uint32_t n) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    if (n < 10) {
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b09      	cmp	r3, #9
 800167c:	d832      	bhi.n	80016e4 <seven_segment_display_decimal+0x74>
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin, (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <seven_segment_display_decimal+0x7c>)
 8001680:	6a18      	ldr	r0, [r3, #32]
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <seven_segment_display_decimal+0x7c>)
 8001684:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	461a      	mov	r2, r3
 8001692:	f003 f939 	bl	8004908 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin, (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <seven_segment_display_decimal+0x7c>)
 8001698:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <seven_segment_display_decimal+0x7c>)
 800169c:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	f003 f92c 	bl	8004908 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin, (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <seven_segment_display_decimal+0x7c>)
 80016b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <seven_segment_display_decimal+0x7c>)
 80016b6:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	f003 f91f 	bl	8004908 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin, (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <seven_segment_display_decimal+0x7c>)
 80016cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <seven_segment_display_decimal+0x7c>)
 80016d0:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	08db      	lsrs	r3, r3, #3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	f003 f912 	bl	8004908 <HAL_GPIO_WritePin>
    }
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200000b0 	.word	0x200000b0

080016f0 <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i)
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	e00f      	b.n	800171c <seven_segment_deactivate_digits+0x2c>
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin, GPIO_PIN_SET);
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <seven_segment_deactivate_digits+0x3c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001704:	4a09      	ldr	r2, [pc, #36]	; (800172c <seven_segment_deactivate_digits+0x3c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	889b      	ldrh	r3, [r3, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	4619      	mov	r1, r3
 8001712:	f003 f8f9 	bl	8004908 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; ++i)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3301      	adds	r3, #1
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b03      	cmp	r3, #3
 8001720:	ddec      	ble.n	80016fc <seven_segment_deactivate_digits+0xc>
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200000b0 	.word	0x200000b0

08001730 <seven_segment_activate_digit>:

int last_time_on = 0;
void seven_segment_activate_digit(uint32_t d) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
    if (d < 4) {
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d80c      	bhi.n	8001758 <seven_segment_activate_digit+0x28>
    	HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <seven_segment_activate_digit+0x30>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001746:	4a06      	ldr	r2, [pc, #24]	; (8001760 <seven_segment_activate_digit+0x30>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4413      	add	r3, r2
 800174e:	889b      	ldrh	r3, [r3, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	4619      	mov	r1, r3
 8001754:	f003 f8d8 	bl	8004908 <HAL_GPIO_WritePin>
//		}
//		else if (d != state){
//			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
//		}
    }
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200000b0 	.word	0x200000b0

08001764 <seven_segment_set_num>:

void seven_segment_set_num(int num[4]) {
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i <= 3; ++i) {
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e00d      	b.n	800178e <seven_segment_set_num+0x2a>
		seven_segment.digits[i] = num[i];
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <seven_segment_set_num+0x40>)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3310      	adds	r3, #16
 8001784:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i <= 3; ++i) {
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d9ee      	bls.n	8001772 <seven_segment_set_num+0xe>
	}
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	200000b0 	.word	0x200000b0

080017a8 <seven_segment_refresh>:

void seven_segment_refresh(void) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
    static uint32_t state_tmp = 0;
    static uint32_t last_time_tmp = 0;
    if (HAL_GetTick() - last_time_tmp > 5) {
 80017ac:	f002 fd62 	bl	8004274 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <seven_segment_refresh+0x50>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d91b      	bls.n	80017f4 <seven_segment_refresh+0x4c>
        seven_segment_deactivate_digits();
 80017bc:	f7ff ff98 	bl	80016f0 <seven_segment_deactivate_digits>
        seven_segment_activate_digit(state_tmp);
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <seven_segment_refresh+0x54>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ffb3 	bl	8001730 <seven_segment_activate_digit>
        seven_segment_display_decimal(seven_segment.digits[state_tmp]);
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <seven_segment_refresh+0x54>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <seven_segment_refresh+0x58>)
 80017d0:	3310      	adds	r3, #16
 80017d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff4a 	bl	8001670 <seven_segment_display_decimal>
        state_tmp = (state_tmp + 1) % 4;
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <seven_segment_refresh+0x54>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <seven_segment_refresh+0x54>)
 80017e8:	6013      	str	r3, [r2, #0]
        last_time_tmp = HAL_GetTick();
 80017ea:	f002 fd43 	bl	8004274 <HAL_GetTick>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a01      	ldr	r2, [pc, #4]	; (80017f8 <seven_segment_refresh+0x50>)
 80017f2:	6013      	str	r3, [r2, #0]
    }
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000874 	.word	0x20000874
 80017fc:	20000878 	.word	0x20000878
 8001800:	200000b0 	.word	0x200000b0

08001804 <setNumber>:


void setNumber(int number){
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	int a = 0, b = 0, c = 0, d = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
	if (number <= 9999 && number >= 0){
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001822:	4293      	cmp	r3, r2
 8001824:	dc5b      	bgt.n	80018de <setNumber+0xda>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db58      	blt.n	80018de <setNumber+0xda>
		a = number % 10;
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <setNumber+0xe4>)
 8001830:	fb83 1302 	smull	r1, r3, r3, r2
 8001834:	1099      	asrs	r1, r3, #2
 8001836:	17d3      	asrs	r3, r2, #31
 8001838:	1ac9      	subs	r1, r1, r3
 800183a:	460b      	mov	r3, r1
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
		number /= 10;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a27      	ldr	r2, [pc, #156]	; (80018e8 <setNumber+0xe4>)
 800184a:	fb82 1203 	smull	r1, r2, r2, r3
 800184e:	1092      	asrs	r2, r2, #2
 8001850:	17db      	asrs	r3, r3, #31
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	607b      	str	r3, [r7, #4]
		b = number % 10;
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <setNumber+0xe4>)
 800185a:	fb83 1302 	smull	r1, r3, r3, r2
 800185e:	1099      	asrs	r1, r3, #2
 8001860:	17d3      	asrs	r3, r2, #31
 8001862:	1ac9      	subs	r1, r1, r3
 8001864:	460b      	mov	r3, r1
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	623b      	str	r3, [r7, #32]
		number /= 10;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <setNumber+0xe4>)
 8001874:	fb82 1203 	smull	r1, r2, r2, r3
 8001878:	1092      	asrs	r2, r2, #2
 800187a:	17db      	asrs	r3, r3, #31
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	607b      	str	r3, [r7, #4]
		c = number % 10;
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <setNumber+0xe4>)
 8001884:	fb83 1302 	smull	r1, r3, r3, r2
 8001888:	1099      	asrs	r1, r3, #2
 800188a:	17d3      	asrs	r3, r2, #31
 800188c:	1ac9      	subs	r1, r1, r3
 800188e:	460b      	mov	r3, r1
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	61fb      	str	r3, [r7, #28]
		number /= 10;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <setNumber+0xe4>)
 800189e:	fb82 1203 	smull	r1, r2, r2, r3
 80018a2:	1092      	asrs	r2, r2, #2
 80018a4:	17db      	asrs	r3, r3, #31
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	607b      	str	r3, [r7, #4]
		d = number % 10;
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <setNumber+0xe4>)
 80018ae:	fb83 1302 	smull	r1, r3, r3, r2
 80018b2:	1099      	asrs	r1, r3, #2
 80018b4:	17d3      	asrs	r3, r2, #31
 80018b6:	1ac9      	subs	r1, r1, r3
 80018b8:	460b      	mov	r3, r1
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	61bb      	str	r3, [r7, #24]
//		int numbers2[4]={d,c,b,a};
		int numbers2[4]={a,b,c,d};
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	617b      	str	r3, [r7, #20]
		seven_segment_set_num(numbers2);
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff43 	bl	8001764 <seven_segment_set_num>
	}

}
 80018de:	bf00      	nop
 80018e0:	3728      	adds	r7, #40	; 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	66666667 	.word	0x66666667

080018ec <programInit>:
};

struct bullet bul[10];


void programInit() {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0a0      	sub	sp, #128	; 0x80
 80018f0:	af04      	add	r7, sp, #16
    Change_Melody(super_mario_bros, ARRAY_LENGTH(super_mario_bros));
 80018f2:	2141      	movs	r1, #65	; 0x41
 80018f4:	4853      	ldr	r0, [pc, #332]	; (8001a44 <programInit+0x158>)
 80018f6:	f002 fa75 	bl	8003de4 <Change_Melody>

	char data[100];
    int n = sprintf(data, "test\n");
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4952      	ldr	r1, [pc, #328]	; (8001a48 <programInit+0x15c>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f007 ff8a 	bl	8009818 <siprintf>
 8001904:	66b8      	str	r0, [r7, #104]	; 0x68
	HAL_UART_Transmit(&huart3, data, n, 1000);
 8001906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001908:	b29a      	uxth	r2, r3
 800190a:	1d39      	adds	r1, r7, #4
 800190c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001910:	484e      	ldr	r0, [pc, #312]	; (8001a4c <programInit+0x160>)
 8001912:	f006 fc71 	bl	80081f8 <HAL_UART_Transmit>
	uart_rx_enable_it();
 8001916:	f001 fd9d 	bl	8003454 <uart_rx_enable_it>


	LiquidCrystal(GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_7);
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	9303      	str	r3, [sp, #12]
 800191e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001922:	9302      	str	r3, [sp, #8]
 8001924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	2308      	movs	r3, #8
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2304      	movs	r3, #4
 8001930:	2202      	movs	r2, #2
 8001932:	2101      	movs	r1, #1
 8001934:	4846      	ldr	r0, [pc, #280]	; (8001a50 <programInit+0x164>)
 8001936:	f7fe fca3 	bl	8000280 <LiquidCrystal>
	begin(20, 4);
 800193a:	2104      	movs	r1, #4
 800193c:	2014      	movs	r0, #20
 800193e:	f7fe fd37 	bl	80003b0 <begin>
//    setNumber(1234);



	set_start_time(20, 20, 20);
 8001942:	2214      	movs	r2, #20
 8001944:	2114      	movs	r1, #20
 8001946:	2014      	movs	r0, #20
 8001948:	f7ff fc7a 	bl	8001240 <set_start_time>
	set_start_day(2024,2,3);
 800194c:	2203      	movs	r2, #3
 800194e:	2102      	movs	r1, #2
 8001950:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
 8001954:	f7ff fc8e 	bl	8001274 <set_start_day>
	createChar(num_tank_right, tank_right);
 8001958:	4b3e      	ldr	r3, [pc, #248]	; (8001a54 <programInit+0x168>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	493e      	ldr	r1, [pc, #248]	; (8001a58 <programInit+0x16c>)
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe ff67 	bl	8000832 <createChar>
	createChar(num_tank_up, tank_up);
 8001964:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <programInit+0x170>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	493d      	ldr	r1, [pc, #244]	; (8001a60 <programInit+0x174>)
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe ff61 	bl	8000832 <createChar>
	createChar(num_tank_down, tank_down);
 8001970:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <programInit+0x178>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	493c      	ldr	r1, [pc, #240]	; (8001a68 <programInit+0x17c>)
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe ff5b 	bl	8000832 <createChar>
	createChar(num_tank_left, tank_left);
 800197c:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <programInit+0x180>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	493b      	ldr	r1, [pc, #236]	; (8001a70 <programInit+0x184>)
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe ff55 	bl	8000832 <createChar>
	createChar(num_extra_bullet, extra_bullet);
 8001988:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <programInit+0x188>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	493a      	ldr	r1, [pc, #232]	; (8001a78 <programInit+0x18c>)
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe ff4f 	bl	8000832 <createChar>
	createChar(num_chance, chance);
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <programInit+0x190>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4939      	ldr	r1, [pc, #228]	; (8001a80 <programInit+0x194>)
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe ff49 	bl	8000832 <createChar>
	createChar(num_health, health);
 80019a0:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <programInit+0x198>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4938      	ldr	r1, [pc, #224]	; (8001a88 <programInit+0x19c>)
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe ff43 	bl	8000832 <createChar>
	createChar(num_arrow, arrow);
 80019ac:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <programInit+0x1a0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4937      	ldr	r1, [pc, #220]	; (8001a90 <programInit+0x1a4>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe ff3d 	bl	8000832 <createChar>
//	starter();
	pageflag=0;
 80019b8:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <programInit+0x1a8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 80019be:	2300      	movs	r3, #0
 80019c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019c2:	e035      	b.n	8001a30 <programInit+0x144>
		bul[i].active=0;
 80019c4:	4934      	ldr	r1, [pc, #208]	; (8001a98 <programInit+0x1ac>)
 80019c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3310      	adds	r3, #16
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
		bul[i].direction=1;
 80019d8:	492f      	ldr	r1, [pc, #188]	; (8001a98 <programInit+0x1ac>)
 80019da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	330c      	adds	r3, #12
 80019e8:	2201      	movs	r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
		bul[i].player_id=1;
 80019ec:	492a      	ldr	r1, [pc, #168]	; (8001a98 <programInit+0x1ac>)
 80019ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
		bul[i].position_x=-1;
 80019fe:	4926      	ldr	r1, [pc, #152]	; (8001a98 <programInit+0x1ac>)
 8001a00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a12:	601a      	str	r2, [r3, #0]
		bul[i].position_y=-1;
 8001a14:	4920      	ldr	r1, [pc, #128]	; (8001a98 <programInit+0x1ac>)
 8001a16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	3308      	adds	r3, #8
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 8001a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a32:	2b09      	cmp	r3, #9
 8001a34:	ddc6      	ble.n	80019c4 <programInit+0xd8>
	}
    PWM_Start();
 8001a36:	f002 f907 	bl	8003c48 <PWM_Start>

}
 8001a3a:	bf00      	nop
 8001a3c:	3770      	adds	r7, #112	; 0x70
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	0800b750 	.word	0x0800b750
 8001a48:	0800b57c 	.word	0x0800b57c
 8001a4c:	20000378 	.word	0x20000378
 8001a50:	48000800 	.word	0x48000800
 8001a54:	20000090 	.word	0x20000090
 8001a58:	20000028 	.word	0x20000028
 8001a5c:	2000008c 	.word	0x2000008c
 8001a60:	20000018 	.word	0x20000018
 8001a64:	20000094 	.word	0x20000094
 8001a68:	20000038 	.word	0x20000038
 8001a6c:	20000088 	.word	0x20000088
 8001a70:	20000020 	.word	0x20000020
 8001a74:	20000098 	.word	0x20000098
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	2000009c 	.word	0x2000009c
 8001a80:	20000010 	.word	0x20000010
 8001a84:	200000a0 	.word	0x200000a0
 8001a88:	20000030 	.word	0x20000030
 8001a8c:	200000a4 	.word	0x200000a4
 8001a90:	20000040 	.word	0x20000040
 8001a94:	200006ec 	.word	0x200006ec
 8001a98:	20000768 	.word	0x20000768

08001a9c <starter>:

void starter(){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b09a      	sub	sp, #104	; 0x68
 8001aa0:	af00      	add	r7, sp, #0

	setCursor(0, 2);
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7fe fe51 	bl	800074c <setCursor>
	write(num_tank_right, tank_right);
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <starter+0xa8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4926      	ldr	r1, [pc, #152]	; (8001b48 <starter+0xac>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fef5 	bl	80008a0 <write>

	setCursor(1, 1);
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f7fe fe47 	bl	800074c <setCursor>
	print("#");
 8001abe:	4823      	ldr	r0, [pc, #140]	; (8001b4c <starter+0xb0>)
 8001ac0:	f7fe fe8c 	bl	80007dc <print>

	setCursor(1, 2);
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f7fe fe40 	bl	800074c <setCursor>
	print("#");
 8001acc:	481f      	ldr	r0, [pc, #124]	; (8001b4c <starter+0xb0>)
 8001ace:	f7fe fe85 	bl	80007dc <print>

	char data[100];
	int n = sprintf(data, "TANK BATTLE");
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	491e      	ldr	r1, [pc, #120]	; (8001b50 <starter+0xb4>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f007 fe9e 	bl	8009818 <siprintf>
 8001adc:	6678      	str	r0, [r7, #100]	; 0x64
	setCursor(4, 1);
 8001ade:	2101      	movs	r1, #1
 8001ae0:	2004      	movs	r0, #4
 8001ae2:	f7fe fe33 	bl	800074c <setCursor>
	print(data);
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fe77 	bl	80007dc <print>
	setCursor(4, 2);
 8001aee:	2102      	movs	r1, #2
 8001af0:	2004      	movs	r0, #4
 8001af2:	f7fe fe2b 	bl	800074c <setCursor>
	n = sprintf(data, "===========");
 8001af6:	463b      	mov	r3, r7
 8001af8:	4916      	ldr	r1, [pc, #88]	; (8001b54 <starter+0xb8>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f007 fe8c 	bl	8009818 <siprintf>
 8001b00:	6678      	str	r0, [r7, #100]	; 0x64
	print(data);
 8001b02:	463b      	mov	r3, r7
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fe69 	bl	80007dc <print>

	setCursor(18, 1);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	2012      	movs	r0, #18
 8001b0e:	f7fe fe1d 	bl	800074c <setCursor>
	print("#");
 8001b12:	480e      	ldr	r0, [pc, #56]	; (8001b4c <starter+0xb0>)
 8001b14:	f7fe fe62 	bl	80007dc <print>
	setCursor(18, 2);
 8001b18:	2102      	movs	r1, #2
 8001b1a:	2012      	movs	r0, #18
 8001b1c:	f7fe fe16 	bl	800074c <setCursor>
	print("#");
 8001b20:	480a      	ldr	r0, [pc, #40]	; (8001b4c <starter+0xb0>)
 8001b22:	f7fe fe5b 	bl	80007dc <print>

	setCursor(19, 1);
 8001b26:	2101      	movs	r1, #1
 8001b28:	2013      	movs	r0, #19
 8001b2a:	f7fe fe0f 	bl	800074c <setCursor>
	write(num_tank_left, tank_left);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <starter+0xbc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	490a      	ldr	r1, [pc, #40]	; (8001b5c <starter+0xc0>)
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe feb3 	bl	80008a0 <write>

}
 8001b3a:	bf00      	nop
 8001b3c:	3768      	adds	r7, #104	; 0x68
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000090 	.word	0x20000090
 8001b48:	20000028 	.word	0x20000028
 8001b4c:	0800b584 	.word	0x0800b584
 8001b50:	0800b588 	.word	0x0800b588
 8001b54:	0800b594 	.word	0x0800b594
 8001b58:	20000088 	.word	0x20000088
 8001b5c:	20000020 	.word	0x20000020

08001b60 <init_board>:

void init_board(){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
	//i == soton, j ==> radif

    for (int i = 0; i < 20; i++) {
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6a:	e017      	b.n	8001b9c <init_board+0x3c>
        for (int j = 0; j < 4; j++) {
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
 8001b70:	e00e      	b.n	8001b90 <init_board+0x30>
        	setCursor(i, j);
 8001b72:	6a39      	ldr	r1, [r7, #32]
 8001b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b76:	f7fe fde9 	bl	800074c <setCursor>
        	lcd[i][j] = 0;
 8001b7a:	4a6f      	ldr	r2, [pc, #444]	; (8001d38 <init_board+0x1d8>)
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	441a      	add	r2, r3
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	4413      	add	r3, r2
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	623b      	str	r3, [r7, #32]
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	dded      	ble.n	8001b72 <init_board+0x12>
    for (int i = 0; i < 20; i++) {
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	3301      	adds	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	2b13      	cmp	r3, #19
 8001ba0:	dde4      	ble.n	8001b6c <init_board+0xc>
//    		print(" ");

        }
    }

	lcd[1][1] = num_wall;
 8001ba2:	4b66      	ldr	r3, [pc, #408]	; (8001d3c <init_board+0x1dc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b63      	ldr	r3, [pc, #396]	; (8001d38 <init_board+0x1d8>)
 8001baa:	715a      	strb	r2, [r3, #5]
	lcd[1][2] = num_wall;
 8001bac:	4b63      	ldr	r3, [pc, #396]	; (8001d3c <init_board+0x1dc>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b61      	ldr	r3, [pc, #388]	; (8001d38 <init_board+0x1d8>)
 8001bb4:	719a      	strb	r2, [r3, #6]
	lcd[18][1] = num_wall;
 8001bb6:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <init_board+0x1dc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b5e      	ldr	r3, [pc, #376]	; (8001d38 <init_board+0x1d8>)
 8001bbe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	lcd[18][2] = num_wall;
 8001bc2:	4b5e      	ldr	r3, [pc, #376]	; (8001d3c <init_board+0x1dc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	4b5b      	ldr	r3, [pc, #364]	; (8001d38 <init_board+0x1d8>)
 8001bca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	lcd[0][1] = num_tank_right;
 8001bce:	4b5c      	ldr	r3, [pc, #368]	; (8001d40 <init_board+0x1e0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b58      	ldr	r3, [pc, #352]	; (8001d38 <init_board+0x1d8>)
 8001bd6:	705a      	strb	r2, [r3, #1]
	lcd[19][2] = num_tank_left;
 8001bd8:	4b5a      	ldr	r3, [pc, #360]	; (8001d44 <init_board+0x1e4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <init_board+0x1d8>)
 8001be0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	int element_counter = 2;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 8001be8:	e030      	b.n	8001c4c <init_board+0xec>
		int col = rand() % 24;
 8001bea:	f007 fdd7 	bl	800979c <rand>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	4b55      	ldr	r3, [pc, #340]	; (8001d48 <init_board+0x1e8>)
 8001bf2:	fb83 1302 	smull	r1, r3, r3, r2
 8001bf6:	1099      	asrs	r1, r3, #2
 8001bf8:	17d3      	asrs	r3, r2, #31
 8001bfa:	1ac9      	subs	r1, r1, r3
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	440b      	add	r3, r1
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	60bb      	str	r3, [r7, #8]
		int row = rand() % 4;
 8001c08:	f007 fdc8 	bl	800979c <rand>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	425a      	negs	r2, r3
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	f002 0203 	and.w	r2, r2, #3
 8001c18:	bf58      	it	pl
 8001c1a:	4253      	negpl	r3, r2
 8001c1c:	607b      	str	r3, [r7, #4]
		if(lcd[col][row] == 0){
 8001c1e:	4a46      	ldr	r2, [pc, #280]	; (8001d38 <init_board+0x1d8>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	441a      	add	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10d      	bne.n	8001c4c <init_board+0xec>
			lcd[col][row] = num_extra_bullet;
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <init_board+0x1ec>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	b2d9      	uxtb	r1, r3
 8001c36:	4a40      	ldr	r2, [pc, #256]	; (8001d38 <init_board+0x1d8>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	441a      	add	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	460a      	mov	r2, r1
 8001c44:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	dccb      	bgt.n	8001bea <init_board+0x8a>
		}
	}

	element_counter = 2;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 8001c56:	e030      	b.n	8001cba <init_board+0x15a>
		int col = rand() % 24;
 8001c58:	f007 fda0 	bl	800979c <rand>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <init_board+0x1e8>)
 8001c60:	fb83 1302 	smull	r1, r3, r3, r2
 8001c64:	1099      	asrs	r1, r3, #2
 8001c66:	17d3      	asrs	r3, r2, #31
 8001c68:	1ac9      	subs	r1, r1, r3
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	440b      	add	r3, r1
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	613b      	str	r3, [r7, #16]
		int row = rand() % 4;
 8001c76:	f007 fd91 	bl	800979c <rand>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	425a      	negs	r2, r3
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	f002 0203 	and.w	r2, r2, #3
 8001c86:	bf58      	it	pl
 8001c88:	4253      	negpl	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
		if(lcd[col][row] == 0){
 8001c8c:	4a2a      	ldr	r2, [pc, #168]	; (8001d38 <init_board+0x1d8>)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	441a      	add	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10d      	bne.n	8001cba <init_board+0x15a>
			lcd[col][row] = num_health;
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <init_board+0x1f0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b2d9      	uxtb	r1, r3
 8001ca4:	4a24      	ldr	r2, [pc, #144]	; (8001d38 <init_board+0x1d8>)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	441a      	add	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	dccb      	bgt.n	8001c58 <init_board+0xf8>
		}
	}

	element_counter = 2;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 8001cc4:	e030      	b.n	8001d28 <init_board+0x1c8>
		int col = rand() % 24;
 8001cc6:	f007 fd69 	bl	800979c <rand>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <init_board+0x1e8>)
 8001cce:	fb83 1302 	smull	r1, r3, r3, r2
 8001cd2:	1099      	asrs	r1, r3, #2
 8001cd4:	17d3      	asrs	r3, r2, #31
 8001cd6:	1ac9      	subs	r1, r1, r3
 8001cd8:	460b      	mov	r3, r1
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	440b      	add	r3, r1
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	61bb      	str	r3, [r7, #24]
		int row = rand() % 4;
 8001ce4:	f007 fd5a 	bl	800979c <rand>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	425a      	negs	r2, r3
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	f002 0203 	and.w	r2, r2, #3
 8001cf4:	bf58      	it	pl
 8001cf6:	4253      	negpl	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
		if(lcd[col][row] == 0){
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <init_board+0x1d8>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	441a      	add	r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	4413      	add	r3, r2
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10d      	bne.n	8001d28 <init_board+0x1c8>
			lcd[col][row] = num_obstacle;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <init_board+0x1f4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	b2d9      	uxtb	r1, r3
 8001d12:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <init_board+0x1d8>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	441a      	add	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	460a      	mov	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	dccb      	bgt.n	8001cc6 <init_board+0x166>
		}
	}

}
 8001d2e:	bf00      	nop
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000718 	.word	0x20000718
 8001d3c:	200000a8 	.word	0x200000a8
 8001d40:	20000090 	.word	0x20000090
 8001d44:	20000088 	.word	0x20000088
 8001d48:	2aaaaaab 	.word	0x2aaaaaab
 8001d4c:	20000098 	.word	0x20000098
 8001d50:	200000a0 	.word	0x200000a0
 8001d54:	200000ac 	.word	0x200000ac

08001d58 <update_lcd>:
// D12 -> C9
// D13 -> C8
// D14 -> C7


void update_lcd(){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
	if (game_started==1){
 8001d5e:	4ba3      	ldr	r3, [pc, #652]	; (8001fec <update_lcd+0x294>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d109      	bne.n	8001d7a <update_lcd+0x22>
		clear();
 8001d66:	f7fe fce7 	bl	8000738 <clear>
		init_board();
 8001d6a:	f7ff fef9 	bl	8001b60 <init_board>
		change_page = 0;
 8001d6e:	4ba0      	ldr	r3, [pc, #640]	; (8001ff0 <update_lcd+0x298>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
		game_started = 0;
 8001d74:	4b9d      	ldr	r3, [pc, #628]	; (8001fec <update_lcd+0x294>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
	}

	if(pageflag==0){
 8001d7a:	4b9e      	ldr	r3, [pc, #632]	; (8001ff4 <update_lcd+0x29c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <update_lcd+0x2e>
		starter();
 8001d82:	f7ff fe8b 	bl	8001a9c <starter>
	}


	if(pageflag==2){
 8001d86:	4b9b      	ldr	r3, [pc, #620]	; (8001ff4 <update_lcd+0x29c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	f040 8101 	bne.w	8001f92 <update_lcd+0x23a>
		if(HAL_GetTick() - for30timer > 30000){
 8001d90:	f002 fa70 	bl	8004274 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4b98      	ldr	r3, [pc, #608]	; (8001ff8 <update_lcd+0x2a0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001da0:	4293      	cmp	r3, r2
 8001da2:	f240 808f 	bls.w	8001ec4 <update_lcd+0x16c>
			int col = rand() % 24;
 8001da6:	f007 fcf9 	bl	800979c <rand>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b93      	ldr	r3, [pc, #588]	; (8001ffc <update_lcd+0x2a4>)
 8001dae:	fb83 1302 	smull	r1, r3, r3, r2
 8001db2:	1099      	asrs	r1, r3, #2
 8001db4:	17d3      	asrs	r3, r2, #31
 8001db6:	1ac9      	subs	r1, r1, r3
 8001db8:	460b      	mov	r3, r1
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	440b      	add	r3, r1
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	607b      	str	r3, [r7, #4]
			int row = rand() % 4;
 8001dc4:	f007 fcea 	bl	800979c <rand>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	425a      	negs	r2, r3
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	f002 0203 	and.w	r2, r2, #3
 8001dd4:	bf58      	it	pl
 8001dd6:	4253      	negpl	r3, r2
 8001dd8:	603b      	str	r3, [r7, #0]
			if(lcd[col][row] == 0){
 8001dda:	4a89      	ldr	r2, [pc, #548]	; (8002000 <update_lcd+0x2a8>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	441a      	add	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10a      	bne.n	8001e02 <update_lcd+0xaa>
				lcd[col][row] = num_extra_bullet;
 8001dec:	4b85      	ldr	r3, [pc, #532]	; (8002004 <update_lcd+0x2ac>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	b2d9      	uxtb	r1, r3
 8001df2:	4a83      	ldr	r2, [pc, #524]	; (8002000 <update_lcd+0x2a8>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	441a      	add	r2, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	460a      	mov	r2, r1
 8001e00:	701a      	strb	r2, [r3, #0]
			}
			 col = rand() % 24;
 8001e02:	f007 fccb 	bl	800979c <rand>
 8001e06:	4602      	mov	r2, r0
 8001e08:	4b7c      	ldr	r3, [pc, #496]	; (8001ffc <update_lcd+0x2a4>)
 8001e0a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e0e:	1099      	asrs	r1, r3, #2
 8001e10:	17d3      	asrs	r3, r2, #31
 8001e12:	1ac9      	subs	r1, r1, r3
 8001e14:	460b      	mov	r3, r1
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	440b      	add	r3, r1
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	607b      	str	r3, [r7, #4]
			 row = rand() % 4;
 8001e20:	f007 fcbc 	bl	800979c <rand>
 8001e24:	4603      	mov	r3, r0
 8001e26:	425a      	negs	r2, r3
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	f002 0203 	and.w	r2, r2, #3
 8001e30:	bf58      	it	pl
 8001e32:	4253      	negpl	r3, r2
 8001e34:	603b      	str	r3, [r7, #0]
			if(lcd[col][row] == 0){
 8001e36:	4a72      	ldr	r2, [pc, #456]	; (8002000 <update_lcd+0x2a8>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	441a      	add	r2, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10a      	bne.n	8001e5e <update_lcd+0x106>
				lcd[col][row] = num_chance;
 8001e48:	4b6f      	ldr	r3, [pc, #444]	; (8002008 <update_lcd+0x2b0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	b2d9      	uxtb	r1, r3
 8001e4e:	4a6c      	ldr	r2, [pc, #432]	; (8002000 <update_lcd+0x2a8>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	441a      	add	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	460a      	mov	r2, r1
 8001e5c:	701a      	strb	r2, [r3, #0]
			}
			 col = rand() % 24;
 8001e5e:	f007 fc9d 	bl	800979c <rand>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b65      	ldr	r3, [pc, #404]	; (8001ffc <update_lcd+0x2a4>)
 8001e66:	fb83 1302 	smull	r1, r3, r3, r2
 8001e6a:	1099      	asrs	r1, r3, #2
 8001e6c:	17d3      	asrs	r3, r2, #31
 8001e6e:	1ac9      	subs	r1, r1, r3
 8001e70:	460b      	mov	r3, r1
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	440b      	add	r3, r1
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	607b      	str	r3, [r7, #4]
			 row = rand() % 4;
 8001e7c:	f007 fc8e 	bl	800979c <rand>
 8001e80:	4603      	mov	r3, r0
 8001e82:	425a      	negs	r2, r3
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	f002 0203 	and.w	r2, r2, #3
 8001e8c:	bf58      	it	pl
 8001e8e:	4253      	negpl	r3, r2
 8001e90:	603b      	str	r3, [r7, #0]
			if(lcd[col][row] == 0){
 8001e92:	4a5b      	ldr	r2, [pc, #364]	; (8002000 <update_lcd+0x2a8>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	441a      	add	r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <update_lcd+0x162>
				lcd[col][row] = num_health;
 8001ea4:	4b59      	ldr	r3, [pc, #356]	; (800200c <update_lcd+0x2b4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	b2d9      	uxtb	r1, r3
 8001eaa:	4a55      	ldr	r2, [pc, #340]	; (8002000 <update_lcd+0x2a8>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	460a      	mov	r2, r1
 8001eb8:	701a      	strb	r2, [r3, #0]
			}
			for30timer = HAL_GetTick();
 8001eba:	f002 f9db 	bl	8004274 <HAL_GetTick>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a4d      	ldr	r2, [pc, #308]	; (8001ff8 <update_lcd+0x2a0>)
 8001ec2:	6013      	str	r3, [r2, #0]

		}
		for (int i = 0; i < 20; i++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e05f      	b.n	8001f8a <update_lcd+0x232>
			for (int j = 0; j < 4; j++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	e056      	b.n	8001f7e <update_lcd+0x226>
				setCursor(i, j);
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f7fe fc3a 	bl	800074c <setCursor>
				if(lcd[i][j] != 9 && lcd[i][j] != 10 && lcd[i][j] != 0)
 8001ed8:	4a49      	ldr	r2, [pc, #292]	; (8002000 <update_lcd+0x2a8>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	441a      	add	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b09      	cmp	r3, #9
 8001ee8:	d01c      	beq.n	8001f24 <update_lcd+0x1cc>
 8001eea:	4a45      	ldr	r2, [pc, #276]	; (8002000 <update_lcd+0x2a8>)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	441a      	add	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b0a      	cmp	r3, #10
 8001efa:	d013      	beq.n	8001f24 <update_lcd+0x1cc>
 8001efc:	4a40      	ldr	r2, [pc, #256]	; (8002000 <update_lcd+0x2a8>)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	441a      	add	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4413      	add	r3, r2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00a      	beq.n	8001f24 <update_lcd+0x1cc>
					write(lcd[i][j]);
 8001f0e:	4a3c      	ldr	r2, [pc, #240]	; (8002000 <update_lcd+0x2a8>)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	441a      	add	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4413      	add	r3, r2
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fcbf 	bl	80008a0 <write>
 8001f22:	e029      	b.n	8001f78 <update_lcd+0x220>
				else if (lcd[i][j] == 9)
 8001f24:	4a36      	ldr	r2, [pc, #216]	; (8002000 <update_lcd+0x2a8>)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	441a      	add	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4413      	add	r3, r2
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b09      	cmp	r3, #9
 8001f34:	d103      	bne.n	8001f3e <update_lcd+0x1e6>
					print("#");
 8001f36:	4836      	ldr	r0, [pc, #216]	; (8002010 <update_lcd+0x2b8>)
 8001f38:	f7fe fc50 	bl	80007dc <print>
 8001f3c:	e01c      	b.n	8001f78 <update_lcd+0x220>
				else if (lcd[i][j] == 10)
 8001f3e:	4a30      	ldr	r2, [pc, #192]	; (8002000 <update_lcd+0x2a8>)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	441a      	add	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4413      	add	r3, r2
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b0a      	cmp	r3, #10
 8001f4e:	d103      	bne.n	8001f58 <update_lcd+0x200>
					print("I");
 8001f50:	4830      	ldr	r0, [pc, #192]	; (8002014 <update_lcd+0x2bc>)
 8001f52:	f7fe fc43 	bl	80007dc <print>
 8001f56:	e00f      	b.n	8001f78 <update_lcd+0x220>
				else if (lcd[i][j] == 0)
 8001f58:	4a29      	ldr	r2, [pc, #164]	; (8002000 <update_lcd+0x2a8>)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	441a      	add	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4413      	add	r3, r2
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <update_lcd+0x21a>
					print(" ");
 8001f6a:	482b      	ldr	r0, [pc, #172]	; (8002018 <update_lcd+0x2c0>)
 8001f6c:	f7fe fc36 	bl	80007dc <print>
 8001f70:	e002      	b.n	8001f78 <update_lcd+0x220>
				else
					print("U");
 8001f72:	482a      	ldr	r0, [pc, #168]	; (800201c <update_lcd+0x2c4>)
 8001f74:	f7fe fc32 	bl	80007dc <print>
			for (int j = 0; j < 4; j++) {
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	dda5      	ble.n	8001ed0 <update_lcd+0x178>
		for (int i = 0; i < 20; i++) {
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	3301      	adds	r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b13      	cmp	r3, #19
 8001f8e:	dd9c      	ble.n	8001eca <update_lcd+0x172>
	}
	else if (pageflag==4){
		about_page();
	}

}
 8001f90:	e027      	b.n	8001fe2 <update_lcd+0x28a>
	else if (change_page==1){
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <update_lcd+0x298>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d105      	bne.n	8001fa6 <update_lcd+0x24e>
		clear();
 8001f9a:	f7fe fbcd 	bl	8000738 <clear>
		change_page = 0;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <update_lcd+0x298>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	e01d      	b.n	8001fe2 <update_lcd+0x28a>
	else if (change_page==1){
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <update_lcd+0x298>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d105      	bne.n	8001fba <update_lcd+0x262>
		clear();
 8001fae:	f7fe fbc3 	bl	8000738 <clear>
		change_page = 0;
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <update_lcd+0x298>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
}
 8001fb8:	e013      	b.n	8001fe2 <update_lcd+0x28a>
	else if (pageflag==1){
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <update_lcd+0x29c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d102      	bne.n	8001fc8 <update_lcd+0x270>
		menu();
 8001fc2:	f000 f8e9 	bl	8002198 <menu>
}
 8001fc6:	e00c      	b.n	8001fe2 <update_lcd+0x28a>
	else if (pageflag==3){
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <update_lcd+0x29c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d102      	bne.n	8001fd6 <update_lcd+0x27e>
		setting_page();
 8001fd0:	f000 f882 	bl	80020d8 <setting_page>
}
 8001fd4:	e005      	b.n	8001fe2 <update_lcd+0x28a>
	else if (pageflag==4){
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <update_lcd+0x29c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d101      	bne.n	8001fe2 <update_lcd+0x28a>
		about_page();
 8001fde:	f000 f81f 	bl	8002020 <about_page>
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200006f0 	.word	0x200006f0
 8001ff0:	200006fc 	.word	0x200006fc
 8001ff4:	200006ec 	.word	0x200006ec
 8001ff8:	200006f4 	.word	0x200006f4
 8001ffc:	2aaaaaab 	.word	0x2aaaaaab
 8002000:	20000718 	.word	0x20000718
 8002004:	20000098 	.word	0x20000098
 8002008:	2000009c 	.word	0x2000009c
 800200c:	200000a0 	.word	0x200000a0
 8002010:	0800b584 	.word	0x0800b584
 8002014:	0800b5a0 	.word	0x0800b5a0
 8002018:	0800b5a4 	.word	0x0800b5a4
 800201c:	0800b5a8 	.word	0x0800b5a8

08002020 <about_page>:
void about_page(){
 8002020:	b580      	push	{r7, lr}
 8002022:	b0b4      	sub	sp, #208	; 0xd0
 8002024:	af02      	add	r7, sp, #8
	setCursor(6, 1);
 8002026:	2101      	movs	r1, #1
 8002028:	2006      	movs	r0, #6
 800202a:	f7fe fb8f 	bl	800074c <setCursor>
	print("POURIA");
 800202e:	4822      	ldr	r0, [pc, #136]	; (80020b8 <about_page+0x98>)
 8002030:	f7fe fbd4 	bl	80007dc <print>
	setCursor(8, 2);
 8002034:	2102      	movs	r1, #2
 8002036:	2008      	movs	r0, #8
 8002038:	f7fe fb88 	bl	800074c <setCursor>
	print("ALI");
 800203c:	481f      	ldr	r0, [pc, #124]	; (80020bc <about_page+0x9c>)
 800203e:	f7fe fbcd 	bl	80007dc <print>
	char timeStr[100];
	char dateStr[100];

	setCursor(5, 3);
 8002042:	2103      	movs	r1, #3
 8002044:	2005      	movs	r0, #5
 8002046:	f7fe fb81 	bl	800074c <setCursor>
	print("          ");
 800204a:	481d      	ldr	r0, [pc, #116]	; (80020c0 <about_page+0xa0>)
 800204c:	f7fe fbc6 	bl	80007dc <print>
	HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8002050:	2200      	movs	r2, #0
 8002052:	491c      	ldr	r1, [pc, #112]	; (80020c4 <about_page+0xa4>)
 8002054:	481c      	ldr	r0, [pc, #112]	; (80020c8 <about_page+0xa8>)
 8002056:	f004 fbda 	bl	800680e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &mytime, RTC_FORMAT_BIN);
 800205a:	2200      	movs	r2, #0
 800205c:	4919      	ldr	r1, [pc, #100]	; (80020c4 <about_page+0xa4>)
 800205e:	481a      	ldr	r0, [pc, #104]	; (80020c8 <about_page+0xa8>)
 8002060:	f004 fcb7 	bl	80069d2 <HAL_RTC_GetDate>

	sprintf(timeStr, "%02d:%02d:%02d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <about_page+0xa4>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <about_page+0xa4>)
 800206c:	785b      	ldrb	r3, [r3, #1]
 800206e:	4619      	mov	r1, r3
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <about_page+0xa4>)
 8002072:	789b      	ldrb	r3, [r3, #2]
 8002074:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	460b      	mov	r3, r1
 800207c:	4913      	ldr	r1, [pc, #76]	; (80020cc <about_page+0xac>)
 800207e:	f007 fbcb 	bl	8009818 <siprintf>
	sprintf(dateStr, "%04d:%02d:%02d", mydate.Year, mydate.Month, mydate.Date);
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <about_page+0xb0>)
 8002084:	78db      	ldrb	r3, [r3, #3]
 8002086:	461a      	mov	r2, r3
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <about_page+0xb0>)
 800208a:	785b      	ldrb	r3, [r3, #1]
 800208c:	4619      	mov	r1, r3
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <about_page+0xb0>)
 8002090:	789b      	ldrb	r3, [r3, #2]
 8002092:	4638      	mov	r0, r7
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	460b      	mov	r3, r1
 8002098:	490e      	ldr	r1, [pc, #56]	; (80020d4 <about_page+0xb4>)
 800209a:	f007 fbbd 	bl	8009818 <siprintf>

	setCursor(5, 3);
 800209e:	2103      	movs	r1, #3
 80020a0:	2005      	movs	r0, #5
 80020a2:	f7fe fb53 	bl	800074c <setCursor>
	print(timeStr);
 80020a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fb96 	bl	80007dc <print>

}
 80020b0:	bf00      	nop
 80020b2:	37c8      	adds	r7, #200	; 0xc8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	0800b5ac 	.word	0x0800b5ac
 80020bc:	0800b5b4 	.word	0x0800b5b4
 80020c0:	0800b5b8 	.word	0x0800b5b8
 80020c4:	20000700 	.word	0x20000700
 80020c8:	20000210 	.word	0x20000210
 80020cc:	0800b5c4 	.word	0x0800b5c4
 80020d0:	20000714 	.word	0x20000714
 80020d4:	0800b5d4 	.word	0x0800b5d4

080020d8 <setting_page>:

void setting_page(){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b0aa      	sub	sp, #168	; 0xa8
 80020dc:	af00      	add	r7, sp, #0


	char data[40];
	int n = sprintf(data, "Health: %d", player2.health);
 80020de:	4b28      	ldr	r3, [pc, #160]	; (8002180 <setting_page+0xa8>)
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020e6:	4927      	ldr	r1, [pc, #156]	; (8002184 <setting_page+0xac>)
 80020e8:	4618      	mov	r0, r3
 80020ea:	f007 fb95 	bl	8009818 <siprintf>
 80020ee:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

	setCursor(0, 0);
 80020f2:	2100      	movs	r1, #0
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7fe fb29 	bl	800074c <setCursor>
	print(data);
 80020fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fb6c 	bl	80007dc <print>
	setCursor(0, 1);
 8002104:	2101      	movs	r1, #1
 8002106:	2000      	movs	r0, #0
 8002108:	f7fe fb20 	bl	800074c <setCursor>
	char data1[40];
	n = sprintf(data1, "Arrow: %d", player2.arrow);
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <setting_page+0xa8>)
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002114:	491c      	ldr	r1, [pc, #112]	; (8002188 <setting_page+0xb0>)
 8002116:	4618      	mov	r0, r3
 8002118:	f007 fb7e 	bl	8009818 <siprintf>
 800211c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	print(data1);
 8002120:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fb59 	bl	80007dc <print>
	setCursor(0, 2);
 800212a:	2102      	movs	r1, #2
 800212c:	2000      	movs	r0, #0
 800212e:	f7fe fb0d 	bl	800074c <setCursor>
	char data2[40];
	n = sprintf(data2, "Player1: %c", player1.player_name);
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <setting_page+0xb4>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800213c:	4914      	ldr	r1, [pc, #80]	; (8002190 <setting_page+0xb8>)
 800213e:	4618      	mov	r0, r3
 8002140:	f007 fb6a 	bl	8009818 <siprintf>
 8002144:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

	print(data2);
 8002148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fb45 	bl	80007dc <print>

	setCursor(0, 3);
 8002152:	2103      	movs	r1, #3
 8002154:	2000      	movs	r0, #0
 8002156:	f7fe faf9 	bl	800074c <setCursor>
	char data3[40];
	n = sprintf(data3, "Player2: %c", player2.player_name);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <setting_page+0xa8>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	490c      	ldr	r1, [pc, #48]	; (8002194 <setting_page+0xbc>)
 8002164:	4618      	mov	r0, r3
 8002166:	f007 fb57 	bl	8009818 <siprintf>
 800216a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	print(data3);
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fb33 	bl	80007dc <print>

}
 8002176:	bf00      	nop
 8002178:	37a8      	adds	r7, #168	; 0xa8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000068 	.word	0x20000068
 8002184:	0800b5e4 	.word	0x0800b5e4
 8002188:	0800b5f0 	.word	0x0800b5f0
 800218c:	20000048 	.word	0x20000048
 8002190:	0800b5fc 	.word	0x0800b5fc
 8002194:	0800b608 	.word	0x0800b608

08002198 <menu>:
//			pageflag = 1;
//
//		}
//}

void menu(){
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0

	setCursor(1, 0);
 800219c:	2100      	movs	r1, #0
 800219e:	2001      	movs	r0, #1
 80021a0:	f7fe fad4 	bl	800074c <setCursor>
	print("MENU:");
 80021a4:	481f      	ldr	r0, [pc, #124]	; (8002224 <menu+0x8c>)
 80021a6:	f7fe fb19 	bl	80007dc <print>
	setCursor(1, 1);
 80021aa:	2101      	movs	r1, #1
 80021ac:	2001      	movs	r0, #1
 80021ae:	f7fe facd 	bl	800074c <setCursor>
	print("PLAY");
 80021b2:	481d      	ldr	r0, [pc, #116]	; (8002228 <menu+0x90>)
 80021b4:	f7fe fb12 	bl	80007dc <print>
	setCursor(1, 2);
 80021b8:	2102      	movs	r1, #2
 80021ba:	2001      	movs	r0, #1
 80021bc:	f7fe fac6 	bl	800074c <setCursor>
	print("SETTING");
 80021c0:	481a      	ldr	r0, [pc, #104]	; (800222c <menu+0x94>)
 80021c2:	f7fe fb0b 	bl	80007dc <print>
	setCursor(1, 3);
 80021c6:	2103      	movs	r1, #3
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7fe fabf 	bl	800074c <setCursor>
	print("ABOUT");
 80021ce:	4818      	ldr	r0, [pc, #96]	; (8002230 <menu+0x98>)
 80021d0:	f7fe fb04 	bl	80007dc <print>
	setCursor(0, 0);
 80021d4:	2100      	movs	r1, #0
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7fe fab8 	bl	800074c <setCursor>
	print(" ");
 80021dc:	4815      	ldr	r0, [pc, #84]	; (8002234 <menu+0x9c>)
 80021de:	f7fe fafd 	bl	80007dc <print>
	setCursor(0, 1);
 80021e2:	2101      	movs	r1, #1
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7fe fab1 	bl	800074c <setCursor>
	print(" ");
 80021ea:	4812      	ldr	r0, [pc, #72]	; (8002234 <menu+0x9c>)
 80021ec:	f7fe faf6 	bl	80007dc <print>
	setCursor(0, 2);
 80021f0:	2102      	movs	r1, #2
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7fe faaa 	bl	800074c <setCursor>
	print(" ");
 80021f8:	480e      	ldr	r0, [pc, #56]	; (8002234 <menu+0x9c>)
 80021fa:	f7fe faef 	bl	80007dc <print>
	setCursor(0, 3);
 80021fe:	2103      	movs	r1, #3
 8002200:	2000      	movs	r0, #0
 8002202:	f7fe faa3 	bl	800074c <setCursor>
	print(" ");
 8002206:	480b      	ldr	r0, [pc, #44]	; (8002234 <menu+0x9c>)
 8002208:	f7fe fae8 	bl	80007dc <print>
	setCursor(0, menu_curser_r);
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <menu+0xa0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	2000      	movs	r0, #0
 8002214:	f7fe fa9a 	bl	800074c <setCursor>
	print(">");
 8002218:	4808      	ldr	r0, [pc, #32]	; (800223c <menu+0xa4>)
 800221a:	f7fe fadf 	bl	80007dc <print>

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	0800b614 	.word	0x0800b614
 8002228:	0800b61c 	.word	0x0800b61c
 800222c:	0800b624 	.word	0x0800b624
 8002230:	0800b62c 	.word	0x0800b62c
 8002234:	0800b5a4 	.word	0x0800b5a4
 8002238:	20000004 	.word	0x20000004
 800223c:	0800b634 	.word	0x0800b634

08002240 <programLoop>:

void programLoop() {
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
//    seven_segment_refresh();

    update_lcd();
 8002244:	f7ff fd88 	bl	8001d58 <update_lcd>
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_TIM_PeriodElapsedCallback>:
int sev_result = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4) {
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d110      	bne.n	8002280 <HAL_TIM_PeriodElapsedCallback+0x34>
//		update_lcd();
		seven_segment_refresh();
 800225e:	f7ff faa3 	bl	80017a8 <seven_segment_refresh>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8002262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002266:	481b      	ldr	r0, [pc, #108]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002268:	f002 fb66 	bl	8004938 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 800226c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002270:	4818      	ldr	r0, [pc, #96]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002272:	f002 fb61 	bl	8004938 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8002276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800227a:	4816      	ldr	r0, [pc, #88]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800227c:	f002 fb5c 	bl	8004938 <HAL_GPIO_TogglePin>

	}
	if(htim->Instance == TIM2){
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002288:	d11e      	bne.n	80022c8 <HAL_TIM_PeriodElapsedCallback+0x7c>
		test_shelik();
 800228a:	f000 f959 	bl	8002540 <test_shelik>
		sev_result = player2.arrow * 1000 + player2.health * 100 + player1.arrow * 10 + player1.health;
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002296:	fb03 f202 	mul.w	r2, r3, r2
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	2164      	movs	r1, #100	; 0x64
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	18d1      	adds	r1, r2, r3
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	18ca      	adds	r2, r1, r3
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	4413      	add	r3, r2
 80022ba:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80022bc:	6013      	str	r3, [r2, #0]
		setNumber(sev_result);
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fa9e 	bl	8001804 <setNumber>
	}

}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40000800 	.word	0x40000800
 80022d4:	48001000 	.word	0x48001000
 80022d8:	20000068 	.word	0x20000068
 80022dc:	20000048 	.word	0x20000048
 80022e0:	20000830 	.word	0x20000830

080022e4 <change_dir>:


void change_dir(int player){
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	if (player == 1){
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d119      	bne.n	8002326 <change_dir+0x42>
		int new_dir = player1.direction + 1;
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <change_dir+0x88>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	3301      	adds	r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
		if(new_dir == 5){
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d101      	bne.n	8002304 <change_dir+0x20>
			new_dir = 1;
 8002300:	2301      	movs	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
		}
		player1.direction = new_dir;
 8002304:	4a19      	ldr	r2, [pc, #100]	; (800236c <change_dir+0x88>)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	60d3      	str	r3, [r2, #12]
		lcd[player1.position_x][player1.position_y] = player1.direction;
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <change_dir+0x88>)
 800230c:	68d9      	ldr	r1, [r3, #12]
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <change_dir+0x88>)
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <change_dir+0x88>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	b2c8      	uxtb	r0, r1
 8002318:	4915      	ldr	r1, [pc, #84]	; (8002370 <change_dir+0x8c>)
 800231a:	0092      	lsls	r2, r2, #2
 800231c:	440a      	add	r2, r1
 800231e:	4413      	add	r3, r2
 8002320:	4602      	mov	r2, r0
 8002322:	701a      	strb	r2, [r3, #0]
		}
		player2.direction = new_dir;
		lcd[player2.position_x][player2.position_y] = player2.direction;

	}
}
 8002324:	e01b      	b.n	800235e <change_dir+0x7a>
	}else if (player == 2){
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d118      	bne.n	800235e <change_dir+0x7a>
		int new_dir = player2.direction + 1;
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <change_dir+0x90>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	3301      	adds	r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
		if(new_dir == 5){
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d101      	bne.n	800233e <change_dir+0x5a>
			new_dir = 1;
 800233a:	2301      	movs	r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
		player2.direction = new_dir;
 800233e:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <change_dir+0x90>)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	60d3      	str	r3, [r2, #12]
		lcd[player2.position_x][player2.position_y] = player2.direction;
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <change_dir+0x90>)
 8002346:	68d9      	ldr	r1, [r3, #12]
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <change_dir+0x90>)
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <change_dir+0x90>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	b2c8      	uxtb	r0, r1
 8002352:	4907      	ldr	r1, [pc, #28]	; (8002370 <change_dir+0x8c>)
 8002354:	0092      	lsls	r2, r2, #2
 8002356:	440a      	add	r2, r1
 8002358:	4413      	add	r3, r2
 800235a:	4602      	mov	r2, r0
 800235c:	701a      	strb	r2, [r3, #0]
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000048 	.word	0x20000048
 8002370:	20000718 	.word	0x20000718
 8002374:	20000068 	.word	0x20000068

08002378 <boom>:

void boom(int player){
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
//	PWM_Change_Tone(1000, 1000);
	if ((player == 1 && player1.arrow > 0)||(player == 2 && player2.arrow > 0)){
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d103      	bne.n	800238e <boom+0x16>
 8002386:	4b4c      	ldr	r3, [pc, #304]	; (80024b8 <boom+0x140>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	dc08      	bgt.n	80023a0 <boom+0x28>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b02      	cmp	r3, #2
 8002392:	f040 808d 	bne.w	80024b0 <boom+0x138>
 8002396:	4b49      	ldr	r3, [pc, #292]	; (80024bc <boom+0x144>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	f340 8088 	ble.w	80024b0 <boom+0x138>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0); //Temp
 80023a0:	2200      	movs	r2, #0
 80023a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023a6:	4846      	ldr	r0, [pc, #280]	; (80024c0 <boom+0x148>)
 80023a8:	f002 faae 	bl	8004908 <HAL_GPIO_WritePin>
	int i;
	for(i = 0; i<10;i++){
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e00d      	b.n	80023ce <boom+0x56>
		if(bul[i].active==0)
 80023b2:	4944      	ldr	r1, [pc, #272]	; (80024c4 <boom+0x14c>)
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3310      	adds	r3, #16
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <boom+0x5e>
	for(i = 0; i<10;i++){
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3301      	adds	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	ddee      	ble.n	80023b2 <boom+0x3a>
 80023d4:	e000      	b.n	80023d8 <boom+0x60>
			break;
 80023d6:	bf00      	nop
	}
	bul[i].active = 1;
 80023d8:	493a      	ldr	r1, [pc, #232]	; (80024c4 <boom+0x14c>)
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	3310      	adds	r3, #16
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
	if (player == 1){
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d12f      	bne.n	8002452 <boom+0xda>
		bul[i].direction=player1.direction;
 80023f2:	4b31      	ldr	r3, [pc, #196]	; (80024b8 <boom+0x140>)
 80023f4:	68d9      	ldr	r1, [r3, #12]
 80023f6:	4833      	ldr	r0, [pc, #204]	; (80024c4 <boom+0x14c>)
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4403      	add	r3, r0
 8002404:	330c      	adds	r3, #12
 8002406:	6019      	str	r1, [r3, #0]
		bul[i].position_x=player1.position_x;
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <boom+0x140>)
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	482d      	ldr	r0, [pc, #180]	; (80024c4 <boom+0x14c>)
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4403      	add	r3, r0
 800241a:	3304      	adds	r3, #4
 800241c:	6019      	str	r1, [r3, #0]
		bul[i].position_y=player1.position_y;
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <boom+0x140>)
 8002420:	6899      	ldr	r1, [r3, #8]
 8002422:	4828      	ldr	r0, [pc, #160]	; (80024c4 <boom+0x14c>)
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4403      	add	r3, r0
 8002430:	3308      	adds	r3, #8
 8002432:	6019      	str	r1, [r3, #0]
		bul[i].player_id=1;
 8002434:	4923      	ldr	r1, [pc, #140]	; (80024c4 <boom+0x14c>)
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]
		player1.arrow--;
 8002446:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <boom+0x140>)
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	3b01      	subs	r3, #1
 800244c:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <boom+0x140>)
 800244e:	6193      	str	r3, [r2, #24]
//	 PWM_Change_Tone(1000, 0);
	}
//entesab be array


}
 8002450:	e02e      	b.n	80024b0 <boom+0x138>
		bul[i].direction=player2.direction;
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <boom+0x144>)
 8002454:	68d9      	ldr	r1, [r3, #12]
 8002456:	481b      	ldr	r0, [pc, #108]	; (80024c4 <boom+0x14c>)
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4403      	add	r3, r0
 8002464:	330c      	adds	r3, #12
 8002466:	6019      	str	r1, [r3, #0]
		bul[i].position_x=player2.position_x;
 8002468:	4b14      	ldr	r3, [pc, #80]	; (80024bc <boom+0x144>)
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	4815      	ldr	r0, [pc, #84]	; (80024c4 <boom+0x14c>)
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4403      	add	r3, r0
 800247a:	3304      	adds	r3, #4
 800247c:	6019      	str	r1, [r3, #0]
		bul[i].position_y=player2.position_y;
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <boom+0x144>)
 8002480:	6899      	ldr	r1, [r3, #8]
 8002482:	4810      	ldr	r0, [pc, #64]	; (80024c4 <boom+0x14c>)
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4403      	add	r3, r0
 8002490:	3308      	adds	r3, #8
 8002492:	6019      	str	r1, [r3, #0]
		bul[i].player_id=2;
 8002494:	490b      	ldr	r1, [pc, #44]	; (80024c4 <boom+0x14c>)
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	2202      	movs	r2, #2
 80024a4:	601a      	str	r2, [r3, #0]
		player2.arrow--;
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <boom+0x144>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	4a03      	ldr	r2, [pc, #12]	; (80024bc <boom+0x144>)
 80024ae:	6193      	str	r3, [r2, #24]
}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000048 	.word	0x20000048
 80024bc:	20000068 	.word	0x20000068
 80024c0:	48001000 	.word	0x48001000
 80024c4:	20000768 	.word	0x20000768

080024c8 <collect>:

//int sev_result = 0;
void collect(uint8_t pos, int player){
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
	if (pos == num_extra_bullet){
 80024d4:	79fa      	ldrb	r2, [r7, #7]
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <collect+0x68>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d10e      	bne.n	80024fc <collect+0x34>
		if (player == 1)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d105      	bne.n	80024f0 <collect+0x28>
			player1.arrow+=1;
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <collect+0x6c>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	3301      	adds	r3, #1
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <collect+0x6c>)
 80024ec:	6193      	str	r3, [r2, #24]
//	int results[4] = {d,c,b,a};
//	seven_segment_set_num(results);

//	sev_result = player2.arrow * 1000 + player2.health * 100 + player1.arrow * 10 + player1.health;
//	setNumber(sev_result);
}
 80024ee:	e018      	b.n	8002522 <collect+0x5a>
			player2.arrow+=1;
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <collect+0x70>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	3301      	adds	r3, #1
 80024f6:	4a10      	ldr	r2, [pc, #64]	; (8002538 <collect+0x70>)
 80024f8:	6193      	str	r3, [r2, #24]
}
 80024fa:	e012      	b.n	8002522 <collect+0x5a>
	}else if (pos == num_health){
 80024fc:	79fa      	ldrb	r2, [r7, #7]
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <collect+0x74>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d10d      	bne.n	8002522 <collect+0x5a>
		if (player == 1)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <collect+0x50>
			player1.health+=1;
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <collect+0x6c>)
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	3301      	adds	r3, #1
 8002512:	4a08      	ldr	r2, [pc, #32]	; (8002534 <collect+0x6c>)
 8002514:	6153      	str	r3, [r2, #20]
}
 8002516:	e004      	b.n	8002522 <collect+0x5a>
			player2.health+=1;
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <collect+0x70>)
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	3301      	adds	r3, #1
 800251e:	4a06      	ldr	r2, [pc, #24]	; (8002538 <collect+0x70>)
 8002520:	6153      	str	r3, [r2, #20]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000098 	.word	0x20000098
 8002534:	20000048 	.word	0x20000048
 8002538:	20000068 	.word	0x20000068
 800253c:	200000a0 	.word	0x200000a0

08002540 <test_shelik>:

void test_shelik(){
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b08b      	sub	sp, #44	; 0x2c
 8002544:	af00      	add	r7, sp, #0
	for(int i = 0; i<10;i++){
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
 800254a:	f000 bcc1 	b.w	8002ed0 <test_shelik+0x990>
		if(bul[i].active==1){
 800254e:	4992      	ldr	r1, [pc, #584]	; (8002798 <test_shelik+0x258>)
 8002550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3310      	adds	r3, #16
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	f040 84b2 	bne.w	8002eca <test_shelik+0x98a>
			//4 -> down
			//check direction
			// check next
			// update position and show
			//active =0
			if(bul[i].direction == 1){
 8002566:	498c      	ldr	r1, [pc, #560]	; (8002798 <test_shelik+0x258>)
 8002568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	330c      	adds	r3, #12
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	f040 8123 	bne.w	80027c4 <test_shelik+0x284>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 800257e:	4986      	ldr	r1, [pc, #536]	; (8002798 <test_shelik+0x258>)
 8002580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	3304      	adds	r3, #4
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	4881      	ldr	r0, [pc, #516]	; (8002798 <test_shelik+0x258>)
 8002592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4403      	add	r3, r0
 800259e:	3308      	adds	r3, #8
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	487e      	ldr	r0, [pc, #504]	; (800279c <test_shelik+0x25c>)
 80025a4:	008a      	lsls	r2, r1, #2
 80025a6:	4402      	add	r2, r0
 80025a8:	4413      	add	r3, r2
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b7c      	ldr	r3, [pc, #496]	; (80027a0 <test_shelik+0x260>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d117      	bne.n	80025e6 <test_shelik+0xa6>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 80025b6:	4978      	ldr	r1, [pc, #480]	; (8002798 <test_shelik+0x258>)
 80025b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3304      	adds	r3, #4
 80025c6:	6819      	ldr	r1, [r3, #0]
 80025c8:	4873      	ldr	r0, [pc, #460]	; (8002798 <test_shelik+0x258>)
 80025ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4403      	add	r3, r0
 80025d6:	3308      	adds	r3, #8
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4870      	ldr	r0, [pc, #448]	; (800279c <test_shelik+0x25c>)
 80025dc:	008a      	lsls	r2, r1, #2
 80025de:	4402      	add	r2, r0
 80025e0:	4413      	add	r3, r2
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
				}
				int new_x = bul[i].position_x - 1;
 80025e6:	496c      	ldr	r1, [pc, #432]	; (8002798 <test_shelik+0x258>)
 80025e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	3304      	adds	r3, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]

				if(new_x >= 0){
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	db27      	blt.n	8002652 <test_shelik+0x112>
					bul[i].position_x = new_x;
 8002602:	4965      	ldr	r1, [pc, #404]	; (8002798 <test_shelik+0x258>)
 8002604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	3304      	adds	r3, #4
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 8002616:	4960      	ldr	r1, [pc, #384]	; (8002798 <test_shelik+0x258>)
 8002618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	3304      	adds	r3, #4
 8002626:	6819      	ldr	r1, [r3, #0]
 8002628:	485b      	ldr	r0, [pc, #364]	; (8002798 <test_shelik+0x258>)
 800262a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4403      	add	r3, r0
 8002636:	3308      	adds	r3, #8
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4858      	ldr	r0, [pc, #352]	; (800279c <test_shelik+0x25c>)
 800263c:	008a      	lsls	r2, r1, #2
 800263e:	4402      	add	r2, r0
 8002640:	4413      	add	r3, r2
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	607b      	str	r3, [r7, #4]
				if(next_element == num_obstacle){
 8002646:	4b57      	ldr	r3, [pc, #348]	; (80027a4 <test_shelik+0x264>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	d129      	bne.n	80026a4 <test_shelik+0x164>
 8002650:	e00b      	b.n	800266a <test_shelik+0x12a>
					bul[i].active = 0;
 8002652:	4951      	ldr	r1, [pc, #324]	; (8002798 <test_shelik+0x258>)
 8002654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	3310      	adds	r3, #16
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
					continue;
 8002666:	f000 bc30 	b.w	8002eca <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 800266a:	4b4d      	ldr	r3, [pc, #308]	; (80027a0 <test_shelik+0x260>)
 800266c:	681c      	ldr	r4, [r3, #0]
 800266e:	494a      	ldr	r1, [pc, #296]	; (8002798 <test_shelik+0x258>)
 8002670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	3304      	adds	r3, #4
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	4845      	ldr	r0, [pc, #276]	; (8002798 <test_shelik+0x258>)
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4403      	add	r3, r0
 800268e:	3308      	adds	r3, #8
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b2e4      	uxtb	r4, r4
 8002694:	4841      	ldr	r0, [pc, #260]	; (800279c <test_shelik+0x25c>)
 8002696:	008a      	lsls	r2, r1, #2
 8002698:	4402      	add	r2, r0
 800269a:	4413      	add	r3, r2
 800269c:	4622      	mov	r2, r4
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	f000 bc13 	b.w	8002eca <test_shelik+0x98a>
				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 80026a4:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <test_shelik+0x268>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d00e      	beq.n	80026cc <test_shelik+0x18c>
 80026ae:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <test_shelik+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d009      	beq.n	80026cc <test_shelik+0x18c>
 80026b8:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <test_shelik+0x270>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d004      	beq.n	80026cc <test_shelik+0x18c>
 80026c2:	4b3c      	ldr	r3, [pc, #240]	; (80027b4 <test_shelik+0x274>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d135      	bne.n	8002738 <test_shelik+0x1f8>
					if(bul[i].player_id == 1){
 80026cc:	4932      	ldr	r1, [pc, #200]	; (8002798 <test_shelik+0x258>)
 80026ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d110      	bne.n	8002702 <test_shelik+0x1c2>
						player2.health--;
 80026e0:	4b35      	ldr	r3, [pc, #212]	; (80027b8 <test_shelik+0x278>)
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	4a34      	ldr	r2, [pc, #208]	; (80027b8 <test_shelik+0x278>)
 80026e8:	6153      	str	r3, [r2, #20]
						if(player2.health==0){
 80026ea:	4b33      	ldr	r3, [pc, #204]	; (80027b8 <test_shelik+0x278>)
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <test_shelik+0x1b6>
								endgame();
 80026f2:	f000 fc0d 	bl	8002f10 <endgame>
							}
						player1.points++;
 80026f6:	4b31      	ldr	r3, [pc, #196]	; (80027bc <test_shelik+0x27c>)
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	3301      	adds	r3, #1
 80026fc:	4a2f      	ldr	r2, [pc, #188]	; (80027bc <test_shelik+0x27c>)
 80026fe:	6113      	str	r3, [r2, #16]
 8002700:	e00f      	b.n	8002722 <test_shelik+0x1e2>
					}
					else{
						player1.health--;
 8002702:	4b2e      	ldr	r3, [pc, #184]	; (80027bc <test_shelik+0x27c>)
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	3b01      	subs	r3, #1
 8002708:	4a2c      	ldr	r2, [pc, #176]	; (80027bc <test_shelik+0x27c>)
 800270a:	6153      	str	r3, [r2, #20]
						if(player1.health==0){
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <test_shelik+0x27c>)
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <test_shelik+0x1d8>
							endgame();
 8002714:	f000 fbfc 	bl	8002f10 <endgame>
						}
						player2.points++;
 8002718:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <test_shelik+0x278>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	3301      	adds	r3, #1
 800271e:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <test_shelik+0x278>)
 8002720:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002722:	491d      	ldr	r1, [pc, #116]	; (8002798 <test_shelik+0x258>)
 8002724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3310      	adds	r3, #16
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
					continue;
 8002736:	e3c8      	b.n	8002eca <test_shelik+0x98a>
				}
				else if(next_element == num_wall){
 8002738:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <test_shelik+0x280>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	429a      	cmp	r2, r3
 8002740:	d10a      	bne.n	8002758 <test_shelik+0x218>
					bul[i].active = 0;
 8002742:	4915      	ldr	r1, [pc, #84]	; (8002798 <test_shelik+0x258>)
 8002744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3310      	adds	r3, #16
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
					continue;
 8002756:	e3b8      	b.n	8002eca <test_shelik+0x98a>
				}
				else if(next_element == 0){
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 83b5 	bne.w	8002eca <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <test_shelik+0x260>)
 8002762:	681c      	ldr	r4, [r3, #0]
 8002764:	490c      	ldr	r1, [pc, #48]	; (8002798 <test_shelik+0x258>)
 8002766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3304      	adds	r3, #4
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	4808      	ldr	r0, [pc, #32]	; (8002798 <test_shelik+0x258>)
 8002778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4403      	add	r3, r0
 8002784:	3308      	adds	r3, #8
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	b2e4      	uxtb	r4, r4
 800278a:	4804      	ldr	r0, [pc, #16]	; (800279c <test_shelik+0x25c>)
 800278c:	008a      	lsls	r2, r1, #2
 800278e:	4402      	add	r2, r0
 8002790:	4413      	add	r3, r2
 8002792:	4622      	mov	r2, r4
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	e398      	b.n	8002eca <test_shelik+0x98a>
 8002798:	20000768 	.word	0x20000768
 800279c:	20000718 	.word	0x20000718
 80027a0:	200000a4 	.word	0x200000a4
 80027a4:	200000ac 	.word	0x200000ac
 80027a8:	20000094 	.word	0x20000094
 80027ac:	20000088 	.word	0x20000088
 80027b0:	20000090 	.word	0x20000090
 80027b4:	2000008c 	.word	0x2000008c
 80027b8:	20000068 	.word	0x20000068
 80027bc:	20000048 	.word	0x20000048
 80027c0:	200000a8 	.word	0x200000a8

				}

			}
			else if(bul[i].direction == 2){
 80027c4:	49a0      	ldr	r1, [pc, #640]	; (8002a48 <test_shelik+0x508>)
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	330c      	adds	r3, #12
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	f040 814c 	bne.w	8002a74 <test_shelik+0x534>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 80027dc:	499a      	ldr	r1, [pc, #616]	; (8002a48 <test_shelik+0x508>)
 80027de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3304      	adds	r3, #4
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	4896      	ldr	r0, [pc, #600]	; (8002a48 <test_shelik+0x508>)
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4403      	add	r3, r0
 80027fc:	3308      	adds	r3, #8
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4892      	ldr	r0, [pc, #584]	; (8002a4c <test_shelik+0x50c>)
 8002802:	008a      	lsls	r2, r1, #2
 8002804:	4402      	add	r2, r0
 8002806:	4413      	add	r3, r2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	4b90      	ldr	r3, [pc, #576]	; (8002a50 <test_shelik+0x510>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d117      	bne.n	8002844 <test_shelik+0x304>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 8002814:	498c      	ldr	r1, [pc, #560]	; (8002a48 <test_shelik+0x508>)
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3304      	adds	r3, #4
 8002824:	6819      	ldr	r1, [r3, #0]
 8002826:	4888      	ldr	r0, [pc, #544]	; (8002a48 <test_shelik+0x508>)
 8002828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4403      	add	r3, r0
 8002834:	3308      	adds	r3, #8
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4884      	ldr	r0, [pc, #528]	; (8002a4c <test_shelik+0x50c>)
 800283a:	008a      	lsls	r2, r1, #2
 800283c:	4402      	add	r2, r0
 800283e:	4413      	add	r3, r2
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
				}

				int new_y = bul[i].position_y - 1;
 8002844:	4980      	ldr	r1, [pc, #512]	; (8002a48 <test_shelik+0x508>)
 8002846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	3308      	adds	r3, #8
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3b01      	subs	r3, #1
 8002858:	613b      	str	r3, [r7, #16]
				if(new_y >= 0){
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	db27      	blt.n	80028b0 <test_shelik+0x370>
					bul[i].position_y = new_y;
 8002860:	4979      	ldr	r1, [pc, #484]	; (8002a48 <test_shelik+0x508>)
 8002862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	3308      	adds	r3, #8
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 8002874:	4974      	ldr	r1, [pc, #464]	; (8002a48 <test_shelik+0x508>)
 8002876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	3304      	adds	r3, #4
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	4870      	ldr	r0, [pc, #448]	; (8002a48 <test_shelik+0x508>)
 8002888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4403      	add	r3, r0
 8002894:	3308      	adds	r3, #8
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	486c      	ldr	r0, [pc, #432]	; (8002a4c <test_shelik+0x50c>)
 800289a:	008a      	lsls	r2, r1, #2
 800289c:	4402      	add	r2, r0
 800289e:	4413      	add	r3, r2
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]
				if(next_element == num_obstacle){
 80028a4:	4b6b      	ldr	r3, [pc, #428]	; (8002a54 <test_shelik+0x514>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d127      	bne.n	80028fe <test_shelik+0x3be>
 80028ae:	e00a      	b.n	80028c6 <test_shelik+0x386>
					bul[i].active = 0;
 80028b0:	4965      	ldr	r1, [pc, #404]	; (8002a48 <test_shelik+0x508>)
 80028b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	3310      	adds	r3, #16
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
					continue;
 80028c4:	e301      	b.n	8002eca <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 80028c6:	4b62      	ldr	r3, [pc, #392]	; (8002a50 <test_shelik+0x510>)
 80028c8:	681c      	ldr	r4, [r3, #0]
 80028ca:	495f      	ldr	r1, [pc, #380]	; (8002a48 <test_shelik+0x508>)
 80028cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3304      	adds	r3, #4
 80028da:	6819      	ldr	r1, [r3, #0]
 80028dc:	485a      	ldr	r0, [pc, #360]	; (8002a48 <test_shelik+0x508>)
 80028de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4403      	add	r3, r0
 80028ea:	3308      	adds	r3, #8
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	b2e4      	uxtb	r4, r4
 80028f0:	4856      	ldr	r0, [pc, #344]	; (8002a4c <test_shelik+0x50c>)
 80028f2:	008a      	lsls	r2, r1, #2
 80028f4:	4402      	add	r2, r0
 80028f6:	4413      	add	r3, r2
 80028f8:	4622      	mov	r2, r4
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e06b      	b.n	80029d6 <test_shelik+0x496>
				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 80028fe:	4b56      	ldr	r3, [pc, #344]	; (8002a58 <test_shelik+0x518>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	429a      	cmp	r2, r3
 8002906:	d00e      	beq.n	8002926 <test_shelik+0x3e6>
 8002908:	4b54      	ldr	r3, [pc, #336]	; (8002a5c <test_shelik+0x51c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	429a      	cmp	r2, r3
 8002910:	d009      	beq.n	8002926 <test_shelik+0x3e6>
 8002912:	4b53      	ldr	r3, [pc, #332]	; (8002a60 <test_shelik+0x520>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	429a      	cmp	r2, r3
 800291a:	d004      	beq.n	8002926 <test_shelik+0x3e6>
 800291c:	4b51      	ldr	r3, [pc, #324]	; (8002a64 <test_shelik+0x524>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	429a      	cmp	r2, r3
 8002924:	d129      	bne.n	800297a <test_shelik+0x43a>
					if(bul[i].player_id == 1){
 8002926:	4948      	ldr	r1, [pc, #288]	; (8002a48 <test_shelik+0x508>)
 8002928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d10a      	bne.n	8002950 <test_shelik+0x410>
						player2.health--;
 800293a:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <test_shelik+0x528>)
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	3b01      	subs	r3, #1
 8002940:	4a49      	ldr	r2, [pc, #292]	; (8002a68 <test_shelik+0x528>)
 8002942:	6153      	str	r3, [r2, #20]
						player1.points++;
 8002944:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <test_shelik+0x52c>)
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	3301      	adds	r3, #1
 800294a:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <test_shelik+0x52c>)
 800294c:	6113      	str	r3, [r2, #16]
 800294e:	e009      	b.n	8002964 <test_shelik+0x424>
					}
					else{
						player1.health--;
 8002950:	4b46      	ldr	r3, [pc, #280]	; (8002a6c <test_shelik+0x52c>)
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	3b01      	subs	r3, #1
 8002956:	4a45      	ldr	r2, [pc, #276]	; (8002a6c <test_shelik+0x52c>)
 8002958:	6153      	str	r3, [r2, #20]
						player2.points++;
 800295a:	4b43      	ldr	r3, [pc, #268]	; (8002a68 <test_shelik+0x528>)
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	3301      	adds	r3, #1
 8002960:	4a41      	ldr	r2, [pc, #260]	; (8002a68 <test_shelik+0x528>)
 8002962:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002964:	4938      	ldr	r1, [pc, #224]	; (8002a48 <test_shelik+0x508>)
 8002966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	3310      	adds	r3, #16
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
					continue;
 8002978:	e2a7      	b.n	8002eca <test_shelik+0x98a>
				}
				else if(next_element == num_wall){
 800297a:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <test_shelik+0x530>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d10a      	bne.n	800299a <test_shelik+0x45a>
					bul[i].active = 0;
 8002984:	4930      	ldr	r1, [pc, #192]	; (8002a48 <test_shelik+0x508>)
 8002986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3310      	adds	r3, #16
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
					continue;
 8002998:	e297      	b.n	8002eca <test_shelik+0x98a>
				}
				else if(next_element == 0){
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d11a      	bne.n	80029d6 <test_shelik+0x496>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 80029a0:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <test_shelik+0x510>)
 80029a2:	681c      	ldr	r4, [r3, #0]
 80029a4:	4928      	ldr	r1, [pc, #160]	; (8002a48 <test_shelik+0x508>)
 80029a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	3304      	adds	r3, #4
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	4824      	ldr	r0, [pc, #144]	; (8002a48 <test_shelik+0x508>)
 80029b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4403      	add	r3, r0
 80029c4:	3308      	adds	r3, #8
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	b2e4      	uxtb	r4, r4
 80029ca:	4820      	ldr	r0, [pc, #128]	; (8002a4c <test_shelik+0x50c>)
 80029cc:	008a      	lsls	r2, r1, #2
 80029ce:	4402      	add	r2, r0
 80029d0:	4413      	add	r3, r2
 80029d2:	4622      	mov	r2, r4
 80029d4:	701a      	strb	r2, [r3, #0]

				}
				if(lcd[bul[i].position_x][bul[i].position_y+1] == num_arrow){
 80029d6:	491c      	ldr	r1, [pc, #112]	; (8002a48 <test_shelik+0x508>)
 80029d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	3304      	adds	r3, #4
 80029e6:	6819      	ldr	r1, [r3, #0]
 80029e8:	4817      	ldr	r0, [pc, #92]	; (8002a48 <test_shelik+0x508>)
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4403      	add	r3, r0
 80029f6:	3308      	adds	r3, #8
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3301      	adds	r3, #1
 80029fc:	4813      	ldr	r0, [pc, #76]	; (8002a4c <test_shelik+0x50c>)
 80029fe:	008a      	lsls	r2, r1, #2
 8002a00:	4402      	add	r2, r0
 8002a02:	4413      	add	r3, r2
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <test_shelik+0x510>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	f040 825c 	bne.w	8002eca <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y+1] = 0;
 8002a12:	490d      	ldr	r1, [pc, #52]	; (8002a48 <test_shelik+0x508>)
 8002a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3304      	adds	r3, #4
 8002a22:	6819      	ldr	r1, [r3, #0]
 8002a24:	4808      	ldr	r0, [pc, #32]	; (8002a48 <test_shelik+0x508>)
 8002a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4403      	add	r3, r0
 8002a32:	3308      	adds	r3, #8
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	4804      	ldr	r0, [pc, #16]	; (8002a4c <test_shelik+0x50c>)
 8002a3a:	008a      	lsls	r2, r1, #2
 8002a3c:	4402      	add	r2, r0
 8002a3e:	4413      	add	r3, r2
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e241      	b.n	8002eca <test_shelik+0x98a>
 8002a46:	bf00      	nop
 8002a48:	20000768 	.word	0x20000768
 8002a4c:	20000718 	.word	0x20000718
 8002a50:	200000a4 	.word	0x200000a4
 8002a54:	200000ac 	.word	0x200000ac
 8002a58:	20000094 	.word	0x20000094
 8002a5c:	20000088 	.word	0x20000088
 8002a60:	20000090 	.word	0x20000090
 8002a64:	2000008c 	.word	0x2000008c
 8002a68:	20000068 	.word	0x20000068
 8002a6c:	20000048 	.word	0x20000048
 8002a70:	200000a8 	.word	0x200000a8
			}




			else if(bul[i].direction == 3){
 8002a74:	4985      	ldr	r1, [pc, #532]	; (8002c8c <test_shelik+0x74c>)
 8002a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	330c      	adds	r3, #12
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	f040 8116 	bne.w	8002cb8 <test_shelik+0x778>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 8002a8c:	497f      	ldr	r1, [pc, #508]	; (8002c8c <test_shelik+0x74c>)
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	6819      	ldr	r1, [r3, #0]
 8002a9e:	487b      	ldr	r0, [pc, #492]	; (8002c8c <test_shelik+0x74c>)
 8002aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4403      	add	r3, r0
 8002aac:	3308      	adds	r3, #8
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4877      	ldr	r0, [pc, #476]	; (8002c90 <test_shelik+0x750>)
 8002ab2:	008a      	lsls	r2, r1, #2
 8002ab4:	4402      	add	r2, r0
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	4b75      	ldr	r3, [pc, #468]	; (8002c94 <test_shelik+0x754>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d117      	bne.n	8002af4 <test_shelik+0x5b4>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 8002ac4:	4971      	ldr	r1, [pc, #452]	; (8002c8c <test_shelik+0x74c>)
 8002ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	486d      	ldr	r0, [pc, #436]	; (8002c8c <test_shelik+0x74c>)
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4403      	add	r3, r0
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4869      	ldr	r0, [pc, #420]	; (8002c90 <test_shelik+0x750>)
 8002aea:	008a      	lsls	r2, r1, #2
 8002aec:	4402      	add	r2, r0
 8002aee:	4413      	add	r3, r2
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
				}
				int new_x = bul[i].position_x + 1;
 8002af4:	4965      	ldr	r1, [pc, #404]	; (8002c8c <test_shelik+0x74c>)
 8002af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	3304      	adds	r3, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3301      	adds	r3, #1
 8002b08:	61bb      	str	r3, [r7, #24]
				if(new_x < 24){
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2b17      	cmp	r3, #23
 8002b0e:	dc27      	bgt.n	8002b60 <test_shelik+0x620>
					bul[i].position_x = new_x;
 8002b10:	495e      	ldr	r1, [pc, #376]	; (8002c8c <test_shelik+0x74c>)
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3304      	adds	r3, #4
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 8002b24:	4959      	ldr	r1, [pc, #356]	; (8002c8c <test_shelik+0x74c>)
 8002b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	3304      	adds	r3, #4
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	4855      	ldr	r0, [pc, #340]	; (8002c8c <test_shelik+0x74c>)
 8002b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4403      	add	r3, r0
 8002b44:	3308      	adds	r3, #8
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4851      	ldr	r0, [pc, #324]	; (8002c90 <test_shelik+0x750>)
 8002b4a:	008a      	lsls	r2, r1, #2
 8002b4c:	4402      	add	r2, r0
 8002b4e:	4413      	add	r3, r2
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	617b      	str	r3, [r7, #20]
				if(next_element == num_obstacle){
 8002b54:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <test_shelik+0x758>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d127      	bne.n	8002bae <test_shelik+0x66e>
 8002b5e:	e00a      	b.n	8002b76 <test_shelik+0x636>
					bul[i].active = 0;
 8002b60:	494a      	ldr	r1, [pc, #296]	; (8002c8c <test_shelik+0x74c>)
 8002b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3310      	adds	r3, #16
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
					continue;
 8002b74:	e1a9      	b.n	8002eca <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <test_shelik+0x754>)
 8002b78:	681c      	ldr	r4, [r3, #0]
 8002b7a:	4944      	ldr	r1, [pc, #272]	; (8002c8c <test_shelik+0x74c>)
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	3304      	adds	r3, #4
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	483f      	ldr	r0, [pc, #252]	; (8002c8c <test_shelik+0x74c>)
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4403      	add	r3, r0
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	b2e4      	uxtb	r4, r4
 8002ba0:	483b      	ldr	r0, [pc, #236]	; (8002c90 <test_shelik+0x750>)
 8002ba2:	008a      	lsls	r2, r1, #2
 8002ba4:	4402      	add	r2, r0
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4622      	mov	r2, r4
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e18d      	b.n	8002eca <test_shelik+0x98a>
				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 8002bae:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <test_shelik+0x75c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d00e      	beq.n	8002bd6 <test_shelik+0x696>
 8002bb8:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <test_shelik+0x760>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d009      	beq.n	8002bd6 <test_shelik+0x696>
 8002bc2:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <test_shelik+0x764>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d004      	beq.n	8002bd6 <test_shelik+0x696>
 8002bcc:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <test_shelik+0x768>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d129      	bne.n	8002c2a <test_shelik+0x6ea>
					if(bul[i].player_id == 1){
 8002bd6:	492d      	ldr	r1, [pc, #180]	; (8002c8c <test_shelik+0x74c>)
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d10a      	bne.n	8002c00 <test_shelik+0x6c0>
						player2.health--;
 8002bea:	4b30      	ldr	r3, [pc, #192]	; (8002cac <test_shelik+0x76c>)
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	4a2e      	ldr	r2, [pc, #184]	; (8002cac <test_shelik+0x76c>)
 8002bf2:	6153      	str	r3, [r2, #20]
						player1.points++;
 8002bf4:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <test_shelik+0x770>)
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	4a2d      	ldr	r2, [pc, #180]	; (8002cb0 <test_shelik+0x770>)
 8002bfc:	6113      	str	r3, [r2, #16]
 8002bfe:	e009      	b.n	8002c14 <test_shelik+0x6d4>
					}
					else{
						player1.health--;
 8002c00:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <test_shelik+0x770>)
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	4a2a      	ldr	r2, [pc, #168]	; (8002cb0 <test_shelik+0x770>)
 8002c08:	6153      	str	r3, [r2, #20]
						player2.points++;
 8002c0a:	4b28      	ldr	r3, [pc, #160]	; (8002cac <test_shelik+0x76c>)
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	4a26      	ldr	r2, [pc, #152]	; (8002cac <test_shelik+0x76c>)
 8002c12:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002c14:	491d      	ldr	r1, [pc, #116]	; (8002c8c <test_shelik+0x74c>)
 8002c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	3310      	adds	r3, #16
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
					continue;
 8002c28:	e14f      	b.n	8002eca <test_shelik+0x98a>
				}
				else if(next_element == num_wall){
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <test_shelik+0x774>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d10a      	bne.n	8002c4a <test_shelik+0x70a>
					bul[i].active = 0;
 8002c34:	4915      	ldr	r1, [pc, #84]	; (8002c8c <test_shelik+0x74c>)
 8002c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3310      	adds	r3, #16
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
					continue;
 8002c48:	e13f      	b.n	8002eca <test_shelik+0x98a>
				}
				else if(next_element == 0){
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f040 813c 	bne.w	8002eca <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <test_shelik+0x754>)
 8002c54:	681c      	ldr	r4, [r3, #0]
 8002c56:	490d      	ldr	r1, [pc, #52]	; (8002c8c <test_shelik+0x74c>)
 8002c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3304      	adds	r3, #4
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	4808      	ldr	r0, [pc, #32]	; (8002c8c <test_shelik+0x74c>)
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4403      	add	r3, r0
 8002c76:	3308      	adds	r3, #8
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b2e4      	uxtb	r4, r4
 8002c7c:	4804      	ldr	r0, [pc, #16]	; (8002c90 <test_shelik+0x750>)
 8002c7e:	008a      	lsls	r2, r1, #2
 8002c80:	4402      	add	r2, r0
 8002c82:	4413      	add	r3, r2
 8002c84:	4622      	mov	r2, r4
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e11f      	b.n	8002eca <test_shelik+0x98a>
 8002c8a:	bf00      	nop
 8002c8c:	20000768 	.word	0x20000768
 8002c90:	20000718 	.word	0x20000718
 8002c94:	200000a4 	.word	0x200000a4
 8002c98:	200000ac 	.word	0x200000ac
 8002c9c:	20000094 	.word	0x20000094
 8002ca0:	20000088 	.word	0x20000088
 8002ca4:	20000090 	.word	0x20000090
 8002ca8:	2000008c 	.word	0x2000008c
 8002cac:	20000068 	.word	0x20000068
 8002cb0:	20000048 	.word	0x20000048
 8002cb4:	200000a8 	.word	0x200000a8
			}




			else if(bul[i].direction == 4){
 8002cb8:	498a      	ldr	r1, [pc, #552]	; (8002ee4 <test_shelik+0x9a4>)
 8002cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	330c      	adds	r3, #12
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	f040 80fd 	bne.w	8002eca <test_shelik+0x98a>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 8002cd0:	4984      	ldr	r1, [pc, #528]	; (8002ee4 <test_shelik+0x9a4>)
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3304      	adds	r3, #4
 8002ce0:	6819      	ldr	r1, [r3, #0]
 8002ce2:	4880      	ldr	r0, [pc, #512]	; (8002ee4 <test_shelik+0x9a4>)
 8002ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4403      	add	r3, r0
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	487c      	ldr	r0, [pc, #496]	; (8002ee8 <test_shelik+0x9a8>)
 8002cf6:	008a      	lsls	r2, r1, #2
 8002cf8:	4402      	add	r2, r0
 8002cfa:	4413      	add	r3, r2
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4b7a      	ldr	r3, [pc, #488]	; (8002eec <test_shelik+0x9ac>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d117      	bne.n	8002d38 <test_shelik+0x7f8>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 8002d08:	4976      	ldr	r1, [pc, #472]	; (8002ee4 <test_shelik+0x9a4>)
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	3304      	adds	r3, #4
 8002d18:	6819      	ldr	r1, [r3, #0]
 8002d1a:	4872      	ldr	r0, [pc, #456]	; (8002ee4 <test_shelik+0x9a4>)
 8002d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4403      	add	r3, r0
 8002d28:	3308      	adds	r3, #8
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	486e      	ldr	r0, [pc, #440]	; (8002ee8 <test_shelik+0x9a8>)
 8002d2e:	008a      	lsls	r2, r1, #2
 8002d30:	4402      	add	r2, r0
 8002d32:	4413      	add	r3, r2
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
				}
				int new_y = bul[i].position_y + 1;
 8002d38:	496a      	ldr	r1, [pc, #424]	; (8002ee4 <test_shelik+0x9a4>)
 8002d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	3308      	adds	r3, #8
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	623b      	str	r3, [r7, #32]
				if(new_y < 4){
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	dc27      	bgt.n	8002da4 <test_shelik+0x864>
					bul[i].position_y = new_y;
 8002d54:	4963      	ldr	r1, [pc, #396]	; (8002ee4 <test_shelik+0x9a4>)
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3308      	adds	r3, #8
 8002d64:	6a3a      	ldr	r2, [r7, #32]
 8002d66:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 8002d68:	495e      	ldr	r1, [pc, #376]	; (8002ee4 <test_shelik+0x9a4>)
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3304      	adds	r3, #4
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	485a      	ldr	r0, [pc, #360]	; (8002ee4 <test_shelik+0x9a4>)
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4403      	add	r3, r0
 8002d88:	3308      	adds	r3, #8
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4856      	ldr	r0, [pc, #344]	; (8002ee8 <test_shelik+0x9a8>)
 8002d8e:	008a      	lsls	r2, r1, #2
 8002d90:	4402      	add	r2, r0
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	61fb      	str	r3, [r7, #28]
				if(next_element == num_obstacle){
 8002d98:	4b55      	ldr	r3, [pc, #340]	; (8002ef0 <test_shelik+0x9b0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d127      	bne.n	8002df2 <test_shelik+0x8b2>
 8002da2:	e00a      	b.n	8002dba <test_shelik+0x87a>
					bul[i].active = 0;
 8002da4:	494f      	ldr	r1, [pc, #316]	; (8002ee4 <test_shelik+0x9a4>)
 8002da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	3310      	adds	r3, #16
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
					continue;
 8002db8:	e087      	b.n	8002eca <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002dba:	4b4c      	ldr	r3, [pc, #304]	; (8002eec <test_shelik+0x9ac>)
 8002dbc:	681c      	ldr	r4, [r3, #0]
 8002dbe:	4949      	ldr	r1, [pc, #292]	; (8002ee4 <test_shelik+0x9a4>)
 8002dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3304      	adds	r3, #4
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	4844      	ldr	r0, [pc, #272]	; (8002ee4 <test_shelik+0x9a4>)
 8002dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4403      	add	r3, r0
 8002dde:	3308      	adds	r3, #8
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b2e4      	uxtb	r4, r4
 8002de4:	4840      	ldr	r0, [pc, #256]	; (8002ee8 <test_shelik+0x9a8>)
 8002de6:	008a      	lsls	r2, r1, #2
 8002de8:	4402      	add	r2, r0
 8002dea:	4413      	add	r3, r2
 8002dec:	4622      	mov	r2, r4
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e06b      	b.n	8002eca <test_shelik+0x98a>

				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 8002df2:	4b40      	ldr	r3, [pc, #256]	; (8002ef4 <test_shelik+0x9b4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d00e      	beq.n	8002e1a <test_shelik+0x8da>
 8002dfc:	4b3e      	ldr	r3, [pc, #248]	; (8002ef8 <test_shelik+0x9b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d009      	beq.n	8002e1a <test_shelik+0x8da>
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <test_shelik+0x9bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d004      	beq.n	8002e1a <test_shelik+0x8da>
 8002e10:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <test_shelik+0x9c0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d129      	bne.n	8002e6e <test_shelik+0x92e>
					if(bul[i].player_id == 1){
 8002e1a:	4932      	ldr	r1, [pc, #200]	; (8002ee4 <test_shelik+0x9a4>)
 8002e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d10a      	bne.n	8002e44 <test_shelik+0x904>
						player2.health--;
 8002e2e:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <test_shelik+0x9c4>)
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	4a33      	ldr	r2, [pc, #204]	; (8002f04 <test_shelik+0x9c4>)
 8002e36:	6153      	str	r3, [r2, #20]
						player1.points++;
 8002e38:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <test_shelik+0x9c8>)
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	4a32      	ldr	r2, [pc, #200]	; (8002f08 <test_shelik+0x9c8>)
 8002e40:	6113      	str	r3, [r2, #16]
 8002e42:	e009      	b.n	8002e58 <test_shelik+0x918>
					}
					else{
						player1.health--;
 8002e44:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <test_shelik+0x9c8>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <test_shelik+0x9c8>)
 8002e4c:	6153      	str	r3, [r2, #20]
						player2.points++;
 8002e4e:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <test_shelik+0x9c4>)
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	3301      	adds	r3, #1
 8002e54:	4a2b      	ldr	r2, [pc, #172]	; (8002f04 <test_shelik+0x9c4>)
 8002e56:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002e58:	4922      	ldr	r1, [pc, #136]	; (8002ee4 <test_shelik+0x9a4>)
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	3310      	adds	r3, #16
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
					continue;
 8002e6c:	e02d      	b.n	8002eca <test_shelik+0x98a>
				}

				else if(next_element == num_wall){
 8002e6e:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <test_shelik+0x9cc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d10a      	bne.n	8002e8e <test_shelik+0x94e>
					bul[i].active = 0;
 8002e78:	491a      	ldr	r1, [pc, #104]	; (8002ee4 <test_shelik+0x9a4>)
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	3310      	adds	r3, #16
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
					continue;
 8002e8c:	e01d      	b.n	8002eca <test_shelik+0x98a>
				}
				else if(next_element == 0){
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11a      	bne.n	8002eca <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002e94:	4b15      	ldr	r3, [pc, #84]	; (8002eec <test_shelik+0x9ac>)
 8002e96:	681c      	ldr	r4, [r3, #0]
 8002e98:	4912      	ldr	r1, [pc, #72]	; (8002ee4 <test_shelik+0x9a4>)
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	6819      	ldr	r1, [r3, #0]
 8002eaa:	480e      	ldr	r0, [pc, #56]	; (8002ee4 <test_shelik+0x9a4>)
 8002eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4403      	add	r3, r0
 8002eb8:	3308      	adds	r3, #8
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	b2e4      	uxtb	r4, r4
 8002ebe:	480a      	ldr	r0, [pc, #40]	; (8002ee8 <test_shelik+0x9a8>)
 8002ec0:	008a      	lsls	r2, r1, #2
 8002ec2:	4402      	add	r2, r0
 8002ec4:	4413      	add	r3, r2
 8002ec6:	4622      	mov	r2, r4
 8002ec8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<10;i++){
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	3301      	adds	r3, #1
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	2b09      	cmp	r3, #9
 8002ed4:	f77f ab3b 	ble.w	800254e <test_shelik+0xe>


			}
		}
	}
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	372c      	adds	r7, #44	; 0x2c
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd90      	pop	{r4, r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000768 	.word	0x20000768
 8002ee8:	20000718 	.word	0x20000718
 8002eec:	200000a4 	.word	0x200000a4
 8002ef0:	200000ac 	.word	0x200000ac
 8002ef4:	20000094 	.word	0x20000094
 8002ef8:	20000088 	.word	0x20000088
 8002efc:	20000090 	.word	0x20000090
 8002f00:	2000008c 	.word	0x2000008c
 8002f04:	20000068 	.word	0x20000068
 8002f08:	20000048 	.word	0x20000048
 8002f0c:	200000a8 	.word	0x200000a8

08002f10 <endgame>:
void endgame(){
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0

	}
	else{

	}
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <move>:


void move(int player){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b094      	sub	sp, #80	; 0x50
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	int dir;

	if (player == 1){
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	f040 8148 	bne.w	80031c0 <move+0x2a0>
		dir = player1.direction;
 8002f30:	4b9f      	ldr	r3, [pc, #636]	; (80031b0 <move+0x290>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 8002f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d14b      	bne.n	8002fd4 <move+0xb4>
			int curr_col = player1.position_x;
 8002f3c:	4b9c      	ldr	r3, [pc, #624]	; (80031b0 <move+0x290>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	613b      	str	r3, [r7, #16]
			int curr_row = player1.position_y;
 8002f42:	4b9b      	ldr	r3, [pc, #620]	; (80031b0 <move+0x290>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	60fb      	str	r3, [r7, #12]
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f340 8275 	ble.w	800343a <move+0x51a>
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	4a97      	ldr	r2, [pc, #604]	; (80031b4 <move+0x294>)
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	441a      	add	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b95      	ldr	r3, [pc, #596]	; (80031b8 <move+0x298>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	f000 8267 	beq.w	800343a <move+0x51a>
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	4a90      	ldr	r2, [pc, #576]	; (80031b4 <move+0x294>)
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	441a      	add	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b8f      	ldr	r3, [pc, #572]	; (80031bc <move+0x29c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	f000 8259 	beq.w	800343a <move+0x51a>
				collect(lcd[curr_col - 1][curr_row], 1); //TODO add prizes
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	4a89      	ldr	r2, [pc, #548]	; (80031b4 <move+0x294>)
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	441a      	add	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4413      	add	r3, r2
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fa94 	bl	80024c8 <collect>
				lcd[curr_col][curr_row] = 0;
 8002fa0:	4a84      	ldr	r2, [pc, #528]	; (80031b4 <move+0x294>)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	441a      	add	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4413      	add	r3, r2
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player1.direction;
 8002fb0:	4b7f      	ldr	r3, [pc, #508]	; (80031b0 <move+0x290>)
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b2d1      	uxtb	r1, r2
 8002fba:	4a7e      	ldr	r2, [pc, #504]	; (80031b4 <move+0x294>)
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	441a      	add	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x - 1;
 8002fc8:	4b79      	ldr	r3, [pc, #484]	; (80031b0 <move+0x290>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	4a78      	ldr	r2, [pc, #480]	; (80031b0 <move+0x290>)
 8002fd0:	6053      	str	r3, [r2, #4]
				lcd[curr_col][curr_row + 1] = player2.direction;
				player2.position_y = player2.position_y + 1;
			}
		}
	}
}
 8002fd2:	e232      	b.n	800343a <move+0x51a>
		}else if (dir == 2){
 8002fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d14b      	bne.n	8003072 <move+0x152>
			int curr_col = player1.position_x;
 8002fda:	4b75      	ldr	r3, [pc, #468]	; (80031b0 <move+0x290>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61bb      	str	r3, [r7, #24]
			int curr_row = player1.position_y;
 8002fe0:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <move+0x290>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	617b      	str	r3, [r7, #20]
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f340 8226 	ble.w	800343a <move+0x51a>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	4970      	ldr	r1, [pc, #448]	; (80031b4 <move+0x294>)
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	0092      	lsls	r2, r2, #2
 8002ff8:	440a      	add	r2, r1
 8002ffa:	4413      	add	r3, r2
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <move+0x298>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	f000 8218 	beq.w	800343a <move+0x51a>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	3b01      	subs	r3, #1
 800300e:	4969      	ldr	r1, [pc, #420]	; (80031b4 <move+0x294>)
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	0092      	lsls	r2, r2, #2
 8003014:	440a      	add	r2, r1
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	4b67      	ldr	r3, [pc, #412]	; (80031bc <move+0x29c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	f000 820a 	beq.w	800343a <move+0x51a>
				collect(lcd[curr_col][curr_row - 1], 1); //TODO add prizes
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	3b01      	subs	r3, #1
 800302a:	4962      	ldr	r1, [pc, #392]	; (80031b4 <move+0x294>)
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	440a      	add	r2, r1
 8003032:	4413      	add	r3, r2
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2101      	movs	r1, #1
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fa45 	bl	80024c8 <collect>
				lcd[curr_col][curr_row] = 0;
 800303e:	4a5d      	ldr	r2, [pc, #372]	; (80031b4 <move+0x294>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	441a      	add	r2, r3
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	4413      	add	r3, r2
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player1.direction;
 800304e:	4b58      	ldr	r3, [pc, #352]	; (80031b0 <move+0x290>)
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3b01      	subs	r3, #1
 8003056:	b2d0      	uxtb	r0, r2
 8003058:	4956      	ldr	r1, [pc, #344]	; (80031b4 <move+0x294>)
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	0092      	lsls	r2, r2, #2
 800305e:	440a      	add	r2, r1
 8003060:	4413      	add	r3, r2
 8003062:	4602      	mov	r2, r0
 8003064:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y - 1;
 8003066:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <move+0x290>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	3b01      	subs	r3, #1
 800306c:	4a50      	ldr	r2, [pc, #320]	; (80031b0 <move+0x290>)
 800306e:	6093      	str	r3, [r2, #8]
}
 8003070:	e1e3      	b.n	800343a <move+0x51a>
		}else if (dir == 3){
 8003072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003074:	2b03      	cmp	r3, #3
 8003076:	d14b      	bne.n	8003110 <move+0x1f0>
			int curr_col = player1.position_x;
 8003078:	4b4d      	ldr	r3, [pc, #308]	; (80031b0 <move+0x290>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	623b      	str	r3, [r7, #32]
			int curr_row = player1.position_y;
 800307e:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <move+0x290>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	61fb      	str	r3, [r7, #28]
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	2b12      	cmp	r3, #18
 8003088:	f300 81d7 	bgt.w	800343a <move+0x51a>
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	3301      	adds	r3, #1
 8003090:	4a48      	ldr	r2, [pc, #288]	; (80031b4 <move+0x294>)
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	441a      	add	r2, r3
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	4413      	add	r3, r2
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4b46      	ldr	r3, [pc, #280]	; (80031b8 <move+0x298>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	f000 81c9 	beq.w	800343a <move+0x51a>
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	3301      	adds	r3, #1
 80030ac:	4a41      	ldr	r2, [pc, #260]	; (80031b4 <move+0x294>)
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	441a      	add	r2, r3
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	4413      	add	r3, r2
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b40      	ldr	r3, [pc, #256]	; (80031bc <move+0x29c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	f000 81bb 	beq.w	800343a <move+0x51a>
				collect(lcd[curr_col + 1][curr_row], 1); //TODO add prizes
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	3301      	adds	r3, #1
 80030c8:	4a3a      	ldr	r2, [pc, #232]	; (80031b4 <move+0x294>)
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	441a      	add	r2, r3
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2101      	movs	r1, #1
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff f9f6 	bl	80024c8 <collect>
				lcd[curr_col][curr_row] = 0;
 80030dc:	4a35      	ldr	r2, [pc, #212]	; (80031b4 <move+0x294>)
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	441a      	add	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	4413      	add	r3, r2
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player1.direction;
 80030ec:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <move+0x290>)
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	3301      	adds	r3, #1
 80030f4:	b2d1      	uxtb	r1, r2
 80030f6:	4a2f      	ldr	r2, [pc, #188]	; (80031b4 <move+0x294>)
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	441a      	add	r2, r3
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	4413      	add	r3, r2
 8003100:	460a      	mov	r2, r1
 8003102:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x + 1;
 8003104:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <move+0x290>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	3301      	adds	r3, #1
 800310a:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <move+0x290>)
 800310c:	6053      	str	r3, [r2, #4]
}
 800310e:	e194      	b.n	800343a <move+0x51a>
		}else if (dir == 4){
 8003110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003112:	2b04      	cmp	r3, #4
 8003114:	f040 8191 	bne.w	800343a <move+0x51a>
			int curr_col = player1.position_x;
 8003118:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <move+0x290>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
			int curr_row = player1.position_y;
 800311e:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <move+0x290>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	2b02      	cmp	r3, #2
 8003128:	f300 8187 	bgt.w	800343a <move+0x51a>
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	3301      	adds	r3, #1
 8003130:	4920      	ldr	r1, [pc, #128]	; (80031b4 <move+0x294>)
 8003132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003134:	0092      	lsls	r2, r2, #2
 8003136:	440a      	add	r2, r1
 8003138:	4413      	add	r3, r2
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <move+0x298>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	f000 8179 	beq.w	800343a <move+0x51a>
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	3301      	adds	r3, #1
 800314c:	4919      	ldr	r1, [pc, #100]	; (80031b4 <move+0x294>)
 800314e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003150:	0092      	lsls	r2, r2, #2
 8003152:	440a      	add	r2, r1
 8003154:	4413      	add	r3, r2
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	4b18      	ldr	r3, [pc, #96]	; (80031bc <move+0x29c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	f000 816b 	beq.w	800343a <move+0x51a>
				collect(lcd[curr_col][curr_row + 1], 1); //TODO add prizes
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	3301      	adds	r3, #1
 8003168:	4912      	ldr	r1, [pc, #72]	; (80031b4 <move+0x294>)
 800316a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316c:	0092      	lsls	r2, r2, #2
 800316e:	440a      	add	r2, r1
 8003170:	4413      	add	r3, r2
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2101      	movs	r1, #1
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff f9a6 	bl	80024c8 <collect>
				lcd[curr_col][curr_row] = 0;
 800317c:	4a0d      	ldr	r2, [pc, #52]	; (80031b4 <move+0x294>)
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	441a      	add	r2, r3
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	4413      	add	r3, r2
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player1.direction;
 800318c:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <move+0x290>)
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	3301      	adds	r3, #1
 8003194:	b2d0      	uxtb	r0, r2
 8003196:	4907      	ldr	r1, [pc, #28]	; (80031b4 <move+0x294>)
 8003198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800319a:	0092      	lsls	r2, r2, #2
 800319c:	440a      	add	r2, r1
 800319e:	4413      	add	r3, r2
 80031a0:	4602      	mov	r2, r0
 80031a2:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y + 1;
 80031a4:	4b02      	ldr	r3, [pc, #8]	; (80031b0 <move+0x290>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	3301      	adds	r3, #1
 80031aa:	4a01      	ldr	r2, [pc, #4]	; (80031b0 <move+0x290>)
 80031ac:	6093      	str	r3, [r2, #8]
}
 80031ae:	e144      	b.n	800343a <move+0x51a>
 80031b0:	20000048 	.word	0x20000048
 80031b4:	20000718 	.word	0x20000718
 80031b8:	200000ac 	.word	0x200000ac
 80031bc:	200000a8 	.word	0x200000a8
	}else if (player == 2){
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	f040 8139 	bne.w	800343a <move+0x51a>
		dir = player2.direction;
 80031c8:	4b9e      	ldr	r3, [pc, #632]	; (8003444 <move+0x524>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 80031ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d14b      	bne.n	800326c <move+0x34c>
			int curr_col = player2.position_x;
 80031d4:	4b9b      	ldr	r3, [pc, #620]	; (8003444 <move+0x524>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	633b      	str	r3, [r7, #48]	; 0x30
			int curr_row = player2.position_y;
 80031da:	4b9a      	ldr	r3, [pc, #616]	; (8003444 <move+0x524>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f340 8129 	ble.w	800343a <move+0x51a>
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	3b01      	subs	r3, #1
 80031ec:	4a96      	ldr	r2, [pc, #600]	; (8003448 <move+0x528>)
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	441a      	add	r2, r3
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	4413      	add	r3, r2
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b94      	ldr	r3, [pc, #592]	; (800344c <move+0x52c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	f000 811b 	beq.w	800343a <move+0x51a>
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	3b01      	subs	r3, #1
 8003208:	4a8f      	ldr	r2, [pc, #572]	; (8003448 <move+0x528>)
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	441a      	add	r2, r3
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	4413      	add	r3, r2
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	4b8e      	ldr	r3, [pc, #568]	; (8003450 <move+0x530>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	f000 810d 	beq.w	800343a <move+0x51a>
				collect(lcd[curr_col - 1][curr_row], 2); //TODO add prizes
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	3b01      	subs	r3, #1
 8003224:	4a88      	ldr	r2, [pc, #544]	; (8003448 <move+0x528>)
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	441a      	add	r2, r3
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322c:	4413      	add	r3, r2
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2102      	movs	r1, #2
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff f948 	bl	80024c8 <collect>
				lcd[curr_col][curr_row] = 0;
 8003238:	4a83      	ldr	r2, [pc, #524]	; (8003448 <move+0x528>)
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	441a      	add	r2, r3
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	4413      	add	r3, r2
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player2.direction;
 8003248:	4b7e      	ldr	r3, [pc, #504]	; (8003444 <move+0x524>)
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	3b01      	subs	r3, #1
 8003250:	b2d1      	uxtb	r1, r2
 8003252:	4a7d      	ldr	r2, [pc, #500]	; (8003448 <move+0x528>)
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	441a      	add	r2, r3
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325a:	4413      	add	r3, r2
 800325c:	460a      	mov	r2, r1
 800325e:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x - 1;
 8003260:	4b78      	ldr	r3, [pc, #480]	; (8003444 <move+0x524>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	3b01      	subs	r3, #1
 8003266:	4a77      	ldr	r2, [pc, #476]	; (8003444 <move+0x524>)
 8003268:	6053      	str	r3, [r2, #4]
}
 800326a:	e0e6      	b.n	800343a <move+0x51a>
		}else if (dir == 2){
 800326c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800326e:	2b02      	cmp	r3, #2
 8003270:	d14b      	bne.n	800330a <move+0x3ea>
			int curr_col = player2.position_x;
 8003272:	4b74      	ldr	r3, [pc, #464]	; (8003444 <move+0x524>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	63bb      	str	r3, [r7, #56]	; 0x38
			int curr_row = player2.position_y;
 8003278:	4b72      	ldr	r3, [pc, #456]	; (8003444 <move+0x524>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 800327e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003280:	2b00      	cmp	r3, #0
 8003282:	f340 80da 	ble.w	800343a <move+0x51a>
 8003286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003288:	3b01      	subs	r3, #1
 800328a:	496f      	ldr	r1, [pc, #444]	; (8003448 <move+0x528>)
 800328c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800328e:	0092      	lsls	r2, r2, #2
 8003290:	440a      	add	r2, r1
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	4b6c      	ldr	r3, [pc, #432]	; (800344c <move+0x52c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	f000 80cc 	beq.w	800343a <move+0x51a>
 80032a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a4:	3b01      	subs	r3, #1
 80032a6:	4968      	ldr	r1, [pc, #416]	; (8003448 <move+0x528>)
 80032a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032aa:	0092      	lsls	r2, r2, #2
 80032ac:	440a      	add	r2, r1
 80032ae:	4413      	add	r3, r2
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	4b66      	ldr	r3, [pc, #408]	; (8003450 <move+0x530>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	f000 80be 	beq.w	800343a <move+0x51a>
				collect(lcd[curr_col][curr_row - 1], 2); //TODO add prizes
 80032be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c0:	3b01      	subs	r3, #1
 80032c2:	4961      	ldr	r1, [pc, #388]	; (8003448 <move+0x528>)
 80032c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032c6:	0092      	lsls	r2, r2, #2
 80032c8:	440a      	add	r2, r1
 80032ca:	4413      	add	r3, r2
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2102      	movs	r1, #2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff f8f9 	bl	80024c8 <collect>
				lcd[curr_col][curr_row] = 0;
 80032d6:	4a5c      	ldr	r2, [pc, #368]	; (8003448 <move+0x528>)
 80032d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	441a      	add	r2, r3
 80032de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e0:	4413      	add	r3, r2
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player2.direction;
 80032e6:	4b57      	ldr	r3, [pc, #348]	; (8003444 <move+0x524>)
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b2d0      	uxtb	r0, r2
 80032f0:	4955      	ldr	r1, [pc, #340]	; (8003448 <move+0x528>)
 80032f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f4:	0092      	lsls	r2, r2, #2
 80032f6:	440a      	add	r2, r1
 80032f8:	4413      	add	r3, r2
 80032fa:	4602      	mov	r2, r0
 80032fc:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y - 1;
 80032fe:	4b51      	ldr	r3, [pc, #324]	; (8003444 <move+0x524>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	3b01      	subs	r3, #1
 8003304:	4a4f      	ldr	r2, [pc, #316]	; (8003444 <move+0x524>)
 8003306:	6093      	str	r3, [r2, #8]
}
 8003308:	e097      	b.n	800343a <move+0x51a>
		}else if (dir == 3){
 800330a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330c:	2b03      	cmp	r3, #3
 800330e:	d149      	bne.n	80033a4 <move+0x484>
			int curr_col = player2.position_x;
 8003310:	4b4c      	ldr	r3, [pc, #304]	; (8003444 <move+0x524>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	643b      	str	r3, [r7, #64]	; 0x40
			int curr_row = player2.position_y;
 8003316:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <move+0x524>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 800331c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331e:	2b12      	cmp	r3, #18
 8003320:	f300 808b 	bgt.w	800343a <move+0x51a>
 8003324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003326:	3301      	adds	r3, #1
 8003328:	4a47      	ldr	r2, [pc, #284]	; (8003448 <move+0x528>)
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	441a      	add	r2, r3
 800332e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003330:	4413      	add	r3, r2
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	4b45      	ldr	r3, [pc, #276]	; (800344c <move+0x52c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d07d      	beq.n	800343a <move+0x51a>
 800333e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003340:	3301      	adds	r3, #1
 8003342:	4a41      	ldr	r2, [pc, #260]	; (8003448 <move+0x528>)
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	441a      	add	r2, r3
 8003348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800334a:	4413      	add	r3, r2
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	4b3f      	ldr	r3, [pc, #252]	; (8003450 <move+0x530>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d070      	beq.n	800343a <move+0x51a>
				collect(lcd[curr_col + 1][curr_row], 2); //TODO add prizes
 8003358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335a:	3301      	adds	r3, #1
 800335c:	4a3a      	ldr	r2, [pc, #232]	; (8003448 <move+0x528>)
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	441a      	add	r2, r3
 8003362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003364:	4413      	add	r3, r2
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2102      	movs	r1, #2
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff f8ac 	bl	80024c8 <collect>
				lcd[curr_col][curr_row] = 0;
 8003370:	4a35      	ldr	r2, [pc, #212]	; (8003448 <move+0x528>)
 8003372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	441a      	add	r2, r3
 8003378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337a:	4413      	add	r3, r2
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player2.direction;
 8003380:	4b30      	ldr	r3, [pc, #192]	; (8003444 <move+0x524>)
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003386:	3301      	adds	r3, #1
 8003388:	b2d1      	uxtb	r1, r2
 800338a:	4a2f      	ldr	r2, [pc, #188]	; (8003448 <move+0x528>)
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	441a      	add	r2, r3
 8003390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003392:	4413      	add	r3, r2
 8003394:	460a      	mov	r2, r1
 8003396:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x + 1;
 8003398:	4b2a      	ldr	r3, [pc, #168]	; (8003444 <move+0x524>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	3301      	adds	r3, #1
 800339e:	4a29      	ldr	r2, [pc, #164]	; (8003444 <move+0x524>)
 80033a0:	6053      	str	r3, [r2, #4]
}
 80033a2:	e04a      	b.n	800343a <move+0x51a>
		}else if (dir == 4){
 80033a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d147      	bne.n	800343a <move+0x51a>
			int curr_col = player2.position_x;
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <move+0x524>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	64bb      	str	r3, [r7, #72]	; 0x48
			int curr_row = player2.position_y;
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <move+0x524>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	647b      	str	r3, [r7, #68]	; 0x44
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 80033b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	dc3e      	bgt.n	800343a <move+0x51a>
 80033bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033be:	3301      	adds	r3, #1
 80033c0:	4921      	ldr	r1, [pc, #132]	; (8003448 <move+0x528>)
 80033c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033c4:	0092      	lsls	r2, r2, #2
 80033c6:	440a      	add	r2, r1
 80033c8:	4413      	add	r3, r2
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b1f      	ldr	r3, [pc, #124]	; (800344c <move+0x52c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d031      	beq.n	800343a <move+0x51a>
 80033d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d8:	3301      	adds	r3, #1
 80033da:	491b      	ldr	r1, [pc, #108]	; (8003448 <move+0x528>)
 80033dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	440a      	add	r2, r1
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <move+0x530>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d024      	beq.n	800343a <move+0x51a>
				collect(lcd[curr_col][curr_row + 1], 2); //TODO add prizes
 80033f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f2:	3301      	adds	r3, #1
 80033f4:	4914      	ldr	r1, [pc, #80]	; (8003448 <move+0x528>)
 80033f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033f8:	0092      	lsls	r2, r2, #2
 80033fa:	440a      	add	r2, r1
 80033fc:	4413      	add	r3, r2
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2102      	movs	r1, #2
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff f860 	bl	80024c8 <collect>
				lcd[curr_col][curr_row] = 0;
 8003408:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <move+0x528>)
 800340a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	441a      	add	r2, r3
 8003410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003412:	4413      	add	r3, r2
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player2.direction;
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <move+0x524>)
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341e:	3301      	adds	r3, #1
 8003420:	b2d0      	uxtb	r0, r2
 8003422:	4909      	ldr	r1, [pc, #36]	; (8003448 <move+0x528>)
 8003424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003426:	0092      	lsls	r2, r2, #2
 8003428:	440a      	add	r2, r1
 800342a:	4413      	add	r3, r2
 800342c:	4602      	mov	r2, r0
 800342e:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y + 1;
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <move+0x524>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	3301      	adds	r3, #1
 8003436:	4a03      	ldr	r2, [pc, #12]	; (8003444 <move+0x524>)
 8003438:	6093      	str	r3, [r2, #8]
}
 800343a:	bf00      	nop
 800343c:	3750      	adds	r7, #80	; 0x50
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000068 	.word	0x20000068
 8003448:	20000718 	.word	0x20000718
 800344c:	200000ac 	.word	0x200000ac
 8003450:	200000a8 	.word	0x200000a8

08003454 <uart_rx_enable_it>:

char character;
char input[50];
int  index_arr = 0;

void uart_rx_enable_it(void) {
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &character, 1);
 8003458:	2201      	movs	r2, #1
 800345a:	4903      	ldr	r1, [pc, #12]	; (8003468 <uart_rx_enable_it+0x14>)
 800345c:	4803      	ldr	r0, [pc, #12]	; (800346c <uart_rx_enable_it+0x18>)
 800345e:	f004 ff55 	bl	800830c <HAL_UART_Receive_IT>
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000834 	.word	0x20000834
 800346c:	20000378 	.word	0x20000378

08003470 <HAL_UART_RxCpltCallback>:


int mute_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003470:	b580      	push	{r7, lr}
 8003472:	b0cc      	sub	sp, #304	; 0x130
 8003474:	af00      	add	r7, sp, #0
 8003476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800347a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800347e:	6018      	str	r0, [r3, #0]
	char data[100];
    char prefix1[] = "[name1]:";
 8003480:	4aa9      	ldr	r2, [pc, #676]	; (8003728 <HAL_UART_RxCpltCallback+0x2b8>)
 8003482:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003486:	ca07      	ldmia	r2, {r0, r1, r2}
 8003488:	c303      	stmia	r3!, {r0, r1}
 800348a:	701a      	strb	r2, [r3, #0]
    char prefix2[] = "[name2]:";
 800348c:	4aa7      	ldr	r2, [pc, #668]	; (800372c <HAL_UART_RxCpltCallback+0x2bc>)
 800348e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003492:	ca07      	ldmia	r2, {r0, r1, r2}
 8003494:	c303      	stmia	r3!, {r0, r1}
 8003496:	701a      	strb	r2, [r3, #0]
    char prefix3[] = "[mute]:";
 8003498:	4aa5      	ldr	r2, [pc, #660]	; (8003730 <HAL_UART_RxCpltCallback+0x2c0>)
 800349a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800349e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034a2:	e883 0003 	stmia.w	r3, {r0, r1}
    char prefix4[] = "[arrow]:";
 80034a6:	4aa3      	ldr	r2, [pc, #652]	; (8003734 <HAL_UART_RxCpltCallback+0x2c4>)
 80034a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80034ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80034ae:	c303      	stmia	r3!, {r0, r1}
 80034b0:	701a      	strb	r2, [r3, #0]
    char prefix5[] = "[health]:";
 80034b2:	4aa1      	ldr	r2, [pc, #644]	; (8003738 <HAL_UART_RxCpltCallback+0x2c8>)
 80034b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80034ba:	c303      	stmia	r3!, {r0, r1}
 80034bc:	801a      	strh	r2, [r3, #0]
    int temp;

    if (huart->Instance == USART3){
 80034be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80034c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a9c      	ldr	r2, [pc, #624]	; (800373c <HAL_UART_RxCpltCallback+0x2cc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	f040 81b8 	bne.w	8003842 <HAL_UART_RxCpltCallback+0x3d2>

    	if(character != 10){
 80034d2:	4b9b      	ldr	r3, [pc, #620]	; (8003740 <HAL_UART_RxCpltCallback+0x2d0>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b0a      	cmp	r3, #10
 80034d8:	d009      	beq.n	80034ee <HAL_UART_RxCpltCallback+0x7e>
    		input[index_arr++] = character;
 80034da:	4b9a      	ldr	r3, [pc, #616]	; (8003744 <HAL_UART_RxCpltCallback+0x2d4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	4998      	ldr	r1, [pc, #608]	; (8003744 <HAL_UART_RxCpltCallback+0x2d4>)
 80034e2:	600a      	str	r2, [r1, #0]
 80034e4:	4a96      	ldr	r2, [pc, #600]	; (8003740 <HAL_UART_RxCpltCallback+0x2d0>)
 80034e6:	7811      	ldrb	r1, [r2, #0]
 80034e8:	4a97      	ldr	r2, [pc, #604]	; (8003748 <HAL_UART_RxCpltCallback+0x2d8>)
 80034ea:	54d1      	strb	r1, [r2, r3]
 80034ec:	e1a9      	b.n	8003842 <HAL_UART_RxCpltCallback+0x3d2>
    	}else{
    		input[index_arr++] = '\0';
 80034ee:	4b95      	ldr	r3, [pc, #596]	; (8003744 <HAL_UART_RxCpltCallback+0x2d4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	4993      	ldr	r1, [pc, #588]	; (8003744 <HAL_UART_RxCpltCallback+0x2d4>)
 80034f6:	600a      	str	r2, [r1, #0]
 80034f8:	4a93      	ldr	r2, [pc, #588]	; (8003748 <HAL_UART_RxCpltCallback+0x2d8>)
 80034fa:	2100      	movs	r1, #0
 80034fc:	54d1      	strb	r1, [r2, r3]
			index_arr = 0;
 80034fe:	4b91      	ldr	r3, [pc, #580]	; (8003744 <HAL_UART_RxCpltCallback+0x2d4>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
			int value;
//			HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
//			sprintf(timeStr, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
			if (strncmp(input, prefix1, strlen(prefix1)) == 0){ //name1
 8003504:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003508:	4618      	mov	r0, r3
 800350a:	f7fc fe61 	bl	80001d0 <strlen>
 800350e:	4602      	mov	r2, r0
 8003510:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003514:	4619      	mov	r1, r3
 8003516:	488c      	ldr	r0, [pc, #560]	; (8003748 <HAL_UART_RxCpltCallback+0x2d8>)
 8003518:	f006 fa0f 	bl	800993a <strncmp>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d126      	bne.n	8003570 <HAL_UART_RxCpltCallback+0x100>
				if (sscanf(input + strlen(prefix1), "%c", &player1.player_name) == 1) {
 8003522:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003526:	4618      	mov	r0, r3
 8003528:	f7fc fe52 	bl	80001d0 <strlen>
 800352c:	4603      	mov	r3, r0
 800352e:	4a86      	ldr	r2, [pc, #536]	; (8003748 <HAL_UART_RxCpltCallback+0x2d8>)
 8003530:	4413      	add	r3, r2
 8003532:	4a86      	ldr	r2, [pc, #536]	; (800374c <HAL_UART_RxCpltCallback+0x2dc>)
 8003534:	4986      	ldr	r1, [pc, #536]	; (8003750 <HAL_UART_RxCpltCallback+0x2e0>)
 8003536:	4618      	mov	r0, r3
 8003538:	f006 f98e 	bl	8009858 <siscanf>
 800353c:	4603      	mov	r3, r0
 800353e:	2b01      	cmp	r3, #1
 8003540:	f040 817f 	bne.w	8003842 <HAL_UART_RxCpltCallback+0x3d2>
					char data[100];
					int n = sprintf(data, "saved %c \n", player1.player_name);
 8003544:	4b81      	ldr	r3, [pc, #516]	; (800374c <HAL_UART_RxCpltCallback+0x2dc>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	f107 0308 	add.w	r3, r7, #8
 800354e:	4981      	ldr	r1, [pc, #516]	; (8003754 <HAL_UART_RxCpltCallback+0x2e4>)
 8003550:	4618      	mov	r0, r3
 8003552:	f006 f961 	bl	8009818 <siprintf>
 8003556:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
					HAL_UART_Transmit(&huart3, data, n, 1000);
 800355a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800355e:	b29a      	uxth	r2, r3
 8003560:	f107 0108 	add.w	r1, r7, #8
 8003564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003568:	487b      	ldr	r0, [pc, #492]	; (8003758 <HAL_UART_RxCpltCallback+0x2e8>)
 800356a:	f004 fe45 	bl	80081f8 <HAL_UART_Transmit>
 800356e:	e168      	b.n	8003842 <HAL_UART_RxCpltCallback+0x3d2>
				}
			}else if (strncmp(input, prefix2, strlen(prefix2)) == 0){ //name2
 8003570:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003574:	4618      	mov	r0, r3
 8003576:	f7fc fe2b 	bl	80001d0 <strlen>
 800357a:	4602      	mov	r2, r0
 800357c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003580:	4619      	mov	r1, r3
 8003582:	4871      	ldr	r0, [pc, #452]	; (8003748 <HAL_UART_RxCpltCallback+0x2d8>)
 8003584:	f006 f9d9 	bl	800993a <strncmp>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d126      	bne.n	80035dc <HAL_UART_RxCpltCallback+0x16c>
				if (sscanf(input + strlen(prefix2), "%c", &player2.player_name) == 1) {
 800358e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003592:	4618      	mov	r0, r3
 8003594:	f7fc fe1c 	bl	80001d0 <strlen>
 8003598:	4603      	mov	r3, r0
 800359a:	4a6b      	ldr	r2, [pc, #428]	; (8003748 <HAL_UART_RxCpltCallback+0x2d8>)
 800359c:	4413      	add	r3, r2
 800359e:	4a6f      	ldr	r2, [pc, #444]	; (800375c <HAL_UART_RxCpltCallback+0x2ec>)
 80035a0:	496b      	ldr	r1, [pc, #428]	; (8003750 <HAL_UART_RxCpltCallback+0x2e0>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f006 f958 	bl	8009858 <siscanf>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	f040 8149 	bne.w	8003842 <HAL_UART_RxCpltCallback+0x3d2>
					char data[100];
					int n = sprintf(data, "saved %c \n", player2.player_name);
 80035b0:	4b6a      	ldr	r3, [pc, #424]	; (800375c <HAL_UART_RxCpltCallback+0x2ec>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	f107 0308 	add.w	r3, r7, #8
 80035ba:	4966      	ldr	r1, [pc, #408]	; (8003754 <HAL_UART_RxCpltCallback+0x2e4>)
 80035bc:	4618      	mov	r0, r3
 80035be:	f006 f92b 	bl	8009818 <siprintf>
 80035c2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
					HAL_UART_Transmit(&huart3, data, n, 1000);
 80035c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	f107 0108 	add.w	r1, r7, #8
 80035d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035d4:	4860      	ldr	r0, [pc, #384]	; (8003758 <HAL_UART_RxCpltCallback+0x2e8>)
 80035d6:	f004 fe0f 	bl	80081f8 <HAL_UART_Transmit>
 80035da:	e132      	b.n	8003842 <HAL_UART_RxCpltCallback+0x3d2>
				}
			}else if (strncmp(input, prefix3, strlen(prefix3)) == 0){ //name2
 80035dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fc fdf5 	bl	80001d0 <strlen>
 80035e6:	4602      	mov	r2, r0
 80035e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80035ec:	4619      	mov	r1, r3
 80035ee:	4856      	ldr	r0, [pc, #344]	; (8003748 <HAL_UART_RxCpltCallback+0x2d8>)
 80035f0:	f006 f9a3 	bl	800993a <strncmp>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d142      	bne.n	8003680 <HAL_UART_RxCpltCallback+0x210>
				if (sscanf(input + strlen(prefix3), "%d", &temp) == 1) {
 80035fa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc fde6 	bl	80001d0 <strlen>
 8003604:	4603      	mov	r3, r0
 8003606:	4a50      	ldr	r2, [pc, #320]	; (8003748 <HAL_UART_RxCpltCallback+0x2d8>)
 8003608:	4413      	add	r3, r2
 800360a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800360e:	4954      	ldr	r1, [pc, #336]	; (8003760 <HAL_UART_RxCpltCallback+0x2f0>)
 8003610:	4618      	mov	r0, r3
 8003612:	f006 f921 	bl	8009858 <siscanf>
 8003616:	4603      	mov	r3, r0
 8003618:	2b01      	cmp	r3, #1
 800361a:	f040 8112 	bne.w	8003842 <HAL_UART_RxCpltCallback+0x3d2>
					if (temp >= 0 && temp <=1){
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	2b00      	cmp	r3, #0
 8003622:	db1a      	blt.n	800365a <HAL_UART_RxCpltCallback+0x1ea>
 8003624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003626:	2b01      	cmp	r3, #1
 8003628:	dc17      	bgt.n	800365a <HAL_UART_RxCpltCallback+0x1ea>
						mute_flag = temp;
 800362a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362c:	4a4d      	ldr	r2, [pc, #308]	; (8003764 <HAL_UART_RxCpltCallback+0x2f4>)
 800362e:	6013      	str	r3, [r2, #0]
						char data[100];
						int n = sprintf(data, "mute: %d\n", mute_flag);
 8003630:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <HAL_UART_RxCpltCallback+0x2f4>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	f107 0308 	add.w	r3, r7, #8
 8003638:	494b      	ldr	r1, [pc, #300]	; (8003768 <HAL_UART_RxCpltCallback+0x2f8>)
 800363a:	4618      	mov	r0, r3
 800363c:	f006 f8ec 	bl	8009818 <siprintf>
 8003640:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8003644:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003648:	b29a      	uxth	r2, r3
 800364a:	f107 0108 	add.w	r1, r7, #8
 800364e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003652:	4841      	ldr	r0, [pc, #260]	; (8003758 <HAL_UART_RxCpltCallback+0x2e8>)
 8003654:	f004 fdd0 	bl	80081f8 <HAL_UART_Transmit>
					if (temp >= 0 && temp <=1){
 8003658:	e0f3      	b.n	8003842 <HAL_UART_RxCpltCallback+0x3d2>
					}else{
						char data[100];
						int n = sprintf(data, "Error mute flag\n");
 800365a:	f107 0308 	add.w	r3, r7, #8
 800365e:	4943      	ldr	r1, [pc, #268]	; (800376c <HAL_UART_RxCpltCallback+0x2fc>)
 8003660:	4618      	mov	r0, r3
 8003662:	f006 f8d9 	bl	8009818 <siprintf>
 8003666:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
						HAL_UART_Transmit(&huart3, data, n, 1000);
 800366a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366e:	b29a      	uxth	r2, r3
 8003670:	f107 0108 	add.w	r1, r7, #8
 8003674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003678:	4837      	ldr	r0, [pc, #220]	; (8003758 <HAL_UART_RxCpltCallback+0x2e8>)
 800367a:	f004 fdbd 	bl	80081f8 <HAL_UART_Transmit>
 800367e:	e0e0      	b.n	8003842 <HAL_UART_RxCpltCallback+0x3d2>
					}
				}
			}else if (strncmp(input, prefix4, strlen(prefix4)) == 0){ //name2
 8003680:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003684:	4618      	mov	r0, r3
 8003686:	f7fc fda3 	bl	80001d0 <strlen>
 800368a:	4602      	mov	r2, r0
 800368c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003690:	4619      	mov	r1, r3
 8003692:	482d      	ldr	r0, [pc, #180]	; (8003748 <HAL_UART_RxCpltCallback+0x2d8>)
 8003694:	f006 f951 	bl	800993a <strncmp>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d16c      	bne.n	8003778 <HAL_UART_RxCpltCallback+0x308>
				if (sscanf(input + strlen(prefix4), "%d", &temp) == 1) {
 800369e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fc fd94 	bl	80001d0 <strlen>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4a27      	ldr	r2, [pc, #156]	; (8003748 <HAL_UART_RxCpltCallback+0x2d8>)
 80036ac:	4413      	add	r3, r2
 80036ae:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80036b2:	492b      	ldr	r1, [pc, #172]	; (8003760 <HAL_UART_RxCpltCallback+0x2f0>)
 80036b4:	4618      	mov	r0, r3
 80036b6:	f006 f8cf 	bl	8009858 <siscanf>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b01      	cmp	r3, #1
 80036be:	f040 80c0 	bne.w	8003842 <HAL_UART_RxCpltCallback+0x3d2>
					if (temp >= 1 && temp <= 9){
 80036c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	dd1c      	ble.n	8003702 <HAL_UART_RxCpltCallback+0x292>
 80036c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ca:	2b09      	cmp	r3, #9
 80036cc:	dc19      	bgt.n	8003702 <HAL_UART_RxCpltCallback+0x292>
						player1.arrow = temp;
 80036ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d0:	4a1e      	ldr	r2, [pc, #120]	; (800374c <HAL_UART_RxCpltCallback+0x2dc>)
 80036d2:	6193      	str	r3, [r2, #24]
						player2.arrow = temp;
 80036d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d6:	4a21      	ldr	r2, [pc, #132]	; (800375c <HAL_UART_RxCpltCallback+0x2ec>)
 80036d8:	6193      	str	r3, [r2, #24]
						char data[100];
						int n = sprintf(data, "Arrow number is: %d\n", temp);
 80036da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	4923      	ldr	r1, [pc, #140]	; (8003770 <HAL_UART_RxCpltCallback+0x300>)
 80036e2:	4618      	mov	r0, r3
 80036e4:	f006 f898 	bl	8009818 <siprintf>
 80036e8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
						HAL_UART_Transmit(&huart3, data, n, 1000);
 80036ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	f107 0108 	add.w	r1, r7, #8
 80036f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036fa:	4817      	ldr	r0, [pc, #92]	; (8003758 <HAL_UART_RxCpltCallback+0x2e8>)
 80036fc:	f004 fd7c 	bl	80081f8 <HAL_UART_Transmit>
					if (temp >= 1 && temp <= 9){
 8003700:	e09f      	b.n	8003842 <HAL_UART_RxCpltCallback+0x3d2>
					}else{
						char data[100];
						int n = sprintf(data, "Error arrow number\n");
 8003702:	f107 0308 	add.w	r3, r7, #8
 8003706:	491b      	ldr	r1, [pc, #108]	; (8003774 <HAL_UART_RxCpltCallback+0x304>)
 8003708:	4618      	mov	r0, r3
 800370a:	f006 f885 	bl	8009818 <siprintf>
 800370e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8003712:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003716:	b29a      	uxth	r2, r3
 8003718:	f107 0108 	add.w	r1, r7, #8
 800371c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003720:	480d      	ldr	r0, [pc, #52]	; (8003758 <HAL_UART_RxCpltCallback+0x2e8>)
 8003722:	f004 fd69 	bl	80081f8 <HAL_UART_Transmit>
 8003726:	e08c      	b.n	8003842 <HAL_UART_RxCpltCallback+0x3d2>
 8003728:	0800b6dc 	.word	0x0800b6dc
 800372c:	0800b6e8 	.word	0x0800b6e8
 8003730:	0800b6f4 	.word	0x0800b6f4
 8003734:	0800b6fc 	.word	0x0800b6fc
 8003738:	0800b708 	.word	0x0800b708
 800373c:	40004800 	.word	0x40004800
 8003740:	20000834 	.word	0x20000834
 8003744:	2000086c 	.word	0x2000086c
 8003748:	20000838 	.word	0x20000838
 800374c:	20000048 	.word	0x20000048
 8003750:	0800b638 	.word	0x0800b638
 8003754:	0800b63c 	.word	0x0800b63c
 8003758:	20000378 	.word	0x20000378
 800375c:	20000068 	.word	0x20000068
 8003760:	0800b648 	.word	0x0800b648
 8003764:	20000870 	.word	0x20000870
 8003768:	0800b64c 	.word	0x0800b64c
 800376c:	0800b658 	.word	0x0800b658
 8003770:	0800b66c 	.word	0x0800b66c
 8003774:	0800b684 	.word	0x0800b684
					}
				}
			}else if (strncmp(input, prefix5, strlen(prefix5)) == 0){ //name2
 8003778:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800377c:	4618      	mov	r0, r3
 800377e:	f7fc fd27 	bl	80001d0 <strlen>
 8003782:	4602      	mov	r2, r0
 8003784:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003788:	4619      	mov	r1, r3
 800378a:	4831      	ldr	r0, [pc, #196]	; (8003850 <HAL_UART_RxCpltCallback+0x3e0>)
 800378c:	f006 f8d5 	bl	800993a <strncmp>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d143      	bne.n	800381e <HAL_UART_RxCpltCallback+0x3ae>
				if (sscanf(input + strlen(prefix5), "%d", &temp) == 1) {
 8003796:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800379a:	4618      	mov	r0, r3
 800379c:	f7fc fd18 	bl	80001d0 <strlen>
 80037a0:	4603      	mov	r3, r0
 80037a2:	4a2b      	ldr	r2, [pc, #172]	; (8003850 <HAL_UART_RxCpltCallback+0x3e0>)
 80037a4:	4413      	add	r3, r2
 80037a6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80037aa:	492a      	ldr	r1, [pc, #168]	; (8003854 <HAL_UART_RxCpltCallback+0x3e4>)
 80037ac:	4618      	mov	r0, r3
 80037ae:	f006 f853 	bl	8009858 <siscanf>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d144      	bne.n	8003842 <HAL_UART_RxCpltCallback+0x3d2>
					if (temp >= 1 && temp <= 9){
 80037b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	dd1c      	ble.n	80037f8 <HAL_UART_RxCpltCallback+0x388>
 80037be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c0:	2b09      	cmp	r3, #9
 80037c2:	dc19      	bgt.n	80037f8 <HAL_UART_RxCpltCallback+0x388>
						player1.health = temp;
 80037c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c6:	4a24      	ldr	r2, [pc, #144]	; (8003858 <HAL_UART_RxCpltCallback+0x3e8>)
 80037c8:	6153      	str	r3, [r2, #20]
						player2.health = temp;
 80037ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037cc:	4a23      	ldr	r2, [pc, #140]	; (800385c <HAL_UART_RxCpltCallback+0x3ec>)
 80037ce:	6153      	str	r3, [r2, #20]
						char data[100];
						int n = sprintf(data, "Health number is: %d\n", temp);
 80037d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037d2:	f107 0308 	add.w	r3, r7, #8
 80037d6:	4922      	ldr	r1, [pc, #136]	; (8003860 <HAL_UART_RxCpltCallback+0x3f0>)
 80037d8:	4618      	mov	r0, r3
 80037da:	f006 f81d 	bl	8009818 <siprintf>
 80037de:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
						HAL_UART_Transmit(&huart3, data, n, 1000);
 80037e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	f107 0108 	add.w	r1, r7, #8
 80037ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f0:	481c      	ldr	r0, [pc, #112]	; (8003864 <HAL_UART_RxCpltCallback+0x3f4>)
 80037f2:	f004 fd01 	bl	80081f8 <HAL_UART_Transmit>
					if (temp >= 1 && temp <= 9){
 80037f6:	e024      	b.n	8003842 <HAL_UART_RxCpltCallback+0x3d2>
					}else{
						char data[100];
						int n = sprintf(data, "Error health number\n");
 80037f8:	f107 0308 	add.w	r3, r7, #8
 80037fc:	491a      	ldr	r1, [pc, #104]	; (8003868 <HAL_UART_RxCpltCallback+0x3f8>)
 80037fe:	4618      	mov	r0, r3
 8003800:	f006 f80a 	bl	8009818 <siprintf>
 8003804:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8003808:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800380c:	b29a      	uxth	r2, r3
 800380e:	f107 0108 	add.w	r1, r7, #8
 8003812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003816:	4813      	ldr	r0, [pc, #76]	; (8003864 <HAL_UART_RxCpltCallback+0x3f4>)
 8003818:	f004 fcee 	bl	80081f8 <HAL_UART_Transmit>
 800381c:	e011      	b.n	8003842 <HAL_UART_RxCpltCallback+0x3d2>
					}
				}
			}else{
				int n = sprintf(data, "[ERR] Not valid\n");
 800381e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003822:	4912      	ldr	r1, [pc, #72]	; (800386c <HAL_UART_RxCpltCallback+0x3fc>)
 8003824:	4618      	mov	r0, r3
 8003826:	f005 fff7 	bl	8009818 <siprintf>
 800382a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
				HAL_UART_Transmit(&huart3, data, n, 1000);
 800382e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003832:	b29a      	uxth	r2, r3
 8003834:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800383c:	4809      	ldr	r0, [pc, #36]	; (8003864 <HAL_UART_RxCpltCallback+0x3f4>)
 800383e:	f004 fcdb 	bl	80081f8 <HAL_UART_Transmit>
//				HAL_UART_Transmit(&huart3, data, n, 1000);
//			}
//			}
		}
    	}
		uart_rx_enable_it();
 8003842:	f7ff fe07 	bl	8003454 <uart_rx_enable_it>
}
 8003846:	bf00      	nop
 8003848:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000838 	.word	0x20000838
 8003854:	0800b648 	.word	0x0800b648
 8003858:	20000048 	.word	0x20000048
 800385c:	20000068 	.word	0x20000068
 8003860:	0800b698 	.word	0x0800b698
 8003864:	20000378 	.word	0x20000378
 8003868:	0800b6b0 	.word	0x0800b6b0
 800386c:	0800b6c8 	.word	0x0800b6c8

08003870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <HAL_MspInit+0x44>)
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	4a0e      	ldr	r2, [pc, #56]	; (80038b4 <HAL_MspInit+0x44>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	6193      	str	r3, [r2, #24]
 8003882:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <HAL_MspInit+0x44>)
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_MspInit+0x44>)
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <HAL_MspInit+0x44>)
 8003894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003898:	61d3      	str	r3, [r2, #28]
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <HAL_MspInit+0x44>)
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80038a6:	2007      	movs	r0, #7
 80038a8:	f000 fde4 	bl	8004474 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000

080038b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	; 0x28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a17      	ldr	r2, [pc, #92]	; (8003934 <HAL_I2C_MspInit+0x7c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d127      	bne.n	800392a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038da:	4b17      	ldr	r3, [pc, #92]	; (8003938 <HAL_I2C_MspInit+0x80>)
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	4a16      	ldr	r2, [pc, #88]	; (8003938 <HAL_I2C_MspInit+0x80>)
 80038e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e4:	6153      	str	r3, [r2, #20]
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <HAL_I2C_MspInit+0x80>)
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80038f2:	23c0      	movs	r3, #192	; 0xc0
 80038f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038f6:	2312      	movs	r3, #18
 80038f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038fa:	2301      	movs	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038fe:	2303      	movs	r3, #3
 8003900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003902:	2304      	movs	r3, #4
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003906:	f107 0314 	add.w	r3, r7, #20
 800390a:	4619      	mov	r1, r3
 800390c:	480b      	ldr	r0, [pc, #44]	; (800393c <HAL_I2C_MspInit+0x84>)
 800390e:	f000 fe69 	bl	80045e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <HAL_I2C_MspInit+0x80>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	4a08      	ldr	r2, [pc, #32]	; (8003938 <HAL_I2C_MspInit+0x80>)
 8003918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800391c:	61d3      	str	r3, [r2, #28]
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_I2C_MspInit+0x80>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800392a:	bf00      	nop
 800392c:	3728      	adds	r7, #40	; 0x28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40005400 	.word	0x40005400
 8003938:	40021000 	.word	0x40021000
 800393c:	48000400 	.word	0x48000400

08003940 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a0d      	ldr	r2, [pc, #52]	; (8003984 <HAL_RTC_MspInit+0x44>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d111      	bne.n	8003976 <HAL_RTC_MspInit+0x36>
 8003952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003956:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	fa93 f3a3 	rbit	r3, r3
 800395e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003960:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	4b07      	ldr	r3, [pc, #28]	; (8003988 <HAL_RTC_MspInit+0x48>)
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	461a      	mov	r2, r3
 8003972:	2301      	movs	r3, #1
 8003974:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40002800 	.word	0x40002800
 8003988:	10908100 	.word	0x10908100

0800398c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	; 0x28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003994:	f107 0314 	add.w	r3, r7, #20
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	60da      	str	r2, [r3, #12]
 80039a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <HAL_SPI_MspInit+0x7c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d128      	bne.n	8003a00 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039ae:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <HAL_SPI_MspInit+0x80>)
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <HAL_SPI_MspInit+0x80>)
 80039b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039b8:	6193      	str	r3, [r2, #24]
 80039ba:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <HAL_SPI_MspInit+0x80>)
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c6:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <HAL_SPI_MspInit+0x80>)
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	4a10      	ldr	r2, [pc, #64]	; (8003a0c <HAL_SPI_MspInit+0x80>)
 80039cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d0:	6153      	str	r3, [r2, #20]
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <HAL_SPI_MspInit+0x80>)
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80039de:	23e0      	movs	r3, #224	; 0xe0
 80039e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e2:	2302      	movs	r3, #2
 80039e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039ea:	2303      	movs	r3, #3
 80039ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039ee:	2305      	movs	r3, #5
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f2:	f107 0314 	add.w	r3, r7, #20
 80039f6:	4619      	mov	r1, r3
 80039f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039fc:	f000 fdf2 	bl	80045e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003a00:	bf00      	nop
 8003a02:	3728      	adds	r7, #40	; 0x28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40013000 	.word	0x40013000
 8003a0c:	40021000 	.word	0x40021000

08003a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a20:	d114      	bne.n	8003a4c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a22:	4b22      	ldr	r3, [pc, #136]	; (8003aac <HAL_TIM_Base_MspInit+0x9c>)
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	4a21      	ldr	r2, [pc, #132]	; (8003aac <HAL_TIM_Base_MspInit+0x9c>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	61d3      	str	r3, [r2, #28]
 8003a2e:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <HAL_TIM_Base_MspInit+0x9c>)
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	201c      	movs	r0, #28
 8003a40:	f000 fd23 	bl	800448a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a44:	201c      	movs	r0, #28
 8003a46:	f000 fd3c 	bl	80044c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003a4a:	e02a      	b.n	8003aa2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <HAL_TIM_Base_MspInit+0xa0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10c      	bne.n	8003a70 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <HAL_TIM_Base_MspInit+0x9c>)
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4a14      	ldr	r2, [pc, #80]	; (8003aac <HAL_TIM_Base_MspInit+0x9c>)
 8003a5c:	f043 0302 	orr.w	r3, r3, #2
 8003a60:	61d3      	str	r3, [r2, #28]
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <HAL_TIM_Base_MspInit+0x9c>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	693b      	ldr	r3, [r7, #16]
}
 8003a6e:	e018      	b.n	8003aa2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0f      	ldr	r2, [pc, #60]	; (8003ab4 <HAL_TIM_Base_MspInit+0xa4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d113      	bne.n	8003aa2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a7a:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_TIM_Base_MspInit+0x9c>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4a0b      	ldr	r2, [pc, #44]	; (8003aac <HAL_TIM_Base_MspInit+0x9c>)
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	61d3      	str	r3, [r2, #28]
 8003a86:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_TIM_Base_MspInit+0x9c>)
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 4);
 8003a92:	2204      	movs	r2, #4
 8003a94:	2100      	movs	r1, #0
 8003a96:	201e      	movs	r0, #30
 8003a98:	f000 fcf7 	bl	800448a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003a9c:	201e      	movs	r0, #30
 8003a9e:	f000 fd10 	bl	80044c2 <HAL_NVIC_EnableIRQ>
}
 8003aa2:	bf00      	nop
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40000800 	.word	0x40000800

08003ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac0:	f107 030c 	add.w	r3, r7, #12
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a11      	ldr	r2, [pc, #68]	; (8003b1c <HAL_TIM_MspPostInit+0x64>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <HAL_TIM_MspPostInit+0x68>)
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	4a10      	ldr	r2, [pc, #64]	; (8003b20 <HAL_TIM_MspPostInit+0x68>)
 8003ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ae4:	6153      	str	r3, [r2, #20]
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <HAL_TIM_MspPostInit+0x68>)
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE2     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003af2:	2304      	movs	r3, #4
 8003af4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	2302      	movs	r3, #2
 8003af8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b02:	2302      	movs	r3, #2
 8003b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b06:	f107 030c 	add.w	r3, r7, #12
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4805      	ldr	r0, [pc, #20]	; (8003b24 <HAL_TIM_MspPostInit+0x6c>)
 8003b0e:	f000 fd69 	bl	80045e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b12:	bf00      	nop
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40000400 	.word	0x40000400
 8003b20:	40021000 	.word	0x40021000
 8003b24:	48001000 	.word	0x48001000

08003b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1b      	ldr	r2, [pc, #108]	; (8003bb4 <HAL_UART_MspInit+0x8c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d130      	bne.n	8003bac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b4a:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <HAL_UART_MspInit+0x90>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4a1a      	ldr	r2, [pc, #104]	; (8003bb8 <HAL_UART_MspInit+0x90>)
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b54:	61d3      	str	r3, [r2, #28]
 8003b56:	4b18      	ldr	r3, [pc, #96]	; (8003bb8 <HAL_UART_MspInit+0x90>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <HAL_UART_MspInit+0x90>)
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	4a14      	ldr	r2, [pc, #80]	; (8003bb8 <HAL_UART_MspInit+0x90>)
 8003b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b6c:	6153      	str	r3, [r2, #20]
 8003b6e:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <HAL_UART_MspInit+0x90>)
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b80:	2302      	movs	r3, #2
 8003b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b8c:	2307      	movs	r3, #7
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b90:	f107 0314 	add.w	r3, r7, #20
 8003b94:	4619      	mov	r1, r3
 8003b96:	4809      	ldr	r0, [pc, #36]	; (8003bbc <HAL_UART_MspInit+0x94>)
 8003b98:	f000 fd24 	bl	80045e4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	2027      	movs	r0, #39	; 0x27
 8003ba2:	f000 fc72 	bl	800448a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003ba6:	2027      	movs	r0, #39	; 0x27
 8003ba8:	f000 fc8b 	bl	80044c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003bac:	bf00      	nop
 8003bae:	3728      	adds	r7, #40	; 0x28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40004800 	.word	0x40004800
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	48000400 	.word	0x48000400

08003bc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc8:	f107 0314 	add.w	r3, r7, #20
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <HAL_PCD_MspInit+0x80>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d129      	bne.n	8003c36 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be2:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <HAL_PCD_MspInit+0x84>)
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <HAL_PCD_MspInit+0x84>)
 8003be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bec:	6153      	str	r3, [r2, #20]
 8003bee:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <HAL_PCD_MspInit+0x84>)
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8003bfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c00:	2302      	movs	r3, #2
 8003c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8003c0c:	230e      	movs	r3, #14
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c10:	f107 0314 	add.w	r3, r7, #20
 8003c14:	4619      	mov	r1, r3
 8003c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c1a:	f000 fce3 	bl	80045e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <HAL_PCD_MspInit+0x84>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	4a08      	ldr	r2, [pc, #32]	; (8003c44 <HAL_PCD_MspInit+0x84>)
 8003c24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c28:	61d3      	str	r3, [r2, #28]
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_PCD_MspInit+0x84>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003c36:	bf00      	nop
 8003c38:	3728      	adds	r7, #40	; 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40005c00 	.word	0x40005c00
 8003c44:	40021000 	.word	0x40021000

08003c48 <PWM_Start>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start()
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <PWM_Start+0x18>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <PWM_Start+0x1c>)
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	4611      	mov	r1, r2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f003 f996 	bl	8006f88 <HAL_TIM_PWM_Start>
}
 8003c5c:	bf00      	nop
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000104 	.word	0x20000104
 8003c64:	2000087c 	.word	0x2000087c

08003c68 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	460a      	mov	r2, r1
 8003c72:	80fb      	strh	r3, [r7, #6]
 8003c74:	4613      	mov	r3, r2
 8003c76:	80bb      	strh	r3, [r7, #4]
    if (pwm_freq == 0 || pwm_freq > 20000)
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <PWM_Change_Tone+0x20>
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d937      	bls.n	8003cf8 <PWM_Change_Tone+0x90>
    {
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8003c88:	4b52      	ldr	r3, [pc, #328]	; (8003dd4 <PWM_Change_Tone+0x16c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d105      	bne.n	8003c9c <PWM_Change_Tone+0x34>
 8003c90:	4b51      	ldr	r3, [pc, #324]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2200      	movs	r2, #0
 8003c98:	635a      	str	r2, [r3, #52]	; 0x34
 8003c9a:	e097      	b.n	8003dcc <PWM_Change_Tone+0x164>
 8003c9c:	4b4d      	ldr	r3, [pc, #308]	; (8003dd4 <PWM_Change_Tone+0x16c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d105      	bne.n	8003cb0 <PWM_Change_Tone+0x48>
 8003ca4:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	2300      	movs	r3, #0
 8003cac:	6393      	str	r3, [r2, #56]	; 0x38
 8003cae:	e08d      	b.n	8003dcc <PWM_Change_Tone+0x164>
 8003cb0:	4b48      	ldr	r3, [pc, #288]	; (8003dd4 <PWM_Change_Tone+0x16c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d105      	bne.n	8003cc4 <PWM_Change_Tone+0x5c>
 8003cb8:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003cc2:	e083      	b.n	8003dcc <PWM_Change_Tone+0x164>
 8003cc4:	4b43      	ldr	r3, [pc, #268]	; (8003dd4 <PWM_Change_Tone+0x16c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d105      	bne.n	8003cd8 <PWM_Change_Tone+0x70>
 8003ccc:	4b42      	ldr	r3, [pc, #264]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd6:	e079      	b.n	8003dcc <PWM_Change_Tone+0x164>
 8003cd8:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <PWM_Change_Tone+0x16c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d105      	bne.n	8003cec <PWM_Change_Tone+0x84>
 8003ce0:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cea:	e06f      	b.n	8003dcc <PWM_Change_Tone+0x164>
 8003cec:	4b3a      	ldr	r3, [pc, #232]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003cf6:	e069      	b.n	8003dcc <PWM_Change_Tone+0x164>
    }
    else
    {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8003cf8:	f002 fa02 	bl	8006100 <HAL_RCC_GetSysClockFreq>
 8003cfc:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	4a35      	ldr	r2, [pc, #212]	; (8003ddc <PWM_Change_Tone+0x174>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	0b9b      	lsrs	r3, r3, #14
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 8003d14:	8b7b      	ldrh	r3, [r7, #26]
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8003d28:	88bb      	ldrh	r3, [r7, #4]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	fb02 f303 	mul.w	r3, r2, r3
 8003d30:	4a2b      	ldr	r2, [pc, #172]	; (8003de0 <PWM_Change_Tone+0x178>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	09db      	lsrs	r3, r3, #7
 8003d38:	60fb      	str	r3, [r7, #12]

        pwm_timer->Instance->PSC = prescaler - 1;
 8003d3a:	8b7b      	ldrh	r3, [r7, #26]
 8003d3c:	1e5a      	subs	r2, r3, #1
 8003d3e:	4b26      	ldr	r3, [pc, #152]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timer->Instance->ARR = period_cycles - 1;
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	3a01      	subs	r2, #1
 8003d50:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timer->Instance->EGR = TIM_EGR_UG;
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <PWM_Change_Tone+0x16c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d105      	bne.n	8003d70 <PWM_Change_Tone+0x108>
 8003d64:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8003d6e:	e02d      	b.n	8003dcc <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003d70:	4b18      	ldr	r3, [pc, #96]	; (8003dd4 <PWM_Change_Tone+0x16c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d105      	bne.n	8003d84 <PWM_Change_Tone+0x11c>
 8003d78:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003d82:	e023      	b.n	8003dcc <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003d84:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <PWM_Change_Tone+0x16c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d105      	bne.n	8003d98 <PWM_Change_Tone+0x130>
 8003d8c:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003d96:	e019      	b.n	8003dcc <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003d98:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <PWM_Change_Tone+0x16c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	d105      	bne.n	8003dac <PWM_Change_Tone+0x144>
 8003da0:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003daa:	e00f      	b.n	8003dcc <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <PWM_Change_Tone+0x16c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d105      	bne.n	8003dc0 <PWM_Change_Tone+0x158>
 8003db4:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003dbe:	e005      	b.n	8003dcc <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <PWM_Change_Tone+0x170>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003dca:	e7ff      	b.n	8003dcc <PWM_Change_Tone+0x164>
 8003dcc:	bf00      	nop
 8003dce:	3720      	adds	r7, #32
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	2000087c 	.word	0x2000087c
 8003dd8:	20000104 	.word	0x20000104
 8003ddc:	45e7b273 	.word	0x45e7b273
 8003de0:	10624dd3 	.word	0x10624dd3

08003de4 <Change_Melody>:
//void Change_Melody(const Tone *melody, uint16_t tone_count)

void Change_Melody(const Tone *melody, uint16_t tone_count)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	807b      	strh	r3, [r7, #2]

    melody_ptr = melody;
 8003df0:	4a07      	ldr	r2, [pc, #28]	; (8003e10 <Change_Melody+0x2c>)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6013      	str	r3, [r2, #0]
    melody_tone_count = tone_count;
 8003df6:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <Change_Melody+0x30>)
 8003df8:	887b      	ldrh	r3, [r7, #2]
 8003dfa:	8013      	strh	r3, [r2, #0]
    current_tone_number = 0;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <Change_Melody+0x34>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	801a      	strh	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	20000880 	.word	0x20000880
 8003e14:	20000884 	.word	0x20000884
 8003e18:	20000886 	.word	0x20000886

08003e1c <Update_Melody>:
extern pageflag;


void Update_Melody()
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
    if ((HAL_GetTick() > current_tone_end) && (current_tone_number < melody_tone_count) && pageflag == 0)
 8003e22:	f000 fa27 	bl	8004274 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	4b1f      	ldr	r3, [pc, #124]	; (8003ea8 <Update_Melody+0x8c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d936      	bls.n	8003e9e <Update_Melody+0x82>
 8003e30:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <Update_Melody+0x90>)
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <Update_Melody+0x94>)
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d22e      	bcs.n	8003e9e <Update_Melody+0x82>
 8003e40:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <Update_Melody+0x98>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d12a      	bne.n	8003e9e <Update_Melody+0x82>
    {
        const Tone active_tone = *(melody_ptr + current_tone_number);
 8003e48:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <Update_Melody+0x9c>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b17      	ldr	r3, [pc, #92]	; (8003eac <Update_Melody+0x90>)
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	441a      	add	r2, r3
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	6810      	ldr	r0, [r2, #0]
 8003e5a:	6018      	str	r0, [r3, #0]
        PWM_Change_Tone(active_tone.frequency, volume);
 8003e5c:	88bb      	ldrh	r3, [r7, #4]
 8003e5e:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <Update_Melody+0xa0>)
 8003e60:	8812      	ldrh	r2, [r2, #0]
 8003e62:	b292      	uxth	r2, r2
 8003e64:	4611      	mov	r1, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fefe 	bl	8003c68 <PWM_Change_Tone>
        current_tone_end = HAL_GetTick() + active_tone.duration;
 8003e6c:	f000 fa02 	bl	8004274 <HAL_GetTick>
 8003e70:	4603      	mov	r3, r0
 8003e72:	88fa      	ldrh	r2, [r7, #6]
 8003e74:	4413      	add	r3, r2
 8003e76:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <Update_Melody+0x8c>)
 8003e78:	6013      	str	r3, [r2, #0]
        current_tone_number++;
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <Update_Melody+0x90>)
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3301      	adds	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	4b09      	ldr	r3, [pc, #36]	; (8003eac <Update_Melody+0x90>)
 8003e86:	801a      	strh	r2, [r3, #0]
        if(current_tone_number == melody_tone_count){
 8003e88:	4b08      	ldr	r3, [pc, #32]	; (8003eac <Update_Melody+0x90>)
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <Update_Melody+0x94>)
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d102      	bne.n	8003e9e <Update_Melody+0x82>
        	current_tone_number = 0;
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <Update_Melody+0x90>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000888 	.word	0x20000888
 8003eac:	20000886 	.word	0x20000886
 8003eb0:	20000884 	.word	0x20000884
 8003eb4:	200006ec 	.word	0x200006ec
 8003eb8:	20000880 	.word	0x20000880
 8003ebc:	20000108 	.word	0x20000108

08003ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ec4:	e7fe      	b.n	8003ec4 <NMI_Handler+0x4>

08003ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eca:	e7fe      	b.n	8003eca <HardFault_Handler+0x4>

08003ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ed0:	e7fe      	b.n	8003ed0 <MemManage_Handler+0x4>

08003ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ed6:	e7fe      	b.n	8003ed6 <BusFault_Handler+0x4>

08003ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003edc:	e7fe      	b.n	8003edc <UsageFault_Handler+0x4>

08003ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ef0:	bf00      	nop
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003efa:	b480      	push	{r7}
 8003efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f0c:	f000 f99e 	bl	800424c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
 Update_Melody();
 8003f10:	f7ff ff84 	bl	8003e1c <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003f14:	bf00      	nop
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	f000 fd25 	bl	800496c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if (HAL_GetTick() > last_button_press + 200)
 8003f22:	f000 f9a7 	bl	8004274 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <EXTI0_IRQHandler+0x34>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	33c8      	adds	r3, #200	; 0xc8
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d909      	bls.n	8003f46 <EXTI0_IRQHandler+0x2e>
  {
      last_button_press = HAL_GetTick();
 8003f32:	f000 f99f 	bl	8004274 <HAL_GetTick>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <EXTI0_IRQHandler+0x34>)
 8003f3a:	6013      	str	r3, [r2, #0]

      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8003f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f40:	4803      	ldr	r0, [pc, #12]	; (8003f50 <EXTI0_IRQHandler+0x38>)
 8003f42:	f000 fcf9 	bl	8004938 <HAL_GPIO_TogglePin>
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	2000088c 	.word	0x2000088c
 8003f50:	48001000 	.word	0x48001000

08003f54 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003f58:	2002      	movs	r0, #2
 8003f5a:	f000 fd07 	bl	800496c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003f66:	2004      	movs	r0, #4
 8003f68:	f000 fd00 	bl	800496c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8003f6c:	bf00      	nop
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003f74:	2008      	movs	r0, #8
 8003f76:	f000 fcf9 	bl	800496c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f84:	4802      	ldr	r0, [pc, #8]	; (8003f90 <TIM2_IRQHandler+0x10>)
 8003f86:	f003 f8ff 	bl	8007188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000294 	.word	0x20000294

08003f94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f98:	4802      	ldr	r0, [pc, #8]	; (8003fa4 <TIM4_IRQHandler+0x10>)
 8003f9a:	f003 f8f5 	bl	8007188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	2000032c 	.word	0x2000032c

08003fa8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003fac:	4802      	ldr	r0, [pc, #8]	; (8003fb8 <USART3_IRQHandler+0x10>)
 8003fae:	f004 f9f1 	bl	8008394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000378 	.word	0x20000378

08003fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return 1;
 8003fc0:	2301      	movs	r3, #1
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <_kill>:

int _kill(int pid, int sig)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fd6:	f005 fbaf 	bl	8009738 <__errno>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2216      	movs	r2, #22
 8003fde:	601a      	str	r2, [r3, #0]
  return -1;
 8003fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <_exit>:

void _exit (int status)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ffe7 	bl	8003fcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ffe:	e7fe      	b.n	8003ffe <_exit+0x12>

08004000 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e00a      	b.n	8004028 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004012:	f3af 8000 	nop.w
 8004016:	4601      	mov	r1, r0
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	60ba      	str	r2, [r7, #8]
 800401e:	b2ca      	uxtb	r2, r1
 8004020:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	3301      	adds	r3, #1
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	dbf0      	blt.n	8004012 <_read+0x12>
  }

  return len;
 8004030:	687b      	ldr	r3, [r7, #4]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	e009      	b.n	8004060 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	60ba      	str	r2, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	3301      	adds	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	dbf1      	blt.n	800404c <_write+0x12>
  }
  return len;
 8004068:	687b      	ldr	r3, [r7, #4]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <_close>:

int _close(int file)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800409a:	605a      	str	r2, [r3, #4]
  return 0;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <_isatty>:

int _isatty(int file)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80040b2:	2301      	movs	r3, #1
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040e4:	4a14      	ldr	r2, [pc, #80]	; (8004138 <_sbrk+0x5c>)
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <_sbrk+0x60>)
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <_sbrk+0x64>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <_sbrk+0x64>)
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <_sbrk+0x68>)
 80040fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <_sbrk+0x64>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	429a      	cmp	r2, r3
 800410a:	d207      	bcs.n	800411c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800410c:	f005 fb14 	bl	8009738 <__errno>
 8004110:	4603      	mov	r3, r0
 8004112:	220c      	movs	r2, #12
 8004114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	e009      	b.n	8004130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <_sbrk+0x64>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <_sbrk+0x64>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <_sbrk+0x64>)
 800412c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	2000a000 	.word	0x2000a000
 800413c:	00000400 	.word	0x00000400
 8004140:	20000890 	.word	0x20000890
 8004144:	200008a8 	.word	0x200008a8

08004148 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <SystemInit+0x20>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	4a05      	ldr	r2, [pc, #20]	; (8004168 <SystemInit+0x20>)
 8004154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800415c:	bf00      	nop
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	e000ed00 	.word	0xe000ed00

0800416c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
    ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800416c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004170:	f7ff ffea 	bl	8004148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004174:	480c      	ldr	r0, [pc, #48]	; (80041a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004176:	490d      	ldr	r1, [pc, #52]	; (80041ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8004178:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <LoopForever+0xe>)
  movs r3, #0
 800417a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800417c:	e002      	b.n	8004184 <LoopCopyDataInit>

0800417e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800417e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004182:	3304      	adds	r3, #4

08004184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004188:	d3f9      	bcc.n	800417e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800418a:	4a0a      	ldr	r2, [pc, #40]	; (80041b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800418c:	4c0a      	ldr	r4, [pc, #40]	; (80041b8 <LoopForever+0x16>)
  movs r3, #0
 800418e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004190:	e001      	b.n	8004196 <LoopFillZerobss>

08004192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004194:	3204      	adds	r2, #4

08004196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004198:	d3fb      	bcc.n	8004192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800419a:	f005 fad3 	bl	8009744 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800419e:	f7fc fc4b 	bl	8000a38 <main>

080041a2 <LoopForever>:

LoopForever:
    b LoopForever
 80041a2:	e7fe      	b.n	80041a2 <LoopForever>
    ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80041a4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80041a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041ac:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80041b0:	0800baf8 	.word	0x0800baf8
  ldr r2, =_sbss
 80041b4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80041b8:	200008a8 	.word	0x200008a8

080041bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80041bc:	e7fe      	b.n	80041bc <ADC1_2_IRQHandler>
	...

080041c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041c4:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <HAL_Init+0x28>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <HAL_Init+0x28>)
 80041ca:	f043 0310 	orr.w	r3, r3, #16
 80041ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041d0:	2003      	movs	r0, #3
 80041d2:	f000 f94f 	bl	8004474 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041d6:	2000      	movs	r0, #0
 80041d8:	f000 f808 	bl	80041ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041dc:	f7ff fb48 	bl	8003870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40022000 	.word	0x40022000

080041ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041f4:	4b12      	ldr	r3, [pc, #72]	; (8004240 <HAL_InitTick+0x54>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <HAL_InitTick+0x58>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	4619      	mov	r1, r3
 80041fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004202:	fbb3 f3f1 	udiv	r3, r3, r1
 8004206:	fbb2 f3f3 	udiv	r3, r2, r3
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f967 	bl	80044de <HAL_SYSTICK_Config>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e00e      	b.n	8004238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b0f      	cmp	r3, #15
 800421e:	d80a      	bhi.n	8004236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004220:	2200      	movs	r2, #0
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	f04f 30ff 	mov.w	r0, #4294967295
 8004228:	f000 f92f 	bl	800448a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800422c:	4a06      	ldr	r2, [pc, #24]	; (8004248 <HAL_InitTick+0x5c>)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	e000      	b.n	8004238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	2000010c 	.word	0x2000010c
 8004244:	20000114 	.word	0x20000114
 8004248:	20000110 	.word	0x20000110

0800424c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_IncTick+0x20>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_IncTick+0x24>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4413      	add	r3, r2
 800425c:	4a04      	ldr	r2, [pc, #16]	; (8004270 <HAL_IncTick+0x24>)
 800425e:	6013      	str	r3, [r2, #0]
}
 8004260:	bf00      	nop
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000114 	.word	0x20000114
 8004270:	20000894 	.word	0x20000894

08004274 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return uwTick;  
 8004278:	4b03      	ldr	r3, [pc, #12]	; (8004288 <HAL_GetTick+0x14>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000894 	.word	0x20000894

0800428c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004294:	f7ff ffee 	bl	8004274 <HAL_GetTick>
 8004298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d005      	beq.n	80042b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_Delay+0x44>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80042b2:	bf00      	nop
 80042b4:	f7ff ffde 	bl	8004274 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d8f7      	bhi.n	80042b4 <HAL_Delay+0x28>
  {
  }
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000114 	.word	0x20000114

080042d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e4:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <__NVIC_SetPriorityGrouping+0x44>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042f0:	4013      	ands	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004306:	4a04      	ldr	r2, [pc, #16]	; (8004318 <__NVIC_SetPriorityGrouping+0x44>)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	60d3      	str	r3, [r2, #12]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	e000ed00 	.word	0xe000ed00

0800431c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004320:	4b04      	ldr	r3, [pc, #16]	; (8004334 <__NVIC_GetPriorityGrouping+0x18>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	f003 0307 	and.w	r3, r3, #7
}
 800432a:	4618      	mov	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004346:	2b00      	cmp	r3, #0
 8004348:	db0b      	blt.n	8004362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	f003 021f 	and.w	r2, r3, #31
 8004350:	4907      	ldr	r1, [pc, #28]	; (8004370 <__NVIC_EnableIRQ+0x38>)
 8004352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	2001      	movs	r0, #1
 800435a:	fa00 f202 	lsl.w	r2, r0, r2
 800435e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	e000e100 	.word	0xe000e100

08004374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	6039      	str	r1, [r7, #0]
 800437e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004384:	2b00      	cmp	r3, #0
 8004386:	db0a      	blt.n	800439e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	490c      	ldr	r1, [pc, #48]	; (80043c0 <__NVIC_SetPriority+0x4c>)
 800438e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004392:	0112      	lsls	r2, r2, #4
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	440b      	add	r3, r1
 8004398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800439c:	e00a      	b.n	80043b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4908      	ldr	r1, [pc, #32]	; (80043c4 <__NVIC_SetPriority+0x50>)
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	3b04      	subs	r3, #4
 80043ac:	0112      	lsls	r2, r2, #4
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	440b      	add	r3, r1
 80043b2:	761a      	strb	r2, [r3, #24]
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	e000e100 	.word	0xe000e100
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	; 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f1c3 0307 	rsb	r3, r3, #7
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	bf28      	it	cs
 80043e6:	2304      	movcs	r3, #4
 80043e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3304      	adds	r3, #4
 80043ee:	2b06      	cmp	r3, #6
 80043f0:	d902      	bls.n	80043f8 <NVIC_EncodePriority+0x30>
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3b03      	subs	r3, #3
 80043f6:	e000      	b.n	80043fa <NVIC_EncodePriority+0x32>
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43da      	mvns	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	401a      	ands	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004410:	f04f 31ff 	mov.w	r1, #4294967295
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	fa01 f303 	lsl.w	r3, r1, r3
 800441a:	43d9      	mvns	r1, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004420:	4313      	orrs	r3, r2
         );
}
 8004422:	4618      	mov	r0, r3
 8004424:	3724      	adds	r7, #36	; 0x24
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3b01      	subs	r3, #1
 800443c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004440:	d301      	bcc.n	8004446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004442:	2301      	movs	r3, #1
 8004444:	e00f      	b.n	8004466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004446:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <SysTick_Config+0x40>)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3b01      	subs	r3, #1
 800444c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800444e:	210f      	movs	r1, #15
 8004450:	f04f 30ff 	mov.w	r0, #4294967295
 8004454:	f7ff ff8e 	bl	8004374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <SysTick_Config+0x40>)
 800445a:	2200      	movs	r2, #0
 800445c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800445e:	4b04      	ldr	r3, [pc, #16]	; (8004470 <SysTick_Config+0x40>)
 8004460:	2207      	movs	r2, #7
 8004462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	e000e010 	.word	0xe000e010

08004474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff29 	bl	80042d4 <__NVIC_SetPriorityGrouping>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af00      	add	r7, sp, #0
 8004490:	4603      	mov	r3, r0
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800449c:	f7ff ff3e 	bl	800431c <__NVIC_GetPriorityGrouping>
 80044a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	6978      	ldr	r0, [r7, #20]
 80044a8:	f7ff ff8e 	bl	80043c8 <NVIC_EncodePriority>
 80044ac:	4602      	mov	r2, r0
 80044ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044b2:	4611      	mov	r1, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff ff5d 	bl	8004374 <__NVIC_SetPriority>
}
 80044ba:	bf00      	nop
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	4603      	mov	r3, r0
 80044ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff ff31 	bl	8004338 <__NVIC_EnableIRQ>
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff ffa2 	bl	8004430 <SysTick_Config>
 80044ec:	4603      	mov	r3, r0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004504:	2b02      	cmp	r3, #2
 8004506:	d008      	beq.n	800451a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2204      	movs	r2, #4
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e020      	b.n	800455c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 020e 	bic.w	r2, r2, #14
 8004528:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	2101      	movs	r1, #1
 8004544:	fa01 f202 	lsl.w	r2, r1, r2
 8004548:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800457a:	2b02      	cmp	r3, #2
 800457c:	d005      	beq.n	800458a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2204      	movs	r2, #4
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
 8004588:	e027      	b.n	80045da <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 020e 	bic.w	r2, r2, #14
 8004598:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	2101      	movs	r1, #1
 80045b4:	fa01 f202 	lsl.w	r2, r1, r2
 80045b8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
    } 
  }
  return status;
 80045da:	7bfb      	ldrb	r3, [r7, #15]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045f2:	e154      	b.n	800489e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	2101      	movs	r1, #1
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	4013      	ands	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8146 	beq.w	8004898 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d005      	beq.n	8004624 <HAL_GPIO_Init+0x40>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d130      	bne.n	8004686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	2203      	movs	r2, #3
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	43db      	mvns	r3, r3
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4013      	ands	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800465a:	2201      	movs	r2, #1
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 0201 	and.w	r2, r3, #1
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b03      	cmp	r3, #3
 8004690:	d017      	beq.n	80046c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	2203      	movs	r2, #3
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43db      	mvns	r3, r3
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4013      	ands	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d123      	bne.n	8004716 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	08da      	lsrs	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3208      	adds	r2, #8
 80046d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	220f      	movs	r2, #15
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	08da      	lsrs	r2, r3, #3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3208      	adds	r2, #8
 8004710:	6939      	ldr	r1, [r7, #16]
 8004712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	2203      	movs	r2, #3
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 0203 	and.w	r2, r3, #3
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80a0 	beq.w	8004898 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004758:	4b58      	ldr	r3, [pc, #352]	; (80048bc <HAL_GPIO_Init+0x2d8>)
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	4a57      	ldr	r2, [pc, #348]	; (80048bc <HAL_GPIO_Init+0x2d8>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6193      	str	r3, [r2, #24]
 8004764:	4b55      	ldr	r3, [pc, #340]	; (80048bc <HAL_GPIO_Init+0x2d8>)
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004770:	4a53      	ldr	r2, [pc, #332]	; (80048c0 <HAL_GPIO_Init+0x2dc>)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	089b      	lsrs	r3, r3, #2
 8004776:	3302      	adds	r3, #2
 8004778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	220f      	movs	r2, #15
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4013      	ands	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800479a:	d019      	beq.n	80047d0 <HAL_GPIO_Init+0x1ec>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a49      	ldr	r2, [pc, #292]	; (80048c4 <HAL_GPIO_Init+0x2e0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <HAL_GPIO_Init+0x1e8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a48      	ldr	r2, [pc, #288]	; (80048c8 <HAL_GPIO_Init+0x2e4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00d      	beq.n	80047c8 <HAL_GPIO_Init+0x1e4>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a47      	ldr	r2, [pc, #284]	; (80048cc <HAL_GPIO_Init+0x2e8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d007      	beq.n	80047c4 <HAL_GPIO_Init+0x1e0>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a46      	ldr	r2, [pc, #280]	; (80048d0 <HAL_GPIO_Init+0x2ec>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_GPIO_Init+0x1dc>
 80047bc:	2304      	movs	r3, #4
 80047be:	e008      	b.n	80047d2 <HAL_GPIO_Init+0x1ee>
 80047c0:	2305      	movs	r3, #5
 80047c2:	e006      	b.n	80047d2 <HAL_GPIO_Init+0x1ee>
 80047c4:	2303      	movs	r3, #3
 80047c6:	e004      	b.n	80047d2 <HAL_GPIO_Init+0x1ee>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e002      	b.n	80047d2 <HAL_GPIO_Init+0x1ee>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <HAL_GPIO_Init+0x1ee>
 80047d0:	2300      	movs	r3, #0
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	f002 0203 	and.w	r2, r2, #3
 80047d8:	0092      	lsls	r2, r2, #2
 80047da:	4093      	lsls	r3, r2
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047e2:	4937      	ldr	r1, [pc, #220]	; (80048c0 <HAL_GPIO_Init+0x2dc>)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	3302      	adds	r3, #2
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047f0:	4b38      	ldr	r3, [pc, #224]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004814:	4a2f      	ldr	r2, [pc, #188]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800481a:	4b2e      	ldr	r3, [pc, #184]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	43db      	mvns	r3, r3
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4013      	ands	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800483e:	4a25      	ldr	r2, [pc, #148]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004844:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	43db      	mvns	r3, r3
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4013      	ands	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004868:	4a1a      	ldr	r2, [pc, #104]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800486e:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	43db      	mvns	r3, r3
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4013      	ands	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004892:	4a10      	ldr	r2, [pc, #64]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	3301      	adds	r3, #1
 800489c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f47f aea3 	bne.w	80045f4 <HAL_GPIO_Init+0x10>
  }
}
 80048ae:	bf00      	nop
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40021000 	.word	0x40021000
 80048c0:	40010000 	.word	0x40010000
 80048c4:	48000400 	.word	0x48000400
 80048c8:	48000800 	.word	0x48000800
 80048cc:	48000c00 	.word	0x48000c00
 80048d0:	48001000 	.word	0x48001000
 80048d4:	40010400 	.word	0x40010400

080048d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	887b      	ldrh	r3, [r7, #2]
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	e001      	b.n	80048fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	807b      	strh	r3, [r7, #2]
 8004914:	4613      	mov	r3, r2
 8004916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004918:	787b      	ldrb	r3, [r7, #1]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800491e:	887a      	ldrh	r2, [r7, #2]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004924:	e002      	b.n	800492c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004926:	887a      	ldrh	r2, [r7, #2]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800494a:	887a      	ldrh	r2, [r7, #2]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4013      	ands	r3, r2
 8004950:	041a      	lsls	r2, r3, #16
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	43d9      	mvns	r1, r3
 8004956:	887b      	ldrh	r3, [r7, #2]
 8004958:	400b      	ands	r3, r1
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	619a      	str	r2, [r3, #24]
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004978:	695a      	ldr	r2, [r3, #20]
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d006      	beq.n	8004990 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004982:	4a05      	ldr	r2, [pc, #20]	; (8004998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fc fc8c 	bl	80012a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40010400 	.word	0x40010400

0800499c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e081      	b.n	8004ab2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fe ff78 	bl	80038b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2224      	movs	r2, #36	; 0x24
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d107      	bne.n	8004a16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	e006      	b.n	8004a24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d104      	bne.n	8004a36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69d9      	ldr	r1, [r3, #28]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1a      	ldr	r2, [r3, #32]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d138      	bne.n	8004b42 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e032      	b.n	8004b44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2224      	movs	r2, #36	; 0x24
 8004aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0201 	bic.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b0c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e000      	b.n	8004b44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b42:	2302      	movs	r3, #2
  }
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d139      	bne.n	8004bda <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e033      	b.n	8004bdc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	; 0x24
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ba2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e000      	b.n	8004bdc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bea:	b08b      	sub	sp, #44	; 0x2c
 8004bec:	af06      	add	r7, sp, #24
 8004bee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e0c4      	b.n	8004d84 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fe ffd6 	bl	8003bc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2203      	movs	r2, #3
 8004c18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f004 fd4d 	bl	80096c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]
 8004c2a:	e040      	b.n	8004cae <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	440b      	add	r3, r1
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	440b      	add	r3, r1
 8004c52:	7bfa      	ldrb	r2, [r7, #15]
 8004c54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	440b      	add	r3, r1
 8004c66:	3303      	adds	r3, #3
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c6c:	7bfa      	ldrb	r2, [r7, #15]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	440b      	add	r3, r1
 8004c7a:	3338      	adds	r3, #56	; 0x38
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c80:	7bfa      	ldrb	r2, [r7, #15]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	440b      	add	r3, r1
 8004c8e:	333c      	adds	r3, #60	; 0x3c
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c94:	7bfa      	ldrb	r2, [r7, #15]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	440b      	add	r3, r1
 8004ca2:	3340      	adds	r3, #64	; 0x40
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	3301      	adds	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
 8004cae:	7bfa      	ldrb	r2, [r7, #15]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d3b9      	bcc.n	8004c2c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	73fb      	strb	r3, [r7, #15]
 8004cbc:	e044      	b.n	8004d48 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cbe:	7bfa      	ldrb	r2, [r7, #15]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	440b      	add	r3, r1
 8004ccc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cd4:	7bfa      	ldrb	r2, [r7, #15]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	440b      	add	r3, r1
 8004ce2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ce6:	7bfa      	ldrb	r2, [r7, #15]
 8004ce8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cea:	7bfa      	ldrb	r2, [r7, #15]
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	440b      	add	r3, r1
 8004cf8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d00:	7bfa      	ldrb	r2, [r7, #15]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	440b      	add	r3, r1
 8004d0e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d16:	7bfa      	ldrb	r2, [r7, #15]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	440b      	add	r3, r1
 8004d24:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d2c:	7bfa      	ldrb	r2, [r7, #15]
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	440b      	add	r3, r1
 8004d3a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	3301      	adds	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
 8004d48:	7bfa      	ldrb	r2, [r7, #15]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d3b5      	bcc.n	8004cbe <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	687e      	ldr	r6, [r7, #4]
 8004d5a:	466d      	mov	r5, sp
 8004d5c:	f106 0410 	add.w	r4, r6, #16
 8004d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	602b      	str	r3, [r5, #0]
 8004d68:	1d33      	adds	r3, r6, #4
 8004d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d6c:	6838      	ldr	r0, [r7, #0]
 8004d6e:	f004 fcc2 	bl	80096f6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f001 b823 	b.w	8005df8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 817d 	beq.w	80050c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004dc8:	4bbc      	ldr	r3, [pc, #752]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 030c 	and.w	r3, r3, #12
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d00c      	beq.n	8004dee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dd4:	4bb9      	ldr	r3, [pc, #740]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 030c 	and.w	r3, r3, #12
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d15c      	bne.n	8004e9a <HAL_RCC_OscConfig+0x10e>
 8004de0:	4bb6      	ldr	r3, [pc, #728]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dec:	d155      	bne.n	8004e9a <HAL_RCC_OscConfig+0x10e>
 8004dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004df2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8004e02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d102      	bne.n	8004e20 <HAL_RCC_OscConfig+0x94>
 8004e1a:	4ba8      	ldr	r3, [pc, #672]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	e015      	b.n	8004e4c <HAL_RCC_OscConfig+0xc0>
 8004e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e24:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e28:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004e2c:	fa93 f3a3 	rbit	r3, r3
 8004e30:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e38:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004e3c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004e40:	fa93 f3a3 	rbit	r3, r3
 8004e44:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004e48:	4b9c      	ldr	r3, [pc, #624]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e50:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004e54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004e58:	fa92 f2a2 	rbit	r2, r2
 8004e5c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004e60:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004e64:	fab2 f282 	clz	r2, r2
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	f042 0220 	orr.w	r2, r2, #32
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	f002 021f 	and.w	r2, r2, #31
 8004e74:	2101      	movs	r1, #1
 8004e76:	fa01 f202 	lsl.w	r2, r1, r2
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 811f 	beq.w	80050c0 <HAL_RCC_OscConfig+0x334>
 8004e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f040 8116 	bne.w	80050c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f000 bfaf 	b.w	8005df8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eaa:	d106      	bne.n	8004eba <HAL_RCC_OscConfig+0x12e>
 8004eac:	4b83      	ldr	r3, [pc, #524]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a82      	ldr	r2, [pc, #520]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	e036      	b.n	8004f28 <HAL_RCC_OscConfig+0x19c>
 8004eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x158>
 8004eca:	4b7c      	ldr	r3, [pc, #496]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a7b      	ldr	r2, [pc, #492]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	4b79      	ldr	r3, [pc, #484]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a78      	ldr	r2, [pc, #480]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	e021      	b.n	8004f28 <HAL_RCC_OscConfig+0x19c>
 8004ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ef4:	d10c      	bne.n	8004f10 <HAL_RCC_OscConfig+0x184>
 8004ef6:	4b71      	ldr	r3, [pc, #452]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a70      	ldr	r2, [pc, #448]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	4b6e      	ldr	r3, [pc, #440]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a6d      	ldr	r2, [pc, #436]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	e00b      	b.n	8004f28 <HAL_RCC_OscConfig+0x19c>
 8004f10:	4b6a      	ldr	r3, [pc, #424]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a69      	ldr	r2, [pc, #420]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	4b67      	ldr	r3, [pc, #412]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a66      	ldr	r2, [pc, #408]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f26:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f28:	4b64      	ldr	r3, [pc, #400]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	f023 020f 	bic.w	r2, r3, #15
 8004f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	495f      	ldr	r1, [pc, #380]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d059      	beq.n	8005006 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f52:	f7ff f98f 	bl	8004274 <HAL_GetTick>
 8004f56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f5c:	f7ff f98a 	bl	8004274 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b64      	cmp	r3, #100	; 0x64
 8004f6a:	d902      	bls.n	8004f72 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	f000 bf43 	b.w	8005df8 <HAL_RCC_OscConfig+0x106c>
 8004f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f76:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004f7e:	fa93 f3a3 	rbit	r3, r3
 8004f82:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004f86:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8a:	fab3 f383 	clz	r3, r3
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d102      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x218>
 8004f9e:	4b47      	ldr	r3, [pc, #284]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	e015      	b.n	8004fd0 <HAL_RCC_OscConfig+0x244>
 8004fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fa8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004fb0:	fa93 f3a3 	rbit	r3, r3
 8004fb4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fbc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004fc0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004fc4:	fa93 f3a3 	rbit	r3, r3
 8004fc8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004fcc:	4b3b      	ldr	r3, [pc, #236]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fd4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004fd8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004fdc:	fa92 f2a2 	rbit	r2, r2
 8004fe0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004fe4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004fe8:	fab2 f282 	clz	r2, r2
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	f042 0220 	orr.w	r2, r2, #32
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	f002 021f 	and.w	r2, r2, #31
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ab      	beq.n	8004f5c <HAL_RCC_OscConfig+0x1d0>
 8005004:	e05d      	b.n	80050c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005006:	f7ff f935 	bl	8004274 <HAL_GetTick>
 800500a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500e:	e00a      	b.n	8005026 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005010:	f7ff f930 	bl	8004274 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b64      	cmp	r3, #100	; 0x64
 800501e:	d902      	bls.n	8005026 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	f000 bee9 	b.w	8005df8 <HAL_RCC_OscConfig+0x106c>
 8005026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800502a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005032:	fa93 f3a3 	rbit	r3, r3
 8005036:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800503a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800503e:	fab3 f383 	clz	r3, r3
 8005042:	b2db      	uxtb	r3, r3
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b01      	cmp	r3, #1
 8005050:	d102      	bne.n	8005058 <HAL_RCC_OscConfig+0x2cc>
 8005052:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	e015      	b.n	8005084 <HAL_RCC_OscConfig+0x2f8>
 8005058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800505c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005060:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005064:	fa93 f3a3 	rbit	r3, r3
 8005068:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800506c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005070:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005074:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005078:	fa93 f3a3 	rbit	r3, r3
 800507c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005080:	4b0e      	ldr	r3, [pc, #56]	; (80050bc <HAL_RCC_OscConfig+0x330>)
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005088:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800508c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005090:	fa92 f2a2 	rbit	r2, r2
 8005094:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005098:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800509c:	fab2 f282 	clz	r2, r2
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	f042 0220 	orr.w	r2, r2, #32
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	f002 021f 	and.w	r2, r2, #31
 80050ac:	2101      	movs	r1, #1
 80050ae:	fa01 f202 	lsl.w	r2, r1, r2
 80050b2:	4013      	ands	r3, r2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1ab      	bne.n	8005010 <HAL_RCC_OscConfig+0x284>
 80050b8:	e003      	b.n	80050c2 <HAL_RCC_OscConfig+0x336>
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 817d 	beq.w	80053d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80050d8:	4ba6      	ldr	r3, [pc, #664]	; (8005374 <HAL_RCC_OscConfig+0x5e8>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 030c 	and.w	r3, r3, #12
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80050e4:	4ba3      	ldr	r3, [pc, #652]	; (8005374 <HAL_RCC_OscConfig+0x5e8>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f003 030c 	and.w	r3, r3, #12
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d172      	bne.n	80051d6 <HAL_RCC_OscConfig+0x44a>
 80050f0:	4ba0      	ldr	r3, [pc, #640]	; (8005374 <HAL_RCC_OscConfig+0x5e8>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d16c      	bne.n	80051d6 <HAL_RCC_OscConfig+0x44a>
 80050fc:	2302      	movs	r3, #2
 80050fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005102:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005106:	fa93 f3a3 	rbit	r3, r3
 800510a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800510e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005112:	fab3 f383 	clz	r3, r3
 8005116:	b2db      	uxtb	r3, r3
 8005118:	095b      	lsrs	r3, r3, #5
 800511a:	b2db      	uxtb	r3, r3
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b01      	cmp	r3, #1
 8005124:	d102      	bne.n	800512c <HAL_RCC_OscConfig+0x3a0>
 8005126:	4b93      	ldr	r3, [pc, #588]	; (8005374 <HAL_RCC_OscConfig+0x5e8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	e013      	b.n	8005154 <HAL_RCC_OscConfig+0x3c8>
 800512c:	2302      	movs	r3, #2
 800512e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005132:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005136:	fa93 f3a3 	rbit	r3, r3
 800513a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800513e:	2302      	movs	r3, #2
 8005140:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005144:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005148:	fa93 f3a3 	rbit	r3, r3
 800514c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005150:	4b88      	ldr	r3, [pc, #544]	; (8005374 <HAL_RCC_OscConfig+0x5e8>)
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	2202      	movs	r2, #2
 8005156:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800515a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800515e:	fa92 f2a2 	rbit	r2, r2
 8005162:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005166:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800516a:	fab2 f282 	clz	r2, r2
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	f042 0220 	orr.w	r2, r2, #32
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	f002 021f 	and.w	r2, r2, #31
 800517a:	2101      	movs	r1, #1
 800517c:	fa01 f202 	lsl.w	r2, r1, r2
 8005180:	4013      	ands	r3, r2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <HAL_RCC_OscConfig+0x410>
 8005186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d002      	beq.n	800519c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f000 be2e 	b.w	8005df8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519c:	4b75      	ldr	r3, [pc, #468]	; (8005374 <HAL_RCC_OscConfig+0x5e8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	21f8      	movs	r1, #248	; 0xf8
 80051b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80051ba:	fa91 f1a1 	rbit	r1, r1
 80051be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80051c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80051c6:	fab1 f181 	clz	r1, r1
 80051ca:	b2c9      	uxtb	r1, r1
 80051cc:	408b      	lsls	r3, r1
 80051ce:	4969      	ldr	r1, [pc, #420]	; (8005374 <HAL_RCC_OscConfig+0x5e8>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051d4:	e0fd      	b.n	80053d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 8088 	beq.w	80052f8 <HAL_RCC_OscConfig+0x56c>
 80051e8:	2301      	movs	r3, #1
 80051ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80051f2:	fa93 f3a3 	rbit	r3, r3
 80051f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80051fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051fe:	fab3 f383 	clz	r3, r3
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005208:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	461a      	mov	r2, r3
 8005210:	2301      	movs	r3, #1
 8005212:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7ff f82e 	bl	8004274 <HAL_GetTick>
 8005218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521c:	e00a      	b.n	8005234 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800521e:	f7ff f829 	bl	8004274 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d902      	bls.n	8005234 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	f000 bde2 	b.w	8005df8 <HAL_RCC_OscConfig+0x106c>
 8005234:	2302      	movs	r3, #2
 8005236:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800523e:	fa93 f3a3 	rbit	r3, r3
 8005242:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005246:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	fab3 f383 	clz	r3, r3
 800524e:	b2db      	uxtb	r3, r3
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b01      	cmp	r3, #1
 800525c:	d102      	bne.n	8005264 <HAL_RCC_OscConfig+0x4d8>
 800525e:	4b45      	ldr	r3, [pc, #276]	; (8005374 <HAL_RCC_OscConfig+0x5e8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	e013      	b.n	800528c <HAL_RCC_OscConfig+0x500>
 8005264:	2302      	movs	r3, #2
 8005266:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800526e:	fa93 f3a3 	rbit	r3, r3
 8005272:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005276:	2302      	movs	r3, #2
 8005278:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800527c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005280:	fa93 f3a3 	rbit	r3, r3
 8005284:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005288:	4b3a      	ldr	r3, [pc, #232]	; (8005374 <HAL_RCC_OscConfig+0x5e8>)
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	2202      	movs	r2, #2
 800528e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005292:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005296:	fa92 f2a2 	rbit	r2, r2
 800529a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800529e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80052a2:	fab2 f282 	clz	r2, r2
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	f042 0220 	orr.w	r2, r2, #32
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	f002 021f 	and.w	r2, r2, #31
 80052b2:	2101      	movs	r1, #1
 80052b4:	fa01 f202 	lsl.w	r2, r1, r2
 80052b8:	4013      	ands	r3, r2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0af      	beq.n	800521e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052be:	4b2d      	ldr	r3, [pc, #180]	; (8005374 <HAL_RCC_OscConfig+0x5e8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	21f8      	movs	r1, #248	; 0xf8
 80052d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80052dc:	fa91 f1a1 	rbit	r1, r1
 80052e0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80052e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80052e8:	fab1 f181 	clz	r1, r1
 80052ec:	b2c9      	uxtb	r1, r1
 80052ee:	408b      	lsls	r3, r1
 80052f0:	4920      	ldr	r1, [pc, #128]	; (8005374 <HAL_RCC_OscConfig+0x5e8>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	600b      	str	r3, [r1, #0]
 80052f6:	e06c      	b.n	80053d2 <HAL_RCC_OscConfig+0x646>
 80052f8:	2301      	movs	r3, #1
 80052fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005302:	fa93 f3a3 	rbit	r3, r3
 8005306:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800530a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800530e:	fab3 f383 	clz	r3, r3
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005318:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	461a      	mov	r2, r3
 8005320:	2300      	movs	r3, #0
 8005322:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005324:	f7fe ffa6 	bl	8004274 <HAL_GetTick>
 8005328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800532c:	e00a      	b.n	8005344 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800532e:	f7fe ffa1 	bl	8004274 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d902      	bls.n	8005344 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	f000 bd5a 	b.w	8005df8 <HAL_RCC_OscConfig+0x106c>
 8005344:	2302      	movs	r3, #2
 8005346:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800534e:	fa93 f3a3 	rbit	r3, r3
 8005352:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800535a:	fab3 f383 	clz	r3, r3
 800535e:	b2db      	uxtb	r3, r3
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b01      	cmp	r3, #1
 800536c:	d104      	bne.n	8005378 <HAL_RCC_OscConfig+0x5ec>
 800536e:	4b01      	ldr	r3, [pc, #4]	; (8005374 <HAL_RCC_OscConfig+0x5e8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	e015      	b.n	80053a0 <HAL_RCC_OscConfig+0x614>
 8005374:	40021000 	.word	0x40021000
 8005378:	2302      	movs	r3, #2
 800537a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005382:	fa93 f3a3 	rbit	r3, r3
 8005386:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800538a:	2302      	movs	r3, #2
 800538c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005390:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005394:	fa93 f3a3 	rbit	r3, r3
 8005398:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800539c:	4bc8      	ldr	r3, [pc, #800]	; (80056c0 <HAL_RCC_OscConfig+0x934>)
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	2202      	movs	r2, #2
 80053a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80053a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80053aa:	fa92 f2a2 	rbit	r2, r2
 80053ae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80053b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80053b6:	fab2 f282 	clz	r2, r2
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	f042 0220 	orr.w	r2, r2, #32
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	f002 021f 	and.w	r2, r2, #31
 80053c6:	2101      	movs	r1, #1
 80053c8:	fa01 f202 	lsl.w	r2, r1, r2
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1ad      	bne.n	800532e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 8110 	beq.w	8005608 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d079      	beq.n	80054ec <HAL_RCC_OscConfig+0x760>
 80053f8:	2301      	movs	r3, #1
 80053fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005402:	fa93 f3a3 	rbit	r3, r3
 8005406:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800540a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800540e:	fab3 f383 	clz	r3, r3
 8005412:	b2db      	uxtb	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	4bab      	ldr	r3, [pc, #684]	; (80056c4 <HAL_RCC_OscConfig+0x938>)
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	461a      	mov	r2, r3
 800541e:	2301      	movs	r3, #1
 8005420:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005422:	f7fe ff27 	bl	8004274 <HAL_GetTick>
 8005426:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800542a:	e00a      	b.n	8005442 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800542c:	f7fe ff22 	bl	8004274 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d902      	bls.n	8005442 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	f000 bcdb 	b.w	8005df8 <HAL_RCC_OscConfig+0x106c>
 8005442:	2302      	movs	r3, #2
 8005444:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005448:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800544c:	fa93 f3a3 	rbit	r3, r3
 8005450:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005458:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800545c:	2202      	movs	r2, #2
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005464:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	fa93 f2a3 	rbit	r2, r3
 800546e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005480:	2202      	movs	r2, #2
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	fa93 f2a3 	rbit	r2, r3
 8005492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005496:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800549a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800549c:	4b88      	ldr	r3, [pc, #544]	; (80056c0 <HAL_RCC_OscConfig+0x934>)
 800549e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054a8:	2102      	movs	r1, #2
 80054aa:	6019      	str	r1, [r3, #0]
 80054ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	fa93 f1a3 	rbit	r1, r3
 80054ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80054c2:	6019      	str	r1, [r3, #0]
  return result;
 80054c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	fab3 f383 	clz	r3, r3
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	f003 031f 	and.w	r3, r3, #31
 80054de:	2101      	movs	r1, #1
 80054e0:	fa01 f303 	lsl.w	r3, r1, r3
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0a0      	beq.n	800542c <HAL_RCC_OscConfig+0x6a0>
 80054ea:	e08d      	b.n	8005608 <HAL_RCC_OscConfig+0x87c>
 80054ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80054f4:	2201      	movs	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	fa93 f2a3 	rbit	r2, r3
 8005506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800550a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800550e:	601a      	str	r2, [r3, #0]
  return result;
 8005510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005514:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005518:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800551a:	fab3 f383 	clz	r3, r3
 800551e:	b2db      	uxtb	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	4b68      	ldr	r3, [pc, #416]	; (80056c4 <HAL_RCC_OscConfig+0x938>)
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	461a      	mov	r2, r3
 800552a:	2300      	movs	r3, #0
 800552c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800552e:	f7fe fea1 	bl	8004274 <HAL_GetTick>
 8005532:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005536:	e00a      	b.n	800554e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005538:	f7fe fe9c 	bl	8004274 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d902      	bls.n	800554e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	f000 bc55 	b.w	8005df8 <HAL_RCC_OscConfig+0x106c>
 800554e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005552:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005556:	2202      	movs	r2, #2
 8005558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	fa93 f2a3 	rbit	r2, r3
 8005568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800556c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005576:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800557a:	2202      	movs	r2, #2
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005582:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	fa93 f2a3 	rbit	r2, r3
 800558c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800559a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559e:	2202      	movs	r2, #2
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	fa93 f2a3 	rbit	r2, r3
 80055b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80055b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ba:	4b41      	ldr	r3, [pc, #260]	; (80056c0 <HAL_RCC_OscConfig+0x934>)
 80055bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80055c6:	2102      	movs	r1, #2
 80055c8:	6019      	str	r1, [r3, #0]
 80055ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	fa93 f1a3 	rbit	r1, r3
 80055d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80055e0:	6019      	str	r1, [r3, #0]
  return result;
 80055e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	fab3 f383 	clz	r3, r3
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	2101      	movs	r1, #1
 80055fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005602:	4013      	ands	r3, r2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d197      	bne.n	8005538 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800560c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 81a1 	beq.w	8005960 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800561e:	2300      	movs	r3, #0
 8005620:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005624:	4b26      	ldr	r3, [pc, #152]	; (80056c0 <HAL_RCC_OscConfig+0x934>)
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d116      	bne.n	800565e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005630:	4b23      	ldr	r3, [pc, #140]	; (80056c0 <HAL_RCC_OscConfig+0x934>)
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	4a22      	ldr	r2, [pc, #136]	; (80056c0 <HAL_RCC_OscConfig+0x934>)
 8005636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800563a:	61d3      	str	r3, [r2, #28]
 800563c:	4b20      	ldr	r3, [pc, #128]	; (80056c0 <HAL_RCC_OscConfig+0x934>)
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005648:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005652:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005656:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005658:	2301      	movs	r3, #1
 800565a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565e:	4b1a      	ldr	r3, [pc, #104]	; (80056c8 <HAL_RCC_OscConfig+0x93c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d11a      	bne.n	80056a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800566a:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <HAL_RCC_OscConfig+0x93c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a16      	ldr	r2, [pc, #88]	; (80056c8 <HAL_RCC_OscConfig+0x93c>)
 8005670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005674:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005676:	f7fe fdfd 	bl	8004274 <HAL_GetTick>
 800567a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567e:	e009      	b.n	8005694 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005680:	f7fe fdf8 	bl	8004274 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b64      	cmp	r3, #100	; 0x64
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e3b1      	b.n	8005df8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005694:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <HAL_RCC_OscConfig+0x93c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0ef      	beq.n	8005680 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d10d      	bne.n	80056cc <HAL_RCC_OscConfig+0x940>
 80056b0:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <HAL_RCC_OscConfig+0x934>)
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	4a02      	ldr	r2, [pc, #8]	; (80056c0 <HAL_RCC_OscConfig+0x934>)
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	6213      	str	r3, [r2, #32]
 80056bc:	e03c      	b.n	8005738 <HAL_RCC_OscConfig+0x9ac>
 80056be:	bf00      	nop
 80056c0:	40021000 	.word	0x40021000
 80056c4:	10908120 	.word	0x10908120
 80056c8:	40007000 	.word	0x40007000
 80056cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10c      	bne.n	80056f6 <HAL_RCC_OscConfig+0x96a>
 80056dc:	4bc1      	ldr	r3, [pc, #772]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	4ac0      	ldr	r2, [pc, #768]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 80056e2:	f023 0301 	bic.w	r3, r3, #1
 80056e6:	6213      	str	r3, [r2, #32]
 80056e8:	4bbe      	ldr	r3, [pc, #760]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	4abd      	ldr	r2, [pc, #756]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 80056ee:	f023 0304 	bic.w	r3, r3, #4
 80056f2:	6213      	str	r3, [r2, #32]
 80056f4:	e020      	b.n	8005738 <HAL_RCC_OscConfig+0x9ac>
 80056f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	2b05      	cmp	r3, #5
 8005704:	d10c      	bne.n	8005720 <HAL_RCC_OscConfig+0x994>
 8005706:	4bb7      	ldr	r3, [pc, #732]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	4ab6      	ldr	r2, [pc, #728]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 800570c:	f043 0304 	orr.w	r3, r3, #4
 8005710:	6213      	str	r3, [r2, #32]
 8005712:	4bb4      	ldr	r3, [pc, #720]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	4ab3      	ldr	r2, [pc, #716]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 8005718:	f043 0301 	orr.w	r3, r3, #1
 800571c:	6213      	str	r3, [r2, #32]
 800571e:	e00b      	b.n	8005738 <HAL_RCC_OscConfig+0x9ac>
 8005720:	4bb0      	ldr	r3, [pc, #704]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	4aaf      	ldr	r2, [pc, #700]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 8005726:	f023 0301 	bic.w	r3, r3, #1
 800572a:	6213      	str	r3, [r2, #32]
 800572c:	4bad      	ldr	r3, [pc, #692]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	4aac      	ldr	r2, [pc, #688]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 8005732:	f023 0304 	bic.w	r3, r3, #4
 8005736:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8081 	beq.w	800584c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800574a:	f7fe fd93 	bl	8004274 <HAL_GetTick>
 800574e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005752:	e00b      	b.n	800576c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005754:	f7fe fd8e 	bl	8004274 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f241 3288 	movw	r2, #5000	; 0x1388
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e345      	b.n	8005df8 <HAL_RCC_OscConfig+0x106c>
 800576c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005770:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005774:	2202      	movs	r2, #2
 8005776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800577c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	fa93 f2a3 	rbit	r2, r3
 8005786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800578a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005794:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005798:	2202      	movs	r2, #2
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	fa93 f2a3 	rbit	r2, r3
 80057aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80057b2:	601a      	str	r2, [r3, #0]
  return result;
 80057b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80057bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	fab3 f383 	clz	r3, r3
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f043 0302 	orr.w	r3, r3, #2
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d102      	bne.n	80057d8 <HAL_RCC_OscConfig+0xa4c>
 80057d2:	4b84      	ldr	r3, [pc, #528]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	e013      	b.n	8005800 <HAL_RCC_OscConfig+0xa74>
 80057d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80057e0:	2202      	movs	r2, #2
 80057e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	fa93 f2a3 	rbit	r2, r3
 80057f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	4b79      	ldr	r3, [pc, #484]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005804:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005808:	2102      	movs	r1, #2
 800580a:	6011      	str	r1, [r2, #0]
 800580c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005810:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	fa92 f1a2 	rbit	r1, r2
 800581a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800581e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005822:	6011      	str	r1, [r2, #0]
  return result;
 8005824:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005828:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	fab2 f282 	clz	r2, r2
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	f002 021f 	and.w	r2, r2, #31
 800583e:	2101      	movs	r1, #1
 8005840:	fa01 f202 	lsl.w	r2, r1, r2
 8005844:	4013      	ands	r3, r2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d084      	beq.n	8005754 <HAL_RCC_OscConfig+0x9c8>
 800584a:	e07f      	b.n	800594c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800584c:	f7fe fd12 	bl	8004274 <HAL_GetTick>
 8005850:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005854:	e00b      	b.n	800586e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005856:	f7fe fd0d 	bl	8004274 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	; 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e2c4      	b.n	8005df8 <HAL_RCC_OscConfig+0x106c>
 800586e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005872:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005876:	2202      	movs	r2, #2
 8005878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800587e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	fa93 f2a3 	rbit	r2, r3
 8005888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005896:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800589a:	2202      	movs	r2, #2
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	fa93 f2a3 	rbit	r2, r3
 80058ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80058b4:	601a      	str	r2, [r3, #0]
  return result;
 80058b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80058be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058c0:	fab3 f383 	clz	r3, r3
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	f043 0302 	orr.w	r3, r3, #2
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d102      	bne.n	80058da <HAL_RCC_OscConfig+0xb4e>
 80058d4:	4b43      	ldr	r3, [pc, #268]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	e013      	b.n	8005902 <HAL_RCC_OscConfig+0xb76>
 80058da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80058e2:	2202      	movs	r2, #2
 80058e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	fa93 f2a3 	rbit	r2, r3
 80058f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	4b39      	ldr	r3, [pc, #228]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005906:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800590a:	2102      	movs	r1, #2
 800590c:	6011      	str	r1, [r2, #0]
 800590e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005912:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	fa92 f1a2 	rbit	r1, r2
 800591c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005920:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005924:	6011      	str	r1, [r2, #0]
  return result;
 8005926:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800592a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800592e:	6812      	ldr	r2, [r2, #0]
 8005930:	fab2 f282 	clz	r2, r2
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	f002 021f 	and.w	r2, r2, #31
 8005940:	2101      	movs	r1, #1
 8005942:	fa01 f202 	lsl.w	r2, r1, r2
 8005946:	4013      	ands	r3, r2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d184      	bne.n	8005856 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800594c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005950:	2b01      	cmp	r3, #1
 8005952:	d105      	bne.n	8005960 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005954:	4b23      	ldr	r3, [pc, #140]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	4a22      	ldr	r2, [pc, #136]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 800595a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 8242 	beq.w	8005df6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005972:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <HAL_RCC_OscConfig+0xc58>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f003 030c 	and.w	r3, r3, #12
 800597a:	2b08      	cmp	r3, #8
 800597c:	f000 8213 	beq.w	8005da6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005984:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	2b02      	cmp	r3, #2
 800598e:	f040 8162 	bne.w	8005c56 <HAL_RCC_OscConfig+0xeca>
 8005992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005996:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800599a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800599e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	fa93 f2a3 	rbit	r2, r3
 80059ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80059b6:	601a      	str	r2, [r3, #0]
  return result;
 80059b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80059c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c2:	fab3 f383 	clz	r3, r3
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	461a      	mov	r2, r3
 80059d4:	2300      	movs	r3, #0
 80059d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d8:	f7fe fc4c 	bl	8004274 <HAL_GetTick>
 80059dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e0:	e00c      	b.n	80059fc <HAL_RCC_OscConfig+0xc70>
 80059e2:	bf00      	nop
 80059e4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e8:	f7fe fc44 	bl	8004274 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e1fd      	b.n	8005df8 <HAL_RCC_OscConfig+0x106c>
 80059fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a00:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a0e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	fa93 f2a3 	rbit	r2, r3
 8005a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a1c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005a20:	601a      	str	r2, [r3, #0]
  return result;
 8005a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a26:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005a2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a2c:	fab3 f383 	clz	r3, r3
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d102      	bne.n	8005a46 <HAL_RCC_OscConfig+0xcba>
 8005a40:	4bb0      	ldr	r3, [pc, #704]	; (8005d04 <HAL_RCC_OscConfig+0xf78>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	e027      	b.n	8005a96 <HAL_RCC_OscConfig+0xd0a>
 8005a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a4a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a58:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	fa93 f2a3 	rbit	r2, r3
 8005a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a66:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a70:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005a74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a7e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	fa93 f2a3 	rbit	r2, r3
 8005a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	4b9c      	ldr	r3, [pc, #624]	; (8005d04 <HAL_RCC_OscConfig+0xf78>)
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a9a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005a9e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005aa2:	6011      	str	r1, [r2, #0]
 8005aa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005aa8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	fa92 f1a2 	rbit	r1, r2
 8005ab2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ab6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005aba:	6011      	str	r1, [r2, #0]
  return result;
 8005abc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ac0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	fab2 f282 	clz	r2, r2
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	f042 0220 	orr.w	r2, r2, #32
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	f002 021f 	and.w	r2, r2, #31
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d182      	bne.n	80059e8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ae2:	4b88      	ldr	r3, [pc, #544]	; (8005d04 <HAL_RCC_OscConfig+0xf78>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	430b      	orrs	r3, r1
 8005b04:	497f      	ldr	r1, [pc, #508]	; (8005d04 <HAL_RCC_OscConfig+0xf78>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	604b      	str	r3, [r1, #4]
 8005b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b0e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005b12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b1c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	fa93 f2a3 	rbit	r2, r3
 8005b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b2a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005b2e:	601a      	str	r2, [r3, #0]
  return result;
 8005b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b34:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005b38:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b3a:	fab3 f383 	clz	r3, r3
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b50:	f7fe fb90 	bl	8004274 <HAL_GetTick>
 8005b54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b58:	e009      	b.n	8005b6e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b5a:	f7fe fb8b 	bl	8004274 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e144      	b.n	8005df8 <HAL_RCC_OscConfig+0x106c>
 8005b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b72:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005b76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b80:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	fa93 f2a3 	rbit	r2, r3
 8005b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b8e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005b92:	601a      	str	r2, [r3, #0]
  return result;
 8005b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b98:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005b9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b9e:	fab3 f383 	clz	r3, r3
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d102      	bne.n	8005bb8 <HAL_RCC_OscConfig+0xe2c>
 8005bb2:	4b54      	ldr	r3, [pc, #336]	; (8005d04 <HAL_RCC_OscConfig+0xf78>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	e027      	b.n	8005c08 <HAL_RCC_OscConfig+0xe7c>
 8005bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bbc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005bc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	fa93 f2a3 	rbit	r2, r3
 8005bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bd8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005be2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005be6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bf0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	fa93 f2a3 	rbit	r2, r3
 8005bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bfe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	4b3f      	ldr	r3, [pc, #252]	; (8005d04 <HAL_RCC_OscConfig+0xf78>)
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c0c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005c10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c14:	6011      	str	r1, [r2, #0]
 8005c16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c1a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	fa92 f1a2 	rbit	r1, r2
 8005c24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c28:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005c2c:	6011      	str	r1, [r2, #0]
  return result;
 8005c2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c32:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	fab2 f282 	clz	r2, r2
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	f042 0220 	orr.w	r2, r2, #32
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	f002 021f 	and.w	r2, r2, #31
 8005c48:	2101      	movs	r1, #1
 8005c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d082      	beq.n	8005b5a <HAL_RCC_OscConfig+0xdce>
 8005c54:	e0cf      	b.n	8005df6 <HAL_RCC_OscConfig+0x106a>
 8005c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c5a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005c5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c68:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	fa93 f2a3 	rbit	r2, r3
 8005c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c76:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005c7a:	601a      	str	r2, [r3, #0]
  return result;
 8005c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c80:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005c84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c86:	fab3 f383 	clz	r3, r3
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	461a      	mov	r2, r3
 8005c98:	2300      	movs	r3, #0
 8005c9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9c:	f7fe faea 	bl	8004274 <HAL_GetTick>
 8005ca0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ca4:	e009      	b.n	8005cba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca6:	f7fe fae5 	bl	8004274 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e09e      	b.n	8005df8 <HAL_RCC_OscConfig+0x106c>
 8005cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cbe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ccc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	fa93 f2a3 	rbit	r2, r3
 8005cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cda:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005cde:	601a      	str	r2, [r3, #0]
  return result;
 8005ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ce4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005ce8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cea:	fab3 f383 	clz	r3, r3
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f043 0301 	orr.w	r3, r3, #1
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d104      	bne.n	8005d08 <HAL_RCC_OscConfig+0xf7c>
 8005cfe:	4b01      	ldr	r3, [pc, #4]	; (8005d04 <HAL_RCC_OscConfig+0xf78>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	e029      	b.n	8005d58 <HAL_RCC_OscConfig+0xfcc>
 8005d04:	40021000 	.word	0x40021000
 8005d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d0c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d1a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	fa93 f2a3 	rbit	r2, r3
 8005d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d28:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d32:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005d36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d40:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	fa93 f2a3 	rbit	r2, r3
 8005d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d4e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	4b2b      	ldr	r3, [pc, #172]	; (8005e04 <HAL_RCC_OscConfig+0x1078>)
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d5c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005d60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d64:	6011      	str	r1, [r2, #0]
 8005d66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d6a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	fa92 f1a2 	rbit	r1, r2
 8005d74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d78:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005d7c:	6011      	str	r1, [r2, #0]
  return result;
 8005d7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d82:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	fab2 f282 	clz	r2, r2
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	f042 0220 	orr.w	r2, r2, #32
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	f002 021f 	and.w	r2, r2, #31
 8005d98:	2101      	movs	r1, #1
 8005d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d180      	bne.n	8005ca6 <HAL_RCC_OscConfig+0xf1a>
 8005da4:	e027      	b.n	8005df6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e01e      	b.n	8005df8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005dba:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <HAL_RCC_OscConfig+0x1078>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005dc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005dc6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d10b      	bne.n	8005df2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005dda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005dde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005de6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d001      	beq.n	8005df6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40021000 	.word	0x40021000

08005e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b09e      	sub	sp, #120	; 0x78
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e162      	b.n	80060e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e20:	4b90      	ldr	r3, [pc, #576]	; (8006064 <HAL_RCC_ClockConfig+0x25c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d910      	bls.n	8005e50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2e:	4b8d      	ldr	r3, [pc, #564]	; (8006064 <HAL_RCC_ClockConfig+0x25c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f023 0207 	bic.w	r2, r3, #7
 8005e36:	498b      	ldr	r1, [pc, #556]	; (8006064 <HAL_RCC_ClockConfig+0x25c>)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3e:	4b89      	ldr	r3, [pc, #548]	; (8006064 <HAL_RCC_ClockConfig+0x25c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d001      	beq.n	8005e50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e14a      	b.n	80060e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d008      	beq.n	8005e6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e5c:	4b82      	ldr	r3, [pc, #520]	; (8006068 <HAL_RCC_ClockConfig+0x260>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	497f      	ldr	r1, [pc, #508]	; (8006068 <HAL_RCC_ClockConfig+0x260>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80dc 	beq.w	8006034 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d13c      	bne.n	8005efe <HAL_RCC_ClockConfig+0xf6>
 8005e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e8c:	fa93 f3a3 	rbit	r3, r3
 8005e90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e94:	fab3 f383 	clz	r3, r3
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	f043 0301 	orr.w	r3, r3, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d102      	bne.n	8005eae <HAL_RCC_ClockConfig+0xa6>
 8005ea8:	4b6f      	ldr	r3, [pc, #444]	; (8006068 <HAL_RCC_ClockConfig+0x260>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	e00f      	b.n	8005ece <HAL_RCC_ClockConfig+0xc6>
 8005eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005eb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eb6:	fa93 f3a3 	rbit	r3, r3
 8005eba:	667b      	str	r3, [r7, #100]	; 0x64
 8005ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec4:	fa93 f3a3 	rbit	r3, r3
 8005ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eca:	4b67      	ldr	r3, [pc, #412]	; (8006068 <HAL_RCC_ClockConfig+0x260>)
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ed2:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ed4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ed6:	fa92 f2a2 	rbit	r2, r2
 8005eda:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005edc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ede:	fab2 f282 	clz	r2, r2
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	f042 0220 	orr.w	r2, r2, #32
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	f002 021f 	and.w	r2, r2, #31
 8005eee:	2101      	movs	r1, #1
 8005ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d17b      	bne.n	8005ff2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e0f3      	b.n	80060e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d13c      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x178>
 8005f06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0e:	fa93 f3a3 	rbit	r3, r3
 8005f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f16:	fab3 f383 	clz	r3, r3
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	095b      	lsrs	r3, r3, #5
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	f043 0301 	orr.w	r3, r3, #1
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d102      	bne.n	8005f30 <HAL_RCC_ClockConfig+0x128>
 8005f2a:	4b4f      	ldr	r3, [pc, #316]	; (8006068 <HAL_RCC_ClockConfig+0x260>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	e00f      	b.n	8005f50 <HAL_RCC_ClockConfig+0x148>
 8005f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f38:	fa93 f3a3 	rbit	r3, r3
 8005f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f42:	643b      	str	r3, [r7, #64]	; 0x40
 8005f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f46:	fa93 f3a3 	rbit	r3, r3
 8005f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f4c:	4b46      	ldr	r3, [pc, #280]	; (8006068 <HAL_RCC_ClockConfig+0x260>)
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f54:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f58:	fa92 f2a2 	rbit	r2, r2
 8005f5c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f60:	fab2 f282 	clz	r2, r2
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	f042 0220 	orr.w	r2, r2, #32
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	f002 021f 	and.w	r2, r2, #31
 8005f70:	2101      	movs	r1, #1
 8005f72:	fa01 f202 	lsl.w	r2, r1, r2
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d13a      	bne.n	8005ff2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0b2      	b.n	80060e6 <HAL_RCC_ClockConfig+0x2de>
 8005f80:	2302      	movs	r3, #2
 8005f82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	fa93 f3a3 	rbit	r3, r3
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f8e:	fab3 f383 	clz	r3, r3
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	f043 0301 	orr.w	r3, r3, #1
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d102      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x1a0>
 8005fa2:	4b31      	ldr	r3, [pc, #196]	; (8006068 <HAL_RCC_ClockConfig+0x260>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	e00d      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x1bc>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	fa93 f3a3 	rbit	r3, r3
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	623b      	str	r3, [r7, #32]
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	fa93 f3a3 	rbit	r3, r3
 8005fbe:	61fb      	str	r3, [r7, #28]
 8005fc0:	4b29      	ldr	r3, [pc, #164]	; (8006068 <HAL_RCC_ClockConfig+0x260>)
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	61ba      	str	r2, [r7, #24]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	fa92 f2a2 	rbit	r2, r2
 8005fce:	617a      	str	r2, [r7, #20]
  return result;
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	fab2 f282 	clz	r2, r2
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	f042 0220 	orr.w	r2, r2, #32
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	f002 021f 	and.w	r2, r2, #31
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e079      	b.n	80060e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ff2:	4b1d      	ldr	r3, [pc, #116]	; (8006068 <HAL_RCC_ClockConfig+0x260>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f023 0203 	bic.w	r2, r3, #3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	491a      	ldr	r1, [pc, #104]	; (8006068 <HAL_RCC_ClockConfig+0x260>)
 8006000:	4313      	orrs	r3, r2
 8006002:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006004:	f7fe f936 	bl	8004274 <HAL_GetTick>
 8006008:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800600a:	e00a      	b.n	8006022 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800600c:	f7fe f932 	bl	8004274 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	f241 3288 	movw	r2, #5000	; 0x1388
 800601a:	4293      	cmp	r3, r2
 800601c:	d901      	bls.n	8006022 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e061      	b.n	80060e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006022:	4b11      	ldr	r3, [pc, #68]	; (8006068 <HAL_RCC_ClockConfig+0x260>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f003 020c 	and.w	r2, r3, #12
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	429a      	cmp	r2, r3
 8006032:	d1eb      	bne.n	800600c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006034:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <HAL_RCC_ClockConfig+0x25c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d214      	bcs.n	800606c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006042:	4b08      	ldr	r3, [pc, #32]	; (8006064 <HAL_RCC_ClockConfig+0x25c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f023 0207 	bic.w	r2, r3, #7
 800604a:	4906      	ldr	r1, [pc, #24]	; (8006064 <HAL_RCC_ClockConfig+0x25c>)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	4313      	orrs	r3, r2
 8006050:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006052:	4b04      	ldr	r3, [pc, #16]	; (8006064 <HAL_RCC_ClockConfig+0x25c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d005      	beq.n	800606c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e040      	b.n	80060e6 <HAL_RCC_ClockConfig+0x2de>
 8006064:	40022000 	.word	0x40022000
 8006068:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006078:	4b1d      	ldr	r3, [pc, #116]	; (80060f0 <HAL_RCC_ClockConfig+0x2e8>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	491a      	ldr	r1, [pc, #104]	; (80060f0 <HAL_RCC_ClockConfig+0x2e8>)
 8006086:	4313      	orrs	r3, r2
 8006088:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006096:	4b16      	ldr	r3, [pc, #88]	; (80060f0 <HAL_RCC_ClockConfig+0x2e8>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4912      	ldr	r1, [pc, #72]	; (80060f0 <HAL_RCC_ClockConfig+0x2e8>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80060aa:	f000 f829 	bl	8006100 <HAL_RCC_GetSysClockFreq>
 80060ae:	4601      	mov	r1, r0
 80060b0:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <HAL_RCC_ClockConfig+0x2e8>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060b8:	22f0      	movs	r2, #240	; 0xf0
 80060ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	fa92 f2a2 	rbit	r2, r2
 80060c2:	60fa      	str	r2, [r7, #12]
  return result;
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	fab2 f282 	clz	r2, r2
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	40d3      	lsrs	r3, r2
 80060ce:	4a09      	ldr	r2, [pc, #36]	; (80060f4 <HAL_RCC_ClockConfig+0x2ec>)
 80060d0:	5cd3      	ldrb	r3, [r2, r3]
 80060d2:	fa21 f303 	lsr.w	r3, r1, r3
 80060d6:	4a08      	ldr	r2, [pc, #32]	; (80060f8 <HAL_RCC_ClockConfig+0x2f0>)
 80060d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80060da:	4b08      	ldr	r3, [pc, #32]	; (80060fc <HAL_RCC_ClockConfig+0x2f4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fe f884 	bl	80041ec <HAL_InitTick>
  
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3778      	adds	r7, #120	; 0x78
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40021000 	.word	0x40021000
 80060f4:	0800b854 	.word	0x0800b854
 80060f8:	2000010c 	.word	0x2000010c
 80060fc:	20000110 	.word	0x20000110

08006100 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006100:	b480      	push	{r7}
 8006102:	b08b      	sub	sp, #44	; 0x2c
 8006104:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	2300      	movs	r3, #0
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800611a:	4b29      	ldr	r3, [pc, #164]	; (80061c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f003 030c 	and.w	r3, r3, #12
 8006126:	2b04      	cmp	r3, #4
 8006128:	d002      	beq.n	8006130 <HAL_RCC_GetSysClockFreq+0x30>
 800612a:	2b08      	cmp	r3, #8
 800612c:	d003      	beq.n	8006136 <HAL_RCC_GetSysClockFreq+0x36>
 800612e:	e03c      	b.n	80061aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006130:	4b24      	ldr	r3, [pc, #144]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006132:	623b      	str	r3, [r7, #32]
      break;
 8006134:	e03c      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800613c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006140:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	fa92 f2a2 	rbit	r2, r2
 8006148:	607a      	str	r2, [r7, #4]
  return result;
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	fab2 f282 	clz	r2, r2
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	40d3      	lsrs	r3, r2
 8006154:	4a1c      	ldr	r2, [pc, #112]	; (80061c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006156:	5cd3      	ldrb	r3, [r2, r3]
 8006158:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800615a:	4b19      	ldr	r3, [pc, #100]	; (80061c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800615c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	220f      	movs	r2, #15
 8006164:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	fa92 f2a2 	rbit	r2, r2
 800616c:	60fa      	str	r2, [r7, #12]
  return result;
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	fab2 f282 	clz	r2, r2
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	40d3      	lsrs	r3, r2
 8006178:	4a14      	ldr	r2, [pc, #80]	; (80061cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800617a:	5cd3      	ldrb	r3, [r2, r3]
 800617c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006188:	4a0e      	ldr	r2, [pc, #56]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	fb02 f303 	mul.w	r3, r2, r3
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
 8006198:	e004      	b.n	80061a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	4a0c      	ldr	r2, [pc, #48]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800619e:	fb02 f303 	mul.w	r3, r2, r3
 80061a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	623b      	str	r3, [r7, #32]
      break;
 80061a8:	e002      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061aa:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80061ac:	623b      	str	r3, [r7, #32]
      break;
 80061ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061b0:	6a3b      	ldr	r3, [r7, #32]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	372c      	adds	r7, #44	; 0x2c
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40021000 	.word	0x40021000
 80061c4:	007a1200 	.word	0x007a1200
 80061c8:	0800b86c 	.word	0x0800b86c
 80061cc:	0800b87c 	.word	0x0800b87c
 80061d0:	003d0900 	.word	0x003d0900

080061d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061d8:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80061da:	681b      	ldr	r3, [r3, #0]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	2000010c 	.word	0x2000010c

080061ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80061f2:	f7ff ffef 	bl	80061d4 <HAL_RCC_GetHCLKFreq>
 80061f6:	4601      	mov	r1, r0
 80061f8:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006200:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006204:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	fa92 f2a2 	rbit	r2, r2
 800620c:	603a      	str	r2, [r7, #0]
  return result;
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	fab2 f282 	clz	r2, r2
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	40d3      	lsrs	r3, r2
 8006218:	4a04      	ldr	r2, [pc, #16]	; (800622c <HAL_RCC_GetPCLK1Freq+0x40>)
 800621a:	5cd3      	ldrb	r3, [r2, r3]
 800621c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40021000 	.word	0x40021000
 800622c:	0800b864 	.word	0x0800b864

08006230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006236:	f7ff ffcd 	bl	80061d4 <HAL_RCC_GetHCLKFreq>
 800623a:	4601      	mov	r1, r0
 800623c:	4b0b      	ldr	r3, [pc, #44]	; (800626c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006244:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006248:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	fa92 f2a2 	rbit	r2, r2
 8006250:	603a      	str	r2, [r7, #0]
  return result;
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	fab2 f282 	clz	r2, r2
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	40d3      	lsrs	r3, r2
 800625c:	4a04      	ldr	r2, [pc, #16]	; (8006270 <HAL_RCC_GetPCLK2Freq+0x40>)
 800625e:	5cd3      	ldrb	r3, [r2, r3]
 8006260:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40021000 	.word	0x40021000
 8006270:	0800b864 	.word	0x0800b864

08006274 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b092      	sub	sp, #72	; 0x48
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006284:	2300      	movs	r3, #0
 8006286:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80d4 	beq.w	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006298:	4b4e      	ldr	r3, [pc, #312]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10e      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a4:	4b4b      	ldr	r3, [pc, #300]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	4a4a      	ldr	r2, [pc, #296]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ae:	61d3      	str	r3, [r2, #28]
 80062b0:	4b48      	ldr	r3, [pc, #288]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c2:	4b45      	ldr	r3, [pc, #276]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d118      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062ce:	4b42      	ldr	r3, [pc, #264]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a41      	ldr	r2, [pc, #260]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062da:	f7fd ffcb 	bl	8004274 <HAL_GetTick>
 80062de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e0:	e008      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062e2:	f7fd ffc7 	bl	8004274 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b64      	cmp	r3, #100	; 0x64
 80062ee:	d901      	bls.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e169      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f4:	4b38      	ldr	r3, [pc, #224]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f0      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006300:	4b34      	ldr	r3, [pc, #208]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006308:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800630a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8084 	beq.w	800641a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800631a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800631c:	429a      	cmp	r2, r3
 800631e:	d07c      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006320:	4b2c      	ldr	r3, [pc, #176]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800632a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800632e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	fa93 f3a3 	rbit	r3, r3
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800633a:	fab3 f383 	clz	r3, r3
 800633e:	b2db      	uxtb	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	4b26      	ldr	r3, [pc, #152]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	461a      	mov	r2, r3
 800634a:	2301      	movs	r3, #1
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006352:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006356:	fa93 f3a3 	rbit	r3, r3
 800635a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800635c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800635e:	fab3 f383 	clz	r3, r3
 8006362:	b2db      	uxtb	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	4b1d      	ldr	r3, [pc, #116]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	461a      	mov	r2, r3
 800636e:	2300      	movs	r3, #0
 8006370:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006372:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006376:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d04b      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006382:	f7fd ff77 	bl	8004274 <HAL_GetTick>
 8006386:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006388:	e00a      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800638a:	f7fd ff73 	bl	8004274 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	f241 3288 	movw	r2, #5000	; 0x1388
 8006398:	4293      	cmp	r3, r2
 800639a:	d901      	bls.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e113      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80063a0:	2302      	movs	r3, #2
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	fa93 f3a3 	rbit	r3, r3
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
 80063ac:	2302      	movs	r3, #2
 80063ae:	623b      	str	r3, [r7, #32]
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	fa93 f3a3 	rbit	r3, r3
 80063b6:	61fb      	str	r3, [r7, #28]
  return result;
 80063b8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ba:	fab3 f383 	clz	r3, r3
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	095b      	lsrs	r3, r3, #5
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	f043 0302 	orr.w	r3, r3, #2
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d108      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80063ce:	4b01      	ldr	r3, [pc, #4]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	e00d      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80063d4:	40021000 	.word	0x40021000
 80063d8:	40007000 	.word	0x40007000
 80063dc:	10908100 	.word	0x10908100
 80063e0:	2302      	movs	r3, #2
 80063e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	fa93 f3a3 	rbit	r3, r3
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	4b78      	ldr	r3, [pc, #480]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	2202      	movs	r2, #2
 80063f2:	613a      	str	r2, [r7, #16]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	fa92 f2a2 	rbit	r2, r2
 80063fa:	60fa      	str	r2, [r7, #12]
  return result;
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	fab2 f282 	clz	r2, r2
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	f002 021f 	and.w	r2, r2, #31
 800640e:	2101      	movs	r1, #1
 8006410:	fa01 f202 	lsl.w	r2, r1, r2
 8006414:	4013      	ands	r3, r2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0b7      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800641a:	4b6d      	ldr	r3, [pc, #436]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	496a      	ldr	r1, [pc, #424]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006428:	4313      	orrs	r3, r2
 800642a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800642c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006430:	2b01      	cmp	r3, #1
 8006432:	d105      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006434:	4b66      	ldr	r3, [pc, #408]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	4a65      	ldr	r2, [pc, #404]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800643a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800643e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800644c:	4b60      	ldr	r3, [pc, #384]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	f023 0203 	bic.w	r2, r3, #3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	495d      	ldr	r1, [pc, #372]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800645a:	4313      	orrs	r3, r2
 800645c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d008      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800646a:	4b59      	ldr	r3, [pc, #356]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800646c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	4956      	ldr	r1, [pc, #344]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006478:	4313      	orrs	r3, r2
 800647a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d008      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006488:	4b51      	ldr	r3, [pc, #324]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	494e      	ldr	r1, [pc, #312]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006496:	4313      	orrs	r3, r2
 8006498:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d008      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064a6:	4b4a      	ldr	r3, [pc, #296]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064aa:	f023 0210 	bic.w	r2, r3, #16
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	4947      	ldr	r1, [pc, #284]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d008      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80064c4:	4b42      	ldr	r3, [pc, #264]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	493f      	ldr	r1, [pc, #252]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d008      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064e2:	4b3b      	ldr	r3, [pc, #236]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	f023 0220 	bic.w	r2, r3, #32
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	4938      	ldr	r1, [pc, #224]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0308 	and.w	r3, r3, #8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d008      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006500:	4b33      	ldr	r3, [pc, #204]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006504:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	4930      	ldr	r1, [pc, #192]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800650e:	4313      	orrs	r3, r2
 8006510:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0310 	and.w	r3, r3, #16
 800651a:	2b00      	cmp	r3, #0
 800651c:	d008      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800651e:	4b2c      	ldr	r3, [pc, #176]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	4929      	ldr	r1, [pc, #164]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800652c:	4313      	orrs	r3, r2
 800652e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800653c:	4b24      	ldr	r3, [pc, #144]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	4921      	ldr	r1, [pc, #132]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800654a:	4313      	orrs	r3, r2
 800654c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800655a:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	491a      	ldr	r1, [pc, #104]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006568:	4313      	orrs	r3, r2
 800656a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006574:	2b00      	cmp	r3, #0
 8006576:	d008      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006578:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	4912      	ldr	r1, [pc, #72]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006586:	4313      	orrs	r3, r2
 8006588:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d008      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006596:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a2:	490b      	ldr	r1, [pc, #44]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80065b4:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c0:	4903      	ldr	r1, [pc, #12]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3748      	adds	r7, #72	; 0x48
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	40021000 	.word	0x40021000

080065d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e073      	b.n	80066d2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	7f5b      	ldrb	r3, [r3, #29]
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fd f9a0 	bl	8003940 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b10      	cmp	r3, #16
 8006612:	d055      	beq.n	80066c0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	22ca      	movs	r2, #202	; 0xca
 800661a:	625a      	str	r2, [r3, #36]	; 0x24
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2253      	movs	r2, #83	; 0x53
 8006622:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fa49 	bl	8006abc <RTC_EnterInitMode>
 800662a:	4603      	mov	r3, r0
 800662c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d12c      	bne.n	800668e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6812      	ldr	r2, [r2, #0]
 800663e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006646:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6899      	ldr	r1, [r3, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	68d2      	ldr	r2, [r2, #12]
 800666e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6919      	ldr	r1, [r3, #16]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	041a      	lsls	r2, r3, #16
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fa50 	bl	8006b2a <RTC_ExitInitMode>
 800668a:	4603      	mov	r3, r0
 800668c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d110      	bne.n	80066b6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80066a2:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	22ff      	movs	r2, #255	; 0xff
 80066bc:	625a      	str	r2, [r3, #36]	; 0x24
 80066be:	e001      	b.n	80066c4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d102      	bne.n	80066d0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80066da:	b590      	push	{r4, r7, lr}
 80066dc:	b087      	sub	sp, #28
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	7f1b      	ldrb	r3, [r3, #28]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_RTC_SetTime+0x1c>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e087      	b.n	8006806 <HAL_RTC_SetTime+0x12c>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2202      	movs	r2, #2
 8006700:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d126      	bne.n	8006756 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006712:	2b00      	cmp	r3, #0
 8006714:	d102      	bne.n	800671c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2200      	movs	r2, #0
 800671a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fa27 	bl	8006b74 <RTC_ByteToBcd2>
 8006726:	4603      	mov	r3, r0
 8006728:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	785b      	ldrb	r3, [r3, #1]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fa20 	bl	8006b74 <RTC_ByteToBcd2>
 8006734:	4603      	mov	r3, r0
 8006736:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006738:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	789b      	ldrb	r3, [r3, #2]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fa18 	bl	8006b74 <RTC_ByteToBcd2>
 8006744:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006746:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	78db      	ldrb	r3, [r3, #3]
 800674e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e018      	b.n	8006788 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	d102      	bne.n	800676a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2200      	movs	r2, #0
 8006768:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006776:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800677c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	78db      	ldrb	r3, [r3, #3]
 8006782:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	22ca      	movs	r2, #202	; 0xca
 800678e:	625a      	str	r2, [r3, #36]	; 0x24
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2253      	movs	r2, #83	; 0x53
 8006796:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 f98f 	bl	8006abc <RTC_EnterInitMode>
 800679e:	4603      	mov	r3, r0
 80067a0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80067a2:	7cfb      	ldrb	r3, [r7, #19]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d120      	bne.n	80067ea <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80067b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80067b6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067c6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6899      	ldr	r1, [r3, #8]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f9a2 	bl	8006b2a <RTC_ExitInitMode>
 80067e6:	4603      	mov	r3, r0
 80067e8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80067ea:	7cfb      	ldrb	r3, [r7, #19]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d102      	bne.n	80067f6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2201      	movs	r2, #1
 80067f4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	22ff      	movs	r2, #255	; 0xff
 80067fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	771a      	strb	r2, [r3, #28]

  return status;
 8006804:	7cfb      	ldrb	r3, [r7, #19]
}
 8006806:	4618      	mov	r0, r3
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	bd90      	pop	{r4, r7, pc}

0800680e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006840:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006844:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	0c1b      	lsrs	r3, r3, #16
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006850:	b2da      	uxtb	r2, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	0a1b      	lsrs	r3, r3, #8
 800685a:	b2db      	uxtb	r3, r3
 800685c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006860:	b2da      	uxtb	r2, r3
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800686e:	b2da      	uxtb	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	0d9b      	lsrs	r3, r3, #22
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d11a      	bne.n	80068c0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	4618      	mov	r0, r3
 8006890:	f000 f98e 	bl	8006bb0 <RTC_Bcd2ToByte>
 8006894:	4603      	mov	r3, r0
 8006896:	461a      	mov	r2, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	785b      	ldrb	r3, [r3, #1]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 f985 	bl	8006bb0 <RTC_Bcd2ToByte>
 80068a6:	4603      	mov	r3, r0
 80068a8:	461a      	mov	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	789b      	ldrb	r3, [r3, #2]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 f97c 	bl	8006bb0 <RTC_Bcd2ToByte>
 80068b8:	4603      	mov	r3, r0
 80068ba:	461a      	mov	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80068ca:	b590      	push	{r4, r7, lr}
 80068cc:	b087      	sub	sp, #28
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	7f1b      	ldrb	r3, [r3, #28]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d101      	bne.n	80068e6 <HAL_RTC_SetDate+0x1c>
 80068e2:	2302      	movs	r3, #2
 80068e4:	e071      	b.n	80069ca <HAL_RTC_SetDate+0x100>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2201      	movs	r2, #1
 80068ea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2202      	movs	r2, #2
 80068f0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10e      	bne.n	8006916 <HAL_RTC_SetDate+0x4c>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	2b00      	cmp	r3, #0
 8006902:	d008      	beq.n	8006916 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	f023 0310 	bic.w	r3, r3, #16
 800690c:	b2db      	uxtb	r3, r3
 800690e:	330a      	adds	r3, #10
 8006910:	b2da      	uxtb	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d11c      	bne.n	8006956 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	78db      	ldrb	r3, [r3, #3]
 8006920:	4618      	mov	r0, r3
 8006922:	f000 f927 	bl	8006b74 <RTC_ByteToBcd2>
 8006926:	4603      	mov	r3, r0
 8006928:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	785b      	ldrb	r3, [r3, #1]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 f920 	bl	8006b74 <RTC_ByteToBcd2>
 8006934:	4603      	mov	r3, r0
 8006936:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006938:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	789b      	ldrb	r3, [r3, #2]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 f918 	bl	8006b74 <RTC_ByteToBcd2>
 8006944:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006946:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e00e      	b.n	8006974 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	78db      	ldrb	r3, [r3, #3]
 800695a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	785b      	ldrb	r3, [r3, #1]
 8006960:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006962:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006968:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	22ca      	movs	r2, #202	; 0xca
 800697a:	625a      	str	r2, [r3, #36]	; 0x24
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2253      	movs	r2, #83	; 0x53
 8006982:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f899 	bl	8006abc <RTC_EnterInitMode>
 800698a:	4603      	mov	r3, r0
 800698c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800698e:	7cfb      	ldrb	r3, [r7, #19]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10c      	bne.n	80069ae <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800699e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069a2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 f8c0 	bl	8006b2a <RTC_ExitInitMode>
 80069aa:	4603      	mov	r3, r0
 80069ac:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80069ae:	7cfb      	ldrb	r3, [r7, #19]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2201      	movs	r2, #1
 80069b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	22ff      	movs	r2, #255	; 0xff
 80069c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	771a      	strb	r2, [r3, #28]

  return status;
 80069c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd90      	pop	{r4, r7, pc}

080069d2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b086      	sub	sp, #24
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	0c1b      	lsrs	r3, r3, #16
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	0a1b      	lsrs	r3, r3, #8
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	f003 031f 	and.w	r3, r3, #31
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	0b5b      	lsrs	r3, r3, #13
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d11a      	bne.n	8006a66 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	78db      	ldrb	r3, [r3, #3]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 f8bb 	bl	8006bb0 <RTC_Bcd2ToByte>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	785b      	ldrb	r3, [r3, #1]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 f8b2 	bl	8006bb0 <RTC_Bcd2ToByte>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	789b      	ldrb	r3, [r3, #2]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 f8a9 	bl	8006bb0 <RTC_Bcd2ToByte>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	461a      	mov	r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a0d      	ldr	r2, [pc, #52]	; (8006ab8 <HAL_RTC_WaitForSynchro+0x48>)
 8006a82:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a84:	f7fd fbf6 	bl	8004274 <HAL_GetTick>
 8006a88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a8a:	e009      	b.n	8006aa0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a8c:	f7fd fbf2 	bl	8004274 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e007      	b.n	8006ab0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0ee      	beq.n	8006a8c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	0001ff5f 	.word	0x0001ff5f

08006abc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d122      	bne.n	8006b20 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ae8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006aea:	f7fd fbc3 	bl	8004274 <HAL_GetTick>
 8006aee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006af0:	e00c      	b.n	8006b0c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006af2:	f7fd fbbf 	bl	8004274 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b00:	d904      	bls.n	8006b0c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2204      	movs	r2, #4
 8006b06:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d102      	bne.n	8006b20 <RTC_EnterInitMode+0x64>
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d1e8      	bne.n	8006af2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b44:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7ff ff8b 	bl	8006a70 <HAL_RTC_WaitForSynchro>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d004      	beq.n	8006b6a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2204      	movs	r2, #4
 8006b64:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006b82:	e005      	b.n	8006b90 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	3b0a      	subs	r3, #10
 8006b8e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	2b09      	cmp	r3, #9
 8006b94:	d8f6      	bhi.n	8006b84 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	011b      	lsls	r3, r3, #4
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	b2db      	uxtb	r3, r3
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006bbe:	79fb      	ldrb	r3, [r7, #7]
 8006bc0:	091b      	lsrs	r3, r3, #4
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	4413      	add	r3, r2
 8006bde:	b2db      	uxtb	r3, r3
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e09d      	b.n	8006d3a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d108      	bne.n	8006c18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c0e:	d009      	beq.n	8006c24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	61da      	str	r2, [r3, #28]
 8006c16:	e005      	b.n	8006c24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7fc fea4 	bl	800398c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c64:	d902      	bls.n	8006c6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	e002      	b.n	8006c72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c7a:	d007      	beq.n	8006c8c <HAL_SPI_Init+0xa0>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c84:	d002      	beq.n	8006c8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cce:	ea42 0103 	orr.w	r1, r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	0c1b      	lsrs	r3, r3, #16
 8006ce8:	f003 0204 	and.w	r2, r3, #4
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006d08:	ea42 0103 	orr.w	r1, r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e049      	b.n	8006de8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d106      	bne.n	8006d6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7fc fe51 	bl	8003a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2202      	movs	r2, #2
 8006d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4610      	mov	r0, r2
 8006d82:	f000 fd27 	bl	80077d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d001      	beq.n	8006e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e04a      	b.n	8006e9e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0201 	orr.w	r2, r2, #1
 8006e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a21      	ldr	r2, [pc, #132]	; (8006eac <HAL_TIM_Base_Start_IT+0xbc>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d018      	beq.n	8006e5c <HAL_TIM_Base_Start_IT+0x6c>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e32:	d013      	beq.n	8006e5c <HAL_TIM_Base_Start_IT+0x6c>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1d      	ldr	r2, [pc, #116]	; (8006eb0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d00e      	beq.n	8006e5c <HAL_TIM_Base_Start_IT+0x6c>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a1c      	ldr	r2, [pc, #112]	; (8006eb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d009      	beq.n	8006e5c <HAL_TIM_Base_Start_IT+0x6c>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1a      	ldr	r2, [pc, #104]	; (8006eb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d004      	beq.n	8006e5c <HAL_TIM_Base_Start_IT+0x6c>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a19      	ldr	r2, [pc, #100]	; (8006ebc <HAL_TIM_Base_Start_IT+0xcc>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d115      	bne.n	8006e88 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	4b17      	ldr	r3, [pc, #92]	; (8006ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b06      	cmp	r3, #6
 8006e6c:	d015      	beq.n	8006e9a <HAL_TIM_Base_Start_IT+0xaa>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e74:	d011      	beq.n	8006e9a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0201 	orr.w	r2, r2, #1
 8006e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e86:	e008      	b.n	8006e9a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0201 	orr.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	e000      	b.n	8006e9c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40012c00 	.word	0x40012c00
 8006eb0:	40000400 	.word	0x40000400
 8006eb4:	40000800 	.word	0x40000800
 8006eb8:	40013400 	.word	0x40013400
 8006ebc:	40014000 	.word	0x40014000
 8006ec0:	00010007 	.word	0x00010007

08006ec4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e049      	b.n	8006f6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f841 	bl	8006f72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f000 fc66 	bl	80077d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <HAL_TIM_PWM_Start+0x24>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	bf14      	ite	ne
 8006fa4:	2301      	movne	r3, #1
 8006fa6:	2300      	moveq	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	e03c      	b.n	8007026 <HAL_TIM_PWM_Start+0x9e>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d109      	bne.n	8006fc6 <HAL_TIM_PWM_Start+0x3e>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	bf14      	ite	ne
 8006fbe:	2301      	movne	r3, #1
 8006fc0:	2300      	moveq	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	e02f      	b.n	8007026 <HAL_TIM_PWM_Start+0x9e>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d109      	bne.n	8006fe0 <HAL_TIM_PWM_Start+0x58>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	bf14      	ite	ne
 8006fd8:	2301      	movne	r3, #1
 8006fda:	2300      	moveq	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	e022      	b.n	8007026 <HAL_TIM_PWM_Start+0x9e>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2b0c      	cmp	r3, #12
 8006fe4:	d109      	bne.n	8006ffa <HAL_TIM_PWM_Start+0x72>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	bf14      	ite	ne
 8006ff2:	2301      	movne	r3, #1
 8006ff4:	2300      	moveq	r3, #0
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	e015      	b.n	8007026 <HAL_TIM_PWM_Start+0x9e>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d109      	bne.n	8007014 <HAL_TIM_PWM_Start+0x8c>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b01      	cmp	r3, #1
 800700a:	bf14      	ite	ne
 800700c:	2301      	movne	r3, #1
 800700e:	2300      	moveq	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	e008      	b.n	8007026 <HAL_TIM_PWM_Start+0x9e>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b01      	cmp	r3, #1
 800701e:	bf14      	ite	ne
 8007020:	2301      	movne	r3, #1
 8007022:	2300      	moveq	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e097      	b.n	800715e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d104      	bne.n	800703e <HAL_TIM_PWM_Start+0xb6>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800703c:	e023      	b.n	8007086 <HAL_TIM_PWM_Start+0xfe>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b04      	cmp	r3, #4
 8007042:	d104      	bne.n	800704e <HAL_TIM_PWM_Start+0xc6>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800704c:	e01b      	b.n	8007086 <HAL_TIM_PWM_Start+0xfe>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b08      	cmp	r3, #8
 8007052:	d104      	bne.n	800705e <HAL_TIM_PWM_Start+0xd6>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800705c:	e013      	b.n	8007086 <HAL_TIM_PWM_Start+0xfe>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b0c      	cmp	r3, #12
 8007062:	d104      	bne.n	800706e <HAL_TIM_PWM_Start+0xe6>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800706c:	e00b      	b.n	8007086 <HAL_TIM_PWM_Start+0xfe>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b10      	cmp	r3, #16
 8007072:	d104      	bne.n	800707e <HAL_TIM_PWM_Start+0xf6>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800707c:	e003      	b.n	8007086 <HAL_TIM_PWM_Start+0xfe>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2201      	movs	r2, #1
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 ffa0 	bl	8007fd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a33      	ldr	r2, [pc, #204]	; (8007168 <HAL_TIM_PWM_Start+0x1e0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d013      	beq.n	80070c6 <HAL_TIM_PWM_Start+0x13e>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a32      	ldr	r2, [pc, #200]	; (800716c <HAL_TIM_PWM_Start+0x1e4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00e      	beq.n	80070c6 <HAL_TIM_PWM_Start+0x13e>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a30      	ldr	r2, [pc, #192]	; (8007170 <HAL_TIM_PWM_Start+0x1e8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d009      	beq.n	80070c6 <HAL_TIM_PWM_Start+0x13e>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a2f      	ldr	r2, [pc, #188]	; (8007174 <HAL_TIM_PWM_Start+0x1ec>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d004      	beq.n	80070c6 <HAL_TIM_PWM_Start+0x13e>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a2d      	ldr	r2, [pc, #180]	; (8007178 <HAL_TIM_PWM_Start+0x1f0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d101      	bne.n	80070ca <HAL_TIM_PWM_Start+0x142>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <HAL_TIM_PWM_Start+0x144>
 80070ca:	2300      	movs	r3, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d007      	beq.n	80070e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a20      	ldr	r2, [pc, #128]	; (8007168 <HAL_TIM_PWM_Start+0x1e0>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d018      	beq.n	800711c <HAL_TIM_PWM_Start+0x194>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f2:	d013      	beq.n	800711c <HAL_TIM_PWM_Start+0x194>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a20      	ldr	r2, [pc, #128]	; (800717c <HAL_TIM_PWM_Start+0x1f4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00e      	beq.n	800711c <HAL_TIM_PWM_Start+0x194>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a1f      	ldr	r2, [pc, #124]	; (8007180 <HAL_TIM_PWM_Start+0x1f8>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d009      	beq.n	800711c <HAL_TIM_PWM_Start+0x194>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a17      	ldr	r2, [pc, #92]	; (800716c <HAL_TIM_PWM_Start+0x1e4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d004      	beq.n	800711c <HAL_TIM_PWM_Start+0x194>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a16      	ldr	r2, [pc, #88]	; (8007170 <HAL_TIM_PWM_Start+0x1e8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d115      	bne.n	8007148 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	4b18      	ldr	r3, [pc, #96]	; (8007184 <HAL_TIM_PWM_Start+0x1fc>)
 8007124:	4013      	ands	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b06      	cmp	r3, #6
 800712c:	d015      	beq.n	800715a <HAL_TIM_PWM_Start+0x1d2>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007134:	d011      	beq.n	800715a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0201 	orr.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007146:	e008      	b.n	800715a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0201 	orr.w	r2, r2, #1
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	e000      	b.n	800715c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40012c00 	.word	0x40012c00
 800716c:	40013400 	.word	0x40013400
 8007170:	40014000 	.word	0x40014000
 8007174:	40014400 	.word	0x40014400
 8007178:	40014800 	.word	0x40014800
 800717c:	40000400 	.word	0x40000400
 8007180:	40000800 	.word	0x40000800
 8007184:	00010007 	.word	0x00010007

08007188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b02      	cmp	r3, #2
 800719c:	d122      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d11b      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0202 	mvn.w	r2, #2
 80071b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	f003 0303 	and.w	r3, r3, #3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fae3 	bl	8007796 <HAL_TIM_IC_CaptureCallback>
 80071d0:	e005      	b.n	80071de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fad5 	bl	8007782 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fae6 	bl	80077aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0304 	and.w	r3, r3, #4
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d122      	bne.n	8007238 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d11b      	bne.n	8007238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0204 	mvn.w	r2, #4
 8007208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2202      	movs	r2, #2
 800720e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fab9 	bl	8007796 <HAL_TIM_IC_CaptureCallback>
 8007224:	e005      	b.n	8007232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 faab 	bl	8007782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fabc 	bl	80077aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f003 0308 	and.w	r3, r3, #8
 8007242:	2b08      	cmp	r3, #8
 8007244:	d122      	bne.n	800728c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f003 0308 	and.w	r3, r3, #8
 8007250:	2b08      	cmp	r3, #8
 8007252:	d11b      	bne.n	800728c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0208 	mvn.w	r2, #8
 800725c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2204      	movs	r2, #4
 8007262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fa8f 	bl	8007796 <HAL_TIM_IC_CaptureCallback>
 8007278:	e005      	b.n	8007286 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fa81 	bl	8007782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fa92 	bl	80077aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0310 	and.w	r3, r3, #16
 8007296:	2b10      	cmp	r3, #16
 8007298:	d122      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	2b10      	cmp	r3, #16
 80072a6:	d11b      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0210 	mvn.w	r2, #16
 80072b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2208      	movs	r2, #8
 80072b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fa65 	bl	8007796 <HAL_TIM_IC_CaptureCallback>
 80072cc:	e005      	b.n	80072da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa57 	bl	8007782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fa68 	bl	80077aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d10e      	bne.n	800730c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d107      	bne.n	800730c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0201 	mvn.w	r2, #1
 8007304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7fa ffa0 	bl	800224c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007316:	2b80      	cmp	r3, #128	; 0x80
 8007318:	d10e      	bne.n	8007338 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007324:	2b80      	cmp	r3, #128	; 0x80
 8007326:	d107      	bne.n	8007338 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fefe 	bl	8008134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007346:	d10e      	bne.n	8007366 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007352:	2b80      	cmp	r3, #128	; 0x80
 8007354:	d107      	bne.n	8007366 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800735e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fef1 	bl	8008148 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b40      	cmp	r3, #64	; 0x40
 8007372:	d10e      	bne.n	8007392 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737e:	2b40      	cmp	r3, #64	; 0x40
 8007380:	d107      	bne.n	8007392 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800738a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fa16 	bl	80077be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	f003 0320 	and.w	r3, r3, #32
 800739c:	2b20      	cmp	r3, #32
 800739e:	d10e      	bne.n	80073be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f003 0320 	and.w	r3, r3, #32
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d107      	bne.n	80073be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f06f 0220 	mvn.w	r2, #32
 80073b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 feb1 	bl	8008120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073be:	bf00      	nop
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e0ff      	b.n	80075e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b14      	cmp	r3, #20
 80073f2:	f200 80f0 	bhi.w	80075d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80073f6:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	08007451 	.word	0x08007451
 8007400:	080075d7 	.word	0x080075d7
 8007404:	080075d7 	.word	0x080075d7
 8007408:	080075d7 	.word	0x080075d7
 800740c:	08007491 	.word	0x08007491
 8007410:	080075d7 	.word	0x080075d7
 8007414:	080075d7 	.word	0x080075d7
 8007418:	080075d7 	.word	0x080075d7
 800741c:	080074d3 	.word	0x080074d3
 8007420:	080075d7 	.word	0x080075d7
 8007424:	080075d7 	.word	0x080075d7
 8007428:	080075d7 	.word	0x080075d7
 800742c:	08007513 	.word	0x08007513
 8007430:	080075d7 	.word	0x080075d7
 8007434:	080075d7 	.word	0x080075d7
 8007438:	080075d7 	.word	0x080075d7
 800743c:	08007555 	.word	0x08007555
 8007440:	080075d7 	.word	0x080075d7
 8007444:	080075d7 	.word	0x080075d7
 8007448:	080075d7 	.word	0x080075d7
 800744c:	08007595 	.word	0x08007595
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68b9      	ldr	r1, [r7, #8]
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fa4c 	bl	80078f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699a      	ldr	r2, [r3, #24]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0208 	orr.w	r2, r2, #8
 800746a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0204 	bic.w	r2, r2, #4
 800747a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6999      	ldr	r1, [r3, #24]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	691a      	ldr	r2, [r3, #16]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	619a      	str	r2, [r3, #24]
      break;
 800748e:	e0a5      	b.n	80075dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68b9      	ldr	r1, [r7, #8]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fabc 	bl	8007a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	699a      	ldr	r2, [r3, #24]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	699a      	ldr	r2, [r3, #24]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6999      	ldr	r1, [r3, #24]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	021a      	lsls	r2, r3, #8
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	619a      	str	r2, [r3, #24]
      break;
 80074d0:	e084      	b.n	80075dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	4618      	mov	r0, r3
 80074da:	f000 fb25 	bl	8007b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f042 0208 	orr.w	r2, r2, #8
 80074ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69da      	ldr	r2, [r3, #28]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0204 	bic.w	r2, r2, #4
 80074fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69d9      	ldr	r1, [r3, #28]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	691a      	ldr	r2, [r3, #16]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	61da      	str	r2, [r3, #28]
      break;
 8007510:	e064      	b.n	80075dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68b9      	ldr	r1, [r7, #8]
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fb8d 	bl	8007c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69da      	ldr	r2, [r3, #28]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800752c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69da      	ldr	r2, [r3, #28]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800753c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69d9      	ldr	r1, [r3, #28]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	021a      	lsls	r2, r3, #8
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	61da      	str	r2, [r3, #28]
      break;
 8007552:	e043      	b.n	80075dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68b9      	ldr	r1, [r7, #8]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fbd6 	bl	8007d0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f042 0208 	orr.w	r2, r2, #8
 800756e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0204 	bic.w	r2, r2, #4
 800757e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	691a      	ldr	r2, [r3, #16]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007592:	e023      	b.n	80075dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68b9      	ldr	r1, [r7, #8]
 800759a:	4618      	mov	r0, r3
 800759c:	f000 fc1a 	bl	8007dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	021a      	lsls	r2, r3, #8
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80075d4:	e002      	b.n	80075dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	75fb      	strb	r3, [r7, #23]
      break;
 80075da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop

080075f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_TIM_ConfigClockSource+0x1c>
 8007608:	2302      	movs	r3, #2
 800760a:	e0b6      	b.n	800777a <HAL_TIM_ConfigClockSource+0x18a>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800762a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800762e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007636:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007648:	d03e      	beq.n	80076c8 <HAL_TIM_ConfigClockSource+0xd8>
 800764a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800764e:	f200 8087 	bhi.w	8007760 <HAL_TIM_ConfigClockSource+0x170>
 8007652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007656:	f000 8086 	beq.w	8007766 <HAL_TIM_ConfigClockSource+0x176>
 800765a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765e:	d87f      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x170>
 8007660:	2b70      	cmp	r3, #112	; 0x70
 8007662:	d01a      	beq.n	800769a <HAL_TIM_ConfigClockSource+0xaa>
 8007664:	2b70      	cmp	r3, #112	; 0x70
 8007666:	d87b      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x170>
 8007668:	2b60      	cmp	r3, #96	; 0x60
 800766a:	d050      	beq.n	800770e <HAL_TIM_ConfigClockSource+0x11e>
 800766c:	2b60      	cmp	r3, #96	; 0x60
 800766e:	d877      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x170>
 8007670:	2b50      	cmp	r3, #80	; 0x50
 8007672:	d03c      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0xfe>
 8007674:	2b50      	cmp	r3, #80	; 0x50
 8007676:	d873      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x170>
 8007678:	2b40      	cmp	r3, #64	; 0x40
 800767a:	d058      	beq.n	800772e <HAL_TIM_ConfigClockSource+0x13e>
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d86f      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x170>
 8007680:	2b30      	cmp	r3, #48	; 0x30
 8007682:	d064      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x15e>
 8007684:	2b30      	cmp	r3, #48	; 0x30
 8007686:	d86b      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x170>
 8007688:	2b20      	cmp	r3, #32
 800768a:	d060      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x15e>
 800768c:	2b20      	cmp	r3, #32
 800768e:	d867      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x170>
 8007690:	2b00      	cmp	r3, #0
 8007692:	d05c      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x15e>
 8007694:	2b10      	cmp	r3, #16
 8007696:	d05a      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x15e>
 8007698:	e062      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6899      	ldr	r1, [r3, #8]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f000 fc73 	bl	8007f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	609a      	str	r2, [r3, #8]
      break;
 80076c6:	e04f      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	6899      	ldr	r1, [r3, #8]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f000 fc5c 	bl	8007f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689a      	ldr	r2, [r3, #8]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076ea:	609a      	str	r2, [r3, #8]
      break;
 80076ec:	e03c      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	6859      	ldr	r1, [r3, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	461a      	mov	r2, r3
 80076fc:	f000 fbd0 	bl	8007ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2150      	movs	r1, #80	; 0x50
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fc29 	bl	8007f5e <TIM_ITRx_SetConfig>
      break;
 800770c:	e02c      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	6859      	ldr	r1, [r3, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	461a      	mov	r2, r3
 800771c:	f000 fbef 	bl	8007efe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2160      	movs	r1, #96	; 0x60
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fc19 	bl	8007f5e <TIM_ITRx_SetConfig>
      break;
 800772c:	e01c      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	6859      	ldr	r1, [r3, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	461a      	mov	r2, r3
 800773c:	f000 fbb0 	bl	8007ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2140      	movs	r1, #64	; 0x40
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fc09 	bl	8007f5e <TIM_ITRx_SetConfig>
      break;
 800774c:	e00c      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4619      	mov	r1, r3
 8007758:	4610      	mov	r0, r2
 800775a:	f000 fc00 	bl	8007f5e <TIM_ITRx_SetConfig>
      break;
 800775e:	e003      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	73fb      	strb	r3, [r7, #15]
      break;
 8007764:	e000      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007766:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a3c      	ldr	r2, [pc, #240]	; (80078d8 <TIM_Base_SetConfig+0x104>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00f      	beq.n	800780c <TIM_Base_SetConfig+0x38>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f2:	d00b      	beq.n	800780c <TIM_Base_SetConfig+0x38>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a39      	ldr	r2, [pc, #228]	; (80078dc <TIM_Base_SetConfig+0x108>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d007      	beq.n	800780c <TIM_Base_SetConfig+0x38>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a38      	ldr	r2, [pc, #224]	; (80078e0 <TIM_Base_SetConfig+0x10c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d003      	beq.n	800780c <TIM_Base_SetConfig+0x38>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a37      	ldr	r2, [pc, #220]	; (80078e4 <TIM_Base_SetConfig+0x110>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d108      	bne.n	800781e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a2d      	ldr	r2, [pc, #180]	; (80078d8 <TIM_Base_SetConfig+0x104>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d01b      	beq.n	800785e <TIM_Base_SetConfig+0x8a>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800782c:	d017      	beq.n	800785e <TIM_Base_SetConfig+0x8a>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a2a      	ldr	r2, [pc, #168]	; (80078dc <TIM_Base_SetConfig+0x108>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d013      	beq.n	800785e <TIM_Base_SetConfig+0x8a>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a29      	ldr	r2, [pc, #164]	; (80078e0 <TIM_Base_SetConfig+0x10c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d00f      	beq.n	800785e <TIM_Base_SetConfig+0x8a>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a28      	ldr	r2, [pc, #160]	; (80078e4 <TIM_Base_SetConfig+0x110>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00b      	beq.n	800785e <TIM_Base_SetConfig+0x8a>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a27      	ldr	r2, [pc, #156]	; (80078e8 <TIM_Base_SetConfig+0x114>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d007      	beq.n	800785e <TIM_Base_SetConfig+0x8a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a26      	ldr	r2, [pc, #152]	; (80078ec <TIM_Base_SetConfig+0x118>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d003      	beq.n	800785e <TIM_Base_SetConfig+0x8a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a25      	ldr	r2, [pc, #148]	; (80078f0 <TIM_Base_SetConfig+0x11c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d108      	bne.n	8007870 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a10      	ldr	r2, [pc, #64]	; (80078d8 <TIM_Base_SetConfig+0x104>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d00f      	beq.n	80078bc <TIM_Base_SetConfig+0xe8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a11      	ldr	r2, [pc, #68]	; (80078e4 <TIM_Base_SetConfig+0x110>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d00b      	beq.n	80078bc <TIM_Base_SetConfig+0xe8>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a10      	ldr	r2, [pc, #64]	; (80078e8 <TIM_Base_SetConfig+0x114>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d007      	beq.n	80078bc <TIM_Base_SetConfig+0xe8>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a0f      	ldr	r2, [pc, #60]	; (80078ec <TIM_Base_SetConfig+0x118>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d003      	beq.n	80078bc <TIM_Base_SetConfig+0xe8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a0e      	ldr	r2, [pc, #56]	; (80078f0 <TIM_Base_SetConfig+0x11c>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d103      	bne.n	80078c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	691a      	ldr	r2, [r3, #16]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	615a      	str	r2, [r3, #20]
}
 80078ca:	bf00      	nop
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	40012c00 	.word	0x40012c00
 80078dc:	40000400 	.word	0x40000400
 80078e0:	40000800 	.word	0x40000800
 80078e4:	40013400 	.word	0x40013400
 80078e8:	40014000 	.word	0x40014000
 80078ec:	40014400 	.word	0x40014400
 80078f0:	40014800 	.word	0x40014800

080078f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b087      	sub	sp, #28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	f023 0201 	bic.w	r2, r3, #1
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f023 0303 	bic.w	r3, r3, #3
 800792e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f023 0302 	bic.w	r3, r3, #2
 8007940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	4313      	orrs	r3, r2
 800794a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a2c      	ldr	r2, [pc, #176]	; (8007a00 <TIM_OC1_SetConfig+0x10c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d00f      	beq.n	8007974 <TIM_OC1_SetConfig+0x80>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a2b      	ldr	r2, [pc, #172]	; (8007a04 <TIM_OC1_SetConfig+0x110>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d00b      	beq.n	8007974 <TIM_OC1_SetConfig+0x80>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a2a      	ldr	r2, [pc, #168]	; (8007a08 <TIM_OC1_SetConfig+0x114>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d007      	beq.n	8007974 <TIM_OC1_SetConfig+0x80>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a29      	ldr	r2, [pc, #164]	; (8007a0c <TIM_OC1_SetConfig+0x118>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d003      	beq.n	8007974 <TIM_OC1_SetConfig+0x80>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a28      	ldr	r2, [pc, #160]	; (8007a10 <TIM_OC1_SetConfig+0x11c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d10c      	bne.n	800798e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f023 0308 	bic.w	r3, r3, #8
 800797a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	4313      	orrs	r3, r2
 8007984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f023 0304 	bic.w	r3, r3, #4
 800798c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a1b      	ldr	r2, [pc, #108]	; (8007a00 <TIM_OC1_SetConfig+0x10c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00f      	beq.n	80079b6 <TIM_OC1_SetConfig+0xc2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a1a      	ldr	r2, [pc, #104]	; (8007a04 <TIM_OC1_SetConfig+0x110>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00b      	beq.n	80079b6 <TIM_OC1_SetConfig+0xc2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a19      	ldr	r2, [pc, #100]	; (8007a08 <TIM_OC1_SetConfig+0x114>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d007      	beq.n	80079b6 <TIM_OC1_SetConfig+0xc2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a18      	ldr	r2, [pc, #96]	; (8007a0c <TIM_OC1_SetConfig+0x118>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d003      	beq.n	80079b6 <TIM_OC1_SetConfig+0xc2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a17      	ldr	r2, [pc, #92]	; (8007a10 <TIM_OC1_SetConfig+0x11c>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d111      	bne.n	80079da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	621a      	str	r2, [r3, #32]
}
 80079f4:	bf00      	nop
 80079f6:	371c      	adds	r7, #28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	40012c00 	.word	0x40012c00
 8007a04:	40013400 	.word	0x40013400
 8007a08:	40014000 	.word	0x40014000
 8007a0c:	40014400 	.word	0x40014400
 8007a10:	40014800 	.word	0x40014800

08007a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	f023 0210 	bic.w	r2, r3, #16
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	021b      	lsls	r3, r3, #8
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f023 0320 	bic.w	r3, r3, #32
 8007a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	011b      	lsls	r3, r3, #4
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a28      	ldr	r2, [pc, #160]	; (8007b14 <TIM_OC2_SetConfig+0x100>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d003      	beq.n	8007a80 <TIM_OC2_SetConfig+0x6c>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a27      	ldr	r2, [pc, #156]	; (8007b18 <TIM_OC2_SetConfig+0x104>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d10d      	bne.n	8007a9c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	011b      	lsls	r3, r3, #4
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <TIM_OC2_SetConfig+0x100>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d00f      	beq.n	8007ac4 <TIM_OC2_SetConfig+0xb0>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a1c      	ldr	r2, [pc, #112]	; (8007b18 <TIM_OC2_SetConfig+0x104>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d00b      	beq.n	8007ac4 <TIM_OC2_SetConfig+0xb0>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a1b      	ldr	r2, [pc, #108]	; (8007b1c <TIM_OC2_SetConfig+0x108>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d007      	beq.n	8007ac4 <TIM_OC2_SetConfig+0xb0>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a1a      	ldr	r2, [pc, #104]	; (8007b20 <TIM_OC2_SetConfig+0x10c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d003      	beq.n	8007ac4 <TIM_OC2_SetConfig+0xb0>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a19      	ldr	r2, [pc, #100]	; (8007b24 <TIM_OC2_SetConfig+0x110>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d113      	bne.n	8007aec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ad2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	621a      	str	r2, [r3, #32]
}
 8007b06:	bf00      	nop
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	40012c00 	.word	0x40012c00
 8007b18:	40013400 	.word	0x40013400
 8007b1c:	40014000 	.word	0x40014000
 8007b20:	40014400 	.word	0x40014400
 8007b24:	40014800 	.word	0x40014800

08007b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0303 	bic.w	r3, r3, #3
 8007b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	021b      	lsls	r3, r3, #8
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a27      	ldr	r2, [pc, #156]	; (8007c24 <TIM_OC3_SetConfig+0xfc>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d003      	beq.n	8007b92 <TIM_OC3_SetConfig+0x6a>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a26      	ldr	r2, [pc, #152]	; (8007c28 <TIM_OC3_SetConfig+0x100>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d10d      	bne.n	8007bae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a1c      	ldr	r2, [pc, #112]	; (8007c24 <TIM_OC3_SetConfig+0xfc>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00f      	beq.n	8007bd6 <TIM_OC3_SetConfig+0xae>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a1b      	ldr	r2, [pc, #108]	; (8007c28 <TIM_OC3_SetConfig+0x100>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d00b      	beq.n	8007bd6 <TIM_OC3_SetConfig+0xae>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a1a      	ldr	r2, [pc, #104]	; (8007c2c <TIM_OC3_SetConfig+0x104>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d007      	beq.n	8007bd6 <TIM_OC3_SetConfig+0xae>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a19      	ldr	r2, [pc, #100]	; (8007c30 <TIM_OC3_SetConfig+0x108>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d003      	beq.n	8007bd6 <TIM_OC3_SetConfig+0xae>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a18      	ldr	r2, [pc, #96]	; (8007c34 <TIM_OC3_SetConfig+0x10c>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d113      	bne.n	8007bfe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	621a      	str	r2, [r3, #32]
}
 8007c18:	bf00      	nop
 8007c1a:	371c      	adds	r7, #28
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	40012c00 	.word	0x40012c00
 8007c28:	40013400 	.word	0x40013400
 8007c2c:	40014000 	.word	0x40014000
 8007c30:	40014400 	.word	0x40014400
 8007c34:	40014800 	.word	0x40014800

08007c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	031b      	lsls	r3, r3, #12
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a18      	ldr	r2, [pc, #96]	; (8007cf8 <TIM_OC4_SetConfig+0xc0>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d00f      	beq.n	8007cbc <TIM_OC4_SetConfig+0x84>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a17      	ldr	r2, [pc, #92]	; (8007cfc <TIM_OC4_SetConfig+0xc4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00b      	beq.n	8007cbc <TIM_OC4_SetConfig+0x84>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a16      	ldr	r2, [pc, #88]	; (8007d00 <TIM_OC4_SetConfig+0xc8>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d007      	beq.n	8007cbc <TIM_OC4_SetConfig+0x84>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a15      	ldr	r2, [pc, #84]	; (8007d04 <TIM_OC4_SetConfig+0xcc>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d003      	beq.n	8007cbc <TIM_OC4_SetConfig+0x84>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a14      	ldr	r2, [pc, #80]	; (8007d08 <TIM_OC4_SetConfig+0xd0>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d109      	bne.n	8007cd0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	019b      	lsls	r3, r3, #6
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	621a      	str	r2, [r3, #32]
}
 8007cea:	bf00      	nop
 8007cec:	371c      	adds	r7, #28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	40012c00 	.word	0x40012c00
 8007cfc:	40013400 	.word	0x40013400
 8007d00:	40014000 	.word	0x40014000
 8007d04:	40014400 	.word	0x40014400
 8007d08:	40014800 	.word	0x40014800

08007d0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	041b      	lsls	r3, r3, #16
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a17      	ldr	r2, [pc, #92]	; (8007dc0 <TIM_OC5_SetConfig+0xb4>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00f      	beq.n	8007d86 <TIM_OC5_SetConfig+0x7a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a16      	ldr	r2, [pc, #88]	; (8007dc4 <TIM_OC5_SetConfig+0xb8>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d00b      	beq.n	8007d86 <TIM_OC5_SetConfig+0x7a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a15      	ldr	r2, [pc, #84]	; (8007dc8 <TIM_OC5_SetConfig+0xbc>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d007      	beq.n	8007d86 <TIM_OC5_SetConfig+0x7a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a14      	ldr	r2, [pc, #80]	; (8007dcc <TIM_OC5_SetConfig+0xc0>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d003      	beq.n	8007d86 <TIM_OC5_SetConfig+0x7a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a13      	ldr	r2, [pc, #76]	; (8007dd0 <TIM_OC5_SetConfig+0xc4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d109      	bne.n	8007d9a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	621a      	str	r2, [r3, #32]
}
 8007db4:	bf00      	nop
 8007db6:	371c      	adds	r7, #28
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	40012c00 	.word	0x40012c00
 8007dc4:	40013400 	.word	0x40013400
 8007dc8:	40014000 	.word	0x40014000
 8007dcc:	40014400 	.word	0x40014400
 8007dd0:	40014800 	.word	0x40014800

08007dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	051b      	lsls	r3, r3, #20
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a18      	ldr	r2, [pc, #96]	; (8007e8c <TIM_OC6_SetConfig+0xb8>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00f      	beq.n	8007e50 <TIM_OC6_SetConfig+0x7c>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a17      	ldr	r2, [pc, #92]	; (8007e90 <TIM_OC6_SetConfig+0xbc>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d00b      	beq.n	8007e50 <TIM_OC6_SetConfig+0x7c>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a16      	ldr	r2, [pc, #88]	; (8007e94 <TIM_OC6_SetConfig+0xc0>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d007      	beq.n	8007e50 <TIM_OC6_SetConfig+0x7c>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a15      	ldr	r2, [pc, #84]	; (8007e98 <TIM_OC6_SetConfig+0xc4>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d003      	beq.n	8007e50 <TIM_OC6_SetConfig+0x7c>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a14      	ldr	r2, [pc, #80]	; (8007e9c <TIM_OC6_SetConfig+0xc8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d109      	bne.n	8007e64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	029b      	lsls	r3, r3, #10
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	621a      	str	r2, [r3, #32]
}
 8007e7e:	bf00      	nop
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	40012c00 	.word	0x40012c00
 8007e90:	40013400 	.word	0x40013400
 8007e94:	40014000 	.word	0x40014000
 8007e98:	40014400 	.word	0x40014400
 8007e9c:	40014800 	.word	0x40014800

08007ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a1b      	ldr	r3, [r3, #32]
 8007eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	f023 0201 	bic.w	r2, r3, #1
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	011b      	lsls	r3, r3, #4
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f023 030a 	bic.w	r3, r3, #10
 8007edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	621a      	str	r2, [r3, #32]
}
 8007ef2:	bf00      	nop
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b087      	sub	sp, #28
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	60f8      	str	r0, [r7, #12]
 8007f06:	60b9      	str	r1, [r7, #8]
 8007f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	f023 0210 	bic.w	r2, r3, #16
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	031b      	lsls	r3, r3, #12
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	011b      	lsls	r3, r3, #4
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	621a      	str	r2, [r3, #32]
}
 8007f52:	bf00      	nop
 8007f54:	371c      	adds	r7, #28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b085      	sub	sp, #20
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	f043 0307 	orr.w	r3, r3, #7
 8007f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	609a      	str	r2, [r3, #8]
}
 8007f88:	bf00      	nop
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	021a      	lsls	r2, r3, #8
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	609a      	str	r2, [r3, #8]
}
 8007fc8:	bf00      	nop
 8007fca:	371c      	adds	r7, #28
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	f003 031f 	and.w	r3, r3, #31
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6a1a      	ldr	r2, [r3, #32]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	43db      	mvns	r3, r3
 8007ff6:	401a      	ands	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6a1a      	ldr	r2, [r3, #32]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f003 031f 	and.w	r3, r3, #31
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	fa01 f303 	lsl.w	r3, r1, r3
 800800c:	431a      	orrs	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	621a      	str	r2, [r3, #32]
}
 8008012:	bf00      	nop
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
	...

08008020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008034:	2302      	movs	r3, #2
 8008036:	e063      	b.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a2b      	ldr	r2, [pc, #172]	; (800810c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d004      	beq.n	800806c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a2a      	ldr	r2, [pc, #168]	; (8008110 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d108      	bne.n	800807e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008072:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4313      	orrs	r3, r2
 800807c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008084:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4313      	orrs	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a1b      	ldr	r2, [pc, #108]	; (800810c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d018      	beq.n	80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080aa:	d013      	beq.n	80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a18      	ldr	r2, [pc, #96]	; (8008114 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d00e      	beq.n	80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a17      	ldr	r2, [pc, #92]	; (8008118 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d009      	beq.n	80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a12      	ldr	r2, [pc, #72]	; (8008110 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d004      	beq.n	80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a13      	ldr	r2, [pc, #76]	; (800811c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d10c      	bne.n	80080ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	40012c00 	.word	0x40012c00
 8008110:	40013400 	.word	0x40013400
 8008114:	40000400 	.word	0x40000400
 8008118:	40000800 	.word	0x40000800
 800811c:	40014000 	.word	0x40014000

08008120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e040      	b.n	80081f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008172:	2b00      	cmp	r3, #0
 8008174:	d106      	bne.n	8008184 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7fb fcd2 	bl	8003b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2224      	movs	r2, #36	; 0x24
 8008188:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0201 	bic.w	r2, r2, #1
 8008198:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fc00 	bl	80089a0 <UART_SetConfig>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d101      	bne.n	80081aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e022      	b.n	80081f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fdc8 	bl	8008d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689a      	ldr	r2, [r3, #8]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0201 	orr.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fe4f 	bl	8008e8c <UART_CheckIdleState>
 80081ee:	4603      	mov	r3, r0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08a      	sub	sp, #40	; 0x28
 80081fc:	af02      	add	r7, sp, #8
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	4613      	mov	r3, r2
 8008206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800820c:	2b20      	cmp	r3, #32
 800820e:	d178      	bne.n	8008302 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <HAL_UART_Transmit+0x24>
 8008216:	88fb      	ldrh	r3, [r7, #6]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e071      	b.n	8008304 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2221      	movs	r2, #33	; 0x21
 800822c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800822e:	f7fc f821 	bl	8004274 <HAL_GetTick>
 8008232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	88fa      	ldrh	r2, [r7, #6]
 8008238:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	88fa      	ldrh	r2, [r7, #6]
 8008240:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824c:	d108      	bne.n	8008260 <HAL_UART_Transmit+0x68>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d104      	bne.n	8008260 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008256:	2300      	movs	r3, #0
 8008258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	61bb      	str	r3, [r7, #24]
 800825e:	e003      	b.n	8008268 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008264:	2300      	movs	r3, #0
 8008266:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008268:	e030      	b.n	80082cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2200      	movs	r2, #0
 8008272:	2180      	movs	r1, #128	; 0x80
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 feb1 	bl	8008fdc <UART_WaitOnFlagUntilTimeout>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d004      	beq.n	800828a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2220      	movs	r2, #32
 8008284:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e03c      	b.n	8008304 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10b      	bne.n	80082a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	881a      	ldrh	r2, [r3, #0]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800829c:	b292      	uxth	r2, r2
 800829e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	3302      	adds	r3, #2
 80082a4:	61bb      	str	r3, [r7, #24]
 80082a6:	e008      	b.n	80082ba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	781a      	ldrb	r2, [r3, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	b292      	uxth	r2, r2
 80082b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	3301      	adds	r3, #1
 80082b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	3b01      	subs	r3, #1
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1c8      	bne.n	800826a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2200      	movs	r2, #0
 80082e0:	2140      	movs	r1, #64	; 0x40
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 fe7a 	bl	8008fdc <UART_WaitOnFlagUntilTimeout>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d004      	beq.n	80082f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2220      	movs	r2, #32
 80082f2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e005      	b.n	8008304 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2220      	movs	r2, #32
 80082fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	e000      	b.n	8008304 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008302:	2302      	movs	r3, #2
  }
}
 8008304:	4618      	mov	r0, r3
 8008306:	3720      	adds	r7, #32
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08a      	sub	sp, #40	; 0x28
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008320:	2b20      	cmp	r3, #32
 8008322:	d132      	bne.n	800838a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <HAL_UART_Receive_IT+0x24>
 800832a:	88fb      	ldrh	r3, [r7, #6]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e02b      	b.n	800838c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d018      	beq.n	800837a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	613b      	str	r3, [r7, #16]
   return(result);
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	623b      	str	r3, [r7, #32]
 8008368:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	69f9      	ldr	r1, [r7, #28]
 800836c:	6a3a      	ldr	r2, [r7, #32]
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	61bb      	str	r3, [r7, #24]
   return(result);
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e6      	bne.n	8008348 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800837a:	88fb      	ldrh	r3, [r7, #6]
 800837c:	461a      	mov	r2, r3
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f000 fe93 	bl	80090ac <UART_Start_Receive_IT>
 8008386:	4603      	mov	r3, r0
 8008388:	e000      	b.n	800838c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800838a:	2302      	movs	r3, #2
  }
}
 800838c:	4618      	mov	r0, r3
 800838e:	3728      	adds	r7, #40	; 0x28
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b0ba      	sub	sp, #232	; 0xe8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80083be:	f640 030f 	movw	r3, #2063	; 0x80f
 80083c2:	4013      	ands	r3, r2
 80083c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80083c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d115      	bne.n	80083fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80083d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d4:	f003 0320 	and.w	r3, r3, #32
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00f      	beq.n	80083fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80083dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e0:	f003 0320 	and.w	r3, r3, #32
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d009      	beq.n	80083fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 82ab 	beq.w	8008948 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	4798      	blx	r3
      }
      return;
 80083fa:	e2a5      	b.n	8008948 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80083fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 8117 	beq.w	8008634 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d106      	bne.n	8008420 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008412:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008416:	4b85      	ldr	r3, [pc, #532]	; (800862c <HAL_UART_IRQHandler+0x298>)
 8008418:	4013      	ands	r3, r2
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 810a 	beq.w	8008634 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b00      	cmp	r3, #0
 800842a:	d011      	beq.n	8008450 <HAL_UART_IRQHandler+0xbc>
 800842c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00b      	beq.n	8008450 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2201      	movs	r2, #1
 800843e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008446:	f043 0201 	orr.w	r2, r3, #1
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d011      	beq.n	8008480 <HAL_UART_IRQHandler+0xec>
 800845c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00b      	beq.n	8008480 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2202      	movs	r2, #2
 800846e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008476:	f043 0204 	orr.w	r2, r3, #4
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008484:	f003 0304 	and.w	r3, r3, #4
 8008488:	2b00      	cmp	r3, #0
 800848a:	d011      	beq.n	80084b0 <HAL_UART_IRQHandler+0x11c>
 800848c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00b      	beq.n	80084b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2204      	movs	r2, #4
 800849e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084a6:	f043 0202 	orr.w	r2, r3, #2
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d017      	beq.n	80084ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d105      	bne.n	80084d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80084c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2208      	movs	r2, #8
 80084da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084e2:	f043 0208 	orr.w	r2, r3, #8
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80084ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d012      	beq.n	800851e <HAL_UART_IRQHandler+0x18a>
 80084f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00c      	beq.n	800851e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800850c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008514:	f043 0220 	orr.w	r2, r3, #32
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 8211 	beq.w	800894c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800852a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00d      	beq.n	8008552 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800853a:	f003 0320 	and.w	r3, r3, #32
 800853e:	2b00      	cmp	r3, #0
 8008540:	d007      	beq.n	8008552 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008546:	2b00      	cmp	r3, #0
 8008548:	d003      	beq.n	8008552 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008558:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	d005      	beq.n	8008576 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800856a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800856e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008572:	2b00      	cmp	r3, #0
 8008574:	d04f      	beq.n	8008616 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fe4c 	bl	8009214 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008586:	2b40      	cmp	r3, #64	; 0x40
 8008588:	d141      	bne.n	800860e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3308      	adds	r3, #8
 8008590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008594:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80085a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3308      	adds	r3, #8
 80085b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80085b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80085ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80085c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80085ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1d9      	bne.n	800858a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d013      	beq.n	8008606 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085e2:	4a13      	ldr	r2, [pc, #76]	; (8008630 <HAL_UART_IRQHandler+0x29c>)
 80085e4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fb ffbc 	bl	8004568 <HAL_DMA_Abort_IT>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d017      	beq.n	8008626 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008600:	4610      	mov	r0, r2
 8008602:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008604:	e00f      	b.n	8008626 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f9b4 	bl	8008974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800860c:	e00b      	b.n	8008626 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f9b0 	bl	8008974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008614:	e007      	b.n	8008626 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f9ac 	bl	8008974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008624:	e192      	b.n	800894c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008626:	bf00      	nop
    return;
 8008628:	e190      	b.n	800894c <HAL_UART_IRQHandler+0x5b8>
 800862a:	bf00      	nop
 800862c:	04000120 	.word	0x04000120
 8008630:	080092dd 	.word	0x080092dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008638:	2b01      	cmp	r3, #1
 800863a:	f040 814b 	bne.w	80088d4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800863e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008642:	f003 0310 	and.w	r3, r3, #16
 8008646:	2b00      	cmp	r3, #0
 8008648:	f000 8144 	beq.w	80088d4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800864c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008650:	f003 0310 	and.w	r3, r3, #16
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 813d 	beq.w	80088d4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2210      	movs	r2, #16
 8008660:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866c:	2b40      	cmp	r3, #64	; 0x40
 800866e:	f040 80b5 	bne.w	80087dc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800867e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 8164 	beq.w	8008950 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800868e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008692:	429a      	cmp	r2, r3
 8008694:	f080 815c 	bcs.w	8008950 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800869e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	2b20      	cmp	r3, #32
 80086aa:	f000 8086 	beq.w	80087ba <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086ba:	e853 3f00 	ldrex	r3, [r3]
 80086be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80086c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80086dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086e8:	e841 2300 	strex	r3, r2, [r1]
 80086ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80086f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1da      	bne.n	80086ae <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3308      	adds	r3, #8
 80086fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800870a:	f023 0301 	bic.w	r3, r3, #1
 800870e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3308      	adds	r3, #8
 8008718:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800871c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008720:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008722:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008724:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800872e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e1      	bne.n	80086f8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3308      	adds	r3, #8
 800873a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800874a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3308      	adds	r3, #8
 8008754:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008758:	66fa      	str	r2, [r7, #108]	; 0x6c
 800875a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800875e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008760:	e841 2300 	strex	r3, r2, [r1]
 8008764:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e3      	bne.n	8008734 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800878a:	f023 0310 	bic.w	r3, r3, #16
 800878e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800879c:	65bb      	str	r3, [r7, #88]	; 0x58
 800879e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087a4:	e841 2300 	strex	r3, r2, [r1]
 80087a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e4      	bne.n	800877a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fb fe9e 	bl	80044f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2202      	movs	r2, #2
 80087be:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	4619      	mov	r1, r3
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f8d7 	bl	8008988 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087da:	e0b9      	b.n	8008950 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 80ab 	beq.w	8008954 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80087fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 80a6 	beq.w	8008954 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800881c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	461a      	mov	r2, r3
 8008826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800882a:	647b      	str	r3, [r7, #68]	; 0x44
 800882c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e4      	bne.n	8008808 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3308      	adds	r3, #8
 8008844:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	623b      	str	r3, [r7, #32]
   return(result);
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	f023 0301 	bic.w	r3, r3, #1
 8008854:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3308      	adds	r3, #8
 800885e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008862:	633a      	str	r2, [r7, #48]	; 0x30
 8008864:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e3      	bne.n	800883e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	60fb      	str	r3, [r7, #12]
   return(result);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0310 	bic.w	r3, r3, #16
 800889e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80088ac:	61fb      	str	r3, [r7, #28]
 80088ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	69b9      	ldr	r1, [r7, #24]
 80088b2:	69fa      	ldr	r2, [r7, #28]
 80088b4:	e841 2300 	strex	r3, r2, [r1]
 80088b8:	617b      	str	r3, [r7, #20]
   return(result);
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1e4      	bne.n	800888a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f85b 	bl	8008988 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088d2:	e03f      	b.n	8008954 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00e      	beq.n	80088fe <HAL_UART_IRQHandler+0x56a>
 80088e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d008      	beq.n	80088fe <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80088f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fed8 	bl	80096ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088fc:	e02d      	b.n	800895a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80088fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00e      	beq.n	8008928 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800890a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800890e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008912:	2b00      	cmp	r3, #0
 8008914:	d008      	beq.n	8008928 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d01c      	beq.n	8008958 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	4798      	blx	r3
    }
    return;
 8008926:	e017      	b.n	8008958 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800892c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008930:	2b00      	cmp	r3, #0
 8008932:	d012      	beq.n	800895a <HAL_UART_IRQHandler+0x5c6>
 8008934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00c      	beq.n	800895a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fce1 	bl	8009308 <UART_EndTransmit_IT>
    return;
 8008946:	e008      	b.n	800895a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008948:	bf00      	nop
 800894a:	e006      	b.n	800895a <HAL_UART_IRQHandler+0x5c6>
    return;
 800894c:	bf00      	nop
 800894e:	e004      	b.n	800895a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008950:	bf00      	nop
 8008952:	e002      	b.n	800895a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008954:	bf00      	nop
 8008956:	e000      	b.n	800895a <HAL_UART_IRQHandler+0x5c6>
    return;
 8008958:	bf00      	nop
  }

}
 800895a:	37e8      	adds	r7, #232	; 0xe8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	431a      	orrs	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	431a      	orrs	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80089ce:	f023 030c 	bic.w	r3, r3, #12
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	6812      	ldr	r2, [r2, #0]
 80089d6:	6979      	ldr	r1, [r7, #20]
 80089d8:	430b      	orrs	r3, r1
 80089da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68da      	ldr	r2, [r3, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4aa7      	ldr	r2, [pc, #668]	; (8008cb8 <UART_SetConfig+0x318>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d120      	bne.n	8008a62 <UART_SetConfig+0xc2>
 8008a20:	4ba6      	ldr	r3, [pc, #664]	; (8008cbc <UART_SetConfig+0x31c>)
 8008a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a24:	f003 0303 	and.w	r3, r3, #3
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d817      	bhi.n	8008a5c <UART_SetConfig+0xbc>
 8008a2c:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <UART_SetConfig+0x94>)
 8008a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a32:	bf00      	nop
 8008a34:	08008a45 	.word	0x08008a45
 8008a38:	08008a51 	.word	0x08008a51
 8008a3c:	08008a57 	.word	0x08008a57
 8008a40:	08008a4b 	.word	0x08008a4b
 8008a44:	2301      	movs	r3, #1
 8008a46:	77fb      	strb	r3, [r7, #31]
 8008a48:	e0b5      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	77fb      	strb	r3, [r7, #31]
 8008a4e:	e0b2      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008a50:	2304      	movs	r3, #4
 8008a52:	77fb      	strb	r3, [r7, #31]
 8008a54:	e0af      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008a56:	2308      	movs	r3, #8
 8008a58:	77fb      	strb	r3, [r7, #31]
 8008a5a:	e0ac      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008a5c:	2310      	movs	r3, #16
 8008a5e:	77fb      	strb	r3, [r7, #31]
 8008a60:	e0a9      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a96      	ldr	r2, [pc, #600]	; (8008cc0 <UART_SetConfig+0x320>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d124      	bne.n	8008ab6 <UART_SetConfig+0x116>
 8008a6c:	4b93      	ldr	r3, [pc, #588]	; (8008cbc <UART_SetConfig+0x31c>)
 8008a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a78:	d011      	beq.n	8008a9e <UART_SetConfig+0xfe>
 8008a7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a7e:	d817      	bhi.n	8008ab0 <UART_SetConfig+0x110>
 8008a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a84:	d011      	beq.n	8008aaa <UART_SetConfig+0x10a>
 8008a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a8a:	d811      	bhi.n	8008ab0 <UART_SetConfig+0x110>
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <UART_SetConfig+0xf8>
 8008a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a94:	d006      	beq.n	8008aa4 <UART_SetConfig+0x104>
 8008a96:	e00b      	b.n	8008ab0 <UART_SetConfig+0x110>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	77fb      	strb	r3, [r7, #31]
 8008a9c:	e08b      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	77fb      	strb	r3, [r7, #31]
 8008aa2:	e088      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008aa4:	2304      	movs	r3, #4
 8008aa6:	77fb      	strb	r3, [r7, #31]
 8008aa8:	e085      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008aaa:	2308      	movs	r3, #8
 8008aac:	77fb      	strb	r3, [r7, #31]
 8008aae:	e082      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008ab0:	2310      	movs	r3, #16
 8008ab2:	77fb      	strb	r3, [r7, #31]
 8008ab4:	e07f      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a82      	ldr	r2, [pc, #520]	; (8008cc4 <UART_SetConfig+0x324>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d124      	bne.n	8008b0a <UART_SetConfig+0x16a>
 8008ac0:	4b7e      	ldr	r3, [pc, #504]	; (8008cbc <UART_SetConfig+0x31c>)
 8008ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008ac8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008acc:	d011      	beq.n	8008af2 <UART_SetConfig+0x152>
 8008ace:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008ad2:	d817      	bhi.n	8008b04 <UART_SetConfig+0x164>
 8008ad4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ad8:	d011      	beq.n	8008afe <UART_SetConfig+0x15e>
 8008ada:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ade:	d811      	bhi.n	8008b04 <UART_SetConfig+0x164>
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d003      	beq.n	8008aec <UART_SetConfig+0x14c>
 8008ae4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ae8:	d006      	beq.n	8008af8 <UART_SetConfig+0x158>
 8008aea:	e00b      	b.n	8008b04 <UART_SetConfig+0x164>
 8008aec:	2300      	movs	r3, #0
 8008aee:	77fb      	strb	r3, [r7, #31]
 8008af0:	e061      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008af2:	2302      	movs	r3, #2
 8008af4:	77fb      	strb	r3, [r7, #31]
 8008af6:	e05e      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008af8:	2304      	movs	r3, #4
 8008afa:	77fb      	strb	r3, [r7, #31]
 8008afc:	e05b      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008afe:	2308      	movs	r3, #8
 8008b00:	77fb      	strb	r3, [r7, #31]
 8008b02:	e058      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008b04:	2310      	movs	r3, #16
 8008b06:	77fb      	strb	r3, [r7, #31]
 8008b08:	e055      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a6e      	ldr	r2, [pc, #440]	; (8008cc8 <UART_SetConfig+0x328>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d124      	bne.n	8008b5e <UART_SetConfig+0x1be>
 8008b14:	4b69      	ldr	r3, [pc, #420]	; (8008cbc <UART_SetConfig+0x31c>)
 8008b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b18:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008b1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b20:	d011      	beq.n	8008b46 <UART_SetConfig+0x1a6>
 8008b22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b26:	d817      	bhi.n	8008b58 <UART_SetConfig+0x1b8>
 8008b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b2c:	d011      	beq.n	8008b52 <UART_SetConfig+0x1b2>
 8008b2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b32:	d811      	bhi.n	8008b58 <UART_SetConfig+0x1b8>
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <UART_SetConfig+0x1a0>
 8008b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b3c:	d006      	beq.n	8008b4c <UART_SetConfig+0x1ac>
 8008b3e:	e00b      	b.n	8008b58 <UART_SetConfig+0x1b8>
 8008b40:	2300      	movs	r3, #0
 8008b42:	77fb      	strb	r3, [r7, #31]
 8008b44:	e037      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008b46:	2302      	movs	r3, #2
 8008b48:	77fb      	strb	r3, [r7, #31]
 8008b4a:	e034      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008b4c:	2304      	movs	r3, #4
 8008b4e:	77fb      	strb	r3, [r7, #31]
 8008b50:	e031      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008b52:	2308      	movs	r3, #8
 8008b54:	77fb      	strb	r3, [r7, #31]
 8008b56:	e02e      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008b58:	2310      	movs	r3, #16
 8008b5a:	77fb      	strb	r3, [r7, #31]
 8008b5c:	e02b      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a5a      	ldr	r2, [pc, #360]	; (8008ccc <UART_SetConfig+0x32c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d124      	bne.n	8008bb2 <UART_SetConfig+0x212>
 8008b68:	4b54      	ldr	r3, [pc, #336]	; (8008cbc <UART_SetConfig+0x31c>)
 8008b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008b70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008b74:	d011      	beq.n	8008b9a <UART_SetConfig+0x1fa>
 8008b76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008b7a:	d817      	bhi.n	8008bac <UART_SetConfig+0x20c>
 8008b7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b80:	d011      	beq.n	8008ba6 <UART_SetConfig+0x206>
 8008b82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b86:	d811      	bhi.n	8008bac <UART_SetConfig+0x20c>
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <UART_SetConfig+0x1f4>
 8008b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b90:	d006      	beq.n	8008ba0 <UART_SetConfig+0x200>
 8008b92:	e00b      	b.n	8008bac <UART_SetConfig+0x20c>
 8008b94:	2300      	movs	r3, #0
 8008b96:	77fb      	strb	r3, [r7, #31]
 8008b98:	e00d      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	77fb      	strb	r3, [r7, #31]
 8008b9e:	e00a      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	77fb      	strb	r3, [r7, #31]
 8008ba4:	e007      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008ba6:	2308      	movs	r3, #8
 8008ba8:	77fb      	strb	r3, [r7, #31]
 8008baa:	e004      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008bac:	2310      	movs	r3, #16
 8008bae:	77fb      	strb	r3, [r7, #31]
 8008bb0:	e001      	b.n	8008bb6 <UART_SetConfig+0x216>
 8008bb2:	2310      	movs	r3, #16
 8008bb4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bbe:	d15b      	bne.n	8008c78 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8008bc0:	7ffb      	ldrb	r3, [r7, #31]
 8008bc2:	2b08      	cmp	r3, #8
 8008bc4:	d827      	bhi.n	8008c16 <UART_SetConfig+0x276>
 8008bc6:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <UART_SetConfig+0x22c>)
 8008bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bcc:	08008bf1 	.word	0x08008bf1
 8008bd0:	08008bf9 	.word	0x08008bf9
 8008bd4:	08008c01 	.word	0x08008c01
 8008bd8:	08008c17 	.word	0x08008c17
 8008bdc:	08008c07 	.word	0x08008c07
 8008be0:	08008c17 	.word	0x08008c17
 8008be4:	08008c17 	.word	0x08008c17
 8008be8:	08008c17 	.word	0x08008c17
 8008bec:	08008c0f 	.word	0x08008c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bf0:	f7fd fafc 	bl	80061ec <HAL_RCC_GetPCLK1Freq>
 8008bf4:	61b8      	str	r0, [r7, #24]
        break;
 8008bf6:	e013      	b.n	8008c20 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bf8:	f7fd fb1a 	bl	8006230 <HAL_RCC_GetPCLK2Freq>
 8008bfc:	61b8      	str	r0, [r7, #24]
        break;
 8008bfe:	e00f      	b.n	8008c20 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c00:	4b33      	ldr	r3, [pc, #204]	; (8008cd0 <UART_SetConfig+0x330>)
 8008c02:	61bb      	str	r3, [r7, #24]
        break;
 8008c04:	e00c      	b.n	8008c20 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c06:	f7fd fa7b 	bl	8006100 <HAL_RCC_GetSysClockFreq>
 8008c0a:	61b8      	str	r0, [r7, #24]
        break;
 8008c0c:	e008      	b.n	8008c20 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c12:	61bb      	str	r3, [r7, #24]
        break;
 8008c14:	e004      	b.n	8008c20 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	77bb      	strb	r3, [r7, #30]
        break;
 8008c1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 8082 	beq.w	8008d2c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	005a      	lsls	r2, r3, #1
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	085b      	lsrs	r3, r3, #1
 8008c32:	441a      	add	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	2b0f      	cmp	r3, #15
 8008c42:	d916      	bls.n	8008c72 <UART_SetConfig+0x2d2>
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c4a:	d212      	bcs.n	8008c72 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f023 030f 	bic.w	r3, r3, #15
 8008c54:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	085b      	lsrs	r3, r3, #1
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	f003 0307 	and.w	r3, r3, #7
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	89fb      	ldrh	r3, [r7, #14]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	89fa      	ldrh	r2, [r7, #14]
 8008c6e:	60da      	str	r2, [r3, #12]
 8008c70:	e05c      	b.n	8008d2c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	77bb      	strb	r3, [r7, #30]
 8008c76:	e059      	b.n	8008d2c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c78:	7ffb      	ldrb	r3, [r7, #31]
 8008c7a:	2b08      	cmp	r3, #8
 8008c7c:	d835      	bhi.n	8008cea <UART_SetConfig+0x34a>
 8008c7e:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <UART_SetConfig+0x2e4>)
 8008c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c84:	08008ca9 	.word	0x08008ca9
 8008c88:	08008cb1 	.word	0x08008cb1
 8008c8c:	08008cd5 	.word	0x08008cd5
 8008c90:	08008ceb 	.word	0x08008ceb
 8008c94:	08008cdb 	.word	0x08008cdb
 8008c98:	08008ceb 	.word	0x08008ceb
 8008c9c:	08008ceb 	.word	0x08008ceb
 8008ca0:	08008ceb 	.word	0x08008ceb
 8008ca4:	08008ce3 	.word	0x08008ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ca8:	f7fd faa0 	bl	80061ec <HAL_RCC_GetPCLK1Freq>
 8008cac:	61b8      	str	r0, [r7, #24]
        break;
 8008cae:	e021      	b.n	8008cf4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cb0:	f7fd fabe 	bl	8006230 <HAL_RCC_GetPCLK2Freq>
 8008cb4:	61b8      	str	r0, [r7, #24]
        break;
 8008cb6:	e01d      	b.n	8008cf4 <UART_SetConfig+0x354>
 8008cb8:	40013800 	.word	0x40013800
 8008cbc:	40021000 	.word	0x40021000
 8008cc0:	40004400 	.word	0x40004400
 8008cc4:	40004800 	.word	0x40004800
 8008cc8:	40004c00 	.word	0x40004c00
 8008ccc:	40005000 	.word	0x40005000
 8008cd0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cd4:	4b1b      	ldr	r3, [pc, #108]	; (8008d44 <UART_SetConfig+0x3a4>)
 8008cd6:	61bb      	str	r3, [r7, #24]
        break;
 8008cd8:	e00c      	b.n	8008cf4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cda:	f7fd fa11 	bl	8006100 <HAL_RCC_GetSysClockFreq>
 8008cde:	61b8      	str	r0, [r7, #24]
        break;
 8008ce0:	e008      	b.n	8008cf4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ce6:	61bb      	str	r3, [r7, #24]
        break;
 8008ce8:	e004      	b.n	8008cf4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	77bb      	strb	r3, [r7, #30]
        break;
 8008cf2:	bf00      	nop
    }

    if (pclk != 0U)
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d018      	beq.n	8008d2c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	085a      	lsrs	r2, r3, #1
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	441a      	add	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b0f      	cmp	r3, #15
 8008d12:	d909      	bls.n	8008d28 <UART_SetConfig+0x388>
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d1a:	d205      	bcs.n	8008d28 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60da      	str	r2, [r3, #12]
 8008d26:	e001      	b.n	8008d2c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008d38:	7fbb      	ldrb	r3, [r7, #30]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3720      	adds	r7, #32
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	007a1200 	.word	0x007a1200

08008d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00a      	beq.n	8008d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00a      	beq.n	8008d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d98:	f003 0304 	and.w	r3, r3, #4
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00a      	beq.n	8008db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dba:	f003 0308 	and.w	r3, r3, #8
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00a      	beq.n	8008dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	f003 0310 	and.w	r3, r3, #16
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00a      	beq.n	8008dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfe:	f003 0320 	and.w	r3, r3, #32
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00a      	beq.n	8008e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01a      	beq.n	8008e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e46:	d10a      	bne.n	8008e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	430a      	orrs	r2, r1
 8008e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	605a      	str	r2, [r3, #4]
  }
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b098      	sub	sp, #96	; 0x60
 8008e90:	af02      	add	r7, sp, #8
 8008e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e9c:	f7fb f9ea 	bl	8004274 <HAL_GetTick>
 8008ea0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0308 	and.w	r3, r3, #8
 8008eac:	2b08      	cmp	r3, #8
 8008eae:	d12e      	bne.n	8008f0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f88c 	bl	8008fdc <UART_WaitOnFlagUntilTimeout>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d021      	beq.n	8008f0e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	e853 3f00 	ldrex	r3, [r3]
 8008ed6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ede:	653b      	str	r3, [r7, #80]	; 0x50
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8008eea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e6      	bne.n	8008eca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2220      	movs	r2, #32
 8008f00:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e062      	b.n	8008fd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	d149      	bne.n	8008fb0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f24:	2200      	movs	r2, #0
 8008f26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f856 	bl	8008fdc <UART_WaitOnFlagUntilTimeout>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d03c      	beq.n	8008fb0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	e853 3f00 	ldrex	r3, [r3]
 8008f42:	623b      	str	r3, [r7, #32]
   return(result);
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f54:	633b      	str	r3, [r7, #48]	; 0x30
 8008f56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f5c:	e841 2300 	strex	r3, r2, [r1]
 8008f60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1e6      	bne.n	8008f36 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f023 0301 	bic.w	r3, r3, #1
 8008f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3308      	adds	r3, #8
 8008f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f88:	61fa      	str	r2, [r7, #28]
 8008f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	69b9      	ldr	r1, [r7, #24]
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	617b      	str	r3, [r7, #20]
   return(result);
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e5      	bne.n	8008f68 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e011      	b.n	8008fd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2220      	movs	r2, #32
 8008fb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2220      	movs	r2, #32
 8008fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3758      	adds	r7, #88	; 0x58
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	603b      	str	r3, [r7, #0]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fec:	e049      	b.n	8009082 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff4:	d045      	beq.n	8009082 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ff6:	f7fb f93d 	bl	8004274 <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	429a      	cmp	r2, r3
 8009004:	d302      	bcc.n	800900c <UART_WaitOnFlagUntilTimeout+0x30>
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e048      	b.n	80090a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0304 	and.w	r3, r3, #4
 800901a:	2b00      	cmp	r3, #0
 800901c:	d031      	beq.n	8009082 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	69db      	ldr	r3, [r3, #28]
 8009024:	f003 0308 	and.w	r3, r3, #8
 8009028:	2b08      	cmp	r3, #8
 800902a:	d110      	bne.n	800904e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2208      	movs	r2, #8
 8009032:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 f8ed 	bl	8009214 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2208      	movs	r2, #8
 800903e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e029      	b.n	80090a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800905c:	d111      	bne.n	8009082 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 f8d3 	bl	8009214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2220      	movs	r2, #32
 8009072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e00f      	b.n	80090a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	69da      	ldr	r2, [r3, #28]
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	4013      	ands	r3, r2
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	429a      	cmp	r2, r3
 8009090:	bf0c      	ite	eq
 8009092:	2301      	moveq	r3, #1
 8009094:	2300      	movne	r3, #0
 8009096:	b2db      	uxtb	r3, r3
 8009098:	461a      	mov	r2, r3
 800909a:	79fb      	ldrb	r3, [r7, #7]
 800909c:	429a      	cmp	r2, r3
 800909e:	d0a6      	beq.n	8008fee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b097      	sub	sp, #92	; 0x5c
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	4613      	mov	r3, r2
 80090b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	88fa      	ldrh	r2, [r7, #6]
 80090c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	88fa      	ldrh	r2, [r7, #6]
 80090cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090de:	d10e      	bne.n	80090fe <UART_Start_Receive_IT+0x52>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d105      	bne.n	80090f4 <UART_Start_Receive_IT+0x48>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80090ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80090f2:	e01a      	b.n	800912a <UART_Start_Receive_IT+0x7e>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	22ff      	movs	r2, #255	; 0xff
 80090f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80090fc:	e015      	b.n	800912a <UART_Start_Receive_IT+0x7e>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10d      	bne.n	8009122 <UART_Start_Receive_IT+0x76>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d104      	bne.n	8009118 <UART_Start_Receive_IT+0x6c>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	22ff      	movs	r2, #255	; 0xff
 8009112:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009116:	e008      	b.n	800912a <UART_Start_Receive_IT+0x7e>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	227f      	movs	r2, #127	; 0x7f
 800911c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009120:	e003      	b.n	800912a <UART_Start_Receive_IT+0x7e>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2222      	movs	r2, #34	; 0x22
 8009136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3308      	adds	r3, #8
 8009140:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800914a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914c:	f043 0301 	orr.w	r3, r3, #1
 8009150:	657b      	str	r3, [r7, #84]	; 0x54
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3308      	adds	r3, #8
 8009158:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800915a:	64ba      	str	r2, [r7, #72]	; 0x48
 800915c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009162:	e841 2300 	strex	r3, r2, [r1]
 8009166:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1e5      	bne.n	800913a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009176:	d107      	bne.n	8009188 <UART_Start_Receive_IT+0xdc>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d103      	bne.n	8009188 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4a22      	ldr	r2, [pc, #136]	; (800920c <UART_Start_Receive_IT+0x160>)
 8009184:	669a      	str	r2, [r3, #104]	; 0x68
 8009186:	e002      	b.n	800918e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4a21      	ldr	r2, [pc, #132]	; (8009210 <UART_Start_Receive_IT+0x164>)
 800918c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d019      	beq.n	80091ca <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80091aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	461a      	mov	r2, r3
 80091b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091b4:	637b      	str	r3, [r7, #52]	; 0x34
 80091b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e6      	bne.n	8009196 <UART_Start_Receive_IT+0xea>
 80091c8:	e018      	b.n	80091fc <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	613b      	str	r3, [r7, #16]
   return(result);
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	f043 0320 	orr.w	r3, r3, #32
 80091de:	653b      	str	r3, [r7, #80]	; 0x50
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	461a      	mov	r2, r3
 80091e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091e8:	623b      	str	r3, [r7, #32]
 80091ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	69f9      	ldr	r1, [r7, #28]
 80091ee:	6a3a      	ldr	r2, [r7, #32]
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e6      	bne.n	80091ca <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	375c      	adds	r7, #92	; 0x5c
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	08009505 	.word	0x08009505
 8009210:	0800935d 	.word	0x0800935d

08009214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009214:	b480      	push	{r7}
 8009216:	b095      	sub	sp, #84	; 0x54
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009224:	e853 3f00 	ldrex	r3, [r3]
 8009228:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800922a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009230:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800923a:	643b      	str	r3, [r7, #64]	; 0x40
 800923c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1e6      	bne.n	800921c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3308      	adds	r3, #8
 8009254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	e853 3f00 	ldrex	r3, [r3]
 800925c:	61fb      	str	r3, [r7, #28]
   return(result);
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	f023 0301 	bic.w	r3, r3, #1
 8009264:	64bb      	str	r3, [r7, #72]	; 0x48
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3308      	adds	r3, #8
 800926c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800926e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009270:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e5      	bne.n	800924e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009286:	2b01      	cmp	r3, #1
 8009288:	d118      	bne.n	80092bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	e853 3f00 	ldrex	r3, [r3]
 8009296:	60bb      	str	r3, [r7, #8]
   return(result);
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f023 0310 	bic.w	r3, r3, #16
 800929e:	647b      	str	r3, [r7, #68]	; 0x44
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	461a      	mov	r2, r3
 80092a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092a8:	61bb      	str	r3, [r7, #24]
 80092aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ac:	6979      	ldr	r1, [r7, #20]
 80092ae:	69ba      	ldr	r2, [r7, #24]
 80092b0:	e841 2300 	strex	r3, r2, [r1]
 80092b4:	613b      	str	r3, [r7, #16]
   return(result);
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e6      	bne.n	800928a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2220      	movs	r2, #32
 80092c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80092d0:	bf00      	nop
 80092d2:	3754      	adds	r7, #84	; 0x54
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff fb3a 	bl	8008974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009300:	bf00      	nop
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	60bb      	str	r3, [r7, #8]
   return(result);
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009324:	61fb      	str	r3, [r7, #28]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	61bb      	str	r3, [r7, #24]
 8009330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6979      	ldr	r1, [r7, #20]
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	613b      	str	r3, [r7, #16]
   return(result);
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e6      	bne.n	8009310 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2220      	movs	r2, #32
 8009346:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7ff fb06 	bl	8008960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009354:	bf00      	nop
 8009356:	3720      	adds	r7, #32
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b09c      	sub	sp, #112	; 0x70
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800936a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009374:	2b22      	cmp	r3, #34	; 0x22
 8009376:	f040 80b9 	bne.w	80094ec <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009380:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009384:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009388:	b2d9      	uxtb	r1, r3
 800938a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800938e:	b2da      	uxtb	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009394:	400a      	ands	r2, r1
 8009396:	b2d2      	uxtb	r2, r2
 8009398:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800939e:	1c5a      	adds	r2, r3, #1
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	3b01      	subs	r3, #1
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f040 809c 	bne.w	80094fc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093cc:	e853 3f00 	ldrex	r3, [r3]
 80093d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80093e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e6      	bne.n	80093c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3308      	adds	r3, #8
 80093fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009408:	f023 0301 	bic.w	r3, r3, #1
 800940c:	667b      	str	r3, [r7, #100]	; 0x64
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3308      	adds	r3, #8
 8009414:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009416:	647a      	str	r2, [r7, #68]	; 0x44
 8009418:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800941c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e5      	bne.n	80093f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2220      	movs	r2, #32
 800942e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d018      	beq.n	800947e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009454:	e853 3f00 	ldrex	r3, [r3]
 8009458:	623b      	str	r3, [r7, #32]
   return(result);
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009460:	663b      	str	r3, [r7, #96]	; 0x60
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800946a:	633b      	str	r3, [r7, #48]	; 0x30
 800946c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e6      	bne.n	800944c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009482:	2b01      	cmp	r3, #1
 8009484:	d12e      	bne.n	80094e4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	60fb      	str	r3, [r7, #12]
   return(result);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f023 0310 	bic.w	r3, r3, #16
 80094a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094aa:	61fb      	str	r3, [r7, #28]
 80094ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	69b9      	ldr	r1, [r7, #24]
 80094b0:	69fa      	ldr	r2, [r7, #28]
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	617b      	str	r3, [r7, #20]
   return(result);
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e6      	bne.n	800948c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	69db      	ldr	r3, [r3, #28]
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	2b10      	cmp	r3, #16
 80094ca:	d103      	bne.n	80094d4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2210      	movs	r2, #16
 80094d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7ff fa53 	bl	8008988 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094e2:	e00b      	b.n	80094fc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7f9 ffc3 	bl	8003470 <HAL_UART_RxCpltCallback>
}
 80094ea:	e007      	b.n	80094fc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	699a      	ldr	r2, [r3, #24]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f042 0208 	orr.w	r2, r2, #8
 80094fa:	619a      	str	r2, [r3, #24]
}
 80094fc:	bf00      	nop
 80094fe:	3770      	adds	r7, #112	; 0x70
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b09c      	sub	sp, #112	; 0x70
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009512:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800951c:	2b22      	cmp	r3, #34	; 0x22
 800951e:	f040 80b9 	bne.w	8009694 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009528:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009530:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009532:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009536:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800953a:	4013      	ands	r3, r2
 800953c:	b29a      	uxth	r2, r3
 800953e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009540:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009546:	1c9a      	adds	r2, r3, #2
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009552:	b29b      	uxth	r3, r3
 8009554:	3b01      	subs	r3, #1
 8009556:	b29a      	uxth	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009564:	b29b      	uxth	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	f040 809c 	bne.w	80096a4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009574:	e853 3f00 	ldrex	r3, [r3]
 8009578:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800957a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800957c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009580:	667b      	str	r3, [r7, #100]	; 0x64
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800958a:	657b      	str	r3, [r7, #84]	; 0x54
 800958c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009590:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009592:	e841 2300 	strex	r3, r2, [r1]
 8009596:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1e6      	bne.n	800956c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3308      	adds	r3, #8
 80095a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	f023 0301 	bic.w	r3, r3, #1
 80095b4:	663b      	str	r3, [r7, #96]	; 0x60
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3308      	adds	r3, #8
 80095bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095be:	643a      	str	r2, [r7, #64]	; 0x40
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e5      	bne.n	800959e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d018      	beq.n	8009626 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	61fb      	str	r3, [r7, #28]
   return(result);
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009614:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e6      	bne.n	80095f4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800962a:	2b01      	cmp	r3, #1
 800962c:	d12e      	bne.n	800968c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	e853 3f00 	ldrex	r3, [r3]
 8009640:	60bb      	str	r3, [r7, #8]
   return(result);
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	f023 0310 	bic.w	r3, r3, #16
 8009648:	65bb      	str	r3, [r7, #88]	; 0x58
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009652:	61bb      	str	r3, [r7, #24]
 8009654:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009656:	6979      	ldr	r1, [r7, #20]
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	e841 2300 	strex	r3, r2, [r1]
 800965e:	613b      	str	r3, [r7, #16]
   return(result);
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1e6      	bne.n	8009634 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	69db      	ldr	r3, [r3, #28]
 800966c:	f003 0310 	and.w	r3, r3, #16
 8009670:	2b10      	cmp	r3, #16
 8009672:	d103      	bne.n	800967c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2210      	movs	r2, #16
 800967a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff f97f 	bl	8008988 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800968a:	e00b      	b.n	80096a4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7f9 feef 	bl	8003470 <HAL_UART_RxCpltCallback>
}
 8009692:	e007      	b.n	80096a4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	699a      	ldr	r2, [r3, #24]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f042 0208 	orr.w	r2, r2, #8
 80096a2:	619a      	str	r2, [r3, #24]
}
 80096a4:	bf00      	nop
 80096a6:	3770      	adds	r7, #112	; 0x70
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80096c8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80096cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	43db      	mvns	r3, r3
 80096dc:	b29b      	uxth	r3, r3
 80096de:	4013      	ands	r3, r2
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80096f6:	b084      	sub	sp, #16
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	f107 0014 	add.w	r0, r7, #20
 8009704:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	b004      	add	sp, #16
 8009736:	4770      	bx	lr

08009738 <__errno>:
 8009738:	4b01      	ldr	r3, [pc, #4]	; (8009740 <__errno+0x8>)
 800973a:	6818      	ldr	r0, [r3, #0]
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	20000118 	.word	0x20000118

08009744 <__libc_init_array>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	4d0d      	ldr	r5, [pc, #52]	; (800977c <__libc_init_array+0x38>)
 8009748:	4c0d      	ldr	r4, [pc, #52]	; (8009780 <__libc_init_array+0x3c>)
 800974a:	1b64      	subs	r4, r4, r5
 800974c:	10a4      	asrs	r4, r4, #2
 800974e:	2600      	movs	r6, #0
 8009750:	42a6      	cmp	r6, r4
 8009752:	d109      	bne.n	8009768 <__libc_init_array+0x24>
 8009754:	4d0b      	ldr	r5, [pc, #44]	; (8009784 <__libc_init_array+0x40>)
 8009756:	4c0c      	ldr	r4, [pc, #48]	; (8009788 <__libc_init_array+0x44>)
 8009758:	f001 ff04 	bl	800b564 <_init>
 800975c:	1b64      	subs	r4, r4, r5
 800975e:	10a4      	asrs	r4, r4, #2
 8009760:	2600      	movs	r6, #0
 8009762:	42a6      	cmp	r6, r4
 8009764:	d105      	bne.n	8009772 <__libc_init_array+0x2e>
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	f855 3b04 	ldr.w	r3, [r5], #4
 800976c:	4798      	blx	r3
 800976e:	3601      	adds	r6, #1
 8009770:	e7ee      	b.n	8009750 <__libc_init_array+0xc>
 8009772:	f855 3b04 	ldr.w	r3, [r5], #4
 8009776:	4798      	blx	r3
 8009778:	3601      	adds	r6, #1
 800977a:	e7f2      	b.n	8009762 <__libc_init_array+0x1e>
 800977c:	0800baf0 	.word	0x0800baf0
 8009780:	0800baf0 	.word	0x0800baf0
 8009784:	0800baf0 	.word	0x0800baf0
 8009788:	0800baf4 	.word	0x0800baf4

0800978c <memset>:
 800978c:	4402      	add	r2, r0
 800978e:	4603      	mov	r3, r0
 8009790:	4293      	cmp	r3, r2
 8009792:	d100      	bne.n	8009796 <memset+0xa>
 8009794:	4770      	bx	lr
 8009796:	f803 1b01 	strb.w	r1, [r3], #1
 800979a:	e7f9      	b.n	8009790 <memset+0x4>

0800979c <rand>:
 800979c:	4b16      	ldr	r3, [pc, #88]	; (80097f8 <rand+0x5c>)
 800979e:	b510      	push	{r4, lr}
 80097a0:	681c      	ldr	r4, [r3, #0]
 80097a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80097a4:	b9b3      	cbnz	r3, 80097d4 <rand+0x38>
 80097a6:	2018      	movs	r0, #24
 80097a8:	f000 f940 	bl	8009a2c <malloc>
 80097ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80097ae:	b928      	cbnz	r0, 80097bc <rand+0x20>
 80097b0:	4602      	mov	r2, r0
 80097b2:	4b12      	ldr	r3, [pc, #72]	; (80097fc <rand+0x60>)
 80097b4:	4812      	ldr	r0, [pc, #72]	; (8009800 <rand+0x64>)
 80097b6:	214e      	movs	r1, #78	; 0x4e
 80097b8:	f000 f8e6 	bl	8009988 <__assert_func>
 80097bc:	4a11      	ldr	r2, [pc, #68]	; (8009804 <rand+0x68>)
 80097be:	4b12      	ldr	r3, [pc, #72]	; (8009808 <rand+0x6c>)
 80097c0:	e9c0 2300 	strd	r2, r3, [r0]
 80097c4:	4b11      	ldr	r3, [pc, #68]	; (800980c <rand+0x70>)
 80097c6:	6083      	str	r3, [r0, #8]
 80097c8:	230b      	movs	r3, #11
 80097ca:	8183      	strh	r3, [r0, #12]
 80097cc:	2201      	movs	r2, #1
 80097ce:	2300      	movs	r3, #0
 80097d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80097d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80097d6:	4a0e      	ldr	r2, [pc, #56]	; (8009810 <rand+0x74>)
 80097d8:	6920      	ldr	r0, [r4, #16]
 80097da:	6963      	ldr	r3, [r4, #20]
 80097dc:	490d      	ldr	r1, [pc, #52]	; (8009814 <rand+0x78>)
 80097de:	4342      	muls	r2, r0
 80097e0:	fb01 2203 	mla	r2, r1, r3, r2
 80097e4:	fba0 0101 	umull	r0, r1, r0, r1
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	eb42 0001 	adc.w	r0, r2, r1
 80097ee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80097f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80097f6:	bd10      	pop	{r4, pc}
 80097f8:	20000118 	.word	0x20000118
 80097fc:	0800b890 	.word	0x0800b890
 8009800:	0800b8a7 	.word	0x0800b8a7
 8009804:	abcd330e 	.word	0xabcd330e
 8009808:	e66d1234 	.word	0xe66d1234
 800980c:	0005deec 	.word	0x0005deec
 8009810:	5851f42d 	.word	0x5851f42d
 8009814:	4c957f2d 	.word	0x4c957f2d

08009818 <siprintf>:
 8009818:	b40e      	push	{r1, r2, r3}
 800981a:	b500      	push	{lr}
 800981c:	b09c      	sub	sp, #112	; 0x70
 800981e:	ab1d      	add	r3, sp, #116	; 0x74
 8009820:	9002      	str	r0, [sp, #8]
 8009822:	9006      	str	r0, [sp, #24]
 8009824:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009828:	4809      	ldr	r0, [pc, #36]	; (8009850 <siprintf+0x38>)
 800982a:	9107      	str	r1, [sp, #28]
 800982c:	9104      	str	r1, [sp, #16]
 800982e:	4909      	ldr	r1, [pc, #36]	; (8009854 <siprintf+0x3c>)
 8009830:	f853 2b04 	ldr.w	r2, [r3], #4
 8009834:	9105      	str	r1, [sp, #20]
 8009836:	6800      	ldr	r0, [r0, #0]
 8009838:	9301      	str	r3, [sp, #4]
 800983a:	a902      	add	r1, sp, #8
 800983c:	f000 fa3a 	bl	8009cb4 <_svfiprintf_r>
 8009840:	9b02      	ldr	r3, [sp, #8]
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
 8009846:	b01c      	add	sp, #112	; 0x70
 8009848:	f85d eb04 	ldr.w	lr, [sp], #4
 800984c:	b003      	add	sp, #12
 800984e:	4770      	bx	lr
 8009850:	20000118 	.word	0x20000118
 8009854:	ffff0208 	.word	0xffff0208

08009858 <siscanf>:
 8009858:	b40e      	push	{r1, r2, r3}
 800985a:	b510      	push	{r4, lr}
 800985c:	b09f      	sub	sp, #124	; 0x7c
 800985e:	ac21      	add	r4, sp, #132	; 0x84
 8009860:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009864:	f854 2b04 	ldr.w	r2, [r4], #4
 8009868:	9201      	str	r2, [sp, #4]
 800986a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800986e:	9004      	str	r0, [sp, #16]
 8009870:	9008      	str	r0, [sp, #32]
 8009872:	f7f6 fcad 	bl	80001d0 <strlen>
 8009876:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <siscanf+0x50>)
 8009878:	9005      	str	r0, [sp, #20]
 800987a:	9009      	str	r0, [sp, #36]	; 0x24
 800987c:	930d      	str	r3, [sp, #52]	; 0x34
 800987e:	480b      	ldr	r0, [pc, #44]	; (80098ac <siscanf+0x54>)
 8009880:	9a01      	ldr	r2, [sp, #4]
 8009882:	6800      	ldr	r0, [r0, #0]
 8009884:	9403      	str	r4, [sp, #12]
 8009886:	2300      	movs	r3, #0
 8009888:	9311      	str	r3, [sp, #68]	; 0x44
 800988a:	9316      	str	r3, [sp, #88]	; 0x58
 800988c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009890:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009894:	a904      	add	r1, sp, #16
 8009896:	4623      	mov	r3, r4
 8009898:	f000 fb66 	bl	8009f68 <__ssvfiscanf_r>
 800989c:	b01f      	add	sp, #124	; 0x7c
 800989e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098a2:	b003      	add	sp, #12
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	080098d3 	.word	0x080098d3
 80098ac:	20000118 	.word	0x20000118

080098b0 <__sread>:
 80098b0:	b510      	push	{r4, lr}
 80098b2:	460c      	mov	r4, r1
 80098b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b8:	f001 f90e 	bl	800aad8 <_read_r>
 80098bc:	2800      	cmp	r0, #0
 80098be:	bfab      	itete	ge
 80098c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098c2:	89a3      	ldrhlt	r3, [r4, #12]
 80098c4:	181b      	addge	r3, r3, r0
 80098c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098ca:	bfac      	ite	ge
 80098cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80098ce:	81a3      	strhlt	r3, [r4, #12]
 80098d0:	bd10      	pop	{r4, pc}

080098d2 <__seofread>:
 80098d2:	2000      	movs	r0, #0
 80098d4:	4770      	bx	lr

080098d6 <__swrite>:
 80098d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098da:	461f      	mov	r7, r3
 80098dc:	898b      	ldrh	r3, [r1, #12]
 80098de:	05db      	lsls	r3, r3, #23
 80098e0:	4605      	mov	r5, r0
 80098e2:	460c      	mov	r4, r1
 80098e4:	4616      	mov	r6, r2
 80098e6:	d505      	bpl.n	80098f4 <__swrite+0x1e>
 80098e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ec:	2302      	movs	r3, #2
 80098ee:	2200      	movs	r2, #0
 80098f0:	f000 f88a 	bl	8009a08 <_lseek_r>
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098fe:	81a3      	strh	r3, [r4, #12]
 8009900:	4632      	mov	r2, r6
 8009902:	463b      	mov	r3, r7
 8009904:	4628      	mov	r0, r5
 8009906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800990a:	f000 b82b 	b.w	8009964 <_write_r>

0800990e <__sseek>:
 800990e:	b510      	push	{r4, lr}
 8009910:	460c      	mov	r4, r1
 8009912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009916:	f000 f877 	bl	8009a08 <_lseek_r>
 800991a:	1c43      	adds	r3, r0, #1
 800991c:	89a3      	ldrh	r3, [r4, #12]
 800991e:	bf15      	itete	ne
 8009920:	6560      	strne	r0, [r4, #84]	; 0x54
 8009922:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009926:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800992a:	81a3      	strheq	r3, [r4, #12]
 800992c:	bf18      	it	ne
 800992e:	81a3      	strhne	r3, [r4, #12]
 8009930:	bd10      	pop	{r4, pc}

08009932 <__sclose>:
 8009932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009936:	f000 b845 	b.w	80099c4 <_close_r>

0800993a <strncmp>:
 800993a:	b510      	push	{r4, lr}
 800993c:	b17a      	cbz	r2, 800995e <strncmp+0x24>
 800993e:	4603      	mov	r3, r0
 8009940:	3901      	subs	r1, #1
 8009942:	1884      	adds	r4, r0, r2
 8009944:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009948:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800994c:	4290      	cmp	r0, r2
 800994e:	d101      	bne.n	8009954 <strncmp+0x1a>
 8009950:	42a3      	cmp	r3, r4
 8009952:	d101      	bne.n	8009958 <strncmp+0x1e>
 8009954:	1a80      	subs	r0, r0, r2
 8009956:	bd10      	pop	{r4, pc}
 8009958:	2800      	cmp	r0, #0
 800995a:	d1f3      	bne.n	8009944 <strncmp+0xa>
 800995c:	e7fa      	b.n	8009954 <strncmp+0x1a>
 800995e:	4610      	mov	r0, r2
 8009960:	e7f9      	b.n	8009956 <strncmp+0x1c>
	...

08009964 <_write_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4d07      	ldr	r5, [pc, #28]	; (8009984 <_write_r+0x20>)
 8009968:	4604      	mov	r4, r0
 800996a:	4608      	mov	r0, r1
 800996c:	4611      	mov	r1, r2
 800996e:	2200      	movs	r2, #0
 8009970:	602a      	str	r2, [r5, #0]
 8009972:	461a      	mov	r2, r3
 8009974:	f7fa fb61 	bl	800403a <_write>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d102      	bne.n	8009982 <_write_r+0x1e>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	b103      	cbz	r3, 8009982 <_write_r+0x1e>
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	200008a0 	.word	0x200008a0

08009988 <__assert_func>:
 8009988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800998a:	4614      	mov	r4, r2
 800998c:	461a      	mov	r2, r3
 800998e:	4b09      	ldr	r3, [pc, #36]	; (80099b4 <__assert_func+0x2c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4605      	mov	r5, r0
 8009994:	68d8      	ldr	r0, [r3, #12]
 8009996:	b14c      	cbz	r4, 80099ac <__assert_func+0x24>
 8009998:	4b07      	ldr	r3, [pc, #28]	; (80099b8 <__assert_func+0x30>)
 800999a:	9100      	str	r1, [sp, #0]
 800999c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099a0:	4906      	ldr	r1, [pc, #24]	; (80099bc <__assert_func+0x34>)
 80099a2:	462b      	mov	r3, r5
 80099a4:	f000 f81e 	bl	80099e4 <fiprintf>
 80099a8:	f001 fae2 	bl	800af70 <abort>
 80099ac:	4b04      	ldr	r3, [pc, #16]	; (80099c0 <__assert_func+0x38>)
 80099ae:	461c      	mov	r4, r3
 80099b0:	e7f3      	b.n	800999a <__assert_func+0x12>
 80099b2:	bf00      	nop
 80099b4:	20000118 	.word	0x20000118
 80099b8:	0800b902 	.word	0x0800b902
 80099bc:	0800b90f 	.word	0x0800b90f
 80099c0:	0800b93d 	.word	0x0800b93d

080099c4 <_close_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4d06      	ldr	r5, [pc, #24]	; (80099e0 <_close_r+0x1c>)
 80099c8:	2300      	movs	r3, #0
 80099ca:	4604      	mov	r4, r0
 80099cc:	4608      	mov	r0, r1
 80099ce:	602b      	str	r3, [r5, #0]
 80099d0:	f7fa fb4f 	bl	8004072 <_close>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d102      	bne.n	80099de <_close_r+0x1a>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b103      	cbz	r3, 80099de <_close_r+0x1a>
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	200008a0 	.word	0x200008a0

080099e4 <fiprintf>:
 80099e4:	b40e      	push	{r1, r2, r3}
 80099e6:	b503      	push	{r0, r1, lr}
 80099e8:	4601      	mov	r1, r0
 80099ea:	ab03      	add	r3, sp, #12
 80099ec:	4805      	ldr	r0, [pc, #20]	; (8009a04 <fiprintf+0x20>)
 80099ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80099f2:	6800      	ldr	r0, [r0, #0]
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	f000 fc59 	bl	800a2ac <_vfiprintf_r>
 80099fa:	b002      	add	sp, #8
 80099fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a00:	b003      	add	sp, #12
 8009a02:	4770      	bx	lr
 8009a04:	20000118 	.word	0x20000118

08009a08 <_lseek_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4d07      	ldr	r5, [pc, #28]	; (8009a28 <_lseek_r+0x20>)
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	4608      	mov	r0, r1
 8009a10:	4611      	mov	r1, r2
 8009a12:	2200      	movs	r2, #0
 8009a14:	602a      	str	r2, [r5, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	f7fa fb52 	bl	80040c0 <_lseek>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_lseek_r+0x1e>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_lseek_r+0x1e>
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	200008a0 	.word	0x200008a0

08009a2c <malloc>:
 8009a2c:	4b02      	ldr	r3, [pc, #8]	; (8009a38 <malloc+0xc>)
 8009a2e:	4601      	mov	r1, r0
 8009a30:	6818      	ldr	r0, [r3, #0]
 8009a32:	f000 b86f 	b.w	8009b14 <_malloc_r>
 8009a36:	bf00      	nop
 8009a38:	20000118 	.word	0x20000118

08009a3c <_free_r>:
 8009a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a3e:	2900      	cmp	r1, #0
 8009a40:	d044      	beq.n	8009acc <_free_r+0x90>
 8009a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a46:	9001      	str	r0, [sp, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8009a4e:	bfb8      	it	lt
 8009a50:	18e4      	addlt	r4, r4, r3
 8009a52:	f001 fcdd 	bl	800b410 <__malloc_lock>
 8009a56:	4a1e      	ldr	r2, [pc, #120]	; (8009ad0 <_free_r+0x94>)
 8009a58:	9801      	ldr	r0, [sp, #4]
 8009a5a:	6813      	ldr	r3, [r2, #0]
 8009a5c:	b933      	cbnz	r3, 8009a6c <_free_r+0x30>
 8009a5e:	6063      	str	r3, [r4, #4]
 8009a60:	6014      	str	r4, [r2, #0]
 8009a62:	b003      	add	sp, #12
 8009a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a68:	f001 bcd8 	b.w	800b41c <__malloc_unlock>
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	d908      	bls.n	8009a82 <_free_r+0x46>
 8009a70:	6825      	ldr	r5, [r4, #0]
 8009a72:	1961      	adds	r1, r4, r5
 8009a74:	428b      	cmp	r3, r1
 8009a76:	bf01      	itttt	eq
 8009a78:	6819      	ldreq	r1, [r3, #0]
 8009a7a:	685b      	ldreq	r3, [r3, #4]
 8009a7c:	1949      	addeq	r1, r1, r5
 8009a7e:	6021      	streq	r1, [r4, #0]
 8009a80:	e7ed      	b.n	8009a5e <_free_r+0x22>
 8009a82:	461a      	mov	r2, r3
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	b10b      	cbz	r3, 8009a8c <_free_r+0x50>
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	d9fa      	bls.n	8009a82 <_free_r+0x46>
 8009a8c:	6811      	ldr	r1, [r2, #0]
 8009a8e:	1855      	adds	r5, r2, r1
 8009a90:	42a5      	cmp	r5, r4
 8009a92:	d10b      	bne.n	8009aac <_free_r+0x70>
 8009a94:	6824      	ldr	r4, [r4, #0]
 8009a96:	4421      	add	r1, r4
 8009a98:	1854      	adds	r4, r2, r1
 8009a9a:	42a3      	cmp	r3, r4
 8009a9c:	6011      	str	r1, [r2, #0]
 8009a9e:	d1e0      	bne.n	8009a62 <_free_r+0x26>
 8009aa0:	681c      	ldr	r4, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	6053      	str	r3, [r2, #4]
 8009aa6:	4421      	add	r1, r4
 8009aa8:	6011      	str	r1, [r2, #0]
 8009aaa:	e7da      	b.n	8009a62 <_free_r+0x26>
 8009aac:	d902      	bls.n	8009ab4 <_free_r+0x78>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	6003      	str	r3, [r0, #0]
 8009ab2:	e7d6      	b.n	8009a62 <_free_r+0x26>
 8009ab4:	6825      	ldr	r5, [r4, #0]
 8009ab6:	1961      	adds	r1, r4, r5
 8009ab8:	428b      	cmp	r3, r1
 8009aba:	bf04      	itt	eq
 8009abc:	6819      	ldreq	r1, [r3, #0]
 8009abe:	685b      	ldreq	r3, [r3, #4]
 8009ac0:	6063      	str	r3, [r4, #4]
 8009ac2:	bf04      	itt	eq
 8009ac4:	1949      	addeq	r1, r1, r5
 8009ac6:	6021      	streq	r1, [r4, #0]
 8009ac8:	6054      	str	r4, [r2, #4]
 8009aca:	e7ca      	b.n	8009a62 <_free_r+0x26>
 8009acc:	b003      	add	sp, #12
 8009ace:	bd30      	pop	{r4, r5, pc}
 8009ad0:	20000898 	.word	0x20000898

08009ad4 <sbrk_aligned>:
 8009ad4:	b570      	push	{r4, r5, r6, lr}
 8009ad6:	4e0e      	ldr	r6, [pc, #56]	; (8009b10 <sbrk_aligned+0x3c>)
 8009ad8:	460c      	mov	r4, r1
 8009ada:	6831      	ldr	r1, [r6, #0]
 8009adc:	4605      	mov	r5, r0
 8009ade:	b911      	cbnz	r1, 8009ae6 <sbrk_aligned+0x12>
 8009ae0:	f001 f80c 	bl	800aafc <_sbrk_r>
 8009ae4:	6030      	str	r0, [r6, #0]
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	4628      	mov	r0, r5
 8009aea:	f001 f807 	bl	800aafc <_sbrk_r>
 8009aee:	1c43      	adds	r3, r0, #1
 8009af0:	d00a      	beq.n	8009b08 <sbrk_aligned+0x34>
 8009af2:	1cc4      	adds	r4, r0, #3
 8009af4:	f024 0403 	bic.w	r4, r4, #3
 8009af8:	42a0      	cmp	r0, r4
 8009afa:	d007      	beq.n	8009b0c <sbrk_aligned+0x38>
 8009afc:	1a21      	subs	r1, r4, r0
 8009afe:	4628      	mov	r0, r5
 8009b00:	f000 fffc 	bl	800aafc <_sbrk_r>
 8009b04:	3001      	adds	r0, #1
 8009b06:	d101      	bne.n	8009b0c <sbrk_aligned+0x38>
 8009b08:	f04f 34ff 	mov.w	r4, #4294967295
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	bd70      	pop	{r4, r5, r6, pc}
 8009b10:	2000089c 	.word	0x2000089c

08009b14 <_malloc_r>:
 8009b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b18:	1ccd      	adds	r5, r1, #3
 8009b1a:	f025 0503 	bic.w	r5, r5, #3
 8009b1e:	3508      	adds	r5, #8
 8009b20:	2d0c      	cmp	r5, #12
 8009b22:	bf38      	it	cc
 8009b24:	250c      	movcc	r5, #12
 8009b26:	2d00      	cmp	r5, #0
 8009b28:	4607      	mov	r7, r0
 8009b2a:	db01      	blt.n	8009b30 <_malloc_r+0x1c>
 8009b2c:	42a9      	cmp	r1, r5
 8009b2e:	d905      	bls.n	8009b3c <_malloc_r+0x28>
 8009b30:	230c      	movs	r3, #12
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	2600      	movs	r6, #0
 8009b36:	4630      	mov	r0, r6
 8009b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b3c:	4e2e      	ldr	r6, [pc, #184]	; (8009bf8 <_malloc_r+0xe4>)
 8009b3e:	f001 fc67 	bl	800b410 <__malloc_lock>
 8009b42:	6833      	ldr	r3, [r6, #0]
 8009b44:	461c      	mov	r4, r3
 8009b46:	bb34      	cbnz	r4, 8009b96 <_malloc_r+0x82>
 8009b48:	4629      	mov	r1, r5
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	f7ff ffc2 	bl	8009ad4 <sbrk_aligned>
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	4604      	mov	r4, r0
 8009b54:	d14d      	bne.n	8009bf2 <_malloc_r+0xde>
 8009b56:	6834      	ldr	r4, [r6, #0]
 8009b58:	4626      	mov	r6, r4
 8009b5a:	2e00      	cmp	r6, #0
 8009b5c:	d140      	bne.n	8009be0 <_malloc_r+0xcc>
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	4631      	mov	r1, r6
 8009b62:	4638      	mov	r0, r7
 8009b64:	eb04 0803 	add.w	r8, r4, r3
 8009b68:	f000 ffc8 	bl	800aafc <_sbrk_r>
 8009b6c:	4580      	cmp	r8, r0
 8009b6e:	d13a      	bne.n	8009be6 <_malloc_r+0xd2>
 8009b70:	6821      	ldr	r1, [r4, #0]
 8009b72:	3503      	adds	r5, #3
 8009b74:	1a6d      	subs	r5, r5, r1
 8009b76:	f025 0503 	bic.w	r5, r5, #3
 8009b7a:	3508      	adds	r5, #8
 8009b7c:	2d0c      	cmp	r5, #12
 8009b7e:	bf38      	it	cc
 8009b80:	250c      	movcc	r5, #12
 8009b82:	4629      	mov	r1, r5
 8009b84:	4638      	mov	r0, r7
 8009b86:	f7ff ffa5 	bl	8009ad4 <sbrk_aligned>
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	d02b      	beq.n	8009be6 <_malloc_r+0xd2>
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	442b      	add	r3, r5
 8009b92:	6023      	str	r3, [r4, #0]
 8009b94:	e00e      	b.n	8009bb4 <_malloc_r+0xa0>
 8009b96:	6822      	ldr	r2, [r4, #0]
 8009b98:	1b52      	subs	r2, r2, r5
 8009b9a:	d41e      	bmi.n	8009bda <_malloc_r+0xc6>
 8009b9c:	2a0b      	cmp	r2, #11
 8009b9e:	d916      	bls.n	8009bce <_malloc_r+0xba>
 8009ba0:	1961      	adds	r1, r4, r5
 8009ba2:	42a3      	cmp	r3, r4
 8009ba4:	6025      	str	r5, [r4, #0]
 8009ba6:	bf18      	it	ne
 8009ba8:	6059      	strne	r1, [r3, #4]
 8009baa:	6863      	ldr	r3, [r4, #4]
 8009bac:	bf08      	it	eq
 8009bae:	6031      	streq	r1, [r6, #0]
 8009bb0:	5162      	str	r2, [r4, r5]
 8009bb2:	604b      	str	r3, [r1, #4]
 8009bb4:	4638      	mov	r0, r7
 8009bb6:	f104 060b 	add.w	r6, r4, #11
 8009bba:	f001 fc2f 	bl	800b41c <__malloc_unlock>
 8009bbe:	f026 0607 	bic.w	r6, r6, #7
 8009bc2:	1d23      	adds	r3, r4, #4
 8009bc4:	1af2      	subs	r2, r6, r3
 8009bc6:	d0b6      	beq.n	8009b36 <_malloc_r+0x22>
 8009bc8:	1b9b      	subs	r3, r3, r6
 8009bca:	50a3      	str	r3, [r4, r2]
 8009bcc:	e7b3      	b.n	8009b36 <_malloc_r+0x22>
 8009bce:	6862      	ldr	r2, [r4, #4]
 8009bd0:	42a3      	cmp	r3, r4
 8009bd2:	bf0c      	ite	eq
 8009bd4:	6032      	streq	r2, [r6, #0]
 8009bd6:	605a      	strne	r2, [r3, #4]
 8009bd8:	e7ec      	b.n	8009bb4 <_malloc_r+0xa0>
 8009bda:	4623      	mov	r3, r4
 8009bdc:	6864      	ldr	r4, [r4, #4]
 8009bde:	e7b2      	b.n	8009b46 <_malloc_r+0x32>
 8009be0:	4634      	mov	r4, r6
 8009be2:	6876      	ldr	r6, [r6, #4]
 8009be4:	e7b9      	b.n	8009b5a <_malloc_r+0x46>
 8009be6:	230c      	movs	r3, #12
 8009be8:	603b      	str	r3, [r7, #0]
 8009bea:	4638      	mov	r0, r7
 8009bec:	f001 fc16 	bl	800b41c <__malloc_unlock>
 8009bf0:	e7a1      	b.n	8009b36 <_malloc_r+0x22>
 8009bf2:	6025      	str	r5, [r4, #0]
 8009bf4:	e7de      	b.n	8009bb4 <_malloc_r+0xa0>
 8009bf6:	bf00      	nop
 8009bf8:	20000898 	.word	0x20000898

08009bfc <__ssputs_r>:
 8009bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c00:	688e      	ldr	r6, [r1, #8]
 8009c02:	429e      	cmp	r6, r3
 8009c04:	4682      	mov	sl, r0
 8009c06:	460c      	mov	r4, r1
 8009c08:	4690      	mov	r8, r2
 8009c0a:	461f      	mov	r7, r3
 8009c0c:	d838      	bhi.n	8009c80 <__ssputs_r+0x84>
 8009c0e:	898a      	ldrh	r2, [r1, #12]
 8009c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c14:	d032      	beq.n	8009c7c <__ssputs_r+0x80>
 8009c16:	6825      	ldr	r5, [r4, #0]
 8009c18:	6909      	ldr	r1, [r1, #16]
 8009c1a:	eba5 0901 	sub.w	r9, r5, r1
 8009c1e:	6965      	ldr	r5, [r4, #20]
 8009c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c28:	3301      	adds	r3, #1
 8009c2a:	444b      	add	r3, r9
 8009c2c:	106d      	asrs	r5, r5, #1
 8009c2e:	429d      	cmp	r5, r3
 8009c30:	bf38      	it	cc
 8009c32:	461d      	movcc	r5, r3
 8009c34:	0553      	lsls	r3, r2, #21
 8009c36:	d531      	bpl.n	8009c9c <__ssputs_r+0xa0>
 8009c38:	4629      	mov	r1, r5
 8009c3a:	f7ff ff6b 	bl	8009b14 <_malloc_r>
 8009c3e:	4606      	mov	r6, r0
 8009c40:	b950      	cbnz	r0, 8009c58 <__ssputs_r+0x5c>
 8009c42:	230c      	movs	r3, #12
 8009c44:	f8ca 3000 	str.w	r3, [sl]
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c4e:	81a3      	strh	r3, [r4, #12]
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c58:	6921      	ldr	r1, [r4, #16]
 8009c5a:	464a      	mov	r2, r9
 8009c5c:	f001 fbb0 	bl	800b3c0 <memcpy>
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c6a:	81a3      	strh	r3, [r4, #12]
 8009c6c:	6126      	str	r6, [r4, #16]
 8009c6e:	6165      	str	r5, [r4, #20]
 8009c70:	444e      	add	r6, r9
 8009c72:	eba5 0509 	sub.w	r5, r5, r9
 8009c76:	6026      	str	r6, [r4, #0]
 8009c78:	60a5      	str	r5, [r4, #8]
 8009c7a:	463e      	mov	r6, r7
 8009c7c:	42be      	cmp	r6, r7
 8009c7e:	d900      	bls.n	8009c82 <__ssputs_r+0x86>
 8009c80:	463e      	mov	r6, r7
 8009c82:	6820      	ldr	r0, [r4, #0]
 8009c84:	4632      	mov	r2, r6
 8009c86:	4641      	mov	r1, r8
 8009c88:	f001 fba8 	bl	800b3dc <memmove>
 8009c8c:	68a3      	ldr	r3, [r4, #8]
 8009c8e:	1b9b      	subs	r3, r3, r6
 8009c90:	60a3      	str	r3, [r4, #8]
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	4433      	add	r3, r6
 8009c96:	6023      	str	r3, [r4, #0]
 8009c98:	2000      	movs	r0, #0
 8009c9a:	e7db      	b.n	8009c54 <__ssputs_r+0x58>
 8009c9c:	462a      	mov	r2, r5
 8009c9e:	f001 fbc3 	bl	800b428 <_realloc_r>
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d1e1      	bne.n	8009c6c <__ssputs_r+0x70>
 8009ca8:	6921      	ldr	r1, [r4, #16]
 8009caa:	4650      	mov	r0, sl
 8009cac:	f7ff fec6 	bl	8009a3c <_free_r>
 8009cb0:	e7c7      	b.n	8009c42 <__ssputs_r+0x46>
	...

08009cb4 <_svfiprintf_r>:
 8009cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb8:	4698      	mov	r8, r3
 8009cba:	898b      	ldrh	r3, [r1, #12]
 8009cbc:	061b      	lsls	r3, r3, #24
 8009cbe:	b09d      	sub	sp, #116	; 0x74
 8009cc0:	4607      	mov	r7, r0
 8009cc2:	460d      	mov	r5, r1
 8009cc4:	4614      	mov	r4, r2
 8009cc6:	d50e      	bpl.n	8009ce6 <_svfiprintf_r+0x32>
 8009cc8:	690b      	ldr	r3, [r1, #16]
 8009cca:	b963      	cbnz	r3, 8009ce6 <_svfiprintf_r+0x32>
 8009ccc:	2140      	movs	r1, #64	; 0x40
 8009cce:	f7ff ff21 	bl	8009b14 <_malloc_r>
 8009cd2:	6028      	str	r0, [r5, #0]
 8009cd4:	6128      	str	r0, [r5, #16]
 8009cd6:	b920      	cbnz	r0, 8009ce2 <_svfiprintf_r+0x2e>
 8009cd8:	230c      	movs	r3, #12
 8009cda:	603b      	str	r3, [r7, #0]
 8009cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce0:	e0d1      	b.n	8009e86 <_svfiprintf_r+0x1d2>
 8009ce2:	2340      	movs	r3, #64	; 0x40
 8009ce4:	616b      	str	r3, [r5, #20]
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cea:	2320      	movs	r3, #32
 8009cec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cf4:	2330      	movs	r3, #48	; 0x30
 8009cf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ea0 <_svfiprintf_r+0x1ec>
 8009cfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cfe:	f04f 0901 	mov.w	r9, #1
 8009d02:	4623      	mov	r3, r4
 8009d04:	469a      	mov	sl, r3
 8009d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d0a:	b10a      	cbz	r2, 8009d10 <_svfiprintf_r+0x5c>
 8009d0c:	2a25      	cmp	r2, #37	; 0x25
 8009d0e:	d1f9      	bne.n	8009d04 <_svfiprintf_r+0x50>
 8009d10:	ebba 0b04 	subs.w	fp, sl, r4
 8009d14:	d00b      	beq.n	8009d2e <_svfiprintf_r+0x7a>
 8009d16:	465b      	mov	r3, fp
 8009d18:	4622      	mov	r2, r4
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	4638      	mov	r0, r7
 8009d1e:	f7ff ff6d 	bl	8009bfc <__ssputs_r>
 8009d22:	3001      	adds	r0, #1
 8009d24:	f000 80aa 	beq.w	8009e7c <_svfiprintf_r+0x1c8>
 8009d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d2a:	445a      	add	r2, fp
 8009d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 80a2 	beq.w	8009e7c <_svfiprintf_r+0x1c8>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d42:	f10a 0a01 	add.w	sl, sl, #1
 8009d46:	9304      	str	r3, [sp, #16]
 8009d48:	9307      	str	r3, [sp, #28]
 8009d4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d4e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d50:	4654      	mov	r4, sl
 8009d52:	2205      	movs	r2, #5
 8009d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d58:	4851      	ldr	r0, [pc, #324]	; (8009ea0 <_svfiprintf_r+0x1ec>)
 8009d5a:	f7f6 fa41 	bl	80001e0 <memchr>
 8009d5e:	9a04      	ldr	r2, [sp, #16]
 8009d60:	b9d8      	cbnz	r0, 8009d9a <_svfiprintf_r+0xe6>
 8009d62:	06d0      	lsls	r0, r2, #27
 8009d64:	bf44      	itt	mi
 8009d66:	2320      	movmi	r3, #32
 8009d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d6c:	0711      	lsls	r1, r2, #28
 8009d6e:	bf44      	itt	mi
 8009d70:	232b      	movmi	r3, #43	; 0x2b
 8009d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d76:	f89a 3000 	ldrb.w	r3, [sl]
 8009d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d7c:	d015      	beq.n	8009daa <_svfiprintf_r+0xf6>
 8009d7e:	9a07      	ldr	r2, [sp, #28]
 8009d80:	4654      	mov	r4, sl
 8009d82:	2000      	movs	r0, #0
 8009d84:	f04f 0c0a 	mov.w	ip, #10
 8009d88:	4621      	mov	r1, r4
 8009d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d8e:	3b30      	subs	r3, #48	; 0x30
 8009d90:	2b09      	cmp	r3, #9
 8009d92:	d94e      	bls.n	8009e32 <_svfiprintf_r+0x17e>
 8009d94:	b1b0      	cbz	r0, 8009dc4 <_svfiprintf_r+0x110>
 8009d96:	9207      	str	r2, [sp, #28]
 8009d98:	e014      	b.n	8009dc4 <_svfiprintf_r+0x110>
 8009d9a:	eba0 0308 	sub.w	r3, r0, r8
 8009d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8009da2:	4313      	orrs	r3, r2
 8009da4:	9304      	str	r3, [sp, #16]
 8009da6:	46a2      	mov	sl, r4
 8009da8:	e7d2      	b.n	8009d50 <_svfiprintf_r+0x9c>
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	1d19      	adds	r1, r3, #4
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	9103      	str	r1, [sp, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	bfbb      	ittet	lt
 8009db6:	425b      	neglt	r3, r3
 8009db8:	f042 0202 	orrlt.w	r2, r2, #2
 8009dbc:	9307      	strge	r3, [sp, #28]
 8009dbe:	9307      	strlt	r3, [sp, #28]
 8009dc0:	bfb8      	it	lt
 8009dc2:	9204      	strlt	r2, [sp, #16]
 8009dc4:	7823      	ldrb	r3, [r4, #0]
 8009dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8009dc8:	d10c      	bne.n	8009de4 <_svfiprintf_r+0x130>
 8009dca:	7863      	ldrb	r3, [r4, #1]
 8009dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8009dce:	d135      	bne.n	8009e3c <_svfiprintf_r+0x188>
 8009dd0:	9b03      	ldr	r3, [sp, #12]
 8009dd2:	1d1a      	adds	r2, r3, #4
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	9203      	str	r2, [sp, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	bfb8      	it	lt
 8009ddc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009de0:	3402      	adds	r4, #2
 8009de2:	9305      	str	r3, [sp, #20]
 8009de4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009eb0 <_svfiprintf_r+0x1fc>
 8009de8:	7821      	ldrb	r1, [r4, #0]
 8009dea:	2203      	movs	r2, #3
 8009dec:	4650      	mov	r0, sl
 8009dee:	f7f6 f9f7 	bl	80001e0 <memchr>
 8009df2:	b140      	cbz	r0, 8009e06 <_svfiprintf_r+0x152>
 8009df4:	2340      	movs	r3, #64	; 0x40
 8009df6:	eba0 000a 	sub.w	r0, r0, sl
 8009dfa:	fa03 f000 	lsl.w	r0, r3, r0
 8009dfe:	9b04      	ldr	r3, [sp, #16]
 8009e00:	4303      	orrs	r3, r0
 8009e02:	3401      	adds	r4, #1
 8009e04:	9304      	str	r3, [sp, #16]
 8009e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e0a:	4826      	ldr	r0, [pc, #152]	; (8009ea4 <_svfiprintf_r+0x1f0>)
 8009e0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e10:	2206      	movs	r2, #6
 8009e12:	f7f6 f9e5 	bl	80001e0 <memchr>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d038      	beq.n	8009e8c <_svfiprintf_r+0x1d8>
 8009e1a:	4b23      	ldr	r3, [pc, #140]	; (8009ea8 <_svfiprintf_r+0x1f4>)
 8009e1c:	bb1b      	cbnz	r3, 8009e66 <_svfiprintf_r+0x1b2>
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	3307      	adds	r3, #7
 8009e22:	f023 0307 	bic.w	r3, r3, #7
 8009e26:	3308      	adds	r3, #8
 8009e28:	9303      	str	r3, [sp, #12]
 8009e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e2c:	4433      	add	r3, r6
 8009e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e30:	e767      	b.n	8009d02 <_svfiprintf_r+0x4e>
 8009e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e36:	460c      	mov	r4, r1
 8009e38:	2001      	movs	r0, #1
 8009e3a:	e7a5      	b.n	8009d88 <_svfiprintf_r+0xd4>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	3401      	adds	r4, #1
 8009e40:	9305      	str	r3, [sp, #20]
 8009e42:	4619      	mov	r1, r3
 8009e44:	f04f 0c0a 	mov.w	ip, #10
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e4e:	3a30      	subs	r2, #48	; 0x30
 8009e50:	2a09      	cmp	r2, #9
 8009e52:	d903      	bls.n	8009e5c <_svfiprintf_r+0x1a8>
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0c5      	beq.n	8009de4 <_svfiprintf_r+0x130>
 8009e58:	9105      	str	r1, [sp, #20]
 8009e5a:	e7c3      	b.n	8009de4 <_svfiprintf_r+0x130>
 8009e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e60:	4604      	mov	r4, r0
 8009e62:	2301      	movs	r3, #1
 8009e64:	e7f0      	b.n	8009e48 <_svfiprintf_r+0x194>
 8009e66:	ab03      	add	r3, sp, #12
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	462a      	mov	r2, r5
 8009e6c:	4b0f      	ldr	r3, [pc, #60]	; (8009eac <_svfiprintf_r+0x1f8>)
 8009e6e:	a904      	add	r1, sp, #16
 8009e70:	4638      	mov	r0, r7
 8009e72:	f3af 8000 	nop.w
 8009e76:	1c42      	adds	r2, r0, #1
 8009e78:	4606      	mov	r6, r0
 8009e7a:	d1d6      	bne.n	8009e2a <_svfiprintf_r+0x176>
 8009e7c:	89ab      	ldrh	r3, [r5, #12]
 8009e7e:	065b      	lsls	r3, r3, #25
 8009e80:	f53f af2c 	bmi.w	8009cdc <_svfiprintf_r+0x28>
 8009e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e86:	b01d      	add	sp, #116	; 0x74
 8009e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8c:	ab03      	add	r3, sp, #12
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	462a      	mov	r2, r5
 8009e92:	4b06      	ldr	r3, [pc, #24]	; (8009eac <_svfiprintf_r+0x1f8>)
 8009e94:	a904      	add	r1, sp, #16
 8009e96:	4638      	mov	r0, r7
 8009e98:	f000 fba6 	bl	800a5e8 <_printf_i>
 8009e9c:	e7eb      	b.n	8009e76 <_svfiprintf_r+0x1c2>
 8009e9e:	bf00      	nop
 8009ea0:	0800b93e 	.word	0x0800b93e
 8009ea4:	0800b948 	.word	0x0800b948
 8009ea8:	00000000 	.word	0x00000000
 8009eac:	08009bfd 	.word	0x08009bfd
 8009eb0:	0800b944 	.word	0x0800b944

08009eb4 <_sungetc_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	1c4b      	adds	r3, r1, #1
 8009eb8:	4614      	mov	r4, r2
 8009eba:	d103      	bne.n	8009ec4 <_sungetc_r+0x10>
 8009ebc:	f04f 35ff 	mov.w	r5, #4294967295
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	bd38      	pop	{r3, r4, r5, pc}
 8009ec4:	8993      	ldrh	r3, [r2, #12]
 8009ec6:	f023 0320 	bic.w	r3, r3, #32
 8009eca:	8193      	strh	r3, [r2, #12]
 8009ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ece:	6852      	ldr	r2, [r2, #4]
 8009ed0:	b2cd      	uxtb	r5, r1
 8009ed2:	b18b      	cbz	r3, 8009ef8 <_sungetc_r+0x44>
 8009ed4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	dd08      	ble.n	8009eec <_sungetc_r+0x38>
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	1e5a      	subs	r2, r3, #1
 8009ede:	6022      	str	r2, [r4, #0]
 8009ee0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009ee4:	6863      	ldr	r3, [r4, #4]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	6063      	str	r3, [r4, #4]
 8009eea:	e7e9      	b.n	8009ec0 <_sungetc_r+0xc>
 8009eec:	4621      	mov	r1, r4
 8009eee:	f000 ff45 	bl	800ad7c <__submore>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d0f1      	beq.n	8009eda <_sungetc_r+0x26>
 8009ef6:	e7e1      	b.n	8009ebc <_sungetc_r+0x8>
 8009ef8:	6921      	ldr	r1, [r4, #16]
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	b151      	cbz	r1, 8009f14 <_sungetc_r+0x60>
 8009efe:	4299      	cmp	r1, r3
 8009f00:	d208      	bcs.n	8009f14 <_sungetc_r+0x60>
 8009f02:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009f06:	42a9      	cmp	r1, r5
 8009f08:	d104      	bne.n	8009f14 <_sungetc_r+0x60>
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	3201      	adds	r2, #1
 8009f0e:	6023      	str	r3, [r4, #0]
 8009f10:	6062      	str	r2, [r4, #4]
 8009f12:	e7d5      	b.n	8009ec0 <_sungetc_r+0xc>
 8009f14:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8009f1e:	2303      	movs	r3, #3
 8009f20:	63a3      	str	r3, [r4, #56]	; 0x38
 8009f22:	4623      	mov	r3, r4
 8009f24:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e7dc      	b.n	8009ee8 <_sungetc_r+0x34>

08009f2e <__ssrefill_r>:
 8009f2e:	b510      	push	{r4, lr}
 8009f30:	460c      	mov	r4, r1
 8009f32:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009f34:	b169      	cbz	r1, 8009f52 <__ssrefill_r+0x24>
 8009f36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f3a:	4299      	cmp	r1, r3
 8009f3c:	d001      	beq.n	8009f42 <__ssrefill_r+0x14>
 8009f3e:	f7ff fd7d 	bl	8009a3c <_free_r>
 8009f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f44:	6063      	str	r3, [r4, #4]
 8009f46:	2000      	movs	r0, #0
 8009f48:	6360      	str	r0, [r4, #52]	; 0x34
 8009f4a:	b113      	cbz	r3, 8009f52 <__ssrefill_r+0x24>
 8009f4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009f4e:	6023      	str	r3, [r4, #0]
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	6923      	ldr	r3, [r4, #16]
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	2300      	movs	r3, #0
 8009f58:	6063      	str	r3, [r4, #4]
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	f043 0320 	orr.w	r3, r3, #32
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	f04f 30ff 	mov.w	r0, #4294967295
 8009f66:	e7f3      	b.n	8009f50 <__ssrefill_r+0x22>

08009f68 <__ssvfiscanf_r>:
 8009f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009f72:	2100      	movs	r1, #0
 8009f74:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009f78:	49a6      	ldr	r1, [pc, #664]	; (800a214 <__ssvfiscanf_r+0x2ac>)
 8009f7a:	91a0      	str	r1, [sp, #640]	; 0x280
 8009f7c:	f10d 0804 	add.w	r8, sp, #4
 8009f80:	49a5      	ldr	r1, [pc, #660]	; (800a218 <__ssvfiscanf_r+0x2b0>)
 8009f82:	4fa6      	ldr	r7, [pc, #664]	; (800a21c <__ssvfiscanf_r+0x2b4>)
 8009f84:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a220 <__ssvfiscanf_r+0x2b8>
 8009f88:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	91a1      	str	r1, [sp, #644]	; 0x284
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	7813      	ldrb	r3, [r2, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 815a 	beq.w	800a24e <__ssvfiscanf_r+0x2e6>
 8009f9a:	5dd9      	ldrb	r1, [r3, r7]
 8009f9c:	f011 0108 	ands.w	r1, r1, #8
 8009fa0:	f102 0501 	add.w	r5, r2, #1
 8009fa4:	d019      	beq.n	8009fda <__ssvfiscanf_r+0x72>
 8009fa6:	6863      	ldr	r3, [r4, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	dd0f      	ble.n	8009fcc <__ssvfiscanf_r+0x64>
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	781a      	ldrb	r2, [r3, #0]
 8009fb0:	5cba      	ldrb	r2, [r7, r2]
 8009fb2:	0712      	lsls	r2, r2, #28
 8009fb4:	d401      	bmi.n	8009fba <__ssvfiscanf_r+0x52>
 8009fb6:	462a      	mov	r2, r5
 8009fb8:	e7eb      	b.n	8009f92 <__ssvfiscanf_r+0x2a>
 8009fba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009fbc:	3201      	adds	r2, #1
 8009fbe:	9245      	str	r2, [sp, #276]	; 0x114
 8009fc0:	6862      	ldr	r2, [r4, #4]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	3a01      	subs	r2, #1
 8009fc6:	6062      	str	r2, [r4, #4]
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	e7ec      	b.n	8009fa6 <__ssvfiscanf_r+0x3e>
 8009fcc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009fce:	4621      	mov	r1, r4
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	4798      	blx	r3
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d0e9      	beq.n	8009fac <__ssvfiscanf_r+0x44>
 8009fd8:	e7ed      	b.n	8009fb6 <__ssvfiscanf_r+0x4e>
 8009fda:	2b25      	cmp	r3, #37	; 0x25
 8009fdc:	d012      	beq.n	800a004 <__ssvfiscanf_r+0x9c>
 8009fde:	469a      	mov	sl, r3
 8009fe0:	6863      	ldr	r3, [r4, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f340 8091 	ble.w	800a10a <__ssvfiscanf_r+0x1a2>
 8009fe8:	6822      	ldr	r2, [r4, #0]
 8009fea:	7813      	ldrb	r3, [r2, #0]
 8009fec:	4553      	cmp	r3, sl
 8009fee:	f040 812e 	bne.w	800a24e <__ssvfiscanf_r+0x2e6>
 8009ff2:	6863      	ldr	r3, [r4, #4]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	6063      	str	r3, [r4, #4]
 8009ff8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009ffa:	3201      	adds	r2, #1
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	6022      	str	r2, [r4, #0]
 800a000:	9345      	str	r3, [sp, #276]	; 0x114
 800a002:	e7d8      	b.n	8009fb6 <__ssvfiscanf_r+0x4e>
 800a004:	9141      	str	r1, [sp, #260]	; 0x104
 800a006:	9143      	str	r1, [sp, #268]	; 0x10c
 800a008:	7853      	ldrb	r3, [r2, #1]
 800a00a:	2b2a      	cmp	r3, #42	; 0x2a
 800a00c:	bf02      	ittt	eq
 800a00e:	2310      	moveq	r3, #16
 800a010:	1c95      	addeq	r5, r2, #2
 800a012:	9341      	streq	r3, [sp, #260]	; 0x104
 800a014:	220a      	movs	r2, #10
 800a016:	46aa      	mov	sl, r5
 800a018:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a01c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a020:	2b09      	cmp	r3, #9
 800a022:	d91d      	bls.n	800a060 <__ssvfiscanf_r+0xf8>
 800a024:	487e      	ldr	r0, [pc, #504]	; (800a220 <__ssvfiscanf_r+0x2b8>)
 800a026:	2203      	movs	r2, #3
 800a028:	f7f6 f8da 	bl	80001e0 <memchr>
 800a02c:	b140      	cbz	r0, 800a040 <__ssvfiscanf_r+0xd8>
 800a02e:	2301      	movs	r3, #1
 800a030:	eba0 0009 	sub.w	r0, r0, r9
 800a034:	fa03 f000 	lsl.w	r0, r3, r0
 800a038:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a03a:	4318      	orrs	r0, r3
 800a03c:	9041      	str	r0, [sp, #260]	; 0x104
 800a03e:	4655      	mov	r5, sl
 800a040:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a044:	2b78      	cmp	r3, #120	; 0x78
 800a046:	d806      	bhi.n	800a056 <__ssvfiscanf_r+0xee>
 800a048:	2b57      	cmp	r3, #87	; 0x57
 800a04a:	d810      	bhi.n	800a06e <__ssvfiscanf_r+0x106>
 800a04c:	2b25      	cmp	r3, #37	; 0x25
 800a04e:	d0c6      	beq.n	8009fde <__ssvfiscanf_r+0x76>
 800a050:	d856      	bhi.n	800a100 <__ssvfiscanf_r+0x198>
 800a052:	2b00      	cmp	r3, #0
 800a054:	d064      	beq.n	800a120 <__ssvfiscanf_r+0x1b8>
 800a056:	2303      	movs	r3, #3
 800a058:	9347      	str	r3, [sp, #284]	; 0x11c
 800a05a:	230a      	movs	r3, #10
 800a05c:	9342      	str	r3, [sp, #264]	; 0x108
 800a05e:	e071      	b.n	800a144 <__ssvfiscanf_r+0x1dc>
 800a060:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a062:	fb02 1103 	mla	r1, r2, r3, r1
 800a066:	3930      	subs	r1, #48	; 0x30
 800a068:	9143      	str	r1, [sp, #268]	; 0x10c
 800a06a:	4655      	mov	r5, sl
 800a06c:	e7d3      	b.n	800a016 <__ssvfiscanf_r+0xae>
 800a06e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a072:	2a20      	cmp	r2, #32
 800a074:	d8ef      	bhi.n	800a056 <__ssvfiscanf_r+0xee>
 800a076:	a101      	add	r1, pc, #4	; (adr r1, 800a07c <__ssvfiscanf_r+0x114>)
 800a078:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a07c:	0800a12f 	.word	0x0800a12f
 800a080:	0800a057 	.word	0x0800a057
 800a084:	0800a057 	.word	0x0800a057
 800a088:	0800a18d 	.word	0x0800a18d
 800a08c:	0800a057 	.word	0x0800a057
 800a090:	0800a057 	.word	0x0800a057
 800a094:	0800a057 	.word	0x0800a057
 800a098:	0800a057 	.word	0x0800a057
 800a09c:	0800a057 	.word	0x0800a057
 800a0a0:	0800a057 	.word	0x0800a057
 800a0a4:	0800a057 	.word	0x0800a057
 800a0a8:	0800a1a3 	.word	0x0800a1a3
 800a0ac:	0800a179 	.word	0x0800a179
 800a0b0:	0800a107 	.word	0x0800a107
 800a0b4:	0800a107 	.word	0x0800a107
 800a0b8:	0800a107 	.word	0x0800a107
 800a0bc:	0800a057 	.word	0x0800a057
 800a0c0:	0800a17d 	.word	0x0800a17d
 800a0c4:	0800a057 	.word	0x0800a057
 800a0c8:	0800a057 	.word	0x0800a057
 800a0cc:	0800a057 	.word	0x0800a057
 800a0d0:	0800a057 	.word	0x0800a057
 800a0d4:	0800a1b3 	.word	0x0800a1b3
 800a0d8:	0800a185 	.word	0x0800a185
 800a0dc:	0800a127 	.word	0x0800a127
 800a0e0:	0800a057 	.word	0x0800a057
 800a0e4:	0800a057 	.word	0x0800a057
 800a0e8:	0800a1af 	.word	0x0800a1af
 800a0ec:	0800a057 	.word	0x0800a057
 800a0f0:	0800a179 	.word	0x0800a179
 800a0f4:	0800a057 	.word	0x0800a057
 800a0f8:	0800a057 	.word	0x0800a057
 800a0fc:	0800a12f 	.word	0x0800a12f
 800a100:	3b45      	subs	r3, #69	; 0x45
 800a102:	2b02      	cmp	r3, #2
 800a104:	d8a7      	bhi.n	800a056 <__ssvfiscanf_r+0xee>
 800a106:	2305      	movs	r3, #5
 800a108:	e01b      	b.n	800a142 <__ssvfiscanf_r+0x1da>
 800a10a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a10c:	4621      	mov	r1, r4
 800a10e:	4630      	mov	r0, r6
 800a110:	4798      	blx	r3
 800a112:	2800      	cmp	r0, #0
 800a114:	f43f af68 	beq.w	8009fe8 <__ssvfiscanf_r+0x80>
 800a118:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a11a:	2800      	cmp	r0, #0
 800a11c:	f040 808d 	bne.w	800a23a <__ssvfiscanf_r+0x2d2>
 800a120:	f04f 30ff 	mov.w	r0, #4294967295
 800a124:	e08f      	b.n	800a246 <__ssvfiscanf_r+0x2de>
 800a126:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a128:	f042 0220 	orr.w	r2, r2, #32
 800a12c:	9241      	str	r2, [sp, #260]	; 0x104
 800a12e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a134:	9241      	str	r2, [sp, #260]	; 0x104
 800a136:	2210      	movs	r2, #16
 800a138:	2b6f      	cmp	r3, #111	; 0x6f
 800a13a:	9242      	str	r2, [sp, #264]	; 0x108
 800a13c:	bf34      	ite	cc
 800a13e:	2303      	movcc	r3, #3
 800a140:	2304      	movcs	r3, #4
 800a142:	9347      	str	r3, [sp, #284]	; 0x11c
 800a144:	6863      	ldr	r3, [r4, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	dd42      	ble.n	800a1d0 <__ssvfiscanf_r+0x268>
 800a14a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a14c:	0659      	lsls	r1, r3, #25
 800a14e:	d404      	bmi.n	800a15a <__ssvfiscanf_r+0x1f2>
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	781a      	ldrb	r2, [r3, #0]
 800a154:	5cba      	ldrb	r2, [r7, r2]
 800a156:	0712      	lsls	r2, r2, #28
 800a158:	d441      	bmi.n	800a1de <__ssvfiscanf_r+0x276>
 800a15a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	dc50      	bgt.n	800a202 <__ssvfiscanf_r+0x29a>
 800a160:	466b      	mov	r3, sp
 800a162:	4622      	mov	r2, r4
 800a164:	a941      	add	r1, sp, #260	; 0x104
 800a166:	4630      	mov	r0, r6
 800a168:	f000 fb64 	bl	800a834 <_scanf_chars>
 800a16c:	2801      	cmp	r0, #1
 800a16e:	d06e      	beq.n	800a24e <__ssvfiscanf_r+0x2e6>
 800a170:	2802      	cmp	r0, #2
 800a172:	f47f af20 	bne.w	8009fb6 <__ssvfiscanf_r+0x4e>
 800a176:	e7cf      	b.n	800a118 <__ssvfiscanf_r+0x1b0>
 800a178:	220a      	movs	r2, #10
 800a17a:	e7dd      	b.n	800a138 <__ssvfiscanf_r+0x1d0>
 800a17c:	2300      	movs	r3, #0
 800a17e:	9342      	str	r3, [sp, #264]	; 0x108
 800a180:	2303      	movs	r3, #3
 800a182:	e7de      	b.n	800a142 <__ssvfiscanf_r+0x1da>
 800a184:	2308      	movs	r3, #8
 800a186:	9342      	str	r3, [sp, #264]	; 0x108
 800a188:	2304      	movs	r3, #4
 800a18a:	e7da      	b.n	800a142 <__ssvfiscanf_r+0x1da>
 800a18c:	4629      	mov	r1, r5
 800a18e:	4640      	mov	r0, r8
 800a190:	f000 fcc4 	bl	800ab1c <__sccl>
 800a194:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a19a:	9341      	str	r3, [sp, #260]	; 0x104
 800a19c:	4605      	mov	r5, r0
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e7cf      	b.n	800a142 <__ssvfiscanf_r+0x1da>
 800a1a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a1a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1a8:	9341      	str	r3, [sp, #260]	; 0x104
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e7c9      	b.n	800a142 <__ssvfiscanf_r+0x1da>
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	e7c7      	b.n	800a142 <__ssvfiscanf_r+0x1da>
 800a1b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a1b4:	06c3      	lsls	r3, r0, #27
 800a1b6:	f53f aefe 	bmi.w	8009fb6 <__ssvfiscanf_r+0x4e>
 800a1ba:	9b00      	ldr	r3, [sp, #0]
 800a1bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a1be:	1d19      	adds	r1, r3, #4
 800a1c0:	9100      	str	r1, [sp, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f010 0f01 	tst.w	r0, #1
 800a1c8:	bf14      	ite	ne
 800a1ca:	801a      	strhne	r2, [r3, #0]
 800a1cc:	601a      	streq	r2, [r3, #0]
 800a1ce:	e6f2      	b.n	8009fb6 <__ssvfiscanf_r+0x4e>
 800a1d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	4798      	blx	r3
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d0b6      	beq.n	800a14a <__ssvfiscanf_r+0x1e2>
 800a1dc:	e79c      	b.n	800a118 <__ssvfiscanf_r+0x1b0>
 800a1de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a1e0:	3201      	adds	r2, #1
 800a1e2:	9245      	str	r2, [sp, #276]	; 0x114
 800a1e4:	6862      	ldr	r2, [r4, #4]
 800a1e6:	3a01      	subs	r2, #1
 800a1e8:	2a00      	cmp	r2, #0
 800a1ea:	6062      	str	r2, [r4, #4]
 800a1ec:	dd02      	ble.n	800a1f4 <__ssvfiscanf_r+0x28c>
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	e7ad      	b.n	800a150 <__ssvfiscanf_r+0x1e8>
 800a1f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	4798      	blx	r3
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d0a7      	beq.n	800a150 <__ssvfiscanf_r+0x1e8>
 800a200:	e78a      	b.n	800a118 <__ssvfiscanf_r+0x1b0>
 800a202:	2b04      	cmp	r3, #4
 800a204:	dc0e      	bgt.n	800a224 <__ssvfiscanf_r+0x2bc>
 800a206:	466b      	mov	r3, sp
 800a208:	4622      	mov	r2, r4
 800a20a:	a941      	add	r1, sp, #260	; 0x104
 800a20c:	4630      	mov	r0, r6
 800a20e:	f000 fb6b 	bl	800a8e8 <_scanf_i>
 800a212:	e7ab      	b.n	800a16c <__ssvfiscanf_r+0x204>
 800a214:	08009eb5 	.word	0x08009eb5
 800a218:	08009f2f 	.word	0x08009f2f
 800a21c:	0800b98d 	.word	0x0800b98d
 800a220:	0800b944 	.word	0x0800b944
 800a224:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <__ssvfiscanf_r+0x2ec>)
 800a226:	2b00      	cmp	r3, #0
 800a228:	f43f aec5 	beq.w	8009fb6 <__ssvfiscanf_r+0x4e>
 800a22c:	466b      	mov	r3, sp
 800a22e:	4622      	mov	r2, r4
 800a230:	a941      	add	r1, sp, #260	; 0x104
 800a232:	4630      	mov	r0, r6
 800a234:	f3af 8000 	nop.w
 800a238:	e798      	b.n	800a16c <__ssvfiscanf_r+0x204>
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a240:	bf18      	it	ne
 800a242:	f04f 30ff 	movne.w	r0, #4294967295
 800a246:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a24e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a250:	e7f9      	b.n	800a246 <__ssvfiscanf_r+0x2de>
 800a252:	bf00      	nop
 800a254:	00000000 	.word	0x00000000

0800a258 <__sfputc_r>:
 800a258:	6893      	ldr	r3, [r2, #8]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	b410      	push	{r4}
 800a260:	6093      	str	r3, [r2, #8]
 800a262:	da08      	bge.n	800a276 <__sfputc_r+0x1e>
 800a264:	6994      	ldr	r4, [r2, #24]
 800a266:	42a3      	cmp	r3, r4
 800a268:	db01      	blt.n	800a26e <__sfputc_r+0x16>
 800a26a:	290a      	cmp	r1, #10
 800a26c:	d103      	bne.n	800a276 <__sfputc_r+0x1e>
 800a26e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a272:	f000 bdbd 	b.w	800adf0 <__swbuf_r>
 800a276:	6813      	ldr	r3, [r2, #0]
 800a278:	1c58      	adds	r0, r3, #1
 800a27a:	6010      	str	r0, [r2, #0]
 800a27c:	7019      	strb	r1, [r3, #0]
 800a27e:	4608      	mov	r0, r1
 800a280:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <__sfputs_r>:
 800a286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a288:	4606      	mov	r6, r0
 800a28a:	460f      	mov	r7, r1
 800a28c:	4614      	mov	r4, r2
 800a28e:	18d5      	adds	r5, r2, r3
 800a290:	42ac      	cmp	r4, r5
 800a292:	d101      	bne.n	800a298 <__sfputs_r+0x12>
 800a294:	2000      	movs	r0, #0
 800a296:	e007      	b.n	800a2a8 <__sfputs_r+0x22>
 800a298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29c:	463a      	mov	r2, r7
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f7ff ffda 	bl	800a258 <__sfputc_r>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d1f3      	bne.n	800a290 <__sfputs_r+0xa>
 800a2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2ac <_vfiprintf_r>:
 800a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	460d      	mov	r5, r1
 800a2b2:	b09d      	sub	sp, #116	; 0x74
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	4698      	mov	r8, r3
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	b118      	cbz	r0, 800a2c4 <_vfiprintf_r+0x18>
 800a2bc:	6983      	ldr	r3, [r0, #24]
 800a2be:	b90b      	cbnz	r3, 800a2c4 <_vfiprintf_r+0x18>
 800a2c0:	f000 ff78 	bl	800b1b4 <__sinit>
 800a2c4:	4b89      	ldr	r3, [pc, #548]	; (800a4ec <_vfiprintf_r+0x240>)
 800a2c6:	429d      	cmp	r5, r3
 800a2c8:	d11b      	bne.n	800a302 <_vfiprintf_r+0x56>
 800a2ca:	6875      	ldr	r5, [r6, #4]
 800a2cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2ce:	07d9      	lsls	r1, r3, #31
 800a2d0:	d405      	bmi.n	800a2de <_vfiprintf_r+0x32>
 800a2d2:	89ab      	ldrh	r3, [r5, #12]
 800a2d4:	059a      	lsls	r2, r3, #22
 800a2d6:	d402      	bmi.n	800a2de <_vfiprintf_r+0x32>
 800a2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2da:	f001 f809 	bl	800b2f0 <__retarget_lock_acquire_recursive>
 800a2de:	89ab      	ldrh	r3, [r5, #12]
 800a2e0:	071b      	lsls	r3, r3, #28
 800a2e2:	d501      	bpl.n	800a2e8 <_vfiprintf_r+0x3c>
 800a2e4:	692b      	ldr	r3, [r5, #16]
 800a2e6:	b9eb      	cbnz	r3, 800a324 <_vfiprintf_r+0x78>
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	f000 fdd2 	bl	800ae94 <__swsetup_r>
 800a2f0:	b1c0      	cbz	r0, 800a324 <_vfiprintf_r+0x78>
 800a2f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2f4:	07dc      	lsls	r4, r3, #31
 800a2f6:	d50e      	bpl.n	800a316 <_vfiprintf_r+0x6a>
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	b01d      	add	sp, #116	; 0x74
 800a2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a302:	4b7b      	ldr	r3, [pc, #492]	; (800a4f0 <_vfiprintf_r+0x244>)
 800a304:	429d      	cmp	r5, r3
 800a306:	d101      	bne.n	800a30c <_vfiprintf_r+0x60>
 800a308:	68b5      	ldr	r5, [r6, #8]
 800a30a:	e7df      	b.n	800a2cc <_vfiprintf_r+0x20>
 800a30c:	4b79      	ldr	r3, [pc, #484]	; (800a4f4 <_vfiprintf_r+0x248>)
 800a30e:	429d      	cmp	r5, r3
 800a310:	bf08      	it	eq
 800a312:	68f5      	ldreq	r5, [r6, #12]
 800a314:	e7da      	b.n	800a2cc <_vfiprintf_r+0x20>
 800a316:	89ab      	ldrh	r3, [r5, #12]
 800a318:	0598      	lsls	r0, r3, #22
 800a31a:	d4ed      	bmi.n	800a2f8 <_vfiprintf_r+0x4c>
 800a31c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a31e:	f000 ffe8 	bl	800b2f2 <__retarget_lock_release_recursive>
 800a322:	e7e9      	b.n	800a2f8 <_vfiprintf_r+0x4c>
 800a324:	2300      	movs	r3, #0
 800a326:	9309      	str	r3, [sp, #36]	; 0x24
 800a328:	2320      	movs	r3, #32
 800a32a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a32e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a332:	2330      	movs	r3, #48	; 0x30
 800a334:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4f8 <_vfiprintf_r+0x24c>
 800a338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a33c:	f04f 0901 	mov.w	r9, #1
 800a340:	4623      	mov	r3, r4
 800a342:	469a      	mov	sl, r3
 800a344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a348:	b10a      	cbz	r2, 800a34e <_vfiprintf_r+0xa2>
 800a34a:	2a25      	cmp	r2, #37	; 0x25
 800a34c:	d1f9      	bne.n	800a342 <_vfiprintf_r+0x96>
 800a34e:	ebba 0b04 	subs.w	fp, sl, r4
 800a352:	d00b      	beq.n	800a36c <_vfiprintf_r+0xc0>
 800a354:	465b      	mov	r3, fp
 800a356:	4622      	mov	r2, r4
 800a358:	4629      	mov	r1, r5
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7ff ff93 	bl	800a286 <__sfputs_r>
 800a360:	3001      	adds	r0, #1
 800a362:	f000 80aa 	beq.w	800a4ba <_vfiprintf_r+0x20e>
 800a366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a368:	445a      	add	r2, fp
 800a36a:	9209      	str	r2, [sp, #36]	; 0x24
 800a36c:	f89a 3000 	ldrb.w	r3, [sl]
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 80a2 	beq.w	800a4ba <_vfiprintf_r+0x20e>
 800a376:	2300      	movs	r3, #0
 800a378:	f04f 32ff 	mov.w	r2, #4294967295
 800a37c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a380:	f10a 0a01 	add.w	sl, sl, #1
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	9307      	str	r3, [sp, #28]
 800a388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a38c:	931a      	str	r3, [sp, #104]	; 0x68
 800a38e:	4654      	mov	r4, sl
 800a390:	2205      	movs	r2, #5
 800a392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a396:	4858      	ldr	r0, [pc, #352]	; (800a4f8 <_vfiprintf_r+0x24c>)
 800a398:	f7f5 ff22 	bl	80001e0 <memchr>
 800a39c:	9a04      	ldr	r2, [sp, #16]
 800a39e:	b9d8      	cbnz	r0, 800a3d8 <_vfiprintf_r+0x12c>
 800a3a0:	06d1      	lsls	r1, r2, #27
 800a3a2:	bf44      	itt	mi
 800a3a4:	2320      	movmi	r3, #32
 800a3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3aa:	0713      	lsls	r3, r2, #28
 800a3ac:	bf44      	itt	mi
 800a3ae:	232b      	movmi	r3, #43	; 0x2b
 800a3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ba:	d015      	beq.n	800a3e8 <_vfiprintf_r+0x13c>
 800a3bc:	9a07      	ldr	r2, [sp, #28]
 800a3be:	4654      	mov	r4, sl
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	f04f 0c0a 	mov.w	ip, #10
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3cc:	3b30      	subs	r3, #48	; 0x30
 800a3ce:	2b09      	cmp	r3, #9
 800a3d0:	d94e      	bls.n	800a470 <_vfiprintf_r+0x1c4>
 800a3d2:	b1b0      	cbz	r0, 800a402 <_vfiprintf_r+0x156>
 800a3d4:	9207      	str	r2, [sp, #28]
 800a3d6:	e014      	b.n	800a402 <_vfiprintf_r+0x156>
 800a3d8:	eba0 0308 	sub.w	r3, r0, r8
 800a3dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	9304      	str	r3, [sp, #16]
 800a3e4:	46a2      	mov	sl, r4
 800a3e6:	e7d2      	b.n	800a38e <_vfiprintf_r+0xe2>
 800a3e8:	9b03      	ldr	r3, [sp, #12]
 800a3ea:	1d19      	adds	r1, r3, #4
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	9103      	str	r1, [sp, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bfbb      	ittet	lt
 800a3f4:	425b      	neglt	r3, r3
 800a3f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a3fa:	9307      	strge	r3, [sp, #28]
 800a3fc:	9307      	strlt	r3, [sp, #28]
 800a3fe:	bfb8      	it	lt
 800a400:	9204      	strlt	r2, [sp, #16]
 800a402:	7823      	ldrb	r3, [r4, #0]
 800a404:	2b2e      	cmp	r3, #46	; 0x2e
 800a406:	d10c      	bne.n	800a422 <_vfiprintf_r+0x176>
 800a408:	7863      	ldrb	r3, [r4, #1]
 800a40a:	2b2a      	cmp	r3, #42	; 0x2a
 800a40c:	d135      	bne.n	800a47a <_vfiprintf_r+0x1ce>
 800a40e:	9b03      	ldr	r3, [sp, #12]
 800a410:	1d1a      	adds	r2, r3, #4
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	9203      	str	r2, [sp, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	bfb8      	it	lt
 800a41a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a41e:	3402      	adds	r4, #2
 800a420:	9305      	str	r3, [sp, #20]
 800a422:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a508 <_vfiprintf_r+0x25c>
 800a426:	7821      	ldrb	r1, [r4, #0]
 800a428:	2203      	movs	r2, #3
 800a42a:	4650      	mov	r0, sl
 800a42c:	f7f5 fed8 	bl	80001e0 <memchr>
 800a430:	b140      	cbz	r0, 800a444 <_vfiprintf_r+0x198>
 800a432:	2340      	movs	r3, #64	; 0x40
 800a434:	eba0 000a 	sub.w	r0, r0, sl
 800a438:	fa03 f000 	lsl.w	r0, r3, r0
 800a43c:	9b04      	ldr	r3, [sp, #16]
 800a43e:	4303      	orrs	r3, r0
 800a440:	3401      	adds	r4, #1
 800a442:	9304      	str	r3, [sp, #16]
 800a444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a448:	482c      	ldr	r0, [pc, #176]	; (800a4fc <_vfiprintf_r+0x250>)
 800a44a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a44e:	2206      	movs	r2, #6
 800a450:	f7f5 fec6 	bl	80001e0 <memchr>
 800a454:	2800      	cmp	r0, #0
 800a456:	d03f      	beq.n	800a4d8 <_vfiprintf_r+0x22c>
 800a458:	4b29      	ldr	r3, [pc, #164]	; (800a500 <_vfiprintf_r+0x254>)
 800a45a:	bb1b      	cbnz	r3, 800a4a4 <_vfiprintf_r+0x1f8>
 800a45c:	9b03      	ldr	r3, [sp, #12]
 800a45e:	3307      	adds	r3, #7
 800a460:	f023 0307 	bic.w	r3, r3, #7
 800a464:	3308      	adds	r3, #8
 800a466:	9303      	str	r3, [sp, #12]
 800a468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46a:	443b      	add	r3, r7
 800a46c:	9309      	str	r3, [sp, #36]	; 0x24
 800a46e:	e767      	b.n	800a340 <_vfiprintf_r+0x94>
 800a470:	fb0c 3202 	mla	r2, ip, r2, r3
 800a474:	460c      	mov	r4, r1
 800a476:	2001      	movs	r0, #1
 800a478:	e7a5      	b.n	800a3c6 <_vfiprintf_r+0x11a>
 800a47a:	2300      	movs	r3, #0
 800a47c:	3401      	adds	r4, #1
 800a47e:	9305      	str	r3, [sp, #20]
 800a480:	4619      	mov	r1, r3
 800a482:	f04f 0c0a 	mov.w	ip, #10
 800a486:	4620      	mov	r0, r4
 800a488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a48c:	3a30      	subs	r2, #48	; 0x30
 800a48e:	2a09      	cmp	r2, #9
 800a490:	d903      	bls.n	800a49a <_vfiprintf_r+0x1ee>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0c5      	beq.n	800a422 <_vfiprintf_r+0x176>
 800a496:	9105      	str	r1, [sp, #20]
 800a498:	e7c3      	b.n	800a422 <_vfiprintf_r+0x176>
 800a49a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a49e:	4604      	mov	r4, r0
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e7f0      	b.n	800a486 <_vfiprintf_r+0x1da>
 800a4a4:	ab03      	add	r3, sp, #12
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	462a      	mov	r2, r5
 800a4aa:	4b16      	ldr	r3, [pc, #88]	; (800a504 <_vfiprintf_r+0x258>)
 800a4ac:	a904      	add	r1, sp, #16
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f3af 8000 	nop.w
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	1c78      	adds	r0, r7, #1
 800a4b8:	d1d6      	bne.n	800a468 <_vfiprintf_r+0x1bc>
 800a4ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4bc:	07d9      	lsls	r1, r3, #31
 800a4be:	d405      	bmi.n	800a4cc <_vfiprintf_r+0x220>
 800a4c0:	89ab      	ldrh	r3, [r5, #12]
 800a4c2:	059a      	lsls	r2, r3, #22
 800a4c4:	d402      	bmi.n	800a4cc <_vfiprintf_r+0x220>
 800a4c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4c8:	f000 ff13 	bl	800b2f2 <__retarget_lock_release_recursive>
 800a4cc:	89ab      	ldrh	r3, [r5, #12]
 800a4ce:	065b      	lsls	r3, r3, #25
 800a4d0:	f53f af12 	bmi.w	800a2f8 <_vfiprintf_r+0x4c>
 800a4d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4d6:	e711      	b.n	800a2fc <_vfiprintf_r+0x50>
 800a4d8:	ab03      	add	r3, sp, #12
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	462a      	mov	r2, r5
 800a4de:	4b09      	ldr	r3, [pc, #36]	; (800a504 <_vfiprintf_r+0x258>)
 800a4e0:	a904      	add	r1, sp, #16
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f000 f880 	bl	800a5e8 <_printf_i>
 800a4e8:	e7e4      	b.n	800a4b4 <_vfiprintf_r+0x208>
 800a4ea:	bf00      	nop
 800a4ec:	0800bab0 	.word	0x0800bab0
 800a4f0:	0800bad0 	.word	0x0800bad0
 800a4f4:	0800ba90 	.word	0x0800ba90
 800a4f8:	0800b93e 	.word	0x0800b93e
 800a4fc:	0800b948 	.word	0x0800b948
 800a500:	00000000 	.word	0x00000000
 800a504:	0800a287 	.word	0x0800a287
 800a508:	0800b944 	.word	0x0800b944

0800a50c <_printf_common>:
 800a50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a510:	4616      	mov	r6, r2
 800a512:	4699      	mov	r9, r3
 800a514:	688a      	ldr	r2, [r1, #8]
 800a516:	690b      	ldr	r3, [r1, #16]
 800a518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a51c:	4293      	cmp	r3, r2
 800a51e:	bfb8      	it	lt
 800a520:	4613      	movlt	r3, r2
 800a522:	6033      	str	r3, [r6, #0]
 800a524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a528:	4607      	mov	r7, r0
 800a52a:	460c      	mov	r4, r1
 800a52c:	b10a      	cbz	r2, 800a532 <_printf_common+0x26>
 800a52e:	3301      	adds	r3, #1
 800a530:	6033      	str	r3, [r6, #0]
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	0699      	lsls	r1, r3, #26
 800a536:	bf42      	ittt	mi
 800a538:	6833      	ldrmi	r3, [r6, #0]
 800a53a:	3302      	addmi	r3, #2
 800a53c:	6033      	strmi	r3, [r6, #0]
 800a53e:	6825      	ldr	r5, [r4, #0]
 800a540:	f015 0506 	ands.w	r5, r5, #6
 800a544:	d106      	bne.n	800a554 <_printf_common+0x48>
 800a546:	f104 0a19 	add.w	sl, r4, #25
 800a54a:	68e3      	ldr	r3, [r4, #12]
 800a54c:	6832      	ldr	r2, [r6, #0]
 800a54e:	1a9b      	subs	r3, r3, r2
 800a550:	42ab      	cmp	r3, r5
 800a552:	dc26      	bgt.n	800a5a2 <_printf_common+0x96>
 800a554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a558:	1e13      	subs	r3, r2, #0
 800a55a:	6822      	ldr	r2, [r4, #0]
 800a55c:	bf18      	it	ne
 800a55e:	2301      	movne	r3, #1
 800a560:	0692      	lsls	r2, r2, #26
 800a562:	d42b      	bmi.n	800a5bc <_printf_common+0xb0>
 800a564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a568:	4649      	mov	r1, r9
 800a56a:	4638      	mov	r0, r7
 800a56c:	47c0      	blx	r8
 800a56e:	3001      	adds	r0, #1
 800a570:	d01e      	beq.n	800a5b0 <_printf_common+0xa4>
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	68e5      	ldr	r5, [r4, #12]
 800a576:	6832      	ldr	r2, [r6, #0]
 800a578:	f003 0306 	and.w	r3, r3, #6
 800a57c:	2b04      	cmp	r3, #4
 800a57e:	bf08      	it	eq
 800a580:	1aad      	subeq	r5, r5, r2
 800a582:	68a3      	ldr	r3, [r4, #8]
 800a584:	6922      	ldr	r2, [r4, #16]
 800a586:	bf0c      	ite	eq
 800a588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a58c:	2500      	movne	r5, #0
 800a58e:	4293      	cmp	r3, r2
 800a590:	bfc4      	itt	gt
 800a592:	1a9b      	subgt	r3, r3, r2
 800a594:	18ed      	addgt	r5, r5, r3
 800a596:	2600      	movs	r6, #0
 800a598:	341a      	adds	r4, #26
 800a59a:	42b5      	cmp	r5, r6
 800a59c:	d11a      	bne.n	800a5d4 <_printf_common+0xc8>
 800a59e:	2000      	movs	r0, #0
 800a5a0:	e008      	b.n	800a5b4 <_printf_common+0xa8>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	4652      	mov	r2, sl
 800a5a6:	4649      	mov	r1, r9
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	47c0      	blx	r8
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	d103      	bne.n	800a5b8 <_printf_common+0xac>
 800a5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b8:	3501      	adds	r5, #1
 800a5ba:	e7c6      	b.n	800a54a <_printf_common+0x3e>
 800a5bc:	18e1      	adds	r1, r4, r3
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	2030      	movs	r0, #48	; 0x30
 800a5c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5c6:	4422      	add	r2, r4
 800a5c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5d0:	3302      	adds	r3, #2
 800a5d2:	e7c7      	b.n	800a564 <_printf_common+0x58>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	4649      	mov	r1, r9
 800a5da:	4638      	mov	r0, r7
 800a5dc:	47c0      	blx	r8
 800a5de:	3001      	adds	r0, #1
 800a5e0:	d0e6      	beq.n	800a5b0 <_printf_common+0xa4>
 800a5e2:	3601      	adds	r6, #1
 800a5e4:	e7d9      	b.n	800a59a <_printf_common+0x8e>
	...

0800a5e8 <_printf_i>:
 800a5e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ec:	7e0f      	ldrb	r7, [r1, #24]
 800a5ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5f0:	2f78      	cmp	r7, #120	; 0x78
 800a5f2:	4691      	mov	r9, r2
 800a5f4:	4680      	mov	r8, r0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	469a      	mov	sl, r3
 800a5fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5fe:	d807      	bhi.n	800a610 <_printf_i+0x28>
 800a600:	2f62      	cmp	r7, #98	; 0x62
 800a602:	d80a      	bhi.n	800a61a <_printf_i+0x32>
 800a604:	2f00      	cmp	r7, #0
 800a606:	f000 80d8 	beq.w	800a7ba <_printf_i+0x1d2>
 800a60a:	2f58      	cmp	r7, #88	; 0x58
 800a60c:	f000 80a3 	beq.w	800a756 <_printf_i+0x16e>
 800a610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a618:	e03a      	b.n	800a690 <_printf_i+0xa8>
 800a61a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a61e:	2b15      	cmp	r3, #21
 800a620:	d8f6      	bhi.n	800a610 <_printf_i+0x28>
 800a622:	a101      	add	r1, pc, #4	; (adr r1, 800a628 <_printf_i+0x40>)
 800a624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a628:	0800a681 	.word	0x0800a681
 800a62c:	0800a695 	.word	0x0800a695
 800a630:	0800a611 	.word	0x0800a611
 800a634:	0800a611 	.word	0x0800a611
 800a638:	0800a611 	.word	0x0800a611
 800a63c:	0800a611 	.word	0x0800a611
 800a640:	0800a695 	.word	0x0800a695
 800a644:	0800a611 	.word	0x0800a611
 800a648:	0800a611 	.word	0x0800a611
 800a64c:	0800a611 	.word	0x0800a611
 800a650:	0800a611 	.word	0x0800a611
 800a654:	0800a7a1 	.word	0x0800a7a1
 800a658:	0800a6c5 	.word	0x0800a6c5
 800a65c:	0800a783 	.word	0x0800a783
 800a660:	0800a611 	.word	0x0800a611
 800a664:	0800a611 	.word	0x0800a611
 800a668:	0800a7c3 	.word	0x0800a7c3
 800a66c:	0800a611 	.word	0x0800a611
 800a670:	0800a6c5 	.word	0x0800a6c5
 800a674:	0800a611 	.word	0x0800a611
 800a678:	0800a611 	.word	0x0800a611
 800a67c:	0800a78b 	.word	0x0800a78b
 800a680:	682b      	ldr	r3, [r5, #0]
 800a682:	1d1a      	adds	r2, r3, #4
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	602a      	str	r2, [r5, #0]
 800a688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a68c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a690:	2301      	movs	r3, #1
 800a692:	e0a3      	b.n	800a7dc <_printf_i+0x1f4>
 800a694:	6820      	ldr	r0, [r4, #0]
 800a696:	6829      	ldr	r1, [r5, #0]
 800a698:	0606      	lsls	r6, r0, #24
 800a69a:	f101 0304 	add.w	r3, r1, #4
 800a69e:	d50a      	bpl.n	800a6b6 <_printf_i+0xce>
 800a6a0:	680e      	ldr	r6, [r1, #0]
 800a6a2:	602b      	str	r3, [r5, #0]
 800a6a4:	2e00      	cmp	r6, #0
 800a6a6:	da03      	bge.n	800a6b0 <_printf_i+0xc8>
 800a6a8:	232d      	movs	r3, #45	; 0x2d
 800a6aa:	4276      	negs	r6, r6
 800a6ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6b0:	485e      	ldr	r0, [pc, #376]	; (800a82c <_printf_i+0x244>)
 800a6b2:	230a      	movs	r3, #10
 800a6b4:	e019      	b.n	800a6ea <_printf_i+0x102>
 800a6b6:	680e      	ldr	r6, [r1, #0]
 800a6b8:	602b      	str	r3, [r5, #0]
 800a6ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6be:	bf18      	it	ne
 800a6c0:	b236      	sxthne	r6, r6
 800a6c2:	e7ef      	b.n	800a6a4 <_printf_i+0xbc>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	6820      	ldr	r0, [r4, #0]
 800a6c8:	1d19      	adds	r1, r3, #4
 800a6ca:	6029      	str	r1, [r5, #0]
 800a6cc:	0601      	lsls	r1, r0, #24
 800a6ce:	d501      	bpl.n	800a6d4 <_printf_i+0xec>
 800a6d0:	681e      	ldr	r6, [r3, #0]
 800a6d2:	e002      	b.n	800a6da <_printf_i+0xf2>
 800a6d4:	0646      	lsls	r6, r0, #25
 800a6d6:	d5fb      	bpl.n	800a6d0 <_printf_i+0xe8>
 800a6d8:	881e      	ldrh	r6, [r3, #0]
 800a6da:	4854      	ldr	r0, [pc, #336]	; (800a82c <_printf_i+0x244>)
 800a6dc:	2f6f      	cmp	r7, #111	; 0x6f
 800a6de:	bf0c      	ite	eq
 800a6e0:	2308      	moveq	r3, #8
 800a6e2:	230a      	movne	r3, #10
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6ea:	6865      	ldr	r5, [r4, #4]
 800a6ec:	60a5      	str	r5, [r4, #8]
 800a6ee:	2d00      	cmp	r5, #0
 800a6f0:	bfa2      	ittt	ge
 800a6f2:	6821      	ldrge	r1, [r4, #0]
 800a6f4:	f021 0104 	bicge.w	r1, r1, #4
 800a6f8:	6021      	strge	r1, [r4, #0]
 800a6fa:	b90e      	cbnz	r6, 800a700 <_printf_i+0x118>
 800a6fc:	2d00      	cmp	r5, #0
 800a6fe:	d04d      	beq.n	800a79c <_printf_i+0x1b4>
 800a700:	4615      	mov	r5, r2
 800a702:	fbb6 f1f3 	udiv	r1, r6, r3
 800a706:	fb03 6711 	mls	r7, r3, r1, r6
 800a70a:	5dc7      	ldrb	r7, [r0, r7]
 800a70c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a710:	4637      	mov	r7, r6
 800a712:	42bb      	cmp	r3, r7
 800a714:	460e      	mov	r6, r1
 800a716:	d9f4      	bls.n	800a702 <_printf_i+0x11a>
 800a718:	2b08      	cmp	r3, #8
 800a71a:	d10b      	bne.n	800a734 <_printf_i+0x14c>
 800a71c:	6823      	ldr	r3, [r4, #0]
 800a71e:	07de      	lsls	r6, r3, #31
 800a720:	d508      	bpl.n	800a734 <_printf_i+0x14c>
 800a722:	6923      	ldr	r3, [r4, #16]
 800a724:	6861      	ldr	r1, [r4, #4]
 800a726:	4299      	cmp	r1, r3
 800a728:	bfde      	ittt	le
 800a72a:	2330      	movle	r3, #48	; 0x30
 800a72c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a730:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a734:	1b52      	subs	r2, r2, r5
 800a736:	6122      	str	r2, [r4, #16]
 800a738:	f8cd a000 	str.w	sl, [sp]
 800a73c:	464b      	mov	r3, r9
 800a73e:	aa03      	add	r2, sp, #12
 800a740:	4621      	mov	r1, r4
 800a742:	4640      	mov	r0, r8
 800a744:	f7ff fee2 	bl	800a50c <_printf_common>
 800a748:	3001      	adds	r0, #1
 800a74a:	d14c      	bne.n	800a7e6 <_printf_i+0x1fe>
 800a74c:	f04f 30ff 	mov.w	r0, #4294967295
 800a750:	b004      	add	sp, #16
 800a752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a756:	4835      	ldr	r0, [pc, #212]	; (800a82c <_printf_i+0x244>)
 800a758:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a75c:	6829      	ldr	r1, [r5, #0]
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	f851 6b04 	ldr.w	r6, [r1], #4
 800a764:	6029      	str	r1, [r5, #0]
 800a766:	061d      	lsls	r5, r3, #24
 800a768:	d514      	bpl.n	800a794 <_printf_i+0x1ac>
 800a76a:	07df      	lsls	r7, r3, #31
 800a76c:	bf44      	itt	mi
 800a76e:	f043 0320 	orrmi.w	r3, r3, #32
 800a772:	6023      	strmi	r3, [r4, #0]
 800a774:	b91e      	cbnz	r6, 800a77e <_printf_i+0x196>
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	f023 0320 	bic.w	r3, r3, #32
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	2310      	movs	r3, #16
 800a780:	e7b0      	b.n	800a6e4 <_printf_i+0xfc>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	f043 0320 	orr.w	r3, r3, #32
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	2378      	movs	r3, #120	; 0x78
 800a78c:	4828      	ldr	r0, [pc, #160]	; (800a830 <_printf_i+0x248>)
 800a78e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a792:	e7e3      	b.n	800a75c <_printf_i+0x174>
 800a794:	0659      	lsls	r1, r3, #25
 800a796:	bf48      	it	mi
 800a798:	b2b6      	uxthmi	r6, r6
 800a79a:	e7e6      	b.n	800a76a <_printf_i+0x182>
 800a79c:	4615      	mov	r5, r2
 800a79e:	e7bb      	b.n	800a718 <_printf_i+0x130>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	6826      	ldr	r6, [r4, #0]
 800a7a4:	6961      	ldr	r1, [r4, #20]
 800a7a6:	1d18      	adds	r0, r3, #4
 800a7a8:	6028      	str	r0, [r5, #0]
 800a7aa:	0635      	lsls	r5, r6, #24
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	d501      	bpl.n	800a7b4 <_printf_i+0x1cc>
 800a7b0:	6019      	str	r1, [r3, #0]
 800a7b2:	e002      	b.n	800a7ba <_printf_i+0x1d2>
 800a7b4:	0670      	lsls	r0, r6, #25
 800a7b6:	d5fb      	bpl.n	800a7b0 <_printf_i+0x1c8>
 800a7b8:	8019      	strh	r1, [r3, #0]
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	6123      	str	r3, [r4, #16]
 800a7be:	4615      	mov	r5, r2
 800a7c0:	e7ba      	b.n	800a738 <_printf_i+0x150>
 800a7c2:	682b      	ldr	r3, [r5, #0]
 800a7c4:	1d1a      	adds	r2, r3, #4
 800a7c6:	602a      	str	r2, [r5, #0]
 800a7c8:	681d      	ldr	r5, [r3, #0]
 800a7ca:	6862      	ldr	r2, [r4, #4]
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	f7f5 fd06 	bl	80001e0 <memchr>
 800a7d4:	b108      	cbz	r0, 800a7da <_printf_i+0x1f2>
 800a7d6:	1b40      	subs	r0, r0, r5
 800a7d8:	6060      	str	r0, [r4, #4]
 800a7da:	6863      	ldr	r3, [r4, #4]
 800a7dc:	6123      	str	r3, [r4, #16]
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7e4:	e7a8      	b.n	800a738 <_printf_i+0x150>
 800a7e6:	6923      	ldr	r3, [r4, #16]
 800a7e8:	462a      	mov	r2, r5
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	4640      	mov	r0, r8
 800a7ee:	47d0      	blx	sl
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	d0ab      	beq.n	800a74c <_printf_i+0x164>
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	079b      	lsls	r3, r3, #30
 800a7f8:	d413      	bmi.n	800a822 <_printf_i+0x23a>
 800a7fa:	68e0      	ldr	r0, [r4, #12]
 800a7fc:	9b03      	ldr	r3, [sp, #12]
 800a7fe:	4298      	cmp	r0, r3
 800a800:	bfb8      	it	lt
 800a802:	4618      	movlt	r0, r3
 800a804:	e7a4      	b.n	800a750 <_printf_i+0x168>
 800a806:	2301      	movs	r3, #1
 800a808:	4632      	mov	r2, r6
 800a80a:	4649      	mov	r1, r9
 800a80c:	4640      	mov	r0, r8
 800a80e:	47d0      	blx	sl
 800a810:	3001      	adds	r0, #1
 800a812:	d09b      	beq.n	800a74c <_printf_i+0x164>
 800a814:	3501      	adds	r5, #1
 800a816:	68e3      	ldr	r3, [r4, #12]
 800a818:	9903      	ldr	r1, [sp, #12]
 800a81a:	1a5b      	subs	r3, r3, r1
 800a81c:	42ab      	cmp	r3, r5
 800a81e:	dcf2      	bgt.n	800a806 <_printf_i+0x21e>
 800a820:	e7eb      	b.n	800a7fa <_printf_i+0x212>
 800a822:	2500      	movs	r5, #0
 800a824:	f104 0619 	add.w	r6, r4, #25
 800a828:	e7f5      	b.n	800a816 <_printf_i+0x22e>
 800a82a:	bf00      	nop
 800a82c:	0800b94f 	.word	0x0800b94f
 800a830:	0800b960 	.word	0x0800b960

0800a834 <_scanf_chars>:
 800a834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a838:	4615      	mov	r5, r2
 800a83a:	688a      	ldr	r2, [r1, #8]
 800a83c:	4680      	mov	r8, r0
 800a83e:	460c      	mov	r4, r1
 800a840:	b932      	cbnz	r2, 800a850 <_scanf_chars+0x1c>
 800a842:	698a      	ldr	r2, [r1, #24]
 800a844:	2a00      	cmp	r2, #0
 800a846:	bf0c      	ite	eq
 800a848:	2201      	moveq	r2, #1
 800a84a:	f04f 32ff 	movne.w	r2, #4294967295
 800a84e:	608a      	str	r2, [r1, #8]
 800a850:	6822      	ldr	r2, [r4, #0]
 800a852:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a8e4 <_scanf_chars+0xb0>
 800a856:	06d1      	lsls	r1, r2, #27
 800a858:	bf5f      	itttt	pl
 800a85a:	681a      	ldrpl	r2, [r3, #0]
 800a85c:	1d11      	addpl	r1, r2, #4
 800a85e:	6019      	strpl	r1, [r3, #0]
 800a860:	6816      	ldrpl	r6, [r2, #0]
 800a862:	2700      	movs	r7, #0
 800a864:	69a0      	ldr	r0, [r4, #24]
 800a866:	b188      	cbz	r0, 800a88c <_scanf_chars+0x58>
 800a868:	2801      	cmp	r0, #1
 800a86a:	d107      	bne.n	800a87c <_scanf_chars+0x48>
 800a86c:	682a      	ldr	r2, [r5, #0]
 800a86e:	7811      	ldrb	r1, [r2, #0]
 800a870:	6962      	ldr	r2, [r4, #20]
 800a872:	5c52      	ldrb	r2, [r2, r1]
 800a874:	b952      	cbnz	r2, 800a88c <_scanf_chars+0x58>
 800a876:	2f00      	cmp	r7, #0
 800a878:	d031      	beq.n	800a8de <_scanf_chars+0xaa>
 800a87a:	e022      	b.n	800a8c2 <_scanf_chars+0x8e>
 800a87c:	2802      	cmp	r0, #2
 800a87e:	d120      	bne.n	800a8c2 <_scanf_chars+0x8e>
 800a880:	682b      	ldr	r3, [r5, #0]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a888:	071b      	lsls	r3, r3, #28
 800a88a:	d41a      	bmi.n	800a8c2 <_scanf_chars+0x8e>
 800a88c:	6823      	ldr	r3, [r4, #0]
 800a88e:	06da      	lsls	r2, r3, #27
 800a890:	bf5e      	ittt	pl
 800a892:	682b      	ldrpl	r3, [r5, #0]
 800a894:	781b      	ldrbpl	r3, [r3, #0]
 800a896:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a89a:	682a      	ldr	r2, [r5, #0]
 800a89c:	686b      	ldr	r3, [r5, #4]
 800a89e:	3201      	adds	r2, #1
 800a8a0:	602a      	str	r2, [r5, #0]
 800a8a2:	68a2      	ldr	r2, [r4, #8]
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	3a01      	subs	r2, #1
 800a8a8:	606b      	str	r3, [r5, #4]
 800a8aa:	3701      	adds	r7, #1
 800a8ac:	60a2      	str	r2, [r4, #8]
 800a8ae:	b142      	cbz	r2, 800a8c2 <_scanf_chars+0x8e>
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dcd7      	bgt.n	800a864 <_scanf_chars+0x30>
 800a8b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	4798      	blx	r3
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d0d0      	beq.n	800a864 <_scanf_chars+0x30>
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	f013 0310 	ands.w	r3, r3, #16
 800a8c8:	d105      	bne.n	800a8d6 <_scanf_chars+0xa2>
 800a8ca:	68e2      	ldr	r2, [r4, #12]
 800a8cc:	3201      	adds	r2, #1
 800a8ce:	60e2      	str	r2, [r4, #12]
 800a8d0:	69a2      	ldr	r2, [r4, #24]
 800a8d2:	b102      	cbz	r2, 800a8d6 <_scanf_chars+0xa2>
 800a8d4:	7033      	strb	r3, [r6, #0]
 800a8d6:	6923      	ldr	r3, [r4, #16]
 800a8d8:	443b      	add	r3, r7
 800a8da:	6123      	str	r3, [r4, #16]
 800a8dc:	2000      	movs	r0, #0
 800a8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8e2:	bf00      	nop
 800a8e4:	0800b98d 	.word	0x0800b98d

0800a8e8 <_scanf_i>:
 800a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	4698      	mov	r8, r3
 800a8ee:	4b76      	ldr	r3, [pc, #472]	; (800aac8 <_scanf_i+0x1e0>)
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	4682      	mov	sl, r0
 800a8f4:	4616      	mov	r6, r2
 800a8f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8fa:	b087      	sub	sp, #28
 800a8fc:	ab03      	add	r3, sp, #12
 800a8fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a902:	4b72      	ldr	r3, [pc, #456]	; (800aacc <_scanf_i+0x1e4>)
 800a904:	69a1      	ldr	r1, [r4, #24]
 800a906:	4a72      	ldr	r2, [pc, #456]	; (800aad0 <_scanf_i+0x1e8>)
 800a908:	2903      	cmp	r1, #3
 800a90a:	bf18      	it	ne
 800a90c:	461a      	movne	r2, r3
 800a90e:	68a3      	ldr	r3, [r4, #8]
 800a910:	9201      	str	r2, [sp, #4]
 800a912:	1e5a      	subs	r2, r3, #1
 800a914:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a918:	bf88      	it	hi
 800a91a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a91e:	4627      	mov	r7, r4
 800a920:	bf82      	ittt	hi
 800a922:	eb03 0905 	addhi.w	r9, r3, r5
 800a926:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a92a:	60a3      	strhi	r3, [r4, #8]
 800a92c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a930:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a934:	bf98      	it	ls
 800a936:	f04f 0900 	movls.w	r9, #0
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	463d      	mov	r5, r7
 800a93e:	f04f 0b00 	mov.w	fp, #0
 800a942:	6831      	ldr	r1, [r6, #0]
 800a944:	ab03      	add	r3, sp, #12
 800a946:	7809      	ldrb	r1, [r1, #0]
 800a948:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a94c:	2202      	movs	r2, #2
 800a94e:	f7f5 fc47 	bl	80001e0 <memchr>
 800a952:	b328      	cbz	r0, 800a9a0 <_scanf_i+0xb8>
 800a954:	f1bb 0f01 	cmp.w	fp, #1
 800a958:	d159      	bne.n	800aa0e <_scanf_i+0x126>
 800a95a:	6862      	ldr	r2, [r4, #4]
 800a95c:	b92a      	cbnz	r2, 800a96a <_scanf_i+0x82>
 800a95e:	6822      	ldr	r2, [r4, #0]
 800a960:	2308      	movs	r3, #8
 800a962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a966:	6063      	str	r3, [r4, #4]
 800a968:	6022      	str	r2, [r4, #0]
 800a96a:	6822      	ldr	r2, [r4, #0]
 800a96c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a970:	6022      	str	r2, [r4, #0]
 800a972:	68a2      	ldr	r2, [r4, #8]
 800a974:	1e51      	subs	r1, r2, #1
 800a976:	60a1      	str	r1, [r4, #8]
 800a978:	b192      	cbz	r2, 800a9a0 <_scanf_i+0xb8>
 800a97a:	6832      	ldr	r2, [r6, #0]
 800a97c:	1c51      	adds	r1, r2, #1
 800a97e:	6031      	str	r1, [r6, #0]
 800a980:	7812      	ldrb	r2, [r2, #0]
 800a982:	f805 2b01 	strb.w	r2, [r5], #1
 800a986:	6872      	ldr	r2, [r6, #4]
 800a988:	3a01      	subs	r2, #1
 800a98a:	2a00      	cmp	r2, #0
 800a98c:	6072      	str	r2, [r6, #4]
 800a98e:	dc07      	bgt.n	800a9a0 <_scanf_i+0xb8>
 800a990:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a994:	4631      	mov	r1, r6
 800a996:	4650      	mov	r0, sl
 800a998:	4790      	blx	r2
 800a99a:	2800      	cmp	r0, #0
 800a99c:	f040 8085 	bne.w	800aaaa <_scanf_i+0x1c2>
 800a9a0:	f10b 0b01 	add.w	fp, fp, #1
 800a9a4:	f1bb 0f03 	cmp.w	fp, #3
 800a9a8:	d1cb      	bne.n	800a942 <_scanf_i+0x5a>
 800a9aa:	6863      	ldr	r3, [r4, #4]
 800a9ac:	b90b      	cbnz	r3, 800a9b2 <_scanf_i+0xca>
 800a9ae:	230a      	movs	r3, #10
 800a9b0:	6063      	str	r3, [r4, #4]
 800a9b2:	6863      	ldr	r3, [r4, #4]
 800a9b4:	4947      	ldr	r1, [pc, #284]	; (800aad4 <_scanf_i+0x1ec>)
 800a9b6:	6960      	ldr	r0, [r4, #20]
 800a9b8:	1ac9      	subs	r1, r1, r3
 800a9ba:	f000 f8af 	bl	800ab1c <__sccl>
 800a9be:	f04f 0b00 	mov.w	fp, #0
 800a9c2:	68a3      	ldr	r3, [r4, #8]
 800a9c4:	6822      	ldr	r2, [r4, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d03d      	beq.n	800aa46 <_scanf_i+0x15e>
 800a9ca:	6831      	ldr	r1, [r6, #0]
 800a9cc:	6960      	ldr	r0, [r4, #20]
 800a9ce:	f891 c000 	ldrb.w	ip, [r1]
 800a9d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d035      	beq.n	800aa46 <_scanf_i+0x15e>
 800a9da:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a9de:	d124      	bne.n	800aa2a <_scanf_i+0x142>
 800a9e0:	0510      	lsls	r0, r2, #20
 800a9e2:	d522      	bpl.n	800aa2a <_scanf_i+0x142>
 800a9e4:	f10b 0b01 	add.w	fp, fp, #1
 800a9e8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ec:	d003      	beq.n	800a9f6 <_scanf_i+0x10e>
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a9f4:	60a3      	str	r3, [r4, #8]
 800a9f6:	6873      	ldr	r3, [r6, #4]
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	6073      	str	r3, [r6, #4]
 800a9fe:	dd1b      	ble.n	800aa38 <_scanf_i+0x150>
 800aa00:	6833      	ldr	r3, [r6, #0]
 800aa02:	3301      	adds	r3, #1
 800aa04:	6033      	str	r3, [r6, #0]
 800aa06:	68a3      	ldr	r3, [r4, #8]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	60a3      	str	r3, [r4, #8]
 800aa0c:	e7d9      	b.n	800a9c2 <_scanf_i+0xda>
 800aa0e:	f1bb 0f02 	cmp.w	fp, #2
 800aa12:	d1ae      	bne.n	800a972 <_scanf_i+0x8a>
 800aa14:	6822      	ldr	r2, [r4, #0]
 800aa16:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800aa1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800aa1e:	d1bf      	bne.n	800a9a0 <_scanf_i+0xb8>
 800aa20:	2310      	movs	r3, #16
 800aa22:	6063      	str	r3, [r4, #4]
 800aa24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa28:	e7a2      	b.n	800a970 <_scanf_i+0x88>
 800aa2a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800aa2e:	6022      	str	r2, [r4, #0]
 800aa30:	780b      	ldrb	r3, [r1, #0]
 800aa32:	f805 3b01 	strb.w	r3, [r5], #1
 800aa36:	e7de      	b.n	800a9f6 <_scanf_i+0x10e>
 800aa38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4650      	mov	r0, sl
 800aa40:	4798      	blx	r3
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d0df      	beq.n	800aa06 <_scanf_i+0x11e>
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	05db      	lsls	r3, r3, #23
 800aa4a:	d50d      	bpl.n	800aa68 <_scanf_i+0x180>
 800aa4c:	42bd      	cmp	r5, r7
 800aa4e:	d909      	bls.n	800aa64 <_scanf_i+0x17c>
 800aa50:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800aa54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa58:	4632      	mov	r2, r6
 800aa5a:	4650      	mov	r0, sl
 800aa5c:	4798      	blx	r3
 800aa5e:	f105 39ff 	add.w	r9, r5, #4294967295
 800aa62:	464d      	mov	r5, r9
 800aa64:	42bd      	cmp	r5, r7
 800aa66:	d02d      	beq.n	800aac4 <_scanf_i+0x1dc>
 800aa68:	6822      	ldr	r2, [r4, #0]
 800aa6a:	f012 0210 	ands.w	r2, r2, #16
 800aa6e:	d113      	bne.n	800aa98 <_scanf_i+0x1b0>
 800aa70:	702a      	strb	r2, [r5, #0]
 800aa72:	6863      	ldr	r3, [r4, #4]
 800aa74:	9e01      	ldr	r6, [sp, #4]
 800aa76:	4639      	mov	r1, r7
 800aa78:	4650      	mov	r0, sl
 800aa7a:	47b0      	blx	r6
 800aa7c:	6821      	ldr	r1, [r4, #0]
 800aa7e:	f8d8 3000 	ldr.w	r3, [r8]
 800aa82:	f011 0f20 	tst.w	r1, #32
 800aa86:	d013      	beq.n	800aab0 <_scanf_i+0x1c8>
 800aa88:	1d1a      	adds	r2, r3, #4
 800aa8a:	f8c8 2000 	str.w	r2, [r8]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6018      	str	r0, [r3, #0]
 800aa92:	68e3      	ldr	r3, [r4, #12]
 800aa94:	3301      	adds	r3, #1
 800aa96:	60e3      	str	r3, [r4, #12]
 800aa98:	1bed      	subs	r5, r5, r7
 800aa9a:	44ab      	add	fp, r5
 800aa9c:	6925      	ldr	r5, [r4, #16]
 800aa9e:	445d      	add	r5, fp
 800aaa0:	6125      	str	r5, [r4, #16]
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	b007      	add	sp, #28
 800aaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaaa:	f04f 0b00 	mov.w	fp, #0
 800aaae:	e7ca      	b.n	800aa46 <_scanf_i+0x15e>
 800aab0:	1d1a      	adds	r2, r3, #4
 800aab2:	f8c8 2000 	str.w	r2, [r8]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f011 0f01 	tst.w	r1, #1
 800aabc:	bf14      	ite	ne
 800aabe:	8018      	strhne	r0, [r3, #0]
 800aac0:	6018      	streq	r0, [r3, #0]
 800aac2:	e7e6      	b.n	800aa92 <_scanf_i+0x1aa>
 800aac4:	2001      	movs	r0, #1
 800aac6:	e7ed      	b.n	800aaa4 <_scanf_i+0x1bc>
 800aac8:	0800b714 	.word	0x0800b714
 800aacc:	0800ad79 	.word	0x0800ad79
 800aad0:	0800ac91 	.word	0x0800ac91
 800aad4:	0800b98a 	.word	0x0800b98a

0800aad8 <_read_r>:
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	4d07      	ldr	r5, [pc, #28]	; (800aaf8 <_read_r+0x20>)
 800aadc:	4604      	mov	r4, r0
 800aade:	4608      	mov	r0, r1
 800aae0:	4611      	mov	r1, r2
 800aae2:	2200      	movs	r2, #0
 800aae4:	602a      	str	r2, [r5, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	f7f9 fa8a 	bl	8004000 <_read>
 800aaec:	1c43      	adds	r3, r0, #1
 800aaee:	d102      	bne.n	800aaf6 <_read_r+0x1e>
 800aaf0:	682b      	ldr	r3, [r5, #0]
 800aaf2:	b103      	cbz	r3, 800aaf6 <_read_r+0x1e>
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	200008a0 	.word	0x200008a0

0800aafc <_sbrk_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4d06      	ldr	r5, [pc, #24]	; (800ab18 <_sbrk_r+0x1c>)
 800ab00:	2300      	movs	r3, #0
 800ab02:	4604      	mov	r4, r0
 800ab04:	4608      	mov	r0, r1
 800ab06:	602b      	str	r3, [r5, #0]
 800ab08:	f7f9 fae8 	bl	80040dc <_sbrk>
 800ab0c:	1c43      	adds	r3, r0, #1
 800ab0e:	d102      	bne.n	800ab16 <_sbrk_r+0x1a>
 800ab10:	682b      	ldr	r3, [r5, #0]
 800ab12:	b103      	cbz	r3, 800ab16 <_sbrk_r+0x1a>
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	200008a0 	.word	0x200008a0

0800ab1c <__sccl>:
 800ab1c:	b570      	push	{r4, r5, r6, lr}
 800ab1e:	780b      	ldrb	r3, [r1, #0]
 800ab20:	4604      	mov	r4, r0
 800ab22:	2b5e      	cmp	r3, #94	; 0x5e
 800ab24:	bf0b      	itete	eq
 800ab26:	784b      	ldrbeq	r3, [r1, #1]
 800ab28:	1c48      	addne	r0, r1, #1
 800ab2a:	1c88      	addeq	r0, r1, #2
 800ab2c:	2200      	movne	r2, #0
 800ab2e:	bf08      	it	eq
 800ab30:	2201      	moveq	r2, #1
 800ab32:	1e61      	subs	r1, r4, #1
 800ab34:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ab38:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ab3c:	42a9      	cmp	r1, r5
 800ab3e:	d1fb      	bne.n	800ab38 <__sccl+0x1c>
 800ab40:	b90b      	cbnz	r3, 800ab46 <__sccl+0x2a>
 800ab42:	3801      	subs	r0, #1
 800ab44:	bd70      	pop	{r4, r5, r6, pc}
 800ab46:	f082 0201 	eor.w	r2, r2, #1
 800ab4a:	54e2      	strb	r2, [r4, r3]
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ab54:	292d      	cmp	r1, #45	; 0x2d
 800ab56:	d006      	beq.n	800ab66 <__sccl+0x4a>
 800ab58:	295d      	cmp	r1, #93	; 0x5d
 800ab5a:	d0f3      	beq.n	800ab44 <__sccl+0x28>
 800ab5c:	b909      	cbnz	r1, 800ab62 <__sccl+0x46>
 800ab5e:	4628      	mov	r0, r5
 800ab60:	e7f0      	b.n	800ab44 <__sccl+0x28>
 800ab62:	460b      	mov	r3, r1
 800ab64:	e7f1      	b.n	800ab4a <__sccl+0x2e>
 800ab66:	786e      	ldrb	r6, [r5, #1]
 800ab68:	2e5d      	cmp	r6, #93	; 0x5d
 800ab6a:	d0fa      	beq.n	800ab62 <__sccl+0x46>
 800ab6c:	42b3      	cmp	r3, r6
 800ab6e:	dcf8      	bgt.n	800ab62 <__sccl+0x46>
 800ab70:	3502      	adds	r5, #2
 800ab72:	4619      	mov	r1, r3
 800ab74:	3101      	adds	r1, #1
 800ab76:	428e      	cmp	r6, r1
 800ab78:	5462      	strb	r2, [r4, r1]
 800ab7a:	dcfb      	bgt.n	800ab74 <__sccl+0x58>
 800ab7c:	1af1      	subs	r1, r6, r3
 800ab7e:	3901      	subs	r1, #1
 800ab80:	1c58      	adds	r0, r3, #1
 800ab82:	42b3      	cmp	r3, r6
 800ab84:	bfa8      	it	ge
 800ab86:	2100      	movge	r1, #0
 800ab88:	1843      	adds	r3, r0, r1
 800ab8a:	e7e0      	b.n	800ab4e <__sccl+0x32>

0800ab8c <_strtol_l.constprop.0>:
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab92:	d001      	beq.n	800ab98 <_strtol_l.constprop.0+0xc>
 800ab94:	2b24      	cmp	r3, #36	; 0x24
 800ab96:	d906      	bls.n	800aba6 <_strtol_l.constprop.0+0x1a>
 800ab98:	f7fe fdce 	bl	8009738 <__errno>
 800ab9c:	2316      	movs	r3, #22
 800ab9e:	6003      	str	r3, [r0, #0]
 800aba0:	2000      	movs	r0, #0
 800aba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aba6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac8c <_strtol_l.constprop.0+0x100>
 800abaa:	460d      	mov	r5, r1
 800abac:	462e      	mov	r6, r5
 800abae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abb2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800abb6:	f017 0708 	ands.w	r7, r7, #8
 800abba:	d1f7      	bne.n	800abac <_strtol_l.constprop.0+0x20>
 800abbc:	2c2d      	cmp	r4, #45	; 0x2d
 800abbe:	d132      	bne.n	800ac26 <_strtol_l.constprop.0+0x9a>
 800abc0:	782c      	ldrb	r4, [r5, #0]
 800abc2:	2701      	movs	r7, #1
 800abc4:	1cb5      	adds	r5, r6, #2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d05b      	beq.n	800ac82 <_strtol_l.constprop.0+0xf6>
 800abca:	2b10      	cmp	r3, #16
 800abcc:	d109      	bne.n	800abe2 <_strtol_l.constprop.0+0x56>
 800abce:	2c30      	cmp	r4, #48	; 0x30
 800abd0:	d107      	bne.n	800abe2 <_strtol_l.constprop.0+0x56>
 800abd2:	782c      	ldrb	r4, [r5, #0]
 800abd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800abd8:	2c58      	cmp	r4, #88	; 0x58
 800abda:	d14d      	bne.n	800ac78 <_strtol_l.constprop.0+0xec>
 800abdc:	786c      	ldrb	r4, [r5, #1]
 800abde:	2310      	movs	r3, #16
 800abe0:	3502      	adds	r5, #2
 800abe2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800abe6:	f108 38ff 	add.w	r8, r8, #4294967295
 800abea:	f04f 0c00 	mov.w	ip, #0
 800abee:	fbb8 f9f3 	udiv	r9, r8, r3
 800abf2:	4666      	mov	r6, ip
 800abf4:	fb03 8a19 	mls	sl, r3, r9, r8
 800abf8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800abfc:	f1be 0f09 	cmp.w	lr, #9
 800ac00:	d816      	bhi.n	800ac30 <_strtol_l.constprop.0+0xa4>
 800ac02:	4674      	mov	r4, lr
 800ac04:	42a3      	cmp	r3, r4
 800ac06:	dd24      	ble.n	800ac52 <_strtol_l.constprop.0+0xc6>
 800ac08:	f1bc 0f00 	cmp.w	ip, #0
 800ac0c:	db1e      	blt.n	800ac4c <_strtol_l.constprop.0+0xc0>
 800ac0e:	45b1      	cmp	r9, r6
 800ac10:	d31c      	bcc.n	800ac4c <_strtol_l.constprop.0+0xc0>
 800ac12:	d101      	bne.n	800ac18 <_strtol_l.constprop.0+0x8c>
 800ac14:	45a2      	cmp	sl, r4
 800ac16:	db19      	blt.n	800ac4c <_strtol_l.constprop.0+0xc0>
 800ac18:	fb06 4603 	mla	r6, r6, r3, r4
 800ac1c:	f04f 0c01 	mov.w	ip, #1
 800ac20:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac24:	e7e8      	b.n	800abf8 <_strtol_l.constprop.0+0x6c>
 800ac26:	2c2b      	cmp	r4, #43	; 0x2b
 800ac28:	bf04      	itt	eq
 800ac2a:	782c      	ldrbeq	r4, [r5, #0]
 800ac2c:	1cb5      	addeq	r5, r6, #2
 800ac2e:	e7ca      	b.n	800abc6 <_strtol_l.constprop.0+0x3a>
 800ac30:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ac34:	f1be 0f19 	cmp.w	lr, #25
 800ac38:	d801      	bhi.n	800ac3e <_strtol_l.constprop.0+0xb2>
 800ac3a:	3c37      	subs	r4, #55	; 0x37
 800ac3c:	e7e2      	b.n	800ac04 <_strtol_l.constprop.0+0x78>
 800ac3e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ac42:	f1be 0f19 	cmp.w	lr, #25
 800ac46:	d804      	bhi.n	800ac52 <_strtol_l.constprop.0+0xc6>
 800ac48:	3c57      	subs	r4, #87	; 0x57
 800ac4a:	e7db      	b.n	800ac04 <_strtol_l.constprop.0+0x78>
 800ac4c:	f04f 3cff 	mov.w	ip, #4294967295
 800ac50:	e7e6      	b.n	800ac20 <_strtol_l.constprop.0+0x94>
 800ac52:	f1bc 0f00 	cmp.w	ip, #0
 800ac56:	da05      	bge.n	800ac64 <_strtol_l.constprop.0+0xd8>
 800ac58:	2322      	movs	r3, #34	; 0x22
 800ac5a:	6003      	str	r3, [r0, #0]
 800ac5c:	4646      	mov	r6, r8
 800ac5e:	b942      	cbnz	r2, 800ac72 <_strtol_l.constprop.0+0xe6>
 800ac60:	4630      	mov	r0, r6
 800ac62:	e79e      	b.n	800aba2 <_strtol_l.constprop.0+0x16>
 800ac64:	b107      	cbz	r7, 800ac68 <_strtol_l.constprop.0+0xdc>
 800ac66:	4276      	negs	r6, r6
 800ac68:	2a00      	cmp	r2, #0
 800ac6a:	d0f9      	beq.n	800ac60 <_strtol_l.constprop.0+0xd4>
 800ac6c:	f1bc 0f00 	cmp.w	ip, #0
 800ac70:	d000      	beq.n	800ac74 <_strtol_l.constprop.0+0xe8>
 800ac72:	1e69      	subs	r1, r5, #1
 800ac74:	6011      	str	r1, [r2, #0]
 800ac76:	e7f3      	b.n	800ac60 <_strtol_l.constprop.0+0xd4>
 800ac78:	2430      	movs	r4, #48	; 0x30
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1b1      	bne.n	800abe2 <_strtol_l.constprop.0+0x56>
 800ac7e:	2308      	movs	r3, #8
 800ac80:	e7af      	b.n	800abe2 <_strtol_l.constprop.0+0x56>
 800ac82:	2c30      	cmp	r4, #48	; 0x30
 800ac84:	d0a5      	beq.n	800abd2 <_strtol_l.constprop.0+0x46>
 800ac86:	230a      	movs	r3, #10
 800ac88:	e7ab      	b.n	800abe2 <_strtol_l.constprop.0+0x56>
 800ac8a:	bf00      	nop
 800ac8c:	0800b98d 	.word	0x0800b98d

0800ac90 <_strtol_r>:
 800ac90:	f7ff bf7c 	b.w	800ab8c <_strtol_l.constprop.0>

0800ac94 <_strtoul_l.constprop.0>:
 800ac94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac98:	4f36      	ldr	r7, [pc, #216]	; (800ad74 <_strtoul_l.constprop.0+0xe0>)
 800ac9a:	4686      	mov	lr, r0
 800ac9c:	460d      	mov	r5, r1
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aca4:	5de6      	ldrb	r6, [r4, r7]
 800aca6:	f016 0608 	ands.w	r6, r6, #8
 800acaa:	d1f8      	bne.n	800ac9e <_strtoul_l.constprop.0+0xa>
 800acac:	2c2d      	cmp	r4, #45	; 0x2d
 800acae:	d12f      	bne.n	800ad10 <_strtoul_l.constprop.0+0x7c>
 800acb0:	782c      	ldrb	r4, [r5, #0]
 800acb2:	2601      	movs	r6, #1
 800acb4:	1c85      	adds	r5, r0, #2
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d057      	beq.n	800ad6a <_strtoul_l.constprop.0+0xd6>
 800acba:	2b10      	cmp	r3, #16
 800acbc:	d109      	bne.n	800acd2 <_strtoul_l.constprop.0+0x3e>
 800acbe:	2c30      	cmp	r4, #48	; 0x30
 800acc0:	d107      	bne.n	800acd2 <_strtoul_l.constprop.0+0x3e>
 800acc2:	7828      	ldrb	r0, [r5, #0]
 800acc4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800acc8:	2858      	cmp	r0, #88	; 0x58
 800acca:	d149      	bne.n	800ad60 <_strtoul_l.constprop.0+0xcc>
 800accc:	786c      	ldrb	r4, [r5, #1]
 800acce:	2310      	movs	r3, #16
 800acd0:	3502      	adds	r5, #2
 800acd2:	f04f 38ff 	mov.w	r8, #4294967295
 800acd6:	2700      	movs	r7, #0
 800acd8:	fbb8 f8f3 	udiv	r8, r8, r3
 800acdc:	fb03 f908 	mul.w	r9, r3, r8
 800ace0:	ea6f 0909 	mvn.w	r9, r9
 800ace4:	4638      	mov	r0, r7
 800ace6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800acea:	f1bc 0f09 	cmp.w	ip, #9
 800acee:	d814      	bhi.n	800ad1a <_strtoul_l.constprop.0+0x86>
 800acf0:	4664      	mov	r4, ip
 800acf2:	42a3      	cmp	r3, r4
 800acf4:	dd22      	ble.n	800ad3c <_strtoul_l.constprop.0+0xa8>
 800acf6:	2f00      	cmp	r7, #0
 800acf8:	db1d      	blt.n	800ad36 <_strtoul_l.constprop.0+0xa2>
 800acfa:	4580      	cmp	r8, r0
 800acfc:	d31b      	bcc.n	800ad36 <_strtoul_l.constprop.0+0xa2>
 800acfe:	d101      	bne.n	800ad04 <_strtoul_l.constprop.0+0x70>
 800ad00:	45a1      	cmp	r9, r4
 800ad02:	db18      	blt.n	800ad36 <_strtoul_l.constprop.0+0xa2>
 800ad04:	fb00 4003 	mla	r0, r0, r3, r4
 800ad08:	2701      	movs	r7, #1
 800ad0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad0e:	e7ea      	b.n	800ace6 <_strtoul_l.constprop.0+0x52>
 800ad10:	2c2b      	cmp	r4, #43	; 0x2b
 800ad12:	bf04      	itt	eq
 800ad14:	782c      	ldrbeq	r4, [r5, #0]
 800ad16:	1c85      	addeq	r5, r0, #2
 800ad18:	e7cd      	b.n	800acb6 <_strtoul_l.constprop.0+0x22>
 800ad1a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ad1e:	f1bc 0f19 	cmp.w	ip, #25
 800ad22:	d801      	bhi.n	800ad28 <_strtoul_l.constprop.0+0x94>
 800ad24:	3c37      	subs	r4, #55	; 0x37
 800ad26:	e7e4      	b.n	800acf2 <_strtoul_l.constprop.0+0x5e>
 800ad28:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ad2c:	f1bc 0f19 	cmp.w	ip, #25
 800ad30:	d804      	bhi.n	800ad3c <_strtoul_l.constprop.0+0xa8>
 800ad32:	3c57      	subs	r4, #87	; 0x57
 800ad34:	e7dd      	b.n	800acf2 <_strtoul_l.constprop.0+0x5e>
 800ad36:	f04f 37ff 	mov.w	r7, #4294967295
 800ad3a:	e7e6      	b.n	800ad0a <_strtoul_l.constprop.0+0x76>
 800ad3c:	2f00      	cmp	r7, #0
 800ad3e:	da07      	bge.n	800ad50 <_strtoul_l.constprop.0+0xbc>
 800ad40:	2322      	movs	r3, #34	; 0x22
 800ad42:	f8ce 3000 	str.w	r3, [lr]
 800ad46:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4a:	b932      	cbnz	r2, 800ad5a <_strtoul_l.constprop.0+0xc6>
 800ad4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad50:	b106      	cbz	r6, 800ad54 <_strtoul_l.constprop.0+0xc0>
 800ad52:	4240      	negs	r0, r0
 800ad54:	2a00      	cmp	r2, #0
 800ad56:	d0f9      	beq.n	800ad4c <_strtoul_l.constprop.0+0xb8>
 800ad58:	b107      	cbz	r7, 800ad5c <_strtoul_l.constprop.0+0xc8>
 800ad5a:	1e69      	subs	r1, r5, #1
 800ad5c:	6011      	str	r1, [r2, #0]
 800ad5e:	e7f5      	b.n	800ad4c <_strtoul_l.constprop.0+0xb8>
 800ad60:	2430      	movs	r4, #48	; 0x30
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1b5      	bne.n	800acd2 <_strtoul_l.constprop.0+0x3e>
 800ad66:	2308      	movs	r3, #8
 800ad68:	e7b3      	b.n	800acd2 <_strtoul_l.constprop.0+0x3e>
 800ad6a:	2c30      	cmp	r4, #48	; 0x30
 800ad6c:	d0a9      	beq.n	800acc2 <_strtoul_l.constprop.0+0x2e>
 800ad6e:	230a      	movs	r3, #10
 800ad70:	e7af      	b.n	800acd2 <_strtoul_l.constprop.0+0x3e>
 800ad72:	bf00      	nop
 800ad74:	0800b98d 	.word	0x0800b98d

0800ad78 <_strtoul_r>:
 800ad78:	f7ff bf8c 	b.w	800ac94 <_strtoul_l.constprop.0>

0800ad7c <__submore>:
 800ad7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad80:	460c      	mov	r4, r1
 800ad82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ad84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad88:	4299      	cmp	r1, r3
 800ad8a:	d11d      	bne.n	800adc8 <__submore+0x4c>
 800ad8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ad90:	f7fe fec0 	bl	8009b14 <_malloc_r>
 800ad94:	b918      	cbnz	r0, 800ad9e <__submore+0x22>
 800ad96:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ada2:	63a3      	str	r3, [r4, #56]	; 0x38
 800ada4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ada8:	6360      	str	r0, [r4, #52]	; 0x34
 800adaa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800adae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800adb2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800adb6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800adba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800adbe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800adc2:	6020      	str	r0, [r4, #0]
 800adc4:	2000      	movs	r0, #0
 800adc6:	e7e8      	b.n	800ad9a <__submore+0x1e>
 800adc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800adca:	0077      	lsls	r7, r6, #1
 800adcc:	463a      	mov	r2, r7
 800adce:	f000 fb2b 	bl	800b428 <_realloc_r>
 800add2:	4605      	mov	r5, r0
 800add4:	2800      	cmp	r0, #0
 800add6:	d0de      	beq.n	800ad96 <__submore+0x1a>
 800add8:	eb00 0806 	add.w	r8, r0, r6
 800addc:	4601      	mov	r1, r0
 800adde:	4632      	mov	r2, r6
 800ade0:	4640      	mov	r0, r8
 800ade2:	f000 faed 	bl	800b3c0 <memcpy>
 800ade6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800adea:	f8c4 8000 	str.w	r8, [r4]
 800adee:	e7e9      	b.n	800adc4 <__submore+0x48>

0800adf0 <__swbuf_r>:
 800adf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf2:	460e      	mov	r6, r1
 800adf4:	4614      	mov	r4, r2
 800adf6:	4605      	mov	r5, r0
 800adf8:	b118      	cbz	r0, 800ae02 <__swbuf_r+0x12>
 800adfa:	6983      	ldr	r3, [r0, #24]
 800adfc:	b90b      	cbnz	r3, 800ae02 <__swbuf_r+0x12>
 800adfe:	f000 f9d9 	bl	800b1b4 <__sinit>
 800ae02:	4b21      	ldr	r3, [pc, #132]	; (800ae88 <__swbuf_r+0x98>)
 800ae04:	429c      	cmp	r4, r3
 800ae06:	d12b      	bne.n	800ae60 <__swbuf_r+0x70>
 800ae08:	686c      	ldr	r4, [r5, #4]
 800ae0a:	69a3      	ldr	r3, [r4, #24]
 800ae0c:	60a3      	str	r3, [r4, #8]
 800ae0e:	89a3      	ldrh	r3, [r4, #12]
 800ae10:	071a      	lsls	r2, r3, #28
 800ae12:	d52f      	bpl.n	800ae74 <__swbuf_r+0x84>
 800ae14:	6923      	ldr	r3, [r4, #16]
 800ae16:	b36b      	cbz	r3, 800ae74 <__swbuf_r+0x84>
 800ae18:	6923      	ldr	r3, [r4, #16]
 800ae1a:	6820      	ldr	r0, [r4, #0]
 800ae1c:	1ac0      	subs	r0, r0, r3
 800ae1e:	6963      	ldr	r3, [r4, #20]
 800ae20:	b2f6      	uxtb	r6, r6
 800ae22:	4283      	cmp	r3, r0
 800ae24:	4637      	mov	r7, r6
 800ae26:	dc04      	bgt.n	800ae32 <__swbuf_r+0x42>
 800ae28:	4621      	mov	r1, r4
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f000 f92e 	bl	800b08c <_fflush_r>
 800ae30:	bb30      	cbnz	r0, 800ae80 <__swbuf_r+0x90>
 800ae32:	68a3      	ldr	r3, [r4, #8]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	60a3      	str	r3, [r4, #8]
 800ae38:	6823      	ldr	r3, [r4, #0]
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	6022      	str	r2, [r4, #0]
 800ae3e:	701e      	strb	r6, [r3, #0]
 800ae40:	6963      	ldr	r3, [r4, #20]
 800ae42:	3001      	adds	r0, #1
 800ae44:	4283      	cmp	r3, r0
 800ae46:	d004      	beq.n	800ae52 <__swbuf_r+0x62>
 800ae48:	89a3      	ldrh	r3, [r4, #12]
 800ae4a:	07db      	lsls	r3, r3, #31
 800ae4c:	d506      	bpl.n	800ae5c <__swbuf_r+0x6c>
 800ae4e:	2e0a      	cmp	r6, #10
 800ae50:	d104      	bne.n	800ae5c <__swbuf_r+0x6c>
 800ae52:	4621      	mov	r1, r4
 800ae54:	4628      	mov	r0, r5
 800ae56:	f000 f919 	bl	800b08c <_fflush_r>
 800ae5a:	b988      	cbnz	r0, 800ae80 <__swbuf_r+0x90>
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae60:	4b0a      	ldr	r3, [pc, #40]	; (800ae8c <__swbuf_r+0x9c>)
 800ae62:	429c      	cmp	r4, r3
 800ae64:	d101      	bne.n	800ae6a <__swbuf_r+0x7a>
 800ae66:	68ac      	ldr	r4, [r5, #8]
 800ae68:	e7cf      	b.n	800ae0a <__swbuf_r+0x1a>
 800ae6a:	4b09      	ldr	r3, [pc, #36]	; (800ae90 <__swbuf_r+0xa0>)
 800ae6c:	429c      	cmp	r4, r3
 800ae6e:	bf08      	it	eq
 800ae70:	68ec      	ldreq	r4, [r5, #12]
 800ae72:	e7ca      	b.n	800ae0a <__swbuf_r+0x1a>
 800ae74:	4621      	mov	r1, r4
 800ae76:	4628      	mov	r0, r5
 800ae78:	f000 f80c 	bl	800ae94 <__swsetup_r>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d0cb      	beq.n	800ae18 <__swbuf_r+0x28>
 800ae80:	f04f 37ff 	mov.w	r7, #4294967295
 800ae84:	e7ea      	b.n	800ae5c <__swbuf_r+0x6c>
 800ae86:	bf00      	nop
 800ae88:	0800bab0 	.word	0x0800bab0
 800ae8c:	0800bad0 	.word	0x0800bad0
 800ae90:	0800ba90 	.word	0x0800ba90

0800ae94 <__swsetup_r>:
 800ae94:	4b32      	ldr	r3, [pc, #200]	; (800af60 <__swsetup_r+0xcc>)
 800ae96:	b570      	push	{r4, r5, r6, lr}
 800ae98:	681d      	ldr	r5, [r3, #0]
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	460c      	mov	r4, r1
 800ae9e:	b125      	cbz	r5, 800aeaa <__swsetup_r+0x16>
 800aea0:	69ab      	ldr	r3, [r5, #24]
 800aea2:	b913      	cbnz	r3, 800aeaa <__swsetup_r+0x16>
 800aea4:	4628      	mov	r0, r5
 800aea6:	f000 f985 	bl	800b1b4 <__sinit>
 800aeaa:	4b2e      	ldr	r3, [pc, #184]	; (800af64 <__swsetup_r+0xd0>)
 800aeac:	429c      	cmp	r4, r3
 800aeae:	d10f      	bne.n	800aed0 <__swsetup_r+0x3c>
 800aeb0:	686c      	ldr	r4, [r5, #4]
 800aeb2:	89a3      	ldrh	r3, [r4, #12]
 800aeb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aeb8:	0719      	lsls	r1, r3, #28
 800aeba:	d42c      	bmi.n	800af16 <__swsetup_r+0x82>
 800aebc:	06dd      	lsls	r5, r3, #27
 800aebe:	d411      	bmi.n	800aee4 <__swsetup_r+0x50>
 800aec0:	2309      	movs	r3, #9
 800aec2:	6033      	str	r3, [r6, #0]
 800aec4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	f04f 30ff 	mov.w	r0, #4294967295
 800aece:	e03e      	b.n	800af4e <__swsetup_r+0xba>
 800aed0:	4b25      	ldr	r3, [pc, #148]	; (800af68 <__swsetup_r+0xd4>)
 800aed2:	429c      	cmp	r4, r3
 800aed4:	d101      	bne.n	800aeda <__swsetup_r+0x46>
 800aed6:	68ac      	ldr	r4, [r5, #8]
 800aed8:	e7eb      	b.n	800aeb2 <__swsetup_r+0x1e>
 800aeda:	4b24      	ldr	r3, [pc, #144]	; (800af6c <__swsetup_r+0xd8>)
 800aedc:	429c      	cmp	r4, r3
 800aede:	bf08      	it	eq
 800aee0:	68ec      	ldreq	r4, [r5, #12]
 800aee2:	e7e6      	b.n	800aeb2 <__swsetup_r+0x1e>
 800aee4:	0758      	lsls	r0, r3, #29
 800aee6:	d512      	bpl.n	800af0e <__swsetup_r+0x7a>
 800aee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeea:	b141      	cbz	r1, 800aefe <__swsetup_r+0x6a>
 800aeec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aef0:	4299      	cmp	r1, r3
 800aef2:	d002      	beq.n	800aefa <__swsetup_r+0x66>
 800aef4:	4630      	mov	r0, r6
 800aef6:	f7fe fda1 	bl	8009a3c <_free_r>
 800aefa:	2300      	movs	r3, #0
 800aefc:	6363      	str	r3, [r4, #52]	; 0x34
 800aefe:	89a3      	ldrh	r3, [r4, #12]
 800af00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af04:	81a3      	strh	r3, [r4, #12]
 800af06:	2300      	movs	r3, #0
 800af08:	6063      	str	r3, [r4, #4]
 800af0a:	6923      	ldr	r3, [r4, #16]
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	89a3      	ldrh	r3, [r4, #12]
 800af10:	f043 0308 	orr.w	r3, r3, #8
 800af14:	81a3      	strh	r3, [r4, #12]
 800af16:	6923      	ldr	r3, [r4, #16]
 800af18:	b94b      	cbnz	r3, 800af2e <__swsetup_r+0x9a>
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af24:	d003      	beq.n	800af2e <__swsetup_r+0x9a>
 800af26:	4621      	mov	r1, r4
 800af28:	4630      	mov	r0, r6
 800af2a:	f000 fa09 	bl	800b340 <__smakebuf_r>
 800af2e:	89a0      	ldrh	r0, [r4, #12]
 800af30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af34:	f010 0301 	ands.w	r3, r0, #1
 800af38:	d00a      	beq.n	800af50 <__swsetup_r+0xbc>
 800af3a:	2300      	movs	r3, #0
 800af3c:	60a3      	str	r3, [r4, #8]
 800af3e:	6963      	ldr	r3, [r4, #20]
 800af40:	425b      	negs	r3, r3
 800af42:	61a3      	str	r3, [r4, #24]
 800af44:	6923      	ldr	r3, [r4, #16]
 800af46:	b943      	cbnz	r3, 800af5a <__swsetup_r+0xc6>
 800af48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af4c:	d1ba      	bne.n	800aec4 <__swsetup_r+0x30>
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
 800af50:	0781      	lsls	r1, r0, #30
 800af52:	bf58      	it	pl
 800af54:	6963      	ldrpl	r3, [r4, #20]
 800af56:	60a3      	str	r3, [r4, #8]
 800af58:	e7f4      	b.n	800af44 <__swsetup_r+0xb0>
 800af5a:	2000      	movs	r0, #0
 800af5c:	e7f7      	b.n	800af4e <__swsetup_r+0xba>
 800af5e:	bf00      	nop
 800af60:	20000118 	.word	0x20000118
 800af64:	0800bab0 	.word	0x0800bab0
 800af68:	0800bad0 	.word	0x0800bad0
 800af6c:	0800ba90 	.word	0x0800ba90

0800af70 <abort>:
 800af70:	b508      	push	{r3, lr}
 800af72:	2006      	movs	r0, #6
 800af74:	f000 fab0 	bl	800b4d8 <raise>
 800af78:	2001      	movs	r0, #1
 800af7a:	f7f9 f837 	bl	8003fec <_exit>
	...

0800af80 <__sflush_r>:
 800af80:	898a      	ldrh	r2, [r1, #12]
 800af82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af86:	4605      	mov	r5, r0
 800af88:	0710      	lsls	r0, r2, #28
 800af8a:	460c      	mov	r4, r1
 800af8c:	d458      	bmi.n	800b040 <__sflush_r+0xc0>
 800af8e:	684b      	ldr	r3, [r1, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	dc05      	bgt.n	800afa0 <__sflush_r+0x20>
 800af94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af96:	2b00      	cmp	r3, #0
 800af98:	dc02      	bgt.n	800afa0 <__sflush_r+0x20>
 800af9a:	2000      	movs	r0, #0
 800af9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afa2:	2e00      	cmp	r6, #0
 800afa4:	d0f9      	beq.n	800af9a <__sflush_r+0x1a>
 800afa6:	2300      	movs	r3, #0
 800afa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afac:	682f      	ldr	r7, [r5, #0]
 800afae:	602b      	str	r3, [r5, #0]
 800afb0:	d032      	beq.n	800b018 <__sflush_r+0x98>
 800afb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afb4:	89a3      	ldrh	r3, [r4, #12]
 800afb6:	075a      	lsls	r2, r3, #29
 800afb8:	d505      	bpl.n	800afc6 <__sflush_r+0x46>
 800afba:	6863      	ldr	r3, [r4, #4]
 800afbc:	1ac0      	subs	r0, r0, r3
 800afbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afc0:	b10b      	cbz	r3, 800afc6 <__sflush_r+0x46>
 800afc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afc4:	1ac0      	subs	r0, r0, r3
 800afc6:	2300      	movs	r3, #0
 800afc8:	4602      	mov	r2, r0
 800afca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afcc:	6a21      	ldr	r1, [r4, #32]
 800afce:	4628      	mov	r0, r5
 800afd0:	47b0      	blx	r6
 800afd2:	1c43      	adds	r3, r0, #1
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	d106      	bne.n	800afe6 <__sflush_r+0x66>
 800afd8:	6829      	ldr	r1, [r5, #0]
 800afda:	291d      	cmp	r1, #29
 800afdc:	d82c      	bhi.n	800b038 <__sflush_r+0xb8>
 800afde:	4a2a      	ldr	r2, [pc, #168]	; (800b088 <__sflush_r+0x108>)
 800afe0:	40ca      	lsrs	r2, r1
 800afe2:	07d6      	lsls	r6, r2, #31
 800afe4:	d528      	bpl.n	800b038 <__sflush_r+0xb8>
 800afe6:	2200      	movs	r2, #0
 800afe8:	6062      	str	r2, [r4, #4]
 800afea:	04d9      	lsls	r1, r3, #19
 800afec:	6922      	ldr	r2, [r4, #16]
 800afee:	6022      	str	r2, [r4, #0]
 800aff0:	d504      	bpl.n	800affc <__sflush_r+0x7c>
 800aff2:	1c42      	adds	r2, r0, #1
 800aff4:	d101      	bne.n	800affa <__sflush_r+0x7a>
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	b903      	cbnz	r3, 800affc <__sflush_r+0x7c>
 800affa:	6560      	str	r0, [r4, #84]	; 0x54
 800affc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800affe:	602f      	str	r7, [r5, #0]
 800b000:	2900      	cmp	r1, #0
 800b002:	d0ca      	beq.n	800af9a <__sflush_r+0x1a>
 800b004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b008:	4299      	cmp	r1, r3
 800b00a:	d002      	beq.n	800b012 <__sflush_r+0x92>
 800b00c:	4628      	mov	r0, r5
 800b00e:	f7fe fd15 	bl	8009a3c <_free_r>
 800b012:	2000      	movs	r0, #0
 800b014:	6360      	str	r0, [r4, #52]	; 0x34
 800b016:	e7c1      	b.n	800af9c <__sflush_r+0x1c>
 800b018:	6a21      	ldr	r1, [r4, #32]
 800b01a:	2301      	movs	r3, #1
 800b01c:	4628      	mov	r0, r5
 800b01e:	47b0      	blx	r6
 800b020:	1c41      	adds	r1, r0, #1
 800b022:	d1c7      	bne.n	800afb4 <__sflush_r+0x34>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d0c4      	beq.n	800afb4 <__sflush_r+0x34>
 800b02a:	2b1d      	cmp	r3, #29
 800b02c:	d001      	beq.n	800b032 <__sflush_r+0xb2>
 800b02e:	2b16      	cmp	r3, #22
 800b030:	d101      	bne.n	800b036 <__sflush_r+0xb6>
 800b032:	602f      	str	r7, [r5, #0]
 800b034:	e7b1      	b.n	800af9a <__sflush_r+0x1a>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b03c:	81a3      	strh	r3, [r4, #12]
 800b03e:	e7ad      	b.n	800af9c <__sflush_r+0x1c>
 800b040:	690f      	ldr	r7, [r1, #16]
 800b042:	2f00      	cmp	r7, #0
 800b044:	d0a9      	beq.n	800af9a <__sflush_r+0x1a>
 800b046:	0793      	lsls	r3, r2, #30
 800b048:	680e      	ldr	r6, [r1, #0]
 800b04a:	bf08      	it	eq
 800b04c:	694b      	ldreq	r3, [r1, #20]
 800b04e:	600f      	str	r7, [r1, #0]
 800b050:	bf18      	it	ne
 800b052:	2300      	movne	r3, #0
 800b054:	eba6 0807 	sub.w	r8, r6, r7
 800b058:	608b      	str	r3, [r1, #8]
 800b05a:	f1b8 0f00 	cmp.w	r8, #0
 800b05e:	dd9c      	ble.n	800af9a <__sflush_r+0x1a>
 800b060:	6a21      	ldr	r1, [r4, #32]
 800b062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b064:	4643      	mov	r3, r8
 800b066:	463a      	mov	r2, r7
 800b068:	4628      	mov	r0, r5
 800b06a:	47b0      	blx	r6
 800b06c:	2800      	cmp	r0, #0
 800b06e:	dc06      	bgt.n	800b07e <__sflush_r+0xfe>
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b076:	81a3      	strh	r3, [r4, #12]
 800b078:	f04f 30ff 	mov.w	r0, #4294967295
 800b07c:	e78e      	b.n	800af9c <__sflush_r+0x1c>
 800b07e:	4407      	add	r7, r0
 800b080:	eba8 0800 	sub.w	r8, r8, r0
 800b084:	e7e9      	b.n	800b05a <__sflush_r+0xda>
 800b086:	bf00      	nop
 800b088:	20400001 	.word	0x20400001

0800b08c <_fflush_r>:
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	690b      	ldr	r3, [r1, #16]
 800b090:	4605      	mov	r5, r0
 800b092:	460c      	mov	r4, r1
 800b094:	b913      	cbnz	r3, 800b09c <_fflush_r+0x10>
 800b096:	2500      	movs	r5, #0
 800b098:	4628      	mov	r0, r5
 800b09a:	bd38      	pop	{r3, r4, r5, pc}
 800b09c:	b118      	cbz	r0, 800b0a6 <_fflush_r+0x1a>
 800b09e:	6983      	ldr	r3, [r0, #24]
 800b0a0:	b90b      	cbnz	r3, 800b0a6 <_fflush_r+0x1a>
 800b0a2:	f000 f887 	bl	800b1b4 <__sinit>
 800b0a6:	4b14      	ldr	r3, [pc, #80]	; (800b0f8 <_fflush_r+0x6c>)
 800b0a8:	429c      	cmp	r4, r3
 800b0aa:	d11b      	bne.n	800b0e4 <_fflush_r+0x58>
 800b0ac:	686c      	ldr	r4, [r5, #4]
 800b0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d0ef      	beq.n	800b096 <_fflush_r+0xa>
 800b0b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0b8:	07d0      	lsls	r0, r2, #31
 800b0ba:	d404      	bmi.n	800b0c6 <_fflush_r+0x3a>
 800b0bc:	0599      	lsls	r1, r3, #22
 800b0be:	d402      	bmi.n	800b0c6 <_fflush_r+0x3a>
 800b0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0c2:	f000 f915 	bl	800b2f0 <__retarget_lock_acquire_recursive>
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	f7ff ff59 	bl	800af80 <__sflush_r>
 800b0ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0d0:	07da      	lsls	r2, r3, #31
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	d4e0      	bmi.n	800b098 <_fflush_r+0xc>
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	059b      	lsls	r3, r3, #22
 800b0da:	d4dd      	bmi.n	800b098 <_fflush_r+0xc>
 800b0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0de:	f000 f908 	bl	800b2f2 <__retarget_lock_release_recursive>
 800b0e2:	e7d9      	b.n	800b098 <_fflush_r+0xc>
 800b0e4:	4b05      	ldr	r3, [pc, #20]	; (800b0fc <_fflush_r+0x70>)
 800b0e6:	429c      	cmp	r4, r3
 800b0e8:	d101      	bne.n	800b0ee <_fflush_r+0x62>
 800b0ea:	68ac      	ldr	r4, [r5, #8]
 800b0ec:	e7df      	b.n	800b0ae <_fflush_r+0x22>
 800b0ee:	4b04      	ldr	r3, [pc, #16]	; (800b100 <_fflush_r+0x74>)
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	bf08      	it	eq
 800b0f4:	68ec      	ldreq	r4, [r5, #12]
 800b0f6:	e7da      	b.n	800b0ae <_fflush_r+0x22>
 800b0f8:	0800bab0 	.word	0x0800bab0
 800b0fc:	0800bad0 	.word	0x0800bad0
 800b100:	0800ba90 	.word	0x0800ba90

0800b104 <std>:
 800b104:	2300      	movs	r3, #0
 800b106:	b510      	push	{r4, lr}
 800b108:	4604      	mov	r4, r0
 800b10a:	e9c0 3300 	strd	r3, r3, [r0]
 800b10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b112:	6083      	str	r3, [r0, #8]
 800b114:	8181      	strh	r1, [r0, #12]
 800b116:	6643      	str	r3, [r0, #100]	; 0x64
 800b118:	81c2      	strh	r2, [r0, #14]
 800b11a:	6183      	str	r3, [r0, #24]
 800b11c:	4619      	mov	r1, r3
 800b11e:	2208      	movs	r2, #8
 800b120:	305c      	adds	r0, #92	; 0x5c
 800b122:	f7fe fb33 	bl	800978c <memset>
 800b126:	4b05      	ldr	r3, [pc, #20]	; (800b13c <std+0x38>)
 800b128:	6263      	str	r3, [r4, #36]	; 0x24
 800b12a:	4b05      	ldr	r3, [pc, #20]	; (800b140 <std+0x3c>)
 800b12c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b12e:	4b05      	ldr	r3, [pc, #20]	; (800b144 <std+0x40>)
 800b130:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b132:	4b05      	ldr	r3, [pc, #20]	; (800b148 <std+0x44>)
 800b134:	6224      	str	r4, [r4, #32]
 800b136:	6323      	str	r3, [r4, #48]	; 0x30
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	bf00      	nop
 800b13c:	080098b1 	.word	0x080098b1
 800b140:	080098d7 	.word	0x080098d7
 800b144:	0800990f 	.word	0x0800990f
 800b148:	08009933 	.word	0x08009933

0800b14c <_cleanup_r>:
 800b14c:	4901      	ldr	r1, [pc, #4]	; (800b154 <_cleanup_r+0x8>)
 800b14e:	f000 b8af 	b.w	800b2b0 <_fwalk_reent>
 800b152:	bf00      	nop
 800b154:	0800b08d 	.word	0x0800b08d

0800b158 <__sfmoreglue>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	2268      	movs	r2, #104	; 0x68
 800b15c:	1e4d      	subs	r5, r1, #1
 800b15e:	4355      	muls	r5, r2
 800b160:	460e      	mov	r6, r1
 800b162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b166:	f7fe fcd5 	bl	8009b14 <_malloc_r>
 800b16a:	4604      	mov	r4, r0
 800b16c:	b140      	cbz	r0, 800b180 <__sfmoreglue+0x28>
 800b16e:	2100      	movs	r1, #0
 800b170:	e9c0 1600 	strd	r1, r6, [r0]
 800b174:	300c      	adds	r0, #12
 800b176:	60a0      	str	r0, [r4, #8]
 800b178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b17c:	f7fe fb06 	bl	800978c <memset>
 800b180:	4620      	mov	r0, r4
 800b182:	bd70      	pop	{r4, r5, r6, pc}

0800b184 <__sfp_lock_acquire>:
 800b184:	4801      	ldr	r0, [pc, #4]	; (800b18c <__sfp_lock_acquire+0x8>)
 800b186:	f000 b8b3 	b.w	800b2f0 <__retarget_lock_acquire_recursive>
 800b18a:	bf00      	nop
 800b18c:	200008a5 	.word	0x200008a5

0800b190 <__sfp_lock_release>:
 800b190:	4801      	ldr	r0, [pc, #4]	; (800b198 <__sfp_lock_release+0x8>)
 800b192:	f000 b8ae 	b.w	800b2f2 <__retarget_lock_release_recursive>
 800b196:	bf00      	nop
 800b198:	200008a5 	.word	0x200008a5

0800b19c <__sinit_lock_acquire>:
 800b19c:	4801      	ldr	r0, [pc, #4]	; (800b1a4 <__sinit_lock_acquire+0x8>)
 800b19e:	f000 b8a7 	b.w	800b2f0 <__retarget_lock_acquire_recursive>
 800b1a2:	bf00      	nop
 800b1a4:	200008a6 	.word	0x200008a6

0800b1a8 <__sinit_lock_release>:
 800b1a8:	4801      	ldr	r0, [pc, #4]	; (800b1b0 <__sinit_lock_release+0x8>)
 800b1aa:	f000 b8a2 	b.w	800b2f2 <__retarget_lock_release_recursive>
 800b1ae:	bf00      	nop
 800b1b0:	200008a6 	.word	0x200008a6

0800b1b4 <__sinit>:
 800b1b4:	b510      	push	{r4, lr}
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	f7ff fff0 	bl	800b19c <__sinit_lock_acquire>
 800b1bc:	69a3      	ldr	r3, [r4, #24]
 800b1be:	b11b      	cbz	r3, 800b1c8 <__sinit+0x14>
 800b1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c4:	f7ff bff0 	b.w	800b1a8 <__sinit_lock_release>
 800b1c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1cc:	6523      	str	r3, [r4, #80]	; 0x50
 800b1ce:	4b13      	ldr	r3, [pc, #76]	; (800b21c <__sinit+0x68>)
 800b1d0:	4a13      	ldr	r2, [pc, #76]	; (800b220 <__sinit+0x6c>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1d6:	42a3      	cmp	r3, r4
 800b1d8:	bf04      	itt	eq
 800b1da:	2301      	moveq	r3, #1
 800b1dc:	61a3      	streq	r3, [r4, #24]
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f000 f820 	bl	800b224 <__sfp>
 800b1e4:	6060      	str	r0, [r4, #4]
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f000 f81c 	bl	800b224 <__sfp>
 800b1ec:	60a0      	str	r0, [r4, #8]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f000 f818 	bl	800b224 <__sfp>
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	60e0      	str	r0, [r4, #12]
 800b1f8:	2104      	movs	r1, #4
 800b1fa:	6860      	ldr	r0, [r4, #4]
 800b1fc:	f7ff ff82 	bl	800b104 <std>
 800b200:	68a0      	ldr	r0, [r4, #8]
 800b202:	2201      	movs	r2, #1
 800b204:	2109      	movs	r1, #9
 800b206:	f7ff ff7d 	bl	800b104 <std>
 800b20a:	68e0      	ldr	r0, [r4, #12]
 800b20c:	2202      	movs	r2, #2
 800b20e:	2112      	movs	r1, #18
 800b210:	f7ff ff78 	bl	800b104 <std>
 800b214:	2301      	movs	r3, #1
 800b216:	61a3      	str	r3, [r4, #24]
 800b218:	e7d2      	b.n	800b1c0 <__sinit+0xc>
 800b21a:	bf00      	nop
 800b21c:	0800b88c 	.word	0x0800b88c
 800b220:	0800b14d 	.word	0x0800b14d

0800b224 <__sfp>:
 800b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b226:	4607      	mov	r7, r0
 800b228:	f7ff ffac 	bl	800b184 <__sfp_lock_acquire>
 800b22c:	4b1e      	ldr	r3, [pc, #120]	; (800b2a8 <__sfp+0x84>)
 800b22e:	681e      	ldr	r6, [r3, #0]
 800b230:	69b3      	ldr	r3, [r6, #24]
 800b232:	b913      	cbnz	r3, 800b23a <__sfp+0x16>
 800b234:	4630      	mov	r0, r6
 800b236:	f7ff ffbd 	bl	800b1b4 <__sinit>
 800b23a:	3648      	adds	r6, #72	; 0x48
 800b23c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b240:	3b01      	subs	r3, #1
 800b242:	d503      	bpl.n	800b24c <__sfp+0x28>
 800b244:	6833      	ldr	r3, [r6, #0]
 800b246:	b30b      	cbz	r3, 800b28c <__sfp+0x68>
 800b248:	6836      	ldr	r6, [r6, #0]
 800b24a:	e7f7      	b.n	800b23c <__sfp+0x18>
 800b24c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b250:	b9d5      	cbnz	r5, 800b288 <__sfp+0x64>
 800b252:	4b16      	ldr	r3, [pc, #88]	; (800b2ac <__sfp+0x88>)
 800b254:	60e3      	str	r3, [r4, #12]
 800b256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b25a:	6665      	str	r5, [r4, #100]	; 0x64
 800b25c:	f000 f847 	bl	800b2ee <__retarget_lock_init_recursive>
 800b260:	f7ff ff96 	bl	800b190 <__sfp_lock_release>
 800b264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b26c:	6025      	str	r5, [r4, #0]
 800b26e:	61a5      	str	r5, [r4, #24]
 800b270:	2208      	movs	r2, #8
 800b272:	4629      	mov	r1, r5
 800b274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b278:	f7fe fa88 	bl	800978c <memset>
 800b27c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b284:	4620      	mov	r0, r4
 800b286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b288:	3468      	adds	r4, #104	; 0x68
 800b28a:	e7d9      	b.n	800b240 <__sfp+0x1c>
 800b28c:	2104      	movs	r1, #4
 800b28e:	4638      	mov	r0, r7
 800b290:	f7ff ff62 	bl	800b158 <__sfmoreglue>
 800b294:	4604      	mov	r4, r0
 800b296:	6030      	str	r0, [r6, #0]
 800b298:	2800      	cmp	r0, #0
 800b29a:	d1d5      	bne.n	800b248 <__sfp+0x24>
 800b29c:	f7ff ff78 	bl	800b190 <__sfp_lock_release>
 800b2a0:	230c      	movs	r3, #12
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	e7ee      	b.n	800b284 <__sfp+0x60>
 800b2a6:	bf00      	nop
 800b2a8:	0800b88c 	.word	0x0800b88c
 800b2ac:	ffff0001 	.word	0xffff0001

0800b2b0 <_fwalk_reent>:
 800b2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	4688      	mov	r8, r1
 800b2b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2bc:	2700      	movs	r7, #0
 800b2be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2c2:	f1b9 0901 	subs.w	r9, r9, #1
 800b2c6:	d505      	bpl.n	800b2d4 <_fwalk_reent+0x24>
 800b2c8:	6824      	ldr	r4, [r4, #0]
 800b2ca:	2c00      	cmp	r4, #0
 800b2cc:	d1f7      	bne.n	800b2be <_fwalk_reent+0xe>
 800b2ce:	4638      	mov	r0, r7
 800b2d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2d4:	89ab      	ldrh	r3, [r5, #12]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d907      	bls.n	800b2ea <_fwalk_reent+0x3a>
 800b2da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	d003      	beq.n	800b2ea <_fwalk_reent+0x3a>
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	47c0      	blx	r8
 800b2e8:	4307      	orrs	r7, r0
 800b2ea:	3568      	adds	r5, #104	; 0x68
 800b2ec:	e7e9      	b.n	800b2c2 <_fwalk_reent+0x12>

0800b2ee <__retarget_lock_init_recursive>:
 800b2ee:	4770      	bx	lr

0800b2f0 <__retarget_lock_acquire_recursive>:
 800b2f0:	4770      	bx	lr

0800b2f2 <__retarget_lock_release_recursive>:
 800b2f2:	4770      	bx	lr

0800b2f4 <__swhatbuf_r>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	460e      	mov	r6, r1
 800b2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2fc:	2900      	cmp	r1, #0
 800b2fe:	b096      	sub	sp, #88	; 0x58
 800b300:	4614      	mov	r4, r2
 800b302:	461d      	mov	r5, r3
 800b304:	da08      	bge.n	800b318 <__swhatbuf_r+0x24>
 800b306:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	602a      	str	r2, [r5, #0]
 800b30e:	061a      	lsls	r2, r3, #24
 800b310:	d410      	bmi.n	800b334 <__swhatbuf_r+0x40>
 800b312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b316:	e00e      	b.n	800b336 <__swhatbuf_r+0x42>
 800b318:	466a      	mov	r2, sp
 800b31a:	f000 f8f9 	bl	800b510 <_fstat_r>
 800b31e:	2800      	cmp	r0, #0
 800b320:	dbf1      	blt.n	800b306 <__swhatbuf_r+0x12>
 800b322:	9a01      	ldr	r2, [sp, #4]
 800b324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b32c:	425a      	negs	r2, r3
 800b32e:	415a      	adcs	r2, r3
 800b330:	602a      	str	r2, [r5, #0]
 800b332:	e7ee      	b.n	800b312 <__swhatbuf_r+0x1e>
 800b334:	2340      	movs	r3, #64	; 0x40
 800b336:	2000      	movs	r0, #0
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	b016      	add	sp, #88	; 0x58
 800b33c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b340 <__smakebuf_r>:
 800b340:	898b      	ldrh	r3, [r1, #12]
 800b342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b344:	079d      	lsls	r5, r3, #30
 800b346:	4606      	mov	r6, r0
 800b348:	460c      	mov	r4, r1
 800b34a:	d507      	bpl.n	800b35c <__smakebuf_r+0x1c>
 800b34c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	6123      	str	r3, [r4, #16]
 800b354:	2301      	movs	r3, #1
 800b356:	6163      	str	r3, [r4, #20]
 800b358:	b002      	add	sp, #8
 800b35a:	bd70      	pop	{r4, r5, r6, pc}
 800b35c:	ab01      	add	r3, sp, #4
 800b35e:	466a      	mov	r2, sp
 800b360:	f7ff ffc8 	bl	800b2f4 <__swhatbuf_r>
 800b364:	9900      	ldr	r1, [sp, #0]
 800b366:	4605      	mov	r5, r0
 800b368:	4630      	mov	r0, r6
 800b36a:	f7fe fbd3 	bl	8009b14 <_malloc_r>
 800b36e:	b948      	cbnz	r0, 800b384 <__smakebuf_r+0x44>
 800b370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b374:	059a      	lsls	r2, r3, #22
 800b376:	d4ef      	bmi.n	800b358 <__smakebuf_r+0x18>
 800b378:	f023 0303 	bic.w	r3, r3, #3
 800b37c:	f043 0302 	orr.w	r3, r3, #2
 800b380:	81a3      	strh	r3, [r4, #12]
 800b382:	e7e3      	b.n	800b34c <__smakebuf_r+0xc>
 800b384:	4b0d      	ldr	r3, [pc, #52]	; (800b3bc <__smakebuf_r+0x7c>)
 800b386:	62b3      	str	r3, [r6, #40]	; 0x28
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	6020      	str	r0, [r4, #0]
 800b38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b390:	81a3      	strh	r3, [r4, #12]
 800b392:	9b00      	ldr	r3, [sp, #0]
 800b394:	6163      	str	r3, [r4, #20]
 800b396:	9b01      	ldr	r3, [sp, #4]
 800b398:	6120      	str	r0, [r4, #16]
 800b39a:	b15b      	cbz	r3, 800b3b4 <__smakebuf_r+0x74>
 800b39c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	f000 f8c7 	bl	800b534 <_isatty_r>
 800b3a6:	b128      	cbz	r0, 800b3b4 <__smakebuf_r+0x74>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	f023 0303 	bic.w	r3, r3, #3
 800b3ae:	f043 0301 	orr.w	r3, r3, #1
 800b3b2:	81a3      	strh	r3, [r4, #12]
 800b3b4:	89a0      	ldrh	r0, [r4, #12]
 800b3b6:	4305      	orrs	r5, r0
 800b3b8:	81a5      	strh	r5, [r4, #12]
 800b3ba:	e7cd      	b.n	800b358 <__smakebuf_r+0x18>
 800b3bc:	0800b14d 	.word	0x0800b14d

0800b3c0 <memcpy>:
 800b3c0:	440a      	add	r2, r1
 800b3c2:	4291      	cmp	r1, r2
 800b3c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3c8:	d100      	bne.n	800b3cc <memcpy+0xc>
 800b3ca:	4770      	bx	lr
 800b3cc:	b510      	push	{r4, lr}
 800b3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3d6:	4291      	cmp	r1, r2
 800b3d8:	d1f9      	bne.n	800b3ce <memcpy+0xe>
 800b3da:	bd10      	pop	{r4, pc}

0800b3dc <memmove>:
 800b3dc:	4288      	cmp	r0, r1
 800b3de:	b510      	push	{r4, lr}
 800b3e0:	eb01 0402 	add.w	r4, r1, r2
 800b3e4:	d902      	bls.n	800b3ec <memmove+0x10>
 800b3e6:	4284      	cmp	r4, r0
 800b3e8:	4623      	mov	r3, r4
 800b3ea:	d807      	bhi.n	800b3fc <memmove+0x20>
 800b3ec:	1e43      	subs	r3, r0, #1
 800b3ee:	42a1      	cmp	r1, r4
 800b3f0:	d008      	beq.n	800b404 <memmove+0x28>
 800b3f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3fa:	e7f8      	b.n	800b3ee <memmove+0x12>
 800b3fc:	4402      	add	r2, r0
 800b3fe:	4601      	mov	r1, r0
 800b400:	428a      	cmp	r2, r1
 800b402:	d100      	bne.n	800b406 <memmove+0x2a>
 800b404:	bd10      	pop	{r4, pc}
 800b406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b40a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b40e:	e7f7      	b.n	800b400 <memmove+0x24>

0800b410 <__malloc_lock>:
 800b410:	4801      	ldr	r0, [pc, #4]	; (800b418 <__malloc_lock+0x8>)
 800b412:	f7ff bf6d 	b.w	800b2f0 <__retarget_lock_acquire_recursive>
 800b416:	bf00      	nop
 800b418:	200008a4 	.word	0x200008a4

0800b41c <__malloc_unlock>:
 800b41c:	4801      	ldr	r0, [pc, #4]	; (800b424 <__malloc_unlock+0x8>)
 800b41e:	f7ff bf68 	b.w	800b2f2 <__retarget_lock_release_recursive>
 800b422:	bf00      	nop
 800b424:	200008a4 	.word	0x200008a4

0800b428 <_realloc_r>:
 800b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42c:	4680      	mov	r8, r0
 800b42e:	4614      	mov	r4, r2
 800b430:	460e      	mov	r6, r1
 800b432:	b921      	cbnz	r1, 800b43e <_realloc_r+0x16>
 800b434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b438:	4611      	mov	r1, r2
 800b43a:	f7fe bb6b 	b.w	8009b14 <_malloc_r>
 800b43e:	b92a      	cbnz	r2, 800b44c <_realloc_r+0x24>
 800b440:	f7fe fafc 	bl	8009a3c <_free_r>
 800b444:	4625      	mov	r5, r4
 800b446:	4628      	mov	r0, r5
 800b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b44c:	f000 f882 	bl	800b554 <_malloc_usable_size_r>
 800b450:	4284      	cmp	r4, r0
 800b452:	4607      	mov	r7, r0
 800b454:	d802      	bhi.n	800b45c <_realloc_r+0x34>
 800b456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b45a:	d812      	bhi.n	800b482 <_realloc_r+0x5a>
 800b45c:	4621      	mov	r1, r4
 800b45e:	4640      	mov	r0, r8
 800b460:	f7fe fb58 	bl	8009b14 <_malloc_r>
 800b464:	4605      	mov	r5, r0
 800b466:	2800      	cmp	r0, #0
 800b468:	d0ed      	beq.n	800b446 <_realloc_r+0x1e>
 800b46a:	42bc      	cmp	r4, r7
 800b46c:	4622      	mov	r2, r4
 800b46e:	4631      	mov	r1, r6
 800b470:	bf28      	it	cs
 800b472:	463a      	movcs	r2, r7
 800b474:	f7ff ffa4 	bl	800b3c0 <memcpy>
 800b478:	4631      	mov	r1, r6
 800b47a:	4640      	mov	r0, r8
 800b47c:	f7fe fade 	bl	8009a3c <_free_r>
 800b480:	e7e1      	b.n	800b446 <_realloc_r+0x1e>
 800b482:	4635      	mov	r5, r6
 800b484:	e7df      	b.n	800b446 <_realloc_r+0x1e>

0800b486 <_raise_r>:
 800b486:	291f      	cmp	r1, #31
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	4604      	mov	r4, r0
 800b48c:	460d      	mov	r5, r1
 800b48e:	d904      	bls.n	800b49a <_raise_r+0x14>
 800b490:	2316      	movs	r3, #22
 800b492:	6003      	str	r3, [r0, #0]
 800b494:	f04f 30ff 	mov.w	r0, #4294967295
 800b498:	bd38      	pop	{r3, r4, r5, pc}
 800b49a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b49c:	b112      	cbz	r2, 800b4a4 <_raise_r+0x1e>
 800b49e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4a2:	b94b      	cbnz	r3, 800b4b8 <_raise_r+0x32>
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f000 f831 	bl	800b50c <_getpid_r>
 800b4aa:	462a      	mov	r2, r5
 800b4ac:	4601      	mov	r1, r0
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4b4:	f000 b818 	b.w	800b4e8 <_kill_r>
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d00a      	beq.n	800b4d2 <_raise_r+0x4c>
 800b4bc:	1c59      	adds	r1, r3, #1
 800b4be:	d103      	bne.n	800b4c8 <_raise_r+0x42>
 800b4c0:	2316      	movs	r3, #22
 800b4c2:	6003      	str	r3, [r0, #0]
 800b4c4:	2001      	movs	r0, #1
 800b4c6:	e7e7      	b.n	800b498 <_raise_r+0x12>
 800b4c8:	2400      	movs	r4, #0
 800b4ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	4798      	blx	r3
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	e7e0      	b.n	800b498 <_raise_r+0x12>
	...

0800b4d8 <raise>:
 800b4d8:	4b02      	ldr	r3, [pc, #8]	; (800b4e4 <raise+0xc>)
 800b4da:	4601      	mov	r1, r0
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	f7ff bfd2 	b.w	800b486 <_raise_r>
 800b4e2:	bf00      	nop
 800b4e4:	20000118 	.word	0x20000118

0800b4e8 <_kill_r>:
 800b4e8:	b538      	push	{r3, r4, r5, lr}
 800b4ea:	4d07      	ldr	r5, [pc, #28]	; (800b508 <_kill_r+0x20>)
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	4608      	mov	r0, r1
 800b4f2:	4611      	mov	r1, r2
 800b4f4:	602b      	str	r3, [r5, #0]
 800b4f6:	f7f8 fd69 	bl	8003fcc <_kill>
 800b4fa:	1c43      	adds	r3, r0, #1
 800b4fc:	d102      	bne.n	800b504 <_kill_r+0x1c>
 800b4fe:	682b      	ldr	r3, [r5, #0]
 800b500:	b103      	cbz	r3, 800b504 <_kill_r+0x1c>
 800b502:	6023      	str	r3, [r4, #0]
 800b504:	bd38      	pop	{r3, r4, r5, pc}
 800b506:	bf00      	nop
 800b508:	200008a0 	.word	0x200008a0

0800b50c <_getpid_r>:
 800b50c:	f7f8 bd56 	b.w	8003fbc <_getpid>

0800b510 <_fstat_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4d07      	ldr	r5, [pc, #28]	; (800b530 <_fstat_r+0x20>)
 800b514:	2300      	movs	r3, #0
 800b516:	4604      	mov	r4, r0
 800b518:	4608      	mov	r0, r1
 800b51a:	4611      	mov	r1, r2
 800b51c:	602b      	str	r3, [r5, #0]
 800b51e:	f7f8 fdb4 	bl	800408a <_fstat>
 800b522:	1c43      	adds	r3, r0, #1
 800b524:	d102      	bne.n	800b52c <_fstat_r+0x1c>
 800b526:	682b      	ldr	r3, [r5, #0]
 800b528:	b103      	cbz	r3, 800b52c <_fstat_r+0x1c>
 800b52a:	6023      	str	r3, [r4, #0]
 800b52c:	bd38      	pop	{r3, r4, r5, pc}
 800b52e:	bf00      	nop
 800b530:	200008a0 	.word	0x200008a0

0800b534 <_isatty_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	4d06      	ldr	r5, [pc, #24]	; (800b550 <_isatty_r+0x1c>)
 800b538:	2300      	movs	r3, #0
 800b53a:	4604      	mov	r4, r0
 800b53c:	4608      	mov	r0, r1
 800b53e:	602b      	str	r3, [r5, #0]
 800b540:	f7f8 fdb3 	bl	80040aa <_isatty>
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	d102      	bne.n	800b54e <_isatty_r+0x1a>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	b103      	cbz	r3, 800b54e <_isatty_r+0x1a>
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
 800b550:	200008a0 	.word	0x200008a0

0800b554 <_malloc_usable_size_r>:
 800b554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b558:	1f18      	subs	r0, r3, #4
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	bfbc      	itt	lt
 800b55e:	580b      	ldrlt	r3, [r1, r0]
 800b560:	18c0      	addlt	r0, r0, r3
 800b562:	4770      	bx	lr

0800b564 <_init>:
 800b564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b566:	bf00      	nop
 800b568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56a:	bc08      	pop	{r3}
 800b56c:	469e      	mov	lr, r3
 800b56e:	4770      	bx	lr

0800b570 <_fini>:
 800b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b572:	bf00      	nop
 800b574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b576:	bc08      	pop	{r3}
 800b578:	469e      	mov	lr, r3
 800b57a:	4770      	bx	lr
