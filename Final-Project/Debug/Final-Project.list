
Final-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b498  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800b628  0800b628  0001b628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbac  0800bbac  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bbac  0800bbac  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bbac  0800bbac  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbac  0800bbac  0001bbac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbb0  0800bbb0  0001bbb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800bbb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00000730  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008ac  200008ac  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ddc1  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000374f  00000000  00000000  0003df6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  000416c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016e8  00000000  00000000  00042e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216af  00000000  00000000  00044580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dc70  00000000  00000000  00065c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c64bb  00000000  00000000  0008389f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149d5a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007394  00000000  00000000  00149dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b610 	.word	0x0800b610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	0800b610 	.word	0x0800b610

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000019a 	.word	0x2000019a
 800039c:	2000019c 	.word	0x2000019c
 80003a0:	2000019e 	.word	0x2000019e
 80003a4:	200001b0 	.word	0x200001b0
 80003a8:	200001a0 	.word	0x200001a0
 80003ac:	200001b4 	.word	0x200001b4

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f004 f8ed 	bl	8004690 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f003 ff3e 	bl	8004338 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f004 fa74 	bl	80049b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f004 fa6c 	bl	80049b4 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f004 fa60 	bl	80049b4 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f003 ff16 	bl	8004338 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f003 ff10 	bl	8004338 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f003 ff0a 	bl	8004338 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f003 fefb 	bl	8004338 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f003 fef0 	bl	8004338 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200001b4 	.word	0x200001b4
 80005a8:	200001b7 	.word	0x200001b7
 80005ac:	20000198 	.word	0x20000198
 80005b0:	20000000 	.word	0x20000000
 80005b4:	2000019a 	.word	0x2000019a
 80005b8:	2000019c 	.word	0x2000019c
 80005bc:	2000019e 	.word	0x2000019e
 80005c0:	200001a0 	.word	0x200001a0
 80005c4:	200001b0 	.word	0x200001b0
 80005c8:	200001b5 	.word	0x200001b5
 80005cc:	200001b6 	.word	0x200001b6

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200001b0 	.word	0x200001b0
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200001b8 	.word	0x200001b8

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f003 fdf8 	bl	8004338 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001b7 	.word	0x200001b7
 80007ac:	200001b8 	.word	0x200001b8

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001b5 	.word	0x200001b5

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 f86a 	bl	80049b4 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f004 f85e 	bl	80049b4 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001b0 	.word	0x200001b0
 8000930:	2000019a 	.word	0x2000019a
 8000934:	2000019c 	.word	0x2000019c
 8000938:	200001b4 	.word	0x200001b4

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f004 f832 	bl	80049b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f003 fcf1 	bl	8004338 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f004 f827 	bl	80049b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f003 fce6 	bl	8004338 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f004 f81c 	bl	80049b4 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f003 fcdb 	bl	8004338 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001b0 	.word	0x200001b0
 800098c:	2000019e 	.word	0x2000019e

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f003 fff9 	bl	80049b4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200001b0 	.word	0x200001b0
 80009e0:	200001a0 	.word	0x200001a0

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f003 ffcf 	bl	80049b4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001b0 	.word	0x200001b0
 8000a34:	200001a0 	.word	0x200001a0

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f003 fc16 	bl	800426c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f842 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 fae6 	bl	8001014 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a48:	f000 f8a6 	bl	8000b98 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a4c:	f000 f93e 	bl	8000ccc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000a50:	f000 fabe 	bl	8000fd0 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8000a54:	f000 f8e0 	bl	8000c18 <MX_RTC_Init>
  MX_TIM4_Init();
 8000a58:	f000 fa3c 	bl	8000ed4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000a5c:	f000 f974 	bl	8000d48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a60:	f000 f9c0 	bl	8000de4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000a64:	f000 fa84 	bl	8000f70 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000a68:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <main+0x80>)
 8000a6a:	f006 fa17 	bl	8006e9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <main+0x84>)
 8000a70:	f006 fa14 	bl	8006e9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <main+0x88>)
 8000a76:	f006 fa11 	bl	8006e9c <HAL_TIM_Base_Start_IT>


  programInit();
 8000a7a:	f000 ff3b 	bl	80018f4 <programInit>
  PWM_Start();
 8000a7e:	f003 f92f 	bl	8003ce0 <PWM_Start>


  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a88:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <main+0x8c>)
 8000a8a:	f003 ff93 	bl	80049b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <main+0x8c>)
 8000a96:	f003 ff8d 	bl	80049b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa0:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <main+0x8c>)
 8000aa2:	f003 ff87 	bl	80049b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <main+0x8c>)
 8000aae:	f003 ff81 	bl	80049b4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  programLoop();
 8000ab2:	f001 fbcd 	bl	8002250 <programLoop>
  {
 8000ab6:	e7fc      	b.n	8000ab2 <main+0x7a>
 8000ab8:	2000032c 	.word	0x2000032c
 8000abc:	20000294 	.word	0x20000294
 8000ac0:	200002e0 	.word	0x200002e0
 8000ac4:	48000c00 	.word	0x48000c00

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b09e      	sub	sp, #120	; 0x78
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ad2:	2228      	movs	r2, #40	; 0x28
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f008 feae 	bl	8009838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	463b      	mov	r3, r7
 8000aee:	223c      	movs	r2, #60	; 0x3c
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fea0 	bl	8009838 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000af8:	230b      	movs	r3, #11
 8000afa:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000afc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b00:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b06:	2301      	movs	r3, #1
 8000b08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b12:	2302      	movs	r3, #2
 8000b14:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b1c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b20:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b26:	4618      	mov	r0, r3
 8000b28:	f004 f986 	bl	8004e38 <HAL_RCC_OscConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b32:	f000 fb7f 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b36:	230f      	movs	r3, #15
 8000b38:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b50:	2102      	movs	r1, #2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f005 f9ae 	bl	8005eb4 <HAL_RCC_ClockConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b5e:	f000 fb69 	bl	8001234 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <SystemClock_Config+0xcc>)
 8000b64:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b72:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f005 fbd0 	bl	8006320 <HAL_RCCEx_PeriphCLKConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b86:	f000 fb55 	bl	8001234 <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3778      	adds	r7, #120	; 0x78
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	00030024 	.word	0x00030024

08000b98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000b9e:	4a1c      	ldr	r2, [pc, #112]	; (8000c10 <MX_I2C1_Init+0x78>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <MX_I2C1_Init+0x7c>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd2:	480e      	ldr	r0, [pc, #56]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bd4:	f003 ff38 	bl	8004a48 <HAL_I2C_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bde:	f000 fb29 	bl	8001234 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000be2:	2100      	movs	r1, #0
 8000be4:	4809      	ldr	r0, [pc, #36]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000be6:	f003 ffbe 	bl	8004b66 <HAL_I2CEx_ConfigAnalogFilter>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bf0:	f000 fb20 	bl	8001234 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bf8:	f004 f800 	bl	8004bfc <HAL_I2CEx_ConfigDigitalFilter>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c02:	f000 fb17 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200001bc 	.word	0x200001bc
 8000c10:	40005400 	.word	0x40005400
 8000c14:	2000090e 	.word	0x2000090e

08000c18 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c32:	4a25      	ldr	r2, [pc, #148]	; (8000cc8 <MX_RTC_Init+0xb0>)
 8000c34:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 8000c3c:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c3e:	2227      	movs	r2, #39	; 0x27
 8000c40:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c48:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c5c:	4819      	ldr	r0, [pc, #100]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c5e:	f005 fd0f 	bl	8006680 <HAL_RTC_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000c68:	f000 fae4 	bl	8001234 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2201      	movs	r2, #1
 8000c84:	4619      	mov	r1, r3
 8000c86:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000c88:	f005 fd7d 	bl	8006786 <HAL_RTC_SetTime>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000c92:	f000 facf 	bl	8001234 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c96:	2301      	movs	r3, #1
 8000c98:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_RTC_Init+0xac>)
 8000cae:	f005 fe62 	bl	8006976 <HAL_RTC_SetDate>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000cb8:	f000 fabc 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000210 	.word	0x20000210
 8000cc8:	40002800 	.word	0x40002800

08000ccc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <MX_SPI1_Init+0x78>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000cd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000ce6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cfe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d02:	2208      	movs	r2, #8
 8000d04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d1a:	2207      	movs	r2, #7
 8000d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d26:	2208      	movs	r2, #8
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_SPI1_Init+0x74>)
 8000d2c:	f005 ffb4 	bl	8006c98 <HAL_SPI_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 fa7d 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000230 	.word	0x20000230
 8000d44:	40013000 	.word	0x40013000

08000d48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18000;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d70:	f244 6250 	movw	r2, #18000	; 0x4650
 8000d74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d90:	4813      	ldr	r0, [pc, #76]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000d92:	f006 f82c 	bl	8006dee <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d9c:	f000 fa4a 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000dae:	f006 fc75 	bl	800769c <HAL_TIM_ConfigClockSource>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000db8:	f000 fa3c 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_TIM2_Init+0x98>)
 8000dca:	f007 f97f 	bl	80080cc <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000dd4:	f000 fa2e 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000294 	.word	0x20000294

08000de4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	; 0x38
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e04:	463b      	mov	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
 8000e12:	615a      	str	r2, [r3, #20]
 8000e14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e18:	4a2d      	ldr	r2, [pc, #180]	; (8000ed0 <MX_TIM3_Init+0xec>)
 8000e1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e3c:	4823      	ldr	r0, [pc, #140]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e3e:	f005 ffd6 	bl	8006dee <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e48:	f000 f9f4 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e56:	4619      	mov	r1, r3
 8000e58:	481c      	ldr	r0, [pc, #112]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e5a:	f006 fc1f 	bl	800769c <HAL_TIM_ConfigClockSource>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e64:	f000 f9e6 	bl	8001234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e68:	4818      	ldr	r0, [pc, #96]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e6a:	f006 f881 	bl	8006f70 <HAL_TIM_PWM_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e74:	f000 f9de 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	4811      	ldr	r0, [pc, #68]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000e88:	f007 f920 	bl	80080cc <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e92:	f000 f9cf 	bl	8001234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e96:	2360      	movs	r3, #96	; 0x60
 8000e98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4807      	ldr	r0, [pc, #28]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000eae:	f006 fae1 	bl	8007474 <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000eb8:	f000 f9bc 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <MX_TIM3_Init+0xe8>)
 8000ebe:	f002 fe47 	bl	8003b50 <HAL_TIM_MspPostInit>

}
 8000ec2:	bf00      	nop
 8000ec4:	3738      	adds	r7, #56	; 0x38
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200002e0 	.word	0x200002e0
 8000ed0:	40000400 	.word	0x40000400

08000ed4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <MX_TIM4_Init+0x98>)
 8000ef6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48-1;
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000efa:	222f      	movs	r2, #47	; 0x2f
 8000efc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f06:	2209      	movs	r2, #9
 8000f08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f16:	4814      	ldr	r0, [pc, #80]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f18:	f005 ff69 	bl	8006dee <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000f22:	f000 f987 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	480d      	ldr	r0, [pc, #52]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f34:	f006 fbb2 	bl	800769c <HAL_TIM_ConfigClockSource>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f000 f979 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <MX_TIM4_Init+0x94>)
 8000f50:	f007 f8bc 	bl	80080cc <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000f5a:	f000 f96b 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000032c 	.word	0x2000032c
 8000f6c:	40000800 	.word	0x40000800

08000f70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <MX_USART3_UART_Init+0x5c>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f7c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000fb4:	f007 f928 	bl	8008208 <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fbe:	f000 f939 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000378 	.word	0x20000378
 8000fcc:	40004800 	.word	0x40004800

08000fd0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <MX_USB_PCD_Init+0x40>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000fdc:	2208      	movs	r2, #8
 8000fde:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_USB_PCD_Init+0x3c>)
 8000ffa:	f003 fe4b 	bl	8004c94 <HAL_PCD_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001004:	f000 f916 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000400 	.word	0x20000400
 8001010:	40005c00 	.word	0x40005c00

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	; 0x30
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800102a:	4b7d      	ldr	r3, [pc, #500]	; (8001220 <MX_GPIO_Init+0x20c>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	4a7c      	ldr	r2, [pc, #496]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001034:	6153      	str	r3, [r2, #20]
 8001036:	4b7a      	ldr	r3, [pc, #488]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b77      	ldr	r3, [pc, #476]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a76      	ldr	r2, [pc, #472]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001048:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800104c:	6153      	str	r3, [r2, #20]
 800104e:	4b74      	ldr	r3, [pc, #464]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105a:	4b71      	ldr	r3, [pc, #452]	; (8001220 <MX_GPIO_Init+0x20c>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a70      	ldr	r2, [pc, #448]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b6e      	ldr	r3, [pc, #440]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b6b      	ldr	r3, [pc, #428]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4a6a      	ldr	r2, [pc, #424]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	6153      	str	r3, [r2, #20]
 800107e:	4b68      	ldr	r3, [pc, #416]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b65      	ldr	r3, [pc, #404]	; (8001220 <MX_GPIO_Init+0x20c>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a64      	ldr	r2, [pc, #400]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b62      	ldr	r3, [pc, #392]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a2:	4b5f      	ldr	r3, [pc, #380]	; (8001220 <MX_GPIO_Init+0x20c>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a5e      	ldr	r2, [pc, #376]	; (8001220 <MX_GPIO_Init+0x20c>)
 80010a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b5c      	ldr	r3, [pc, #368]	; (8001220 <MX_GPIO_Init+0x20c>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010ba:	2200      	movs	r2, #0
 80010bc:	f64f 7108 	movw	r1, #65288	; 0xff08
 80010c0:	4858      	ldr	r0, [pc, #352]	; (8001224 <MX_GPIO_Init+0x210>)
 80010c2:	f003 fc77 	bl	80049b4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2110      	movs	r1, #16
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f003 fc71 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2150      	movs	r1, #80	; 0x50
 80010d6:	4854      	ldr	r0, [pc, #336]	; (8001228 <MX_GPIO_Init+0x214>)
 80010d8:	f003 fc6c 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f242 0105 	movw	r1, #8197	; 0x2005
 80010e2:	4852      	ldr	r0, [pc, #328]	; (800122c <MX_GPIO_Init+0x218>)
 80010e4:	f003 fc66 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 413e 	mov.w	r1, #48640	; 0xbe00
 80010ee:	4850      	ldr	r0, [pc, #320]	; (8001230 <MX_GPIO_Init+0x21c>)
 80010f0:	f003 fc60 	bl	80049b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010f4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80010f8:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4845      	ldr	r0, [pc, #276]	; (8001224 <MX_GPIO_Init+0x210>)
 800110e:	f003 fabf 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8001112:	2320      	movs	r3, #32
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001116:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	483f      	ldr	r0, [pc, #252]	; (8001224 <MX_GPIO_Init+0x210>)
 8001128:	f003 fab2 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800112c:	2301      	movs	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f003 faa5 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001146:	2310      	movs	r3, #16
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f003 fa96 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001164:	2350      	movs	r3, #80	; 0x50
 8001166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	482b      	ldr	r0, [pc, #172]	; (8001228 <MX_GPIO_Init+0x214>)
 800117c:	f003 fa88 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 8001180:	f242 0305 	movw	r3, #8197	; 0x2005
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	4824      	ldr	r0, [pc, #144]	; (800122c <MX_GPIO_Init+0x218>)
 800119a:	f003 fa79 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800119e:	f44f 433e 	mov.w	r3, #48640	; 0xbe00
 80011a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	481e      	ldr	r0, [pc, #120]	; (8001230 <MX_GPIO_Init+0x21c>)
 80011b8:	f003 fa6a 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011bc:	230f      	movs	r3, #15
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011c6:	2302      	movs	r3, #2
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4817      	ldr	r0, [pc, #92]	; (8001230 <MX_GPIO_Init+0x21c>)
 80011d2:	f003 fa5d 	bl	8004690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2100      	movs	r1, #0
 80011da:	2006      	movs	r0, #6
 80011dc:	f003 f9ab 	bl	8004536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011e0:	2006      	movs	r0, #6
 80011e2:	f003 f9c4 	bl	800456e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 1);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2100      	movs	r1, #0
 80011ea:	2007      	movs	r0, #7
 80011ec:	f003 f9a3 	bl	8004536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011f0:	2007      	movs	r0, #7
 80011f2:	f003 f9bc 	bl	800456e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2100      	movs	r1, #0
 80011fa:	2008      	movs	r0, #8
 80011fc:	f003 f99b 	bl	8004536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001200:	2008      	movs	r0, #8
 8001202:	f003 f9b4 	bl	800456e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 8001206:	2201      	movs	r2, #1
 8001208:	2100      	movs	r1, #0
 800120a:	2009      	movs	r0, #9
 800120c:	f003 f993 	bl	8004536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001210:	2009      	movs	r0, #9
 8001212:	f003 f9ac 	bl	800456e <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	; 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	48001000 	.word	0x48001000
 8001228:	48000800 	.word	0x48000800
 800122c:	48000400 	.word	0x48000400
 8001230:	48000c00 	.word	0x48000c00

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>
	...

08001240 <set_start_time>:
extern RTC_HandleTypeDef hrtc;

RTC_TimeTypeDef mytime ;
RTC_DateTypeDef mydate ;

void set_start_time(int hour, int minute, int second){
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]

	RTC_TimeTypeDef start_t ;

	start_t.Hours = 20;
 800124c:	2314      	movs	r3, #20
 800124e:	753b      	strb	r3, [r7, #20]
	start_t.Minutes = 20;
 8001250:	2314      	movs	r3, #20
 8001252:	757b      	strb	r3, [r7, #21]
	start_t.Seconds = 20;
 8001254:	2314      	movs	r3, #20
 8001256:	75bb      	strb	r3, [r7, #22]

    HAL_RTC_SetTime(&hrtc, &start_t, RTC_FORMAT_BIN);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <set_start_time+0x30>)
 8001262:	f005 fa90 	bl	8006786 <HAL_RTC_SetTime>
}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	; 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000210 	.word	0x20000210

08001274 <set_start_day>:

void set_start_day(int year, int month, int day){
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef start_t ;

	start_t.Year = 2024;
 8001280:	23e8      	movs	r3, #232	; 0xe8
 8001282:	75fb      	strb	r3, [r7, #23]
	start_t.Month = 3;
 8001284:	2303      	movs	r3, #3
 8001286:	757b      	strb	r3, [r7, #21]
	start_t.Date = 20;
 8001288:	2314      	movs	r3, #20
 800128a:	75bb      	strb	r3, [r7, #22]

    HAL_RTC_SetDate(&hrtc, &start_t, RTC_FORMAT_BIN);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <set_start_day+0x30>)
 8001296:	f005 fb6e 	bl	8006976 <HAL_RTC_SetDate>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000210 	.word	0x20000210

080012a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
  if (last_gpio_exti + 200 > HAL_GetTick()) // Simple button debouncing
 80012b2:	4bb3      	ldr	r3, [pc, #716]	; (8001580 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80012ba:	f003 f831 	bl	8004320 <HAL_GetTick>
 80012be:	4603      	mov	r3, r0
 80012c0:	429c      	cmp	r4, r3
 80012c2:	f200 81bc 	bhi.w	800163e <HAL_GPIO_EXTI_Callback+0x396>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 80012c6:	f003 f82b 	bl	8004320 <HAL_GetTick>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4aac      	ldr	r2, [pc, #688]	; (8001580 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80012ce:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 80012d0:	23ff      	movs	r3, #255	; 0xff
 80012d2:	73fb      	strb	r3, [r7, #15]
  int8_t column_number = -1;
 80012d4:	23ff      	movs	r3, #255	; 0xff
 80012d6:	73bb      	strb	r3, [r7, #14]
  {
    // blue_button_pressed = 1;
    // return;
  }

  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 80012d8:	2300      	movs	r3, #0
 80012da:	737b      	strb	r3, [r7, #13]
 80012dc:	e00b      	b.n	80012f6 <HAL_GPIO_EXTI_Callback+0x4e>
  {
    if (GPIO_Pin == Row_pins[row])
 80012de:	7b7b      	ldrb	r3, [r7, #13]
 80012e0:	4aa8      	ldr	r2, [pc, #672]	; (8001584 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80012e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e6:	88fa      	ldrh	r2, [r7, #6]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d101      	bne.n	80012f0 <HAL_GPIO_EXTI_Callback+0x48>
    {
      row_number = row;
 80012ec:	7b7b      	ldrb	r3, [r7, #13]
 80012ee:	73fb      	strb	r3, [r7, #15]
  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 80012f0:	7b7b      	ldrb	r3, [r7, #13]
 80012f2:	3301      	adds	r3, #1
 80012f4:	737b      	strb	r3, [r7, #13]
 80012f6:	7b7b      	ldrb	r3, [r7, #13]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d9f0      	bls.n	80012de <HAL_GPIO_EXTI_Callback+0x36>
    }
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 80012fc:	4ba2      	ldr	r3, [pc, #648]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80012fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001302:	2200      	movs	r2, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fb55 	bl	80049b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 800130a:	4b9f      	ldr	r3, [pc, #636]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800130c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001310:	2200      	movs	r2, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fb4e 	bl	80049b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8001318:	4b9b      	ldr	r3, [pc, #620]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800131a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131e:	2200      	movs	r2, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f003 fb47 	bl	80049b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8001326:	4b98      	ldr	r3, [pc, #608]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132c:	2200      	movs	r2, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fb40 	bl	80049b4 <HAL_GPIO_WritePin>

  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8001334:	2300      	movs	r3, #0
 8001336:	733b      	strb	r3, [r7, #12]
 8001338:	e02d      	b.n	8001396 <HAL_GPIO_EXTI_Callback+0xee>
  {
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 800133a:	7b3b      	ldrb	r3, [r7, #12]
 800133c:	4a93      	ldr	r2, [pc, #588]	; (800158c <HAL_GPIO_EXTI_Callback+0x2e4>)
 800133e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001342:	7b3b      	ldrb	r3, [r7, #12]
 8001344:	4a92      	ldr	r2, [pc, #584]	; (8001590 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134a:	2201      	movs	r2, #1
 800134c:	4619      	mov	r1, r3
 800134e:	f003 fb31 	bl	80049b4 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number]))
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4a8f      	ldr	r2, [pc, #572]	; (8001594 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001360:	4988      	ldr	r1, [pc, #544]	; (8001584 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001362:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f003 fb0b 	bl	8004984 <HAL_GPIO_ReadPin>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_GPIO_EXTI_Callback+0xd0>
    {
      column_number = col;
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	73bb      	strb	r3, [r7, #14]
    }
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8001378:	7b3b      	ldrb	r3, [r7, #12]
 800137a:	4a84      	ldr	r2, [pc, #528]	; (800158c <HAL_GPIO_EXTI_Callback+0x2e4>)
 800137c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001380:	7b3b      	ldrb	r3, [r7, #12]
 8001382:	4a83      	ldr	r2, [pc, #524]	; (8001590 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	f003 fb12 	bl	80049b4 <HAL_GPIO_WritePin>
  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8001390:	7b3b      	ldrb	r3, [r7, #12]
 8001392:	3301      	adds	r3, #1
 8001394:	733b      	strb	r3, [r7, #12]
 8001396:	7b3b      	ldrb	r3, [r7, #12]
 8001398:	2b03      	cmp	r3, #3
 800139a:	d9ce      	bls.n	800133a <HAL_GPIO_EXTI_Callback+0x92>
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 800139c:	4b7a      	ldr	r3, [pc, #488]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800139e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a2:	2201      	movs	r2, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fb05 	bl	80049b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 80013aa:	4b77      	ldr	r3, [pc, #476]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80013ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b0:	2201      	movs	r2, #1
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fafe 	bl	80049b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 80013b8:	4b73      	ldr	r3, [pc, #460]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80013ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013be:	2201      	movs	r2, #1
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 faf7 	bl	80049b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 80013c6:	4b70      	ldr	r3, [pc, #448]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80013c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013cc:	2201      	movs	r2, #1
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 faf0 	bl	80049b4 <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 80013d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	f000 8131 	beq.w	8001642 <HAL_GPIO_EXTI_Callback+0x39a>
 80013e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	f000 812b 	beq.w	8001642 <HAL_GPIO_EXTI_Callback+0x39a>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	7bbb      	ldrb	r3, [r7, #14]
 80013f4:	4413      	add	r3, r2
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	3301      	adds	r3, #1
 80013fa:	72fb      	strb	r3, [r7, #11]
  switch (button_number){
 80013fc:	7afb      	ldrb	r3, [r7, #11]
 80013fe:	3b01      	subs	r3, #1
 8001400:	2b0f      	cmp	r3, #15
 8001402:	f200 8120 	bhi.w	8001646 <HAL_GPIO_EXTI_Callback+0x39e>
 8001406:	a201      	add	r2, pc, #4	; (adr r2, 800140c <HAL_GPIO_EXTI_Callback+0x164>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	0800144d 	.word	0x0800144d
 8001410:	08001461 	.word	0x08001461
 8001414:	08001475 	.word	0x08001475
 8001418:	08001483 	.word	0x08001483
 800141c:	08001491 	.word	0x08001491
 8001420:	080014a5 	.word	0x080014a5
 8001424:	080014b3 	.word	0x080014b3
 8001428:	080014c1 	.word	0x080014c1
 800142c:	080014cf 	.word	0x080014cf
 8001430:	080014fb 	.word	0x080014fb
 8001434:	08001527 	.word	0x08001527
 8001438:	08001535 	.word	0x08001535
 800143c:	08001549 	.word	0x08001549
 8001440:	080015a9 	.word	0x080015a9
 8001444:	08001617 	.word	0x08001617
 8001448:	0800162b 	.word	0x0800162b
  case 1: //move	//1
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001452:	4851      	ldr	r0, [pc, #324]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001454:	f003 faae 	bl	80049b4 <HAL_GPIO_WritePin>
	move(1);
 8001458:	2001      	movs	r0, #1
 800145a:	f001 fdad 	bl	8002fb8 <move>

    break;
 800145e:	e0fb      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
  case 2: //boom 	//2
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001466:	484c      	ldr	r0, [pc, #304]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001468:	f003 faa4 	bl	80049b4 <HAL_GPIO_WritePin>
	boom(1);
 800146c:	2001      	movs	r0, #1
 800146e:	f000 ff8b 	bl	8002388 <boom>
    break;
 8001472:	e0f1      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
  case 3:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001474:	2201      	movs	r2, #1
 8001476:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800147a:	4847      	ldr	r0, [pc, #284]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800147c:	f003 fa9a 	bl	80049b4 <HAL_GPIO_WritePin>
    break;
 8001480:	e0ea      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
  case 4:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001488:	4843      	ldr	r0, [pc, #268]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800148a:	f003 fa93 	bl	80049b4 <HAL_GPIO_WritePin>
    break;
 800148e:	e0e3      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
  case 5: //dir	 	//4
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001496:	4840      	ldr	r0, [pc, #256]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001498:	f003 fa8c 	bl	80049b4 <HAL_GPIO_WritePin>
	 change_dir(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f000 ff29 	bl	80022f4 <change_dir>
    break;
 80014a2:	e0d9      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
  case 6:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014aa:	483b      	ldr	r0, [pc, #236]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80014ac:	f003 fa82 	bl	80049b4 <HAL_GPIO_WritePin>
    break;
 80014b0:	e0d2      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
  case 7:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b8:	4837      	ldr	r0, [pc, #220]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80014ba:	f003 fa7b 	bl	80049b4 <HAL_GPIO_WritePin>
    break;
 80014be:	e0cb      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
  case 8:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c6:	4834      	ldr	r0, [pc, #208]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80014c8:	f003 fa74 	bl	80049b4 <HAL_GPIO_WritePin>
    break;
 80014cc:	e0c4      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
  case 9: // menu curser up
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d4:	4830      	ldr	r0, [pc, #192]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80014d6:	f003 fa6d 	bl	80049b4 <HAL_GPIO_WritePin>
		if(pageflag==1){
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	f040 80b3 	bne.w	800164a <HAL_GPIO_EXTI_Callback+0x3a2>
			if (menu_curser_r > 1){
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	f340 80ae 	ble.w	800164a <HAL_GPIO_EXTI_Callback+0x3a2>
				menu_curser_r -= 1;
 80014ee:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	4a2a      	ldr	r2, [pc, #168]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80014f6:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 80014f8:	e0a7      	b.n	800164a <HAL_GPIO_EXTI_Callback+0x3a2>
  case 10: // menu cursor down
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001500:	4825      	ldr	r0, [pc, #148]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001502:	f003 fa57 	bl	80049b4 <HAL_GPIO_WritePin>
		if(pageflag==1){
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	f040 809f 	bne.w	800164e <HAL_GPIO_EXTI_Callback+0x3a6>
			if (menu_curser_r  < 3){
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b02      	cmp	r3, #2
 8001516:	f300 809a 	bgt.w	800164e <HAL_GPIO_EXTI_Callback+0x3a6>
				menu_curser_r +=1;
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001522:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 8001524:	e093      	b.n	800164e <HAL_GPIO_EXTI_Callback+0x3a6>
  case 11:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152c:	481a      	ldr	r0, [pc, #104]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800152e:	f003 fa41 	bl	80049b4 <HAL_GPIO_WritePin>
    break;
 8001532:	e091      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
  case 12: //Dir	//C
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153a:	4817      	ldr	r0, [pc, #92]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800153c:	f003 fa3a 	bl	80049b4 <HAL_GPIO_WritePin>
		change_dir(2);
 8001540:	2002      	movs	r0, #2
 8001542:	f000 fed7 	bl	80022f4 <change_dir>
    break;
 8001546:	e087      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
  case 13: //goto menu
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8001548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800154c:	4812      	ldr	r0, [pc, #72]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800154e:	f003 fa49 	bl	80049e4 <HAL_GPIO_TogglePin>
		if(pageflag == 0 || pageflag == 3 || pageflag == 4 || pageflag == 2){
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <HAL_GPIO_EXTI_Callback+0x2ca>
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_EXTI_Callback+0x2ca>
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b04      	cmp	r3, #4
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_EXTI_Callback+0x2ca>
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d16f      	bne.n	8001652 <HAL_GPIO_EXTI_Callback+0x3aa>
			change_page = 1;
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]
			pageflag = 1;
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f4>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]
		}
    break;
 800157e:	e068      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x3aa>
 8001580:	200006f8 	.word	0x200006f8
 8001584:	0800b7ec 	.word	0x0800b7ec
 8001588:	48000c00 	.word	0x48000c00
 800158c:	0800b7f4 	.word	0x0800b7f4
 8001590:	0800b804 	.word	0x0800b804
 8001594:	0800b7dc 	.word	0x0800b7dc
 8001598:	48001000 	.word	0x48001000
 800159c:	200006ec 	.word	0x200006ec
 80015a0:	20000004 	.word	0x20000004
 80015a4:	200006fc 	.word	0x200006fc
  case 14: // select in menu
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ae:	482c      	ldr	r0, [pc, #176]	; (8001660 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80015b0:	f003 fa00 	bl	80049b4 <HAL_GPIO_WritePin>
		if(pageflag == 1){
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_GPIO_EXTI_Callback+0x3bc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d14c      	bne.n	8001656 <HAL_GPIO_EXTI_Callback+0x3ae>
			if(menu_curser_r == 1){
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d112      	bne.n	80015ea <HAL_GPIO_EXTI_Callback+0x342>
				pageflag = 2;
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_GPIO_EXTI_Callback+0x3bc>)
 80015c6:	2202      	movs	r2, #2
 80015c8:	601a      	str	r2, [r3, #0]
				change_page = 1;
 80015ca:	4b28      	ldr	r3, [pc, #160]	; (800166c <HAL_GPIO_EXTI_Callback+0x3c4>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
				game_started = 1;
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_GPIO_EXTI_Callback+0x3c8>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
				for30timer = HAL_GetTick();
 80015d6:	f002 fea3 	bl	8004320 <HAL_GetTick>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a25      	ldr	r2, [pc, #148]	; (8001674 <HAL_GPIO_EXTI_Callback+0x3cc>)
 80015de:	6013      	str	r3, [r2, #0]
				PWM_Change_Tone(0, 0);
 80015e0:	2100      	movs	r1, #0
 80015e2:	2000      	movs	r0, #0
 80015e4:	f002 fb8c 	bl	8003d00 <PWM_Change_Tone>
				change_page = 1;

			}
		}

    break;
 80015e8:	e035      	b.n	8001656 <HAL_GPIO_EXTI_Callback+0x3ae>
			else if(menu_curser_r == 2){
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_GPIO_EXTI_Callback+0x3c0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d106      	bne.n	8001600 <HAL_GPIO_EXTI_Callback+0x358>
				pageflag = 3;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <HAL_GPIO_EXTI_Callback+0x3bc>)
 80015f4:	2203      	movs	r2, #3
 80015f6:	601a      	str	r2, [r3, #0]
				change_page = 1;
 80015f8:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_GPIO_EXTI_Callback+0x3c4>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
    break;
 80015fe:	e02a      	b.n	8001656 <HAL_GPIO_EXTI_Callback+0x3ae>
			else if(menu_curser_r == 3){
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_GPIO_EXTI_Callback+0x3c0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d126      	bne.n	8001656 <HAL_GPIO_EXTI_Callback+0x3ae>
				pageflag = 4;
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_GPIO_EXTI_Callback+0x3bc>)
 800160a:	2204      	movs	r2, #4
 800160c:	601a      	str	r2, [r3, #0]
				change_page = 1;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_GPIO_EXTI_Callback+0x3c4>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
    break;
 8001614:	e01f      	b.n	8001656 <HAL_GPIO_EXTI_Callback+0x3ae>
  case 15: //Boom	//#
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001616:	2201      	movs	r2, #1
 8001618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161c:	4810      	ldr	r0, [pc, #64]	; (8001660 <HAL_GPIO_EXTI_Callback+0x3b8>)
 800161e:	f003 f9c9 	bl	80049b4 <HAL_GPIO_WritePin>
		boom(2);
 8001622:	2002      	movs	r0, #2
 8001624:	f000 feb0 	bl	8002388 <boom>
    break;
 8001628:	e016      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
  case 16: //move	//D
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001630:	480b      	ldr	r0, [pc, #44]	; (8001660 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8001632:	f003 f9bf 	bl	80049b4 <HAL_GPIO_WritePin>
		move(2);
 8001636:	2002      	movs	r0, #2
 8001638:	f001 fcbe 	bl	8002fb8 <move>
    break;
 800163c:	e00c      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
    return;
 800163e:	bf00      	nop
 8001640:	e00a      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
    return; // Reject invalid scan
 8001642:	bf00      	nop
 8001644:	e008      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>

  default:
    break;
 8001646:	bf00      	nop
 8001648:	e006      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
    break;
 800164a:	bf00      	nop
 800164c:	e004      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
    break;
 800164e:	bf00      	nop
 8001650:	e002      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
    break;
 8001652:	bf00      	nop
 8001654:	e000      	b.n	8001658 <HAL_GPIO_EXTI_Callback+0x3b0>
    break;
 8001656:	bf00      	nop
  }
}
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	bd90      	pop	{r4, r7, pc}
 800165e:	bf00      	nop
 8001660:	48001000 	.word	0x48001000
 8001664:	200006ec 	.word	0x200006ec
 8001668:	20000004 	.word	0x20000004
 800166c:	200006fc 	.word	0x200006fc
 8001670:	200006f0 	.word	0x200006f0
 8001674:	200006f4 	.word	0x200006f4

08001678 <seven_segment_display_decimal>:
	.digits={0, 0, 0, 0},
	.number = 0};



void seven_segment_display_decimal(uint32_t n) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    if (n < 10) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b09      	cmp	r3, #9
 8001684:	d832      	bhi.n	80016ec <seven_segment_display_decimal+0x74>
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin, (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <seven_segment_display_decimal+0x7c>)
 8001688:	6a18      	ldr	r0, [r3, #32]
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <seven_segment_display_decimal+0x7c>)
 800168c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	f003 f98b 	bl	80049b4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin, (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <seven_segment_display_decimal+0x7c>)
 80016a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <seven_segment_display_decimal+0x7c>)
 80016a4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	f003 f97e 	bl	80049b4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin, (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <seven_segment_display_decimal+0x7c>)
 80016ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <seven_segment_display_decimal+0x7c>)
 80016be:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	f003 f971 	bl	80049b4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin, (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <seven_segment_display_decimal+0x7c>)
 80016d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <seven_segment_display_decimal+0x7c>)
 80016d8:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	f003 f964 	bl	80049b4 <HAL_GPIO_WritePin>
    }
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200000b0 	.word	0x200000b0

080016f8 <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i)
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	e00f      	b.n	8001724 <seven_segment_deactivate_digits+0x2c>
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin, GPIO_PIN_SET);
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <seven_segment_deactivate_digits+0x3c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800170c:	4a09      	ldr	r2, [pc, #36]	; (8001734 <seven_segment_deactivate_digits+0x3c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4413      	add	r3, r2
 8001714:	889b      	ldrh	r3, [r3, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	4619      	mov	r1, r3
 800171a:	f003 f94b 	bl	80049b4 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; ++i)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3301      	adds	r3, #1
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b03      	cmp	r3, #3
 8001728:	ddec      	ble.n	8001704 <seven_segment_deactivate_digits+0xc>
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200000b0 	.word	0x200000b0

08001738 <seven_segment_activate_digit>:

int last_time_on = 0;
void seven_segment_activate_digit(uint32_t d) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
    if (d < 4) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d80c      	bhi.n	8001760 <seven_segment_activate_digit+0x28>
    	HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <seven_segment_activate_digit+0x30>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800174e:	4a06      	ldr	r2, [pc, #24]	; (8001768 <seven_segment_activate_digit+0x30>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4413      	add	r3, r2
 8001756:	889b      	ldrh	r3, [r3, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	4619      	mov	r1, r3
 800175c:	f003 f92a 	bl	80049b4 <HAL_GPIO_WritePin>
//		}
//		else if (d != state){
//			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
//		}
    }
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200000b0 	.word	0x200000b0

0800176c <seven_segment_set_num>:

void seven_segment_set_num(int num[4]) {
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i <= 3; ++i) {
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	e00d      	b.n	8001796 <seven_segment_set_num+0x2a>
		seven_segment.digits[i] = num[i];
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	4a09      	ldr	r2, [pc, #36]	; (80017ac <seven_segment_set_num+0x40>)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3310      	adds	r3, #16
 800178c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i <= 3; ++i) {
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3301      	adds	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d9ee      	bls.n	800177a <seven_segment_set_num+0xe>
	}
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	200000b0 	.word	0x200000b0

080017b0 <seven_segment_refresh>:

void seven_segment_refresh(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
    static uint32_t state_tmp = 0;
    static uint32_t last_time_tmp = 0;
    if (HAL_GetTick() - last_time_tmp > 5) {
 80017b4:	f002 fdb4 	bl	8004320 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <seven_segment_refresh+0x50>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d91b      	bls.n	80017fc <seven_segment_refresh+0x4c>
        seven_segment_deactivate_digits();
 80017c4:	f7ff ff98 	bl	80016f8 <seven_segment_deactivate_digits>
        seven_segment_activate_digit(state_tmp);
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <seven_segment_refresh+0x54>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ffb3 	bl	8001738 <seven_segment_activate_digit>
        seven_segment_display_decimal(seven_segment.digits[state_tmp]);
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <seven_segment_refresh+0x54>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a0c      	ldr	r2, [pc, #48]	; (8001808 <seven_segment_refresh+0x58>)
 80017d8:	3310      	adds	r3, #16
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff4a 	bl	8001678 <seven_segment_display_decimal>
        state_tmp = (state_tmp + 1) % 4;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <seven_segment_refresh+0x54>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <seven_segment_refresh+0x54>)
 80017f0:	6013      	str	r3, [r2, #0]
        last_time_tmp = HAL_GetTick();
 80017f2:	f002 fd95 	bl	8004320 <HAL_GetTick>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a01      	ldr	r2, [pc, #4]	; (8001800 <seven_segment_refresh+0x50>)
 80017fa:	6013      	str	r3, [r2, #0]
    }
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000878 	.word	0x20000878
 8001804:	2000087c 	.word	0x2000087c
 8001808:	200000b0 	.word	0x200000b0

0800180c <setNumber>:


void setNumber(int number){
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	int a = 0, b = 0, c = 0, d = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
	if (number <= 9999 && number >= 0){
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f242 720f 	movw	r2, #9999	; 0x270f
 800182a:	4293      	cmp	r3, r2
 800182c:	dc5b      	bgt.n	80018e6 <setNumber+0xda>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db58      	blt.n	80018e6 <setNumber+0xda>
		a = number % 10;
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <setNumber+0xe4>)
 8001838:	fb83 1302 	smull	r1, r3, r3, r2
 800183c:	1099      	asrs	r1, r3, #2
 800183e:	17d3      	asrs	r3, r2, #31
 8001840:	1ac9      	subs	r1, r1, r3
 8001842:	460b      	mov	r3, r1
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
		number /= 10;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <setNumber+0xe4>)
 8001852:	fb82 1203 	smull	r1, r2, r2, r3
 8001856:	1092      	asrs	r2, r2, #2
 8001858:	17db      	asrs	r3, r3, #31
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	607b      	str	r3, [r7, #4]
		b = number % 10;
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <setNumber+0xe4>)
 8001862:	fb83 1302 	smull	r1, r3, r3, r2
 8001866:	1099      	asrs	r1, r3, #2
 8001868:	17d3      	asrs	r3, r2, #31
 800186a:	1ac9      	subs	r1, r1, r3
 800186c:	460b      	mov	r3, r1
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	623b      	str	r3, [r7, #32]
		number /= 10;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <setNumber+0xe4>)
 800187c:	fb82 1203 	smull	r1, r2, r2, r3
 8001880:	1092      	asrs	r2, r2, #2
 8001882:	17db      	asrs	r3, r3, #31
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	607b      	str	r3, [r7, #4]
		c = number % 10;
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <setNumber+0xe4>)
 800188c:	fb83 1302 	smull	r1, r3, r3, r2
 8001890:	1099      	asrs	r1, r3, #2
 8001892:	17d3      	asrs	r3, r2, #31
 8001894:	1ac9      	subs	r1, r1, r3
 8001896:	460b      	mov	r3, r1
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	61fb      	str	r3, [r7, #28]
		number /= 10;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <setNumber+0xe4>)
 80018a6:	fb82 1203 	smull	r1, r2, r2, r3
 80018aa:	1092      	asrs	r2, r2, #2
 80018ac:	17db      	asrs	r3, r3, #31
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	607b      	str	r3, [r7, #4]
		d = number % 10;
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <setNumber+0xe4>)
 80018b6:	fb83 1302 	smull	r1, r3, r3, r2
 80018ba:	1099      	asrs	r1, r3, #2
 80018bc:	17d3      	asrs	r3, r2, #31
 80018be:	1ac9      	subs	r1, r1, r3
 80018c0:	460b      	mov	r3, r1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	61bb      	str	r3, [r7, #24]
//		int numbers2[4]={d,c,b,a};
		int numbers2[4]={a,b,c,d};
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	617b      	str	r3, [r7, #20]
		seven_segment_set_num(numbers2);
 80018dc:	f107 0308 	add.w	r3, r7, #8
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff43 	bl	800176c <seven_segment_set_num>
	}

}
 80018e6:	bf00      	nop
 80018e8:	3728      	adds	r7, #40	; 0x28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	66666667 	.word	0x66666667

080018f4 <programInit>:
};

struct bullet bul[10];


void programInit() {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0a0      	sub	sp, #128	; 0x80
 80018f8:	af04      	add	r7, sp, #16
    Change_Melody(super_mario_bros, ARRAY_LENGTH(super_mario_bros));
 80018fa:	2141      	movs	r1, #65	; 0x41
 80018fc:	4853      	ldr	r0, [pc, #332]	; (8001a4c <programInit+0x158>)
 80018fe:	f002 fabd 	bl	8003e7c <Change_Melody>

	char data[100];
    int n = sprintf(data, "test\n");
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	4952      	ldr	r1, [pc, #328]	; (8001a50 <programInit+0x15c>)
 8001906:	4618      	mov	r0, r3
 8001908:	f007 ffdc 	bl	80098c4 <siprintf>
 800190c:	66b8      	str	r0, [r7, #104]	; 0x68
	HAL_UART_Transmit(&huart3, data, n, 1000);
 800190e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001910:	b29a      	uxth	r2, r3
 8001912:	1d39      	adds	r1, r7, #4
 8001914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001918:	484e      	ldr	r0, [pc, #312]	; (8001a54 <programInit+0x160>)
 800191a:	f006 fcc3 	bl	80082a4 <HAL_UART_Transmit>
	uart_rx_enable_it();
 800191e:	f001 fde5 	bl	80034ec <uart_rx_enable_it>


	LiquidCrystal(GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_7);
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	9303      	str	r3, [sp, #12]
 8001926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800192a:	9302      	str	r3, [sp, #8]
 800192c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	2308      	movs	r3, #8
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2304      	movs	r3, #4
 8001938:	2202      	movs	r2, #2
 800193a:	2101      	movs	r1, #1
 800193c:	4846      	ldr	r0, [pc, #280]	; (8001a58 <programInit+0x164>)
 800193e:	f7fe fc9f 	bl	8000280 <LiquidCrystal>
	begin(20, 4);
 8001942:	2104      	movs	r1, #4
 8001944:	2014      	movs	r0, #20
 8001946:	f7fe fd33 	bl	80003b0 <begin>
//    setNumber(1234);



	set_start_time(20, 20, 20);
 800194a:	2214      	movs	r2, #20
 800194c:	2114      	movs	r1, #20
 800194e:	2014      	movs	r0, #20
 8001950:	f7ff fc76 	bl	8001240 <set_start_time>
	set_start_day(2024,2,3);
 8001954:	2203      	movs	r2, #3
 8001956:	2102      	movs	r1, #2
 8001958:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
 800195c:	f7ff fc8a 	bl	8001274 <set_start_day>
	createChar(num_tank_right, tank_right);
 8001960:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <programInit+0x168>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	493e      	ldr	r1, [pc, #248]	; (8001a60 <programInit+0x16c>)
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe ff63 	bl	8000832 <createChar>
	createChar(num_tank_up, tank_up);
 800196c:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <programInit+0x170>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	493d      	ldr	r1, [pc, #244]	; (8001a68 <programInit+0x174>)
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe ff5d 	bl	8000832 <createChar>
	createChar(num_tank_down, tank_down);
 8001978:	4b3c      	ldr	r3, [pc, #240]	; (8001a6c <programInit+0x178>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	493c      	ldr	r1, [pc, #240]	; (8001a70 <programInit+0x17c>)
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe ff57 	bl	8000832 <createChar>
	createChar(num_tank_left, tank_left);
 8001984:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <programInit+0x180>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	493b      	ldr	r1, [pc, #236]	; (8001a78 <programInit+0x184>)
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe ff51 	bl	8000832 <createChar>
	createChar(num_extra_bullet, extra_bullet);
 8001990:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <programInit+0x188>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	493a      	ldr	r1, [pc, #232]	; (8001a80 <programInit+0x18c>)
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe ff4b 	bl	8000832 <createChar>
	createChar(num_chance, chance);
 800199c:	4b39      	ldr	r3, [pc, #228]	; (8001a84 <programInit+0x190>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4939      	ldr	r1, [pc, #228]	; (8001a88 <programInit+0x194>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe ff45 	bl	8000832 <createChar>
	createChar(num_health, health);
 80019a8:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <programInit+0x198>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4938      	ldr	r1, [pc, #224]	; (8001a90 <programInit+0x19c>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe ff3f 	bl	8000832 <createChar>
	createChar(num_arrow, arrow);
 80019b4:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <programInit+0x1a0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4937      	ldr	r1, [pc, #220]	; (8001a98 <programInit+0x1a4>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe ff39 	bl	8000832 <createChar>
//	starter();
	pageflag=0;
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <programInit+0x1a8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 80019c6:	2300      	movs	r3, #0
 80019c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019ca:	e035      	b.n	8001a38 <programInit+0x144>
		bul[i].active=0;
 80019cc:	4934      	ldr	r1, [pc, #208]	; (8001aa0 <programInit+0x1ac>)
 80019ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	3310      	adds	r3, #16
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
		bul[i].direction=1;
 80019e0:	492f      	ldr	r1, [pc, #188]	; (8001aa0 <programInit+0x1ac>)
 80019e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	330c      	adds	r3, #12
 80019f0:	2201      	movs	r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
		bul[i].player_id=1;
 80019f4:	492a      	ldr	r1, [pc, #168]	; (8001aa0 <programInit+0x1ac>)
 80019f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
		bul[i].position_x=-1;
 8001a06:	4926      	ldr	r1, [pc, #152]	; (8001aa0 <programInit+0x1ac>)
 8001a08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	3304      	adds	r3, #4
 8001a16:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1a:	601a      	str	r2, [r3, #0]
		bul[i].position_y=-1;
 8001a1c:	4920      	ldr	r1, [pc, #128]	; (8001aa0 <programInit+0x1ac>)
 8001a1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 8001a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a34:	3301      	adds	r3, #1
 8001a36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a3a:	2b09      	cmp	r3, #9
 8001a3c:	ddc6      	ble.n	80019cc <programInit+0xd8>
	}
    PWM_Start();
 8001a3e:	f002 f94f 	bl	8003ce0 <PWM_Start>

}
 8001a42:	bf00      	nop
 8001a44:	3770      	adds	r7, #112	; 0x70
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	0800b80c 	.word	0x0800b80c
 8001a50:	0800b628 	.word	0x0800b628
 8001a54:	20000378 	.word	0x20000378
 8001a58:	48000800 	.word	0x48000800
 8001a5c:	20000090 	.word	0x20000090
 8001a60:	20000028 	.word	0x20000028
 8001a64:	2000008c 	.word	0x2000008c
 8001a68:	20000018 	.word	0x20000018
 8001a6c:	20000094 	.word	0x20000094
 8001a70:	20000038 	.word	0x20000038
 8001a74:	20000088 	.word	0x20000088
 8001a78:	20000020 	.word	0x20000020
 8001a7c:	20000098 	.word	0x20000098
 8001a80:	20000008 	.word	0x20000008
 8001a84:	2000009c 	.word	0x2000009c
 8001a88:	20000010 	.word	0x20000010
 8001a8c:	200000a0 	.word	0x200000a0
 8001a90:	20000030 	.word	0x20000030
 8001a94:	200000a4 	.word	0x200000a4
 8001a98:	20000040 	.word	0x20000040
 8001a9c:	200006ec 	.word	0x200006ec
 8001aa0:	20000768 	.word	0x20000768

08001aa4 <starter>:

void starter(){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b09a      	sub	sp, #104	; 0x68
 8001aa8:	af00      	add	r7, sp, #0

	setCursor(0, 2);
 8001aaa:	2102      	movs	r1, #2
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7fe fe4d 	bl	800074c <setCursor>
	write(num_tank_right, tank_right);
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <starter+0xa8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4926      	ldr	r1, [pc, #152]	; (8001b50 <starter+0xac>)
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fef1 	bl	80008a0 <write>

	setCursor(1, 1);
 8001abe:	2101      	movs	r1, #1
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7fe fe43 	bl	800074c <setCursor>
	print("#");
 8001ac6:	4823      	ldr	r0, [pc, #140]	; (8001b54 <starter+0xb0>)
 8001ac8:	f7fe fe88 	bl	80007dc <print>

	setCursor(1, 2);
 8001acc:	2102      	movs	r1, #2
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f7fe fe3c 	bl	800074c <setCursor>
	print("#");
 8001ad4:	481f      	ldr	r0, [pc, #124]	; (8001b54 <starter+0xb0>)
 8001ad6:	f7fe fe81 	bl	80007dc <print>

	char data[100];
	int n = sprintf(data, "TANK BATTLE");
 8001ada:	463b      	mov	r3, r7
 8001adc:	491e      	ldr	r1, [pc, #120]	; (8001b58 <starter+0xb4>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f007 fef0 	bl	80098c4 <siprintf>
 8001ae4:	6678      	str	r0, [r7, #100]	; 0x64
	setCursor(4, 1);
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	2004      	movs	r0, #4
 8001aea:	f7fe fe2f 	bl	800074c <setCursor>
	print(data);
 8001aee:	463b      	mov	r3, r7
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fe73 	bl	80007dc <print>
	setCursor(4, 2);
 8001af6:	2102      	movs	r1, #2
 8001af8:	2004      	movs	r0, #4
 8001afa:	f7fe fe27 	bl	800074c <setCursor>
	n = sprintf(data, "===========");
 8001afe:	463b      	mov	r3, r7
 8001b00:	4916      	ldr	r1, [pc, #88]	; (8001b5c <starter+0xb8>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f007 fede 	bl	80098c4 <siprintf>
 8001b08:	6678      	str	r0, [r7, #100]	; 0x64
	print(data);
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fe65 	bl	80007dc <print>

	setCursor(18, 1);
 8001b12:	2101      	movs	r1, #1
 8001b14:	2012      	movs	r0, #18
 8001b16:	f7fe fe19 	bl	800074c <setCursor>
	print("#");
 8001b1a:	480e      	ldr	r0, [pc, #56]	; (8001b54 <starter+0xb0>)
 8001b1c:	f7fe fe5e 	bl	80007dc <print>
	setCursor(18, 2);
 8001b20:	2102      	movs	r1, #2
 8001b22:	2012      	movs	r0, #18
 8001b24:	f7fe fe12 	bl	800074c <setCursor>
	print("#");
 8001b28:	480a      	ldr	r0, [pc, #40]	; (8001b54 <starter+0xb0>)
 8001b2a:	f7fe fe57 	bl	80007dc <print>

	setCursor(19, 1);
 8001b2e:	2101      	movs	r1, #1
 8001b30:	2013      	movs	r0, #19
 8001b32:	f7fe fe0b 	bl	800074c <setCursor>
	write(num_tank_left, tank_left);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <starter+0xbc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	490a      	ldr	r1, [pc, #40]	; (8001b64 <starter+0xc0>)
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe feaf 	bl	80008a0 <write>

}
 8001b42:	bf00      	nop
 8001b44:	3768      	adds	r7, #104	; 0x68
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000090 	.word	0x20000090
 8001b50:	20000028 	.word	0x20000028
 8001b54:	0800b630 	.word	0x0800b630
 8001b58:	0800b634 	.word	0x0800b634
 8001b5c:	0800b640 	.word	0x0800b640
 8001b60:	20000088 	.word	0x20000088
 8001b64:	20000020 	.word	0x20000020

08001b68 <init_board>:

void init_board(){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
	//i == soton, j ==> radif
	PWM_Change_Tone(1, 0);
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2001      	movs	r0, #1
 8001b72:	f002 f8c5 	bl	8003d00 <PWM_Change_Tone>

    for (int i = 0; i < 20; i++) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7a:	e017      	b.n	8001bac <init_board+0x44>
        for (int j = 0; j < 4; j++) {
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
 8001b80:	e00e      	b.n	8001ba0 <init_board+0x38>
        	setCursor(i, j);
 8001b82:	6a39      	ldr	r1, [r7, #32]
 8001b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b86:	f7fe fde1 	bl	800074c <setCursor>
        	lcd[i][j] = 0;
 8001b8a:	4a6f      	ldr	r2, [pc, #444]	; (8001d48 <init_board+0x1e0>)
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	441a      	add	r2, r3
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	4413      	add	r3, r2
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	623b      	str	r3, [r7, #32]
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	dded      	ble.n	8001b82 <init_board+0x1a>
    for (int i = 0; i < 20; i++) {
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	3301      	adds	r3, #1
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	2b13      	cmp	r3, #19
 8001bb0:	dde4      	ble.n	8001b7c <init_board+0x14>
//    		print(" ");

        }
    }

	lcd[1][1] = num_wall;
 8001bb2:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <init_board+0x1e4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <init_board+0x1e0>)
 8001bba:	715a      	strb	r2, [r3, #5]
	lcd[1][2] = num_wall;
 8001bbc:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <init_board+0x1e4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b61      	ldr	r3, [pc, #388]	; (8001d48 <init_board+0x1e0>)
 8001bc4:	719a      	strb	r2, [r3, #6]
	lcd[18][1] = num_wall;
 8001bc6:	4b61      	ldr	r3, [pc, #388]	; (8001d4c <init_board+0x1e4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b5e      	ldr	r3, [pc, #376]	; (8001d48 <init_board+0x1e0>)
 8001bce:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	lcd[18][2] = num_wall;
 8001bd2:	4b5e      	ldr	r3, [pc, #376]	; (8001d4c <init_board+0x1e4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b5b      	ldr	r3, [pc, #364]	; (8001d48 <init_board+0x1e0>)
 8001bda:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	lcd[0][1] = num_tank_right;
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <init_board+0x1e8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b58      	ldr	r3, [pc, #352]	; (8001d48 <init_board+0x1e0>)
 8001be6:	705a      	strb	r2, [r3, #1]
	lcd[19][2] = num_tank_left;
 8001be8:	4b5a      	ldr	r3, [pc, #360]	; (8001d54 <init_board+0x1ec>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4b56      	ldr	r3, [pc, #344]	; (8001d48 <init_board+0x1e0>)
 8001bf0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	int element_counter = 2;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 8001bf8:	e030      	b.n	8001c5c <init_board+0xf4>
		int col = rand() % 24;
 8001bfa:	f007 fe25 	bl	8009848 <rand>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <init_board+0x1f0>)
 8001c02:	fb83 1302 	smull	r1, r3, r3, r2
 8001c06:	1099      	asrs	r1, r3, #2
 8001c08:	17d3      	asrs	r3, r2, #31
 8001c0a:	1ac9      	subs	r1, r1, r3
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	440b      	add	r3, r1
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	60bb      	str	r3, [r7, #8]
		int row = rand() % 4;
 8001c18:	f007 fe16 	bl	8009848 <rand>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	425a      	negs	r2, r3
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	f002 0203 	and.w	r2, r2, #3
 8001c28:	bf58      	it	pl
 8001c2a:	4253      	negpl	r3, r2
 8001c2c:	607b      	str	r3, [r7, #4]
		if(lcd[col][row] == 0){
 8001c2e:	4a46      	ldr	r2, [pc, #280]	; (8001d48 <init_board+0x1e0>)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	441a      	add	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10d      	bne.n	8001c5c <init_board+0xf4>
			lcd[col][row] = num_extra_bullet;
 8001c40:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <init_board+0x1f4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	b2d9      	uxtb	r1, r3
 8001c46:	4a40      	ldr	r2, [pc, #256]	; (8001d48 <init_board+0x1e0>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	441a      	add	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	460a      	mov	r2, r1
 8001c54:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	dccb      	bgt.n	8001bfa <init_board+0x92>
		}
	}

	element_counter = 2;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 8001c66:	e030      	b.n	8001cca <init_board+0x162>
		int col = rand() % 24;
 8001c68:	f007 fdee 	bl	8009848 <rand>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <init_board+0x1f0>)
 8001c70:	fb83 1302 	smull	r1, r3, r3, r2
 8001c74:	1099      	asrs	r1, r3, #2
 8001c76:	17d3      	asrs	r3, r2, #31
 8001c78:	1ac9      	subs	r1, r1, r3
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	440b      	add	r3, r1
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	613b      	str	r3, [r7, #16]
		int row = rand() % 4;
 8001c86:	f007 fddf 	bl	8009848 <rand>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	425a      	negs	r2, r3
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	f002 0203 	and.w	r2, r2, #3
 8001c96:	bf58      	it	pl
 8001c98:	4253      	negpl	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
		if(lcd[col][row] == 0){
 8001c9c:	4a2a      	ldr	r2, [pc, #168]	; (8001d48 <init_board+0x1e0>)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	441a      	add	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10d      	bne.n	8001cca <init_board+0x162>
			lcd[col][row] = num_health;
 8001cae:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <init_board+0x1f8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b2d9      	uxtb	r1, r3
 8001cb4:	4a24      	ldr	r2, [pc, #144]	; (8001d48 <init_board+0x1e0>)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	441a      	add	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	dccb      	bgt.n	8001c68 <init_board+0x100>
		}
	}

	element_counter = 2;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 8001cd4:	e030      	b.n	8001d38 <init_board+0x1d0>
		int col = rand() % 24;
 8001cd6:	f007 fdb7 	bl	8009848 <rand>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <init_board+0x1f0>)
 8001cde:	fb83 1302 	smull	r1, r3, r3, r2
 8001ce2:	1099      	asrs	r1, r3, #2
 8001ce4:	17d3      	asrs	r3, r2, #31
 8001ce6:	1ac9      	subs	r1, r1, r3
 8001ce8:	460b      	mov	r3, r1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	440b      	add	r3, r1
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	61bb      	str	r3, [r7, #24]
		int row = rand() % 4;
 8001cf4:	f007 fda8 	bl	8009848 <rand>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	425a      	negs	r2, r3
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	f002 0203 	and.w	r2, r2, #3
 8001d04:	bf58      	it	pl
 8001d06:	4253      	negpl	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]
		if(lcd[col][row] == 0){
 8001d0a:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <init_board+0x1e0>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	441a      	add	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	4413      	add	r3, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10d      	bne.n	8001d38 <init_board+0x1d0>
			lcd[col][row] = num_obstacle;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <init_board+0x1fc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	b2d9      	uxtb	r1, r3
 8001d22:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <init_board+0x1e0>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	441a      	add	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	460a      	mov	r2, r1
 8001d30:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	dccb      	bgt.n	8001cd6 <init_board+0x16e>
		}
	}

}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	; 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000718 	.word	0x20000718
 8001d4c:	200000a8 	.word	0x200000a8
 8001d50:	20000090 	.word	0x20000090
 8001d54:	20000088 	.word	0x20000088
 8001d58:	2aaaaaab 	.word	0x2aaaaaab
 8001d5c:	20000098 	.word	0x20000098
 8001d60:	200000a0 	.word	0x200000a0
 8001d64:	200000ac 	.word	0x200000ac

08001d68 <update_lcd>:
// D12 -> C9
// D13 -> C8
// D14 -> C7


void update_lcd(){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
	if (game_started==1){
 8001d6e:	4ba3      	ldr	r3, [pc, #652]	; (8001ffc <update_lcd+0x294>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d109      	bne.n	8001d8a <update_lcd+0x22>
		clear();
 8001d76:	f7fe fcdf 	bl	8000738 <clear>
		init_board();
 8001d7a:	f7ff fef5 	bl	8001b68 <init_board>
		change_page = 0;
 8001d7e:	4ba0      	ldr	r3, [pc, #640]	; (8002000 <update_lcd+0x298>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
		game_started = 0;
 8001d84:	4b9d      	ldr	r3, [pc, #628]	; (8001ffc <update_lcd+0x294>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
	}

	if(pageflag==0){
 8001d8a:	4b9e      	ldr	r3, [pc, #632]	; (8002004 <update_lcd+0x29c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <update_lcd+0x2e>
		starter();
 8001d92:	f7ff fe87 	bl	8001aa4 <starter>
	}


	if(pageflag==2){
 8001d96:	4b9b      	ldr	r3, [pc, #620]	; (8002004 <update_lcd+0x29c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	f040 8101 	bne.w	8001fa2 <update_lcd+0x23a>
		if(HAL_GetTick() - for30timer > 30000){
 8001da0:	f002 fabe 	bl	8004320 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b98      	ldr	r3, [pc, #608]	; (8002008 <update_lcd+0x2a0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f247 5230 	movw	r2, #30000	; 0x7530
 8001db0:	4293      	cmp	r3, r2
 8001db2:	f240 808f 	bls.w	8001ed4 <update_lcd+0x16c>
			int col = rand() % 24;
 8001db6:	f007 fd47 	bl	8009848 <rand>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4b93      	ldr	r3, [pc, #588]	; (800200c <update_lcd+0x2a4>)
 8001dbe:	fb83 1302 	smull	r1, r3, r3, r2
 8001dc2:	1099      	asrs	r1, r3, #2
 8001dc4:	17d3      	asrs	r3, r2, #31
 8001dc6:	1ac9      	subs	r1, r1, r3
 8001dc8:	460b      	mov	r3, r1
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	440b      	add	r3, r1
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	607b      	str	r3, [r7, #4]
			int row = rand() % 4;
 8001dd4:	f007 fd38 	bl	8009848 <rand>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	425a      	negs	r2, r3
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	f002 0203 	and.w	r2, r2, #3
 8001de4:	bf58      	it	pl
 8001de6:	4253      	negpl	r3, r2
 8001de8:	603b      	str	r3, [r7, #0]
			if(lcd[col][row] == 0){
 8001dea:	4a89      	ldr	r2, [pc, #548]	; (8002010 <update_lcd+0x2a8>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	441a      	add	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10a      	bne.n	8001e12 <update_lcd+0xaa>
				lcd[col][row] = num_extra_bullet;
 8001dfc:	4b85      	ldr	r3, [pc, #532]	; (8002014 <update_lcd+0x2ac>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b2d9      	uxtb	r1, r3
 8001e02:	4a83      	ldr	r2, [pc, #524]	; (8002010 <update_lcd+0x2a8>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	441a      	add	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	460a      	mov	r2, r1
 8001e10:	701a      	strb	r2, [r3, #0]
			}
			 col = rand() % 24;
 8001e12:	f007 fd19 	bl	8009848 <rand>
 8001e16:	4602      	mov	r2, r0
 8001e18:	4b7c      	ldr	r3, [pc, #496]	; (800200c <update_lcd+0x2a4>)
 8001e1a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e1e:	1099      	asrs	r1, r3, #2
 8001e20:	17d3      	asrs	r3, r2, #31
 8001e22:	1ac9      	subs	r1, r1, r3
 8001e24:	460b      	mov	r3, r1
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	440b      	add	r3, r1
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	607b      	str	r3, [r7, #4]
			 row = rand() % 4;
 8001e30:	f007 fd0a 	bl	8009848 <rand>
 8001e34:	4603      	mov	r3, r0
 8001e36:	425a      	negs	r2, r3
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	f002 0203 	and.w	r2, r2, #3
 8001e40:	bf58      	it	pl
 8001e42:	4253      	negpl	r3, r2
 8001e44:	603b      	str	r3, [r7, #0]
			if(lcd[col][row] == 0){
 8001e46:	4a72      	ldr	r2, [pc, #456]	; (8002010 <update_lcd+0x2a8>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	441a      	add	r2, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	4413      	add	r3, r2
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10a      	bne.n	8001e6e <update_lcd+0x106>
				lcd[col][row] = num_chance;
 8001e58:	4b6f      	ldr	r3, [pc, #444]	; (8002018 <update_lcd+0x2b0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	b2d9      	uxtb	r1, r3
 8001e5e:	4a6c      	ldr	r2, [pc, #432]	; (8002010 <update_lcd+0x2a8>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	441a      	add	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	460a      	mov	r2, r1
 8001e6c:	701a      	strb	r2, [r3, #0]
			}
			 col = rand() % 24;
 8001e6e:	f007 fceb 	bl	8009848 <rand>
 8001e72:	4602      	mov	r2, r0
 8001e74:	4b65      	ldr	r3, [pc, #404]	; (800200c <update_lcd+0x2a4>)
 8001e76:	fb83 1302 	smull	r1, r3, r3, r2
 8001e7a:	1099      	asrs	r1, r3, #2
 8001e7c:	17d3      	asrs	r3, r2, #31
 8001e7e:	1ac9      	subs	r1, r1, r3
 8001e80:	460b      	mov	r3, r1
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	440b      	add	r3, r1
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	607b      	str	r3, [r7, #4]
			 row = rand() % 4;
 8001e8c:	f007 fcdc 	bl	8009848 <rand>
 8001e90:	4603      	mov	r3, r0
 8001e92:	425a      	negs	r2, r3
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	f002 0203 	and.w	r2, r2, #3
 8001e9c:	bf58      	it	pl
 8001e9e:	4253      	negpl	r3, r2
 8001ea0:	603b      	str	r3, [r7, #0]
			if(lcd[col][row] == 0){
 8001ea2:	4a5b      	ldr	r2, [pc, #364]	; (8002010 <update_lcd+0x2a8>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	441a      	add	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10a      	bne.n	8001eca <update_lcd+0x162>
				lcd[col][row] = num_health;
 8001eb4:	4b59      	ldr	r3, [pc, #356]	; (800201c <update_lcd+0x2b4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	b2d9      	uxtb	r1, r3
 8001eba:	4a55      	ldr	r2, [pc, #340]	; (8002010 <update_lcd+0x2a8>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	441a      	add	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	460a      	mov	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
			}
			for30timer = HAL_GetTick();
 8001eca:	f002 fa29 	bl	8004320 <HAL_GetTick>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a4d      	ldr	r2, [pc, #308]	; (8002008 <update_lcd+0x2a0>)
 8001ed2:	6013      	str	r3, [r2, #0]

		}
		for (int i = 0; i < 20; i++) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e05f      	b.n	8001f9a <update_lcd+0x232>
			for (int j = 0; j < 4; j++) {
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	e056      	b.n	8001f8e <update_lcd+0x226>
				setCursor(i, j);
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7fe fc32 	bl	800074c <setCursor>
				if(lcd[i][j] != 9 && lcd[i][j] != 10 && lcd[i][j] != 0)
 8001ee8:	4a49      	ldr	r2, [pc, #292]	; (8002010 <update_lcd+0x2a8>)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	441a      	add	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b09      	cmp	r3, #9
 8001ef8:	d01c      	beq.n	8001f34 <update_lcd+0x1cc>
 8001efa:	4a45      	ldr	r2, [pc, #276]	; (8002010 <update_lcd+0x2a8>)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	441a      	add	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4413      	add	r3, r2
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b0a      	cmp	r3, #10
 8001f0a:	d013      	beq.n	8001f34 <update_lcd+0x1cc>
 8001f0c:	4a40      	ldr	r2, [pc, #256]	; (8002010 <update_lcd+0x2a8>)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	441a      	add	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4413      	add	r3, r2
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <update_lcd+0x1cc>
					write(lcd[i][j]);
 8001f1e:	4a3c      	ldr	r2, [pc, #240]	; (8002010 <update_lcd+0x2a8>)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	441a      	add	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4413      	add	r3, r2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fcb7 	bl	80008a0 <write>
 8001f32:	e029      	b.n	8001f88 <update_lcd+0x220>
				else if (lcd[i][j] == 9)
 8001f34:	4a36      	ldr	r2, [pc, #216]	; (8002010 <update_lcd+0x2a8>)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	441a      	add	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b09      	cmp	r3, #9
 8001f44:	d103      	bne.n	8001f4e <update_lcd+0x1e6>
					print("#");
 8001f46:	4836      	ldr	r0, [pc, #216]	; (8002020 <update_lcd+0x2b8>)
 8001f48:	f7fe fc48 	bl	80007dc <print>
 8001f4c:	e01c      	b.n	8001f88 <update_lcd+0x220>
				else if (lcd[i][j] == 10)
 8001f4e:	4a30      	ldr	r2, [pc, #192]	; (8002010 <update_lcd+0x2a8>)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	441a      	add	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	4413      	add	r3, r2
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b0a      	cmp	r3, #10
 8001f5e:	d103      	bne.n	8001f68 <update_lcd+0x200>
					print("I");
 8001f60:	4830      	ldr	r0, [pc, #192]	; (8002024 <update_lcd+0x2bc>)
 8001f62:	f7fe fc3b 	bl	80007dc <print>
 8001f66:	e00f      	b.n	8001f88 <update_lcd+0x220>
				else if (lcd[i][j] == 0)
 8001f68:	4a29      	ldr	r2, [pc, #164]	; (8002010 <update_lcd+0x2a8>)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	441a      	add	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	4413      	add	r3, r2
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d103      	bne.n	8001f82 <update_lcd+0x21a>
					print(" ");
 8001f7a:	482b      	ldr	r0, [pc, #172]	; (8002028 <update_lcd+0x2c0>)
 8001f7c:	f7fe fc2e 	bl	80007dc <print>
 8001f80:	e002      	b.n	8001f88 <update_lcd+0x220>
				else
					print("U");
 8001f82:	482a      	ldr	r0, [pc, #168]	; (800202c <update_lcd+0x2c4>)
 8001f84:	f7fe fc2a 	bl	80007dc <print>
			for (int j = 0; j < 4; j++) {
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	dda5      	ble.n	8001ee0 <update_lcd+0x178>
		for (int i = 0; i < 20; i++) {
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3301      	adds	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b13      	cmp	r3, #19
 8001f9e:	dd9c      	ble.n	8001eda <update_lcd+0x172>
	}
	else if (pageflag==4){
		about_page();
	}

}
 8001fa0:	e027      	b.n	8001ff2 <update_lcd+0x28a>
	else if (change_page==1){
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <update_lcd+0x298>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d105      	bne.n	8001fb6 <update_lcd+0x24e>
		clear();
 8001faa:	f7fe fbc5 	bl	8000738 <clear>
		change_page = 0;
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <update_lcd+0x298>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
}
 8001fb4:	e01d      	b.n	8001ff2 <update_lcd+0x28a>
	else if (change_page==1){
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <update_lcd+0x298>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d105      	bne.n	8001fca <update_lcd+0x262>
		clear();
 8001fbe:	f7fe fbbb 	bl	8000738 <clear>
		change_page = 0;
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <update_lcd+0x298>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
}
 8001fc8:	e013      	b.n	8001ff2 <update_lcd+0x28a>
	else if (pageflag==1){
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <update_lcd+0x29c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d102      	bne.n	8001fd8 <update_lcd+0x270>
		menu();
 8001fd2:	f000 f8e9 	bl	80021a8 <menu>
}
 8001fd6:	e00c      	b.n	8001ff2 <update_lcd+0x28a>
	else if (pageflag==3){
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <update_lcd+0x29c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d102      	bne.n	8001fe6 <update_lcd+0x27e>
		setting_page();
 8001fe0:	f000 f882 	bl	80020e8 <setting_page>
}
 8001fe4:	e005      	b.n	8001ff2 <update_lcd+0x28a>
	else if (pageflag==4){
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <update_lcd+0x29c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d101      	bne.n	8001ff2 <update_lcd+0x28a>
		about_page();
 8001fee:	f000 f81f 	bl	8002030 <about_page>
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200006f0 	.word	0x200006f0
 8002000:	200006fc 	.word	0x200006fc
 8002004:	200006ec 	.word	0x200006ec
 8002008:	200006f4 	.word	0x200006f4
 800200c:	2aaaaaab 	.word	0x2aaaaaab
 8002010:	20000718 	.word	0x20000718
 8002014:	20000098 	.word	0x20000098
 8002018:	2000009c 	.word	0x2000009c
 800201c:	200000a0 	.word	0x200000a0
 8002020:	0800b630 	.word	0x0800b630
 8002024:	0800b64c 	.word	0x0800b64c
 8002028:	0800b650 	.word	0x0800b650
 800202c:	0800b654 	.word	0x0800b654

08002030 <about_page>:
void about_page(){
 8002030:	b580      	push	{r7, lr}
 8002032:	b0b4      	sub	sp, #208	; 0xd0
 8002034:	af02      	add	r7, sp, #8
	setCursor(6, 1);
 8002036:	2101      	movs	r1, #1
 8002038:	2006      	movs	r0, #6
 800203a:	f7fe fb87 	bl	800074c <setCursor>
	print("POURIA");
 800203e:	4822      	ldr	r0, [pc, #136]	; (80020c8 <about_page+0x98>)
 8002040:	f7fe fbcc 	bl	80007dc <print>
	setCursor(8, 2);
 8002044:	2102      	movs	r1, #2
 8002046:	2008      	movs	r0, #8
 8002048:	f7fe fb80 	bl	800074c <setCursor>
	print("ALI");
 800204c:	481f      	ldr	r0, [pc, #124]	; (80020cc <about_page+0x9c>)
 800204e:	f7fe fbc5 	bl	80007dc <print>
	char timeStr[100];
	char dateStr[100];

	setCursor(5, 3);
 8002052:	2103      	movs	r1, #3
 8002054:	2005      	movs	r0, #5
 8002056:	f7fe fb79 	bl	800074c <setCursor>
	print("          ");
 800205a:	481d      	ldr	r0, [pc, #116]	; (80020d0 <about_page+0xa0>)
 800205c:	f7fe fbbe 	bl	80007dc <print>
	HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8002060:	2200      	movs	r2, #0
 8002062:	491c      	ldr	r1, [pc, #112]	; (80020d4 <about_page+0xa4>)
 8002064:	481c      	ldr	r0, [pc, #112]	; (80020d8 <about_page+0xa8>)
 8002066:	f004 fc28 	bl	80068ba <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &mytime, RTC_FORMAT_BIN);
 800206a:	2200      	movs	r2, #0
 800206c:	4919      	ldr	r1, [pc, #100]	; (80020d4 <about_page+0xa4>)
 800206e:	481a      	ldr	r0, [pc, #104]	; (80020d8 <about_page+0xa8>)
 8002070:	f004 fd05 	bl	8006a7e <HAL_RTC_GetDate>

	sprintf(timeStr, "%02d:%02d:%02d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <about_page+0xa4>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <about_page+0xa4>)
 800207c:	785b      	ldrb	r3, [r3, #1]
 800207e:	4619      	mov	r1, r3
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <about_page+0xa4>)
 8002082:	789b      	ldrb	r3, [r3, #2]
 8002084:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	460b      	mov	r3, r1
 800208c:	4913      	ldr	r1, [pc, #76]	; (80020dc <about_page+0xac>)
 800208e:	f007 fc19 	bl	80098c4 <siprintf>
	sprintf(dateStr, "%04d:%02d:%02d", mydate.Year, mydate.Month, mydate.Date);
 8002092:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <about_page+0xb0>)
 8002094:	78db      	ldrb	r3, [r3, #3]
 8002096:	461a      	mov	r2, r3
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <about_page+0xb0>)
 800209a:	785b      	ldrb	r3, [r3, #1]
 800209c:	4619      	mov	r1, r3
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <about_page+0xb0>)
 80020a0:	789b      	ldrb	r3, [r3, #2]
 80020a2:	4638      	mov	r0, r7
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	460b      	mov	r3, r1
 80020a8:	490e      	ldr	r1, [pc, #56]	; (80020e4 <about_page+0xb4>)
 80020aa:	f007 fc0b 	bl	80098c4 <siprintf>

	setCursor(5, 3);
 80020ae:	2103      	movs	r1, #3
 80020b0:	2005      	movs	r0, #5
 80020b2:	f7fe fb4b 	bl	800074c <setCursor>
	print(timeStr);
 80020b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fb8e 	bl	80007dc <print>

}
 80020c0:	bf00      	nop
 80020c2:	37c8      	adds	r7, #200	; 0xc8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	0800b658 	.word	0x0800b658
 80020cc:	0800b660 	.word	0x0800b660
 80020d0:	0800b664 	.word	0x0800b664
 80020d4:	20000700 	.word	0x20000700
 80020d8:	20000210 	.word	0x20000210
 80020dc:	0800b670 	.word	0x0800b670
 80020e0:	20000714 	.word	0x20000714
 80020e4:	0800b680 	.word	0x0800b680

080020e8 <setting_page>:

void setting_page(){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b0aa      	sub	sp, #168	; 0xa8
 80020ec:	af00      	add	r7, sp, #0


	char data[40];
	int n = sprintf(data, "Health: %d", player2.health);
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <setting_page+0xa8>)
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020f6:	4927      	ldr	r1, [pc, #156]	; (8002194 <setting_page+0xac>)
 80020f8:	4618      	mov	r0, r3
 80020fa:	f007 fbe3 	bl	80098c4 <siprintf>
 80020fe:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

	setCursor(0, 0);
 8002102:	2100      	movs	r1, #0
 8002104:	2000      	movs	r0, #0
 8002106:	f7fe fb21 	bl	800074c <setCursor>
	print(data);
 800210a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fb64 	bl	80007dc <print>
	setCursor(0, 1);
 8002114:	2101      	movs	r1, #1
 8002116:	2000      	movs	r0, #0
 8002118:	f7fe fb18 	bl	800074c <setCursor>
	char data1[40];
	n = sprintf(data1, "Arrow: %d", player2.arrow);
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <setting_page+0xa8>)
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002124:	491c      	ldr	r1, [pc, #112]	; (8002198 <setting_page+0xb0>)
 8002126:	4618      	mov	r0, r3
 8002128:	f007 fbcc 	bl	80098c4 <siprintf>
 800212c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	print(data1);
 8002130:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fb51 	bl	80007dc <print>
	setCursor(0, 2);
 800213a:	2102      	movs	r1, #2
 800213c:	2000      	movs	r0, #0
 800213e:	f7fe fb05 	bl	800074c <setCursor>
	char data2[40];
	n = sprintf(data2, "Player1: %c", player1.player_name);
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <setting_page+0xb4>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800214c:	4914      	ldr	r1, [pc, #80]	; (80021a0 <setting_page+0xb8>)
 800214e:	4618      	mov	r0, r3
 8002150:	f007 fbb8 	bl	80098c4 <siprintf>
 8002154:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

	print(data2);
 8002158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fb3d 	bl	80007dc <print>

	setCursor(0, 3);
 8002162:	2103      	movs	r1, #3
 8002164:	2000      	movs	r0, #0
 8002166:	f7fe faf1 	bl	800074c <setCursor>
	char data3[40];
	n = sprintf(data3, "Player2: %c", player2.player_name);
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <setting_page+0xa8>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	490c      	ldr	r1, [pc, #48]	; (80021a4 <setting_page+0xbc>)
 8002174:	4618      	mov	r0, r3
 8002176:	f007 fba5 	bl	80098c4 <siprintf>
 800217a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	print(data3);
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fb2b 	bl	80007dc <print>

}
 8002186:	bf00      	nop
 8002188:	37a8      	adds	r7, #168	; 0xa8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000068 	.word	0x20000068
 8002194:	0800b690 	.word	0x0800b690
 8002198:	0800b69c 	.word	0x0800b69c
 800219c:	20000048 	.word	0x20000048
 80021a0:	0800b6a8 	.word	0x0800b6a8
 80021a4:	0800b6b4 	.word	0x0800b6b4

080021a8 <menu>:
//			pageflag = 1;
//
//		}
//}

void menu(){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0

	setCursor(1, 0);
 80021ac:	2100      	movs	r1, #0
 80021ae:	2001      	movs	r0, #1
 80021b0:	f7fe facc 	bl	800074c <setCursor>
	print("MENU:");
 80021b4:	481f      	ldr	r0, [pc, #124]	; (8002234 <menu+0x8c>)
 80021b6:	f7fe fb11 	bl	80007dc <print>
	setCursor(1, 1);
 80021ba:	2101      	movs	r1, #1
 80021bc:	2001      	movs	r0, #1
 80021be:	f7fe fac5 	bl	800074c <setCursor>
	print("PLAY");
 80021c2:	481d      	ldr	r0, [pc, #116]	; (8002238 <menu+0x90>)
 80021c4:	f7fe fb0a 	bl	80007dc <print>
	setCursor(1, 2);
 80021c8:	2102      	movs	r1, #2
 80021ca:	2001      	movs	r0, #1
 80021cc:	f7fe fabe 	bl	800074c <setCursor>
	print("SETTING");
 80021d0:	481a      	ldr	r0, [pc, #104]	; (800223c <menu+0x94>)
 80021d2:	f7fe fb03 	bl	80007dc <print>
	setCursor(1, 3);
 80021d6:	2103      	movs	r1, #3
 80021d8:	2001      	movs	r0, #1
 80021da:	f7fe fab7 	bl	800074c <setCursor>
	print("ABOUT");
 80021de:	4818      	ldr	r0, [pc, #96]	; (8002240 <menu+0x98>)
 80021e0:	f7fe fafc 	bl	80007dc <print>
	setCursor(0, 0);
 80021e4:	2100      	movs	r1, #0
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7fe fab0 	bl	800074c <setCursor>
	print(" ");
 80021ec:	4815      	ldr	r0, [pc, #84]	; (8002244 <menu+0x9c>)
 80021ee:	f7fe faf5 	bl	80007dc <print>
	setCursor(0, 1);
 80021f2:	2101      	movs	r1, #1
 80021f4:	2000      	movs	r0, #0
 80021f6:	f7fe faa9 	bl	800074c <setCursor>
	print(" ");
 80021fa:	4812      	ldr	r0, [pc, #72]	; (8002244 <menu+0x9c>)
 80021fc:	f7fe faee 	bl	80007dc <print>
	setCursor(0, 2);
 8002200:	2102      	movs	r1, #2
 8002202:	2000      	movs	r0, #0
 8002204:	f7fe faa2 	bl	800074c <setCursor>
	print(" ");
 8002208:	480e      	ldr	r0, [pc, #56]	; (8002244 <menu+0x9c>)
 800220a:	f7fe fae7 	bl	80007dc <print>
	setCursor(0, 3);
 800220e:	2103      	movs	r1, #3
 8002210:	2000      	movs	r0, #0
 8002212:	f7fe fa9b 	bl	800074c <setCursor>
	print(" ");
 8002216:	480b      	ldr	r0, [pc, #44]	; (8002244 <menu+0x9c>)
 8002218:	f7fe fae0 	bl	80007dc <print>
	setCursor(0, menu_curser_r);
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <menu+0xa0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	2000      	movs	r0, #0
 8002224:	f7fe fa92 	bl	800074c <setCursor>
	print(">");
 8002228:	4808      	ldr	r0, [pc, #32]	; (800224c <menu+0xa4>)
 800222a:	f7fe fad7 	bl	80007dc <print>

}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	0800b6c0 	.word	0x0800b6c0
 8002238:	0800b6c8 	.word	0x0800b6c8
 800223c:	0800b6d0 	.word	0x0800b6d0
 8002240:	0800b6d8 	.word	0x0800b6d8
 8002244:	0800b650 	.word	0x0800b650
 8002248:	20000004 	.word	0x20000004
 800224c:	0800b6e0 	.word	0x0800b6e0

08002250 <programLoop>:

void programLoop() {
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
//    seven_segment_refresh();

    update_lcd();
 8002254:	f7ff fd88 	bl	8001d68 <update_lcd>
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_TIM_PeriodElapsedCallback>:
int sev_result = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4) {
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d110      	bne.n	8002290 <HAL_TIM_PeriodElapsedCallback+0x34>
//		update_lcd();
		seven_segment_refresh();
 800226e:	f7ff fa9f 	bl	80017b0 <seven_segment_refresh>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8002272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002276:	481b      	ldr	r0, [pc, #108]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002278:	f002 fbb4 	bl	80049e4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 800227c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002280:	4818      	ldr	r0, [pc, #96]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002282:	f002 fbaf 	bl	80049e4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8002286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800228a:	4816      	ldr	r0, [pc, #88]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800228c:	f002 fbaa 	bl	80049e4 <HAL_GPIO_TogglePin>

	}
	if(htim->Instance == TIM2){
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002298:	d11e      	bne.n	80022d8 <HAL_TIM_PeriodElapsedCallback+0x7c>
		test_shelik();
 800229a:	f000 f959 	bl	8002550 <test_shelik>
		sev_result = player2.arrow * 1000 + player2.health * 100 + player1.arrow * 10 + player1.health;
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022a6:	fb03 f202 	mul.w	r2, r3, r2
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	2164      	movs	r1, #100	; 0x64
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	18d1      	adds	r1, r2, r3
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	18ca      	adds	r2, r1, r3
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	4413      	add	r3, r2
 80022ca:	4a09      	ldr	r2, [pc, #36]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80022cc:	6013      	str	r3, [r2, #0]
		setNumber(sev_result);
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fa9a 	bl	800180c <setNumber>
	}

}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40000800 	.word	0x40000800
 80022e4:	48001000 	.word	0x48001000
 80022e8:	20000068 	.word	0x20000068
 80022ec:	20000048 	.word	0x20000048
 80022f0:	20000830 	.word	0x20000830

080022f4 <change_dir>:


void change_dir(int player){
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	if (player == 1){
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d119      	bne.n	8002336 <change_dir+0x42>
		int new_dir = player1.direction + 1;
 8002302:	4b1e      	ldr	r3, [pc, #120]	; (800237c <change_dir+0x88>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	3301      	adds	r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
		if(new_dir == 5){
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d101      	bne.n	8002314 <change_dir+0x20>
			new_dir = 1;
 8002310:	2301      	movs	r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
		}
		player1.direction = new_dir;
 8002314:	4a19      	ldr	r2, [pc, #100]	; (800237c <change_dir+0x88>)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	60d3      	str	r3, [r2, #12]
		lcd[player1.position_x][player1.position_y] = player1.direction;
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <change_dir+0x88>)
 800231c:	68d9      	ldr	r1, [r3, #12]
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <change_dir+0x88>)
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4b16      	ldr	r3, [pc, #88]	; (800237c <change_dir+0x88>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	b2c8      	uxtb	r0, r1
 8002328:	4915      	ldr	r1, [pc, #84]	; (8002380 <change_dir+0x8c>)
 800232a:	0092      	lsls	r2, r2, #2
 800232c:	440a      	add	r2, r1
 800232e:	4413      	add	r3, r2
 8002330:	4602      	mov	r2, r0
 8002332:	701a      	strb	r2, [r3, #0]
		}
		player2.direction = new_dir;
		lcd[player2.position_x][player2.position_y] = player2.direction;

	}
}
 8002334:	e01b      	b.n	800236e <change_dir+0x7a>
	}else if (player == 2){
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d118      	bne.n	800236e <change_dir+0x7a>
		int new_dir = player2.direction + 1;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <change_dir+0x90>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	3301      	adds	r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
		if(new_dir == 5){
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b05      	cmp	r3, #5
 8002348:	d101      	bne.n	800234e <change_dir+0x5a>
			new_dir = 1;
 800234a:	2301      	movs	r3, #1
 800234c:	60bb      	str	r3, [r7, #8]
		player2.direction = new_dir;
 800234e:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <change_dir+0x90>)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	60d3      	str	r3, [r2, #12]
		lcd[player2.position_x][player2.position_y] = player2.direction;
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <change_dir+0x90>)
 8002356:	68d9      	ldr	r1, [r3, #12]
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <change_dir+0x90>)
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <change_dir+0x90>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	b2c8      	uxtb	r0, r1
 8002362:	4907      	ldr	r1, [pc, #28]	; (8002380 <change_dir+0x8c>)
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	440a      	add	r2, r1
 8002368:	4413      	add	r3, r2
 800236a:	4602      	mov	r2, r0
 800236c:	701a      	strb	r2, [r3, #0]
}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000048 	.word	0x20000048
 8002380:	20000718 	.word	0x20000718
 8002384:	20000068 	.word	0x20000068

08002388 <boom>:

void boom(int player){
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
//	PWM_Change_Tone(1000, 1000);
	if ((player == 1 && player1.arrow > 0)||(player == 2 && player2.arrow > 0)){
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d103      	bne.n	800239e <boom+0x16>
 8002396:	4b4c      	ldr	r3, [pc, #304]	; (80024c8 <boom+0x140>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	dc08      	bgt.n	80023b0 <boom+0x28>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	f040 808d 	bne.w	80024c0 <boom+0x138>
 80023a6:	4b49      	ldr	r3, [pc, #292]	; (80024cc <boom+0x144>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f340 8088 	ble.w	80024c0 <boom+0x138>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0); //Temp
 80023b0:	2200      	movs	r2, #0
 80023b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023b6:	4846      	ldr	r0, [pc, #280]	; (80024d0 <boom+0x148>)
 80023b8:	f002 fafc 	bl	80049b4 <HAL_GPIO_WritePin>
	int i;
	for(i = 0; i<10;i++){
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e00d      	b.n	80023de <boom+0x56>
		if(bul[i].active==0)
 80023c2:	4944      	ldr	r1, [pc, #272]	; (80024d4 <boom+0x14c>)
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	3310      	adds	r3, #16
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <boom+0x5e>
	for(i = 0; i<10;i++){
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3301      	adds	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b09      	cmp	r3, #9
 80023e2:	ddee      	ble.n	80023c2 <boom+0x3a>
 80023e4:	e000      	b.n	80023e8 <boom+0x60>
			break;
 80023e6:	bf00      	nop
	}
	bul[i].active = 1;
 80023e8:	493a      	ldr	r1, [pc, #232]	; (80024d4 <boom+0x14c>)
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	3310      	adds	r3, #16
 80023f8:	2201      	movs	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
	if (player == 1){
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d12f      	bne.n	8002462 <boom+0xda>
		bul[i].direction=player1.direction;
 8002402:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <boom+0x140>)
 8002404:	68d9      	ldr	r1, [r3, #12]
 8002406:	4833      	ldr	r0, [pc, #204]	; (80024d4 <boom+0x14c>)
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4403      	add	r3, r0
 8002414:	330c      	adds	r3, #12
 8002416:	6019      	str	r1, [r3, #0]
		bul[i].position_x=player1.position_x;
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <boom+0x140>)
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	482d      	ldr	r0, [pc, #180]	; (80024d4 <boom+0x14c>)
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4403      	add	r3, r0
 800242a:	3304      	adds	r3, #4
 800242c:	6019      	str	r1, [r3, #0]
		bul[i].position_y=player1.position_y;
 800242e:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <boom+0x140>)
 8002430:	6899      	ldr	r1, [r3, #8]
 8002432:	4828      	ldr	r0, [pc, #160]	; (80024d4 <boom+0x14c>)
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4403      	add	r3, r0
 8002440:	3308      	adds	r3, #8
 8002442:	6019      	str	r1, [r3, #0]
		bul[i].player_id=1;
 8002444:	4923      	ldr	r1, [pc, #140]	; (80024d4 <boom+0x14c>)
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]
		player1.arrow--;
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <boom+0x140>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	3b01      	subs	r3, #1
 800245c:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <boom+0x140>)
 800245e:	6193      	str	r3, [r2, #24]
//	 PWM_Change_Tone(1000, 0);
	}
//entesab be array


}
 8002460:	e02e      	b.n	80024c0 <boom+0x138>
		bul[i].direction=player2.direction;
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <boom+0x144>)
 8002464:	68d9      	ldr	r1, [r3, #12]
 8002466:	481b      	ldr	r0, [pc, #108]	; (80024d4 <boom+0x14c>)
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4403      	add	r3, r0
 8002474:	330c      	adds	r3, #12
 8002476:	6019      	str	r1, [r3, #0]
		bul[i].position_x=player2.position_x;
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <boom+0x144>)
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	4815      	ldr	r0, [pc, #84]	; (80024d4 <boom+0x14c>)
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4403      	add	r3, r0
 800248a:	3304      	adds	r3, #4
 800248c:	6019      	str	r1, [r3, #0]
		bul[i].position_y=player2.position_y;
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <boom+0x144>)
 8002490:	6899      	ldr	r1, [r3, #8]
 8002492:	4810      	ldr	r0, [pc, #64]	; (80024d4 <boom+0x14c>)
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4403      	add	r3, r0
 80024a0:	3308      	adds	r3, #8
 80024a2:	6019      	str	r1, [r3, #0]
		bul[i].player_id=2;
 80024a4:	490b      	ldr	r1, [pc, #44]	; (80024d4 <boom+0x14c>)
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	2202      	movs	r2, #2
 80024b4:	601a      	str	r2, [r3, #0]
		player2.arrow--;
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <boom+0x144>)
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	4a03      	ldr	r2, [pc, #12]	; (80024cc <boom+0x144>)
 80024be:	6193      	str	r3, [r2, #24]
}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000048 	.word	0x20000048
 80024cc:	20000068 	.word	0x20000068
 80024d0:	48001000 	.word	0x48001000
 80024d4:	20000768 	.word	0x20000768

080024d8 <collect>:

//int sev_result = 0;
void collect(uint8_t pos, int player){
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	71fb      	strb	r3, [r7, #7]
	if (pos == num_extra_bullet){
 80024e4:	79fa      	ldrb	r2, [r7, #7]
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <collect+0x68>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d10e      	bne.n	800250c <collect+0x34>
		if (player == 1)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d105      	bne.n	8002500 <collect+0x28>
			player1.arrow+=1;
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <collect+0x6c>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	3301      	adds	r3, #1
 80024fa:	4a12      	ldr	r2, [pc, #72]	; (8002544 <collect+0x6c>)
 80024fc:	6193      	str	r3, [r2, #24]
//	int results[4] = {d,c,b,a};
//	seven_segment_set_num(results);

//	sev_result = player2.arrow * 1000 + player2.health * 100 + player1.arrow * 10 + player1.health;
//	setNumber(sev_result);
}
 80024fe:	e018      	b.n	8002532 <collect+0x5a>
			player2.arrow+=1;
 8002500:	4b11      	ldr	r3, [pc, #68]	; (8002548 <collect+0x70>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	3301      	adds	r3, #1
 8002506:	4a10      	ldr	r2, [pc, #64]	; (8002548 <collect+0x70>)
 8002508:	6193      	str	r3, [r2, #24]
}
 800250a:	e012      	b.n	8002532 <collect+0x5a>
	}else if (pos == num_health){
 800250c:	79fa      	ldrb	r2, [r7, #7]
 800250e:	4b0f      	ldr	r3, [pc, #60]	; (800254c <collect+0x74>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d10d      	bne.n	8002532 <collect+0x5a>
		if (player == 1)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <collect+0x50>
			player1.health+=1;
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <collect+0x6c>)
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	3301      	adds	r3, #1
 8002522:	4a08      	ldr	r2, [pc, #32]	; (8002544 <collect+0x6c>)
 8002524:	6153      	str	r3, [r2, #20]
}
 8002526:	e004      	b.n	8002532 <collect+0x5a>
			player2.health+=1;
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <collect+0x70>)
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	4a06      	ldr	r2, [pc, #24]	; (8002548 <collect+0x70>)
 8002530:	6153      	str	r3, [r2, #20]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000098 	.word	0x20000098
 8002544:	20000048 	.word	0x20000048
 8002548:	20000068 	.word	0x20000068
 800254c:	200000a0 	.word	0x200000a0

08002550 <test_shelik>:
int gameEnd = 0;
void test_shelik(){
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b08b      	sub	sp, #44	; 0x2c
 8002554:	af00      	add	r7, sp, #0
	for(int i = 0; i<10;i++){
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
 800255a:	f000 bcd3 	b.w	8002f04 <test_shelik+0x9b4>
		if(bul[i].active==1){
 800255e:	499a      	ldr	r1, [pc, #616]	; (80027c8 <test_shelik+0x278>)
 8002560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	3310      	adds	r3, #16
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	f040 84c4 	bne.w	8002efe <test_shelik+0x9ae>
			//4 -> down
			//check direction
			// check next
			// update position and show
			//active =0
			if(bul[i].direction == 1){
 8002576:	4994      	ldr	r1, [pc, #592]	; (80027c8 <test_shelik+0x278>)
 8002578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	330c      	adds	r3, #12
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b01      	cmp	r3, #1
 800258a:	f040 8135 	bne.w	80027f8 <test_shelik+0x2a8>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 800258e:	498e      	ldr	r1, [pc, #568]	; (80027c8 <test_shelik+0x278>)
 8002590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	3304      	adds	r3, #4
 800259e:	6819      	ldr	r1, [r3, #0]
 80025a0:	4889      	ldr	r0, [pc, #548]	; (80027c8 <test_shelik+0x278>)
 80025a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4403      	add	r3, r0
 80025ae:	3308      	adds	r3, #8
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4886      	ldr	r0, [pc, #536]	; (80027cc <test_shelik+0x27c>)
 80025b4:	008a      	lsls	r2, r1, #2
 80025b6:	4402      	add	r2, r0
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b84      	ldr	r3, [pc, #528]	; (80027d0 <test_shelik+0x280>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d117      	bne.n	80025f6 <test_shelik+0xa6>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 80025c6:	4980      	ldr	r1, [pc, #512]	; (80027c8 <test_shelik+0x278>)
 80025c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3304      	adds	r3, #4
 80025d6:	6819      	ldr	r1, [r3, #0]
 80025d8:	487b      	ldr	r0, [pc, #492]	; (80027c8 <test_shelik+0x278>)
 80025da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4403      	add	r3, r0
 80025e6:	3308      	adds	r3, #8
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4878      	ldr	r0, [pc, #480]	; (80027cc <test_shelik+0x27c>)
 80025ec:	008a      	lsls	r2, r1, #2
 80025ee:	4402      	add	r2, r0
 80025f0:	4413      	add	r3, r2
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
				}
				int new_x = bul[i].position_x - 1;
 80025f6:	4974      	ldr	r1, [pc, #464]	; (80027c8 <test_shelik+0x278>)
 80025f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	3304      	adds	r3, #4
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3b01      	subs	r3, #1
 800260a:	60bb      	str	r3, [r7, #8]

				if(new_x >= 0){
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	db27      	blt.n	8002662 <test_shelik+0x112>
					bul[i].position_x = new_x;
 8002612:	496d      	ldr	r1, [pc, #436]	; (80027c8 <test_shelik+0x278>)
 8002614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	3304      	adds	r3, #4
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 8002626:	4968      	ldr	r1, [pc, #416]	; (80027c8 <test_shelik+0x278>)
 8002628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	3304      	adds	r3, #4
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	4863      	ldr	r0, [pc, #396]	; (80027c8 <test_shelik+0x278>)
 800263a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4403      	add	r3, r0
 8002646:	3308      	adds	r3, #8
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4860      	ldr	r0, [pc, #384]	; (80027cc <test_shelik+0x27c>)
 800264c:	008a      	lsls	r2, r1, #2
 800264e:	4402      	add	r2, r0
 8002650:	4413      	add	r3, r2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	607b      	str	r3, [r7, #4]
				if(next_element == num_obstacle){
 8002656:	4b5f      	ldr	r3, [pc, #380]	; (80027d4 <test_shelik+0x284>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	429a      	cmp	r2, r3
 800265e:	d129      	bne.n	80026b4 <test_shelik+0x164>
 8002660:	e00b      	b.n	800267a <test_shelik+0x12a>
					bul[i].active = 0;
 8002662:	4959      	ldr	r1, [pc, #356]	; (80027c8 <test_shelik+0x278>)
 8002664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	3310      	adds	r3, #16
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
					continue;
 8002676:	f000 bc42 	b.w	8002efe <test_shelik+0x9ae>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 800267a:	4b55      	ldr	r3, [pc, #340]	; (80027d0 <test_shelik+0x280>)
 800267c:	681c      	ldr	r4, [r3, #0]
 800267e:	4952      	ldr	r1, [pc, #328]	; (80027c8 <test_shelik+0x278>)
 8002680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	3304      	adds	r3, #4
 800268e:	6819      	ldr	r1, [r3, #0]
 8002690:	484d      	ldr	r0, [pc, #308]	; (80027c8 <test_shelik+0x278>)
 8002692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4403      	add	r3, r0
 800269e:	3308      	adds	r3, #8
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b2e4      	uxtb	r4, r4
 80026a4:	4849      	ldr	r0, [pc, #292]	; (80027cc <test_shelik+0x27c>)
 80026a6:	008a      	lsls	r2, r1, #2
 80026a8:	4402      	add	r2, r0
 80026aa:	4413      	add	r3, r2
 80026ac:	4622      	mov	r2, r4
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	f000 bc25 	b.w	8002efe <test_shelik+0x9ae>
				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 80026b4:	4b48      	ldr	r3, [pc, #288]	; (80027d8 <test_shelik+0x288>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d00e      	beq.n	80026dc <test_shelik+0x18c>
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <test_shelik+0x28c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d009      	beq.n	80026dc <test_shelik+0x18c>
 80026c8:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <test_shelik+0x290>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d004      	beq.n	80026dc <test_shelik+0x18c>
 80026d2:	4b44      	ldr	r3, [pc, #272]	; (80027e4 <test_shelik+0x294>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d145      	bne.n	8002768 <test_shelik+0x218>
					if(bul[i].player_id == 1){
 80026dc:	493a      	ldr	r1, [pc, #232]	; (80027c8 <test_shelik+0x278>)
 80026de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d118      	bne.n	8002722 <test_shelik+0x1d2>
						player2.health--;
 80026f0:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <test_shelik+0x298>)
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	4a3c      	ldr	r2, [pc, #240]	; (80027e8 <test_shelik+0x298>)
 80026f8:	6153      	str	r3, [r2, #20]
						if(player2.health==0 && gameEnd == 0){
 80026fa:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <test_shelik+0x298>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <test_shelik+0x1c6>
 8002702:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <test_shelik+0x29c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <test_shelik+0x1c6>
							gameEnd =1;
 800270a:	4b38      	ldr	r3, [pc, #224]	; (80027ec <test_shelik+0x29c>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]
							endgame(1);
 8002710:	2001      	movs	r0, #1
 8002712:	f000 fc17 	bl	8002f44 <endgame>
						}
						player1.points++;
 8002716:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <test_shelik+0x2a0>)
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	3301      	adds	r3, #1
 800271c:	4a34      	ldr	r2, [pc, #208]	; (80027f0 <test_shelik+0x2a0>)
 800271e:	6113      	str	r3, [r2, #16]
 8002720:	e017      	b.n	8002752 <test_shelik+0x202>
					}
					else{
						player1.health--;
 8002722:	4b33      	ldr	r3, [pc, #204]	; (80027f0 <test_shelik+0x2a0>)
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	3b01      	subs	r3, #1
 8002728:	4a31      	ldr	r2, [pc, #196]	; (80027f0 <test_shelik+0x2a0>)
 800272a:	6153      	str	r3, [r2, #20]
						if(player1.health==0 && gameEnd == 0){
 800272c:	4b30      	ldr	r3, [pc, #192]	; (80027f0 <test_shelik+0x2a0>)
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <test_shelik+0x1f8>
 8002734:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <test_shelik+0x29c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <test_shelik+0x1f8>
							gameEnd =1;
 800273c:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <test_shelik+0x29c>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]
							endgame(2);
 8002742:	2002      	movs	r0, #2
 8002744:	f000 fbfe 	bl	8002f44 <endgame>
						}
						player2.points++;
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <test_shelik+0x298>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	3301      	adds	r3, #1
 800274e:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <test_shelik+0x298>)
 8002750:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002752:	491d      	ldr	r1, [pc, #116]	; (80027c8 <test_shelik+0x278>)
 8002754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	3310      	adds	r3, #16
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
					continue;
 8002766:	e3ca      	b.n	8002efe <test_shelik+0x9ae>
				}
				else if(next_element == num_wall){
 8002768:	4b22      	ldr	r3, [pc, #136]	; (80027f4 <test_shelik+0x2a4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	d10a      	bne.n	8002788 <test_shelik+0x238>
					bul[i].active = 0;
 8002772:	4915      	ldr	r1, [pc, #84]	; (80027c8 <test_shelik+0x278>)
 8002774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	3310      	adds	r3, #16
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
					continue;
 8002786:	e3ba      	b.n	8002efe <test_shelik+0x9ae>
				}
				else if(next_element == 0){
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 83b7 	bne.w	8002efe <test_shelik+0x9ae>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <test_shelik+0x280>)
 8002792:	681c      	ldr	r4, [r3, #0]
 8002794:	490c      	ldr	r1, [pc, #48]	; (80027c8 <test_shelik+0x278>)
 8002796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	3304      	adds	r3, #4
 80027a4:	6819      	ldr	r1, [r3, #0]
 80027a6:	4808      	ldr	r0, [pc, #32]	; (80027c8 <test_shelik+0x278>)
 80027a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4403      	add	r3, r0
 80027b4:	3308      	adds	r3, #8
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	b2e4      	uxtb	r4, r4
 80027ba:	4804      	ldr	r0, [pc, #16]	; (80027cc <test_shelik+0x27c>)
 80027bc:	008a      	lsls	r2, r1, #2
 80027be:	4402      	add	r2, r0
 80027c0:	4413      	add	r3, r2
 80027c2:	4622      	mov	r2, r4
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e39a      	b.n	8002efe <test_shelik+0x9ae>
 80027c8:	20000768 	.word	0x20000768
 80027cc:	20000718 	.word	0x20000718
 80027d0:	200000a4 	.word	0x200000a4
 80027d4:	200000ac 	.word	0x200000ac
 80027d8:	20000094 	.word	0x20000094
 80027dc:	20000088 	.word	0x20000088
 80027e0:	20000090 	.word	0x20000090
 80027e4:	2000008c 	.word	0x2000008c
 80027e8:	20000068 	.word	0x20000068
 80027ec:	20000834 	.word	0x20000834
 80027f0:	20000048 	.word	0x20000048
 80027f4:	200000a8 	.word	0x200000a8

				}

			}
			else if(bul[i].direction == 2){
 80027f8:	49a0      	ldr	r1, [pc, #640]	; (8002a7c <test_shelik+0x52c>)
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	330c      	adds	r3, #12
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b02      	cmp	r3, #2
 800280c:	f040 814c 	bne.w	8002aa8 <test_shelik+0x558>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 8002810:	499a      	ldr	r1, [pc, #616]	; (8002a7c <test_shelik+0x52c>)
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	3304      	adds	r3, #4
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	4896      	ldr	r0, [pc, #600]	; (8002a7c <test_shelik+0x52c>)
 8002824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4403      	add	r3, r0
 8002830:	3308      	adds	r3, #8
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4892      	ldr	r0, [pc, #584]	; (8002a80 <test_shelik+0x530>)
 8002836:	008a      	lsls	r2, r1, #2
 8002838:	4402      	add	r2, r0
 800283a:	4413      	add	r3, r2
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	4b90      	ldr	r3, [pc, #576]	; (8002a84 <test_shelik+0x534>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d117      	bne.n	8002878 <test_shelik+0x328>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 8002848:	498c      	ldr	r1, [pc, #560]	; (8002a7c <test_shelik+0x52c>)
 800284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	3304      	adds	r3, #4
 8002858:	6819      	ldr	r1, [r3, #0]
 800285a:	4888      	ldr	r0, [pc, #544]	; (8002a7c <test_shelik+0x52c>)
 800285c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4403      	add	r3, r0
 8002868:	3308      	adds	r3, #8
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4884      	ldr	r0, [pc, #528]	; (8002a80 <test_shelik+0x530>)
 800286e:	008a      	lsls	r2, r1, #2
 8002870:	4402      	add	r2, r0
 8002872:	4413      	add	r3, r2
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
				}

				int new_y = bul[i].position_y - 1;
 8002878:	4980      	ldr	r1, [pc, #512]	; (8002a7c <test_shelik+0x52c>)
 800287a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	3308      	adds	r3, #8
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3b01      	subs	r3, #1
 800288c:	613b      	str	r3, [r7, #16]
				if(new_y >= 0){
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	db27      	blt.n	80028e4 <test_shelik+0x394>
					bul[i].position_y = new_y;
 8002894:	4979      	ldr	r1, [pc, #484]	; (8002a7c <test_shelik+0x52c>)
 8002896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	3308      	adds	r3, #8
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 80028a8:	4974      	ldr	r1, [pc, #464]	; (8002a7c <test_shelik+0x52c>)
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3304      	adds	r3, #4
 80028b8:	6819      	ldr	r1, [r3, #0]
 80028ba:	4870      	ldr	r0, [pc, #448]	; (8002a7c <test_shelik+0x52c>)
 80028bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4403      	add	r3, r0
 80028c8:	3308      	adds	r3, #8
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	486c      	ldr	r0, [pc, #432]	; (8002a80 <test_shelik+0x530>)
 80028ce:	008a      	lsls	r2, r1, #2
 80028d0:	4402      	add	r2, r0
 80028d2:	4413      	add	r3, r2
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]
				if(next_element == num_obstacle){
 80028d8:	4b6b      	ldr	r3, [pc, #428]	; (8002a88 <test_shelik+0x538>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d127      	bne.n	8002932 <test_shelik+0x3e2>
 80028e2:	e00a      	b.n	80028fa <test_shelik+0x3aa>
					bul[i].active = 0;
 80028e4:	4965      	ldr	r1, [pc, #404]	; (8002a7c <test_shelik+0x52c>)
 80028e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	3310      	adds	r3, #16
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
					continue;
 80028f8:	e301      	b.n	8002efe <test_shelik+0x9ae>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 80028fa:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <test_shelik+0x534>)
 80028fc:	681c      	ldr	r4, [r3, #0]
 80028fe:	495f      	ldr	r1, [pc, #380]	; (8002a7c <test_shelik+0x52c>)
 8002900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3304      	adds	r3, #4
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	485a      	ldr	r0, [pc, #360]	; (8002a7c <test_shelik+0x52c>)
 8002912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4403      	add	r3, r0
 800291e:	3308      	adds	r3, #8
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b2e4      	uxtb	r4, r4
 8002924:	4856      	ldr	r0, [pc, #344]	; (8002a80 <test_shelik+0x530>)
 8002926:	008a      	lsls	r2, r1, #2
 8002928:	4402      	add	r2, r0
 800292a:	4413      	add	r3, r2
 800292c:	4622      	mov	r2, r4
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e06b      	b.n	8002a0a <test_shelik+0x4ba>
				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 8002932:	4b56      	ldr	r3, [pc, #344]	; (8002a8c <test_shelik+0x53c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	429a      	cmp	r2, r3
 800293a:	d00e      	beq.n	800295a <test_shelik+0x40a>
 800293c:	4b54      	ldr	r3, [pc, #336]	; (8002a90 <test_shelik+0x540>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	429a      	cmp	r2, r3
 8002944:	d009      	beq.n	800295a <test_shelik+0x40a>
 8002946:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <test_shelik+0x544>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	429a      	cmp	r2, r3
 800294e:	d004      	beq.n	800295a <test_shelik+0x40a>
 8002950:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <test_shelik+0x548>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	429a      	cmp	r2, r3
 8002958:	d129      	bne.n	80029ae <test_shelik+0x45e>
					if(bul[i].player_id == 1){
 800295a:	4948      	ldr	r1, [pc, #288]	; (8002a7c <test_shelik+0x52c>)
 800295c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d10a      	bne.n	8002984 <test_shelik+0x434>
						player2.health--;
 800296e:	4b4b      	ldr	r3, [pc, #300]	; (8002a9c <test_shelik+0x54c>)
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	3b01      	subs	r3, #1
 8002974:	4a49      	ldr	r2, [pc, #292]	; (8002a9c <test_shelik+0x54c>)
 8002976:	6153      	str	r3, [r2, #20]
						player1.points++;
 8002978:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <test_shelik+0x550>)
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	3301      	adds	r3, #1
 800297e:	4a48      	ldr	r2, [pc, #288]	; (8002aa0 <test_shelik+0x550>)
 8002980:	6113      	str	r3, [r2, #16]
 8002982:	e009      	b.n	8002998 <test_shelik+0x448>
					}
					else{
						player1.health--;
 8002984:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <test_shelik+0x550>)
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	3b01      	subs	r3, #1
 800298a:	4a45      	ldr	r2, [pc, #276]	; (8002aa0 <test_shelik+0x550>)
 800298c:	6153      	str	r3, [r2, #20]
						player2.points++;
 800298e:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <test_shelik+0x54c>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	3301      	adds	r3, #1
 8002994:	4a41      	ldr	r2, [pc, #260]	; (8002a9c <test_shelik+0x54c>)
 8002996:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002998:	4938      	ldr	r1, [pc, #224]	; (8002a7c <test_shelik+0x52c>)
 800299a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3310      	adds	r3, #16
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
					continue;
 80029ac:	e2a7      	b.n	8002efe <test_shelik+0x9ae>
				}
				else if(next_element == num_wall){
 80029ae:	4b3d      	ldr	r3, [pc, #244]	; (8002aa4 <test_shelik+0x554>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d10a      	bne.n	80029ce <test_shelik+0x47e>
					bul[i].active = 0;
 80029b8:	4930      	ldr	r1, [pc, #192]	; (8002a7c <test_shelik+0x52c>)
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3310      	adds	r3, #16
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
					continue;
 80029cc:	e297      	b.n	8002efe <test_shelik+0x9ae>
				}
				else if(next_element == 0){
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d11a      	bne.n	8002a0a <test_shelik+0x4ba>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <test_shelik+0x534>)
 80029d6:	681c      	ldr	r4, [r3, #0]
 80029d8:	4928      	ldr	r1, [pc, #160]	; (8002a7c <test_shelik+0x52c>)
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3304      	adds	r3, #4
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	4824      	ldr	r0, [pc, #144]	; (8002a7c <test_shelik+0x52c>)
 80029ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4403      	add	r3, r0
 80029f8:	3308      	adds	r3, #8
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b2e4      	uxtb	r4, r4
 80029fe:	4820      	ldr	r0, [pc, #128]	; (8002a80 <test_shelik+0x530>)
 8002a00:	008a      	lsls	r2, r1, #2
 8002a02:	4402      	add	r2, r0
 8002a04:	4413      	add	r3, r2
 8002a06:	4622      	mov	r2, r4
 8002a08:	701a      	strb	r2, [r3, #0]

				}
				if(lcd[bul[i].position_x][bul[i].position_y+1] == num_arrow){
 8002a0a:	491c      	ldr	r1, [pc, #112]	; (8002a7c <test_shelik+0x52c>)
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	3304      	adds	r3, #4
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	4817      	ldr	r0, [pc, #92]	; (8002a7c <test_shelik+0x52c>)
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4403      	add	r3, r0
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	4813      	ldr	r0, [pc, #76]	; (8002a80 <test_shelik+0x530>)
 8002a32:	008a      	lsls	r2, r1, #2
 8002a34:	4402      	add	r2, r0
 8002a36:	4413      	add	r3, r2
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <test_shelik+0x534>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	f040 825c 	bne.w	8002efe <test_shelik+0x9ae>
					lcd[bul[i].position_x][bul[i].position_y+1] = 0;
 8002a46:	490d      	ldr	r1, [pc, #52]	; (8002a7c <test_shelik+0x52c>)
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	3304      	adds	r3, #4
 8002a56:	6819      	ldr	r1, [r3, #0]
 8002a58:	4808      	ldr	r0, [pc, #32]	; (8002a7c <test_shelik+0x52c>)
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4403      	add	r3, r0
 8002a66:	3308      	adds	r3, #8
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	4804      	ldr	r0, [pc, #16]	; (8002a80 <test_shelik+0x530>)
 8002a6e:	008a      	lsls	r2, r1, #2
 8002a70:	4402      	add	r2, r0
 8002a72:	4413      	add	r3, r2
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e241      	b.n	8002efe <test_shelik+0x9ae>
 8002a7a:	bf00      	nop
 8002a7c:	20000768 	.word	0x20000768
 8002a80:	20000718 	.word	0x20000718
 8002a84:	200000a4 	.word	0x200000a4
 8002a88:	200000ac 	.word	0x200000ac
 8002a8c:	20000094 	.word	0x20000094
 8002a90:	20000088 	.word	0x20000088
 8002a94:	20000090 	.word	0x20000090
 8002a98:	2000008c 	.word	0x2000008c
 8002a9c:	20000068 	.word	0x20000068
 8002aa0:	20000048 	.word	0x20000048
 8002aa4:	200000a8 	.word	0x200000a8
			}




			else if(bul[i].direction == 3){
 8002aa8:	4985      	ldr	r1, [pc, #532]	; (8002cc0 <test_shelik+0x770>)
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	f040 8116 	bne.w	8002cec <test_shelik+0x79c>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 8002ac0:	497f      	ldr	r1, [pc, #508]	; (8002cc0 <test_shelik+0x770>)
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	3304      	adds	r3, #4
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	487b      	ldr	r0, [pc, #492]	; (8002cc0 <test_shelik+0x770>)
 8002ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4403      	add	r3, r0
 8002ae0:	3308      	adds	r3, #8
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4877      	ldr	r0, [pc, #476]	; (8002cc4 <test_shelik+0x774>)
 8002ae6:	008a      	lsls	r2, r1, #2
 8002ae8:	4402      	add	r2, r0
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b75      	ldr	r3, [pc, #468]	; (8002cc8 <test_shelik+0x778>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d117      	bne.n	8002b28 <test_shelik+0x5d8>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 8002af8:	4971      	ldr	r1, [pc, #452]	; (8002cc0 <test_shelik+0x770>)
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	3304      	adds	r3, #4
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	486d      	ldr	r0, [pc, #436]	; (8002cc0 <test_shelik+0x770>)
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4403      	add	r3, r0
 8002b18:	3308      	adds	r3, #8
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4869      	ldr	r0, [pc, #420]	; (8002cc4 <test_shelik+0x774>)
 8002b1e:	008a      	lsls	r2, r1, #2
 8002b20:	4402      	add	r2, r0
 8002b22:	4413      	add	r3, r2
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
				}
				int new_x = bul[i].position_x + 1;
 8002b28:	4965      	ldr	r1, [pc, #404]	; (8002cc0 <test_shelik+0x770>)
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	3304      	adds	r3, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	61bb      	str	r3, [r7, #24]
				if(new_x < 24){
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2b17      	cmp	r3, #23
 8002b42:	dc27      	bgt.n	8002b94 <test_shelik+0x644>
					bul[i].position_x = new_x;
 8002b44:	495e      	ldr	r1, [pc, #376]	; (8002cc0 <test_shelik+0x770>)
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	3304      	adds	r3, #4
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 8002b58:	4959      	ldr	r1, [pc, #356]	; (8002cc0 <test_shelik+0x770>)
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	3304      	adds	r3, #4
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	4855      	ldr	r0, [pc, #340]	; (8002cc0 <test_shelik+0x770>)
 8002b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4403      	add	r3, r0
 8002b78:	3308      	adds	r3, #8
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4851      	ldr	r0, [pc, #324]	; (8002cc4 <test_shelik+0x774>)
 8002b7e:	008a      	lsls	r2, r1, #2
 8002b80:	4402      	add	r2, r0
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	617b      	str	r3, [r7, #20]
				if(next_element == num_obstacle){
 8002b88:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <test_shelik+0x77c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d127      	bne.n	8002be2 <test_shelik+0x692>
 8002b92:	e00a      	b.n	8002baa <test_shelik+0x65a>
					bul[i].active = 0;
 8002b94:	494a      	ldr	r1, [pc, #296]	; (8002cc0 <test_shelik+0x770>)
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3310      	adds	r3, #16
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
					continue;
 8002ba8:	e1a9      	b.n	8002efe <test_shelik+0x9ae>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <test_shelik+0x778>)
 8002bac:	681c      	ldr	r4, [r3, #0]
 8002bae:	4944      	ldr	r1, [pc, #272]	; (8002cc0 <test_shelik+0x770>)
 8002bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	6819      	ldr	r1, [r3, #0]
 8002bc0:	483f      	ldr	r0, [pc, #252]	; (8002cc0 <test_shelik+0x770>)
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4403      	add	r3, r0
 8002bce:	3308      	adds	r3, #8
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	b2e4      	uxtb	r4, r4
 8002bd4:	483b      	ldr	r0, [pc, #236]	; (8002cc4 <test_shelik+0x774>)
 8002bd6:	008a      	lsls	r2, r1, #2
 8002bd8:	4402      	add	r2, r0
 8002bda:	4413      	add	r3, r2
 8002bdc:	4622      	mov	r2, r4
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e18d      	b.n	8002efe <test_shelik+0x9ae>
				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 8002be2:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <test_shelik+0x780>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d00e      	beq.n	8002c0a <test_shelik+0x6ba>
 8002bec:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <test_shelik+0x784>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d009      	beq.n	8002c0a <test_shelik+0x6ba>
 8002bf6:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <test_shelik+0x788>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d004      	beq.n	8002c0a <test_shelik+0x6ba>
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <test_shelik+0x78c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d129      	bne.n	8002c5e <test_shelik+0x70e>
					if(bul[i].player_id == 1){
 8002c0a:	492d      	ldr	r1, [pc, #180]	; (8002cc0 <test_shelik+0x770>)
 8002c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d10a      	bne.n	8002c34 <test_shelik+0x6e4>
						player2.health--;
 8002c1e:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <test_shelik+0x790>)
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	4a2e      	ldr	r2, [pc, #184]	; (8002ce0 <test_shelik+0x790>)
 8002c26:	6153      	str	r3, [r2, #20]
						player1.points++;
 8002c28:	4b2e      	ldr	r3, [pc, #184]	; (8002ce4 <test_shelik+0x794>)
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	4a2d      	ldr	r2, [pc, #180]	; (8002ce4 <test_shelik+0x794>)
 8002c30:	6113      	str	r3, [r2, #16]
 8002c32:	e009      	b.n	8002c48 <test_shelik+0x6f8>
					}
					else{
						player1.health--;
 8002c34:	4b2b      	ldr	r3, [pc, #172]	; (8002ce4 <test_shelik+0x794>)
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ce4 <test_shelik+0x794>)
 8002c3c:	6153      	str	r3, [r2, #20]
						player2.points++;
 8002c3e:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <test_shelik+0x790>)
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	3301      	adds	r3, #1
 8002c44:	4a26      	ldr	r2, [pc, #152]	; (8002ce0 <test_shelik+0x790>)
 8002c46:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002c48:	491d      	ldr	r1, [pc, #116]	; (8002cc0 <test_shelik+0x770>)
 8002c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	3310      	adds	r3, #16
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
					continue;
 8002c5c:	e14f      	b.n	8002efe <test_shelik+0x9ae>
				}
				else if(next_element == num_wall){
 8002c5e:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <test_shelik+0x798>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d10a      	bne.n	8002c7e <test_shelik+0x72e>
					bul[i].active = 0;
 8002c68:	4915      	ldr	r1, [pc, #84]	; (8002cc0 <test_shelik+0x770>)
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3310      	adds	r3, #16
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
					continue;
 8002c7c:	e13f      	b.n	8002efe <test_shelik+0x9ae>
				}
				else if(next_element == 0){
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 813c 	bne.w	8002efe <test_shelik+0x9ae>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <test_shelik+0x778>)
 8002c88:	681c      	ldr	r4, [r3, #0]
 8002c8a:	490d      	ldr	r1, [pc, #52]	; (8002cc0 <test_shelik+0x770>)
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3304      	adds	r3, #4
 8002c9a:	6819      	ldr	r1, [r3, #0]
 8002c9c:	4808      	ldr	r0, [pc, #32]	; (8002cc0 <test_shelik+0x770>)
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4403      	add	r3, r0
 8002caa:	3308      	adds	r3, #8
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	b2e4      	uxtb	r4, r4
 8002cb0:	4804      	ldr	r0, [pc, #16]	; (8002cc4 <test_shelik+0x774>)
 8002cb2:	008a      	lsls	r2, r1, #2
 8002cb4:	4402      	add	r2, r0
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4622      	mov	r2, r4
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e11f      	b.n	8002efe <test_shelik+0x9ae>
 8002cbe:	bf00      	nop
 8002cc0:	20000768 	.word	0x20000768
 8002cc4:	20000718 	.word	0x20000718
 8002cc8:	200000a4 	.word	0x200000a4
 8002ccc:	200000ac 	.word	0x200000ac
 8002cd0:	20000094 	.word	0x20000094
 8002cd4:	20000088 	.word	0x20000088
 8002cd8:	20000090 	.word	0x20000090
 8002cdc:	2000008c 	.word	0x2000008c
 8002ce0:	20000068 	.word	0x20000068
 8002ce4:	20000048 	.word	0x20000048
 8002ce8:	200000a8 	.word	0x200000a8
			}




			else if(bul[i].direction == 4){
 8002cec:	498a      	ldr	r1, [pc, #552]	; (8002f18 <test_shelik+0x9c8>)
 8002cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	330c      	adds	r3, #12
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	f040 80fd 	bne.w	8002efe <test_shelik+0x9ae>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 8002d04:	4984      	ldr	r1, [pc, #528]	; (8002f18 <test_shelik+0x9c8>)
 8002d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	3304      	adds	r3, #4
 8002d14:	6819      	ldr	r1, [r3, #0]
 8002d16:	4880      	ldr	r0, [pc, #512]	; (8002f18 <test_shelik+0x9c8>)
 8002d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4403      	add	r3, r0
 8002d24:	3308      	adds	r3, #8
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	487c      	ldr	r0, [pc, #496]	; (8002f1c <test_shelik+0x9cc>)
 8002d2a:	008a      	lsls	r2, r1, #2
 8002d2c:	4402      	add	r2, r0
 8002d2e:	4413      	add	r3, r2
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b7a      	ldr	r3, [pc, #488]	; (8002f20 <test_shelik+0x9d0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d117      	bne.n	8002d6c <test_shelik+0x81c>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 8002d3c:	4976      	ldr	r1, [pc, #472]	; (8002f18 <test_shelik+0x9c8>)
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	4872      	ldr	r0, [pc, #456]	; (8002f18 <test_shelik+0x9c8>)
 8002d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4403      	add	r3, r0
 8002d5c:	3308      	adds	r3, #8
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	486e      	ldr	r0, [pc, #440]	; (8002f1c <test_shelik+0x9cc>)
 8002d62:	008a      	lsls	r2, r1, #2
 8002d64:	4402      	add	r2, r0
 8002d66:	4413      	add	r3, r2
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
				}
				int new_y = bul[i].position_y + 1;
 8002d6c:	496a      	ldr	r1, [pc, #424]	; (8002f18 <test_shelik+0x9c8>)
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	623b      	str	r3, [r7, #32]
				if(new_y < 4){
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	dc27      	bgt.n	8002dd8 <test_shelik+0x888>
					bul[i].position_y = new_y;
 8002d88:	4963      	ldr	r1, [pc, #396]	; (8002f18 <test_shelik+0x9c8>)
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	3308      	adds	r3, #8
 8002d98:	6a3a      	ldr	r2, [r7, #32]
 8002d9a:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 8002d9c:	495e      	ldr	r1, [pc, #376]	; (8002f18 <test_shelik+0x9c8>)
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3304      	adds	r3, #4
 8002dac:	6819      	ldr	r1, [r3, #0]
 8002dae:	485a      	ldr	r0, [pc, #360]	; (8002f18 <test_shelik+0x9c8>)
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4403      	add	r3, r0
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4856      	ldr	r0, [pc, #344]	; (8002f1c <test_shelik+0x9cc>)
 8002dc2:	008a      	lsls	r2, r1, #2
 8002dc4:	4402      	add	r2, r0
 8002dc6:	4413      	add	r3, r2
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	61fb      	str	r3, [r7, #28]
				if(next_element == num_obstacle){
 8002dcc:	4b55      	ldr	r3, [pc, #340]	; (8002f24 <test_shelik+0x9d4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d127      	bne.n	8002e26 <test_shelik+0x8d6>
 8002dd6:	e00a      	b.n	8002dee <test_shelik+0x89e>
					bul[i].active = 0;
 8002dd8:	494f      	ldr	r1, [pc, #316]	; (8002f18 <test_shelik+0x9c8>)
 8002dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3310      	adds	r3, #16
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
					continue;
 8002dec:	e087      	b.n	8002efe <test_shelik+0x9ae>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002dee:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <test_shelik+0x9d0>)
 8002df0:	681c      	ldr	r4, [r3, #0]
 8002df2:	4949      	ldr	r1, [pc, #292]	; (8002f18 <test_shelik+0x9c8>)
 8002df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	3304      	adds	r3, #4
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	4844      	ldr	r0, [pc, #272]	; (8002f18 <test_shelik+0x9c8>)
 8002e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4403      	add	r3, r0
 8002e12:	3308      	adds	r3, #8
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	b2e4      	uxtb	r4, r4
 8002e18:	4840      	ldr	r0, [pc, #256]	; (8002f1c <test_shelik+0x9cc>)
 8002e1a:	008a      	lsls	r2, r1, #2
 8002e1c:	4402      	add	r2, r0
 8002e1e:	4413      	add	r3, r2
 8002e20:	4622      	mov	r2, r4
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	e06b      	b.n	8002efe <test_shelik+0x9ae>

				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 8002e26:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <test_shelik+0x9d8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d00e      	beq.n	8002e4e <test_shelik+0x8fe>
 8002e30:	4b3e      	ldr	r3, [pc, #248]	; (8002f2c <test_shelik+0x9dc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d009      	beq.n	8002e4e <test_shelik+0x8fe>
 8002e3a:	4b3d      	ldr	r3, [pc, #244]	; (8002f30 <test_shelik+0x9e0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d004      	beq.n	8002e4e <test_shelik+0x8fe>
 8002e44:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <test_shelik+0x9e4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d129      	bne.n	8002ea2 <test_shelik+0x952>
					if(bul[i].player_id == 1){
 8002e4e:	4932      	ldr	r1, [pc, #200]	; (8002f18 <test_shelik+0x9c8>)
 8002e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d10a      	bne.n	8002e78 <test_shelik+0x928>
						player2.health--;
 8002e62:	4b35      	ldr	r3, [pc, #212]	; (8002f38 <test_shelik+0x9e8>)
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	4a33      	ldr	r2, [pc, #204]	; (8002f38 <test_shelik+0x9e8>)
 8002e6a:	6153      	str	r3, [r2, #20]
						player1.points++;
 8002e6c:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <test_shelik+0x9ec>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	3301      	adds	r3, #1
 8002e72:	4a32      	ldr	r2, [pc, #200]	; (8002f3c <test_shelik+0x9ec>)
 8002e74:	6113      	str	r3, [r2, #16]
 8002e76:	e009      	b.n	8002e8c <test_shelik+0x93c>
					}
					else{
						player1.health--;
 8002e78:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <test_shelik+0x9ec>)
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	4a2f      	ldr	r2, [pc, #188]	; (8002f3c <test_shelik+0x9ec>)
 8002e80:	6153      	str	r3, [r2, #20]
						player2.points++;
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <test_shelik+0x9e8>)
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	3301      	adds	r3, #1
 8002e88:	4a2b      	ldr	r2, [pc, #172]	; (8002f38 <test_shelik+0x9e8>)
 8002e8a:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002e8c:	4922      	ldr	r1, [pc, #136]	; (8002f18 <test_shelik+0x9c8>)
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3310      	adds	r3, #16
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
					continue;
 8002ea0:	e02d      	b.n	8002efe <test_shelik+0x9ae>
				}

				else if(next_element == num_wall){
 8002ea2:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <test_shelik+0x9f0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d10a      	bne.n	8002ec2 <test_shelik+0x972>
					bul[i].active = 0;
 8002eac:	491a      	ldr	r1, [pc, #104]	; (8002f18 <test_shelik+0x9c8>)
 8002eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	3310      	adds	r3, #16
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
					continue;
 8002ec0:	e01d      	b.n	8002efe <test_shelik+0x9ae>
				}
				else if(next_element == 0){
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d11a      	bne.n	8002efe <test_shelik+0x9ae>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <test_shelik+0x9d0>)
 8002eca:	681c      	ldr	r4, [r3, #0]
 8002ecc:	4912      	ldr	r1, [pc, #72]	; (8002f18 <test_shelik+0x9c8>)
 8002ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3304      	adds	r3, #4
 8002edc:	6819      	ldr	r1, [r3, #0]
 8002ede:	480e      	ldr	r0, [pc, #56]	; (8002f18 <test_shelik+0x9c8>)
 8002ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4403      	add	r3, r0
 8002eec:	3308      	adds	r3, #8
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	b2e4      	uxtb	r4, r4
 8002ef2:	480a      	ldr	r0, [pc, #40]	; (8002f1c <test_shelik+0x9cc>)
 8002ef4:	008a      	lsls	r2, r1, #2
 8002ef6:	4402      	add	r2, r0
 8002ef8:	4413      	add	r3, r2
 8002efa:	4622      	mov	r2, r4
 8002efc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<10;i++){
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	3301      	adds	r3, #1
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	2b09      	cmp	r3, #9
 8002f08:	f77f ab29 	ble.w	800255e <test_shelik+0xe>


			}
		}
	}
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	372c      	adds	r7, #44	; 0x2c
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd90      	pop	{r4, r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000768 	.word	0x20000768
 8002f1c:	20000718 	.word	0x20000718
 8002f20:	200000a4 	.word	0x200000a4
 8002f24:	200000ac 	.word	0x200000ac
 8002f28:	20000094 	.word	0x20000094
 8002f2c:	20000088 	.word	0x20000088
 8002f30:	20000090 	.word	0x20000090
 8002f34:	2000008c 	.word	0x2000008c
 8002f38:	20000068 	.word	0x20000068
 8002f3c:	20000048 	.word	0x20000048
 8002f40:	200000a8 	.word	0x200000a8

08002f44 <endgame>:
void endgame(int won){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b09e      	sub	sp, #120	; 0x78
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

	if(won == 1){
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d113      	bne.n	8002f7a <endgame+0x36>
		char data [100];

		int n = sprintf(data, "Player:%c Won\n", player1.player_name);
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <endgame+0x64>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	4913      	ldr	r1, [pc, #76]	; (8002fac <endgame+0x68>)
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f006 fcb0 	bl	80098c4 <siprintf>
 8002f64:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit(&huart3, data, n, HAL_MAX_DELAY);
 8002f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	f107 010c 	add.w	r1, r7, #12
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f72:	480f      	ldr	r0, [pc, #60]	; (8002fb0 <endgame+0x6c>)
 8002f74:	f005 f996 	bl	80082a4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, data, n, HAL_MAX_DELAY);

	}


}
 8002f78:	e012      	b.n	8002fa0 <endgame+0x5c>
		int n = sprintf(data, "Player:%c Won\n", player2.player_name);
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <endgame+0x70>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f107 030c 	add.w	r3, r7, #12
 8002f84:	4909      	ldr	r1, [pc, #36]	; (8002fac <endgame+0x68>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f006 fc9c 	bl	80098c4 <siprintf>
 8002f8c:	6778      	str	r0, [r7, #116]	; 0x74
		HAL_UART_Transmit(&huart3, data, n, HAL_MAX_DELAY);
 8002f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	f107 010c 	add.w	r1, r7, #12
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9a:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <endgame+0x6c>)
 8002f9c:	f005 f982 	bl	80082a4 <HAL_UART_Transmit>
}
 8002fa0:	bf00      	nop
 8002fa2:	3778      	adds	r7, #120	; 0x78
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000048 	.word	0x20000048
 8002fac:	0800b6e4 	.word	0x0800b6e4
 8002fb0:	20000378 	.word	0x20000378
 8002fb4:	20000068 	.word	0x20000068

08002fb8 <move>:


void move(int player){
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b094      	sub	sp, #80	; 0x50
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	int dir;

	if (player == 1){
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	f040 8148 	bne.w	8003258 <move+0x2a0>
		dir = player1.direction;
 8002fc8:	4b9f      	ldr	r3, [pc, #636]	; (8003248 <move+0x290>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 8002fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d14b      	bne.n	800306c <move+0xb4>
			int curr_col = player1.position_x;
 8002fd4:	4b9c      	ldr	r3, [pc, #624]	; (8003248 <move+0x290>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]
			int curr_row = player1.position_y;
 8002fda:	4b9b      	ldr	r3, [pc, #620]	; (8003248 <move+0x290>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	60fb      	str	r3, [r7, #12]
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f340 8275 	ble.w	80034d2 <move+0x51a>
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	4a97      	ldr	r2, [pc, #604]	; (800324c <move+0x294>)
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	441a      	add	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b95      	ldr	r3, [pc, #596]	; (8003250 <move+0x298>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	f000 8267 	beq.w	80034d2 <move+0x51a>
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	3b01      	subs	r3, #1
 8003008:	4a90      	ldr	r2, [pc, #576]	; (800324c <move+0x294>)
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	441a      	add	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4413      	add	r3, r2
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	4b8f      	ldr	r3, [pc, #572]	; (8003254 <move+0x29c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	f000 8259 	beq.w	80034d2 <move+0x51a>
				collect(lcd[curr_col - 1][curr_row], 1); //TODO add prizes
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	3b01      	subs	r3, #1
 8003024:	4a89      	ldr	r2, [pc, #548]	; (800324c <move+0x294>)
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	441a      	add	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fa50 	bl	80024d8 <collect>
				lcd[curr_col][curr_row] = 0;
 8003038:	4a84      	ldr	r2, [pc, #528]	; (800324c <move+0x294>)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	441a      	add	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player1.direction;
 8003048:	4b7f      	ldr	r3, [pc, #508]	; (8003248 <move+0x290>)
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	3b01      	subs	r3, #1
 8003050:	b2d1      	uxtb	r1, r2
 8003052:	4a7e      	ldr	r2, [pc, #504]	; (800324c <move+0x294>)
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	441a      	add	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	460a      	mov	r2, r1
 800305e:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x - 1;
 8003060:	4b79      	ldr	r3, [pc, #484]	; (8003248 <move+0x290>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	3b01      	subs	r3, #1
 8003066:	4a78      	ldr	r2, [pc, #480]	; (8003248 <move+0x290>)
 8003068:	6053      	str	r3, [r2, #4]
				lcd[curr_col][curr_row + 1] = player2.direction;
				player2.position_y = player2.position_y + 1;
			}
		}
	}
}
 800306a:	e232      	b.n	80034d2 <move+0x51a>
		}else if (dir == 2){
 800306c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306e:	2b02      	cmp	r3, #2
 8003070:	d14b      	bne.n	800310a <move+0x152>
			int curr_col = player1.position_x;
 8003072:	4b75      	ldr	r3, [pc, #468]	; (8003248 <move+0x290>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	61bb      	str	r3, [r7, #24]
			int curr_row = player1.position_y;
 8003078:	4b73      	ldr	r3, [pc, #460]	; (8003248 <move+0x290>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	617b      	str	r3, [r7, #20]
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f340 8226 	ble.w	80034d2 <move+0x51a>
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3b01      	subs	r3, #1
 800308a:	4970      	ldr	r1, [pc, #448]	; (800324c <move+0x294>)
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	0092      	lsls	r2, r2, #2
 8003090:	440a      	add	r2, r1
 8003092:	4413      	add	r3, r2
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	4b6d      	ldr	r3, [pc, #436]	; (8003250 <move+0x298>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	f000 8218 	beq.w	80034d2 <move+0x51a>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	4969      	ldr	r1, [pc, #420]	; (800324c <move+0x294>)
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	0092      	lsls	r2, r2, #2
 80030ac:	440a      	add	r2, r1
 80030ae:	4413      	add	r3, r2
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b67      	ldr	r3, [pc, #412]	; (8003254 <move+0x29c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	f000 820a 	beq.w	80034d2 <move+0x51a>
				collect(lcd[curr_col][curr_row - 1], 1); //TODO add prizes
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	4962      	ldr	r1, [pc, #392]	; (800324c <move+0x294>)
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	0092      	lsls	r2, r2, #2
 80030c8:	440a      	add	r2, r1
 80030ca:	4413      	add	r3, r2
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2101      	movs	r1, #1
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fa01 	bl	80024d8 <collect>
				lcd[curr_col][curr_row] = 0;
 80030d6:	4a5d      	ldr	r2, [pc, #372]	; (800324c <move+0x294>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	441a      	add	r2, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	4413      	add	r3, r2
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player1.direction;
 80030e6:	4b58      	ldr	r3, [pc, #352]	; (8003248 <move+0x290>)
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b2d0      	uxtb	r0, r2
 80030f0:	4956      	ldr	r1, [pc, #344]	; (800324c <move+0x294>)
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	0092      	lsls	r2, r2, #2
 80030f6:	440a      	add	r2, r1
 80030f8:	4413      	add	r3, r2
 80030fa:	4602      	mov	r2, r0
 80030fc:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y - 1;
 80030fe:	4b52      	ldr	r3, [pc, #328]	; (8003248 <move+0x290>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	3b01      	subs	r3, #1
 8003104:	4a50      	ldr	r2, [pc, #320]	; (8003248 <move+0x290>)
 8003106:	6093      	str	r3, [r2, #8]
}
 8003108:	e1e3      	b.n	80034d2 <move+0x51a>
		}else if (dir == 3){
 800310a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310c:	2b03      	cmp	r3, #3
 800310e:	d14b      	bne.n	80031a8 <move+0x1f0>
			int curr_col = player1.position_x;
 8003110:	4b4d      	ldr	r3, [pc, #308]	; (8003248 <move+0x290>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	623b      	str	r3, [r7, #32]
			int curr_row = player1.position_y;
 8003116:	4b4c      	ldr	r3, [pc, #304]	; (8003248 <move+0x290>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61fb      	str	r3, [r7, #28]
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	2b12      	cmp	r3, #18
 8003120:	f300 81d7 	bgt.w	80034d2 <move+0x51a>
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	3301      	adds	r3, #1
 8003128:	4a48      	ldr	r2, [pc, #288]	; (800324c <move+0x294>)
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	441a      	add	r2, r3
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	4413      	add	r3, r2
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	4b46      	ldr	r3, [pc, #280]	; (8003250 <move+0x298>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	f000 81c9 	beq.w	80034d2 <move+0x51a>
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	3301      	adds	r3, #1
 8003144:	4a41      	ldr	r2, [pc, #260]	; (800324c <move+0x294>)
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	4413      	add	r3, r2
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b40      	ldr	r3, [pc, #256]	; (8003254 <move+0x29c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	f000 81bb 	beq.w	80034d2 <move+0x51a>
				collect(lcd[curr_col + 1][curr_row], 1); //TODO add prizes
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	3301      	adds	r3, #1
 8003160:	4a3a      	ldr	r2, [pc, #232]	; (800324c <move+0x294>)
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	441a      	add	r2, r3
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	4413      	add	r3, r2
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2101      	movs	r1, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff f9b2 	bl	80024d8 <collect>
				lcd[curr_col][curr_row] = 0;
 8003174:	4a35      	ldr	r2, [pc, #212]	; (800324c <move+0x294>)
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	441a      	add	r2, r3
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	4413      	add	r3, r2
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player1.direction;
 8003184:	4b30      	ldr	r3, [pc, #192]	; (8003248 <move+0x290>)
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	3301      	adds	r3, #1
 800318c:	b2d1      	uxtb	r1, r2
 800318e:	4a2f      	ldr	r2, [pc, #188]	; (800324c <move+0x294>)
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	441a      	add	r2, r3
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	4413      	add	r3, r2
 8003198:	460a      	mov	r2, r1
 800319a:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x + 1;
 800319c:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <move+0x290>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	3301      	adds	r3, #1
 80031a2:	4a29      	ldr	r2, [pc, #164]	; (8003248 <move+0x290>)
 80031a4:	6053      	str	r3, [r2, #4]
}
 80031a6:	e194      	b.n	80034d2 <move+0x51a>
		}else if (dir == 4){
 80031a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	f040 8191 	bne.w	80034d2 <move+0x51a>
			int curr_col = player1.position_x;
 80031b0:	4b25      	ldr	r3, [pc, #148]	; (8003248 <move+0x290>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
			int curr_row = player1.position_y;
 80031b6:	4b24      	ldr	r3, [pc, #144]	; (8003248 <move+0x290>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	2b02      	cmp	r3, #2
 80031c0:	f300 8187 	bgt.w	80034d2 <move+0x51a>
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	3301      	adds	r3, #1
 80031c8:	4920      	ldr	r1, [pc, #128]	; (800324c <move+0x294>)
 80031ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031cc:	0092      	lsls	r2, r2, #2
 80031ce:	440a      	add	r2, r1
 80031d0:	4413      	add	r3, r2
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <move+0x298>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	f000 8179 	beq.w	80034d2 <move+0x51a>
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	3301      	adds	r3, #1
 80031e4:	4919      	ldr	r1, [pc, #100]	; (800324c <move+0x294>)
 80031e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e8:	0092      	lsls	r2, r2, #2
 80031ea:	440a      	add	r2, r1
 80031ec:	4413      	add	r3, r2
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b18      	ldr	r3, [pc, #96]	; (8003254 <move+0x29c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	f000 816b 	beq.w	80034d2 <move+0x51a>
				collect(lcd[curr_col][curr_row + 1], 1); //TODO add prizes
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	3301      	adds	r3, #1
 8003200:	4912      	ldr	r1, [pc, #72]	; (800324c <move+0x294>)
 8003202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003204:	0092      	lsls	r2, r2, #2
 8003206:	440a      	add	r2, r1
 8003208:	4413      	add	r3, r2
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2101      	movs	r1, #1
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f962 	bl	80024d8 <collect>
				lcd[curr_col][curr_row] = 0;
 8003214:	4a0d      	ldr	r2, [pc, #52]	; (800324c <move+0x294>)
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	441a      	add	r2, r3
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	4413      	add	r3, r2
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player1.direction;
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <move+0x290>)
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	3301      	adds	r3, #1
 800322c:	b2d0      	uxtb	r0, r2
 800322e:	4907      	ldr	r1, [pc, #28]	; (800324c <move+0x294>)
 8003230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003232:	0092      	lsls	r2, r2, #2
 8003234:	440a      	add	r2, r1
 8003236:	4413      	add	r3, r2
 8003238:	4602      	mov	r2, r0
 800323a:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y + 1;
 800323c:	4b02      	ldr	r3, [pc, #8]	; (8003248 <move+0x290>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	3301      	adds	r3, #1
 8003242:	4a01      	ldr	r2, [pc, #4]	; (8003248 <move+0x290>)
 8003244:	6093      	str	r3, [r2, #8]
}
 8003246:	e144      	b.n	80034d2 <move+0x51a>
 8003248:	20000048 	.word	0x20000048
 800324c:	20000718 	.word	0x20000718
 8003250:	200000ac 	.word	0x200000ac
 8003254:	200000a8 	.word	0x200000a8
	}else if (player == 2){
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b02      	cmp	r3, #2
 800325c:	f040 8139 	bne.w	80034d2 <move+0x51a>
		dir = player2.direction;
 8003260:	4b9e      	ldr	r3, [pc, #632]	; (80034dc <move+0x524>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 8003266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d14b      	bne.n	8003304 <move+0x34c>
			int curr_col = player2.position_x;
 800326c:	4b9b      	ldr	r3, [pc, #620]	; (80034dc <move+0x524>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	633b      	str	r3, [r7, #48]	; 0x30
			int curr_row = player2.position_y;
 8003272:	4b9a      	ldr	r3, [pc, #616]	; (80034dc <move+0x524>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	2b00      	cmp	r3, #0
 800327c:	f340 8129 	ble.w	80034d2 <move+0x51a>
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	3b01      	subs	r3, #1
 8003284:	4a96      	ldr	r2, [pc, #600]	; (80034e0 <move+0x528>)
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	441a      	add	r2, r3
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	4413      	add	r3, r2
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	4b94      	ldr	r3, [pc, #592]	; (80034e4 <move+0x52c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	f000 811b 	beq.w	80034d2 <move+0x51a>
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	3b01      	subs	r3, #1
 80032a0:	4a8f      	ldr	r2, [pc, #572]	; (80034e0 <move+0x528>)
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	441a      	add	r2, r3
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	4413      	add	r3, r2
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b8e      	ldr	r3, [pc, #568]	; (80034e8 <move+0x530>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	f000 810d 	beq.w	80034d2 <move+0x51a>
				collect(lcd[curr_col - 1][curr_row], 2); //TODO add prizes
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	3b01      	subs	r3, #1
 80032bc:	4a88      	ldr	r2, [pc, #544]	; (80034e0 <move+0x528>)
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	441a      	add	r2, r3
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	4413      	add	r3, r2
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2102      	movs	r1, #2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f904 	bl	80024d8 <collect>
				lcd[curr_col][curr_row] = 0;
 80032d0:	4a83      	ldr	r2, [pc, #524]	; (80034e0 <move+0x528>)
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	441a      	add	r2, r3
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	4413      	add	r3, r2
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player2.direction;
 80032e0:	4b7e      	ldr	r3, [pc, #504]	; (80034dc <move+0x524>)
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b2d1      	uxtb	r1, r2
 80032ea:	4a7d      	ldr	r2, [pc, #500]	; (80034e0 <move+0x528>)
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	441a      	add	r2, r3
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	4413      	add	r3, r2
 80032f4:	460a      	mov	r2, r1
 80032f6:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x - 1;
 80032f8:	4b78      	ldr	r3, [pc, #480]	; (80034dc <move+0x524>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	4a77      	ldr	r2, [pc, #476]	; (80034dc <move+0x524>)
 8003300:	6053      	str	r3, [r2, #4]
}
 8003302:	e0e6      	b.n	80034d2 <move+0x51a>
		}else if (dir == 2){
 8003304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003306:	2b02      	cmp	r3, #2
 8003308:	d14b      	bne.n	80033a2 <move+0x3ea>
			int curr_col = player2.position_x;
 800330a:	4b74      	ldr	r3, [pc, #464]	; (80034dc <move+0x524>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	63bb      	str	r3, [r7, #56]	; 0x38
			int curr_row = player2.position_y;
 8003310:	4b72      	ldr	r3, [pc, #456]	; (80034dc <move+0x524>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 8003316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003318:	2b00      	cmp	r3, #0
 800331a:	f340 80da 	ble.w	80034d2 <move+0x51a>
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	3b01      	subs	r3, #1
 8003322:	496f      	ldr	r1, [pc, #444]	; (80034e0 <move+0x528>)
 8003324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	440a      	add	r2, r1
 800332a:	4413      	add	r3, r2
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	4b6c      	ldr	r3, [pc, #432]	; (80034e4 <move+0x52c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	f000 80cc 	beq.w	80034d2 <move+0x51a>
 800333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333c:	3b01      	subs	r3, #1
 800333e:	4968      	ldr	r1, [pc, #416]	; (80034e0 <move+0x528>)
 8003340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003342:	0092      	lsls	r2, r2, #2
 8003344:	440a      	add	r2, r1
 8003346:	4413      	add	r3, r2
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	4b66      	ldr	r3, [pc, #408]	; (80034e8 <move+0x530>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	f000 80be 	beq.w	80034d2 <move+0x51a>
				collect(lcd[curr_col][curr_row - 1], 2); //TODO add prizes
 8003356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003358:	3b01      	subs	r3, #1
 800335a:	4961      	ldr	r1, [pc, #388]	; (80034e0 <move+0x528>)
 800335c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800335e:	0092      	lsls	r2, r2, #2
 8003360:	440a      	add	r2, r1
 8003362:	4413      	add	r3, r2
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f8b5 	bl	80024d8 <collect>
				lcd[curr_col][curr_row] = 0;
 800336e:	4a5c      	ldr	r2, [pc, #368]	; (80034e0 <move+0x528>)
 8003370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	441a      	add	r2, r3
 8003376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003378:	4413      	add	r3, r2
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player2.direction;
 800337e:	4b57      	ldr	r3, [pc, #348]	; (80034dc <move+0x524>)
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003384:	3b01      	subs	r3, #1
 8003386:	b2d0      	uxtb	r0, r2
 8003388:	4955      	ldr	r1, [pc, #340]	; (80034e0 <move+0x528>)
 800338a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800338c:	0092      	lsls	r2, r2, #2
 800338e:	440a      	add	r2, r1
 8003390:	4413      	add	r3, r2
 8003392:	4602      	mov	r2, r0
 8003394:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y - 1;
 8003396:	4b51      	ldr	r3, [pc, #324]	; (80034dc <move+0x524>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	3b01      	subs	r3, #1
 800339c:	4a4f      	ldr	r2, [pc, #316]	; (80034dc <move+0x524>)
 800339e:	6093      	str	r3, [r2, #8]
}
 80033a0:	e097      	b.n	80034d2 <move+0x51a>
		}else if (dir == 3){
 80033a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d149      	bne.n	800343c <move+0x484>
			int curr_col = player2.position_x;
 80033a8:	4b4c      	ldr	r3, [pc, #304]	; (80034dc <move+0x524>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	643b      	str	r3, [r7, #64]	; 0x40
			int curr_row = player2.position_y;
 80033ae:	4b4b      	ldr	r3, [pc, #300]	; (80034dc <move+0x524>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 80033b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b6:	2b12      	cmp	r3, #18
 80033b8:	f300 808b 	bgt.w	80034d2 <move+0x51a>
 80033bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033be:	3301      	adds	r3, #1
 80033c0:	4a47      	ldr	r2, [pc, #284]	; (80034e0 <move+0x528>)
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	441a      	add	r2, r3
 80033c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c8:	4413      	add	r3, r2
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b45      	ldr	r3, [pc, #276]	; (80034e4 <move+0x52c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d07d      	beq.n	80034d2 <move+0x51a>
 80033d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d8:	3301      	adds	r3, #1
 80033da:	4a41      	ldr	r2, [pc, #260]	; (80034e0 <move+0x528>)
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	441a      	add	r2, r3
 80033e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <move+0x530>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d070      	beq.n	80034d2 <move+0x51a>
				collect(lcd[curr_col + 1][curr_row], 2); //TODO add prizes
 80033f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f2:	3301      	adds	r3, #1
 80033f4:	4a3a      	ldr	r2, [pc, #232]	; (80034e0 <move+0x528>)
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	441a      	add	r2, r3
 80033fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fc:	4413      	add	r3, r2
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2102      	movs	r1, #2
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff f868 	bl	80024d8 <collect>
				lcd[curr_col][curr_row] = 0;
 8003408:	4a35      	ldr	r2, [pc, #212]	; (80034e0 <move+0x528>)
 800340a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	441a      	add	r2, r3
 8003410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003412:	4413      	add	r3, r2
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player2.direction;
 8003418:	4b30      	ldr	r3, [pc, #192]	; (80034dc <move+0x524>)
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800341e:	3301      	adds	r3, #1
 8003420:	b2d1      	uxtb	r1, r2
 8003422:	4a2f      	ldr	r2, [pc, #188]	; (80034e0 <move+0x528>)
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	441a      	add	r2, r3
 8003428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342a:	4413      	add	r3, r2
 800342c:	460a      	mov	r2, r1
 800342e:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x + 1;
 8003430:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <move+0x524>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	3301      	adds	r3, #1
 8003436:	4a29      	ldr	r2, [pc, #164]	; (80034dc <move+0x524>)
 8003438:	6053      	str	r3, [r2, #4]
}
 800343a:	e04a      	b.n	80034d2 <move+0x51a>
		}else if (dir == 4){
 800343c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343e:	2b04      	cmp	r3, #4
 8003440:	d147      	bne.n	80034d2 <move+0x51a>
			int curr_col = player2.position_x;
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <move+0x524>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	64bb      	str	r3, [r7, #72]	; 0x48
			int curr_row = player2.position_y;
 8003448:	4b24      	ldr	r3, [pc, #144]	; (80034dc <move+0x524>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	647b      	str	r3, [r7, #68]	; 0x44
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 800344e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003450:	2b02      	cmp	r3, #2
 8003452:	dc3e      	bgt.n	80034d2 <move+0x51a>
 8003454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003456:	3301      	adds	r3, #1
 8003458:	4921      	ldr	r1, [pc, #132]	; (80034e0 <move+0x528>)
 800345a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800345c:	0092      	lsls	r2, r2, #2
 800345e:	440a      	add	r2, r1
 8003460:	4413      	add	r3, r2
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	4b1f      	ldr	r3, [pc, #124]	; (80034e4 <move+0x52c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d031      	beq.n	80034d2 <move+0x51a>
 800346e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003470:	3301      	adds	r3, #1
 8003472:	491b      	ldr	r1, [pc, #108]	; (80034e0 <move+0x528>)
 8003474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003476:	0092      	lsls	r2, r2, #2
 8003478:	440a      	add	r2, r1
 800347a:	4413      	add	r3, r2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <move+0x530>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d024      	beq.n	80034d2 <move+0x51a>
				collect(lcd[curr_col][curr_row + 1], 2); //TODO add prizes
 8003488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348a:	3301      	adds	r3, #1
 800348c:	4914      	ldr	r1, [pc, #80]	; (80034e0 <move+0x528>)
 800348e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003490:	0092      	lsls	r2, r2, #2
 8003492:	440a      	add	r2, r1
 8003494:	4413      	add	r3, r2
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2102      	movs	r1, #2
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff f81c 	bl	80024d8 <collect>
				lcd[curr_col][curr_row] = 0;
 80034a0:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <move+0x528>)
 80034a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	441a      	add	r2, r3
 80034a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034aa:	4413      	add	r3, r2
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player2.direction;
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <move+0x524>)
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b6:	3301      	adds	r3, #1
 80034b8:	b2d0      	uxtb	r0, r2
 80034ba:	4909      	ldr	r1, [pc, #36]	; (80034e0 <move+0x528>)
 80034bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034be:	0092      	lsls	r2, r2, #2
 80034c0:	440a      	add	r2, r1
 80034c2:	4413      	add	r3, r2
 80034c4:	4602      	mov	r2, r0
 80034c6:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y + 1;
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <move+0x524>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	3301      	adds	r3, #1
 80034ce:	4a03      	ldr	r2, [pc, #12]	; (80034dc <move+0x524>)
 80034d0:	6093      	str	r3, [r2, #8]
}
 80034d2:	bf00      	nop
 80034d4:	3750      	adds	r7, #80	; 0x50
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000068 	.word	0x20000068
 80034e0:	20000718 	.word	0x20000718
 80034e4:	200000ac 	.word	0x200000ac
 80034e8:	200000a8 	.word	0x200000a8

080034ec <uart_rx_enable_it>:

char character;
char input[50];
int  index_arr = 0;

void uart_rx_enable_it(void) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &character, 1);
 80034f0:	2201      	movs	r2, #1
 80034f2:	4903      	ldr	r1, [pc, #12]	; (8003500 <uart_rx_enable_it+0x14>)
 80034f4:	4803      	ldr	r0, [pc, #12]	; (8003504 <uart_rx_enable_it+0x18>)
 80034f6:	f004 ff5f 	bl	80083b8 <HAL_UART_Receive_IT>
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000838 	.word	0x20000838
 8003504:	20000378 	.word	0x20000378

08003508 <HAL_UART_RxCpltCallback>:


int mute_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003508:	b580      	push	{r7, lr}
 800350a:	b0cc      	sub	sp, #304	; 0x130
 800350c:	af00      	add	r7, sp, #0
 800350e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003512:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003516:	6018      	str	r0, [r3, #0]
	char data[100];
    char prefix1[] = "[name1]:";
 8003518:	4aa9      	ldr	r2, [pc, #676]	; (80037c0 <HAL_UART_RxCpltCallback+0x2b8>)
 800351a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800351e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003520:	c303      	stmia	r3!, {r0, r1}
 8003522:	701a      	strb	r2, [r3, #0]
    char prefix2[] = "[name2]:";
 8003524:	4aa7      	ldr	r2, [pc, #668]	; (80037c4 <HAL_UART_RxCpltCallback+0x2bc>)
 8003526:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800352a:	ca07      	ldmia	r2, {r0, r1, r2}
 800352c:	c303      	stmia	r3!, {r0, r1}
 800352e:	701a      	strb	r2, [r3, #0]
    char prefix3[] = "[mute]:";
 8003530:	4aa5      	ldr	r2, [pc, #660]	; (80037c8 <HAL_UART_RxCpltCallback+0x2c0>)
 8003532:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800353a:	e883 0003 	stmia.w	r3, {r0, r1}
    char prefix4[] = "[arrow]:";
 800353e:	4aa3      	ldr	r2, [pc, #652]	; (80037cc <HAL_UART_RxCpltCallback+0x2c4>)
 8003540:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003544:	ca07      	ldmia	r2, {r0, r1, r2}
 8003546:	c303      	stmia	r3!, {r0, r1}
 8003548:	701a      	strb	r2, [r3, #0]
    char prefix5[] = "[health]:";
 800354a:	4aa1      	ldr	r2, [pc, #644]	; (80037d0 <HAL_UART_RxCpltCallback+0x2c8>)
 800354c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003550:	ca07      	ldmia	r2, {r0, r1, r2}
 8003552:	c303      	stmia	r3!, {r0, r1}
 8003554:	801a      	strh	r2, [r3, #0]
    int temp;

    if (huart->Instance == USART3){
 8003556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800355a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a9c      	ldr	r2, [pc, #624]	; (80037d4 <HAL_UART_RxCpltCallback+0x2cc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	f040 81b8 	bne.w	80038da <HAL_UART_RxCpltCallback+0x3d2>

    	if(character != 10){
 800356a:	4b9b      	ldr	r3, [pc, #620]	; (80037d8 <HAL_UART_RxCpltCallback+0x2d0>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b0a      	cmp	r3, #10
 8003570:	d009      	beq.n	8003586 <HAL_UART_RxCpltCallback+0x7e>
    		input[index_arr++] = character;
 8003572:	4b9a      	ldr	r3, [pc, #616]	; (80037dc <HAL_UART_RxCpltCallback+0x2d4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	4998      	ldr	r1, [pc, #608]	; (80037dc <HAL_UART_RxCpltCallback+0x2d4>)
 800357a:	600a      	str	r2, [r1, #0]
 800357c:	4a96      	ldr	r2, [pc, #600]	; (80037d8 <HAL_UART_RxCpltCallback+0x2d0>)
 800357e:	7811      	ldrb	r1, [r2, #0]
 8003580:	4a97      	ldr	r2, [pc, #604]	; (80037e0 <HAL_UART_RxCpltCallback+0x2d8>)
 8003582:	54d1      	strb	r1, [r2, r3]
 8003584:	e1a9      	b.n	80038da <HAL_UART_RxCpltCallback+0x3d2>
    	}else{
    		input[index_arr++] = '\0';
 8003586:	4b95      	ldr	r3, [pc, #596]	; (80037dc <HAL_UART_RxCpltCallback+0x2d4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	4993      	ldr	r1, [pc, #588]	; (80037dc <HAL_UART_RxCpltCallback+0x2d4>)
 800358e:	600a      	str	r2, [r1, #0]
 8003590:	4a93      	ldr	r2, [pc, #588]	; (80037e0 <HAL_UART_RxCpltCallback+0x2d8>)
 8003592:	2100      	movs	r1, #0
 8003594:	54d1      	strb	r1, [r2, r3]
			index_arr = 0;
 8003596:	4b91      	ldr	r3, [pc, #580]	; (80037dc <HAL_UART_RxCpltCallback+0x2d4>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
			int value;
//			HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
//			sprintf(timeStr, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
			if (strncmp(input, prefix1, strlen(prefix1)) == 0){ //name1
 800359c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc fe15 	bl	80001d0 <strlen>
 80035a6:	4602      	mov	r2, r0
 80035a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035ac:	4619      	mov	r1, r3
 80035ae:	488c      	ldr	r0, [pc, #560]	; (80037e0 <HAL_UART_RxCpltCallback+0x2d8>)
 80035b0:	f006 fa19 	bl	80099e6 <strncmp>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d126      	bne.n	8003608 <HAL_UART_RxCpltCallback+0x100>
				if (sscanf(input + strlen(prefix1), "%c", &player1.player_name) == 1) {
 80035ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fc fe06 	bl	80001d0 <strlen>
 80035c4:	4603      	mov	r3, r0
 80035c6:	4a86      	ldr	r2, [pc, #536]	; (80037e0 <HAL_UART_RxCpltCallback+0x2d8>)
 80035c8:	4413      	add	r3, r2
 80035ca:	4a86      	ldr	r2, [pc, #536]	; (80037e4 <HAL_UART_RxCpltCallback+0x2dc>)
 80035cc:	4986      	ldr	r1, [pc, #536]	; (80037e8 <HAL_UART_RxCpltCallback+0x2e0>)
 80035ce:	4618      	mov	r0, r3
 80035d0:	f006 f998 	bl	8009904 <siscanf>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	f040 817f 	bne.w	80038da <HAL_UART_RxCpltCallback+0x3d2>
					char data[100];
					int n = sprintf(data, "saved %c \n", player1.player_name);
 80035dc:	4b81      	ldr	r3, [pc, #516]	; (80037e4 <HAL_UART_RxCpltCallback+0x2dc>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	f107 0308 	add.w	r3, r7, #8
 80035e6:	4981      	ldr	r1, [pc, #516]	; (80037ec <HAL_UART_RxCpltCallback+0x2e4>)
 80035e8:	4618      	mov	r0, r3
 80035ea:	f006 f96b 	bl	80098c4 <siprintf>
 80035ee:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
					HAL_UART_Transmit(&huart3, data, n, 1000);
 80035f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	f107 0108 	add.w	r1, r7, #8
 80035fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003600:	487b      	ldr	r0, [pc, #492]	; (80037f0 <HAL_UART_RxCpltCallback+0x2e8>)
 8003602:	f004 fe4f 	bl	80082a4 <HAL_UART_Transmit>
 8003606:	e168      	b.n	80038da <HAL_UART_RxCpltCallback+0x3d2>
				}
			}else if (strncmp(input, prefix2, strlen(prefix2)) == 0){ //name2
 8003608:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800360c:	4618      	mov	r0, r3
 800360e:	f7fc fddf 	bl	80001d0 <strlen>
 8003612:	4602      	mov	r2, r0
 8003614:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003618:	4619      	mov	r1, r3
 800361a:	4871      	ldr	r0, [pc, #452]	; (80037e0 <HAL_UART_RxCpltCallback+0x2d8>)
 800361c:	f006 f9e3 	bl	80099e6 <strncmp>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d126      	bne.n	8003674 <HAL_UART_RxCpltCallback+0x16c>
				if (sscanf(input + strlen(prefix2), "%c", &player2.player_name) == 1) {
 8003626:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc fdd0 	bl	80001d0 <strlen>
 8003630:	4603      	mov	r3, r0
 8003632:	4a6b      	ldr	r2, [pc, #428]	; (80037e0 <HAL_UART_RxCpltCallback+0x2d8>)
 8003634:	4413      	add	r3, r2
 8003636:	4a6f      	ldr	r2, [pc, #444]	; (80037f4 <HAL_UART_RxCpltCallback+0x2ec>)
 8003638:	496b      	ldr	r1, [pc, #428]	; (80037e8 <HAL_UART_RxCpltCallback+0x2e0>)
 800363a:	4618      	mov	r0, r3
 800363c:	f006 f962 	bl	8009904 <siscanf>
 8003640:	4603      	mov	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	f040 8149 	bne.w	80038da <HAL_UART_RxCpltCallback+0x3d2>
					char data[100];
					int n = sprintf(data, "saved %c \n", player2.player_name);
 8003648:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_UART_RxCpltCallback+0x2ec>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	f107 0308 	add.w	r3, r7, #8
 8003652:	4966      	ldr	r1, [pc, #408]	; (80037ec <HAL_UART_RxCpltCallback+0x2e4>)
 8003654:	4618      	mov	r0, r3
 8003656:	f006 f935 	bl	80098c4 <siprintf>
 800365a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
					HAL_UART_Transmit(&huart3, data, n, 1000);
 800365e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003662:	b29a      	uxth	r2, r3
 8003664:	f107 0108 	add.w	r1, r7, #8
 8003668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800366c:	4860      	ldr	r0, [pc, #384]	; (80037f0 <HAL_UART_RxCpltCallback+0x2e8>)
 800366e:	f004 fe19 	bl	80082a4 <HAL_UART_Transmit>
 8003672:	e132      	b.n	80038da <HAL_UART_RxCpltCallback+0x3d2>
				}
			}else if (strncmp(input, prefix3, strlen(prefix3)) == 0){ //mute
 8003674:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc fda9 	bl	80001d0 <strlen>
 800367e:	4602      	mov	r2, r0
 8003680:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003684:	4619      	mov	r1, r3
 8003686:	4856      	ldr	r0, [pc, #344]	; (80037e0 <HAL_UART_RxCpltCallback+0x2d8>)
 8003688:	f006 f9ad 	bl	80099e6 <strncmp>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d142      	bne.n	8003718 <HAL_UART_RxCpltCallback+0x210>
				if (sscanf(input + strlen(prefix3), "%d", &temp) == 1) {
 8003692:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003696:	4618      	mov	r0, r3
 8003698:	f7fc fd9a 	bl	80001d0 <strlen>
 800369c:	4603      	mov	r3, r0
 800369e:	4a50      	ldr	r2, [pc, #320]	; (80037e0 <HAL_UART_RxCpltCallback+0x2d8>)
 80036a0:	4413      	add	r3, r2
 80036a2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80036a6:	4954      	ldr	r1, [pc, #336]	; (80037f8 <HAL_UART_RxCpltCallback+0x2f0>)
 80036a8:	4618      	mov	r0, r3
 80036aa:	f006 f92b 	bl	8009904 <siscanf>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	f040 8112 	bne.w	80038da <HAL_UART_RxCpltCallback+0x3d2>
					if (temp >= 0 && temp <=1){
 80036b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	db1a      	blt.n	80036f2 <HAL_UART_RxCpltCallback+0x1ea>
 80036bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	dc17      	bgt.n	80036f2 <HAL_UART_RxCpltCallback+0x1ea>
						mute_flag = temp;
 80036c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c4:	4a4d      	ldr	r2, [pc, #308]	; (80037fc <HAL_UART_RxCpltCallback+0x2f4>)
 80036c6:	6013      	str	r3, [r2, #0]
						char data[100];
						int n = sprintf(data, "mute: %d\n", mute_flag);
 80036c8:	4b4c      	ldr	r3, [pc, #304]	; (80037fc <HAL_UART_RxCpltCallback+0x2f4>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	f107 0308 	add.w	r3, r7, #8
 80036d0:	494b      	ldr	r1, [pc, #300]	; (8003800 <HAL_UART_RxCpltCallback+0x2f8>)
 80036d2:	4618      	mov	r0, r3
 80036d4:	f006 f8f6 	bl	80098c4 <siprintf>
 80036d8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
						HAL_UART_Transmit(&huart3, data, n, 1000);
 80036dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	f107 0108 	add.w	r1, r7, #8
 80036e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ea:	4841      	ldr	r0, [pc, #260]	; (80037f0 <HAL_UART_RxCpltCallback+0x2e8>)
 80036ec:	f004 fdda 	bl	80082a4 <HAL_UART_Transmit>
					if (temp >= 0 && temp <=1){
 80036f0:	e0f3      	b.n	80038da <HAL_UART_RxCpltCallback+0x3d2>
					}else{
						char data[100];
						int n = sprintf(data, "Error mute flag\n");
 80036f2:	f107 0308 	add.w	r3, r7, #8
 80036f6:	4943      	ldr	r1, [pc, #268]	; (8003804 <HAL_UART_RxCpltCallback+0x2fc>)
 80036f8:	4618      	mov	r0, r3
 80036fa:	f006 f8e3 	bl	80098c4 <siprintf>
 80036fe:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003706:	b29a      	uxth	r2, r3
 8003708:	f107 0108 	add.w	r1, r7, #8
 800370c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003710:	4837      	ldr	r0, [pc, #220]	; (80037f0 <HAL_UART_RxCpltCallback+0x2e8>)
 8003712:	f004 fdc7 	bl	80082a4 <HAL_UART_Transmit>
 8003716:	e0e0      	b.n	80038da <HAL_UART_RxCpltCallback+0x3d2>
					}
				}
			}else if (strncmp(input, prefix4, strlen(prefix4)) == 0){ //arrow
 8003718:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800371c:	4618      	mov	r0, r3
 800371e:	f7fc fd57 	bl	80001d0 <strlen>
 8003722:	4602      	mov	r2, r0
 8003724:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003728:	4619      	mov	r1, r3
 800372a:	482d      	ldr	r0, [pc, #180]	; (80037e0 <HAL_UART_RxCpltCallback+0x2d8>)
 800372c:	f006 f95b 	bl	80099e6 <strncmp>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d16c      	bne.n	8003810 <HAL_UART_RxCpltCallback+0x308>
				if (sscanf(input + strlen(prefix4), "%d", &temp) == 1) {
 8003736:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc fd48 	bl	80001d0 <strlen>
 8003740:	4603      	mov	r3, r0
 8003742:	4a27      	ldr	r2, [pc, #156]	; (80037e0 <HAL_UART_RxCpltCallback+0x2d8>)
 8003744:	4413      	add	r3, r2
 8003746:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800374a:	492b      	ldr	r1, [pc, #172]	; (80037f8 <HAL_UART_RxCpltCallback+0x2f0>)
 800374c:	4618      	mov	r0, r3
 800374e:	f006 f8d9 	bl	8009904 <siscanf>
 8003752:	4603      	mov	r3, r0
 8003754:	2b01      	cmp	r3, #1
 8003756:	f040 80c0 	bne.w	80038da <HAL_UART_RxCpltCallback+0x3d2>
					if (temp >= 1 && temp <= 9){
 800375a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375c:	2b00      	cmp	r3, #0
 800375e:	dd1c      	ble.n	800379a <HAL_UART_RxCpltCallback+0x292>
 8003760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003762:	2b09      	cmp	r3, #9
 8003764:	dc19      	bgt.n	800379a <HAL_UART_RxCpltCallback+0x292>
						player1.arrow = temp;
 8003766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003768:	4a1e      	ldr	r2, [pc, #120]	; (80037e4 <HAL_UART_RxCpltCallback+0x2dc>)
 800376a:	6193      	str	r3, [r2, #24]
						player2.arrow = temp;
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	4a21      	ldr	r2, [pc, #132]	; (80037f4 <HAL_UART_RxCpltCallback+0x2ec>)
 8003770:	6193      	str	r3, [r2, #24]
						char data[100];
						int n = sprintf(data, "Arrow number is: %d\n", temp);
 8003772:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003774:	f107 0308 	add.w	r3, r7, #8
 8003778:	4923      	ldr	r1, [pc, #140]	; (8003808 <HAL_UART_RxCpltCallback+0x300>)
 800377a:	4618      	mov	r0, r3
 800377c:	f006 f8a2 	bl	80098c4 <siprintf>
 8003780:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8003784:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003788:	b29a      	uxth	r2, r3
 800378a:	f107 0108 	add.w	r1, r7, #8
 800378e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003792:	4817      	ldr	r0, [pc, #92]	; (80037f0 <HAL_UART_RxCpltCallback+0x2e8>)
 8003794:	f004 fd86 	bl	80082a4 <HAL_UART_Transmit>
					if (temp >= 1 && temp <= 9){
 8003798:	e09f      	b.n	80038da <HAL_UART_RxCpltCallback+0x3d2>
					}else{
						char data[100];
						int n = sprintf(data, "Error arrow number\n");
 800379a:	f107 0308 	add.w	r3, r7, #8
 800379e:	491b      	ldr	r1, [pc, #108]	; (800380c <HAL_UART_RxCpltCallback+0x304>)
 80037a0:	4618      	mov	r0, r3
 80037a2:	f006 f88f 	bl	80098c4 <siprintf>
 80037a6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
						HAL_UART_Transmit(&huart3, data, n, 1000);
 80037aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	f107 0108 	add.w	r1, r7, #8
 80037b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037b8:	480d      	ldr	r0, [pc, #52]	; (80037f0 <HAL_UART_RxCpltCallback+0x2e8>)
 80037ba:	f004 fd73 	bl	80082a4 <HAL_UART_Transmit>
 80037be:	e08c      	b.n	80038da <HAL_UART_RxCpltCallback+0x3d2>
 80037c0:	0800b798 	.word	0x0800b798
 80037c4:	0800b7a4 	.word	0x0800b7a4
 80037c8:	0800b7b0 	.word	0x0800b7b0
 80037cc:	0800b7b8 	.word	0x0800b7b8
 80037d0:	0800b7c4 	.word	0x0800b7c4
 80037d4:	40004800 	.word	0x40004800
 80037d8:	20000838 	.word	0x20000838
 80037dc:	20000870 	.word	0x20000870
 80037e0:	2000083c 	.word	0x2000083c
 80037e4:	20000048 	.word	0x20000048
 80037e8:	0800b6f4 	.word	0x0800b6f4
 80037ec:	0800b6f8 	.word	0x0800b6f8
 80037f0:	20000378 	.word	0x20000378
 80037f4:	20000068 	.word	0x20000068
 80037f8:	0800b704 	.word	0x0800b704
 80037fc:	20000874 	.word	0x20000874
 8003800:	0800b708 	.word	0x0800b708
 8003804:	0800b714 	.word	0x0800b714
 8003808:	0800b728 	.word	0x0800b728
 800380c:	0800b740 	.word	0x0800b740
					}
				}
			}else if (strncmp(input, prefix5, strlen(prefix5)) == 0){ //health
 8003810:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003814:	4618      	mov	r0, r3
 8003816:	f7fc fcdb 	bl	80001d0 <strlen>
 800381a:	4602      	mov	r2, r0
 800381c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003820:	4619      	mov	r1, r3
 8003822:	4831      	ldr	r0, [pc, #196]	; (80038e8 <HAL_UART_RxCpltCallback+0x3e0>)
 8003824:	f006 f8df 	bl	80099e6 <strncmp>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d143      	bne.n	80038b6 <HAL_UART_RxCpltCallback+0x3ae>
				if (sscanf(input + strlen(prefix5), "%d", &temp) == 1) {
 800382e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003832:	4618      	mov	r0, r3
 8003834:	f7fc fccc 	bl	80001d0 <strlen>
 8003838:	4603      	mov	r3, r0
 800383a:	4a2b      	ldr	r2, [pc, #172]	; (80038e8 <HAL_UART_RxCpltCallback+0x3e0>)
 800383c:	4413      	add	r3, r2
 800383e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003842:	492a      	ldr	r1, [pc, #168]	; (80038ec <HAL_UART_RxCpltCallback+0x3e4>)
 8003844:	4618      	mov	r0, r3
 8003846:	f006 f85d 	bl	8009904 <siscanf>
 800384a:	4603      	mov	r3, r0
 800384c:	2b01      	cmp	r3, #1
 800384e:	d144      	bne.n	80038da <HAL_UART_RxCpltCallback+0x3d2>
					if (temp >= 1 && temp <= 9){
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	2b00      	cmp	r3, #0
 8003854:	dd1c      	ble.n	8003890 <HAL_UART_RxCpltCallback+0x388>
 8003856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003858:	2b09      	cmp	r3, #9
 800385a:	dc19      	bgt.n	8003890 <HAL_UART_RxCpltCallback+0x388>
						player1.health = temp;
 800385c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385e:	4a24      	ldr	r2, [pc, #144]	; (80038f0 <HAL_UART_RxCpltCallback+0x3e8>)
 8003860:	6153      	str	r3, [r2, #20]
						player2.health = temp;
 8003862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003864:	4a23      	ldr	r2, [pc, #140]	; (80038f4 <HAL_UART_RxCpltCallback+0x3ec>)
 8003866:	6153      	str	r3, [r2, #20]
						char data[100];
						int n = sprintf(data, "Health number is: %d\n", temp);
 8003868:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800386a:	f107 0308 	add.w	r3, r7, #8
 800386e:	4922      	ldr	r1, [pc, #136]	; (80038f8 <HAL_UART_RxCpltCallback+0x3f0>)
 8003870:	4618      	mov	r0, r3
 8003872:	f006 f827 	bl	80098c4 <siprintf>
 8003876:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
						HAL_UART_Transmit(&huart3, data, n, 1000);
 800387a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800387e:	b29a      	uxth	r2, r3
 8003880:	f107 0108 	add.w	r1, r7, #8
 8003884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003888:	481c      	ldr	r0, [pc, #112]	; (80038fc <HAL_UART_RxCpltCallback+0x3f4>)
 800388a:	f004 fd0b 	bl	80082a4 <HAL_UART_Transmit>
					if (temp >= 1 && temp <= 9){
 800388e:	e024      	b.n	80038da <HAL_UART_RxCpltCallback+0x3d2>
					}else{
						char data[100];
						int n = sprintf(data, "Error health number\n");
 8003890:	f107 0308 	add.w	r3, r7, #8
 8003894:	491a      	ldr	r1, [pc, #104]	; (8003900 <HAL_UART_RxCpltCallback+0x3f8>)
 8003896:	4618      	mov	r0, r3
 8003898:	f006 f814 	bl	80098c4 <siprintf>
 800389c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
						HAL_UART_Transmit(&huart3, data, n, 1000);
 80038a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	f107 0108 	add.w	r1, r7, #8
 80038aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ae:	4813      	ldr	r0, [pc, #76]	; (80038fc <HAL_UART_RxCpltCallback+0x3f4>)
 80038b0:	f004 fcf8 	bl	80082a4 <HAL_UART_Transmit>
 80038b4:	e011      	b.n	80038da <HAL_UART_RxCpltCallback+0x3d2>
					}
				}
			}else{
				int n = sprintf(data, "[ERR] Not valid\n");
 80038b6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80038ba:	4912      	ldr	r1, [pc, #72]	; (8003904 <HAL_UART_RxCpltCallback+0x3fc>)
 80038bc:	4618      	mov	r0, r3
 80038be:	f006 f801 	bl	80098c4 <siprintf>
 80038c2:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
				HAL_UART_Transmit(&huart3, data, n, 1000);
 80038c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80038d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038d4:	4809      	ldr	r0, [pc, #36]	; (80038fc <HAL_UART_RxCpltCallback+0x3f4>)
 80038d6:	f004 fce5 	bl	80082a4 <HAL_UART_Transmit>
//				HAL_UART_Transmit(&huart3, data, n, 1000);
//			}
//			}
		}
    	}
		uart_rx_enable_it();
 80038da:	f7ff fe07 	bl	80034ec <uart_rx_enable_it>
}
 80038de:	bf00      	nop
 80038e0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	2000083c 	.word	0x2000083c
 80038ec:	0800b704 	.word	0x0800b704
 80038f0:	20000048 	.word	0x20000048
 80038f4:	20000068 	.word	0x20000068
 80038f8:	0800b754 	.word	0x0800b754
 80038fc:	20000378 	.word	0x20000378
 8003900:	0800b76c 	.word	0x0800b76c
 8003904:	0800b784 	.word	0x0800b784

08003908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390e:	4b0f      	ldr	r3, [pc, #60]	; (800394c <HAL_MspInit+0x44>)
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	4a0e      	ldr	r2, [pc, #56]	; (800394c <HAL_MspInit+0x44>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	6193      	str	r3, [r2, #24]
 800391a:	4b0c      	ldr	r3, [pc, #48]	; (800394c <HAL_MspInit+0x44>)
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	607b      	str	r3, [r7, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_MspInit+0x44>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <HAL_MspInit+0x44>)
 800392c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003930:	61d3      	str	r3, [r2, #28]
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_MspInit+0x44>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800393e:	2007      	movs	r0, #7
 8003940:	f000 fdee 	bl	8004520 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40021000 	.word	0x40021000

08003950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a17      	ldr	r2, [pc, #92]	; (80039cc <HAL_I2C_MspInit+0x7c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d127      	bne.n	80039c2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003972:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <HAL_I2C_MspInit+0x80>)
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	4a16      	ldr	r2, [pc, #88]	; (80039d0 <HAL_I2C_MspInit+0x80>)
 8003978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800397c:	6153      	str	r3, [r2, #20]
 800397e:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <HAL_I2C_MspInit+0x80>)
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800398a:	23c0      	movs	r3, #192	; 0xc0
 800398c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800398e:	2312      	movs	r3, #18
 8003990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003992:	2301      	movs	r3, #1
 8003994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003996:	2303      	movs	r3, #3
 8003998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800399a:	2304      	movs	r3, #4
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399e:	f107 0314 	add.w	r3, r7, #20
 80039a2:	4619      	mov	r1, r3
 80039a4:	480b      	ldr	r0, [pc, #44]	; (80039d4 <HAL_I2C_MspInit+0x84>)
 80039a6:	f000 fe73 	bl	8004690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_I2C_MspInit+0x80>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <HAL_I2C_MspInit+0x80>)
 80039b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039b4:	61d3      	str	r3, [r2, #28]
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <HAL_I2C_MspInit+0x80>)
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80039c2:	bf00      	nop
 80039c4:	3728      	adds	r7, #40	; 0x28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40005400 	.word	0x40005400
 80039d0:	40021000 	.word	0x40021000
 80039d4:	48000400 	.word	0x48000400

080039d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0d      	ldr	r2, [pc, #52]	; (8003a1c <HAL_RTC_MspInit+0x44>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d111      	bne.n	8003a0e <HAL_RTC_MspInit+0x36>
 80039ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ee:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039f8:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <HAL_RTC_MspInit+0x48>)
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40002800 	.word	0x40002800
 8003a20:	10908100 	.word	0x10908100

08003a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	; 0x28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <HAL_SPI_MspInit+0x7c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d128      	bne.n	8003a98 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a46:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <HAL_SPI_MspInit+0x80>)
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <HAL_SPI_MspInit+0x80>)
 8003a4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a50:	6193      	str	r3, [r2, #24]
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <HAL_SPI_MspInit+0x80>)
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5e:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <HAL_SPI_MspInit+0x80>)
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	4a10      	ldr	r2, [pc, #64]	; (8003aa4 <HAL_SPI_MspInit+0x80>)
 8003a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a68:	6153      	str	r3, [r2, #20]
 8003a6a:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <HAL_SPI_MspInit+0x80>)
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8003a76:	23e0      	movs	r3, #224	; 0xe0
 8003a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a86:	2305      	movs	r3, #5
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8a:	f107 0314 	add.w	r3, r7, #20
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a94:	f000 fdfc 	bl	8004690 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003a98:	bf00      	nop
 8003a9a:	3728      	adds	r7, #40	; 0x28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40013000 	.word	0x40013000
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d114      	bne.n	8003ae4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003aba:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <HAL_TIM_Base_MspInit+0x9c>)
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	4a21      	ldr	r2, [pc, #132]	; (8003b44 <HAL_TIM_Base_MspInit+0x9c>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	61d3      	str	r3, [r2, #28]
 8003ac6:	4b1f      	ldr	r3, [pc, #124]	; (8003b44 <HAL_TIM_Base_MspInit+0x9c>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	201c      	movs	r0, #28
 8003ad8:	f000 fd2d 	bl	8004536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003adc:	201c      	movs	r0, #28
 8003ade:	f000 fd46 	bl	800456e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ae2:	e02a      	b.n	8003b3a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <HAL_TIM_Base_MspInit+0xa0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10c      	bne.n	8003b08 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <HAL_TIM_Base_MspInit+0x9c>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	4a14      	ldr	r2, [pc, #80]	; (8003b44 <HAL_TIM_Base_MspInit+0x9c>)
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	61d3      	str	r3, [r2, #28]
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_TIM_Base_MspInit+0x9c>)
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	693b      	ldr	r3, [r7, #16]
}
 8003b06:	e018      	b.n	8003b3a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0f      	ldr	r2, [pc, #60]	; (8003b4c <HAL_TIM_Base_MspInit+0xa4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d113      	bne.n	8003b3a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b12:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <HAL_TIM_Base_MspInit+0x9c>)
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	4a0b      	ldr	r2, [pc, #44]	; (8003b44 <HAL_TIM_Base_MspInit+0x9c>)
 8003b18:	f043 0304 	orr.w	r3, r3, #4
 8003b1c:	61d3      	str	r3, [r2, #28]
 8003b1e:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <HAL_TIM_Base_MspInit+0x9c>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 4);
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	201e      	movs	r0, #30
 8003b30:	f000 fd01 	bl	8004536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b34:	201e      	movs	r0, #30
 8003b36:	f000 fd1a 	bl	800456e <HAL_NVIC_EnableIRQ>
}
 8003b3a:	bf00      	nop
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800

08003b50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	60da      	str	r2, [r3, #12]
 8003b66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <HAL_TIM_MspPostInit+0x64>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d11b      	bne.n	8003baa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b72:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <HAL_TIM_MspPostInit+0x68>)
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	4a10      	ldr	r2, [pc, #64]	; (8003bb8 <HAL_TIM_MspPostInit+0x68>)
 8003b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b7c:	6153      	str	r3, [r2, #20]
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <HAL_TIM_MspPostInit+0x68>)
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE2     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b8a:	2304      	movs	r3, #4
 8003b8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b9e:	f107 030c 	add.w	r3, r7, #12
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4805      	ldr	r0, [pc, #20]	; (8003bbc <HAL_TIM_MspPostInit+0x6c>)
 8003ba6:	f000 fd73 	bl	8004690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003baa:	bf00      	nop
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	48001000 	.word	0x48001000

08003bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc8:	f107 0314 	add.w	r3, r7, #20
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1b      	ldr	r2, [pc, #108]	; (8003c4c <HAL_UART_MspInit+0x8c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d130      	bne.n	8003c44 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003be2:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_UART_MspInit+0x90>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4a1a      	ldr	r2, [pc, #104]	; (8003c50 <HAL_UART_MspInit+0x90>)
 8003be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bec:	61d3      	str	r3, [r2, #28]
 8003bee:	4b18      	ldr	r3, [pc, #96]	; (8003c50 <HAL_UART_MspInit+0x90>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <HAL_UART_MspInit+0x90>)
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	4a14      	ldr	r2, [pc, #80]	; (8003c50 <HAL_UART_MspInit+0x90>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c04:	6153      	str	r3, [r2, #20]
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <HAL_UART_MspInit+0x90>)
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c20:	2303      	movs	r3, #3
 8003c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c24:	2307      	movs	r3, #7
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4809      	ldr	r0, [pc, #36]	; (8003c54 <HAL_UART_MspInit+0x94>)
 8003c30:	f000 fd2e 	bl	8004690 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c34:	2200      	movs	r2, #0
 8003c36:	2100      	movs	r1, #0
 8003c38:	2027      	movs	r0, #39	; 0x27
 8003c3a:	f000 fc7c 	bl	8004536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c3e:	2027      	movs	r0, #39	; 0x27
 8003c40:	f000 fc95 	bl	800456e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c44:	bf00      	nop
 8003c46:	3728      	adds	r7, #40	; 0x28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40004800 	.word	0x40004800
 8003c50:	40021000 	.word	0x40021000
 8003c54:	48000400 	.word	0x48000400

08003c58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	; 0x28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c60:	f107 0314 	add.w	r3, r7, #20
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a18      	ldr	r2, [pc, #96]	; (8003cd8 <HAL_PCD_MspInit+0x80>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d129      	bne.n	8003cce <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c7a:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <HAL_PCD_MspInit+0x84>)
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	4a17      	ldr	r2, [pc, #92]	; (8003cdc <HAL_PCD_MspInit+0x84>)
 8003c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c84:	6153      	str	r3, [r2, #20]
 8003c86:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <HAL_PCD_MspInit+0x84>)
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8003c92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8003ca4:	230e      	movs	r3, #14
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	4619      	mov	r1, r3
 8003cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cb2:	f000 fced 	bl	8004690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <HAL_PCD_MspInit+0x84>)
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	4a08      	ldr	r2, [pc, #32]	; (8003cdc <HAL_PCD_MspInit+0x84>)
 8003cbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cc0:	61d3      	str	r3, [r2, #28]
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_PCD_MspInit+0x84>)
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003cce:	bf00      	nop
 8003cd0:	3728      	adds	r7, #40	; 0x28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40005c00 	.word	0x40005c00
 8003cdc:	40021000 	.word	0x40021000

08003ce0 <PWM_Start>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start()
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <PWM_Start+0x18>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <PWM_Start+0x1c>)
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f003 f9a0 	bl	8007034 <HAL_TIM_PWM_Start>
}
 8003cf4:	bf00      	nop
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000104 	.word	0x20000104
 8003cfc:	20000880 	.word	0x20000880

08003d00 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	460a      	mov	r2, r1
 8003d0a:	80fb      	strh	r3, [r7, #6]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	80bb      	strh	r3, [r7, #4]
    if (pwm_freq == 0 || pwm_freq > 20000)
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <PWM_Change_Tone+0x20>
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d937      	bls.n	8003d90 <PWM_Change_Tone+0x90>
    {
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8003d20:	4b52      	ldr	r3, [pc, #328]	; (8003e6c <PWM_Change_Tone+0x16c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <PWM_Change_Tone+0x34>
 8003d28:	4b51      	ldr	r3, [pc, #324]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	635a      	str	r2, [r3, #52]	; 0x34
 8003d32:	e097      	b.n	8003e64 <PWM_Change_Tone+0x164>
 8003d34:	4b4d      	ldr	r3, [pc, #308]	; (8003e6c <PWM_Change_Tone+0x16c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d105      	bne.n	8003d48 <PWM_Change_Tone+0x48>
 8003d3c:	4b4c      	ldr	r3, [pc, #304]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	6393      	str	r3, [r2, #56]	; 0x38
 8003d46:	e08d      	b.n	8003e64 <PWM_Change_Tone+0x164>
 8003d48:	4b48      	ldr	r3, [pc, #288]	; (8003e6c <PWM_Change_Tone+0x16c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d105      	bne.n	8003d5c <PWM_Change_Tone+0x5c>
 8003d50:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	2300      	movs	r3, #0
 8003d58:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003d5a:	e083      	b.n	8003e64 <PWM_Change_Tone+0x164>
 8003d5c:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <PWM_Change_Tone+0x16c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	d105      	bne.n	8003d70 <PWM_Change_Tone+0x70>
 8003d64:	4b42      	ldr	r3, [pc, #264]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6e:	e079      	b.n	8003e64 <PWM_Change_Tone+0x164>
 8003d70:	4b3e      	ldr	r3, [pc, #248]	; (8003e6c <PWM_Change_Tone+0x16c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d105      	bne.n	8003d84 <PWM_Change_Tone+0x84>
 8003d78:	4b3d      	ldr	r3, [pc, #244]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	6593      	str	r3, [r2, #88]	; 0x58
 8003d82:	e06f      	b.n	8003e64 <PWM_Change_Tone+0x164>
 8003d84:	4b3a      	ldr	r3, [pc, #232]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003d8e:	e069      	b.n	8003e64 <PWM_Change_Tone+0x164>
    }
    else
    {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8003d90:	f002 fa0c 	bl	80061ac <HAL_RCC_GetSysClockFreq>
 8003d94:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9e:	4a35      	ldr	r2, [pc, #212]	; (8003e74 <PWM_Change_Tone+0x174>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	0b9b      	lsrs	r3, r3, #14
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 8003dac:	8b7b      	ldrh	r3, [r7, #26]
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8003dc0:	88bb      	ldrh	r3, [r7, #4]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	4a2b      	ldr	r2, [pc, #172]	; (8003e78 <PWM_Change_Tone+0x178>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	09db      	lsrs	r3, r3, #7
 8003dd0:	60fb      	str	r3, [r7, #12]

        pwm_timer->Instance->PSC = prescaler - 1;
 8003dd2:	8b7b      	ldrh	r3, [r7, #26]
 8003dd4:	1e5a      	subs	r2, r3, #1
 8003dd6:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timer->Instance->ARR = period_cycles - 1;
 8003dde:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	3a01      	subs	r2, #1
 8003de8:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timer->Instance->EGR = TIM_EGR_UG;
 8003dea:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2201      	movs	r2, #1
 8003df2:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003df4:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <PWM_Change_Tone+0x16c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <PWM_Change_Tone+0x108>
 8003dfc:	4b1c      	ldr	r3, [pc, #112]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8003e06:	e02d      	b.n	8003e64 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003e08:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <PWM_Change_Tone+0x16c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d105      	bne.n	8003e1c <PWM_Change_Tone+0x11c>
 8003e10:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003e1a:	e023      	b.n	8003e64 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003e1c:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <PWM_Change_Tone+0x16c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d105      	bne.n	8003e30 <PWM_Change_Tone+0x130>
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003e2e:	e019      	b.n	8003e64 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003e30:	4b0e      	ldr	r3, [pc, #56]	; (8003e6c <PWM_Change_Tone+0x16c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	d105      	bne.n	8003e44 <PWM_Change_Tone+0x144>
 8003e38:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003e42:	e00f      	b.n	8003e64 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003e44:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <PWM_Change_Tone+0x16c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b10      	cmp	r3, #16
 8003e4a:	d105      	bne.n	8003e58 <PWM_Change_Tone+0x158>
 8003e4c:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003e56:	e005      	b.n	8003e64 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <PWM_Change_Tone+0x170>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003e62:	e7ff      	b.n	8003e64 <PWM_Change_Tone+0x164>
 8003e64:	bf00      	nop
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000880 	.word	0x20000880
 8003e70:	20000104 	.word	0x20000104
 8003e74:	45e7b273 	.word	0x45e7b273
 8003e78:	10624dd3 	.word	0x10624dd3

08003e7c <Change_Melody>:
//void Change_Melody(const Tone *melody, uint16_t tone_count)

void Change_Melody(const Tone *melody, uint16_t tone_count)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	807b      	strh	r3, [r7, #2]

    melody_ptr = melody;
 8003e88:	4a07      	ldr	r2, [pc, #28]	; (8003ea8 <Change_Melody+0x2c>)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6013      	str	r3, [r2, #0]
    melody_tone_count = tone_count;
 8003e8e:	4a07      	ldr	r2, [pc, #28]	; (8003eac <Change_Melody+0x30>)
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	8013      	strh	r3, [r2, #0]
    current_tone_number = 0;
 8003e94:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <Change_Melody+0x34>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	801a      	strh	r2, [r3, #0]
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000884 	.word	0x20000884
 8003eac:	20000888 	.word	0x20000888
 8003eb0:	2000088a 	.word	0x2000088a

08003eb4 <Update_Melody>:
extern pageflag;


void Update_Melody()
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
    if ((HAL_GetTick() > current_tone_end) && (current_tone_number < melody_tone_count) && pageflag == 0)
 8003eba:	f000 fa31 	bl	8004320 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <Update_Melody+0xa0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d937      	bls.n	8003f38 <Update_Melody+0x84>
 8003ec8:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <Update_Melody+0xa4>)
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <Update_Melody+0xa8>)
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d22f      	bcs.n	8003f38 <Update_Melody+0x84>
 8003ed8:	4b21      	ldr	r3, [pc, #132]	; (8003f60 <Update_Melody+0xac>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d12b      	bne.n	8003f38 <Update_Melody+0x84>
    {
        const Tone active_tone = *(melody_ptr + current_tone_number);
 8003ee0:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <Update_Melody+0xb0>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b1c      	ldr	r3, [pc, #112]	; (8003f58 <Update_Melody+0xa4>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	441a      	add	r2, r3
 8003eee:	1d3b      	adds	r3, r7, #4
 8003ef0:	6810      	ldr	r0, [r2, #0]
 8003ef2:	6018      	str	r0, [r3, #0]
        PWM_Change_Tone(active_tone.frequency, volume);
 8003ef4:	88bb      	ldrh	r3, [r7, #4]
 8003ef6:	4a1c      	ldr	r2, [pc, #112]	; (8003f68 <Update_Melody+0xb4>)
 8003ef8:	8812      	ldrh	r2, [r2, #0]
 8003efa:	b292      	uxth	r2, r2
 8003efc:	4611      	mov	r1, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fefe 	bl	8003d00 <PWM_Change_Tone>
        current_tone_end = HAL_GetTick() + active_tone.duration;
 8003f04:	f000 fa0c 	bl	8004320 <HAL_GetTick>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	88fa      	ldrh	r2, [r7, #6]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	4a11      	ldr	r2, [pc, #68]	; (8003f54 <Update_Melody+0xa0>)
 8003f10:	6013      	str	r3, [r2, #0]
        current_tone_number++;
 8003f12:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <Update_Melody+0xa4>)
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3301      	adds	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <Update_Melody+0xa4>)
 8003f1e:	801a      	strh	r2, [r3, #0]
        if(current_tone_number == melody_tone_count){
 8003f20:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <Update_Melody+0xa4>)
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <Update_Melody+0xa8>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d10c      	bne.n	8003f4a <Update_Melody+0x96>
        	current_tone_number = 0;
 8003f30:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <Update_Melody+0xa4>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	801a      	strh	r2, [r3, #0]
    {
 8003f36:	e008      	b.n	8003f4a <Update_Melody+0x96>
        }
    }
    else if(pageflag != 0){
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <Update_Melody+0xac>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <Update_Melody+0x98>
        PWM_Change_Tone(1, 0);
 8003f40:	2100      	movs	r1, #0
 8003f42:	2001      	movs	r0, #1
 8003f44:	f7ff fedc 	bl	8003d00 <PWM_Change_Tone>

    }
}
 8003f48:	e000      	b.n	8003f4c <Update_Melody+0x98>
    {
 8003f4a:	bf00      	nop
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	2000088c 	.word	0x2000088c
 8003f58:	2000088a 	.word	0x2000088a
 8003f5c:	20000888 	.word	0x20000888
 8003f60:	200006ec 	.word	0x200006ec
 8003f64:	20000884 	.word	0x20000884
 8003f68:	20000108 	.word	0x20000108

08003f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f70:	e7fe      	b.n	8003f70 <NMI_Handler+0x4>

08003f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f72:	b480      	push	{r7}
 8003f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f76:	e7fe      	b.n	8003f76 <HardFault_Handler+0x4>

08003f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f7c:	e7fe      	b.n	8003f7c <MemManage_Handler+0x4>

08003f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f82:	e7fe      	b.n	8003f82 <BusFault_Handler+0x4>

08003f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f88:	e7fe      	b.n	8003f88 <UsageFault_Handler+0x4>

08003f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003faa:	bf00      	nop
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fb8:	f000 f99e 	bl	80042f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
 Update_Melody();
 8003fbc:	f7ff ff7a 	bl	8003eb4 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003fc8:	2001      	movs	r0, #1
 8003fca:	f000 fd25 	bl	8004a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if (HAL_GetTick() > last_button_press + 200)
 8003fce:	f000 f9a7 	bl	8004320 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <EXTI0_IRQHandler+0x34>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	33c8      	adds	r3, #200	; 0xc8
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d909      	bls.n	8003ff2 <EXTI0_IRQHandler+0x2e>
  {
      last_button_press = HAL_GetTick();
 8003fde:	f000 f99f 	bl	8004320 <HAL_GetTick>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <EXTI0_IRQHandler+0x34>)
 8003fe6:	6013      	str	r3, [r2, #0]

      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8003fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fec:	4803      	ldr	r0, [pc, #12]	; (8003ffc <EXTI0_IRQHandler+0x38>)
 8003fee:	f000 fcf9 	bl	80049e4 <HAL_GPIO_TogglePin>
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000890 	.word	0x20000890
 8003ffc:	48001000 	.word	0x48001000

08004000 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004004:	2002      	movs	r0, #2
 8004006:	f000 fd07 	bl	8004a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}

0800400e <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004012:	2004      	movs	r0, #4
 8004014:	f000 fd00 	bl	8004a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8004018:	bf00      	nop
 800401a:	bd80      	pop	{r7, pc}

0800401c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004020:	2008      	movs	r0, #8
 8004022:	f000 fcf9 	bl	8004a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004030:	4802      	ldr	r0, [pc, #8]	; (800403c <TIM2_IRQHandler+0x10>)
 8004032:	f003 f8ff 	bl	8007234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000294 	.word	0x20000294

08004040 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004044:	4802      	ldr	r0, [pc, #8]	; (8004050 <TIM4_IRQHandler+0x10>)
 8004046:	f003 f8f5 	bl	8007234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	2000032c 	.word	0x2000032c

08004054 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004058:	4802      	ldr	r0, [pc, #8]	; (8004064 <USART3_IRQHandler+0x10>)
 800405a:	f004 f9f1 	bl	8008440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000378 	.word	0x20000378

08004068 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return 1;
 800406c:	2301      	movs	r3, #1
}
 800406e:	4618      	mov	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <_kill>:

int _kill(int pid, int sig)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004082:	f005 fbaf 	bl	80097e4 <__errno>
 8004086:	4603      	mov	r3, r0
 8004088:	2216      	movs	r2, #22
 800408a:	601a      	str	r2, [r3, #0]
  return -1;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <_exit>:

void _exit (int status)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040a0:	f04f 31ff 	mov.w	r1, #4294967295
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ffe7 	bl	8004078 <_kill>
  while (1) {}    /* Make sure we hang here */
 80040aa:	e7fe      	b.n	80040aa <_exit+0x12>

080040ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	e00a      	b.n	80040d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040be:	f3af 8000 	nop.w
 80040c2:	4601      	mov	r1, r0
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	60ba      	str	r2, [r7, #8]
 80040ca:	b2ca      	uxtb	r2, r1
 80040cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	3301      	adds	r3, #1
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	dbf0      	blt.n	80040be <_read+0x12>
  }

  return len;
 80040dc:	687b      	ldr	r3, [r7, #4]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b086      	sub	sp, #24
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e009      	b.n	800410c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	60ba      	str	r2, [r7, #8]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	3301      	adds	r3, #1
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	429a      	cmp	r2, r3
 8004112:	dbf1      	blt.n	80040f8 <_write+0x12>
  }
  return len;
 8004114:	687b      	ldr	r3, [r7, #4]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <_close>:

int _close(int file)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004146:	605a      	str	r2, [r3, #4]
  return 0;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <_isatty>:

int _isatty(int file)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800415e:	2301      	movs	r3, #1
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004190:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <_sbrk+0x5c>)
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <_sbrk+0x60>)
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800419c:	4b13      	ldr	r3, [pc, #76]	; (80041ec <_sbrk+0x64>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <_sbrk+0x64>)
 80041a6:	4a12      	ldr	r2, [pc, #72]	; (80041f0 <_sbrk+0x68>)
 80041a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041aa:	4b10      	ldr	r3, [pc, #64]	; (80041ec <_sbrk+0x64>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d207      	bcs.n	80041c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041b8:	f005 fb14 	bl	80097e4 <__errno>
 80041bc:	4603      	mov	r3, r0
 80041be:	220c      	movs	r2, #12
 80041c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
 80041c6:	e009      	b.n	80041dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041c8:	4b08      	ldr	r3, [pc, #32]	; (80041ec <_sbrk+0x64>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041ce:	4b07      	ldr	r3, [pc, #28]	; (80041ec <_sbrk+0x64>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	4a05      	ldr	r2, [pc, #20]	; (80041ec <_sbrk+0x64>)
 80041d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	2000a000 	.word	0x2000a000
 80041e8:	00000400 	.word	0x00000400
 80041ec:	20000894 	.word	0x20000894
 80041f0:	200008b0 	.word	0x200008b0

080041f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <SystemInit+0x20>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	4a05      	ldr	r2, [pc, #20]	; (8004214 <SystemInit+0x20>)
 8004200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
    ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004250 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800421c:	f7ff ffea 	bl	80041f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004220:	480c      	ldr	r0, [pc, #48]	; (8004254 <LoopForever+0x6>)
  ldr r1, =_edata
 8004222:	490d      	ldr	r1, [pc, #52]	; (8004258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004224:	4a0d      	ldr	r2, [pc, #52]	; (800425c <LoopForever+0xe>)
  movs r3, #0
 8004226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004228:	e002      	b.n	8004230 <LoopCopyDataInit>

0800422a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800422a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800422c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800422e:	3304      	adds	r3, #4

08004230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004234:	d3f9      	bcc.n	800422a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004236:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004238:	4c0a      	ldr	r4, [pc, #40]	; (8004264 <LoopForever+0x16>)
  movs r3, #0
 800423a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800423c:	e001      	b.n	8004242 <LoopFillZerobss>

0800423e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800423e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004240:	3204      	adds	r2, #4

08004242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004244:	d3fb      	bcc.n	800423e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004246:	f005 fad3 	bl	80097f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800424a:	f7fc fbf5 	bl	8000a38 <main>

0800424e <LoopForever>:

LoopForever:
    b LoopForever
 800424e:	e7fe      	b.n	800424e <LoopForever>
    ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004250:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004258:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800425c:	0800bbb4 	.word	0x0800bbb4
  ldr r2, =_sbss
 8004260:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8004264:	200008ac 	.word	0x200008ac

08004268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004268:	e7fe      	b.n	8004268 <ADC1_2_IRQHandler>
	...

0800426c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004270:	4b08      	ldr	r3, [pc, #32]	; (8004294 <HAL_Init+0x28>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <HAL_Init+0x28>)
 8004276:	f043 0310 	orr.w	r3, r3, #16
 800427a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800427c:	2003      	movs	r0, #3
 800427e:	f000 f94f 	bl	8004520 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004282:	2000      	movs	r0, #0
 8004284:	f000 f808 	bl	8004298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004288:	f7ff fb3e 	bl	8003908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40022000 	.word	0x40022000

08004298 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042a0:	4b12      	ldr	r3, [pc, #72]	; (80042ec <HAL_InitTick+0x54>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_InitTick+0x58>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	4619      	mov	r1, r3
 80042aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80042b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 f967 	bl	800458a <HAL_SYSTICK_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e00e      	b.n	80042e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b0f      	cmp	r3, #15
 80042ca:	d80a      	bhi.n	80042e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042cc:	2200      	movs	r2, #0
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	f000 f92f 	bl	8004536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042d8:	4a06      	ldr	r2, [pc, #24]	; (80042f4 <HAL_InitTick+0x5c>)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e000      	b.n	80042e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	2000010c 	.word	0x2000010c
 80042f0:	20000114 	.word	0x20000114
 80042f4:	20000110 	.word	0x20000110

080042f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_IncTick+0x20>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_IncTick+0x24>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4413      	add	r3, r2
 8004308:	4a04      	ldr	r2, [pc, #16]	; (800431c <HAL_IncTick+0x24>)
 800430a:	6013      	str	r3, [r2, #0]
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000114 	.word	0x20000114
 800431c:	20000898 	.word	0x20000898

08004320 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  return uwTick;  
 8004324:	4b03      	ldr	r3, [pc, #12]	; (8004334 <HAL_GetTick+0x14>)
 8004326:	681b      	ldr	r3, [r3, #0]
}
 8004328:	4618      	mov	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000898 	.word	0x20000898

08004338 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004340:	f7ff ffee 	bl	8004320 <HAL_GetTick>
 8004344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d005      	beq.n	800435e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004352:	4b0a      	ldr	r3, [pc, #40]	; (800437c <HAL_Delay+0x44>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800435e:	bf00      	nop
 8004360:	f7ff ffde 	bl	8004320 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	429a      	cmp	r2, r3
 800436e:	d8f7      	bhi.n	8004360 <HAL_Delay+0x28>
  {
  }
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000114 	.word	0x20000114

08004380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800439c:	4013      	ands	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043b2:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <__NVIC_SetPriorityGrouping+0x44>)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	60d3      	str	r3, [r2, #12]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043cc:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <__NVIC_GetPriorityGrouping+0x18>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	0a1b      	lsrs	r3, r3, #8
 80043d2:	f003 0307 	and.w	r3, r3, #7
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	e000ed00 	.word	0xe000ed00

080043e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	db0b      	blt.n	800440e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	f003 021f 	and.w	r2, r3, #31
 80043fc:	4907      	ldr	r1, [pc, #28]	; (800441c <__NVIC_EnableIRQ+0x38>)
 80043fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2001      	movs	r0, #1
 8004406:	fa00 f202 	lsl.w	r2, r0, r2
 800440a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	e000e100 	.word	0xe000e100

08004420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	6039      	str	r1, [r7, #0]
 800442a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800442c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004430:	2b00      	cmp	r3, #0
 8004432:	db0a      	blt.n	800444a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	b2da      	uxtb	r2, r3
 8004438:	490c      	ldr	r1, [pc, #48]	; (800446c <__NVIC_SetPriority+0x4c>)
 800443a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443e:	0112      	lsls	r2, r2, #4
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	440b      	add	r3, r1
 8004444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004448:	e00a      	b.n	8004460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	4908      	ldr	r1, [pc, #32]	; (8004470 <__NVIC_SetPriority+0x50>)
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	3b04      	subs	r3, #4
 8004458:	0112      	lsls	r2, r2, #4
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	440b      	add	r3, r1
 800445e:	761a      	strb	r2, [r3, #24]
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	e000e100 	.word	0xe000e100
 8004470:	e000ed00 	.word	0xe000ed00

08004474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004474:	b480      	push	{r7}
 8004476:	b089      	sub	sp, #36	; 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f1c3 0307 	rsb	r3, r3, #7
 800448e:	2b04      	cmp	r3, #4
 8004490:	bf28      	it	cs
 8004492:	2304      	movcs	r3, #4
 8004494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3304      	adds	r3, #4
 800449a:	2b06      	cmp	r3, #6
 800449c:	d902      	bls.n	80044a4 <NVIC_EncodePriority+0x30>
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	3b03      	subs	r3, #3
 80044a2:	e000      	b.n	80044a6 <NVIC_EncodePriority+0x32>
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43da      	mvns	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	401a      	ands	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044bc:	f04f 31ff 	mov.w	r1, #4294967295
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	fa01 f303 	lsl.w	r3, r1, r3
 80044c6:	43d9      	mvns	r1, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044cc:	4313      	orrs	r3, r2
         );
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3724      	adds	r7, #36	; 0x24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044ec:	d301      	bcc.n	80044f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ee:	2301      	movs	r3, #1
 80044f0:	e00f      	b.n	8004512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044f2:	4a0a      	ldr	r2, [pc, #40]	; (800451c <SysTick_Config+0x40>)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044fa:	210f      	movs	r1, #15
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004500:	f7ff ff8e 	bl	8004420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <SysTick_Config+0x40>)
 8004506:	2200      	movs	r2, #0
 8004508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800450a:	4b04      	ldr	r3, [pc, #16]	; (800451c <SysTick_Config+0x40>)
 800450c:	2207      	movs	r2, #7
 800450e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	e000e010 	.word	0xe000e010

08004520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ff29 	bl	8004380 <__NVIC_SetPriorityGrouping>
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af00      	add	r7, sp, #0
 800453c:	4603      	mov	r3, r0
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004548:	f7ff ff3e 	bl	80043c8 <__NVIC_GetPriorityGrouping>
 800454c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	68b9      	ldr	r1, [r7, #8]
 8004552:	6978      	ldr	r0, [r7, #20]
 8004554:	f7ff ff8e 	bl	8004474 <NVIC_EncodePriority>
 8004558:	4602      	mov	r2, r0
 800455a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff ff5d 	bl	8004420 <__NVIC_SetPriority>
}
 8004566:	bf00      	nop
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	4603      	mov	r3, r0
 8004576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff ff31 	bl	80043e4 <__NVIC_EnableIRQ>
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff ffa2 	bl	80044dc <SysTick_Config>
 8004598:	4603      	mov	r3, r0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d008      	beq.n	80045c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2204      	movs	r2, #4
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e020      	b.n	8004608 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 020e 	bic.w	r2, r2, #14
 80045d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	2101      	movs	r1, #1
 80045f0:	fa01 f202 	lsl.w	r2, r1, r2
 80045f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004626:	2b02      	cmp	r3, #2
 8004628:	d005      	beq.n	8004636 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2204      	movs	r2, #4
 800462e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
 8004634:	e027      	b.n	8004686 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 020e 	bic.w	r2, r2, #14
 8004644:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465e:	2101      	movs	r1, #1
 8004660:	fa01 f202 	lsl.w	r2, r1, r2
 8004664:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
    } 
  }
  return status;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800469e:	e154      	b.n	800494a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	2101      	movs	r1, #1
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	4013      	ands	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 8146 	beq.w	8004944 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d005      	beq.n	80046d0 <HAL_GPIO_Init+0x40>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d130      	bne.n	8004732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	2203      	movs	r2, #3
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4013      	ands	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004706:	2201      	movs	r2, #1
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4013      	ands	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 0201 	and.w	r2, r3, #1
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b03      	cmp	r3, #3
 800473c:	d017      	beq.n	800476e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	2203      	movs	r2, #3
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d123      	bne.n	80047c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	08da      	lsrs	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3208      	adds	r2, #8
 8004782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004786:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	220f      	movs	r2, #15
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4013      	ands	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	08da      	lsrs	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3208      	adds	r2, #8
 80047bc:	6939      	ldr	r1, [r7, #16]
 80047be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	2203      	movs	r2, #3
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 0203 	and.w	r2, r3, #3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80a0 	beq.w	8004944 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004804:	4b58      	ldr	r3, [pc, #352]	; (8004968 <HAL_GPIO_Init+0x2d8>)
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	4a57      	ldr	r2, [pc, #348]	; (8004968 <HAL_GPIO_Init+0x2d8>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6193      	str	r3, [r2, #24]
 8004810:	4b55      	ldr	r3, [pc, #340]	; (8004968 <HAL_GPIO_Init+0x2d8>)
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800481c:	4a53      	ldr	r2, [pc, #332]	; (800496c <HAL_GPIO_Init+0x2dc>)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	089b      	lsrs	r3, r3, #2
 8004822:	3302      	adds	r3, #2
 8004824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004828:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	220f      	movs	r2, #15
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004846:	d019      	beq.n	800487c <HAL_GPIO_Init+0x1ec>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a49      	ldr	r2, [pc, #292]	; (8004970 <HAL_GPIO_Init+0x2e0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <HAL_GPIO_Init+0x1e8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a48      	ldr	r2, [pc, #288]	; (8004974 <HAL_GPIO_Init+0x2e4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00d      	beq.n	8004874 <HAL_GPIO_Init+0x1e4>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a47      	ldr	r2, [pc, #284]	; (8004978 <HAL_GPIO_Init+0x2e8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d007      	beq.n	8004870 <HAL_GPIO_Init+0x1e0>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a46      	ldr	r2, [pc, #280]	; (800497c <HAL_GPIO_Init+0x2ec>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d101      	bne.n	800486c <HAL_GPIO_Init+0x1dc>
 8004868:	2304      	movs	r3, #4
 800486a:	e008      	b.n	800487e <HAL_GPIO_Init+0x1ee>
 800486c:	2305      	movs	r3, #5
 800486e:	e006      	b.n	800487e <HAL_GPIO_Init+0x1ee>
 8004870:	2303      	movs	r3, #3
 8004872:	e004      	b.n	800487e <HAL_GPIO_Init+0x1ee>
 8004874:	2302      	movs	r3, #2
 8004876:	e002      	b.n	800487e <HAL_GPIO_Init+0x1ee>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <HAL_GPIO_Init+0x1ee>
 800487c:	2300      	movs	r3, #0
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	f002 0203 	and.w	r2, r2, #3
 8004884:	0092      	lsls	r2, r2, #2
 8004886:	4093      	lsls	r3, r2
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800488e:	4937      	ldr	r1, [pc, #220]	; (800496c <HAL_GPIO_Init+0x2dc>)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	089b      	lsrs	r3, r3, #2
 8004894:	3302      	adds	r3, #2
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800489c:	4b38      	ldr	r3, [pc, #224]	; (8004980 <HAL_GPIO_Init+0x2f0>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	43db      	mvns	r3, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4013      	ands	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80048c0:	4a2f      	ldr	r2, [pc, #188]	; (8004980 <HAL_GPIO_Init+0x2f0>)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048c6:	4b2e      	ldr	r3, [pc, #184]	; (8004980 <HAL_GPIO_Init+0x2f0>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	43db      	mvns	r3, r3
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4013      	ands	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80048ea:	4a25      	ldr	r2, [pc, #148]	; (8004980 <HAL_GPIO_Init+0x2f0>)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048f0:	4b23      	ldr	r3, [pc, #140]	; (8004980 <HAL_GPIO_Init+0x2f0>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	43db      	mvns	r3, r3
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4013      	ands	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004914:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <HAL_GPIO_Init+0x2f0>)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800491a:	4b19      	ldr	r3, [pc, #100]	; (8004980 <HAL_GPIO_Init+0x2f0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	43db      	mvns	r3, r3
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4013      	ands	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800493e:	4a10      	ldr	r2, [pc, #64]	; (8004980 <HAL_GPIO_Init+0x2f0>)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	3301      	adds	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	f47f aea3 	bne.w	80046a0 <HAL_GPIO_Init+0x10>
  }
}
 800495a:	bf00      	nop
 800495c:	bf00      	nop
 800495e:	371c      	adds	r7, #28
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	40021000 	.word	0x40021000
 800496c:	40010000 	.word	0x40010000
 8004970:	48000400 	.word	0x48000400
 8004974:	48000800 	.word	0x48000800
 8004978:	48000c00 	.word	0x48000c00
 800497c:	48001000 	.word	0x48001000
 8004980:	40010400 	.word	0x40010400

08004984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	887b      	ldrh	r3, [r7, #2]
 8004996:	4013      	ands	r3, r2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
 80049a0:	e001      	b.n	80049a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	807b      	strh	r3, [r7, #2]
 80049c0:	4613      	mov	r3, r2
 80049c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049c4:	787b      	ldrb	r3, [r7, #1]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049ca:	887a      	ldrh	r2, [r7, #2]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049d0:	e002      	b.n	80049d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049d2:	887a      	ldrh	r2, [r7, #2]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049f6:	887a      	ldrh	r2, [r7, #2]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4013      	ands	r3, r2
 80049fc:	041a      	lsls	r2, r3, #16
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	43d9      	mvns	r1, r3
 8004a02:	887b      	ldrh	r3, [r7, #2]
 8004a04:	400b      	ands	r3, r1
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	619a      	str	r2, [r3, #24]
}
 8004a0c:	bf00      	nop
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a22:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d006      	beq.n	8004a3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a2e:	4a05      	ldr	r2, [pc, #20]	; (8004a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fc fc36 	bl	80012a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a3c:	bf00      	nop
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40010400 	.word	0x40010400

08004a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e081      	b.n	8004b5e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fe ff6e 	bl	8003950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	; 0x24
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0201 	bic.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d107      	bne.n	8004ac2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004abe:	609a      	str	r2, [r3, #8]
 8004ac0:	e006      	b.n	8004ad0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ace:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d104      	bne.n	8004ae2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ae0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69d9      	ldr	r1, [r3, #28]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1a      	ldr	r2, [r3, #32]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d138      	bne.n	8004bee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e032      	b.n	8004bf0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2224      	movs	r2, #36	; 0x24
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0201 	bic.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bb8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6819      	ldr	r1, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0201 	orr.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e000      	b.n	8004bf0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bee:	2302      	movs	r3, #2
  }
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d139      	bne.n	8004c86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e033      	b.n	8004c88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2224      	movs	r2, #36	; 0x24
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0201 	bic.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e000      	b.n	8004c88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c86:	2302      	movs	r3, #2
  }
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c96:	b08b      	sub	sp, #44	; 0x2c
 8004c98:	af06      	add	r7, sp, #24
 8004c9a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e0c4      	b.n	8004e30 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fe ffcc 	bl	8003c58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f004 fd4d 	bl	800976c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	73fb      	strb	r3, [r7, #15]
 8004cd6:	e040      	b.n	8004d5a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	4613      	mov	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3301      	adds	r3, #1
 8004cea:	2201      	movs	r2, #1
 8004cec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	440b      	add	r3, r1
 8004cfe:	7bfa      	ldrb	r2, [r7, #15]
 8004d00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	440b      	add	r3, r1
 8004d12:	3303      	adds	r3, #3
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d18:	7bfa      	ldrb	r2, [r7, #15]
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	440b      	add	r3, r1
 8004d26:	3338      	adds	r3, #56	; 0x38
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d2c:	7bfa      	ldrb	r2, [r7, #15]
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	440b      	add	r3, r1
 8004d3a:	333c      	adds	r3, #60	; 0x3c
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d40:	7bfa      	ldrb	r2, [r7, #15]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	440b      	add	r3, r1
 8004d4e:	3340      	adds	r3, #64	; 0x40
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	3301      	adds	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
 8004d5a:	7bfa      	ldrb	r2, [r7, #15]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d3b9      	bcc.n	8004cd8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	73fb      	strb	r3, [r7, #15]
 8004d68:	e044      	b.n	8004df4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d6a:	7bfa      	ldrb	r2, [r7, #15]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	440b      	add	r3, r1
 8004d78:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d80:	7bfa      	ldrb	r2, [r7, #15]
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	440b      	add	r3, r1
 8004d8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d92:	7bfa      	ldrb	r2, [r7, #15]
 8004d94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d96:	7bfa      	ldrb	r2, [r7, #15]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	440b      	add	r3, r1
 8004da4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004dac:	7bfa      	ldrb	r2, [r7, #15]
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	440b      	add	r3, r1
 8004dba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004dc2:	7bfa      	ldrb	r2, [r7, #15]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	440b      	add	r3, r1
 8004dd0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004dd8:	7bfa      	ldrb	r2, [r7, #15]
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	440b      	add	r3, r1
 8004de6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	3301      	adds	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
 8004df4:	7bfa      	ldrb	r2, [r7, #15]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d3b5      	bcc.n	8004d6a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	687e      	ldr	r6, [r7, #4]
 8004e06:	466d      	mov	r5, sp
 8004e08:	f106 0410 	add.w	r4, r6, #16
 8004e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	602b      	str	r3, [r5, #0]
 8004e14:	1d33      	adds	r3, r6, #4
 8004e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e18:	6838      	ldr	r0, [r7, #0]
 8004e1a:	f004 fcc2 	bl	80097a2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f001 b823 	b.w	8005ea4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 817d 	beq.w	800516e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004e74:	4bbc      	ldr	r3, [pc, #752]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 030c 	and.w	r3, r3, #12
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d00c      	beq.n	8004e9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e80:	4bb9      	ldr	r3, [pc, #740]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 030c 	and.w	r3, r3, #12
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d15c      	bne.n	8004f46 <HAL_RCC_OscConfig+0x10e>
 8004e8c:	4bb6      	ldr	r3, [pc, #728]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e98:	d155      	bne.n	8004f46 <HAL_RCC_OscConfig+0x10e>
 8004e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e9e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004ea6:	fa93 f3a3 	rbit	r3, r3
 8004eaa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8004eae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb2:	fab3 f383 	clz	r3, r3
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d102      	bne.n	8004ecc <HAL_RCC_OscConfig+0x94>
 8004ec6:	4ba8      	ldr	r3, [pc, #672]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	e015      	b.n	8004ef8 <HAL_RCC_OscConfig+0xc0>
 8004ecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ed0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004ed8:	fa93 f3a3 	rbit	r3, r3
 8004edc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ee4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004ee8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004eec:	fa93 f3a3 	rbit	r3, r3
 8004ef0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004ef4:	4b9c      	ldr	r3, [pc, #624]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004efc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004f00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004f04:	fa92 f2a2 	rbit	r2, r2
 8004f08:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004f0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004f10:	fab2 f282 	clz	r2, r2
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	f042 0220 	orr.w	r2, r2, #32
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	f002 021f 	and.w	r2, r2, #31
 8004f20:	2101      	movs	r1, #1
 8004f22:	fa01 f202 	lsl.w	r2, r1, r2
 8004f26:	4013      	ands	r3, r2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 811f 	beq.w	800516c <HAL_RCC_OscConfig+0x334>
 8004f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f040 8116 	bne.w	800516c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	f000 bfaf 	b.w	8005ea4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f56:	d106      	bne.n	8004f66 <HAL_RCC_OscConfig+0x12e>
 8004f58:	4b83      	ldr	r3, [pc, #524]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a82      	ldr	r2, [pc, #520]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	e036      	b.n	8004fd4 <HAL_RCC_OscConfig+0x19c>
 8004f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10c      	bne.n	8004f90 <HAL_RCC_OscConfig+0x158>
 8004f76:	4b7c      	ldr	r3, [pc, #496]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a7b      	ldr	r2, [pc, #492]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	4b79      	ldr	r3, [pc, #484]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a78      	ldr	r2, [pc, #480]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	e021      	b.n	8004fd4 <HAL_RCC_OscConfig+0x19c>
 8004f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCC_OscConfig+0x184>
 8004fa2:	4b71      	ldr	r3, [pc, #452]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a70      	ldr	r2, [pc, #448]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	4b6e      	ldr	r3, [pc, #440]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a6d      	ldr	r2, [pc, #436]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e00b      	b.n	8004fd4 <HAL_RCC_OscConfig+0x19c>
 8004fbc:	4b6a      	ldr	r3, [pc, #424]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a69      	ldr	r2, [pc, #420]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	4b67      	ldr	r3, [pc, #412]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a66      	ldr	r2, [pc, #408]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fd2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004fd4:	4b64      	ldr	r3, [pc, #400]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	f023 020f 	bic.w	r2, r3, #15
 8004fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	495f      	ldr	r1, [pc, #380]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d059      	beq.n	80050b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffe:	f7ff f98f 	bl	8004320 <HAL_GetTick>
 8005002:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005006:	e00a      	b.n	800501e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005008:	f7ff f98a 	bl	8004320 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b64      	cmp	r3, #100	; 0x64
 8005016:	d902      	bls.n	800501e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	f000 bf43 	b.w	8005ea4 <HAL_RCC_OscConfig+0x106c>
 800501e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005022:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005026:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800502a:	fa93 f3a3 	rbit	r3, r3
 800502e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005032:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005036:	fab3 f383 	clz	r3, r3
 800503a:	b2db      	uxtb	r3, r3
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	b2db      	uxtb	r3, r3
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b01      	cmp	r3, #1
 8005048:	d102      	bne.n	8005050 <HAL_RCC_OscConfig+0x218>
 800504a:	4b47      	ldr	r3, [pc, #284]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	e015      	b.n	800507c <HAL_RCC_OscConfig+0x244>
 8005050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005054:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800505c:	fa93 f3a3 	rbit	r3, r3
 8005060:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005068:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800506c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005070:	fa93 f3a3 	rbit	r3, r3
 8005074:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005078:	4b3b      	ldr	r3, [pc, #236]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005080:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005084:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005088:	fa92 f2a2 	rbit	r2, r2
 800508c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005090:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005094:	fab2 f282 	clz	r2, r2
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	f042 0220 	orr.w	r2, r2, #32
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	f002 021f 	and.w	r2, r2, #31
 80050a4:	2101      	movs	r1, #1
 80050a6:	fa01 f202 	lsl.w	r2, r1, r2
 80050aa:	4013      	ands	r3, r2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0ab      	beq.n	8005008 <HAL_RCC_OscConfig+0x1d0>
 80050b0:	e05d      	b.n	800516e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b2:	f7ff f935 	bl	8004320 <HAL_GetTick>
 80050b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050bc:	f7ff f930 	bl	8004320 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b64      	cmp	r3, #100	; 0x64
 80050ca:	d902      	bls.n	80050d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	f000 bee9 	b.w	8005ea4 <HAL_RCC_OscConfig+0x106c>
 80050d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80050de:	fa93 f3a3 	rbit	r3, r3
 80050e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80050e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ea:	fab3 f383 	clz	r3, r3
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d102      	bne.n	8005104 <HAL_RCC_OscConfig+0x2cc>
 80050fe:	4b1a      	ldr	r3, [pc, #104]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	e015      	b.n	8005130 <HAL_RCC_OscConfig+0x2f8>
 8005104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005108:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005110:	fa93 f3a3 	rbit	r3, r3
 8005114:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800511c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005120:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005124:	fa93 f3a3 	rbit	r3, r3
 8005128:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800512c:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <HAL_RCC_OscConfig+0x330>)
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005134:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005138:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800513c:	fa92 f2a2 	rbit	r2, r2
 8005140:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005144:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005148:	fab2 f282 	clz	r2, r2
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	f042 0220 	orr.w	r2, r2, #32
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	f002 021f 	and.w	r2, r2, #31
 8005158:	2101      	movs	r1, #1
 800515a:	fa01 f202 	lsl.w	r2, r1, r2
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1ab      	bne.n	80050bc <HAL_RCC_OscConfig+0x284>
 8005164:	e003      	b.n	800516e <HAL_RCC_OscConfig+0x336>
 8005166:	bf00      	nop
 8005168:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800516c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800516e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005172:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 817d 	beq.w	800547e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005184:	4ba6      	ldr	r3, [pc, #664]	; (8005420 <HAL_RCC_OscConfig+0x5e8>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005190:	4ba3      	ldr	r3, [pc, #652]	; (8005420 <HAL_RCC_OscConfig+0x5e8>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 030c 	and.w	r3, r3, #12
 8005198:	2b08      	cmp	r3, #8
 800519a:	d172      	bne.n	8005282 <HAL_RCC_OscConfig+0x44a>
 800519c:	4ba0      	ldr	r3, [pc, #640]	; (8005420 <HAL_RCC_OscConfig+0x5e8>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d16c      	bne.n	8005282 <HAL_RCC_OscConfig+0x44a>
 80051a8:	2302      	movs	r3, #2
 80051aa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80051b2:	fa93 f3a3 	rbit	r3, r3
 80051b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80051ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051be:	fab3 f383 	clz	r3, r3
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d102      	bne.n	80051d8 <HAL_RCC_OscConfig+0x3a0>
 80051d2:	4b93      	ldr	r3, [pc, #588]	; (8005420 <HAL_RCC_OscConfig+0x5e8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	e013      	b.n	8005200 <HAL_RCC_OscConfig+0x3c8>
 80051d8:	2302      	movs	r3, #2
 80051da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051de:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80051e2:	fa93 f3a3 	rbit	r3, r3
 80051e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80051ea:	2302      	movs	r3, #2
 80051ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80051f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80051f4:	fa93 f3a3 	rbit	r3, r3
 80051f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80051fc:	4b88      	ldr	r3, [pc, #544]	; (8005420 <HAL_RCC_OscConfig+0x5e8>)
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	2202      	movs	r2, #2
 8005202:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005206:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800520a:	fa92 f2a2 	rbit	r2, r2
 800520e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005212:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005216:	fab2 f282 	clz	r2, r2
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	f042 0220 	orr.w	r2, r2, #32
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	f002 021f 	and.w	r2, r2, #31
 8005226:	2101      	movs	r1, #1
 8005228:	fa01 f202 	lsl.w	r2, r1, r2
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCC_OscConfig+0x410>
 8005232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d002      	beq.n	8005248 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f000 be2e 	b.w	8005ea4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005248:	4b75      	ldr	r3, [pc, #468]	; (8005420 <HAL_RCC_OscConfig+0x5e8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005254:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	21f8      	movs	r1, #248	; 0xf8
 800525e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005262:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005266:	fa91 f1a1 	rbit	r1, r1
 800526a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800526e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005272:	fab1 f181 	clz	r1, r1
 8005276:	b2c9      	uxtb	r1, r1
 8005278:	408b      	lsls	r3, r1
 800527a:	4969      	ldr	r1, [pc, #420]	; (8005420 <HAL_RCC_OscConfig+0x5e8>)
 800527c:	4313      	orrs	r3, r2
 800527e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005280:	e0fd      	b.n	800547e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005286:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8088 	beq.w	80053a4 <HAL_RCC_OscConfig+0x56c>
 8005294:	2301      	movs	r3, #1
 8005296:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80052a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052aa:	fab3 f383 	clz	r3, r3
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	461a      	mov	r2, r3
 80052bc:	2301      	movs	r3, #1
 80052be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c0:	f7ff f82e 	bl	8004320 <HAL_GetTick>
 80052c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c8:	e00a      	b.n	80052e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052ca:	f7ff f829 	bl	8004320 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d902      	bls.n	80052e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	f000 bde2 	b.w	8005ea4 <HAL_RCC_OscConfig+0x106c>
 80052e0:	2302      	movs	r3, #2
 80052e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80052ea:	fa93 f3a3 	rbit	r3, r3
 80052ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80052f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f6:	fab3 f383 	clz	r3, r3
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	d102      	bne.n	8005310 <HAL_RCC_OscConfig+0x4d8>
 800530a:	4b45      	ldr	r3, [pc, #276]	; (8005420 <HAL_RCC_OscConfig+0x5e8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	e013      	b.n	8005338 <HAL_RCC_OscConfig+0x500>
 8005310:	2302      	movs	r3, #2
 8005312:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800531a:	fa93 f3a3 	rbit	r3, r3
 800531e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005322:	2302      	movs	r3, #2
 8005324:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005328:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800532c:	fa93 f3a3 	rbit	r3, r3
 8005330:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005334:	4b3a      	ldr	r3, [pc, #232]	; (8005420 <HAL_RCC_OscConfig+0x5e8>)
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	2202      	movs	r2, #2
 800533a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800533e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005342:	fa92 f2a2 	rbit	r2, r2
 8005346:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800534a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800534e:	fab2 f282 	clz	r2, r2
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	f042 0220 	orr.w	r2, r2, #32
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	f002 021f 	and.w	r2, r2, #31
 800535e:	2101      	movs	r1, #1
 8005360:	fa01 f202 	lsl.w	r2, r1, r2
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0af      	beq.n	80052ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800536a:	4b2d      	ldr	r3, [pc, #180]	; (8005420 <HAL_RCC_OscConfig+0x5e8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	21f8      	movs	r1, #248	; 0xf8
 8005380:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005384:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005388:	fa91 f1a1 	rbit	r1, r1
 800538c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005390:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005394:	fab1 f181 	clz	r1, r1
 8005398:	b2c9      	uxtb	r1, r1
 800539a:	408b      	lsls	r3, r1
 800539c:	4920      	ldr	r1, [pc, #128]	; (8005420 <HAL_RCC_OscConfig+0x5e8>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]
 80053a2:	e06c      	b.n	800547e <HAL_RCC_OscConfig+0x646>
 80053a4:	2301      	movs	r3, #1
 80053a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80053ae:	fa93 f3a3 	rbit	r3, r3
 80053b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80053b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ba:	fab3 f383 	clz	r3, r3
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	461a      	mov	r2, r3
 80053cc:	2300      	movs	r3, #0
 80053ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f7fe ffa6 	bl	8004320 <HAL_GetTick>
 80053d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d8:	e00a      	b.n	80053f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053da:	f7fe ffa1 	bl	8004320 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d902      	bls.n	80053f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	f000 bd5a 	b.w	8005ea4 <HAL_RCC_OscConfig+0x106c>
 80053f0:	2302      	movs	r3, #2
 80053f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053fa:	fa93 f3a3 	rbit	r3, r3
 80053fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005406:	fab3 f383 	clz	r3, r3
 800540a:	b2db      	uxtb	r3, r3
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	b2db      	uxtb	r3, r3
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b01      	cmp	r3, #1
 8005418:	d104      	bne.n	8005424 <HAL_RCC_OscConfig+0x5ec>
 800541a:	4b01      	ldr	r3, [pc, #4]	; (8005420 <HAL_RCC_OscConfig+0x5e8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	e015      	b.n	800544c <HAL_RCC_OscConfig+0x614>
 8005420:	40021000 	.word	0x40021000
 8005424:	2302      	movs	r3, #2
 8005426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800542e:	fa93 f3a3 	rbit	r3, r3
 8005432:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005436:	2302      	movs	r3, #2
 8005438:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800543c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005440:	fa93 f3a3 	rbit	r3, r3
 8005444:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005448:	4bc8      	ldr	r3, [pc, #800]	; (800576c <HAL_RCC_OscConfig+0x934>)
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	2202      	movs	r2, #2
 800544e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005452:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005456:	fa92 f2a2 	rbit	r2, r2
 800545a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800545e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005462:	fab2 f282 	clz	r2, r2
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	f042 0220 	orr.w	r2, r2, #32
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	f002 021f 	and.w	r2, r2, #31
 8005472:	2101      	movs	r1, #1
 8005474:	fa01 f202 	lsl.w	r2, r1, r2
 8005478:	4013      	ands	r3, r2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1ad      	bne.n	80053da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800547e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8110 	beq.w	80056b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005498:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d079      	beq.n	8005598 <HAL_RCC_OscConfig+0x760>
 80054a4:	2301      	movs	r3, #1
 80054a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054ae:	fa93 f3a3 	rbit	r3, r3
 80054b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80054b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ba:	fab3 f383 	clz	r3, r3
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	4bab      	ldr	r3, [pc, #684]	; (8005770 <HAL_RCC_OscConfig+0x938>)
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	461a      	mov	r2, r3
 80054ca:	2301      	movs	r3, #1
 80054cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ce:	f7fe ff27 	bl	8004320 <HAL_GetTick>
 80054d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d6:	e00a      	b.n	80054ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054d8:	f7fe ff22 	bl	8004320 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d902      	bls.n	80054ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	f000 bcdb 	b.w	8005ea4 <HAL_RCC_OscConfig+0x106c>
 80054ee:	2302      	movs	r3, #2
 80054f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054f8:	fa93 f3a3 	rbit	r3, r3
 80054fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005504:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005508:	2202      	movs	r2, #2
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005510:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	fa93 f2a3 	rbit	r2, r3
 800551a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800552c:	2202      	movs	r2, #2
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	fa93 f2a3 	rbit	r2, r3
 800553e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005542:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005546:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005548:	4b88      	ldr	r3, [pc, #544]	; (800576c <HAL_RCC_OscConfig+0x934>)
 800554a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800554c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005550:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005554:	2102      	movs	r1, #2
 8005556:	6019      	str	r1, [r3, #0]
 8005558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	fa93 f1a3 	rbit	r1, r3
 8005566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800556a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800556e:	6019      	str	r1, [r3, #0]
  return result;
 8005570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005574:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	fab3 f383 	clz	r3, r3
 800557e:	b2db      	uxtb	r3, r3
 8005580:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005584:	b2db      	uxtb	r3, r3
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	2101      	movs	r1, #1
 800558c:	fa01 f303 	lsl.w	r3, r1, r3
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0a0      	beq.n	80054d8 <HAL_RCC_OscConfig+0x6a0>
 8005596:	e08d      	b.n	80056b4 <HAL_RCC_OscConfig+0x87c>
 8005598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800559c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80055a0:	2201      	movs	r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	fa93 f2a3 	rbit	r2, r3
 80055b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80055ba:	601a      	str	r2, [r3, #0]
  return result;
 80055bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80055c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c6:	fab3 f383 	clz	r3, r3
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	4b68      	ldr	r3, [pc, #416]	; (8005770 <HAL_RCC_OscConfig+0x938>)
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	461a      	mov	r2, r3
 80055d6:	2300      	movs	r3, #0
 80055d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055da:	f7fe fea1 	bl	8004320 <HAL_GetTick>
 80055de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e2:	e00a      	b.n	80055fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e4:	f7fe fe9c 	bl	8004320 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d902      	bls.n	80055fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	f000 bc55 	b.w	8005ea4 <HAL_RCC_OscConfig+0x106c>
 80055fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005602:	2202      	movs	r2, #2
 8005604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800560a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	fa93 f2a3 	rbit	r2, r3
 8005614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005618:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005622:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005626:	2202      	movs	r2, #2
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	fa93 f2a3 	rbit	r2, r3
 8005638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800564a:	2202      	movs	r2, #2
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	fa93 f2a3 	rbit	r2, r3
 800565c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005660:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005664:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005666:	4b41      	ldr	r3, [pc, #260]	; (800576c <HAL_RCC_OscConfig+0x934>)
 8005668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800566a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800566e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005672:	2102      	movs	r1, #2
 8005674:	6019      	str	r1, [r3, #0]
 8005676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800567a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	fa93 f1a3 	rbit	r1, r3
 8005684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005688:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800568c:	6019      	str	r1, [r3, #0]
  return result;
 800568e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005692:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	fab3 f383 	clz	r3, r3
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	2101      	movs	r1, #1
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d197      	bne.n	80055e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 81a1 	beq.w	8005a0c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ca:	2300      	movs	r3, #0
 80056cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056d0:	4b26      	ldr	r3, [pc, #152]	; (800576c <HAL_RCC_OscConfig+0x934>)
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d116      	bne.n	800570a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056dc:	4b23      	ldr	r3, [pc, #140]	; (800576c <HAL_RCC_OscConfig+0x934>)
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	4a22      	ldr	r2, [pc, #136]	; (800576c <HAL_RCC_OscConfig+0x934>)
 80056e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e6:	61d3      	str	r3, [r2, #28]
 80056e8:	4b20      	ldr	r3, [pc, #128]	; (800576c <HAL_RCC_OscConfig+0x934>)
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80056f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005702:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005704:	2301      	movs	r3, #1
 8005706:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570a:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <HAL_RCC_OscConfig+0x93c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d11a      	bne.n	800574c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005716:	4b17      	ldr	r3, [pc, #92]	; (8005774 <HAL_RCC_OscConfig+0x93c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a16      	ldr	r2, [pc, #88]	; (8005774 <HAL_RCC_OscConfig+0x93c>)
 800571c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005720:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005722:	f7fe fdfd 	bl	8004320 <HAL_GetTick>
 8005726:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800572a:	e009      	b.n	8005740 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572c:	f7fe fdf8 	bl	8004320 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b64      	cmp	r3, #100	; 0x64
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e3b1      	b.n	8005ea4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <HAL_RCC_OscConfig+0x93c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0ef      	beq.n	800572c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800574c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005750:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d10d      	bne.n	8005778 <HAL_RCC_OscConfig+0x940>
 800575c:	4b03      	ldr	r3, [pc, #12]	; (800576c <HAL_RCC_OscConfig+0x934>)
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	4a02      	ldr	r2, [pc, #8]	; (800576c <HAL_RCC_OscConfig+0x934>)
 8005762:	f043 0301 	orr.w	r3, r3, #1
 8005766:	6213      	str	r3, [r2, #32]
 8005768:	e03c      	b.n	80057e4 <HAL_RCC_OscConfig+0x9ac>
 800576a:	bf00      	nop
 800576c:	40021000 	.word	0x40021000
 8005770:	10908120 	.word	0x10908120
 8005774:	40007000 	.word	0x40007000
 8005778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800577c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10c      	bne.n	80057a2 <HAL_RCC_OscConfig+0x96a>
 8005788:	4bc1      	ldr	r3, [pc, #772]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	4ac0      	ldr	r2, [pc, #768]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	6213      	str	r3, [r2, #32]
 8005794:	4bbe      	ldr	r3, [pc, #760]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	4abd      	ldr	r2, [pc, #756]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 800579a:	f023 0304 	bic.w	r3, r3, #4
 800579e:	6213      	str	r3, [r2, #32]
 80057a0:	e020      	b.n	80057e4 <HAL_RCC_OscConfig+0x9ac>
 80057a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d10c      	bne.n	80057cc <HAL_RCC_OscConfig+0x994>
 80057b2:	4bb7      	ldr	r3, [pc, #732]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	4ab6      	ldr	r2, [pc, #728]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 80057b8:	f043 0304 	orr.w	r3, r3, #4
 80057bc:	6213      	str	r3, [r2, #32]
 80057be:	4bb4      	ldr	r3, [pc, #720]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	4ab3      	ldr	r2, [pc, #716]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	6213      	str	r3, [r2, #32]
 80057ca:	e00b      	b.n	80057e4 <HAL_RCC_OscConfig+0x9ac>
 80057cc:	4bb0      	ldr	r3, [pc, #704]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	4aaf      	ldr	r2, [pc, #700]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	6213      	str	r3, [r2, #32]
 80057d8:	4bad      	ldr	r3, [pc, #692]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	4aac      	ldr	r2, [pc, #688]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 80057de:	f023 0304 	bic.w	r3, r3, #4
 80057e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 8081 	beq.w	80058f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057f6:	f7fe fd93 	bl	8004320 <HAL_GetTick>
 80057fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057fe:	e00b      	b.n	8005818 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005800:	f7fe fd8e 	bl	8004320 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e345      	b.n	8005ea4 <HAL_RCC_OscConfig+0x106c>
 8005818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800581c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005820:	2202      	movs	r2, #2
 8005822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005828:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	fa93 f2a3 	rbit	r2, r3
 8005832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005836:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005840:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005844:	2202      	movs	r2, #2
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800584c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	fa93 f2a3 	rbit	r2, r3
 8005856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800585a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800585e:	601a      	str	r2, [r3, #0]
  return result;
 8005860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005864:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005868:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800586a:	fab3 f383 	clz	r3, r3
 800586e:	b2db      	uxtb	r3, r3
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	b2db      	uxtb	r3, r3
 8005874:	f043 0302 	orr.w	r3, r3, #2
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d102      	bne.n	8005884 <HAL_RCC_OscConfig+0xa4c>
 800587e:	4b84      	ldr	r3, [pc, #528]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	e013      	b.n	80058ac <HAL_RCC_OscConfig+0xa74>
 8005884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005888:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800588c:	2202      	movs	r2, #2
 800588e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005894:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	fa93 f2a3 	rbit	r2, r3
 800589e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	4b79      	ldr	r3, [pc, #484]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80058b4:	2102      	movs	r1, #2
 80058b6:	6011      	str	r1, [r2, #0]
 80058b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	fa92 f1a2 	rbit	r1, r2
 80058c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80058ce:	6011      	str	r1, [r2, #0]
  return result;
 80058d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	fab2 f282 	clz	r2, r2
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	f002 021f 	and.w	r2, r2, #31
 80058ea:	2101      	movs	r1, #1
 80058ec:	fa01 f202 	lsl.w	r2, r1, r2
 80058f0:	4013      	ands	r3, r2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d084      	beq.n	8005800 <HAL_RCC_OscConfig+0x9c8>
 80058f6:	e07f      	b.n	80059f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f8:	f7fe fd12 	bl	8004320 <HAL_GetTick>
 80058fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005900:	e00b      	b.n	800591a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005902:	f7fe fd0d 	bl	8004320 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e2c4      	b.n	8005ea4 <HAL_RCC_OscConfig+0x106c>
 800591a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800591e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005922:	2202      	movs	r2, #2
 8005924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800592a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	fa93 f2a3 	rbit	r2, r3
 8005934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005938:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005942:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005946:	2202      	movs	r2, #2
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800594e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	fa93 f2a3 	rbit	r2, r3
 8005958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800595c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005960:	601a      	str	r2, [r3, #0]
  return result;
 8005962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005966:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800596a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800596c:	fab3 f383 	clz	r3, r3
 8005970:	b2db      	uxtb	r3, r3
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	b2db      	uxtb	r3, r3
 8005976:	f043 0302 	orr.w	r3, r3, #2
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d102      	bne.n	8005986 <HAL_RCC_OscConfig+0xb4e>
 8005980:	4b43      	ldr	r3, [pc, #268]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	e013      	b.n	80059ae <HAL_RCC_OscConfig+0xb76>
 8005986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800598a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800598e:	2202      	movs	r2, #2
 8005990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005996:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	fa93 f2a3 	rbit	r2, r3
 80059a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	4b39      	ldr	r3, [pc, #228]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80059b6:	2102      	movs	r1, #2
 80059b8:	6011      	str	r1, [r2, #0]
 80059ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	fa92 f1a2 	rbit	r1, r2
 80059c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80059d0:	6011      	str	r1, [r2, #0]
  return result;
 80059d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	fab2 f282 	clz	r2, r2
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	f002 021f 	and.w	r2, r2, #31
 80059ec:	2101      	movs	r1, #1
 80059ee:	fa01 f202 	lsl.w	r2, r1, r2
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d184      	bne.n	8005902 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d105      	bne.n	8005a0c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a00:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	4a22      	ldr	r2, [pc, #136]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 8005a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 8242 	beq.w	8005ea2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a1e:	4b1c      	ldr	r3, [pc, #112]	; (8005a90 <HAL_RCC_OscConfig+0xc58>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f003 030c 	and.w	r3, r3, #12
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	f000 8213 	beq.w	8005e52 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	f040 8162 	bne.w	8005d02 <HAL_RCC_OscConfig+0xeca>
 8005a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a42:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005a46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a50:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	fa93 f2a3 	rbit	r2, r3
 8005a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a5e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005a62:	601a      	str	r2, [r3, #0]
  return result;
 8005a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a68:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005a6c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6e:	fab3 f383 	clz	r3, r3
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	461a      	mov	r2, r3
 8005a80:	2300      	movs	r3, #0
 8005a82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a84:	f7fe fc4c 	bl	8004320 <HAL_GetTick>
 8005a88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a8c:	e00c      	b.n	8005aa8 <HAL_RCC_OscConfig+0xc70>
 8005a8e:	bf00      	nop
 8005a90:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a94:	f7fe fc44 	bl	8004320 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e1fd      	b.n	8005ea4 <HAL_RCC_OscConfig+0x106c>
 8005aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005ab0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	fa93 f2a3 	rbit	r2, r3
 8005ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ac8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005acc:	601a      	str	r2, [r3, #0]
  return result;
 8005ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ad2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005ad6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ad8:	fab3 f383 	clz	r3, r3
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d102      	bne.n	8005af2 <HAL_RCC_OscConfig+0xcba>
 8005aec:	4bb0      	ldr	r3, [pc, #704]	; (8005db0 <HAL_RCC_OscConfig+0xf78>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	e027      	b.n	8005b42 <HAL_RCC_OscConfig+0xd0a>
 8005af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005af6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005afa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b04:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	fa93 f2a3 	rbit	r2, r3
 8005b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b12:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b1c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b2a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	fa93 f2a3 	rbit	r2, r3
 8005b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b38:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	4b9c      	ldr	r3, [pc, #624]	; (8005db0 <HAL_RCC_OscConfig+0xf78>)
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b46:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005b4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005b4e:	6011      	str	r1, [r2, #0]
 8005b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b54:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005b58:	6812      	ldr	r2, [r2, #0]
 8005b5a:	fa92 f1a2 	rbit	r1, r2
 8005b5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b62:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005b66:	6011      	str	r1, [r2, #0]
  return result;
 8005b68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b6c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	fab2 f282 	clz	r2, r2
 8005b76:	b2d2      	uxtb	r2, r2
 8005b78:	f042 0220 	orr.w	r2, r2, #32
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	f002 021f 	and.w	r2, r2, #31
 8005b82:	2101      	movs	r1, #1
 8005b84:	fa01 f202 	lsl.w	r2, r1, r2
 8005b88:	4013      	ands	r3, r2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d182      	bne.n	8005a94 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b8e:	4b88      	ldr	r3, [pc, #544]	; (8005db0 <HAL_RCC_OscConfig+0xf78>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	430b      	orrs	r3, r1
 8005bb0:	497f      	ldr	r1, [pc, #508]	; (8005db0 <HAL_RCC_OscConfig+0xf78>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	604b      	str	r3, [r1, #4]
 8005bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005bbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bc8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	fa93 f2a3 	rbit	r2, r3
 8005bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bd6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005bda:	601a      	str	r2, [r3, #0]
  return result;
 8005bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005be0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005be4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005be6:	fab3 f383 	clz	r3, r3
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005bf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfc:	f7fe fb90 	bl	8004320 <HAL_GetTick>
 8005c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c04:	e009      	b.n	8005c1a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c06:	f7fe fb8b 	bl	8004320 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e144      	b.n	8005ea4 <HAL_RCC_OscConfig+0x106c>
 8005c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c1e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c2c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	fa93 f2a3 	rbit	r2, r3
 8005c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c3a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005c3e:	601a      	str	r2, [r3, #0]
  return result;
 8005c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c44:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005c48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c4a:	fab3 f383 	clz	r3, r3
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d102      	bne.n	8005c64 <HAL_RCC_OscConfig+0xe2c>
 8005c5e:	4b54      	ldr	r3, [pc, #336]	; (8005db0 <HAL_RCC_OscConfig+0xf78>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	e027      	b.n	8005cb4 <HAL_RCC_OscConfig+0xe7c>
 8005c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c68:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005c6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c76:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	fa93 f2a3 	rbit	r2, r3
 8005c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c84:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c8e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c9c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	fa93 f2a3 	rbit	r2, r3
 8005ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005caa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	4b3f      	ldr	r3, [pc, #252]	; (8005db0 <HAL_RCC_OscConfig+0xf78>)
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005cb8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005cbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005cc0:	6011      	str	r1, [r2, #0]
 8005cc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005cc6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	fa92 f1a2 	rbit	r1, r2
 8005cd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005cd4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005cd8:	6011      	str	r1, [r2, #0]
  return result;
 8005cda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005cde:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	fab2 f282 	clz	r2, r2
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	f042 0220 	orr.w	r2, r2, #32
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	f002 021f 	and.w	r2, r2, #31
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d082      	beq.n	8005c06 <HAL_RCC_OscConfig+0xdce>
 8005d00:	e0cf      	b.n	8005ea2 <HAL_RCC_OscConfig+0x106a>
 8005d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d06:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005d0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d14:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	fa93 f2a3 	rbit	r2, r3
 8005d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005d26:	601a      	str	r2, [r3, #0]
  return result;
 8005d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d2c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005d30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d32:	fab3 f383 	clz	r3, r3
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005d3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	461a      	mov	r2, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d48:	f7fe faea 	bl	8004320 <HAL_GetTick>
 8005d4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d50:	e009      	b.n	8005d66 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d52:	f7fe fae5 	bl	8004320 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e09e      	b.n	8005ea4 <HAL_RCC_OscConfig+0x106c>
 8005d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d6a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005d6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d78:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	fa93 f2a3 	rbit	r2, r3
 8005d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005d8a:	601a      	str	r2, [r3, #0]
  return result;
 8005d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d90:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005d94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d96:	fab3 f383 	clz	r3, r3
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	f043 0301 	orr.w	r3, r3, #1
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d104      	bne.n	8005db4 <HAL_RCC_OscConfig+0xf7c>
 8005daa:	4b01      	ldr	r3, [pc, #4]	; (8005db0 <HAL_RCC_OscConfig+0xf78>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	e029      	b.n	8005e04 <HAL_RCC_OscConfig+0xfcc>
 8005db0:	40021000 	.word	0x40021000
 8005db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005db8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dc6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	fa93 f2a3 	rbit	r2, r3
 8005dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dd4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dde:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005de2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	fa93 f2a3 	rbit	r2, r3
 8005df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dfa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	4b2b      	ldr	r3, [pc, #172]	; (8005eb0 <HAL_RCC_OscConfig+0x1078>)
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e08:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005e0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005e10:	6011      	str	r1, [r2, #0]
 8005e12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e16:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005e1a:	6812      	ldr	r2, [r2, #0]
 8005e1c:	fa92 f1a2 	rbit	r1, r2
 8005e20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e24:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005e28:	6011      	str	r1, [r2, #0]
  return result;
 8005e2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e2e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	fab2 f282 	clz	r2, r2
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	f042 0220 	orr.w	r2, r2, #32
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	f002 021f 	and.w	r2, r2, #31
 8005e44:	2101      	movs	r1, #1
 8005e46:	fa01 f202 	lsl.w	r2, r1, r2
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d180      	bne.n	8005d52 <HAL_RCC_OscConfig+0xf1a>
 8005e50:	e027      	b.n	8005ea2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e01e      	b.n	8005ea4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005e66:	4b12      	ldr	r3, [pc, #72]	; (8005eb0 <HAL_RCC_OscConfig+0x1078>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005e6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005e72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d10b      	bne.n	8005e9e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005e86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d001      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40021000 	.word	0x40021000

08005eb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b09e      	sub	sp, #120	; 0x78
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e162      	b.n	8006192 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ecc:	4b90      	ldr	r3, [pc, #576]	; (8006110 <HAL_RCC_ClockConfig+0x25c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d910      	bls.n	8005efc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eda:	4b8d      	ldr	r3, [pc, #564]	; (8006110 <HAL_RCC_ClockConfig+0x25c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f023 0207 	bic.w	r2, r3, #7
 8005ee2:	498b      	ldr	r1, [pc, #556]	; (8006110 <HAL_RCC_ClockConfig+0x25c>)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eea:	4b89      	ldr	r3, [pc, #548]	; (8006110 <HAL_RCC_ClockConfig+0x25c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d001      	beq.n	8005efc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e14a      	b.n	8006192 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d008      	beq.n	8005f1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f08:	4b82      	ldr	r3, [pc, #520]	; (8006114 <HAL_RCC_ClockConfig+0x260>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	497f      	ldr	r1, [pc, #508]	; (8006114 <HAL_RCC_ClockConfig+0x260>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80dc 	beq.w	80060e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d13c      	bne.n	8005faa <HAL_RCC_ClockConfig+0xf6>
 8005f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f38:	fa93 f3a3 	rbit	r3, r3
 8005f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f40:	fab3 f383 	clz	r3, r3
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	f043 0301 	orr.w	r3, r3, #1
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d102      	bne.n	8005f5a <HAL_RCC_ClockConfig+0xa6>
 8005f54:	4b6f      	ldr	r3, [pc, #444]	; (8006114 <HAL_RCC_ClockConfig+0x260>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	e00f      	b.n	8005f7a <HAL_RCC_ClockConfig+0xc6>
 8005f5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f62:	fa93 f3a3 	rbit	r3, r3
 8005f66:	667b      	str	r3, [r7, #100]	; 0x64
 8005f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f70:	fa93 f3a3 	rbit	r3, r3
 8005f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f76:	4b67      	ldr	r3, [pc, #412]	; (8006114 <HAL_RCC_ClockConfig+0x260>)
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f82:	fa92 f2a2 	rbit	r2, r2
 8005f86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005f88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f8a:	fab2 f282 	clz	r2, r2
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	f042 0220 	orr.w	r2, r2, #32
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	f002 021f 	and.w	r2, r2, #31
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d17b      	bne.n	800609e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e0f3      	b.n	8006192 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d13c      	bne.n	800602c <HAL_RCC_ClockConfig+0x178>
 8005fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fba:	fa93 f3a3 	rbit	r3, r3
 8005fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc2:	fab3 f383 	clz	r3, r3
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	f043 0301 	orr.w	r3, r3, #1
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d102      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x128>
 8005fd6:	4b4f      	ldr	r3, [pc, #316]	; (8006114 <HAL_RCC_ClockConfig+0x260>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	e00f      	b.n	8005ffc <HAL_RCC_ClockConfig+0x148>
 8005fdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fe0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe4:	fa93 f3a3 	rbit	r3, r3
 8005fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8005fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fee:	643b      	str	r3, [r7, #64]	; 0x40
 8005ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff2:	fa93 f3a3 	rbit	r3, r3
 8005ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ff8:	4b46      	ldr	r3, [pc, #280]	; (8006114 <HAL_RCC_ClockConfig+0x260>)
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006000:	63ba      	str	r2, [r7, #56]	; 0x38
 8006002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006004:	fa92 f2a2 	rbit	r2, r2
 8006008:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800600a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800600c:	fab2 f282 	clz	r2, r2
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	f042 0220 	orr.w	r2, r2, #32
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	f002 021f 	and.w	r2, r2, #31
 800601c:	2101      	movs	r1, #1
 800601e:	fa01 f202 	lsl.w	r2, r1, r2
 8006022:	4013      	ands	r3, r2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d13a      	bne.n	800609e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e0b2      	b.n	8006192 <HAL_RCC_ClockConfig+0x2de>
 800602c:	2302      	movs	r3, #2
 800602e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	fa93 f3a3 	rbit	r3, r3
 8006036:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800603a:	fab3 f383 	clz	r3, r3
 800603e:	b2db      	uxtb	r3, r3
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	b2db      	uxtb	r3, r3
 8006044:	f043 0301 	orr.w	r3, r3, #1
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b01      	cmp	r3, #1
 800604c:	d102      	bne.n	8006054 <HAL_RCC_ClockConfig+0x1a0>
 800604e:	4b31      	ldr	r3, [pc, #196]	; (8006114 <HAL_RCC_ClockConfig+0x260>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	e00d      	b.n	8006070 <HAL_RCC_ClockConfig+0x1bc>
 8006054:	2302      	movs	r3, #2
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	fa93 f3a3 	rbit	r3, r3
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
 8006060:	2302      	movs	r3, #2
 8006062:	623b      	str	r3, [r7, #32]
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	fa93 f3a3 	rbit	r3, r3
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	4b29      	ldr	r3, [pc, #164]	; (8006114 <HAL_RCC_ClockConfig+0x260>)
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	2202      	movs	r2, #2
 8006072:	61ba      	str	r2, [r7, #24]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	fa92 f2a2 	rbit	r2, r2
 800607a:	617a      	str	r2, [r7, #20]
  return result;
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	fab2 f282 	clz	r2, r2
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	f042 0220 	orr.w	r2, r2, #32
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	f002 021f 	and.w	r2, r2, #31
 800608e:	2101      	movs	r1, #1
 8006090:	fa01 f202 	lsl.w	r2, r1, r2
 8006094:	4013      	ands	r3, r2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e079      	b.n	8006192 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800609e:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <HAL_RCC_ClockConfig+0x260>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f023 0203 	bic.w	r2, r3, #3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	491a      	ldr	r1, [pc, #104]	; (8006114 <HAL_RCC_ClockConfig+0x260>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060b0:	f7fe f936 	bl	8004320 <HAL_GetTick>
 80060b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b6:	e00a      	b.n	80060ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b8:	f7fe f932 	bl	8004320 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e061      	b.n	8006192 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ce:	4b11      	ldr	r3, [pc, #68]	; (8006114 <HAL_RCC_ClockConfig+0x260>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f003 020c 	and.w	r2, r3, #12
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	429a      	cmp	r2, r3
 80060de:	d1eb      	bne.n	80060b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060e0:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <HAL_RCC_ClockConfig+0x25c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d214      	bcs.n	8006118 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ee:	4b08      	ldr	r3, [pc, #32]	; (8006110 <HAL_RCC_ClockConfig+0x25c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f023 0207 	bic.w	r2, r3, #7
 80060f6:	4906      	ldr	r1, [pc, #24]	; (8006110 <HAL_RCC_ClockConfig+0x25c>)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fe:	4b04      	ldr	r3, [pc, #16]	; (8006110 <HAL_RCC_ClockConfig+0x25c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d005      	beq.n	8006118 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e040      	b.n	8006192 <HAL_RCC_ClockConfig+0x2de>
 8006110:	40022000 	.word	0x40022000
 8006114:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006124:	4b1d      	ldr	r3, [pc, #116]	; (800619c <HAL_RCC_ClockConfig+0x2e8>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	491a      	ldr	r1, [pc, #104]	; (800619c <HAL_RCC_ClockConfig+0x2e8>)
 8006132:	4313      	orrs	r3, r2
 8006134:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006142:	4b16      	ldr	r3, [pc, #88]	; (800619c <HAL_RCC_ClockConfig+0x2e8>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4912      	ldr	r1, [pc, #72]	; (800619c <HAL_RCC_ClockConfig+0x2e8>)
 8006152:	4313      	orrs	r3, r2
 8006154:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006156:	f000 f829 	bl	80061ac <HAL_RCC_GetSysClockFreq>
 800615a:	4601      	mov	r1, r0
 800615c:	4b0f      	ldr	r3, [pc, #60]	; (800619c <HAL_RCC_ClockConfig+0x2e8>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006164:	22f0      	movs	r2, #240	; 0xf0
 8006166:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	fa92 f2a2 	rbit	r2, r2
 800616e:	60fa      	str	r2, [r7, #12]
  return result;
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	fab2 f282 	clz	r2, r2
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	40d3      	lsrs	r3, r2
 800617a:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <HAL_RCC_ClockConfig+0x2ec>)
 800617c:	5cd3      	ldrb	r3, [r2, r3]
 800617e:	fa21 f303 	lsr.w	r3, r1, r3
 8006182:	4a08      	ldr	r2, [pc, #32]	; (80061a4 <HAL_RCC_ClockConfig+0x2f0>)
 8006184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006186:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <HAL_RCC_ClockConfig+0x2f4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe f884 	bl	8004298 <HAL_InitTick>
  
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3778      	adds	r7, #120	; 0x78
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	40021000 	.word	0x40021000
 80061a0:	0800b910 	.word	0x0800b910
 80061a4:	2000010c 	.word	0x2000010c
 80061a8:	20000110 	.word	0x20000110

080061ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b08b      	sub	sp, #44	; 0x2c
 80061b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	2300      	movs	r3, #0
 80061b8:	61bb      	str	r3, [r7, #24]
 80061ba:	2300      	movs	r3, #0
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80061c6:	4b29      	ldr	r3, [pc, #164]	; (800626c <HAL_RCC_GetSysClockFreq+0xc0>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f003 030c 	and.w	r3, r3, #12
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d002      	beq.n	80061dc <HAL_RCC_GetSysClockFreq+0x30>
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d003      	beq.n	80061e2 <HAL_RCC_GetSysClockFreq+0x36>
 80061da:	e03c      	b.n	8006256 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80061dc:	4b24      	ldr	r3, [pc, #144]	; (8006270 <HAL_RCC_GetSysClockFreq+0xc4>)
 80061de:	623b      	str	r3, [r7, #32]
      break;
 80061e0:	e03c      	b.n	800625c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80061e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80061ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	fa92 f2a2 	rbit	r2, r2
 80061f4:	607a      	str	r2, [r7, #4]
  return result;
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	fab2 f282 	clz	r2, r2
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	40d3      	lsrs	r3, r2
 8006200:	4a1c      	ldr	r2, [pc, #112]	; (8006274 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006202:	5cd3      	ldrb	r3, [r2, r3]
 8006204:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006206:	4b19      	ldr	r3, [pc, #100]	; (800626c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	220f      	movs	r2, #15
 8006210:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	fa92 f2a2 	rbit	r2, r2
 8006218:	60fa      	str	r2, [r7, #12]
  return result;
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	fab2 f282 	clz	r2, r2
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	40d3      	lsrs	r3, r2
 8006224:	4a14      	ldr	r2, [pc, #80]	; (8006278 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006226:	5cd3      	ldrb	r3, [r2, r3]
 8006228:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d008      	beq.n	8006246 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006234:	4a0e      	ldr	r2, [pc, #56]	; (8006270 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	fbb2 f2f3 	udiv	r2, r2, r3
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	fb02 f303 	mul.w	r3, r2, r3
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
 8006244:	e004      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	4a0c      	ldr	r2, [pc, #48]	; (800627c <HAL_RCC_GetSysClockFreq+0xd0>)
 800624a:	fb02 f303 	mul.w	r3, r2, r3
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	623b      	str	r3, [r7, #32]
      break;
 8006254:	e002      	b.n	800625c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006256:	4b06      	ldr	r3, [pc, #24]	; (8006270 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006258:	623b      	str	r3, [r7, #32]
      break;
 800625a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800625c:	6a3b      	ldr	r3, [r7, #32]
}
 800625e:	4618      	mov	r0, r3
 8006260:	372c      	adds	r7, #44	; 0x2c
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40021000 	.word	0x40021000
 8006270:	007a1200 	.word	0x007a1200
 8006274:	0800b928 	.word	0x0800b928
 8006278:	0800b938 	.word	0x0800b938
 800627c:	003d0900 	.word	0x003d0900

08006280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006284:	4b03      	ldr	r3, [pc, #12]	; (8006294 <HAL_RCC_GetHCLKFreq+0x14>)
 8006286:	681b      	ldr	r3, [r3, #0]
}
 8006288:	4618      	mov	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	2000010c 	.word	0x2000010c

08006298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800629e:	f7ff ffef 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 80062a2:	4601      	mov	r1, r0
 80062a4:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80062b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	fa92 f2a2 	rbit	r2, r2
 80062b8:	603a      	str	r2, [r7, #0]
  return result;
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	fab2 f282 	clz	r2, r2
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	40d3      	lsrs	r3, r2
 80062c4:	4a04      	ldr	r2, [pc, #16]	; (80062d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80062c6:	5cd3      	ldrb	r3, [r2, r3]
 80062c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40021000 	.word	0x40021000
 80062d8:	0800b920 	.word	0x0800b920

080062dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80062e2:	f7ff ffcd 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 80062e6:	4601      	mov	r1, r0
 80062e8:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80062f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80062f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	fa92 f2a2 	rbit	r2, r2
 80062fc:	603a      	str	r2, [r7, #0]
  return result;
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	fab2 f282 	clz	r2, r2
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	40d3      	lsrs	r3, r2
 8006308:	4a04      	ldr	r2, [pc, #16]	; (800631c <HAL_RCC_GetPCLK2Freq+0x40>)
 800630a:	5cd3      	ldrb	r3, [r2, r3]
 800630c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40021000 	.word	0x40021000
 800631c:	0800b920 	.word	0x0800b920

08006320 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b092      	sub	sp, #72	; 0x48
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006330:	2300      	movs	r3, #0
 8006332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 80d4 	beq.w	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006344:	4b4e      	ldr	r3, [pc, #312]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10e      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006350:	4b4b      	ldr	r3, [pc, #300]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	4a4a      	ldr	r2, [pc, #296]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635a:	61d3      	str	r3, [r2, #28]
 800635c:	4b48      	ldr	r3, [pc, #288]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006368:	2301      	movs	r3, #1
 800636a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636e:	4b45      	ldr	r3, [pc, #276]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d118      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800637a:	4b42      	ldr	r3, [pc, #264]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a41      	ldr	r2, [pc, #260]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006384:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006386:	f7fd ffcb 	bl	8004320 <HAL_GetTick>
 800638a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800638c:	e008      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800638e:	f7fd ffc7 	bl	8004320 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b64      	cmp	r3, #100	; 0x64
 800639a:	d901      	bls.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e169      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a0:	4b38      	ldr	r3, [pc, #224]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0f0      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063ac:	4b34      	ldr	r3, [pc, #208]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8084 	beq.w	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d07c      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063cc:	4b2c      	ldr	r3, [pc, #176]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	fa93 f3a3 	rbit	r3, r3
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063e6:	fab3 f383 	clz	r3, r3
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	4b26      	ldr	r3, [pc, #152]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	461a      	mov	r2, r3
 80063f6:	2301      	movs	r3, #1
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	fa93 f3a3 	rbit	r3, r3
 8006406:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800640a:	fab3 f383 	clz	r3, r3
 800640e:	b2db      	uxtb	r3, r3
 8006410:	461a      	mov	r2, r3
 8006412:	4b1d      	ldr	r3, [pc, #116]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	461a      	mov	r2, r3
 800641a:	2300      	movs	r3, #0
 800641c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800641e:	4a18      	ldr	r2, [pc, #96]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006422:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d04b      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642e:	f7fd ff77 	bl	8004320 <HAL_GetTick>
 8006432:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006434:	e00a      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006436:	f7fd ff73 	bl	8004320 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	f241 3288 	movw	r2, #5000	; 0x1388
 8006444:	4293      	cmp	r3, r2
 8006446:	d901      	bls.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e113      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800644c:	2302      	movs	r3, #2
 800644e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	fa93 f3a3 	rbit	r3, r3
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
 8006458:	2302      	movs	r3, #2
 800645a:	623b      	str	r3, [r7, #32]
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	fa93 f3a3 	rbit	r3, r3
 8006462:	61fb      	str	r3, [r7, #28]
  return result;
 8006464:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006466:	fab3 f383 	clz	r3, r3
 800646a:	b2db      	uxtb	r3, r3
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	b2db      	uxtb	r3, r3
 8006470:	f043 0302 	orr.w	r3, r3, #2
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d108      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800647a:	4b01      	ldr	r3, [pc, #4]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	e00d      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006480:	40021000 	.word	0x40021000
 8006484:	40007000 	.word	0x40007000
 8006488:	10908100 	.word	0x10908100
 800648c:	2302      	movs	r3, #2
 800648e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	fa93 f3a3 	rbit	r3, r3
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	4b78      	ldr	r3, [pc, #480]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	2202      	movs	r2, #2
 800649e:	613a      	str	r2, [r7, #16]
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	fa92 f2a2 	rbit	r2, r2
 80064a6:	60fa      	str	r2, [r7, #12]
  return result;
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	fab2 f282 	clz	r2, r2
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	f002 021f 	and.w	r2, r2, #31
 80064ba:	2101      	movs	r1, #1
 80064bc:	fa01 f202 	lsl.w	r2, r1, r2
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0b7      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80064c6:	4b6d      	ldr	r3, [pc, #436]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	496a      	ldr	r1, [pc, #424]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d105      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064e0:	4b66      	ldr	r3, [pc, #408]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	4a65      	ldr	r2, [pc, #404]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d008      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064f8:	4b60      	ldr	r3, [pc, #384]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fc:	f023 0203 	bic.w	r2, r3, #3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	495d      	ldr	r1, [pc, #372]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006506:	4313      	orrs	r3, r2
 8006508:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d008      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006516:	4b59      	ldr	r3, [pc, #356]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	4956      	ldr	r1, [pc, #344]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006524:	4313      	orrs	r3, r2
 8006526:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d008      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006534:	4b51      	ldr	r3, [pc, #324]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	494e      	ldr	r1, [pc, #312]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006542:	4313      	orrs	r3, r2
 8006544:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006552:	4b4a      	ldr	r3, [pc, #296]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	f023 0210 	bic.w	r2, r3, #16
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	4947      	ldr	r1, [pc, #284]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006560:	4313      	orrs	r3, r2
 8006562:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006570:	4b42      	ldr	r3, [pc, #264]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	493f      	ldr	r1, [pc, #252]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800657e:	4313      	orrs	r3, r2
 8006580:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d008      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800658e:	4b3b      	ldr	r3, [pc, #236]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006592:	f023 0220 	bic.w	r2, r3, #32
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	4938      	ldr	r1, [pc, #224]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800659c:	4313      	orrs	r3, r2
 800659e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0308 	and.w	r3, r3, #8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065ac:	4b33      	ldr	r3, [pc, #204]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	4930      	ldr	r1, [pc, #192]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0310 	and.w	r3, r3, #16
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d008      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065ca:	4b2c      	ldr	r3, [pc, #176]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	4929      	ldr	r1, [pc, #164]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d008      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065e8:	4b24      	ldr	r3, [pc, #144]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	4921      	ldr	r1, [pc, #132]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006602:	2b00      	cmp	r3, #0
 8006604:	d008      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006606:	4b1d      	ldr	r3, [pc, #116]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	491a      	ldr	r1, [pc, #104]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006614:	4313      	orrs	r3, r2
 8006616:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006624:	4b15      	ldr	r3, [pc, #84]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	4912      	ldr	r1, [pc, #72]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006632:	4313      	orrs	r3, r2
 8006634:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d008      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006642:	4b0e      	ldr	r3, [pc, #56]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664e:	490b      	ldr	r1, [pc, #44]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006650:	4313      	orrs	r3, r2
 8006652:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d008      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006660:	4b06      	ldr	r3, [pc, #24]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666c:	4903      	ldr	r1, [pc, #12]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800666e:	4313      	orrs	r3, r2
 8006670:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3748      	adds	r7, #72	; 0x48
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	40021000 	.word	0x40021000

08006680 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e073      	b.n	800677e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	7f5b      	ldrb	r3, [r3, #29]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d105      	bne.n	80066ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fd f996 	bl	80039d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f003 0310 	and.w	r3, r3, #16
 80066bc:	2b10      	cmp	r3, #16
 80066be:	d055      	beq.n	800676c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	22ca      	movs	r2, #202	; 0xca
 80066c6:	625a      	str	r2, [r3, #36]	; 0x24
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2253      	movs	r2, #83	; 0x53
 80066ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fa49 	bl	8006b68 <RTC_EnterInitMode>
 80066d6:	4603      	mov	r3, r0
 80066d8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d12c      	bne.n	800673a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6812      	ldr	r2, [r2, #0]
 80066ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6899      	ldr	r1, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	68d2      	ldr	r2, [r2, #12]
 800671a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6919      	ldr	r1, [r3, #16]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	041a      	lsls	r2, r3, #16
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fa50 	bl	8006bd6 <RTC_ExitInitMode>
 8006736:	4603      	mov	r3, r0
 8006738:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d110      	bne.n	8006762 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800674e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	22ff      	movs	r2, #255	; 0xff
 8006768:	625a      	str	r2, [r3, #36]	; 0x24
 800676a:	e001      	b.n	8006770 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006786:	b590      	push	{r4, r7, lr}
 8006788:	b087      	sub	sp, #28
 800678a:	af00      	add	r7, sp, #0
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	7f1b      	ldrb	r3, [r3, #28]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_RTC_SetTime+0x1c>
 800679e:	2302      	movs	r3, #2
 80067a0:	e087      	b.n	80068b2 <HAL_RTC_SetTime+0x12c>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2201      	movs	r2, #1
 80067a6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2202      	movs	r2, #2
 80067ac:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d126      	bne.n	8006802 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d102      	bne.n	80067c8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2200      	movs	r2, #0
 80067c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fa27 	bl	8006c20 <RTC_ByteToBcd2>
 80067d2:	4603      	mov	r3, r0
 80067d4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fa20 	bl	8006c20 <RTC_ByteToBcd2>
 80067e0:	4603      	mov	r3, r0
 80067e2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80067e4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	789b      	ldrb	r3, [r3, #2]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fa18 	bl	8006c20 <RTC_ByteToBcd2>
 80067f0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80067f2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	78db      	ldrb	r3, [r3, #3]
 80067fa:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	e018      	b.n	8006834 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680c:	2b00      	cmp	r3, #0
 800680e:	d102      	bne.n	8006816 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2200      	movs	r2, #0
 8006814:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	785b      	ldrb	r3, [r3, #1]
 8006820:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006822:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006828:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	78db      	ldrb	r3, [r3, #3]
 800682e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	22ca      	movs	r2, #202	; 0xca
 800683a:	625a      	str	r2, [r3, #36]	; 0x24
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2253      	movs	r2, #83	; 0x53
 8006842:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f98f 	bl	8006b68 <RTC_EnterInitMode>
 800684a:	4603      	mov	r3, r0
 800684c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800684e:	7cfb      	ldrb	r3, [r7, #19]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d120      	bne.n	8006896 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800685e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006862:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006872:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6899      	ldr	r1, [r3, #8]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	431a      	orrs	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f9a2 	bl	8006bd6 <RTC_ExitInitMode>
 8006892:	4603      	mov	r3, r0
 8006894:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006896:	7cfb      	ldrb	r3, [r7, #19]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2201      	movs	r2, #1
 80068a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	22ff      	movs	r2, #255	; 0xff
 80068a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	771a      	strb	r2, [r3, #28]

  return status;
 80068b0:	7cfb      	ldrb	r3, [r7, #19]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd90      	pop	{r4, r7, pc}

080068ba <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b086      	sub	sp, #24
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80068ec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80068f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	0c1b      	lsrs	r3, r3, #16
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	0a1b      	lsrs	r3, r3, #8
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800690c:	b2da      	uxtb	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691a:	b2da      	uxtb	r2, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	0d9b      	lsrs	r3, r3, #22
 8006924:	b2db      	uxtb	r3, r3
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	b2da      	uxtb	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d11a      	bne.n	800696c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f000 f98e 	bl	8006c5c <RTC_Bcd2ToByte>
 8006940:	4603      	mov	r3, r0
 8006942:	461a      	mov	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	785b      	ldrb	r3, [r3, #1]
 800694c:	4618      	mov	r0, r3
 800694e:	f000 f985 	bl	8006c5c <RTC_Bcd2ToByte>
 8006952:	4603      	mov	r3, r0
 8006954:	461a      	mov	r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	789b      	ldrb	r3, [r3, #2]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 f97c 	bl	8006c5c <RTC_Bcd2ToByte>
 8006964:	4603      	mov	r3, r0
 8006966:	461a      	mov	r2, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006976:	b590      	push	{r4, r7, lr}
 8006978:	b087      	sub	sp, #28
 800697a:	af00      	add	r7, sp, #0
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	7f1b      	ldrb	r3, [r3, #28]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_RTC_SetDate+0x1c>
 800698e:	2302      	movs	r3, #2
 8006990:	e071      	b.n	8006a76 <HAL_RTC_SetDate+0x100>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2202      	movs	r2, #2
 800699c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10e      	bne.n	80069c2 <HAL_RTC_SetDate+0x4c>
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	785b      	ldrb	r3, [r3, #1]
 80069a8:	f003 0310 	and.w	r3, r3, #16
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	f023 0310 	bic.w	r3, r3, #16
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	330a      	adds	r3, #10
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d11c      	bne.n	8006a02 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	78db      	ldrb	r3, [r3, #3]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 f927 	bl	8006c20 <RTC_ByteToBcd2>
 80069d2:	4603      	mov	r3, r0
 80069d4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	785b      	ldrb	r3, [r3, #1]
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 f920 	bl	8006c20 <RTC_ByteToBcd2>
 80069e0:	4603      	mov	r3, r0
 80069e2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069e4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	789b      	ldrb	r3, [r3, #2]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 f918 	bl	8006c20 <RTC_ByteToBcd2>
 80069f0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069f2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069fc:	4313      	orrs	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	e00e      	b.n	8006a20 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	78db      	ldrb	r3, [r3, #3]
 8006a06:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	785b      	ldrb	r3, [r3, #1]
 8006a0c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a0e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006a14:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	22ca      	movs	r2, #202	; 0xca
 8006a26:	625a      	str	r2, [r3, #36]	; 0x24
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2253      	movs	r2, #83	; 0x53
 8006a2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 f899 	bl	8006b68 <RTC_EnterInitMode>
 8006a36:	4603      	mov	r3, r0
 8006a38:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006a3a:	7cfb      	ldrb	r3, [r7, #19]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10c      	bne.n	8006a5a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a4a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a4e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 f8c0 	bl	8006bd6 <RTC_ExitInitMode>
 8006a56:	4603      	mov	r3, r0
 8006a58:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006a5a:	7cfb      	ldrb	r3, [r7, #19]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2201      	movs	r2, #1
 8006a64:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	22ff      	movs	r2, #255	; 0xff
 8006a6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	771a      	strb	r2, [r3, #28]

  return status;
 8006a74:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd90      	pop	{r4, r7, pc}

08006a7e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b086      	sub	sp, #24
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	0c1b      	lsrs	r3, r3, #16
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	0a1b      	lsrs	r3, r3, #8
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f003 031f 	and.w	r3, r3, #31
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	0b5b      	lsrs	r3, r3, #13
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d11a      	bne.n	8006b12 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	78db      	ldrb	r3, [r3, #3]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 f8bb 	bl	8006c5c <RTC_Bcd2ToByte>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	461a      	mov	r2, r3
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	785b      	ldrb	r3, [r3, #1]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 f8b2 	bl	8006c5c <RTC_Bcd2ToByte>
 8006af8:	4603      	mov	r3, r0
 8006afa:	461a      	mov	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	789b      	ldrb	r3, [r3, #2]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 f8a9 	bl	8006c5c <RTC_Bcd2ToByte>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a0d      	ldr	r2, [pc, #52]	; (8006b64 <HAL_RTC_WaitForSynchro+0x48>)
 8006b2e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b30:	f7fd fbf6 	bl	8004320 <HAL_GetTick>
 8006b34:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b36:	e009      	b.n	8006b4c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b38:	f7fd fbf2 	bl	8004320 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b46:	d901      	bls.n	8006b4c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e007      	b.n	8006b5c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0ee      	beq.n	8006b38 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	0001ff5f 	.word	0x0001ff5f

08006b68 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d122      	bne.n	8006bcc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b94:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b96:	f7fd fbc3 	bl	8004320 <HAL_GetTick>
 8006b9a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006b9c:	e00c      	b.n	8006bb8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b9e:	f7fd fbbf 	bl	8004320 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bac:	d904      	bls.n	8006bb8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <RTC_EnterInitMode+0x64>
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d1e8      	bne.n	8006b9e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bf0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff ff8b 	bl	8006b1c <HAL_RTC_WaitForSynchro>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d004      	beq.n	8006c16 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2204      	movs	r2, #4
 8006c10:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006c2e:	e005      	b.n	8006c3c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3301      	adds	r3, #1
 8006c34:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	3b0a      	subs	r3, #10
 8006c3a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	2b09      	cmp	r3, #9
 8006c40:	d8f6      	bhi.n	8006c30 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	b2db      	uxtb	r3, r3
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4603      	mov	r3, r0
 8006c64:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	091b      	lsrs	r3, r3, #4
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	461a      	mov	r2, r3
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	4413      	add	r3, r2
 8006c8a:	b2db      	uxtb	r3, r3
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e09d      	b.n	8006de6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d108      	bne.n	8006cc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cba:	d009      	beq.n	8006cd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	61da      	str	r2, [r3, #28]
 8006cc2:	e005      	b.n	8006cd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fc fe9a 	bl	8003a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d10:	d902      	bls.n	8006d18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	e002      	b.n	8006d1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006d26:	d007      	beq.n	8006d38 <HAL_SPI_Init+0xa0>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d30:	d002      	beq.n	8006d38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7a:	ea42 0103 	orr.w	r1, r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	0c1b      	lsrs	r3, r3, #16
 8006d94:	f003 0204 	and.w	r2, r3, #4
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006db4:	ea42 0103 	orr.w	r1, r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69da      	ldr	r2, [r3, #28]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e049      	b.n	8006e94 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d106      	bne.n	8006e1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7fc fe47 	bl	8003aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	3304      	adds	r3, #4
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	f000 fd27 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d001      	beq.n	8006eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e04a      	b.n	8006f4a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68da      	ldr	r2, [r3, #12]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f042 0201 	orr.w	r2, r2, #1
 8006eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a21      	ldr	r2, [pc, #132]	; (8006f58 <HAL_TIM_Base_Start_IT+0xbc>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d018      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x6c>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ede:	d013      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x6c>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1d      	ldr	r2, [pc, #116]	; (8006f5c <HAL_TIM_Base_Start_IT+0xc0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00e      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x6c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1c      	ldr	r2, [pc, #112]	; (8006f60 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d009      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x6c>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a1a      	ldr	r2, [pc, #104]	; (8006f64 <HAL_TIM_Base_Start_IT+0xc8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d004      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x6c>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d115      	bne.n	8006f34 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	4b17      	ldr	r3, [pc, #92]	; (8006f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b06      	cmp	r3, #6
 8006f18:	d015      	beq.n	8006f46 <HAL_TIM_Base_Start_IT+0xaa>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f20:	d011      	beq.n	8006f46 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0201 	orr.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f32:	e008      	b.n	8006f46 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0201 	orr.w	r2, r2, #1
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	e000      	b.n	8006f48 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40012c00 	.word	0x40012c00
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	40013400 	.word	0x40013400
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	00010007 	.word	0x00010007

08006f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e049      	b.n	8007016 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f841 	bl	800701e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4619      	mov	r1, r3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	f000 fc66 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
	...

08007034 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d109      	bne.n	8007058 <HAL_TIM_PWM_Start+0x24>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b01      	cmp	r3, #1
 800704e:	bf14      	ite	ne
 8007050:	2301      	movne	r3, #1
 8007052:	2300      	moveq	r3, #0
 8007054:	b2db      	uxtb	r3, r3
 8007056:	e03c      	b.n	80070d2 <HAL_TIM_PWM_Start+0x9e>
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2b04      	cmp	r3, #4
 800705c:	d109      	bne.n	8007072 <HAL_TIM_PWM_Start+0x3e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b01      	cmp	r3, #1
 8007068:	bf14      	ite	ne
 800706a:	2301      	movne	r3, #1
 800706c:	2300      	moveq	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	e02f      	b.n	80070d2 <HAL_TIM_PWM_Start+0x9e>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b08      	cmp	r3, #8
 8007076:	d109      	bne.n	800708c <HAL_TIM_PWM_Start+0x58>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b01      	cmp	r3, #1
 8007082:	bf14      	ite	ne
 8007084:	2301      	movne	r3, #1
 8007086:	2300      	moveq	r3, #0
 8007088:	b2db      	uxtb	r3, r3
 800708a:	e022      	b.n	80070d2 <HAL_TIM_PWM_Start+0x9e>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b0c      	cmp	r3, #12
 8007090:	d109      	bne.n	80070a6 <HAL_TIM_PWM_Start+0x72>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b01      	cmp	r3, #1
 800709c:	bf14      	ite	ne
 800709e:	2301      	movne	r3, #1
 80070a0:	2300      	moveq	r3, #0
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	e015      	b.n	80070d2 <HAL_TIM_PWM_Start+0x9e>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b10      	cmp	r3, #16
 80070aa:	d109      	bne.n	80070c0 <HAL_TIM_PWM_Start+0x8c>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	bf14      	ite	ne
 80070b8:	2301      	movne	r3, #1
 80070ba:	2300      	moveq	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	e008      	b.n	80070d2 <HAL_TIM_PWM_Start+0x9e>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	bf14      	ite	ne
 80070cc:	2301      	movne	r3, #1
 80070ce:	2300      	moveq	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e097      	b.n	800720a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d104      	bne.n	80070ea <HAL_TIM_PWM_Start+0xb6>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070e8:	e023      	b.n	8007132 <HAL_TIM_PWM_Start+0xfe>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_PWM_Start+0xc6>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070f8:	e01b      	b.n	8007132 <HAL_TIM_PWM_Start+0xfe>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d104      	bne.n	800710a <HAL_TIM_PWM_Start+0xd6>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007108:	e013      	b.n	8007132 <HAL_TIM_PWM_Start+0xfe>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b0c      	cmp	r3, #12
 800710e:	d104      	bne.n	800711a <HAL_TIM_PWM_Start+0xe6>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007118:	e00b      	b.n	8007132 <HAL_TIM_PWM_Start+0xfe>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b10      	cmp	r3, #16
 800711e:	d104      	bne.n	800712a <HAL_TIM_PWM_Start+0xf6>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007128:	e003      	b.n	8007132 <HAL_TIM_PWM_Start+0xfe>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2202      	movs	r2, #2
 800712e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2201      	movs	r2, #1
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 ffa0 	bl	8008080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a33      	ldr	r2, [pc, #204]	; (8007214 <HAL_TIM_PWM_Start+0x1e0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <HAL_TIM_PWM_Start+0x13e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a32      	ldr	r2, [pc, #200]	; (8007218 <HAL_TIM_PWM_Start+0x1e4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00e      	beq.n	8007172 <HAL_TIM_PWM_Start+0x13e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a30      	ldr	r2, [pc, #192]	; (800721c <HAL_TIM_PWM_Start+0x1e8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d009      	beq.n	8007172 <HAL_TIM_PWM_Start+0x13e>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a2f      	ldr	r2, [pc, #188]	; (8007220 <HAL_TIM_PWM_Start+0x1ec>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d004      	beq.n	8007172 <HAL_TIM_PWM_Start+0x13e>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a2d      	ldr	r2, [pc, #180]	; (8007224 <HAL_TIM_PWM_Start+0x1f0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d101      	bne.n	8007176 <HAL_TIM_PWM_Start+0x142>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <HAL_TIM_PWM_Start+0x144>
 8007176:	2300      	movs	r3, #0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d007      	beq.n	800718c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800718a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a20      	ldr	r2, [pc, #128]	; (8007214 <HAL_TIM_PWM_Start+0x1e0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d018      	beq.n	80071c8 <HAL_TIM_PWM_Start+0x194>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719e:	d013      	beq.n	80071c8 <HAL_TIM_PWM_Start+0x194>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a20      	ldr	r2, [pc, #128]	; (8007228 <HAL_TIM_PWM_Start+0x1f4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d00e      	beq.n	80071c8 <HAL_TIM_PWM_Start+0x194>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a1f      	ldr	r2, [pc, #124]	; (800722c <HAL_TIM_PWM_Start+0x1f8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d009      	beq.n	80071c8 <HAL_TIM_PWM_Start+0x194>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a17      	ldr	r2, [pc, #92]	; (8007218 <HAL_TIM_PWM_Start+0x1e4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d004      	beq.n	80071c8 <HAL_TIM_PWM_Start+0x194>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a16      	ldr	r2, [pc, #88]	; (800721c <HAL_TIM_PWM_Start+0x1e8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d115      	bne.n	80071f4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	4b18      	ldr	r3, [pc, #96]	; (8007230 <HAL_TIM_PWM_Start+0x1fc>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b06      	cmp	r3, #6
 80071d8:	d015      	beq.n	8007206 <HAL_TIM_PWM_Start+0x1d2>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e0:	d011      	beq.n	8007206 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f042 0201 	orr.w	r2, r2, #1
 80071f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f2:	e008      	b.n	8007206 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0201 	orr.w	r2, r2, #1
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	e000      	b.n	8007208 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007206:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40012c00 	.word	0x40012c00
 8007218:	40013400 	.word	0x40013400
 800721c:	40014000 	.word	0x40014000
 8007220:	40014400 	.word	0x40014400
 8007224:	40014800 	.word	0x40014800
 8007228:	40000400 	.word	0x40000400
 800722c:	40000800 	.word	0x40000800
 8007230:	00010007 	.word	0x00010007

08007234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b02      	cmp	r3, #2
 8007248:	d122      	bne.n	8007290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d11b      	bne.n	8007290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0202 	mvn.w	r2, #2
 8007260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fae3 	bl	8007842 <HAL_TIM_IC_CaptureCallback>
 800727c:	e005      	b.n	800728a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fad5 	bl	800782e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fae6 	bl	8007856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b04      	cmp	r3, #4
 800729c:	d122      	bne.n	80072e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d11b      	bne.n	80072e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0204 	mvn.w	r2, #4
 80072b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2202      	movs	r2, #2
 80072ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fab9 	bl	8007842 <HAL_TIM_IC_CaptureCallback>
 80072d0:	e005      	b.n	80072de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 faab 	bl	800782e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fabc 	bl	8007856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b08      	cmp	r3, #8
 80072f0:	d122      	bne.n	8007338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d11b      	bne.n	8007338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0208 	mvn.w	r2, #8
 8007308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2204      	movs	r2, #4
 800730e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa8f 	bl	8007842 <HAL_TIM_IC_CaptureCallback>
 8007324:	e005      	b.n	8007332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fa81 	bl	800782e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fa92 	bl	8007856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0310 	and.w	r3, r3, #16
 8007342:	2b10      	cmp	r3, #16
 8007344:	d122      	bne.n	800738c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b10      	cmp	r3, #16
 8007352:	d11b      	bne.n	800738c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0210 	mvn.w	r2, #16
 800735c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2208      	movs	r2, #8
 8007362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa65 	bl	8007842 <HAL_TIM_IC_CaptureCallback>
 8007378:	e005      	b.n	8007386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa57 	bl	800782e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fa68 	bl	8007856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b01      	cmp	r3, #1
 8007398:	d10e      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d107      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0201 	mvn.w	r2, #1
 80073b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7fa ff52 	bl	800225c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c2:	2b80      	cmp	r3, #128	; 0x80
 80073c4:	d10e      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d0:	2b80      	cmp	r3, #128	; 0x80
 80073d2:	d107      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fefe 	bl	80081e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f2:	d10e      	bne.n	8007412 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fe:	2b80      	cmp	r3, #128	; 0x80
 8007400:	d107      	bne.n	8007412 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800740a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fef1 	bl	80081f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741c:	2b40      	cmp	r3, #64	; 0x40
 800741e:	d10e      	bne.n	800743e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742a:	2b40      	cmp	r3, #64	; 0x40
 800742c:	d107      	bne.n	800743e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fa16 	bl	800786a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b20      	cmp	r3, #32
 800744a:	d10e      	bne.n	800746a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b20      	cmp	r3, #32
 8007458:	d107      	bne.n	800746a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f06f 0220 	mvn.w	r2, #32
 8007462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 feb1 	bl	80081cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800748e:	2302      	movs	r3, #2
 8007490:	e0ff      	b.n	8007692 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b14      	cmp	r3, #20
 800749e:	f200 80f0 	bhi.w	8007682 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074fd 	.word	0x080074fd
 80074ac:	08007683 	.word	0x08007683
 80074b0:	08007683 	.word	0x08007683
 80074b4:	08007683 	.word	0x08007683
 80074b8:	0800753d 	.word	0x0800753d
 80074bc:	08007683 	.word	0x08007683
 80074c0:	08007683 	.word	0x08007683
 80074c4:	08007683 	.word	0x08007683
 80074c8:	0800757f 	.word	0x0800757f
 80074cc:	08007683 	.word	0x08007683
 80074d0:	08007683 	.word	0x08007683
 80074d4:	08007683 	.word	0x08007683
 80074d8:	080075bf 	.word	0x080075bf
 80074dc:	08007683 	.word	0x08007683
 80074e0:	08007683 	.word	0x08007683
 80074e4:	08007683 	.word	0x08007683
 80074e8:	08007601 	.word	0x08007601
 80074ec:	08007683 	.word	0x08007683
 80074f0:	08007683 	.word	0x08007683
 80074f4:	08007683 	.word	0x08007683
 80074f8:	08007641 	.word	0x08007641
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68b9      	ldr	r1, [r7, #8]
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fa4c 	bl	80079a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699a      	ldr	r2, [r3, #24]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0208 	orr.w	r2, r2, #8
 8007516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699a      	ldr	r2, [r3, #24]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0204 	bic.w	r2, r2, #4
 8007526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6999      	ldr	r1, [r3, #24]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	691a      	ldr	r2, [r3, #16]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	619a      	str	r2, [r3, #24]
      break;
 800753a:	e0a5      	b.n	8007688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68b9      	ldr	r1, [r7, #8]
 8007542:	4618      	mov	r0, r3
 8007544:	f000 fabc 	bl	8007ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6999      	ldr	r1, [r3, #24]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	021a      	lsls	r2, r3, #8
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	619a      	str	r2, [r3, #24]
      break;
 800757c:	e084      	b.n	8007688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fb25 	bl	8007bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69da      	ldr	r2, [r3, #28]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f042 0208 	orr.w	r2, r2, #8
 8007598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69da      	ldr	r2, [r3, #28]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0204 	bic.w	r2, r2, #4
 80075a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	69d9      	ldr	r1, [r3, #28]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	61da      	str	r2, [r3, #28]
      break;
 80075bc:	e064      	b.n	8007688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68b9      	ldr	r1, [r7, #8]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 fb8d 	bl	8007ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69da      	ldr	r2, [r3, #28]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69da      	ldr	r2, [r3, #28]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69d9      	ldr	r1, [r3, #28]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	021a      	lsls	r2, r3, #8
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	61da      	str	r2, [r3, #28]
      break;
 80075fe:	e043      	b.n	8007688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fbd6 	bl	8007db8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0208 	orr.w	r2, r2, #8
 800761a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0204 	bic.w	r2, r2, #4
 800762a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	691a      	ldr	r2, [r3, #16]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800763e:	e023      	b.n	8007688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fc1a 	bl	8007e80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800765a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800766a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	021a      	lsls	r2, r3, #8
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007680:	e002      	b.n	8007688 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]
      break;
 8007686:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007690:	7dfb      	ldrb	r3, [r7, #23]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop

0800769c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d101      	bne.n	80076b8 <HAL_TIM_ConfigClockSource+0x1c>
 80076b4:	2302      	movs	r3, #2
 80076b6:	e0b6      	b.n	8007826 <HAL_TIM_ConfigClockSource+0x18a>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f4:	d03e      	beq.n	8007774 <HAL_TIM_ConfigClockSource+0xd8>
 80076f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076fa:	f200 8087 	bhi.w	800780c <HAL_TIM_ConfigClockSource+0x170>
 80076fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007702:	f000 8086 	beq.w	8007812 <HAL_TIM_ConfigClockSource+0x176>
 8007706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800770a:	d87f      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x170>
 800770c:	2b70      	cmp	r3, #112	; 0x70
 800770e:	d01a      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0xaa>
 8007710:	2b70      	cmp	r3, #112	; 0x70
 8007712:	d87b      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x170>
 8007714:	2b60      	cmp	r3, #96	; 0x60
 8007716:	d050      	beq.n	80077ba <HAL_TIM_ConfigClockSource+0x11e>
 8007718:	2b60      	cmp	r3, #96	; 0x60
 800771a:	d877      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x170>
 800771c:	2b50      	cmp	r3, #80	; 0x50
 800771e:	d03c      	beq.n	800779a <HAL_TIM_ConfigClockSource+0xfe>
 8007720:	2b50      	cmp	r3, #80	; 0x50
 8007722:	d873      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x170>
 8007724:	2b40      	cmp	r3, #64	; 0x40
 8007726:	d058      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x13e>
 8007728:	2b40      	cmp	r3, #64	; 0x40
 800772a:	d86f      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x170>
 800772c:	2b30      	cmp	r3, #48	; 0x30
 800772e:	d064      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x15e>
 8007730:	2b30      	cmp	r3, #48	; 0x30
 8007732:	d86b      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x170>
 8007734:	2b20      	cmp	r3, #32
 8007736:	d060      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x15e>
 8007738:	2b20      	cmp	r3, #32
 800773a:	d867      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x170>
 800773c:	2b00      	cmp	r3, #0
 800773e:	d05c      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x15e>
 8007740:	2b10      	cmp	r3, #16
 8007742:	d05a      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x15e>
 8007744:	e062      	b.n	800780c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	6899      	ldr	r1, [r3, #8]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f000 fc73 	bl	8008040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	609a      	str	r2, [r3, #8]
      break;
 8007772:	e04f      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6818      	ldr	r0, [r3, #0]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	6899      	ldr	r1, [r3, #8]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f000 fc5c 	bl	8008040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007796:	609a      	str	r2, [r3, #8]
      break;
 8007798:	e03c      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	6859      	ldr	r1, [r3, #4]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	461a      	mov	r2, r3
 80077a8:	f000 fbd0 	bl	8007f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2150      	movs	r1, #80	; 0x50
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 fc29 	bl	800800a <TIM_ITRx_SetConfig>
      break;
 80077b8:	e02c      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6818      	ldr	r0, [r3, #0]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	6859      	ldr	r1, [r3, #4]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	461a      	mov	r2, r3
 80077c8:	f000 fbef 	bl	8007faa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2160      	movs	r1, #96	; 0x60
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 fc19 	bl	800800a <TIM_ITRx_SetConfig>
      break;
 80077d8:	e01c      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	6859      	ldr	r1, [r3, #4]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	461a      	mov	r2, r3
 80077e8:	f000 fbb0 	bl	8007f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2140      	movs	r1, #64	; 0x40
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fc09 	bl	800800a <TIM_ITRx_SetConfig>
      break;
 80077f8:	e00c      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4619      	mov	r1, r3
 8007804:	4610      	mov	r0, r2
 8007806:	f000 fc00 	bl	800800a <TIM_ITRx_SetConfig>
      break;
 800780a:	e003      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	73fb      	strb	r3, [r7, #15]
      break;
 8007810:	e000      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
	...

08007880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a3c      	ldr	r2, [pc, #240]	; (8007984 <TIM_Base_SetConfig+0x104>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00f      	beq.n	80078b8 <TIM_Base_SetConfig+0x38>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789e:	d00b      	beq.n	80078b8 <TIM_Base_SetConfig+0x38>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a39      	ldr	r2, [pc, #228]	; (8007988 <TIM_Base_SetConfig+0x108>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d007      	beq.n	80078b8 <TIM_Base_SetConfig+0x38>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a38      	ldr	r2, [pc, #224]	; (800798c <TIM_Base_SetConfig+0x10c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d003      	beq.n	80078b8 <TIM_Base_SetConfig+0x38>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a37      	ldr	r2, [pc, #220]	; (8007990 <TIM_Base_SetConfig+0x110>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d108      	bne.n	80078ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a2d      	ldr	r2, [pc, #180]	; (8007984 <TIM_Base_SetConfig+0x104>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d01b      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d8:	d017      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a2a      	ldr	r2, [pc, #168]	; (8007988 <TIM_Base_SetConfig+0x108>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a29      	ldr	r2, [pc, #164]	; (800798c <TIM_Base_SetConfig+0x10c>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00f      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a28      	ldr	r2, [pc, #160]	; (8007990 <TIM_Base_SetConfig+0x110>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00b      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a27      	ldr	r2, [pc, #156]	; (8007994 <TIM_Base_SetConfig+0x114>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d007      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a26      	ldr	r2, [pc, #152]	; (8007998 <TIM_Base_SetConfig+0x118>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d003      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a25      	ldr	r2, [pc, #148]	; (800799c <TIM_Base_SetConfig+0x11c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d108      	bne.n	800791c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a10      	ldr	r2, [pc, #64]	; (8007984 <TIM_Base_SetConfig+0x104>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00f      	beq.n	8007968 <TIM_Base_SetConfig+0xe8>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a11      	ldr	r2, [pc, #68]	; (8007990 <TIM_Base_SetConfig+0x110>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00b      	beq.n	8007968 <TIM_Base_SetConfig+0xe8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a10      	ldr	r2, [pc, #64]	; (8007994 <TIM_Base_SetConfig+0x114>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d007      	beq.n	8007968 <TIM_Base_SetConfig+0xe8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a0f      	ldr	r2, [pc, #60]	; (8007998 <TIM_Base_SetConfig+0x118>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_Base_SetConfig+0xe8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a0e      	ldr	r2, [pc, #56]	; (800799c <TIM_Base_SetConfig+0x11c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d103      	bne.n	8007970 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	615a      	str	r2, [r3, #20]
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40012c00 	.word	0x40012c00
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40013400 	.word	0x40013400
 8007994:	40014000 	.word	0x40014000
 8007998:	40014400 	.word	0x40014400
 800799c:	40014800 	.word	0x40014800

080079a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	f023 0201 	bic.w	r2, r3, #1
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0303 	bic.w	r3, r3, #3
 80079da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f023 0302 	bic.w	r3, r3, #2
 80079ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a2c      	ldr	r2, [pc, #176]	; (8007aac <TIM_OC1_SetConfig+0x10c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00f      	beq.n	8007a20 <TIM_OC1_SetConfig+0x80>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a2b      	ldr	r2, [pc, #172]	; (8007ab0 <TIM_OC1_SetConfig+0x110>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00b      	beq.n	8007a20 <TIM_OC1_SetConfig+0x80>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a2a      	ldr	r2, [pc, #168]	; (8007ab4 <TIM_OC1_SetConfig+0x114>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d007      	beq.n	8007a20 <TIM_OC1_SetConfig+0x80>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a29      	ldr	r2, [pc, #164]	; (8007ab8 <TIM_OC1_SetConfig+0x118>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d003      	beq.n	8007a20 <TIM_OC1_SetConfig+0x80>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a28      	ldr	r2, [pc, #160]	; (8007abc <TIM_OC1_SetConfig+0x11c>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d10c      	bne.n	8007a3a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f023 0308 	bic.w	r3, r3, #8
 8007a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f023 0304 	bic.w	r3, r3, #4
 8007a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a1b      	ldr	r2, [pc, #108]	; (8007aac <TIM_OC1_SetConfig+0x10c>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d00f      	beq.n	8007a62 <TIM_OC1_SetConfig+0xc2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a1a      	ldr	r2, [pc, #104]	; (8007ab0 <TIM_OC1_SetConfig+0x110>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00b      	beq.n	8007a62 <TIM_OC1_SetConfig+0xc2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a19      	ldr	r2, [pc, #100]	; (8007ab4 <TIM_OC1_SetConfig+0x114>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d007      	beq.n	8007a62 <TIM_OC1_SetConfig+0xc2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a18      	ldr	r2, [pc, #96]	; (8007ab8 <TIM_OC1_SetConfig+0x118>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d003      	beq.n	8007a62 <TIM_OC1_SetConfig+0xc2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a17      	ldr	r2, [pc, #92]	; (8007abc <TIM_OC1_SetConfig+0x11c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d111      	bne.n	8007a86 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	621a      	str	r2, [r3, #32]
}
 8007aa0:	bf00      	nop
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	40012c00 	.word	0x40012c00
 8007ab0:	40013400 	.word	0x40013400
 8007ab4:	40014000 	.word	0x40014000
 8007ab8:	40014400 	.word	0x40014400
 8007abc:	40014800 	.word	0x40014800

08007ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	f023 0210 	bic.w	r2, r3, #16
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f023 0320 	bic.w	r3, r3, #32
 8007b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a28      	ldr	r2, [pc, #160]	; (8007bc0 <TIM_OC2_SetConfig+0x100>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d003      	beq.n	8007b2c <TIM_OC2_SetConfig+0x6c>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a27      	ldr	r2, [pc, #156]	; (8007bc4 <TIM_OC2_SetConfig+0x104>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d10d      	bne.n	8007b48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a1d      	ldr	r2, [pc, #116]	; (8007bc0 <TIM_OC2_SetConfig+0x100>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00f      	beq.n	8007b70 <TIM_OC2_SetConfig+0xb0>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a1c      	ldr	r2, [pc, #112]	; (8007bc4 <TIM_OC2_SetConfig+0x104>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d00b      	beq.n	8007b70 <TIM_OC2_SetConfig+0xb0>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a1b      	ldr	r2, [pc, #108]	; (8007bc8 <TIM_OC2_SetConfig+0x108>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d007      	beq.n	8007b70 <TIM_OC2_SetConfig+0xb0>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a1a      	ldr	r2, [pc, #104]	; (8007bcc <TIM_OC2_SetConfig+0x10c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d003      	beq.n	8007b70 <TIM_OC2_SetConfig+0xb0>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a19      	ldr	r2, [pc, #100]	; (8007bd0 <TIM_OC2_SetConfig+0x110>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d113      	bne.n	8007b98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b76:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b7e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	621a      	str	r2, [r3, #32]
}
 8007bb2:	bf00      	nop
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40012c00 	.word	0x40012c00
 8007bc4:	40013400 	.word	0x40013400
 8007bc8:	40014000 	.word	0x40014000
 8007bcc:	40014400 	.word	0x40014400
 8007bd0:	40014800 	.word	0x40014800

08007bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0303 	bic.w	r3, r3, #3
 8007c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a27      	ldr	r2, [pc, #156]	; (8007cd0 <TIM_OC3_SetConfig+0xfc>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d003      	beq.n	8007c3e <TIM_OC3_SetConfig+0x6a>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a26      	ldr	r2, [pc, #152]	; (8007cd4 <TIM_OC3_SetConfig+0x100>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d10d      	bne.n	8007c5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	021b      	lsls	r3, r3, #8
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c58:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a1c      	ldr	r2, [pc, #112]	; (8007cd0 <TIM_OC3_SetConfig+0xfc>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00f      	beq.n	8007c82 <TIM_OC3_SetConfig+0xae>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a1b      	ldr	r2, [pc, #108]	; (8007cd4 <TIM_OC3_SetConfig+0x100>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00b      	beq.n	8007c82 <TIM_OC3_SetConfig+0xae>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a1a      	ldr	r2, [pc, #104]	; (8007cd8 <TIM_OC3_SetConfig+0x104>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d007      	beq.n	8007c82 <TIM_OC3_SetConfig+0xae>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a19      	ldr	r2, [pc, #100]	; (8007cdc <TIM_OC3_SetConfig+0x108>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d003      	beq.n	8007c82 <TIM_OC3_SetConfig+0xae>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a18      	ldr	r2, [pc, #96]	; (8007ce0 <TIM_OC3_SetConfig+0x10c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d113      	bne.n	8007caa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	011b      	lsls	r3, r3, #4
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	621a      	str	r2, [r3, #32]
}
 8007cc4:	bf00      	nop
 8007cc6:	371c      	adds	r7, #28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	40012c00 	.word	0x40012c00
 8007cd4:	40013400 	.word	0x40013400
 8007cd8:	40014000 	.word	0x40014000
 8007cdc:	40014400 	.word	0x40014400
 8007ce0:	40014800 	.word	0x40014800

08007ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	021b      	lsls	r3, r3, #8
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	031b      	lsls	r3, r3, #12
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a18      	ldr	r2, [pc, #96]	; (8007da4 <TIM_OC4_SetConfig+0xc0>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d00f      	beq.n	8007d68 <TIM_OC4_SetConfig+0x84>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a17      	ldr	r2, [pc, #92]	; (8007da8 <TIM_OC4_SetConfig+0xc4>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d00b      	beq.n	8007d68 <TIM_OC4_SetConfig+0x84>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a16      	ldr	r2, [pc, #88]	; (8007dac <TIM_OC4_SetConfig+0xc8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d007      	beq.n	8007d68 <TIM_OC4_SetConfig+0x84>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a15      	ldr	r2, [pc, #84]	; (8007db0 <TIM_OC4_SetConfig+0xcc>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d003      	beq.n	8007d68 <TIM_OC4_SetConfig+0x84>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a14      	ldr	r2, [pc, #80]	; (8007db4 <TIM_OC4_SetConfig+0xd0>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d109      	bne.n	8007d7c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	019b      	lsls	r3, r3, #6
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	621a      	str	r2, [r3, #32]
}
 8007d96:	bf00      	nop
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	40012c00 	.word	0x40012c00
 8007da8:	40013400 	.word	0x40013400
 8007dac:	40014000 	.word	0x40014000
 8007db0:	40014400 	.word	0x40014400
 8007db4:	40014800 	.word	0x40014800

08007db8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007dfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	041b      	lsls	r3, r3, #16
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a17      	ldr	r2, [pc, #92]	; (8007e6c <TIM_OC5_SetConfig+0xb4>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00f      	beq.n	8007e32 <TIM_OC5_SetConfig+0x7a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a16      	ldr	r2, [pc, #88]	; (8007e70 <TIM_OC5_SetConfig+0xb8>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00b      	beq.n	8007e32 <TIM_OC5_SetConfig+0x7a>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a15      	ldr	r2, [pc, #84]	; (8007e74 <TIM_OC5_SetConfig+0xbc>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d007      	beq.n	8007e32 <TIM_OC5_SetConfig+0x7a>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a14      	ldr	r2, [pc, #80]	; (8007e78 <TIM_OC5_SetConfig+0xc0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d003      	beq.n	8007e32 <TIM_OC5_SetConfig+0x7a>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a13      	ldr	r2, [pc, #76]	; (8007e7c <TIM_OC5_SetConfig+0xc4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d109      	bne.n	8007e46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	021b      	lsls	r3, r3, #8
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	621a      	str	r2, [r3, #32]
}
 8007e60:	bf00      	nop
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	40012c00 	.word	0x40012c00
 8007e70:	40013400 	.word	0x40013400
 8007e74:	40014000 	.word	0x40014000
 8007e78:	40014400 	.word	0x40014400
 8007e7c:	40014800 	.word	0x40014800

08007e80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	021b      	lsls	r3, r3, #8
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	051b      	lsls	r3, r3, #20
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a18      	ldr	r2, [pc, #96]	; (8007f38 <TIM_OC6_SetConfig+0xb8>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d00f      	beq.n	8007efc <TIM_OC6_SetConfig+0x7c>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a17      	ldr	r2, [pc, #92]	; (8007f3c <TIM_OC6_SetConfig+0xbc>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d00b      	beq.n	8007efc <TIM_OC6_SetConfig+0x7c>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a16      	ldr	r2, [pc, #88]	; (8007f40 <TIM_OC6_SetConfig+0xc0>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d007      	beq.n	8007efc <TIM_OC6_SetConfig+0x7c>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a15      	ldr	r2, [pc, #84]	; (8007f44 <TIM_OC6_SetConfig+0xc4>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d003      	beq.n	8007efc <TIM_OC6_SetConfig+0x7c>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a14      	ldr	r2, [pc, #80]	; (8007f48 <TIM_OC6_SetConfig+0xc8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d109      	bne.n	8007f10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	029b      	lsls	r3, r3, #10
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	621a      	str	r2, [r3, #32]
}
 8007f2a:	bf00      	nop
 8007f2c:	371c      	adds	r7, #28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	40012c00 	.word	0x40012c00
 8007f3c:	40013400 	.word	0x40013400
 8007f40:	40014000 	.word	0x40014000
 8007f44:	40014400 	.word	0x40014400
 8007f48:	40014800 	.word	0x40014800

08007f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	f023 0201 	bic.w	r2, r3, #1
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f023 030a 	bic.w	r3, r3, #10
 8007f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	621a      	str	r2, [r3, #32]
}
 8007f9e:	bf00      	nop
 8007fa0:	371c      	adds	r7, #28
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b087      	sub	sp, #28
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	60b9      	str	r1, [r7, #8]
 8007fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	f023 0210 	bic.w	r2, r3, #16
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	031b      	lsls	r3, r3, #12
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fe6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	621a      	str	r2, [r3, #32]
}
 8007ffe:	bf00      	nop
 8008000:	371c      	adds	r7, #28
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800800a:	b480      	push	{r7}
 800800c:	b085      	sub	sp, #20
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	f043 0307 	orr.w	r3, r3, #7
 800802c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	609a      	str	r2, [r3, #8]
}
 8008034:	bf00      	nop
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800805a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	021a      	lsls	r2, r3, #8
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	431a      	orrs	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4313      	orrs	r3, r2
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	4313      	orrs	r3, r2
 800806c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	609a      	str	r2, [r3, #8]
}
 8008074:	bf00      	nop
 8008076:	371c      	adds	r7, #28
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f003 031f 	and.w	r3, r3, #31
 8008092:	2201      	movs	r2, #1
 8008094:	fa02 f303 	lsl.w	r3, r2, r3
 8008098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6a1a      	ldr	r2, [r3, #32]
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	43db      	mvns	r3, r3
 80080a2:	401a      	ands	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a1a      	ldr	r2, [r3, #32]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f003 031f 	and.w	r3, r3, #31
 80080b2:	6879      	ldr	r1, [r7, #4]
 80080b4:	fa01 f303 	lsl.w	r3, r1, r3
 80080b8:	431a      	orrs	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	621a      	str	r2, [r3, #32]
}
 80080be:	bf00      	nop
 80080c0:	371c      	adds	r7, #28
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
	...

080080cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d101      	bne.n	80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080e0:	2302      	movs	r3, #2
 80080e2:	e063      	b.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a2b      	ldr	r2, [pc, #172]	; (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d004      	beq.n	8008118 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a2a      	ldr	r2, [pc, #168]	; (80081bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d108      	bne.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800811e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	4313      	orrs	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008130:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	4313      	orrs	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a1b      	ldr	r2, [pc, #108]	; (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d018      	beq.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008156:	d013      	beq.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a18      	ldr	r2, [pc, #96]	; (80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00e      	beq.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a17      	ldr	r2, [pc, #92]	; (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d009      	beq.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a12      	ldr	r2, [pc, #72]	; (80081bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d004      	beq.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a13      	ldr	r2, [pc, #76]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d10c      	bne.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008186:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	4313      	orrs	r3, r2
 8008190:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	40012c00 	.word	0x40012c00
 80081bc:	40013400 	.word	0x40013400
 80081c0:	40000400 	.word	0x40000400
 80081c4:	40000800 	.word	0x40000800
 80081c8:	40014000 	.word	0x40014000

080081cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e040      	b.n	800829c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800821e:	2b00      	cmp	r3, #0
 8008220:	d106      	bne.n	8008230 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7fb fcc8 	bl	8003bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2224      	movs	r2, #36	; 0x24
 8008234:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f022 0201 	bic.w	r2, r2, #1
 8008244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fc00 	bl	8008a4c <UART_SetConfig>
 800824c:	4603      	mov	r3, r0
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e022      	b.n	800829c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fdc8 	bl	8008df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fe4f 	bl	8008f38 <UART_CheckIdleState>
 800829a:	4603      	mov	r3, r0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08a      	sub	sp, #40	; 0x28
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	4613      	mov	r3, r2
 80082b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082b8:	2b20      	cmp	r3, #32
 80082ba:	d178      	bne.n	80083ae <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <HAL_UART_Transmit+0x24>
 80082c2:	88fb      	ldrh	r3, [r7, #6]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e071      	b.n	80083b0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2221      	movs	r2, #33	; 0x21
 80082d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082da:	f7fc f821 	bl	8004320 <HAL_GetTick>
 80082de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	88fa      	ldrh	r2, [r7, #6]
 80082e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	88fa      	ldrh	r2, [r7, #6]
 80082ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f8:	d108      	bne.n	800830c <HAL_UART_Transmit+0x68>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d104      	bne.n	800830c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	61bb      	str	r3, [r7, #24]
 800830a:	e003      	b.n	8008314 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008310:	2300      	movs	r3, #0
 8008312:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008314:	e030      	b.n	8008378 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2200      	movs	r2, #0
 800831e:	2180      	movs	r1, #128	; 0x80
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 feb1 	bl	8009088 <UART_WaitOnFlagUntilTimeout>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d004      	beq.n	8008336 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2220      	movs	r2, #32
 8008330:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e03c      	b.n	80083b0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10b      	bne.n	8008354 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	881a      	ldrh	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008348:	b292      	uxth	r2, r2
 800834a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	3302      	adds	r3, #2
 8008350:	61bb      	str	r3, [r7, #24]
 8008352:	e008      	b.n	8008366 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	781a      	ldrb	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	b292      	uxth	r2, r2
 800835e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	3301      	adds	r3, #1
 8008364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800836c:	b29b      	uxth	r3, r3
 800836e:	3b01      	subs	r3, #1
 8008370:	b29a      	uxth	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800837e:	b29b      	uxth	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1c8      	bne.n	8008316 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2200      	movs	r2, #0
 800838c:	2140      	movs	r1, #64	; 0x40
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 fe7a 	bl	8009088 <UART_WaitOnFlagUntilTimeout>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d004      	beq.n	80083a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2220      	movs	r2, #32
 800839e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e005      	b.n	80083b0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2220      	movs	r2, #32
 80083a8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	e000      	b.n	80083b0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80083ae:	2302      	movs	r3, #2
  }
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08a      	sub	sp, #40	; 0x28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	4613      	mov	r3, r2
 80083c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083cc:	2b20      	cmp	r3, #32
 80083ce:	d132      	bne.n	8008436 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <HAL_UART_Receive_IT+0x24>
 80083d6:	88fb      	ldrh	r3, [r7, #6]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e02b      	b.n	8008438 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d018      	beq.n	8008426 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	613b      	str	r3, [r7, #16]
   return(result);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	461a      	mov	r2, r3
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	623b      	str	r3, [r7, #32]
 8008414:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	69f9      	ldr	r1, [r7, #28]
 8008418:	6a3a      	ldr	r2, [r7, #32]
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e6      	bne.n	80083f4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008426:	88fb      	ldrh	r3, [r7, #6]
 8008428:	461a      	mov	r2, r3
 800842a:	68b9      	ldr	r1, [r7, #8]
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fe93 	bl	8009158 <UART_Start_Receive_IT>
 8008432:	4603      	mov	r3, r0
 8008434:	e000      	b.n	8008438 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008436:	2302      	movs	r3, #2
  }
}
 8008438:	4618      	mov	r0, r3
 800843a:	3728      	adds	r7, #40	; 0x28
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b0ba      	sub	sp, #232	; 0xe8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008466:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800846a:	f640 030f 	movw	r3, #2063	; 0x80f
 800846e:	4013      	ands	r3, r2
 8008470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008478:	2b00      	cmp	r3, #0
 800847a:	d115      	bne.n	80084a8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800847c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00f      	beq.n	80084a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800848c:	f003 0320 	and.w	r3, r3, #32
 8008490:	2b00      	cmp	r3, #0
 8008492:	d009      	beq.n	80084a8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 82ab 	beq.w	80089f4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
      }
      return;
 80084a6:	e2a5      	b.n	80089f4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 8117 	beq.w	80086e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80084b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d106      	bne.n	80084cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80084be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80084c2:	4b85      	ldr	r3, [pc, #532]	; (80086d8 <HAL_UART_IRQHandler+0x298>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f000 810a 	beq.w	80086e0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d011      	beq.n	80084fc <HAL_UART_IRQHandler+0xbc>
 80084d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00b      	beq.n	80084fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2201      	movs	r2, #1
 80084ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084f2:	f043 0201 	orr.w	r2, r3, #1
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008500:	f003 0302 	and.w	r3, r3, #2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d011      	beq.n	800852c <HAL_UART_IRQHandler+0xec>
 8008508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00b      	beq.n	800852c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2202      	movs	r2, #2
 800851a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008522:	f043 0204 	orr.w	r2, r3, #4
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800852c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b00      	cmp	r3, #0
 8008536:	d011      	beq.n	800855c <HAL_UART_IRQHandler+0x11c>
 8008538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2204      	movs	r2, #4
 800854a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008552:	f043 0202 	orr.w	r2, r3, #2
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800855c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008560:	f003 0308 	and.w	r3, r3, #8
 8008564:	2b00      	cmp	r3, #0
 8008566:	d017      	beq.n	8008598 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800856c:	f003 0320 	and.w	r3, r3, #32
 8008570:	2b00      	cmp	r3, #0
 8008572:	d105      	bne.n	8008580 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008578:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00b      	beq.n	8008598 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2208      	movs	r2, #8
 8008586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800858e:	f043 0208 	orr.w	r2, r3, #8
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800859c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d012      	beq.n	80085ca <HAL_UART_IRQHandler+0x18a>
 80085a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00c      	beq.n	80085ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085c0:	f043 0220 	orr.w	r2, r3, #32
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 8211 	beq.w	80089f8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80085d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085da:	f003 0320 	and.w	r3, r3, #32
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00d      	beq.n	80085fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d007      	beq.n	80085fe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008612:	2b40      	cmp	r3, #64	; 0x40
 8008614:	d005      	beq.n	8008622 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800861a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800861e:	2b00      	cmp	r3, #0
 8008620:	d04f      	beq.n	80086c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fe4c 	bl	80092c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008632:	2b40      	cmp	r3, #64	; 0x40
 8008634:	d141      	bne.n	80086ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3308      	adds	r3, #8
 800863c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800864c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3308      	adds	r3, #8
 800865e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008662:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800866e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800867a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1d9      	bne.n	8008636 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008686:	2b00      	cmp	r3, #0
 8008688:	d013      	beq.n	80086b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800868e:	4a13      	ldr	r2, [pc, #76]	; (80086dc <HAL_UART_IRQHandler+0x29c>)
 8008690:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008696:	4618      	mov	r0, r3
 8008698:	f7fb ffbc 	bl	8004614 <HAL_DMA_Abort_IT>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d017      	beq.n	80086d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80086ac:	4610      	mov	r0, r2
 80086ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b0:	e00f      	b.n	80086d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f9b4 	bl	8008a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b8:	e00b      	b.n	80086d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f9b0 	bl	8008a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c0:	e007      	b.n	80086d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f9ac 	bl	8008a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80086d0:	e192      	b.n	80089f8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d2:	bf00      	nop
    return;
 80086d4:	e190      	b.n	80089f8 <HAL_UART_IRQHandler+0x5b8>
 80086d6:	bf00      	nop
 80086d8:	04000120 	.word	0x04000120
 80086dc:	08009389 	.word	0x08009389

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	f040 814b 	bne.w	8008980 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ee:	f003 0310 	and.w	r3, r3, #16
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 8144 	beq.w	8008980 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086fc:	f003 0310 	and.w	r3, r3, #16
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 813d 	beq.w	8008980 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2210      	movs	r2, #16
 800870c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008718:	2b40      	cmp	r3, #64	; 0x40
 800871a:	f040 80b5 	bne.w	8008888 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800872a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800872e:	2b00      	cmp	r3, #0
 8008730:	f000 8164 	beq.w	80089fc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800873a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800873e:	429a      	cmp	r2, r3
 8008740:	f080 815c 	bcs.w	80089fc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800874a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	2b20      	cmp	r3, #32
 8008756:	f000 8086 	beq.w	8008866 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800876e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008776:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008784:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008788:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008790:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008794:	e841 2300 	strex	r3, r2, [r1]
 8008798:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800879c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1da      	bne.n	800875a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3308      	adds	r3, #8
 80087aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087b6:	f023 0301 	bic.w	r3, r3, #1
 80087ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3308      	adds	r3, #8
 80087c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80087da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e1      	bne.n	80087a4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3308      	adds	r3, #8
 80087e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087ea:	e853 3f00 	ldrex	r3, [r3]
 80087ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3308      	adds	r3, #8
 8008800:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008804:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008806:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008808:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800880a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800880c:	e841 2300 	strex	r3, r2, [r1]
 8008810:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e3      	bne.n	80087e0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2220      	movs	r2, #32
 800881c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800882e:	e853 3f00 	ldrex	r3, [r3]
 8008832:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008836:	f023 0310 	bic.w	r3, r3, #16
 800883a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008848:	65bb      	str	r3, [r7, #88]	; 0x58
 800884a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800884e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008850:	e841 2300 	strex	r3, r2, [r1]
 8008854:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1e4      	bne.n	8008826 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008860:	4618      	mov	r0, r3
 8008862:	f7fb fe9e 	bl	80045a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2202      	movs	r2, #2
 800886a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008878:	b29b      	uxth	r3, r3
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	b29b      	uxth	r3, r3
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f8d7 	bl	8008a34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008886:	e0b9      	b.n	80089fc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008894:	b29b      	uxth	r3, r3
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 80ab 	beq.w	8008a00 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80088aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f000 80a6 	beq.w	8008a00 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088bc:	e853 3f00 	ldrex	r3, [r3]
 80088c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	461a      	mov	r2, r3
 80088d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088d6:	647b      	str	r3, [r7, #68]	; 0x44
 80088d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e4      	bne.n	80088b4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3308      	adds	r3, #8
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	623b      	str	r3, [r7, #32]
   return(result);
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3308      	adds	r3, #8
 800890a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800890e:	633a      	str	r2, [r7, #48]	; 0x30
 8008910:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e3      	bne.n	80088ea <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2220      	movs	r2, #32
 8008926:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	60fb      	str	r3, [r7, #12]
   return(result);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0310 	bic.w	r3, r3, #16
 800894a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008958:	61fb      	str	r3, [r7, #28]
 800895a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	69b9      	ldr	r1, [r7, #24]
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	617b      	str	r3, [r7, #20]
   return(result);
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e4      	bne.n	8008936 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008972:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f85b 	bl	8008a34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800897e:	e03f      	b.n	8008a00 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00e      	beq.n	80089aa <HAL_UART_IRQHandler+0x56a>
 800898c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d008      	beq.n	80089aa <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fed8 	bl	8009758 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089a8:	e02d      	b.n	8008a06 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80089aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00e      	beq.n	80089d4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80089b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d008      	beq.n	80089d4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d01c      	beq.n	8008a04 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	4798      	blx	r3
    }
    return;
 80089d2:	e017      	b.n	8008a04 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d012      	beq.n	8008a06 <HAL_UART_IRQHandler+0x5c6>
 80089e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00c      	beq.n	8008a06 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fce1 	bl	80093b4 <UART_EndTransmit_IT>
    return;
 80089f2:	e008      	b.n	8008a06 <HAL_UART_IRQHandler+0x5c6>
      return;
 80089f4:	bf00      	nop
 80089f6:	e006      	b.n	8008a06 <HAL_UART_IRQHandler+0x5c6>
    return;
 80089f8:	bf00      	nop
 80089fa:	e004      	b.n	8008a06 <HAL_UART_IRQHandler+0x5c6>
      return;
 80089fc:	bf00      	nop
 80089fe:	e002      	b.n	8008a06 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008a00:	bf00      	nop
 8008a02:	e000      	b.n	8008a06 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008a04:	bf00      	nop
  }

}
 8008a06:	37e8      	adds	r7, #232	; 0xe8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b088      	sub	sp, #32
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	431a      	orrs	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	431a      	orrs	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008a7a:	f023 030c 	bic.w	r3, r3, #12
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	6979      	ldr	r1, [r7, #20]
 8008a84:	430b      	orrs	r3, r1
 8008a86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4aa7      	ldr	r2, [pc, #668]	; (8008d64 <UART_SetConfig+0x318>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d120      	bne.n	8008b0e <UART_SetConfig+0xc2>
 8008acc:	4ba6      	ldr	r3, [pc, #664]	; (8008d68 <UART_SetConfig+0x31c>)
 8008ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad0:	f003 0303 	and.w	r3, r3, #3
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d817      	bhi.n	8008b08 <UART_SetConfig+0xbc>
 8008ad8:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <UART_SetConfig+0x94>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008af1 	.word	0x08008af1
 8008ae4:	08008afd 	.word	0x08008afd
 8008ae8:	08008b03 	.word	0x08008b03
 8008aec:	08008af7 	.word	0x08008af7
 8008af0:	2301      	movs	r3, #1
 8008af2:	77fb      	strb	r3, [r7, #31]
 8008af4:	e0b5      	b.n	8008c62 <UART_SetConfig+0x216>
 8008af6:	2302      	movs	r3, #2
 8008af8:	77fb      	strb	r3, [r7, #31]
 8008afa:	e0b2      	b.n	8008c62 <UART_SetConfig+0x216>
 8008afc:	2304      	movs	r3, #4
 8008afe:	77fb      	strb	r3, [r7, #31]
 8008b00:	e0af      	b.n	8008c62 <UART_SetConfig+0x216>
 8008b02:	2308      	movs	r3, #8
 8008b04:	77fb      	strb	r3, [r7, #31]
 8008b06:	e0ac      	b.n	8008c62 <UART_SetConfig+0x216>
 8008b08:	2310      	movs	r3, #16
 8008b0a:	77fb      	strb	r3, [r7, #31]
 8008b0c:	e0a9      	b.n	8008c62 <UART_SetConfig+0x216>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a96      	ldr	r2, [pc, #600]	; (8008d6c <UART_SetConfig+0x320>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d124      	bne.n	8008b62 <UART_SetConfig+0x116>
 8008b18:	4b93      	ldr	r3, [pc, #588]	; (8008d68 <UART_SetConfig+0x31c>)
 8008b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b24:	d011      	beq.n	8008b4a <UART_SetConfig+0xfe>
 8008b26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b2a:	d817      	bhi.n	8008b5c <UART_SetConfig+0x110>
 8008b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b30:	d011      	beq.n	8008b56 <UART_SetConfig+0x10a>
 8008b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b36:	d811      	bhi.n	8008b5c <UART_SetConfig+0x110>
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <UART_SetConfig+0xf8>
 8008b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b40:	d006      	beq.n	8008b50 <UART_SetConfig+0x104>
 8008b42:	e00b      	b.n	8008b5c <UART_SetConfig+0x110>
 8008b44:	2300      	movs	r3, #0
 8008b46:	77fb      	strb	r3, [r7, #31]
 8008b48:	e08b      	b.n	8008c62 <UART_SetConfig+0x216>
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	77fb      	strb	r3, [r7, #31]
 8008b4e:	e088      	b.n	8008c62 <UART_SetConfig+0x216>
 8008b50:	2304      	movs	r3, #4
 8008b52:	77fb      	strb	r3, [r7, #31]
 8008b54:	e085      	b.n	8008c62 <UART_SetConfig+0x216>
 8008b56:	2308      	movs	r3, #8
 8008b58:	77fb      	strb	r3, [r7, #31]
 8008b5a:	e082      	b.n	8008c62 <UART_SetConfig+0x216>
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	77fb      	strb	r3, [r7, #31]
 8008b60:	e07f      	b.n	8008c62 <UART_SetConfig+0x216>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a82      	ldr	r2, [pc, #520]	; (8008d70 <UART_SetConfig+0x324>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d124      	bne.n	8008bb6 <UART_SetConfig+0x16a>
 8008b6c:	4b7e      	ldr	r3, [pc, #504]	; (8008d68 <UART_SetConfig+0x31c>)
 8008b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b70:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008b74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b78:	d011      	beq.n	8008b9e <UART_SetConfig+0x152>
 8008b7a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b7e:	d817      	bhi.n	8008bb0 <UART_SetConfig+0x164>
 8008b80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b84:	d011      	beq.n	8008baa <UART_SetConfig+0x15e>
 8008b86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b8a:	d811      	bhi.n	8008bb0 <UART_SetConfig+0x164>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d003      	beq.n	8008b98 <UART_SetConfig+0x14c>
 8008b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b94:	d006      	beq.n	8008ba4 <UART_SetConfig+0x158>
 8008b96:	e00b      	b.n	8008bb0 <UART_SetConfig+0x164>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	77fb      	strb	r3, [r7, #31]
 8008b9c:	e061      	b.n	8008c62 <UART_SetConfig+0x216>
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	77fb      	strb	r3, [r7, #31]
 8008ba2:	e05e      	b.n	8008c62 <UART_SetConfig+0x216>
 8008ba4:	2304      	movs	r3, #4
 8008ba6:	77fb      	strb	r3, [r7, #31]
 8008ba8:	e05b      	b.n	8008c62 <UART_SetConfig+0x216>
 8008baa:	2308      	movs	r3, #8
 8008bac:	77fb      	strb	r3, [r7, #31]
 8008bae:	e058      	b.n	8008c62 <UART_SetConfig+0x216>
 8008bb0:	2310      	movs	r3, #16
 8008bb2:	77fb      	strb	r3, [r7, #31]
 8008bb4:	e055      	b.n	8008c62 <UART_SetConfig+0x216>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a6e      	ldr	r2, [pc, #440]	; (8008d74 <UART_SetConfig+0x328>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d124      	bne.n	8008c0a <UART_SetConfig+0x1be>
 8008bc0:	4b69      	ldr	r3, [pc, #420]	; (8008d68 <UART_SetConfig+0x31c>)
 8008bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008bc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bcc:	d011      	beq.n	8008bf2 <UART_SetConfig+0x1a6>
 8008bce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bd2:	d817      	bhi.n	8008c04 <UART_SetConfig+0x1b8>
 8008bd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bd8:	d011      	beq.n	8008bfe <UART_SetConfig+0x1b2>
 8008bda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bde:	d811      	bhi.n	8008c04 <UART_SetConfig+0x1b8>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d003      	beq.n	8008bec <UART_SetConfig+0x1a0>
 8008be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008be8:	d006      	beq.n	8008bf8 <UART_SetConfig+0x1ac>
 8008bea:	e00b      	b.n	8008c04 <UART_SetConfig+0x1b8>
 8008bec:	2300      	movs	r3, #0
 8008bee:	77fb      	strb	r3, [r7, #31]
 8008bf0:	e037      	b.n	8008c62 <UART_SetConfig+0x216>
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	77fb      	strb	r3, [r7, #31]
 8008bf6:	e034      	b.n	8008c62 <UART_SetConfig+0x216>
 8008bf8:	2304      	movs	r3, #4
 8008bfa:	77fb      	strb	r3, [r7, #31]
 8008bfc:	e031      	b.n	8008c62 <UART_SetConfig+0x216>
 8008bfe:	2308      	movs	r3, #8
 8008c00:	77fb      	strb	r3, [r7, #31]
 8008c02:	e02e      	b.n	8008c62 <UART_SetConfig+0x216>
 8008c04:	2310      	movs	r3, #16
 8008c06:	77fb      	strb	r3, [r7, #31]
 8008c08:	e02b      	b.n	8008c62 <UART_SetConfig+0x216>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a5a      	ldr	r2, [pc, #360]	; (8008d78 <UART_SetConfig+0x32c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d124      	bne.n	8008c5e <UART_SetConfig+0x212>
 8008c14:	4b54      	ldr	r3, [pc, #336]	; (8008d68 <UART_SetConfig+0x31c>)
 8008c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c18:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008c1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008c20:	d011      	beq.n	8008c46 <UART_SetConfig+0x1fa>
 8008c22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008c26:	d817      	bhi.n	8008c58 <UART_SetConfig+0x20c>
 8008c28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c2c:	d011      	beq.n	8008c52 <UART_SetConfig+0x206>
 8008c2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c32:	d811      	bhi.n	8008c58 <UART_SetConfig+0x20c>
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d003      	beq.n	8008c40 <UART_SetConfig+0x1f4>
 8008c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c3c:	d006      	beq.n	8008c4c <UART_SetConfig+0x200>
 8008c3e:	e00b      	b.n	8008c58 <UART_SetConfig+0x20c>
 8008c40:	2300      	movs	r3, #0
 8008c42:	77fb      	strb	r3, [r7, #31]
 8008c44:	e00d      	b.n	8008c62 <UART_SetConfig+0x216>
 8008c46:	2302      	movs	r3, #2
 8008c48:	77fb      	strb	r3, [r7, #31]
 8008c4a:	e00a      	b.n	8008c62 <UART_SetConfig+0x216>
 8008c4c:	2304      	movs	r3, #4
 8008c4e:	77fb      	strb	r3, [r7, #31]
 8008c50:	e007      	b.n	8008c62 <UART_SetConfig+0x216>
 8008c52:	2308      	movs	r3, #8
 8008c54:	77fb      	strb	r3, [r7, #31]
 8008c56:	e004      	b.n	8008c62 <UART_SetConfig+0x216>
 8008c58:	2310      	movs	r3, #16
 8008c5a:	77fb      	strb	r3, [r7, #31]
 8008c5c:	e001      	b.n	8008c62 <UART_SetConfig+0x216>
 8008c5e:	2310      	movs	r3, #16
 8008c60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c6a:	d15b      	bne.n	8008d24 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8008c6c:	7ffb      	ldrb	r3, [r7, #31]
 8008c6e:	2b08      	cmp	r3, #8
 8008c70:	d827      	bhi.n	8008cc2 <UART_SetConfig+0x276>
 8008c72:	a201      	add	r2, pc, #4	; (adr r2, 8008c78 <UART_SetConfig+0x22c>)
 8008c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c78:	08008c9d 	.word	0x08008c9d
 8008c7c:	08008ca5 	.word	0x08008ca5
 8008c80:	08008cad 	.word	0x08008cad
 8008c84:	08008cc3 	.word	0x08008cc3
 8008c88:	08008cb3 	.word	0x08008cb3
 8008c8c:	08008cc3 	.word	0x08008cc3
 8008c90:	08008cc3 	.word	0x08008cc3
 8008c94:	08008cc3 	.word	0x08008cc3
 8008c98:	08008cbb 	.word	0x08008cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c9c:	f7fd fafc 	bl	8006298 <HAL_RCC_GetPCLK1Freq>
 8008ca0:	61b8      	str	r0, [r7, #24]
        break;
 8008ca2:	e013      	b.n	8008ccc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ca4:	f7fd fb1a 	bl	80062dc <HAL_RCC_GetPCLK2Freq>
 8008ca8:	61b8      	str	r0, [r7, #24]
        break;
 8008caa:	e00f      	b.n	8008ccc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cac:	4b33      	ldr	r3, [pc, #204]	; (8008d7c <UART_SetConfig+0x330>)
 8008cae:	61bb      	str	r3, [r7, #24]
        break;
 8008cb0:	e00c      	b.n	8008ccc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cb2:	f7fd fa7b 	bl	80061ac <HAL_RCC_GetSysClockFreq>
 8008cb6:	61b8      	str	r0, [r7, #24]
        break;
 8008cb8:	e008      	b.n	8008ccc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cbe:	61bb      	str	r3, [r7, #24]
        break;
 8008cc0:	e004      	b.n	8008ccc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	77bb      	strb	r3, [r7, #30]
        break;
 8008cca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 8082 	beq.w	8008dd8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	005a      	lsls	r2, r3, #1
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	085b      	lsrs	r3, r3, #1
 8008cde:	441a      	add	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	2b0f      	cmp	r3, #15
 8008cee:	d916      	bls.n	8008d1e <UART_SetConfig+0x2d2>
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cf6:	d212      	bcs.n	8008d1e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f023 030f 	bic.w	r3, r3, #15
 8008d00:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	085b      	lsrs	r3, r3, #1
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	f003 0307 	and.w	r3, r3, #7
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	89fb      	ldrh	r3, [r7, #14]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	89fa      	ldrh	r2, [r7, #14]
 8008d1a:	60da      	str	r2, [r3, #12]
 8008d1c:	e05c      	b.n	8008dd8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	77bb      	strb	r3, [r7, #30]
 8008d22:	e059      	b.n	8008dd8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d24:	7ffb      	ldrb	r3, [r7, #31]
 8008d26:	2b08      	cmp	r3, #8
 8008d28:	d835      	bhi.n	8008d96 <UART_SetConfig+0x34a>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <UART_SetConfig+0x2e4>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d55 	.word	0x08008d55
 8008d34:	08008d5d 	.word	0x08008d5d
 8008d38:	08008d81 	.word	0x08008d81
 8008d3c:	08008d97 	.word	0x08008d97
 8008d40:	08008d87 	.word	0x08008d87
 8008d44:	08008d97 	.word	0x08008d97
 8008d48:	08008d97 	.word	0x08008d97
 8008d4c:	08008d97 	.word	0x08008d97
 8008d50:	08008d8f 	.word	0x08008d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d54:	f7fd faa0 	bl	8006298 <HAL_RCC_GetPCLK1Freq>
 8008d58:	61b8      	str	r0, [r7, #24]
        break;
 8008d5a:	e021      	b.n	8008da0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d5c:	f7fd fabe 	bl	80062dc <HAL_RCC_GetPCLK2Freq>
 8008d60:	61b8      	str	r0, [r7, #24]
        break;
 8008d62:	e01d      	b.n	8008da0 <UART_SetConfig+0x354>
 8008d64:	40013800 	.word	0x40013800
 8008d68:	40021000 	.word	0x40021000
 8008d6c:	40004400 	.word	0x40004400
 8008d70:	40004800 	.word	0x40004800
 8008d74:	40004c00 	.word	0x40004c00
 8008d78:	40005000 	.word	0x40005000
 8008d7c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d80:	4b1b      	ldr	r3, [pc, #108]	; (8008df0 <UART_SetConfig+0x3a4>)
 8008d82:	61bb      	str	r3, [r7, #24]
        break;
 8008d84:	e00c      	b.n	8008da0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d86:	f7fd fa11 	bl	80061ac <HAL_RCC_GetSysClockFreq>
 8008d8a:	61b8      	str	r0, [r7, #24]
        break;
 8008d8c:	e008      	b.n	8008da0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d92:	61bb      	str	r3, [r7, #24]
        break;
 8008d94:	e004      	b.n	8008da0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	77bb      	strb	r3, [r7, #30]
        break;
 8008d9e:	bf00      	nop
    }

    if (pclk != 0U)
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d018      	beq.n	8008dd8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	085a      	lsrs	r2, r3, #1
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	441a      	add	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	2b0f      	cmp	r3, #15
 8008dbe:	d909      	bls.n	8008dd4 <UART_SetConfig+0x388>
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc6:	d205      	bcs.n	8008dd4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	60da      	str	r2, [r3, #12]
 8008dd2:	e001      	b.n	8008dd8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008de4:	7fbb      	ldrb	r3, [r7, #30]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3720      	adds	r7, #32
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	007a1200 	.word	0x007a1200

08008df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00a      	beq.n	8008e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	f003 0304 	and.w	r3, r3, #4
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	f003 0308 	and.w	r3, r3, #8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00a      	beq.n	8008e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	430a      	orrs	r2, r1
 8008e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e88:	f003 0310 	and.w	r3, r3, #16
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00a      	beq.n	8008ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	430a      	orrs	r2, r1
 8008ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d01a      	beq.n	8008f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ef2:	d10a      	bne.n	8008f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00a      	beq.n	8008f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	605a      	str	r2, [r3, #4]
  }
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b098      	sub	sp, #96	; 0x60
 8008f3c:	af02      	add	r7, sp, #8
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f48:	f7fb f9ea 	bl	8004320 <HAL_GetTick>
 8008f4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0308 	and.w	r3, r3, #8
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d12e      	bne.n	8008fba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f64:	2200      	movs	r2, #0
 8008f66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f88c 	bl	8009088 <UART_WaitOnFlagUntilTimeout>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d021      	beq.n	8008fba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	461a      	mov	r2, r3
 8008f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f94:	647b      	str	r3, [r7, #68]	; 0x44
 8008f96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e6      	bne.n	8008f76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e062      	b.n	8009080 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0304 	and.w	r3, r3, #4
 8008fc4:	2b04      	cmp	r3, #4
 8008fc6:	d149      	bne.n	800905c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f856 	bl	8009088 <UART_WaitOnFlagUntilTimeout>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d03c      	beq.n	800905c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	e853 3f00 	ldrex	r3, [r3]
 8008fee:	623b      	str	r3, [r7, #32]
   return(result);
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009000:	633b      	str	r3, [r7, #48]	; 0x30
 8009002:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009008:	e841 2300 	strex	r3, r2, [r1]
 800900c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e6      	bne.n	8008fe2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3308      	adds	r3, #8
 800901a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	60fb      	str	r3, [r7, #12]
   return(result);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0301 	bic.w	r3, r3, #1
 800902a:	64bb      	str	r3, [r7, #72]	; 0x48
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3308      	adds	r3, #8
 8009032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009034:	61fa      	str	r2, [r7, #28]
 8009036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	69b9      	ldr	r1, [r7, #24]
 800903a:	69fa      	ldr	r2, [r7, #28]
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	617b      	str	r3, [r7, #20]
   return(result);
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e5      	bne.n	8009014 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2220      	movs	r2, #32
 800904c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e011      	b.n	8009080 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2220      	movs	r2, #32
 8009060:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2220      	movs	r2, #32
 8009066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3758      	adds	r7, #88	; 0x58
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	4613      	mov	r3, r2
 8009096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009098:	e049      	b.n	800912e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a0:	d045      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090a2:	f7fb f93d 	bl	8004320 <HAL_GetTick>
 80090a6:	4602      	mov	r2, r0
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	69ba      	ldr	r2, [r7, #24]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d302      	bcc.n	80090b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d101      	bne.n	80090bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e048      	b.n	800914e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0304 	and.w	r3, r3, #4
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d031      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	f003 0308 	and.w	r3, r3, #8
 80090d4:	2b08      	cmp	r3, #8
 80090d6:	d110      	bne.n	80090fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2208      	movs	r2, #8
 80090de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 f8ed 	bl	80092c0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2208      	movs	r2, #8
 80090ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e029      	b.n	800914e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009108:	d111      	bne.n	800912e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 f8d3 	bl	80092c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2220      	movs	r2, #32
 800911e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e00f      	b.n	800914e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69da      	ldr	r2, [r3, #28]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	4013      	ands	r3, r2
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	429a      	cmp	r2, r3
 800913c:	bf0c      	ite	eq
 800913e:	2301      	moveq	r3, #1
 8009140:	2300      	movne	r3, #0
 8009142:	b2db      	uxtb	r3, r3
 8009144:	461a      	mov	r2, r3
 8009146:	79fb      	ldrb	r3, [r7, #7]
 8009148:	429a      	cmp	r2, r3
 800914a:	d0a6      	beq.n	800909a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009158:	b480      	push	{r7}
 800915a:	b097      	sub	sp, #92	; 0x5c
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	4613      	mov	r3, r2
 8009164:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	88fa      	ldrh	r2, [r7, #6]
 8009170:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	88fa      	ldrh	r2, [r7, #6]
 8009178:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800918a:	d10e      	bne.n	80091aa <UART_Start_Receive_IT+0x52>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d105      	bne.n	80091a0 <UART_Start_Receive_IT+0x48>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f240 12ff 	movw	r2, #511	; 0x1ff
 800919a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800919e:	e01a      	b.n	80091d6 <UART_Start_Receive_IT+0x7e>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	22ff      	movs	r2, #255	; 0xff
 80091a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091a8:	e015      	b.n	80091d6 <UART_Start_Receive_IT+0x7e>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10d      	bne.n	80091ce <UART_Start_Receive_IT+0x76>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <UART_Start_Receive_IT+0x6c>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	22ff      	movs	r2, #255	; 0xff
 80091be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091c2:	e008      	b.n	80091d6 <UART_Start_Receive_IT+0x7e>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	227f      	movs	r2, #127	; 0x7f
 80091c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091cc:	e003      	b.n	80091d6 <UART_Start_Receive_IT+0x7e>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2222      	movs	r2, #34	; 0x22
 80091e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3308      	adds	r3, #8
 80091ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	f043 0301 	orr.w	r3, r3, #1
 80091fc:	657b      	str	r3, [r7, #84]	; 0x54
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3308      	adds	r3, #8
 8009204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009206:	64ba      	str	r2, [r7, #72]	; 0x48
 8009208:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800920c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800920e:	e841 2300 	strex	r3, r2, [r1]
 8009212:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1e5      	bne.n	80091e6 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009222:	d107      	bne.n	8009234 <UART_Start_Receive_IT+0xdc>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d103      	bne.n	8009234 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4a22      	ldr	r2, [pc, #136]	; (80092b8 <UART_Start_Receive_IT+0x160>)
 8009230:	669a      	str	r2, [r3, #104]	; 0x68
 8009232:	e002      	b.n	800923a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4a21      	ldr	r2, [pc, #132]	; (80092bc <UART_Start_Receive_IT+0x164>)
 8009238:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d019      	beq.n	8009276 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	e853 3f00 	ldrex	r3, [r3]
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	461a      	mov	r2, r3
 800925e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009260:	637b      	str	r3, [r7, #52]	; 0x34
 8009262:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800926e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e6      	bne.n	8009242 <UART_Start_Receive_IT+0xea>
 8009274:	e018      	b.n	80092a8 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	613b      	str	r3, [r7, #16]
   return(result);
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f043 0320 	orr.w	r3, r3, #32
 800928a:	653b      	str	r3, [r7, #80]	; 0x50
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009294:	623b      	str	r3, [r7, #32]
 8009296:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	69f9      	ldr	r1, [r7, #28]
 800929a:	6a3a      	ldr	r2, [r7, #32]
 800929c:	e841 2300 	strex	r3, r2, [r1]
 80092a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e6      	bne.n	8009276 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	375c      	adds	r7, #92	; 0x5c
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	080095b1 	.word	0x080095b1
 80092bc:	08009409 	.word	0x08009409

080092c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b095      	sub	sp, #84	; 0x54
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e6:	643b      	str	r3, [r7, #64]	; 0x40
 80092e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e6      	bne.n	80092c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3308      	adds	r3, #8
 8009300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	e853 3f00 	ldrex	r3, [r3]
 8009308:	61fb      	str	r3, [r7, #28]
   return(result);
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	f023 0301 	bic.w	r3, r3, #1
 8009310:	64bb      	str	r3, [r7, #72]	; 0x48
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3308      	adds	r3, #8
 8009318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800931a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800931c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009322:	e841 2300 	strex	r3, r2, [r1]
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1e5      	bne.n	80092fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009332:	2b01      	cmp	r3, #1
 8009334:	d118      	bne.n	8009368 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	60bb      	str	r3, [r7, #8]
   return(result);
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f023 0310 	bic.w	r3, r3, #16
 800934a:	647b      	str	r3, [r7, #68]	; 0x44
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009354:	61bb      	str	r3, [r7, #24]
 8009356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	6979      	ldr	r1, [r7, #20]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	613b      	str	r3, [r7, #16]
   return(result);
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e6      	bne.n	8009336 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2220      	movs	r2, #32
 800936c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800937c:	bf00      	nop
 800937e:	3754      	adds	r7, #84	; 0x54
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009394:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f7ff fb3a 	bl	8008a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ac:	bf00      	nop
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	e853 3f00 	ldrex	r3, [r3]
 80093c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093d0:	61fb      	str	r3, [r7, #28]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	61bb      	str	r3, [r7, #24]
 80093dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093de:	6979      	ldr	r1, [r7, #20]
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	e841 2300 	strex	r3, r2, [r1]
 80093e6:	613b      	str	r3, [r7, #16]
   return(result);
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1e6      	bne.n	80093bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2220      	movs	r2, #32
 80093f2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7ff fb06 	bl	8008a0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009400:	bf00      	nop
 8009402:	3720      	adds	r7, #32
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b09c      	sub	sp, #112	; 0x70
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009416:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009420:	2b22      	cmp	r3, #34	; 0x22
 8009422:	f040 80b9 	bne.w	8009598 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800942c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009430:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009434:	b2d9      	uxtb	r1, r3
 8009436:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800943a:	b2da      	uxtb	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009440:	400a      	ands	r2, r1
 8009442:	b2d2      	uxtb	r2, r2
 8009444:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800944a:	1c5a      	adds	r2, r3, #1
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009456:	b29b      	uxth	r3, r3
 8009458:	3b01      	subs	r3, #1
 800945a:	b29a      	uxth	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009468:	b29b      	uxth	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	f040 809c 	bne.w	80095a8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009478:	e853 3f00 	ldrex	r3, [r3]
 800947c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800947e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009480:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009484:	66bb      	str	r3, [r7, #104]	; 0x68
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800948e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009490:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800949c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e6      	bne.n	8009470 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3308      	adds	r3, #8
 80094a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	e853 3f00 	ldrex	r3, [r3]
 80094b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b4:	f023 0301 	bic.w	r3, r3, #1
 80094b8:	667b      	str	r3, [r7, #100]	; 0x64
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3308      	adds	r3, #8
 80094c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80094c2:	647a      	str	r2, [r7, #68]	; 0x44
 80094c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ca:	e841 2300 	strex	r3, r2, [r1]
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1e5      	bne.n	80094a2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2220      	movs	r2, #32
 80094da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d018      	beq.n	800952a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	623b      	str	r3, [r7, #32]
   return(result);
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800950c:	663b      	str	r3, [r7, #96]	; 0x60
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009516:	633b      	str	r3, [r7, #48]	; 0x30
 8009518:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800951c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800951e:	e841 2300 	strex	r3, r2, [r1]
 8009522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1e6      	bne.n	80094f8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800952e:	2b01      	cmp	r3, #1
 8009530:	d12e      	bne.n	8009590 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	e853 3f00 	ldrex	r3, [r3]
 8009544:	60fb      	str	r3, [r7, #12]
   return(result);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f023 0310 	bic.w	r3, r3, #16
 800954c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009556:	61fb      	str	r3, [r7, #28]
 8009558:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	69b9      	ldr	r1, [r7, #24]
 800955c:	69fa      	ldr	r2, [r7, #28]
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	617b      	str	r3, [r7, #20]
   return(result);
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e6      	bne.n	8009538 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	69db      	ldr	r3, [r3, #28]
 8009570:	f003 0310 	and.w	r3, r3, #16
 8009574:	2b10      	cmp	r3, #16
 8009576:	d103      	bne.n	8009580 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2210      	movs	r2, #16
 800957e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7ff fa53 	bl	8008a34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800958e:	e00b      	b.n	80095a8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7f9 ffb9 	bl	8003508 <HAL_UART_RxCpltCallback>
}
 8009596:	e007      	b.n	80095a8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	699a      	ldr	r2, [r3, #24]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f042 0208 	orr.w	r2, r2, #8
 80095a6:	619a      	str	r2, [r3, #24]
}
 80095a8:	bf00      	nop
 80095aa:	3770      	adds	r7, #112	; 0x70
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b09c      	sub	sp, #112	; 0x70
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095c8:	2b22      	cmp	r3, #34	; 0x22
 80095ca:	f040 80b9 	bne.w	8009740 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80095d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095dc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80095de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80095e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80095e6:	4013      	ands	r3, r2
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f2:	1c9a      	adds	r2, r3, #2
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095fe:	b29b      	uxth	r3, r3
 8009600:	3b01      	subs	r3, #1
 8009602:	b29a      	uxth	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009610:	b29b      	uxth	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	f040 809c 	bne.w	8009750 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009620:	e853 3f00 	ldrex	r3, [r3]
 8009624:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009628:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800962c:	667b      	str	r3, [r7, #100]	; 0x64
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009636:	657b      	str	r3, [r7, #84]	; 0x54
 8009638:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800963c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800963e:	e841 2300 	strex	r3, r2, [r1]
 8009642:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1e6      	bne.n	8009618 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3308      	adds	r3, #8
 8009650:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009654:	e853 3f00 	ldrex	r3, [r3]
 8009658:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965c:	f023 0301 	bic.w	r3, r3, #1
 8009660:	663b      	str	r3, [r7, #96]	; 0x60
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3308      	adds	r3, #8
 8009668:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800966a:	643a      	str	r2, [r7, #64]	; 0x40
 800966c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009672:	e841 2300 	strex	r3, r2, [r1]
 8009676:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1e5      	bne.n	800964a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2220      	movs	r2, #32
 8009682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d018      	beq.n	80096d2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a6:	6a3b      	ldr	r3, [r7, #32]
 80096a8:	e853 3f00 	ldrex	r3, [r3]
 80096ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	461a      	mov	r2, r3
 80096bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096c6:	e841 2300 	strex	r3, r2, [r1]
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1e6      	bne.n	80096a0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d12e      	bne.n	8009738 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	e853 3f00 	ldrex	r3, [r3]
 80096ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f023 0310 	bic.w	r3, r3, #16
 80096f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	461a      	mov	r2, r3
 80096fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096fe:	61bb      	str	r3, [r7, #24]
 8009700:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009702:	6979      	ldr	r1, [r7, #20]
 8009704:	69ba      	ldr	r2, [r7, #24]
 8009706:	e841 2300 	strex	r3, r2, [r1]
 800970a:	613b      	str	r3, [r7, #16]
   return(result);
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1e6      	bne.n	80096e0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	f003 0310 	and.w	r3, r3, #16
 800971c:	2b10      	cmp	r3, #16
 800971e:	d103      	bne.n	8009728 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2210      	movs	r2, #16
 8009726:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7ff f97f 	bl	8008a34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009736:	e00b      	b.n	8009750 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7f9 fee5 	bl	8003508 <HAL_UART_RxCpltCallback>
}
 800973e:	e007      	b.n	8009750 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	699a      	ldr	r2, [r3, #24]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f042 0208 	orr.w	r2, r2, #8
 800974e:	619a      	str	r2, [r3, #24]
}
 8009750:	bf00      	nop
 8009752:	3770      	adds	r7, #112	; 0x70
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009774:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009778:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009780:	b29a      	uxth	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	b29b      	uxth	r3, r3
 8009786:	43db      	mvns	r3, r3
 8009788:	b29b      	uxth	r3, r3
 800978a:	4013      	ands	r3, r2
 800978c:	b29a      	uxth	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80097a2:	b084      	sub	sp, #16
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	f107 0014 	add.w	r0, r7, #20
 80097b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	b004      	add	sp, #16
 80097e2:	4770      	bx	lr

080097e4 <__errno>:
 80097e4:	4b01      	ldr	r3, [pc, #4]	; (80097ec <__errno+0x8>)
 80097e6:	6818      	ldr	r0, [r3, #0]
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	20000118 	.word	0x20000118

080097f0 <__libc_init_array>:
 80097f0:	b570      	push	{r4, r5, r6, lr}
 80097f2:	4d0d      	ldr	r5, [pc, #52]	; (8009828 <__libc_init_array+0x38>)
 80097f4:	4c0d      	ldr	r4, [pc, #52]	; (800982c <__libc_init_array+0x3c>)
 80097f6:	1b64      	subs	r4, r4, r5
 80097f8:	10a4      	asrs	r4, r4, #2
 80097fa:	2600      	movs	r6, #0
 80097fc:	42a6      	cmp	r6, r4
 80097fe:	d109      	bne.n	8009814 <__libc_init_array+0x24>
 8009800:	4d0b      	ldr	r5, [pc, #44]	; (8009830 <__libc_init_array+0x40>)
 8009802:	4c0c      	ldr	r4, [pc, #48]	; (8009834 <__libc_init_array+0x44>)
 8009804:	f001 ff04 	bl	800b610 <_init>
 8009808:	1b64      	subs	r4, r4, r5
 800980a:	10a4      	asrs	r4, r4, #2
 800980c:	2600      	movs	r6, #0
 800980e:	42a6      	cmp	r6, r4
 8009810:	d105      	bne.n	800981e <__libc_init_array+0x2e>
 8009812:	bd70      	pop	{r4, r5, r6, pc}
 8009814:	f855 3b04 	ldr.w	r3, [r5], #4
 8009818:	4798      	blx	r3
 800981a:	3601      	adds	r6, #1
 800981c:	e7ee      	b.n	80097fc <__libc_init_array+0xc>
 800981e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009822:	4798      	blx	r3
 8009824:	3601      	adds	r6, #1
 8009826:	e7f2      	b.n	800980e <__libc_init_array+0x1e>
 8009828:	0800bbac 	.word	0x0800bbac
 800982c:	0800bbac 	.word	0x0800bbac
 8009830:	0800bbac 	.word	0x0800bbac
 8009834:	0800bbb0 	.word	0x0800bbb0

08009838 <memset>:
 8009838:	4402      	add	r2, r0
 800983a:	4603      	mov	r3, r0
 800983c:	4293      	cmp	r3, r2
 800983e:	d100      	bne.n	8009842 <memset+0xa>
 8009840:	4770      	bx	lr
 8009842:	f803 1b01 	strb.w	r1, [r3], #1
 8009846:	e7f9      	b.n	800983c <memset+0x4>

08009848 <rand>:
 8009848:	4b16      	ldr	r3, [pc, #88]	; (80098a4 <rand+0x5c>)
 800984a:	b510      	push	{r4, lr}
 800984c:	681c      	ldr	r4, [r3, #0]
 800984e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009850:	b9b3      	cbnz	r3, 8009880 <rand+0x38>
 8009852:	2018      	movs	r0, #24
 8009854:	f000 f940 	bl	8009ad8 <malloc>
 8009858:	63a0      	str	r0, [r4, #56]	; 0x38
 800985a:	b928      	cbnz	r0, 8009868 <rand+0x20>
 800985c:	4602      	mov	r2, r0
 800985e:	4b12      	ldr	r3, [pc, #72]	; (80098a8 <rand+0x60>)
 8009860:	4812      	ldr	r0, [pc, #72]	; (80098ac <rand+0x64>)
 8009862:	214e      	movs	r1, #78	; 0x4e
 8009864:	f000 f8e6 	bl	8009a34 <__assert_func>
 8009868:	4a11      	ldr	r2, [pc, #68]	; (80098b0 <rand+0x68>)
 800986a:	4b12      	ldr	r3, [pc, #72]	; (80098b4 <rand+0x6c>)
 800986c:	e9c0 2300 	strd	r2, r3, [r0]
 8009870:	4b11      	ldr	r3, [pc, #68]	; (80098b8 <rand+0x70>)
 8009872:	6083      	str	r3, [r0, #8]
 8009874:	230b      	movs	r3, #11
 8009876:	8183      	strh	r3, [r0, #12]
 8009878:	2201      	movs	r2, #1
 800987a:	2300      	movs	r3, #0
 800987c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009880:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009882:	4a0e      	ldr	r2, [pc, #56]	; (80098bc <rand+0x74>)
 8009884:	6920      	ldr	r0, [r4, #16]
 8009886:	6963      	ldr	r3, [r4, #20]
 8009888:	490d      	ldr	r1, [pc, #52]	; (80098c0 <rand+0x78>)
 800988a:	4342      	muls	r2, r0
 800988c:	fb01 2203 	mla	r2, r1, r3, r2
 8009890:	fba0 0101 	umull	r0, r1, r0, r1
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	eb42 0001 	adc.w	r0, r2, r1
 800989a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800989e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80098a2:	bd10      	pop	{r4, pc}
 80098a4:	20000118 	.word	0x20000118
 80098a8:	0800b94c 	.word	0x0800b94c
 80098ac:	0800b963 	.word	0x0800b963
 80098b0:	abcd330e 	.word	0xabcd330e
 80098b4:	e66d1234 	.word	0xe66d1234
 80098b8:	0005deec 	.word	0x0005deec
 80098bc:	5851f42d 	.word	0x5851f42d
 80098c0:	4c957f2d 	.word	0x4c957f2d

080098c4 <siprintf>:
 80098c4:	b40e      	push	{r1, r2, r3}
 80098c6:	b500      	push	{lr}
 80098c8:	b09c      	sub	sp, #112	; 0x70
 80098ca:	ab1d      	add	r3, sp, #116	; 0x74
 80098cc:	9002      	str	r0, [sp, #8]
 80098ce:	9006      	str	r0, [sp, #24]
 80098d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098d4:	4809      	ldr	r0, [pc, #36]	; (80098fc <siprintf+0x38>)
 80098d6:	9107      	str	r1, [sp, #28]
 80098d8:	9104      	str	r1, [sp, #16]
 80098da:	4909      	ldr	r1, [pc, #36]	; (8009900 <siprintf+0x3c>)
 80098dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e0:	9105      	str	r1, [sp, #20]
 80098e2:	6800      	ldr	r0, [r0, #0]
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	a902      	add	r1, sp, #8
 80098e8:	f000 fa3a 	bl	8009d60 <_svfiprintf_r>
 80098ec:	9b02      	ldr	r3, [sp, #8]
 80098ee:	2200      	movs	r2, #0
 80098f0:	701a      	strb	r2, [r3, #0]
 80098f2:	b01c      	add	sp, #112	; 0x70
 80098f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098f8:	b003      	add	sp, #12
 80098fa:	4770      	bx	lr
 80098fc:	20000118 	.word	0x20000118
 8009900:	ffff0208 	.word	0xffff0208

08009904 <siscanf>:
 8009904:	b40e      	push	{r1, r2, r3}
 8009906:	b510      	push	{r4, lr}
 8009908:	b09f      	sub	sp, #124	; 0x7c
 800990a:	ac21      	add	r4, sp, #132	; 0x84
 800990c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009910:	f854 2b04 	ldr.w	r2, [r4], #4
 8009914:	9201      	str	r2, [sp, #4]
 8009916:	f8ad 101c 	strh.w	r1, [sp, #28]
 800991a:	9004      	str	r0, [sp, #16]
 800991c:	9008      	str	r0, [sp, #32]
 800991e:	f7f6 fc57 	bl	80001d0 <strlen>
 8009922:	4b0c      	ldr	r3, [pc, #48]	; (8009954 <siscanf+0x50>)
 8009924:	9005      	str	r0, [sp, #20]
 8009926:	9009      	str	r0, [sp, #36]	; 0x24
 8009928:	930d      	str	r3, [sp, #52]	; 0x34
 800992a:	480b      	ldr	r0, [pc, #44]	; (8009958 <siscanf+0x54>)
 800992c:	9a01      	ldr	r2, [sp, #4]
 800992e:	6800      	ldr	r0, [r0, #0]
 8009930:	9403      	str	r4, [sp, #12]
 8009932:	2300      	movs	r3, #0
 8009934:	9311      	str	r3, [sp, #68]	; 0x44
 8009936:	9316      	str	r3, [sp, #88]	; 0x58
 8009938:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800993c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009940:	a904      	add	r1, sp, #16
 8009942:	4623      	mov	r3, r4
 8009944:	f000 fb66 	bl	800a014 <__ssvfiscanf_r>
 8009948:	b01f      	add	sp, #124	; 0x7c
 800994a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800994e:	b003      	add	sp, #12
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	0800997f 	.word	0x0800997f
 8009958:	20000118 	.word	0x20000118

0800995c <__sread>:
 800995c:	b510      	push	{r4, lr}
 800995e:	460c      	mov	r4, r1
 8009960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009964:	f001 f90e 	bl	800ab84 <_read_r>
 8009968:	2800      	cmp	r0, #0
 800996a:	bfab      	itete	ge
 800996c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800996e:	89a3      	ldrhlt	r3, [r4, #12]
 8009970:	181b      	addge	r3, r3, r0
 8009972:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009976:	bfac      	ite	ge
 8009978:	6563      	strge	r3, [r4, #84]	; 0x54
 800997a:	81a3      	strhlt	r3, [r4, #12]
 800997c:	bd10      	pop	{r4, pc}

0800997e <__seofread>:
 800997e:	2000      	movs	r0, #0
 8009980:	4770      	bx	lr

08009982 <__swrite>:
 8009982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009986:	461f      	mov	r7, r3
 8009988:	898b      	ldrh	r3, [r1, #12]
 800998a:	05db      	lsls	r3, r3, #23
 800998c:	4605      	mov	r5, r0
 800998e:	460c      	mov	r4, r1
 8009990:	4616      	mov	r6, r2
 8009992:	d505      	bpl.n	80099a0 <__swrite+0x1e>
 8009994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009998:	2302      	movs	r3, #2
 800999a:	2200      	movs	r2, #0
 800999c:	f000 f88a 	bl	8009ab4 <_lseek_r>
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099aa:	81a3      	strh	r3, [r4, #12]
 80099ac:	4632      	mov	r2, r6
 80099ae:	463b      	mov	r3, r7
 80099b0:	4628      	mov	r0, r5
 80099b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099b6:	f000 b82b 	b.w	8009a10 <_write_r>

080099ba <__sseek>:
 80099ba:	b510      	push	{r4, lr}
 80099bc:	460c      	mov	r4, r1
 80099be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c2:	f000 f877 	bl	8009ab4 <_lseek_r>
 80099c6:	1c43      	adds	r3, r0, #1
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	bf15      	itete	ne
 80099cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80099ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099d6:	81a3      	strheq	r3, [r4, #12]
 80099d8:	bf18      	it	ne
 80099da:	81a3      	strhne	r3, [r4, #12]
 80099dc:	bd10      	pop	{r4, pc}

080099de <__sclose>:
 80099de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e2:	f000 b845 	b.w	8009a70 <_close_r>

080099e6 <strncmp>:
 80099e6:	b510      	push	{r4, lr}
 80099e8:	b17a      	cbz	r2, 8009a0a <strncmp+0x24>
 80099ea:	4603      	mov	r3, r0
 80099ec:	3901      	subs	r1, #1
 80099ee:	1884      	adds	r4, r0, r2
 80099f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80099f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80099f8:	4290      	cmp	r0, r2
 80099fa:	d101      	bne.n	8009a00 <strncmp+0x1a>
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	d101      	bne.n	8009a04 <strncmp+0x1e>
 8009a00:	1a80      	subs	r0, r0, r2
 8009a02:	bd10      	pop	{r4, pc}
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d1f3      	bne.n	80099f0 <strncmp+0xa>
 8009a08:	e7fa      	b.n	8009a00 <strncmp+0x1a>
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	e7f9      	b.n	8009a02 <strncmp+0x1c>
	...

08009a10 <_write_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4d07      	ldr	r5, [pc, #28]	; (8009a30 <_write_r+0x20>)
 8009a14:	4604      	mov	r4, r0
 8009a16:	4608      	mov	r0, r1
 8009a18:	4611      	mov	r1, r2
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	602a      	str	r2, [r5, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	f7fa fb61 	bl	80040e6 <_write>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_write_r+0x1e>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_write_r+0x1e>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	200008a4 	.word	0x200008a4

08009a34 <__assert_func>:
 8009a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a36:	4614      	mov	r4, r2
 8009a38:	461a      	mov	r2, r3
 8009a3a:	4b09      	ldr	r3, [pc, #36]	; (8009a60 <__assert_func+0x2c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4605      	mov	r5, r0
 8009a40:	68d8      	ldr	r0, [r3, #12]
 8009a42:	b14c      	cbz	r4, 8009a58 <__assert_func+0x24>
 8009a44:	4b07      	ldr	r3, [pc, #28]	; (8009a64 <__assert_func+0x30>)
 8009a46:	9100      	str	r1, [sp, #0]
 8009a48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a4c:	4906      	ldr	r1, [pc, #24]	; (8009a68 <__assert_func+0x34>)
 8009a4e:	462b      	mov	r3, r5
 8009a50:	f000 f81e 	bl	8009a90 <fiprintf>
 8009a54:	f001 fae2 	bl	800b01c <abort>
 8009a58:	4b04      	ldr	r3, [pc, #16]	; (8009a6c <__assert_func+0x38>)
 8009a5a:	461c      	mov	r4, r3
 8009a5c:	e7f3      	b.n	8009a46 <__assert_func+0x12>
 8009a5e:	bf00      	nop
 8009a60:	20000118 	.word	0x20000118
 8009a64:	0800b9be 	.word	0x0800b9be
 8009a68:	0800b9cb 	.word	0x0800b9cb
 8009a6c:	0800b9f9 	.word	0x0800b9f9

08009a70 <_close_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4d06      	ldr	r5, [pc, #24]	; (8009a8c <_close_r+0x1c>)
 8009a74:	2300      	movs	r3, #0
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	602b      	str	r3, [r5, #0]
 8009a7c:	f7fa fb4f 	bl	800411e <_close>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_close_r+0x1a>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_close_r+0x1a>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	200008a4 	.word	0x200008a4

08009a90 <fiprintf>:
 8009a90:	b40e      	push	{r1, r2, r3}
 8009a92:	b503      	push	{r0, r1, lr}
 8009a94:	4601      	mov	r1, r0
 8009a96:	ab03      	add	r3, sp, #12
 8009a98:	4805      	ldr	r0, [pc, #20]	; (8009ab0 <fiprintf+0x20>)
 8009a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a9e:	6800      	ldr	r0, [r0, #0]
 8009aa0:	9301      	str	r3, [sp, #4]
 8009aa2:	f000 fc59 	bl	800a358 <_vfiprintf_r>
 8009aa6:	b002      	add	sp, #8
 8009aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009aac:	b003      	add	sp, #12
 8009aae:	4770      	bx	lr
 8009ab0:	20000118 	.word	0x20000118

08009ab4 <_lseek_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4d07      	ldr	r5, [pc, #28]	; (8009ad4 <_lseek_r+0x20>)
 8009ab8:	4604      	mov	r4, r0
 8009aba:	4608      	mov	r0, r1
 8009abc:	4611      	mov	r1, r2
 8009abe:	2200      	movs	r2, #0
 8009ac0:	602a      	str	r2, [r5, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f7fa fb52 	bl	800416c <_lseek>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d102      	bne.n	8009ad2 <_lseek_r+0x1e>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	b103      	cbz	r3, 8009ad2 <_lseek_r+0x1e>
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	bd38      	pop	{r3, r4, r5, pc}
 8009ad4:	200008a4 	.word	0x200008a4

08009ad8 <malloc>:
 8009ad8:	4b02      	ldr	r3, [pc, #8]	; (8009ae4 <malloc+0xc>)
 8009ada:	4601      	mov	r1, r0
 8009adc:	6818      	ldr	r0, [r3, #0]
 8009ade:	f000 b86f 	b.w	8009bc0 <_malloc_r>
 8009ae2:	bf00      	nop
 8009ae4:	20000118 	.word	0x20000118

08009ae8 <_free_r>:
 8009ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aea:	2900      	cmp	r1, #0
 8009aec:	d044      	beq.n	8009b78 <_free_r+0x90>
 8009aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009af2:	9001      	str	r0, [sp, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f1a1 0404 	sub.w	r4, r1, #4
 8009afa:	bfb8      	it	lt
 8009afc:	18e4      	addlt	r4, r4, r3
 8009afe:	f001 fcdd 	bl	800b4bc <__malloc_lock>
 8009b02:	4a1e      	ldr	r2, [pc, #120]	; (8009b7c <_free_r+0x94>)
 8009b04:	9801      	ldr	r0, [sp, #4]
 8009b06:	6813      	ldr	r3, [r2, #0]
 8009b08:	b933      	cbnz	r3, 8009b18 <_free_r+0x30>
 8009b0a:	6063      	str	r3, [r4, #4]
 8009b0c:	6014      	str	r4, [r2, #0]
 8009b0e:	b003      	add	sp, #12
 8009b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b14:	f001 bcd8 	b.w	800b4c8 <__malloc_unlock>
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	d908      	bls.n	8009b2e <_free_r+0x46>
 8009b1c:	6825      	ldr	r5, [r4, #0]
 8009b1e:	1961      	adds	r1, r4, r5
 8009b20:	428b      	cmp	r3, r1
 8009b22:	bf01      	itttt	eq
 8009b24:	6819      	ldreq	r1, [r3, #0]
 8009b26:	685b      	ldreq	r3, [r3, #4]
 8009b28:	1949      	addeq	r1, r1, r5
 8009b2a:	6021      	streq	r1, [r4, #0]
 8009b2c:	e7ed      	b.n	8009b0a <_free_r+0x22>
 8009b2e:	461a      	mov	r2, r3
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	b10b      	cbz	r3, 8009b38 <_free_r+0x50>
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	d9fa      	bls.n	8009b2e <_free_r+0x46>
 8009b38:	6811      	ldr	r1, [r2, #0]
 8009b3a:	1855      	adds	r5, r2, r1
 8009b3c:	42a5      	cmp	r5, r4
 8009b3e:	d10b      	bne.n	8009b58 <_free_r+0x70>
 8009b40:	6824      	ldr	r4, [r4, #0]
 8009b42:	4421      	add	r1, r4
 8009b44:	1854      	adds	r4, r2, r1
 8009b46:	42a3      	cmp	r3, r4
 8009b48:	6011      	str	r1, [r2, #0]
 8009b4a:	d1e0      	bne.n	8009b0e <_free_r+0x26>
 8009b4c:	681c      	ldr	r4, [r3, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	6053      	str	r3, [r2, #4]
 8009b52:	4421      	add	r1, r4
 8009b54:	6011      	str	r1, [r2, #0]
 8009b56:	e7da      	b.n	8009b0e <_free_r+0x26>
 8009b58:	d902      	bls.n	8009b60 <_free_r+0x78>
 8009b5a:	230c      	movs	r3, #12
 8009b5c:	6003      	str	r3, [r0, #0]
 8009b5e:	e7d6      	b.n	8009b0e <_free_r+0x26>
 8009b60:	6825      	ldr	r5, [r4, #0]
 8009b62:	1961      	adds	r1, r4, r5
 8009b64:	428b      	cmp	r3, r1
 8009b66:	bf04      	itt	eq
 8009b68:	6819      	ldreq	r1, [r3, #0]
 8009b6a:	685b      	ldreq	r3, [r3, #4]
 8009b6c:	6063      	str	r3, [r4, #4]
 8009b6e:	bf04      	itt	eq
 8009b70:	1949      	addeq	r1, r1, r5
 8009b72:	6021      	streq	r1, [r4, #0]
 8009b74:	6054      	str	r4, [r2, #4]
 8009b76:	e7ca      	b.n	8009b0e <_free_r+0x26>
 8009b78:	b003      	add	sp, #12
 8009b7a:	bd30      	pop	{r4, r5, pc}
 8009b7c:	2000089c 	.word	0x2000089c

08009b80 <sbrk_aligned>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	4e0e      	ldr	r6, [pc, #56]	; (8009bbc <sbrk_aligned+0x3c>)
 8009b84:	460c      	mov	r4, r1
 8009b86:	6831      	ldr	r1, [r6, #0]
 8009b88:	4605      	mov	r5, r0
 8009b8a:	b911      	cbnz	r1, 8009b92 <sbrk_aligned+0x12>
 8009b8c:	f001 f80c 	bl	800aba8 <_sbrk_r>
 8009b90:	6030      	str	r0, [r6, #0]
 8009b92:	4621      	mov	r1, r4
 8009b94:	4628      	mov	r0, r5
 8009b96:	f001 f807 	bl	800aba8 <_sbrk_r>
 8009b9a:	1c43      	adds	r3, r0, #1
 8009b9c:	d00a      	beq.n	8009bb4 <sbrk_aligned+0x34>
 8009b9e:	1cc4      	adds	r4, r0, #3
 8009ba0:	f024 0403 	bic.w	r4, r4, #3
 8009ba4:	42a0      	cmp	r0, r4
 8009ba6:	d007      	beq.n	8009bb8 <sbrk_aligned+0x38>
 8009ba8:	1a21      	subs	r1, r4, r0
 8009baa:	4628      	mov	r0, r5
 8009bac:	f000 fffc 	bl	800aba8 <_sbrk_r>
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	d101      	bne.n	8009bb8 <sbrk_aligned+0x38>
 8009bb4:	f04f 34ff 	mov.w	r4, #4294967295
 8009bb8:	4620      	mov	r0, r4
 8009bba:	bd70      	pop	{r4, r5, r6, pc}
 8009bbc:	200008a0 	.word	0x200008a0

08009bc0 <_malloc_r>:
 8009bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc4:	1ccd      	adds	r5, r1, #3
 8009bc6:	f025 0503 	bic.w	r5, r5, #3
 8009bca:	3508      	adds	r5, #8
 8009bcc:	2d0c      	cmp	r5, #12
 8009bce:	bf38      	it	cc
 8009bd0:	250c      	movcc	r5, #12
 8009bd2:	2d00      	cmp	r5, #0
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	db01      	blt.n	8009bdc <_malloc_r+0x1c>
 8009bd8:	42a9      	cmp	r1, r5
 8009bda:	d905      	bls.n	8009be8 <_malloc_r+0x28>
 8009bdc:	230c      	movs	r3, #12
 8009bde:	603b      	str	r3, [r7, #0]
 8009be0:	2600      	movs	r6, #0
 8009be2:	4630      	mov	r0, r6
 8009be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be8:	4e2e      	ldr	r6, [pc, #184]	; (8009ca4 <_malloc_r+0xe4>)
 8009bea:	f001 fc67 	bl	800b4bc <__malloc_lock>
 8009bee:	6833      	ldr	r3, [r6, #0]
 8009bf0:	461c      	mov	r4, r3
 8009bf2:	bb34      	cbnz	r4, 8009c42 <_malloc_r+0x82>
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	f7ff ffc2 	bl	8009b80 <sbrk_aligned>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	4604      	mov	r4, r0
 8009c00:	d14d      	bne.n	8009c9e <_malloc_r+0xde>
 8009c02:	6834      	ldr	r4, [r6, #0]
 8009c04:	4626      	mov	r6, r4
 8009c06:	2e00      	cmp	r6, #0
 8009c08:	d140      	bne.n	8009c8c <_malloc_r+0xcc>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4638      	mov	r0, r7
 8009c10:	eb04 0803 	add.w	r8, r4, r3
 8009c14:	f000 ffc8 	bl	800aba8 <_sbrk_r>
 8009c18:	4580      	cmp	r8, r0
 8009c1a:	d13a      	bne.n	8009c92 <_malloc_r+0xd2>
 8009c1c:	6821      	ldr	r1, [r4, #0]
 8009c1e:	3503      	adds	r5, #3
 8009c20:	1a6d      	subs	r5, r5, r1
 8009c22:	f025 0503 	bic.w	r5, r5, #3
 8009c26:	3508      	adds	r5, #8
 8009c28:	2d0c      	cmp	r5, #12
 8009c2a:	bf38      	it	cc
 8009c2c:	250c      	movcc	r5, #12
 8009c2e:	4629      	mov	r1, r5
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7ff ffa5 	bl	8009b80 <sbrk_aligned>
 8009c36:	3001      	adds	r0, #1
 8009c38:	d02b      	beq.n	8009c92 <_malloc_r+0xd2>
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	442b      	add	r3, r5
 8009c3e:	6023      	str	r3, [r4, #0]
 8009c40:	e00e      	b.n	8009c60 <_malloc_r+0xa0>
 8009c42:	6822      	ldr	r2, [r4, #0]
 8009c44:	1b52      	subs	r2, r2, r5
 8009c46:	d41e      	bmi.n	8009c86 <_malloc_r+0xc6>
 8009c48:	2a0b      	cmp	r2, #11
 8009c4a:	d916      	bls.n	8009c7a <_malloc_r+0xba>
 8009c4c:	1961      	adds	r1, r4, r5
 8009c4e:	42a3      	cmp	r3, r4
 8009c50:	6025      	str	r5, [r4, #0]
 8009c52:	bf18      	it	ne
 8009c54:	6059      	strne	r1, [r3, #4]
 8009c56:	6863      	ldr	r3, [r4, #4]
 8009c58:	bf08      	it	eq
 8009c5a:	6031      	streq	r1, [r6, #0]
 8009c5c:	5162      	str	r2, [r4, r5]
 8009c5e:	604b      	str	r3, [r1, #4]
 8009c60:	4638      	mov	r0, r7
 8009c62:	f104 060b 	add.w	r6, r4, #11
 8009c66:	f001 fc2f 	bl	800b4c8 <__malloc_unlock>
 8009c6a:	f026 0607 	bic.w	r6, r6, #7
 8009c6e:	1d23      	adds	r3, r4, #4
 8009c70:	1af2      	subs	r2, r6, r3
 8009c72:	d0b6      	beq.n	8009be2 <_malloc_r+0x22>
 8009c74:	1b9b      	subs	r3, r3, r6
 8009c76:	50a3      	str	r3, [r4, r2]
 8009c78:	e7b3      	b.n	8009be2 <_malloc_r+0x22>
 8009c7a:	6862      	ldr	r2, [r4, #4]
 8009c7c:	42a3      	cmp	r3, r4
 8009c7e:	bf0c      	ite	eq
 8009c80:	6032      	streq	r2, [r6, #0]
 8009c82:	605a      	strne	r2, [r3, #4]
 8009c84:	e7ec      	b.n	8009c60 <_malloc_r+0xa0>
 8009c86:	4623      	mov	r3, r4
 8009c88:	6864      	ldr	r4, [r4, #4]
 8009c8a:	e7b2      	b.n	8009bf2 <_malloc_r+0x32>
 8009c8c:	4634      	mov	r4, r6
 8009c8e:	6876      	ldr	r6, [r6, #4]
 8009c90:	e7b9      	b.n	8009c06 <_malloc_r+0x46>
 8009c92:	230c      	movs	r3, #12
 8009c94:	603b      	str	r3, [r7, #0]
 8009c96:	4638      	mov	r0, r7
 8009c98:	f001 fc16 	bl	800b4c8 <__malloc_unlock>
 8009c9c:	e7a1      	b.n	8009be2 <_malloc_r+0x22>
 8009c9e:	6025      	str	r5, [r4, #0]
 8009ca0:	e7de      	b.n	8009c60 <_malloc_r+0xa0>
 8009ca2:	bf00      	nop
 8009ca4:	2000089c 	.word	0x2000089c

08009ca8 <__ssputs_r>:
 8009ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cac:	688e      	ldr	r6, [r1, #8]
 8009cae:	429e      	cmp	r6, r3
 8009cb0:	4682      	mov	sl, r0
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	4690      	mov	r8, r2
 8009cb6:	461f      	mov	r7, r3
 8009cb8:	d838      	bhi.n	8009d2c <__ssputs_r+0x84>
 8009cba:	898a      	ldrh	r2, [r1, #12]
 8009cbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cc0:	d032      	beq.n	8009d28 <__ssputs_r+0x80>
 8009cc2:	6825      	ldr	r5, [r4, #0]
 8009cc4:	6909      	ldr	r1, [r1, #16]
 8009cc6:	eba5 0901 	sub.w	r9, r5, r1
 8009cca:	6965      	ldr	r5, [r4, #20]
 8009ccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	444b      	add	r3, r9
 8009cd8:	106d      	asrs	r5, r5, #1
 8009cda:	429d      	cmp	r5, r3
 8009cdc:	bf38      	it	cc
 8009cde:	461d      	movcc	r5, r3
 8009ce0:	0553      	lsls	r3, r2, #21
 8009ce2:	d531      	bpl.n	8009d48 <__ssputs_r+0xa0>
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	f7ff ff6b 	bl	8009bc0 <_malloc_r>
 8009cea:	4606      	mov	r6, r0
 8009cec:	b950      	cbnz	r0, 8009d04 <__ssputs_r+0x5c>
 8009cee:	230c      	movs	r3, #12
 8009cf0:	f8ca 3000 	str.w	r3, [sl]
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cfa:	81a3      	strh	r3, [r4, #12]
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d04:	6921      	ldr	r1, [r4, #16]
 8009d06:	464a      	mov	r2, r9
 8009d08:	f001 fbb0 	bl	800b46c <memcpy>
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d16:	81a3      	strh	r3, [r4, #12]
 8009d18:	6126      	str	r6, [r4, #16]
 8009d1a:	6165      	str	r5, [r4, #20]
 8009d1c:	444e      	add	r6, r9
 8009d1e:	eba5 0509 	sub.w	r5, r5, r9
 8009d22:	6026      	str	r6, [r4, #0]
 8009d24:	60a5      	str	r5, [r4, #8]
 8009d26:	463e      	mov	r6, r7
 8009d28:	42be      	cmp	r6, r7
 8009d2a:	d900      	bls.n	8009d2e <__ssputs_r+0x86>
 8009d2c:	463e      	mov	r6, r7
 8009d2e:	6820      	ldr	r0, [r4, #0]
 8009d30:	4632      	mov	r2, r6
 8009d32:	4641      	mov	r1, r8
 8009d34:	f001 fba8 	bl	800b488 <memmove>
 8009d38:	68a3      	ldr	r3, [r4, #8]
 8009d3a:	1b9b      	subs	r3, r3, r6
 8009d3c:	60a3      	str	r3, [r4, #8]
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	4433      	add	r3, r6
 8009d42:	6023      	str	r3, [r4, #0]
 8009d44:	2000      	movs	r0, #0
 8009d46:	e7db      	b.n	8009d00 <__ssputs_r+0x58>
 8009d48:	462a      	mov	r2, r5
 8009d4a:	f001 fbc3 	bl	800b4d4 <_realloc_r>
 8009d4e:	4606      	mov	r6, r0
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d1e1      	bne.n	8009d18 <__ssputs_r+0x70>
 8009d54:	6921      	ldr	r1, [r4, #16]
 8009d56:	4650      	mov	r0, sl
 8009d58:	f7ff fec6 	bl	8009ae8 <_free_r>
 8009d5c:	e7c7      	b.n	8009cee <__ssputs_r+0x46>
	...

08009d60 <_svfiprintf_r>:
 8009d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d64:	4698      	mov	r8, r3
 8009d66:	898b      	ldrh	r3, [r1, #12]
 8009d68:	061b      	lsls	r3, r3, #24
 8009d6a:	b09d      	sub	sp, #116	; 0x74
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	460d      	mov	r5, r1
 8009d70:	4614      	mov	r4, r2
 8009d72:	d50e      	bpl.n	8009d92 <_svfiprintf_r+0x32>
 8009d74:	690b      	ldr	r3, [r1, #16]
 8009d76:	b963      	cbnz	r3, 8009d92 <_svfiprintf_r+0x32>
 8009d78:	2140      	movs	r1, #64	; 0x40
 8009d7a:	f7ff ff21 	bl	8009bc0 <_malloc_r>
 8009d7e:	6028      	str	r0, [r5, #0]
 8009d80:	6128      	str	r0, [r5, #16]
 8009d82:	b920      	cbnz	r0, 8009d8e <_svfiprintf_r+0x2e>
 8009d84:	230c      	movs	r3, #12
 8009d86:	603b      	str	r3, [r7, #0]
 8009d88:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8c:	e0d1      	b.n	8009f32 <_svfiprintf_r+0x1d2>
 8009d8e:	2340      	movs	r3, #64	; 0x40
 8009d90:	616b      	str	r3, [r5, #20]
 8009d92:	2300      	movs	r3, #0
 8009d94:	9309      	str	r3, [sp, #36]	; 0x24
 8009d96:	2320      	movs	r3, #32
 8009d98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009da0:	2330      	movs	r3, #48	; 0x30
 8009da2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f4c <_svfiprintf_r+0x1ec>
 8009da6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009daa:	f04f 0901 	mov.w	r9, #1
 8009dae:	4623      	mov	r3, r4
 8009db0:	469a      	mov	sl, r3
 8009db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009db6:	b10a      	cbz	r2, 8009dbc <_svfiprintf_r+0x5c>
 8009db8:	2a25      	cmp	r2, #37	; 0x25
 8009dba:	d1f9      	bne.n	8009db0 <_svfiprintf_r+0x50>
 8009dbc:	ebba 0b04 	subs.w	fp, sl, r4
 8009dc0:	d00b      	beq.n	8009dda <_svfiprintf_r+0x7a>
 8009dc2:	465b      	mov	r3, fp
 8009dc4:	4622      	mov	r2, r4
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	4638      	mov	r0, r7
 8009dca:	f7ff ff6d 	bl	8009ca8 <__ssputs_r>
 8009dce:	3001      	adds	r0, #1
 8009dd0:	f000 80aa 	beq.w	8009f28 <_svfiprintf_r+0x1c8>
 8009dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dd6:	445a      	add	r2, fp
 8009dd8:	9209      	str	r2, [sp, #36]	; 0x24
 8009dda:	f89a 3000 	ldrb.w	r3, [sl]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f000 80a2 	beq.w	8009f28 <_svfiprintf_r+0x1c8>
 8009de4:	2300      	movs	r3, #0
 8009de6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dee:	f10a 0a01 	add.w	sl, sl, #1
 8009df2:	9304      	str	r3, [sp, #16]
 8009df4:	9307      	str	r3, [sp, #28]
 8009df6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dfa:	931a      	str	r3, [sp, #104]	; 0x68
 8009dfc:	4654      	mov	r4, sl
 8009dfe:	2205      	movs	r2, #5
 8009e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e04:	4851      	ldr	r0, [pc, #324]	; (8009f4c <_svfiprintf_r+0x1ec>)
 8009e06:	f7f6 f9eb 	bl	80001e0 <memchr>
 8009e0a:	9a04      	ldr	r2, [sp, #16]
 8009e0c:	b9d8      	cbnz	r0, 8009e46 <_svfiprintf_r+0xe6>
 8009e0e:	06d0      	lsls	r0, r2, #27
 8009e10:	bf44      	itt	mi
 8009e12:	2320      	movmi	r3, #32
 8009e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e18:	0711      	lsls	r1, r2, #28
 8009e1a:	bf44      	itt	mi
 8009e1c:	232b      	movmi	r3, #43	; 0x2b
 8009e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e22:	f89a 3000 	ldrb.w	r3, [sl]
 8009e26:	2b2a      	cmp	r3, #42	; 0x2a
 8009e28:	d015      	beq.n	8009e56 <_svfiprintf_r+0xf6>
 8009e2a:	9a07      	ldr	r2, [sp, #28]
 8009e2c:	4654      	mov	r4, sl
 8009e2e:	2000      	movs	r0, #0
 8009e30:	f04f 0c0a 	mov.w	ip, #10
 8009e34:	4621      	mov	r1, r4
 8009e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e3a:	3b30      	subs	r3, #48	; 0x30
 8009e3c:	2b09      	cmp	r3, #9
 8009e3e:	d94e      	bls.n	8009ede <_svfiprintf_r+0x17e>
 8009e40:	b1b0      	cbz	r0, 8009e70 <_svfiprintf_r+0x110>
 8009e42:	9207      	str	r2, [sp, #28]
 8009e44:	e014      	b.n	8009e70 <_svfiprintf_r+0x110>
 8009e46:	eba0 0308 	sub.w	r3, r0, r8
 8009e4a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	9304      	str	r3, [sp, #16]
 8009e52:	46a2      	mov	sl, r4
 8009e54:	e7d2      	b.n	8009dfc <_svfiprintf_r+0x9c>
 8009e56:	9b03      	ldr	r3, [sp, #12]
 8009e58:	1d19      	adds	r1, r3, #4
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	9103      	str	r1, [sp, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	bfbb      	ittet	lt
 8009e62:	425b      	neglt	r3, r3
 8009e64:	f042 0202 	orrlt.w	r2, r2, #2
 8009e68:	9307      	strge	r3, [sp, #28]
 8009e6a:	9307      	strlt	r3, [sp, #28]
 8009e6c:	bfb8      	it	lt
 8009e6e:	9204      	strlt	r2, [sp, #16]
 8009e70:	7823      	ldrb	r3, [r4, #0]
 8009e72:	2b2e      	cmp	r3, #46	; 0x2e
 8009e74:	d10c      	bne.n	8009e90 <_svfiprintf_r+0x130>
 8009e76:	7863      	ldrb	r3, [r4, #1]
 8009e78:	2b2a      	cmp	r3, #42	; 0x2a
 8009e7a:	d135      	bne.n	8009ee8 <_svfiprintf_r+0x188>
 8009e7c:	9b03      	ldr	r3, [sp, #12]
 8009e7e:	1d1a      	adds	r2, r3, #4
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	9203      	str	r2, [sp, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	bfb8      	it	lt
 8009e88:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e8c:	3402      	adds	r4, #2
 8009e8e:	9305      	str	r3, [sp, #20]
 8009e90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f5c <_svfiprintf_r+0x1fc>
 8009e94:	7821      	ldrb	r1, [r4, #0]
 8009e96:	2203      	movs	r2, #3
 8009e98:	4650      	mov	r0, sl
 8009e9a:	f7f6 f9a1 	bl	80001e0 <memchr>
 8009e9e:	b140      	cbz	r0, 8009eb2 <_svfiprintf_r+0x152>
 8009ea0:	2340      	movs	r3, #64	; 0x40
 8009ea2:	eba0 000a 	sub.w	r0, r0, sl
 8009ea6:	fa03 f000 	lsl.w	r0, r3, r0
 8009eaa:	9b04      	ldr	r3, [sp, #16]
 8009eac:	4303      	orrs	r3, r0
 8009eae:	3401      	adds	r4, #1
 8009eb0:	9304      	str	r3, [sp, #16]
 8009eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eb6:	4826      	ldr	r0, [pc, #152]	; (8009f50 <_svfiprintf_r+0x1f0>)
 8009eb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ebc:	2206      	movs	r2, #6
 8009ebe:	f7f6 f98f 	bl	80001e0 <memchr>
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	d038      	beq.n	8009f38 <_svfiprintf_r+0x1d8>
 8009ec6:	4b23      	ldr	r3, [pc, #140]	; (8009f54 <_svfiprintf_r+0x1f4>)
 8009ec8:	bb1b      	cbnz	r3, 8009f12 <_svfiprintf_r+0x1b2>
 8009eca:	9b03      	ldr	r3, [sp, #12]
 8009ecc:	3307      	adds	r3, #7
 8009ece:	f023 0307 	bic.w	r3, r3, #7
 8009ed2:	3308      	adds	r3, #8
 8009ed4:	9303      	str	r3, [sp, #12]
 8009ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed8:	4433      	add	r3, r6
 8009eda:	9309      	str	r3, [sp, #36]	; 0x24
 8009edc:	e767      	b.n	8009dae <_svfiprintf_r+0x4e>
 8009ede:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	2001      	movs	r0, #1
 8009ee6:	e7a5      	b.n	8009e34 <_svfiprintf_r+0xd4>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	3401      	adds	r4, #1
 8009eec:	9305      	str	r3, [sp, #20]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	f04f 0c0a 	mov.w	ip, #10
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009efa:	3a30      	subs	r2, #48	; 0x30
 8009efc:	2a09      	cmp	r2, #9
 8009efe:	d903      	bls.n	8009f08 <_svfiprintf_r+0x1a8>
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d0c5      	beq.n	8009e90 <_svfiprintf_r+0x130>
 8009f04:	9105      	str	r1, [sp, #20]
 8009f06:	e7c3      	b.n	8009e90 <_svfiprintf_r+0x130>
 8009f08:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e7f0      	b.n	8009ef4 <_svfiprintf_r+0x194>
 8009f12:	ab03      	add	r3, sp, #12
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	462a      	mov	r2, r5
 8009f18:	4b0f      	ldr	r3, [pc, #60]	; (8009f58 <_svfiprintf_r+0x1f8>)
 8009f1a:	a904      	add	r1, sp, #16
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	f3af 8000 	nop.w
 8009f22:	1c42      	adds	r2, r0, #1
 8009f24:	4606      	mov	r6, r0
 8009f26:	d1d6      	bne.n	8009ed6 <_svfiprintf_r+0x176>
 8009f28:	89ab      	ldrh	r3, [r5, #12]
 8009f2a:	065b      	lsls	r3, r3, #25
 8009f2c:	f53f af2c 	bmi.w	8009d88 <_svfiprintf_r+0x28>
 8009f30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f32:	b01d      	add	sp, #116	; 0x74
 8009f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f38:	ab03      	add	r3, sp, #12
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	462a      	mov	r2, r5
 8009f3e:	4b06      	ldr	r3, [pc, #24]	; (8009f58 <_svfiprintf_r+0x1f8>)
 8009f40:	a904      	add	r1, sp, #16
 8009f42:	4638      	mov	r0, r7
 8009f44:	f000 fba6 	bl	800a694 <_printf_i>
 8009f48:	e7eb      	b.n	8009f22 <_svfiprintf_r+0x1c2>
 8009f4a:	bf00      	nop
 8009f4c:	0800b9fa 	.word	0x0800b9fa
 8009f50:	0800ba04 	.word	0x0800ba04
 8009f54:	00000000 	.word	0x00000000
 8009f58:	08009ca9 	.word	0x08009ca9
 8009f5c:	0800ba00 	.word	0x0800ba00

08009f60 <_sungetc_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	1c4b      	adds	r3, r1, #1
 8009f64:	4614      	mov	r4, r2
 8009f66:	d103      	bne.n	8009f70 <_sungetc_r+0x10>
 8009f68:	f04f 35ff 	mov.w	r5, #4294967295
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	bd38      	pop	{r3, r4, r5, pc}
 8009f70:	8993      	ldrh	r3, [r2, #12]
 8009f72:	f023 0320 	bic.w	r3, r3, #32
 8009f76:	8193      	strh	r3, [r2, #12]
 8009f78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f7a:	6852      	ldr	r2, [r2, #4]
 8009f7c:	b2cd      	uxtb	r5, r1
 8009f7e:	b18b      	cbz	r3, 8009fa4 <_sungetc_r+0x44>
 8009f80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f82:	4293      	cmp	r3, r2
 8009f84:	dd08      	ble.n	8009f98 <_sungetc_r+0x38>
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	1e5a      	subs	r2, r3, #1
 8009f8a:	6022      	str	r2, [r4, #0]
 8009f8c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009f90:	6863      	ldr	r3, [r4, #4]
 8009f92:	3301      	adds	r3, #1
 8009f94:	6063      	str	r3, [r4, #4]
 8009f96:	e7e9      	b.n	8009f6c <_sungetc_r+0xc>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	f000 ff45 	bl	800ae28 <__submore>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d0f1      	beq.n	8009f86 <_sungetc_r+0x26>
 8009fa2:	e7e1      	b.n	8009f68 <_sungetc_r+0x8>
 8009fa4:	6921      	ldr	r1, [r4, #16]
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	b151      	cbz	r1, 8009fc0 <_sungetc_r+0x60>
 8009faa:	4299      	cmp	r1, r3
 8009fac:	d208      	bcs.n	8009fc0 <_sungetc_r+0x60>
 8009fae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009fb2:	42a9      	cmp	r1, r5
 8009fb4:	d104      	bne.n	8009fc0 <_sungetc_r+0x60>
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	3201      	adds	r2, #1
 8009fba:	6023      	str	r3, [r4, #0]
 8009fbc:	6062      	str	r2, [r4, #4]
 8009fbe:	e7d5      	b.n	8009f6c <_sungetc_r+0xc>
 8009fc0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fc8:	6363      	str	r3, [r4, #52]	; 0x34
 8009fca:	2303      	movs	r3, #3
 8009fcc:	63a3      	str	r3, [r4, #56]	; 0x38
 8009fce:	4623      	mov	r3, r4
 8009fd0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e7dc      	b.n	8009f94 <_sungetc_r+0x34>

08009fda <__ssrefill_r>:
 8009fda:	b510      	push	{r4, lr}
 8009fdc:	460c      	mov	r4, r1
 8009fde:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009fe0:	b169      	cbz	r1, 8009ffe <__ssrefill_r+0x24>
 8009fe2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fe6:	4299      	cmp	r1, r3
 8009fe8:	d001      	beq.n	8009fee <__ssrefill_r+0x14>
 8009fea:	f7ff fd7d 	bl	8009ae8 <_free_r>
 8009fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ff0:	6063      	str	r3, [r4, #4]
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	6360      	str	r0, [r4, #52]	; 0x34
 8009ff6:	b113      	cbz	r3, 8009ffe <__ssrefill_r+0x24>
 8009ff8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009ffa:	6023      	str	r3, [r4, #0]
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	6923      	ldr	r3, [r4, #16]
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	2300      	movs	r3, #0
 800a004:	6063      	str	r3, [r4, #4]
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	f043 0320 	orr.w	r3, r3, #32
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	f04f 30ff 	mov.w	r0, #4294967295
 800a012:	e7f3      	b.n	8009ffc <__ssrefill_r+0x22>

0800a014 <__ssvfiscanf_r>:
 800a014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a018:	460c      	mov	r4, r1
 800a01a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a01e:	2100      	movs	r1, #0
 800a020:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a024:	49a6      	ldr	r1, [pc, #664]	; (800a2c0 <__ssvfiscanf_r+0x2ac>)
 800a026:	91a0      	str	r1, [sp, #640]	; 0x280
 800a028:	f10d 0804 	add.w	r8, sp, #4
 800a02c:	49a5      	ldr	r1, [pc, #660]	; (800a2c4 <__ssvfiscanf_r+0x2b0>)
 800a02e:	4fa6      	ldr	r7, [pc, #664]	; (800a2c8 <__ssvfiscanf_r+0x2b4>)
 800a030:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a2cc <__ssvfiscanf_r+0x2b8>
 800a034:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a038:	4606      	mov	r6, r0
 800a03a:	91a1      	str	r1, [sp, #644]	; 0x284
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	7813      	ldrb	r3, [r2, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 815a 	beq.w	800a2fa <__ssvfiscanf_r+0x2e6>
 800a046:	5dd9      	ldrb	r1, [r3, r7]
 800a048:	f011 0108 	ands.w	r1, r1, #8
 800a04c:	f102 0501 	add.w	r5, r2, #1
 800a050:	d019      	beq.n	800a086 <__ssvfiscanf_r+0x72>
 800a052:	6863      	ldr	r3, [r4, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	dd0f      	ble.n	800a078 <__ssvfiscanf_r+0x64>
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	781a      	ldrb	r2, [r3, #0]
 800a05c:	5cba      	ldrb	r2, [r7, r2]
 800a05e:	0712      	lsls	r2, r2, #28
 800a060:	d401      	bmi.n	800a066 <__ssvfiscanf_r+0x52>
 800a062:	462a      	mov	r2, r5
 800a064:	e7eb      	b.n	800a03e <__ssvfiscanf_r+0x2a>
 800a066:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a068:	3201      	adds	r2, #1
 800a06a:	9245      	str	r2, [sp, #276]	; 0x114
 800a06c:	6862      	ldr	r2, [r4, #4]
 800a06e:	3301      	adds	r3, #1
 800a070:	3a01      	subs	r2, #1
 800a072:	6062      	str	r2, [r4, #4]
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	e7ec      	b.n	800a052 <__ssvfiscanf_r+0x3e>
 800a078:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a07a:	4621      	mov	r1, r4
 800a07c:	4630      	mov	r0, r6
 800a07e:	4798      	blx	r3
 800a080:	2800      	cmp	r0, #0
 800a082:	d0e9      	beq.n	800a058 <__ssvfiscanf_r+0x44>
 800a084:	e7ed      	b.n	800a062 <__ssvfiscanf_r+0x4e>
 800a086:	2b25      	cmp	r3, #37	; 0x25
 800a088:	d012      	beq.n	800a0b0 <__ssvfiscanf_r+0x9c>
 800a08a:	469a      	mov	sl, r3
 800a08c:	6863      	ldr	r3, [r4, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f340 8091 	ble.w	800a1b6 <__ssvfiscanf_r+0x1a2>
 800a094:	6822      	ldr	r2, [r4, #0]
 800a096:	7813      	ldrb	r3, [r2, #0]
 800a098:	4553      	cmp	r3, sl
 800a09a:	f040 812e 	bne.w	800a2fa <__ssvfiscanf_r+0x2e6>
 800a09e:	6863      	ldr	r3, [r4, #4]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	6063      	str	r3, [r4, #4]
 800a0a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a0a6:	3201      	adds	r2, #1
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	6022      	str	r2, [r4, #0]
 800a0ac:	9345      	str	r3, [sp, #276]	; 0x114
 800a0ae:	e7d8      	b.n	800a062 <__ssvfiscanf_r+0x4e>
 800a0b0:	9141      	str	r1, [sp, #260]	; 0x104
 800a0b2:	9143      	str	r1, [sp, #268]	; 0x10c
 800a0b4:	7853      	ldrb	r3, [r2, #1]
 800a0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0b8:	bf02      	ittt	eq
 800a0ba:	2310      	moveq	r3, #16
 800a0bc:	1c95      	addeq	r5, r2, #2
 800a0be:	9341      	streq	r3, [sp, #260]	; 0x104
 800a0c0:	220a      	movs	r2, #10
 800a0c2:	46aa      	mov	sl, r5
 800a0c4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a0c8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a0cc:	2b09      	cmp	r3, #9
 800a0ce:	d91d      	bls.n	800a10c <__ssvfiscanf_r+0xf8>
 800a0d0:	487e      	ldr	r0, [pc, #504]	; (800a2cc <__ssvfiscanf_r+0x2b8>)
 800a0d2:	2203      	movs	r2, #3
 800a0d4:	f7f6 f884 	bl	80001e0 <memchr>
 800a0d8:	b140      	cbz	r0, 800a0ec <__ssvfiscanf_r+0xd8>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	eba0 0009 	sub.w	r0, r0, r9
 800a0e0:	fa03 f000 	lsl.w	r0, r3, r0
 800a0e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a0e6:	4318      	orrs	r0, r3
 800a0e8:	9041      	str	r0, [sp, #260]	; 0x104
 800a0ea:	4655      	mov	r5, sl
 800a0ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a0f0:	2b78      	cmp	r3, #120	; 0x78
 800a0f2:	d806      	bhi.n	800a102 <__ssvfiscanf_r+0xee>
 800a0f4:	2b57      	cmp	r3, #87	; 0x57
 800a0f6:	d810      	bhi.n	800a11a <__ssvfiscanf_r+0x106>
 800a0f8:	2b25      	cmp	r3, #37	; 0x25
 800a0fa:	d0c6      	beq.n	800a08a <__ssvfiscanf_r+0x76>
 800a0fc:	d856      	bhi.n	800a1ac <__ssvfiscanf_r+0x198>
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d064      	beq.n	800a1cc <__ssvfiscanf_r+0x1b8>
 800a102:	2303      	movs	r3, #3
 800a104:	9347      	str	r3, [sp, #284]	; 0x11c
 800a106:	230a      	movs	r3, #10
 800a108:	9342      	str	r3, [sp, #264]	; 0x108
 800a10a:	e071      	b.n	800a1f0 <__ssvfiscanf_r+0x1dc>
 800a10c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a10e:	fb02 1103 	mla	r1, r2, r3, r1
 800a112:	3930      	subs	r1, #48	; 0x30
 800a114:	9143      	str	r1, [sp, #268]	; 0x10c
 800a116:	4655      	mov	r5, sl
 800a118:	e7d3      	b.n	800a0c2 <__ssvfiscanf_r+0xae>
 800a11a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a11e:	2a20      	cmp	r2, #32
 800a120:	d8ef      	bhi.n	800a102 <__ssvfiscanf_r+0xee>
 800a122:	a101      	add	r1, pc, #4	; (adr r1, 800a128 <__ssvfiscanf_r+0x114>)
 800a124:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a128:	0800a1db 	.word	0x0800a1db
 800a12c:	0800a103 	.word	0x0800a103
 800a130:	0800a103 	.word	0x0800a103
 800a134:	0800a239 	.word	0x0800a239
 800a138:	0800a103 	.word	0x0800a103
 800a13c:	0800a103 	.word	0x0800a103
 800a140:	0800a103 	.word	0x0800a103
 800a144:	0800a103 	.word	0x0800a103
 800a148:	0800a103 	.word	0x0800a103
 800a14c:	0800a103 	.word	0x0800a103
 800a150:	0800a103 	.word	0x0800a103
 800a154:	0800a24f 	.word	0x0800a24f
 800a158:	0800a225 	.word	0x0800a225
 800a15c:	0800a1b3 	.word	0x0800a1b3
 800a160:	0800a1b3 	.word	0x0800a1b3
 800a164:	0800a1b3 	.word	0x0800a1b3
 800a168:	0800a103 	.word	0x0800a103
 800a16c:	0800a229 	.word	0x0800a229
 800a170:	0800a103 	.word	0x0800a103
 800a174:	0800a103 	.word	0x0800a103
 800a178:	0800a103 	.word	0x0800a103
 800a17c:	0800a103 	.word	0x0800a103
 800a180:	0800a25f 	.word	0x0800a25f
 800a184:	0800a231 	.word	0x0800a231
 800a188:	0800a1d3 	.word	0x0800a1d3
 800a18c:	0800a103 	.word	0x0800a103
 800a190:	0800a103 	.word	0x0800a103
 800a194:	0800a25b 	.word	0x0800a25b
 800a198:	0800a103 	.word	0x0800a103
 800a19c:	0800a225 	.word	0x0800a225
 800a1a0:	0800a103 	.word	0x0800a103
 800a1a4:	0800a103 	.word	0x0800a103
 800a1a8:	0800a1db 	.word	0x0800a1db
 800a1ac:	3b45      	subs	r3, #69	; 0x45
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d8a7      	bhi.n	800a102 <__ssvfiscanf_r+0xee>
 800a1b2:	2305      	movs	r3, #5
 800a1b4:	e01b      	b.n	800a1ee <__ssvfiscanf_r+0x1da>
 800a1b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	4798      	blx	r3
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	f43f af68 	beq.w	800a094 <__ssvfiscanf_r+0x80>
 800a1c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	f040 808d 	bne.w	800a2e6 <__ssvfiscanf_r+0x2d2>
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d0:	e08f      	b.n	800a2f2 <__ssvfiscanf_r+0x2de>
 800a1d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a1d4:	f042 0220 	orr.w	r2, r2, #32
 800a1d8:	9241      	str	r2, [sp, #260]	; 0x104
 800a1da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a1dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1e0:	9241      	str	r2, [sp, #260]	; 0x104
 800a1e2:	2210      	movs	r2, #16
 800a1e4:	2b6f      	cmp	r3, #111	; 0x6f
 800a1e6:	9242      	str	r2, [sp, #264]	; 0x108
 800a1e8:	bf34      	ite	cc
 800a1ea:	2303      	movcc	r3, #3
 800a1ec:	2304      	movcs	r3, #4
 800a1ee:	9347      	str	r3, [sp, #284]	; 0x11c
 800a1f0:	6863      	ldr	r3, [r4, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	dd42      	ble.n	800a27c <__ssvfiscanf_r+0x268>
 800a1f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a1f8:	0659      	lsls	r1, r3, #25
 800a1fa:	d404      	bmi.n	800a206 <__ssvfiscanf_r+0x1f2>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	781a      	ldrb	r2, [r3, #0]
 800a200:	5cba      	ldrb	r2, [r7, r2]
 800a202:	0712      	lsls	r2, r2, #28
 800a204:	d441      	bmi.n	800a28a <__ssvfiscanf_r+0x276>
 800a206:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a208:	2b02      	cmp	r3, #2
 800a20a:	dc50      	bgt.n	800a2ae <__ssvfiscanf_r+0x29a>
 800a20c:	466b      	mov	r3, sp
 800a20e:	4622      	mov	r2, r4
 800a210:	a941      	add	r1, sp, #260	; 0x104
 800a212:	4630      	mov	r0, r6
 800a214:	f000 fb64 	bl	800a8e0 <_scanf_chars>
 800a218:	2801      	cmp	r0, #1
 800a21a:	d06e      	beq.n	800a2fa <__ssvfiscanf_r+0x2e6>
 800a21c:	2802      	cmp	r0, #2
 800a21e:	f47f af20 	bne.w	800a062 <__ssvfiscanf_r+0x4e>
 800a222:	e7cf      	b.n	800a1c4 <__ssvfiscanf_r+0x1b0>
 800a224:	220a      	movs	r2, #10
 800a226:	e7dd      	b.n	800a1e4 <__ssvfiscanf_r+0x1d0>
 800a228:	2300      	movs	r3, #0
 800a22a:	9342      	str	r3, [sp, #264]	; 0x108
 800a22c:	2303      	movs	r3, #3
 800a22e:	e7de      	b.n	800a1ee <__ssvfiscanf_r+0x1da>
 800a230:	2308      	movs	r3, #8
 800a232:	9342      	str	r3, [sp, #264]	; 0x108
 800a234:	2304      	movs	r3, #4
 800a236:	e7da      	b.n	800a1ee <__ssvfiscanf_r+0x1da>
 800a238:	4629      	mov	r1, r5
 800a23a:	4640      	mov	r0, r8
 800a23c:	f000 fcc4 	bl	800abc8 <__sccl>
 800a240:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a246:	9341      	str	r3, [sp, #260]	; 0x104
 800a248:	4605      	mov	r5, r0
 800a24a:	2301      	movs	r3, #1
 800a24c:	e7cf      	b.n	800a1ee <__ssvfiscanf_r+0x1da>
 800a24e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a254:	9341      	str	r3, [sp, #260]	; 0x104
 800a256:	2300      	movs	r3, #0
 800a258:	e7c9      	b.n	800a1ee <__ssvfiscanf_r+0x1da>
 800a25a:	2302      	movs	r3, #2
 800a25c:	e7c7      	b.n	800a1ee <__ssvfiscanf_r+0x1da>
 800a25e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a260:	06c3      	lsls	r3, r0, #27
 800a262:	f53f aefe 	bmi.w	800a062 <__ssvfiscanf_r+0x4e>
 800a266:	9b00      	ldr	r3, [sp, #0]
 800a268:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a26a:	1d19      	adds	r1, r3, #4
 800a26c:	9100      	str	r1, [sp, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f010 0f01 	tst.w	r0, #1
 800a274:	bf14      	ite	ne
 800a276:	801a      	strhne	r2, [r3, #0]
 800a278:	601a      	streq	r2, [r3, #0]
 800a27a:	e6f2      	b.n	800a062 <__ssvfiscanf_r+0x4e>
 800a27c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a27e:	4621      	mov	r1, r4
 800a280:	4630      	mov	r0, r6
 800a282:	4798      	blx	r3
 800a284:	2800      	cmp	r0, #0
 800a286:	d0b6      	beq.n	800a1f6 <__ssvfiscanf_r+0x1e2>
 800a288:	e79c      	b.n	800a1c4 <__ssvfiscanf_r+0x1b0>
 800a28a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a28c:	3201      	adds	r2, #1
 800a28e:	9245      	str	r2, [sp, #276]	; 0x114
 800a290:	6862      	ldr	r2, [r4, #4]
 800a292:	3a01      	subs	r2, #1
 800a294:	2a00      	cmp	r2, #0
 800a296:	6062      	str	r2, [r4, #4]
 800a298:	dd02      	ble.n	800a2a0 <__ssvfiscanf_r+0x28c>
 800a29a:	3301      	adds	r3, #1
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	e7ad      	b.n	800a1fc <__ssvfiscanf_r+0x1e8>
 800a2a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	4798      	blx	r3
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d0a7      	beq.n	800a1fc <__ssvfiscanf_r+0x1e8>
 800a2ac:	e78a      	b.n	800a1c4 <__ssvfiscanf_r+0x1b0>
 800a2ae:	2b04      	cmp	r3, #4
 800a2b0:	dc0e      	bgt.n	800a2d0 <__ssvfiscanf_r+0x2bc>
 800a2b2:	466b      	mov	r3, sp
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	a941      	add	r1, sp, #260	; 0x104
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f000 fb6b 	bl	800a994 <_scanf_i>
 800a2be:	e7ab      	b.n	800a218 <__ssvfiscanf_r+0x204>
 800a2c0:	08009f61 	.word	0x08009f61
 800a2c4:	08009fdb 	.word	0x08009fdb
 800a2c8:	0800ba49 	.word	0x0800ba49
 800a2cc:	0800ba00 	.word	0x0800ba00
 800a2d0:	4b0b      	ldr	r3, [pc, #44]	; (800a300 <__ssvfiscanf_r+0x2ec>)
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f43f aec5 	beq.w	800a062 <__ssvfiscanf_r+0x4e>
 800a2d8:	466b      	mov	r3, sp
 800a2da:	4622      	mov	r2, r4
 800a2dc:	a941      	add	r1, sp, #260	; 0x104
 800a2de:	4630      	mov	r0, r6
 800a2e0:	f3af 8000 	nop.w
 800a2e4:	e798      	b.n	800a218 <__ssvfiscanf_r+0x204>
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a2ec:	bf18      	it	ne
 800a2ee:	f04f 30ff 	movne.w	r0, #4294967295
 800a2f2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2fa:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a2fc:	e7f9      	b.n	800a2f2 <__ssvfiscanf_r+0x2de>
 800a2fe:	bf00      	nop
 800a300:	00000000 	.word	0x00000000

0800a304 <__sfputc_r>:
 800a304:	6893      	ldr	r3, [r2, #8]
 800a306:	3b01      	subs	r3, #1
 800a308:	2b00      	cmp	r3, #0
 800a30a:	b410      	push	{r4}
 800a30c:	6093      	str	r3, [r2, #8]
 800a30e:	da08      	bge.n	800a322 <__sfputc_r+0x1e>
 800a310:	6994      	ldr	r4, [r2, #24]
 800a312:	42a3      	cmp	r3, r4
 800a314:	db01      	blt.n	800a31a <__sfputc_r+0x16>
 800a316:	290a      	cmp	r1, #10
 800a318:	d103      	bne.n	800a322 <__sfputc_r+0x1e>
 800a31a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a31e:	f000 bdbd 	b.w	800ae9c <__swbuf_r>
 800a322:	6813      	ldr	r3, [r2, #0]
 800a324:	1c58      	adds	r0, r3, #1
 800a326:	6010      	str	r0, [r2, #0]
 800a328:	7019      	strb	r1, [r3, #0]
 800a32a:	4608      	mov	r0, r1
 800a32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <__sfputs_r>:
 800a332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a334:	4606      	mov	r6, r0
 800a336:	460f      	mov	r7, r1
 800a338:	4614      	mov	r4, r2
 800a33a:	18d5      	adds	r5, r2, r3
 800a33c:	42ac      	cmp	r4, r5
 800a33e:	d101      	bne.n	800a344 <__sfputs_r+0x12>
 800a340:	2000      	movs	r0, #0
 800a342:	e007      	b.n	800a354 <__sfputs_r+0x22>
 800a344:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a348:	463a      	mov	r2, r7
 800a34a:	4630      	mov	r0, r6
 800a34c:	f7ff ffda 	bl	800a304 <__sfputc_r>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	d1f3      	bne.n	800a33c <__sfputs_r+0xa>
 800a354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a358 <_vfiprintf_r>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	460d      	mov	r5, r1
 800a35e:	b09d      	sub	sp, #116	; 0x74
 800a360:	4614      	mov	r4, r2
 800a362:	4698      	mov	r8, r3
 800a364:	4606      	mov	r6, r0
 800a366:	b118      	cbz	r0, 800a370 <_vfiprintf_r+0x18>
 800a368:	6983      	ldr	r3, [r0, #24]
 800a36a:	b90b      	cbnz	r3, 800a370 <_vfiprintf_r+0x18>
 800a36c:	f000 ff78 	bl	800b260 <__sinit>
 800a370:	4b89      	ldr	r3, [pc, #548]	; (800a598 <_vfiprintf_r+0x240>)
 800a372:	429d      	cmp	r5, r3
 800a374:	d11b      	bne.n	800a3ae <_vfiprintf_r+0x56>
 800a376:	6875      	ldr	r5, [r6, #4]
 800a378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a37a:	07d9      	lsls	r1, r3, #31
 800a37c:	d405      	bmi.n	800a38a <_vfiprintf_r+0x32>
 800a37e:	89ab      	ldrh	r3, [r5, #12]
 800a380:	059a      	lsls	r2, r3, #22
 800a382:	d402      	bmi.n	800a38a <_vfiprintf_r+0x32>
 800a384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a386:	f001 f809 	bl	800b39c <__retarget_lock_acquire_recursive>
 800a38a:	89ab      	ldrh	r3, [r5, #12]
 800a38c:	071b      	lsls	r3, r3, #28
 800a38e:	d501      	bpl.n	800a394 <_vfiprintf_r+0x3c>
 800a390:	692b      	ldr	r3, [r5, #16]
 800a392:	b9eb      	cbnz	r3, 800a3d0 <_vfiprintf_r+0x78>
 800a394:	4629      	mov	r1, r5
 800a396:	4630      	mov	r0, r6
 800a398:	f000 fdd2 	bl	800af40 <__swsetup_r>
 800a39c:	b1c0      	cbz	r0, 800a3d0 <_vfiprintf_r+0x78>
 800a39e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3a0:	07dc      	lsls	r4, r3, #31
 800a3a2:	d50e      	bpl.n	800a3c2 <_vfiprintf_r+0x6a>
 800a3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a8:	b01d      	add	sp, #116	; 0x74
 800a3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ae:	4b7b      	ldr	r3, [pc, #492]	; (800a59c <_vfiprintf_r+0x244>)
 800a3b0:	429d      	cmp	r5, r3
 800a3b2:	d101      	bne.n	800a3b8 <_vfiprintf_r+0x60>
 800a3b4:	68b5      	ldr	r5, [r6, #8]
 800a3b6:	e7df      	b.n	800a378 <_vfiprintf_r+0x20>
 800a3b8:	4b79      	ldr	r3, [pc, #484]	; (800a5a0 <_vfiprintf_r+0x248>)
 800a3ba:	429d      	cmp	r5, r3
 800a3bc:	bf08      	it	eq
 800a3be:	68f5      	ldreq	r5, [r6, #12]
 800a3c0:	e7da      	b.n	800a378 <_vfiprintf_r+0x20>
 800a3c2:	89ab      	ldrh	r3, [r5, #12]
 800a3c4:	0598      	lsls	r0, r3, #22
 800a3c6:	d4ed      	bmi.n	800a3a4 <_vfiprintf_r+0x4c>
 800a3c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3ca:	f000 ffe8 	bl	800b39e <__retarget_lock_release_recursive>
 800a3ce:	e7e9      	b.n	800a3a4 <_vfiprintf_r+0x4c>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3d4:	2320      	movs	r3, #32
 800a3d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3de:	2330      	movs	r3, #48	; 0x30
 800a3e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a5a4 <_vfiprintf_r+0x24c>
 800a3e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3e8:	f04f 0901 	mov.w	r9, #1
 800a3ec:	4623      	mov	r3, r4
 800a3ee:	469a      	mov	sl, r3
 800a3f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3f4:	b10a      	cbz	r2, 800a3fa <_vfiprintf_r+0xa2>
 800a3f6:	2a25      	cmp	r2, #37	; 0x25
 800a3f8:	d1f9      	bne.n	800a3ee <_vfiprintf_r+0x96>
 800a3fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a3fe:	d00b      	beq.n	800a418 <_vfiprintf_r+0xc0>
 800a400:	465b      	mov	r3, fp
 800a402:	4622      	mov	r2, r4
 800a404:	4629      	mov	r1, r5
 800a406:	4630      	mov	r0, r6
 800a408:	f7ff ff93 	bl	800a332 <__sfputs_r>
 800a40c:	3001      	adds	r0, #1
 800a40e:	f000 80aa 	beq.w	800a566 <_vfiprintf_r+0x20e>
 800a412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a414:	445a      	add	r2, fp
 800a416:	9209      	str	r2, [sp, #36]	; 0x24
 800a418:	f89a 3000 	ldrb.w	r3, [sl]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 80a2 	beq.w	800a566 <_vfiprintf_r+0x20e>
 800a422:	2300      	movs	r3, #0
 800a424:	f04f 32ff 	mov.w	r2, #4294967295
 800a428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a42c:	f10a 0a01 	add.w	sl, sl, #1
 800a430:	9304      	str	r3, [sp, #16]
 800a432:	9307      	str	r3, [sp, #28]
 800a434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a438:	931a      	str	r3, [sp, #104]	; 0x68
 800a43a:	4654      	mov	r4, sl
 800a43c:	2205      	movs	r2, #5
 800a43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a442:	4858      	ldr	r0, [pc, #352]	; (800a5a4 <_vfiprintf_r+0x24c>)
 800a444:	f7f5 fecc 	bl	80001e0 <memchr>
 800a448:	9a04      	ldr	r2, [sp, #16]
 800a44a:	b9d8      	cbnz	r0, 800a484 <_vfiprintf_r+0x12c>
 800a44c:	06d1      	lsls	r1, r2, #27
 800a44e:	bf44      	itt	mi
 800a450:	2320      	movmi	r3, #32
 800a452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a456:	0713      	lsls	r3, r2, #28
 800a458:	bf44      	itt	mi
 800a45a:	232b      	movmi	r3, #43	; 0x2b
 800a45c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a460:	f89a 3000 	ldrb.w	r3, [sl]
 800a464:	2b2a      	cmp	r3, #42	; 0x2a
 800a466:	d015      	beq.n	800a494 <_vfiprintf_r+0x13c>
 800a468:	9a07      	ldr	r2, [sp, #28]
 800a46a:	4654      	mov	r4, sl
 800a46c:	2000      	movs	r0, #0
 800a46e:	f04f 0c0a 	mov.w	ip, #10
 800a472:	4621      	mov	r1, r4
 800a474:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a478:	3b30      	subs	r3, #48	; 0x30
 800a47a:	2b09      	cmp	r3, #9
 800a47c:	d94e      	bls.n	800a51c <_vfiprintf_r+0x1c4>
 800a47e:	b1b0      	cbz	r0, 800a4ae <_vfiprintf_r+0x156>
 800a480:	9207      	str	r2, [sp, #28]
 800a482:	e014      	b.n	800a4ae <_vfiprintf_r+0x156>
 800a484:	eba0 0308 	sub.w	r3, r0, r8
 800a488:	fa09 f303 	lsl.w	r3, r9, r3
 800a48c:	4313      	orrs	r3, r2
 800a48e:	9304      	str	r3, [sp, #16]
 800a490:	46a2      	mov	sl, r4
 800a492:	e7d2      	b.n	800a43a <_vfiprintf_r+0xe2>
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	1d19      	adds	r1, r3, #4
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	9103      	str	r1, [sp, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	bfbb      	ittet	lt
 800a4a0:	425b      	neglt	r3, r3
 800a4a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a4a6:	9307      	strge	r3, [sp, #28]
 800a4a8:	9307      	strlt	r3, [sp, #28]
 800a4aa:	bfb8      	it	lt
 800a4ac:	9204      	strlt	r2, [sp, #16]
 800a4ae:	7823      	ldrb	r3, [r4, #0]
 800a4b0:	2b2e      	cmp	r3, #46	; 0x2e
 800a4b2:	d10c      	bne.n	800a4ce <_vfiprintf_r+0x176>
 800a4b4:	7863      	ldrb	r3, [r4, #1]
 800a4b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a4b8:	d135      	bne.n	800a526 <_vfiprintf_r+0x1ce>
 800a4ba:	9b03      	ldr	r3, [sp, #12]
 800a4bc:	1d1a      	adds	r2, r3, #4
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	9203      	str	r2, [sp, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	bfb8      	it	lt
 800a4c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4ca:	3402      	adds	r4, #2
 800a4cc:	9305      	str	r3, [sp, #20]
 800a4ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a5b4 <_vfiprintf_r+0x25c>
 800a4d2:	7821      	ldrb	r1, [r4, #0]
 800a4d4:	2203      	movs	r2, #3
 800a4d6:	4650      	mov	r0, sl
 800a4d8:	f7f5 fe82 	bl	80001e0 <memchr>
 800a4dc:	b140      	cbz	r0, 800a4f0 <_vfiprintf_r+0x198>
 800a4de:	2340      	movs	r3, #64	; 0x40
 800a4e0:	eba0 000a 	sub.w	r0, r0, sl
 800a4e4:	fa03 f000 	lsl.w	r0, r3, r0
 800a4e8:	9b04      	ldr	r3, [sp, #16]
 800a4ea:	4303      	orrs	r3, r0
 800a4ec:	3401      	adds	r4, #1
 800a4ee:	9304      	str	r3, [sp, #16]
 800a4f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4f4:	482c      	ldr	r0, [pc, #176]	; (800a5a8 <_vfiprintf_r+0x250>)
 800a4f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4fa:	2206      	movs	r2, #6
 800a4fc:	f7f5 fe70 	bl	80001e0 <memchr>
 800a500:	2800      	cmp	r0, #0
 800a502:	d03f      	beq.n	800a584 <_vfiprintf_r+0x22c>
 800a504:	4b29      	ldr	r3, [pc, #164]	; (800a5ac <_vfiprintf_r+0x254>)
 800a506:	bb1b      	cbnz	r3, 800a550 <_vfiprintf_r+0x1f8>
 800a508:	9b03      	ldr	r3, [sp, #12]
 800a50a:	3307      	adds	r3, #7
 800a50c:	f023 0307 	bic.w	r3, r3, #7
 800a510:	3308      	adds	r3, #8
 800a512:	9303      	str	r3, [sp, #12]
 800a514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a516:	443b      	add	r3, r7
 800a518:	9309      	str	r3, [sp, #36]	; 0x24
 800a51a:	e767      	b.n	800a3ec <_vfiprintf_r+0x94>
 800a51c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a520:	460c      	mov	r4, r1
 800a522:	2001      	movs	r0, #1
 800a524:	e7a5      	b.n	800a472 <_vfiprintf_r+0x11a>
 800a526:	2300      	movs	r3, #0
 800a528:	3401      	adds	r4, #1
 800a52a:	9305      	str	r3, [sp, #20]
 800a52c:	4619      	mov	r1, r3
 800a52e:	f04f 0c0a 	mov.w	ip, #10
 800a532:	4620      	mov	r0, r4
 800a534:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a538:	3a30      	subs	r2, #48	; 0x30
 800a53a:	2a09      	cmp	r2, #9
 800a53c:	d903      	bls.n	800a546 <_vfiprintf_r+0x1ee>
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d0c5      	beq.n	800a4ce <_vfiprintf_r+0x176>
 800a542:	9105      	str	r1, [sp, #20]
 800a544:	e7c3      	b.n	800a4ce <_vfiprintf_r+0x176>
 800a546:	fb0c 2101 	mla	r1, ip, r1, r2
 800a54a:	4604      	mov	r4, r0
 800a54c:	2301      	movs	r3, #1
 800a54e:	e7f0      	b.n	800a532 <_vfiprintf_r+0x1da>
 800a550:	ab03      	add	r3, sp, #12
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	462a      	mov	r2, r5
 800a556:	4b16      	ldr	r3, [pc, #88]	; (800a5b0 <_vfiprintf_r+0x258>)
 800a558:	a904      	add	r1, sp, #16
 800a55a:	4630      	mov	r0, r6
 800a55c:	f3af 8000 	nop.w
 800a560:	4607      	mov	r7, r0
 800a562:	1c78      	adds	r0, r7, #1
 800a564:	d1d6      	bne.n	800a514 <_vfiprintf_r+0x1bc>
 800a566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a568:	07d9      	lsls	r1, r3, #31
 800a56a:	d405      	bmi.n	800a578 <_vfiprintf_r+0x220>
 800a56c:	89ab      	ldrh	r3, [r5, #12]
 800a56e:	059a      	lsls	r2, r3, #22
 800a570:	d402      	bmi.n	800a578 <_vfiprintf_r+0x220>
 800a572:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a574:	f000 ff13 	bl	800b39e <__retarget_lock_release_recursive>
 800a578:	89ab      	ldrh	r3, [r5, #12]
 800a57a:	065b      	lsls	r3, r3, #25
 800a57c:	f53f af12 	bmi.w	800a3a4 <_vfiprintf_r+0x4c>
 800a580:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a582:	e711      	b.n	800a3a8 <_vfiprintf_r+0x50>
 800a584:	ab03      	add	r3, sp, #12
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	462a      	mov	r2, r5
 800a58a:	4b09      	ldr	r3, [pc, #36]	; (800a5b0 <_vfiprintf_r+0x258>)
 800a58c:	a904      	add	r1, sp, #16
 800a58e:	4630      	mov	r0, r6
 800a590:	f000 f880 	bl	800a694 <_printf_i>
 800a594:	e7e4      	b.n	800a560 <_vfiprintf_r+0x208>
 800a596:	bf00      	nop
 800a598:	0800bb6c 	.word	0x0800bb6c
 800a59c:	0800bb8c 	.word	0x0800bb8c
 800a5a0:	0800bb4c 	.word	0x0800bb4c
 800a5a4:	0800b9fa 	.word	0x0800b9fa
 800a5a8:	0800ba04 	.word	0x0800ba04
 800a5ac:	00000000 	.word	0x00000000
 800a5b0:	0800a333 	.word	0x0800a333
 800a5b4:	0800ba00 	.word	0x0800ba00

0800a5b8 <_printf_common>:
 800a5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5bc:	4616      	mov	r6, r2
 800a5be:	4699      	mov	r9, r3
 800a5c0:	688a      	ldr	r2, [r1, #8]
 800a5c2:	690b      	ldr	r3, [r1, #16]
 800a5c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	bfb8      	it	lt
 800a5cc:	4613      	movlt	r3, r2
 800a5ce:	6033      	str	r3, [r6, #0]
 800a5d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5d4:	4607      	mov	r7, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	b10a      	cbz	r2, 800a5de <_printf_common+0x26>
 800a5da:	3301      	adds	r3, #1
 800a5dc:	6033      	str	r3, [r6, #0]
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	0699      	lsls	r1, r3, #26
 800a5e2:	bf42      	ittt	mi
 800a5e4:	6833      	ldrmi	r3, [r6, #0]
 800a5e6:	3302      	addmi	r3, #2
 800a5e8:	6033      	strmi	r3, [r6, #0]
 800a5ea:	6825      	ldr	r5, [r4, #0]
 800a5ec:	f015 0506 	ands.w	r5, r5, #6
 800a5f0:	d106      	bne.n	800a600 <_printf_common+0x48>
 800a5f2:	f104 0a19 	add.w	sl, r4, #25
 800a5f6:	68e3      	ldr	r3, [r4, #12]
 800a5f8:	6832      	ldr	r2, [r6, #0]
 800a5fa:	1a9b      	subs	r3, r3, r2
 800a5fc:	42ab      	cmp	r3, r5
 800a5fe:	dc26      	bgt.n	800a64e <_printf_common+0x96>
 800a600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a604:	1e13      	subs	r3, r2, #0
 800a606:	6822      	ldr	r2, [r4, #0]
 800a608:	bf18      	it	ne
 800a60a:	2301      	movne	r3, #1
 800a60c:	0692      	lsls	r2, r2, #26
 800a60e:	d42b      	bmi.n	800a668 <_printf_common+0xb0>
 800a610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a614:	4649      	mov	r1, r9
 800a616:	4638      	mov	r0, r7
 800a618:	47c0      	blx	r8
 800a61a:	3001      	adds	r0, #1
 800a61c:	d01e      	beq.n	800a65c <_printf_common+0xa4>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	68e5      	ldr	r5, [r4, #12]
 800a622:	6832      	ldr	r2, [r6, #0]
 800a624:	f003 0306 	and.w	r3, r3, #6
 800a628:	2b04      	cmp	r3, #4
 800a62a:	bf08      	it	eq
 800a62c:	1aad      	subeq	r5, r5, r2
 800a62e:	68a3      	ldr	r3, [r4, #8]
 800a630:	6922      	ldr	r2, [r4, #16]
 800a632:	bf0c      	ite	eq
 800a634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a638:	2500      	movne	r5, #0
 800a63a:	4293      	cmp	r3, r2
 800a63c:	bfc4      	itt	gt
 800a63e:	1a9b      	subgt	r3, r3, r2
 800a640:	18ed      	addgt	r5, r5, r3
 800a642:	2600      	movs	r6, #0
 800a644:	341a      	adds	r4, #26
 800a646:	42b5      	cmp	r5, r6
 800a648:	d11a      	bne.n	800a680 <_printf_common+0xc8>
 800a64a:	2000      	movs	r0, #0
 800a64c:	e008      	b.n	800a660 <_printf_common+0xa8>
 800a64e:	2301      	movs	r3, #1
 800a650:	4652      	mov	r2, sl
 800a652:	4649      	mov	r1, r9
 800a654:	4638      	mov	r0, r7
 800a656:	47c0      	blx	r8
 800a658:	3001      	adds	r0, #1
 800a65a:	d103      	bne.n	800a664 <_printf_common+0xac>
 800a65c:	f04f 30ff 	mov.w	r0, #4294967295
 800a660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a664:	3501      	adds	r5, #1
 800a666:	e7c6      	b.n	800a5f6 <_printf_common+0x3e>
 800a668:	18e1      	adds	r1, r4, r3
 800a66a:	1c5a      	adds	r2, r3, #1
 800a66c:	2030      	movs	r0, #48	; 0x30
 800a66e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a672:	4422      	add	r2, r4
 800a674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a67c:	3302      	adds	r3, #2
 800a67e:	e7c7      	b.n	800a610 <_printf_common+0x58>
 800a680:	2301      	movs	r3, #1
 800a682:	4622      	mov	r2, r4
 800a684:	4649      	mov	r1, r9
 800a686:	4638      	mov	r0, r7
 800a688:	47c0      	blx	r8
 800a68a:	3001      	adds	r0, #1
 800a68c:	d0e6      	beq.n	800a65c <_printf_common+0xa4>
 800a68e:	3601      	adds	r6, #1
 800a690:	e7d9      	b.n	800a646 <_printf_common+0x8e>
	...

0800a694 <_printf_i>:
 800a694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a698:	7e0f      	ldrb	r7, [r1, #24]
 800a69a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a69c:	2f78      	cmp	r7, #120	; 0x78
 800a69e:	4691      	mov	r9, r2
 800a6a0:	4680      	mov	r8, r0
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	469a      	mov	sl, r3
 800a6a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6aa:	d807      	bhi.n	800a6bc <_printf_i+0x28>
 800a6ac:	2f62      	cmp	r7, #98	; 0x62
 800a6ae:	d80a      	bhi.n	800a6c6 <_printf_i+0x32>
 800a6b0:	2f00      	cmp	r7, #0
 800a6b2:	f000 80d8 	beq.w	800a866 <_printf_i+0x1d2>
 800a6b6:	2f58      	cmp	r7, #88	; 0x58
 800a6b8:	f000 80a3 	beq.w	800a802 <_printf_i+0x16e>
 800a6bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6c4:	e03a      	b.n	800a73c <_printf_i+0xa8>
 800a6c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6ca:	2b15      	cmp	r3, #21
 800a6cc:	d8f6      	bhi.n	800a6bc <_printf_i+0x28>
 800a6ce:	a101      	add	r1, pc, #4	; (adr r1, 800a6d4 <_printf_i+0x40>)
 800a6d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6d4:	0800a72d 	.word	0x0800a72d
 800a6d8:	0800a741 	.word	0x0800a741
 800a6dc:	0800a6bd 	.word	0x0800a6bd
 800a6e0:	0800a6bd 	.word	0x0800a6bd
 800a6e4:	0800a6bd 	.word	0x0800a6bd
 800a6e8:	0800a6bd 	.word	0x0800a6bd
 800a6ec:	0800a741 	.word	0x0800a741
 800a6f0:	0800a6bd 	.word	0x0800a6bd
 800a6f4:	0800a6bd 	.word	0x0800a6bd
 800a6f8:	0800a6bd 	.word	0x0800a6bd
 800a6fc:	0800a6bd 	.word	0x0800a6bd
 800a700:	0800a84d 	.word	0x0800a84d
 800a704:	0800a771 	.word	0x0800a771
 800a708:	0800a82f 	.word	0x0800a82f
 800a70c:	0800a6bd 	.word	0x0800a6bd
 800a710:	0800a6bd 	.word	0x0800a6bd
 800a714:	0800a86f 	.word	0x0800a86f
 800a718:	0800a6bd 	.word	0x0800a6bd
 800a71c:	0800a771 	.word	0x0800a771
 800a720:	0800a6bd 	.word	0x0800a6bd
 800a724:	0800a6bd 	.word	0x0800a6bd
 800a728:	0800a837 	.word	0x0800a837
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	1d1a      	adds	r2, r3, #4
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	602a      	str	r2, [r5, #0]
 800a734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a73c:	2301      	movs	r3, #1
 800a73e:	e0a3      	b.n	800a888 <_printf_i+0x1f4>
 800a740:	6820      	ldr	r0, [r4, #0]
 800a742:	6829      	ldr	r1, [r5, #0]
 800a744:	0606      	lsls	r6, r0, #24
 800a746:	f101 0304 	add.w	r3, r1, #4
 800a74a:	d50a      	bpl.n	800a762 <_printf_i+0xce>
 800a74c:	680e      	ldr	r6, [r1, #0]
 800a74e:	602b      	str	r3, [r5, #0]
 800a750:	2e00      	cmp	r6, #0
 800a752:	da03      	bge.n	800a75c <_printf_i+0xc8>
 800a754:	232d      	movs	r3, #45	; 0x2d
 800a756:	4276      	negs	r6, r6
 800a758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a75c:	485e      	ldr	r0, [pc, #376]	; (800a8d8 <_printf_i+0x244>)
 800a75e:	230a      	movs	r3, #10
 800a760:	e019      	b.n	800a796 <_printf_i+0x102>
 800a762:	680e      	ldr	r6, [r1, #0]
 800a764:	602b      	str	r3, [r5, #0]
 800a766:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a76a:	bf18      	it	ne
 800a76c:	b236      	sxthne	r6, r6
 800a76e:	e7ef      	b.n	800a750 <_printf_i+0xbc>
 800a770:	682b      	ldr	r3, [r5, #0]
 800a772:	6820      	ldr	r0, [r4, #0]
 800a774:	1d19      	adds	r1, r3, #4
 800a776:	6029      	str	r1, [r5, #0]
 800a778:	0601      	lsls	r1, r0, #24
 800a77a:	d501      	bpl.n	800a780 <_printf_i+0xec>
 800a77c:	681e      	ldr	r6, [r3, #0]
 800a77e:	e002      	b.n	800a786 <_printf_i+0xf2>
 800a780:	0646      	lsls	r6, r0, #25
 800a782:	d5fb      	bpl.n	800a77c <_printf_i+0xe8>
 800a784:	881e      	ldrh	r6, [r3, #0]
 800a786:	4854      	ldr	r0, [pc, #336]	; (800a8d8 <_printf_i+0x244>)
 800a788:	2f6f      	cmp	r7, #111	; 0x6f
 800a78a:	bf0c      	ite	eq
 800a78c:	2308      	moveq	r3, #8
 800a78e:	230a      	movne	r3, #10
 800a790:	2100      	movs	r1, #0
 800a792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a796:	6865      	ldr	r5, [r4, #4]
 800a798:	60a5      	str	r5, [r4, #8]
 800a79a:	2d00      	cmp	r5, #0
 800a79c:	bfa2      	ittt	ge
 800a79e:	6821      	ldrge	r1, [r4, #0]
 800a7a0:	f021 0104 	bicge.w	r1, r1, #4
 800a7a4:	6021      	strge	r1, [r4, #0]
 800a7a6:	b90e      	cbnz	r6, 800a7ac <_printf_i+0x118>
 800a7a8:	2d00      	cmp	r5, #0
 800a7aa:	d04d      	beq.n	800a848 <_printf_i+0x1b4>
 800a7ac:	4615      	mov	r5, r2
 800a7ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7b2:	fb03 6711 	mls	r7, r3, r1, r6
 800a7b6:	5dc7      	ldrb	r7, [r0, r7]
 800a7b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7bc:	4637      	mov	r7, r6
 800a7be:	42bb      	cmp	r3, r7
 800a7c0:	460e      	mov	r6, r1
 800a7c2:	d9f4      	bls.n	800a7ae <_printf_i+0x11a>
 800a7c4:	2b08      	cmp	r3, #8
 800a7c6:	d10b      	bne.n	800a7e0 <_printf_i+0x14c>
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	07de      	lsls	r6, r3, #31
 800a7cc:	d508      	bpl.n	800a7e0 <_printf_i+0x14c>
 800a7ce:	6923      	ldr	r3, [r4, #16]
 800a7d0:	6861      	ldr	r1, [r4, #4]
 800a7d2:	4299      	cmp	r1, r3
 800a7d4:	bfde      	ittt	le
 800a7d6:	2330      	movle	r3, #48	; 0x30
 800a7d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7e0:	1b52      	subs	r2, r2, r5
 800a7e2:	6122      	str	r2, [r4, #16]
 800a7e4:	f8cd a000 	str.w	sl, [sp]
 800a7e8:	464b      	mov	r3, r9
 800a7ea:	aa03      	add	r2, sp, #12
 800a7ec:	4621      	mov	r1, r4
 800a7ee:	4640      	mov	r0, r8
 800a7f0:	f7ff fee2 	bl	800a5b8 <_printf_common>
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	d14c      	bne.n	800a892 <_printf_i+0x1fe>
 800a7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fc:	b004      	add	sp, #16
 800a7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a802:	4835      	ldr	r0, [pc, #212]	; (800a8d8 <_printf_i+0x244>)
 800a804:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a808:	6829      	ldr	r1, [r5, #0]
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a810:	6029      	str	r1, [r5, #0]
 800a812:	061d      	lsls	r5, r3, #24
 800a814:	d514      	bpl.n	800a840 <_printf_i+0x1ac>
 800a816:	07df      	lsls	r7, r3, #31
 800a818:	bf44      	itt	mi
 800a81a:	f043 0320 	orrmi.w	r3, r3, #32
 800a81e:	6023      	strmi	r3, [r4, #0]
 800a820:	b91e      	cbnz	r6, 800a82a <_printf_i+0x196>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	f023 0320 	bic.w	r3, r3, #32
 800a828:	6023      	str	r3, [r4, #0]
 800a82a:	2310      	movs	r3, #16
 800a82c:	e7b0      	b.n	800a790 <_printf_i+0xfc>
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	f043 0320 	orr.w	r3, r3, #32
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	2378      	movs	r3, #120	; 0x78
 800a838:	4828      	ldr	r0, [pc, #160]	; (800a8dc <_printf_i+0x248>)
 800a83a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a83e:	e7e3      	b.n	800a808 <_printf_i+0x174>
 800a840:	0659      	lsls	r1, r3, #25
 800a842:	bf48      	it	mi
 800a844:	b2b6      	uxthmi	r6, r6
 800a846:	e7e6      	b.n	800a816 <_printf_i+0x182>
 800a848:	4615      	mov	r5, r2
 800a84a:	e7bb      	b.n	800a7c4 <_printf_i+0x130>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	6826      	ldr	r6, [r4, #0]
 800a850:	6961      	ldr	r1, [r4, #20]
 800a852:	1d18      	adds	r0, r3, #4
 800a854:	6028      	str	r0, [r5, #0]
 800a856:	0635      	lsls	r5, r6, #24
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	d501      	bpl.n	800a860 <_printf_i+0x1cc>
 800a85c:	6019      	str	r1, [r3, #0]
 800a85e:	e002      	b.n	800a866 <_printf_i+0x1d2>
 800a860:	0670      	lsls	r0, r6, #25
 800a862:	d5fb      	bpl.n	800a85c <_printf_i+0x1c8>
 800a864:	8019      	strh	r1, [r3, #0]
 800a866:	2300      	movs	r3, #0
 800a868:	6123      	str	r3, [r4, #16]
 800a86a:	4615      	mov	r5, r2
 800a86c:	e7ba      	b.n	800a7e4 <_printf_i+0x150>
 800a86e:	682b      	ldr	r3, [r5, #0]
 800a870:	1d1a      	adds	r2, r3, #4
 800a872:	602a      	str	r2, [r5, #0]
 800a874:	681d      	ldr	r5, [r3, #0]
 800a876:	6862      	ldr	r2, [r4, #4]
 800a878:	2100      	movs	r1, #0
 800a87a:	4628      	mov	r0, r5
 800a87c:	f7f5 fcb0 	bl	80001e0 <memchr>
 800a880:	b108      	cbz	r0, 800a886 <_printf_i+0x1f2>
 800a882:	1b40      	subs	r0, r0, r5
 800a884:	6060      	str	r0, [r4, #4]
 800a886:	6863      	ldr	r3, [r4, #4]
 800a888:	6123      	str	r3, [r4, #16]
 800a88a:	2300      	movs	r3, #0
 800a88c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a890:	e7a8      	b.n	800a7e4 <_printf_i+0x150>
 800a892:	6923      	ldr	r3, [r4, #16]
 800a894:	462a      	mov	r2, r5
 800a896:	4649      	mov	r1, r9
 800a898:	4640      	mov	r0, r8
 800a89a:	47d0      	blx	sl
 800a89c:	3001      	adds	r0, #1
 800a89e:	d0ab      	beq.n	800a7f8 <_printf_i+0x164>
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	079b      	lsls	r3, r3, #30
 800a8a4:	d413      	bmi.n	800a8ce <_printf_i+0x23a>
 800a8a6:	68e0      	ldr	r0, [r4, #12]
 800a8a8:	9b03      	ldr	r3, [sp, #12]
 800a8aa:	4298      	cmp	r0, r3
 800a8ac:	bfb8      	it	lt
 800a8ae:	4618      	movlt	r0, r3
 800a8b0:	e7a4      	b.n	800a7fc <_printf_i+0x168>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	4649      	mov	r1, r9
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	47d0      	blx	sl
 800a8bc:	3001      	adds	r0, #1
 800a8be:	d09b      	beq.n	800a7f8 <_printf_i+0x164>
 800a8c0:	3501      	adds	r5, #1
 800a8c2:	68e3      	ldr	r3, [r4, #12]
 800a8c4:	9903      	ldr	r1, [sp, #12]
 800a8c6:	1a5b      	subs	r3, r3, r1
 800a8c8:	42ab      	cmp	r3, r5
 800a8ca:	dcf2      	bgt.n	800a8b2 <_printf_i+0x21e>
 800a8cc:	e7eb      	b.n	800a8a6 <_printf_i+0x212>
 800a8ce:	2500      	movs	r5, #0
 800a8d0:	f104 0619 	add.w	r6, r4, #25
 800a8d4:	e7f5      	b.n	800a8c2 <_printf_i+0x22e>
 800a8d6:	bf00      	nop
 800a8d8:	0800ba0b 	.word	0x0800ba0b
 800a8dc:	0800ba1c 	.word	0x0800ba1c

0800a8e0 <_scanf_chars>:
 800a8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8e4:	4615      	mov	r5, r2
 800a8e6:	688a      	ldr	r2, [r1, #8]
 800a8e8:	4680      	mov	r8, r0
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	b932      	cbnz	r2, 800a8fc <_scanf_chars+0x1c>
 800a8ee:	698a      	ldr	r2, [r1, #24]
 800a8f0:	2a00      	cmp	r2, #0
 800a8f2:	bf0c      	ite	eq
 800a8f4:	2201      	moveq	r2, #1
 800a8f6:	f04f 32ff 	movne.w	r2, #4294967295
 800a8fa:	608a      	str	r2, [r1, #8]
 800a8fc:	6822      	ldr	r2, [r4, #0]
 800a8fe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a990 <_scanf_chars+0xb0>
 800a902:	06d1      	lsls	r1, r2, #27
 800a904:	bf5f      	itttt	pl
 800a906:	681a      	ldrpl	r2, [r3, #0]
 800a908:	1d11      	addpl	r1, r2, #4
 800a90a:	6019      	strpl	r1, [r3, #0]
 800a90c:	6816      	ldrpl	r6, [r2, #0]
 800a90e:	2700      	movs	r7, #0
 800a910:	69a0      	ldr	r0, [r4, #24]
 800a912:	b188      	cbz	r0, 800a938 <_scanf_chars+0x58>
 800a914:	2801      	cmp	r0, #1
 800a916:	d107      	bne.n	800a928 <_scanf_chars+0x48>
 800a918:	682a      	ldr	r2, [r5, #0]
 800a91a:	7811      	ldrb	r1, [r2, #0]
 800a91c:	6962      	ldr	r2, [r4, #20]
 800a91e:	5c52      	ldrb	r2, [r2, r1]
 800a920:	b952      	cbnz	r2, 800a938 <_scanf_chars+0x58>
 800a922:	2f00      	cmp	r7, #0
 800a924:	d031      	beq.n	800a98a <_scanf_chars+0xaa>
 800a926:	e022      	b.n	800a96e <_scanf_chars+0x8e>
 800a928:	2802      	cmp	r0, #2
 800a92a:	d120      	bne.n	800a96e <_scanf_chars+0x8e>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a934:	071b      	lsls	r3, r3, #28
 800a936:	d41a      	bmi.n	800a96e <_scanf_chars+0x8e>
 800a938:	6823      	ldr	r3, [r4, #0]
 800a93a:	06da      	lsls	r2, r3, #27
 800a93c:	bf5e      	ittt	pl
 800a93e:	682b      	ldrpl	r3, [r5, #0]
 800a940:	781b      	ldrbpl	r3, [r3, #0]
 800a942:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a946:	682a      	ldr	r2, [r5, #0]
 800a948:	686b      	ldr	r3, [r5, #4]
 800a94a:	3201      	adds	r2, #1
 800a94c:	602a      	str	r2, [r5, #0]
 800a94e:	68a2      	ldr	r2, [r4, #8]
 800a950:	3b01      	subs	r3, #1
 800a952:	3a01      	subs	r2, #1
 800a954:	606b      	str	r3, [r5, #4]
 800a956:	3701      	adds	r7, #1
 800a958:	60a2      	str	r2, [r4, #8]
 800a95a:	b142      	cbz	r2, 800a96e <_scanf_chars+0x8e>
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dcd7      	bgt.n	800a910 <_scanf_chars+0x30>
 800a960:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a964:	4629      	mov	r1, r5
 800a966:	4640      	mov	r0, r8
 800a968:	4798      	blx	r3
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d0d0      	beq.n	800a910 <_scanf_chars+0x30>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	f013 0310 	ands.w	r3, r3, #16
 800a974:	d105      	bne.n	800a982 <_scanf_chars+0xa2>
 800a976:	68e2      	ldr	r2, [r4, #12]
 800a978:	3201      	adds	r2, #1
 800a97a:	60e2      	str	r2, [r4, #12]
 800a97c:	69a2      	ldr	r2, [r4, #24]
 800a97e:	b102      	cbz	r2, 800a982 <_scanf_chars+0xa2>
 800a980:	7033      	strb	r3, [r6, #0]
 800a982:	6923      	ldr	r3, [r4, #16]
 800a984:	443b      	add	r3, r7
 800a986:	6123      	str	r3, [r4, #16]
 800a988:	2000      	movs	r0, #0
 800a98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a98e:	bf00      	nop
 800a990:	0800ba49 	.word	0x0800ba49

0800a994 <_scanf_i>:
 800a994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	4698      	mov	r8, r3
 800a99a:	4b76      	ldr	r3, [pc, #472]	; (800ab74 <_scanf_i+0x1e0>)
 800a99c:	460c      	mov	r4, r1
 800a99e:	4682      	mov	sl, r0
 800a9a0:	4616      	mov	r6, r2
 800a9a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9a6:	b087      	sub	sp, #28
 800a9a8:	ab03      	add	r3, sp, #12
 800a9aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a9ae:	4b72      	ldr	r3, [pc, #456]	; (800ab78 <_scanf_i+0x1e4>)
 800a9b0:	69a1      	ldr	r1, [r4, #24]
 800a9b2:	4a72      	ldr	r2, [pc, #456]	; (800ab7c <_scanf_i+0x1e8>)
 800a9b4:	2903      	cmp	r1, #3
 800a9b6:	bf18      	it	ne
 800a9b8:	461a      	movne	r2, r3
 800a9ba:	68a3      	ldr	r3, [r4, #8]
 800a9bc:	9201      	str	r2, [sp, #4]
 800a9be:	1e5a      	subs	r2, r3, #1
 800a9c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a9c4:	bf88      	it	hi
 800a9c6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a9ca:	4627      	mov	r7, r4
 800a9cc:	bf82      	ittt	hi
 800a9ce:	eb03 0905 	addhi.w	r9, r3, r5
 800a9d2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a9d6:	60a3      	strhi	r3, [r4, #8]
 800a9d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a9dc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a9e0:	bf98      	it	ls
 800a9e2:	f04f 0900 	movls.w	r9, #0
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	463d      	mov	r5, r7
 800a9ea:	f04f 0b00 	mov.w	fp, #0
 800a9ee:	6831      	ldr	r1, [r6, #0]
 800a9f0:	ab03      	add	r3, sp, #12
 800a9f2:	7809      	ldrb	r1, [r1, #0]
 800a9f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	f7f5 fbf1 	bl	80001e0 <memchr>
 800a9fe:	b328      	cbz	r0, 800aa4c <_scanf_i+0xb8>
 800aa00:	f1bb 0f01 	cmp.w	fp, #1
 800aa04:	d159      	bne.n	800aaba <_scanf_i+0x126>
 800aa06:	6862      	ldr	r2, [r4, #4]
 800aa08:	b92a      	cbnz	r2, 800aa16 <_scanf_i+0x82>
 800aa0a:	6822      	ldr	r2, [r4, #0]
 800aa0c:	2308      	movs	r3, #8
 800aa0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa12:	6063      	str	r3, [r4, #4]
 800aa14:	6022      	str	r2, [r4, #0]
 800aa16:	6822      	ldr	r2, [r4, #0]
 800aa18:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800aa1c:	6022      	str	r2, [r4, #0]
 800aa1e:	68a2      	ldr	r2, [r4, #8]
 800aa20:	1e51      	subs	r1, r2, #1
 800aa22:	60a1      	str	r1, [r4, #8]
 800aa24:	b192      	cbz	r2, 800aa4c <_scanf_i+0xb8>
 800aa26:	6832      	ldr	r2, [r6, #0]
 800aa28:	1c51      	adds	r1, r2, #1
 800aa2a:	6031      	str	r1, [r6, #0]
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	f805 2b01 	strb.w	r2, [r5], #1
 800aa32:	6872      	ldr	r2, [r6, #4]
 800aa34:	3a01      	subs	r2, #1
 800aa36:	2a00      	cmp	r2, #0
 800aa38:	6072      	str	r2, [r6, #4]
 800aa3a:	dc07      	bgt.n	800aa4c <_scanf_i+0xb8>
 800aa3c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800aa40:	4631      	mov	r1, r6
 800aa42:	4650      	mov	r0, sl
 800aa44:	4790      	blx	r2
 800aa46:	2800      	cmp	r0, #0
 800aa48:	f040 8085 	bne.w	800ab56 <_scanf_i+0x1c2>
 800aa4c:	f10b 0b01 	add.w	fp, fp, #1
 800aa50:	f1bb 0f03 	cmp.w	fp, #3
 800aa54:	d1cb      	bne.n	800a9ee <_scanf_i+0x5a>
 800aa56:	6863      	ldr	r3, [r4, #4]
 800aa58:	b90b      	cbnz	r3, 800aa5e <_scanf_i+0xca>
 800aa5a:	230a      	movs	r3, #10
 800aa5c:	6063      	str	r3, [r4, #4]
 800aa5e:	6863      	ldr	r3, [r4, #4]
 800aa60:	4947      	ldr	r1, [pc, #284]	; (800ab80 <_scanf_i+0x1ec>)
 800aa62:	6960      	ldr	r0, [r4, #20]
 800aa64:	1ac9      	subs	r1, r1, r3
 800aa66:	f000 f8af 	bl	800abc8 <__sccl>
 800aa6a:	f04f 0b00 	mov.w	fp, #0
 800aa6e:	68a3      	ldr	r3, [r4, #8]
 800aa70:	6822      	ldr	r2, [r4, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d03d      	beq.n	800aaf2 <_scanf_i+0x15e>
 800aa76:	6831      	ldr	r1, [r6, #0]
 800aa78:	6960      	ldr	r0, [r4, #20]
 800aa7a:	f891 c000 	ldrb.w	ip, [r1]
 800aa7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d035      	beq.n	800aaf2 <_scanf_i+0x15e>
 800aa86:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800aa8a:	d124      	bne.n	800aad6 <_scanf_i+0x142>
 800aa8c:	0510      	lsls	r0, r2, #20
 800aa8e:	d522      	bpl.n	800aad6 <_scanf_i+0x142>
 800aa90:	f10b 0b01 	add.w	fp, fp, #1
 800aa94:	f1b9 0f00 	cmp.w	r9, #0
 800aa98:	d003      	beq.n	800aaa2 <_scanf_i+0x10e>
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	f109 39ff 	add.w	r9, r9, #4294967295
 800aaa0:	60a3      	str	r3, [r4, #8]
 800aaa2:	6873      	ldr	r3, [r6, #4]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	6073      	str	r3, [r6, #4]
 800aaaa:	dd1b      	ble.n	800aae4 <_scanf_i+0x150>
 800aaac:	6833      	ldr	r3, [r6, #0]
 800aaae:	3301      	adds	r3, #1
 800aab0:	6033      	str	r3, [r6, #0]
 800aab2:	68a3      	ldr	r3, [r4, #8]
 800aab4:	3b01      	subs	r3, #1
 800aab6:	60a3      	str	r3, [r4, #8]
 800aab8:	e7d9      	b.n	800aa6e <_scanf_i+0xda>
 800aaba:	f1bb 0f02 	cmp.w	fp, #2
 800aabe:	d1ae      	bne.n	800aa1e <_scanf_i+0x8a>
 800aac0:	6822      	ldr	r2, [r4, #0]
 800aac2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800aac6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800aaca:	d1bf      	bne.n	800aa4c <_scanf_i+0xb8>
 800aacc:	2310      	movs	r3, #16
 800aace:	6063      	str	r3, [r4, #4]
 800aad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aad4:	e7a2      	b.n	800aa1c <_scanf_i+0x88>
 800aad6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800aada:	6022      	str	r2, [r4, #0]
 800aadc:	780b      	ldrb	r3, [r1, #0]
 800aade:	f805 3b01 	strb.w	r3, [r5], #1
 800aae2:	e7de      	b.n	800aaa2 <_scanf_i+0x10e>
 800aae4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aae8:	4631      	mov	r1, r6
 800aaea:	4650      	mov	r0, sl
 800aaec:	4798      	blx	r3
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d0df      	beq.n	800aab2 <_scanf_i+0x11e>
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	05db      	lsls	r3, r3, #23
 800aaf6:	d50d      	bpl.n	800ab14 <_scanf_i+0x180>
 800aaf8:	42bd      	cmp	r5, r7
 800aafa:	d909      	bls.n	800ab10 <_scanf_i+0x17c>
 800aafc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ab00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab04:	4632      	mov	r2, r6
 800ab06:	4650      	mov	r0, sl
 800ab08:	4798      	blx	r3
 800ab0a:	f105 39ff 	add.w	r9, r5, #4294967295
 800ab0e:	464d      	mov	r5, r9
 800ab10:	42bd      	cmp	r5, r7
 800ab12:	d02d      	beq.n	800ab70 <_scanf_i+0x1dc>
 800ab14:	6822      	ldr	r2, [r4, #0]
 800ab16:	f012 0210 	ands.w	r2, r2, #16
 800ab1a:	d113      	bne.n	800ab44 <_scanf_i+0x1b0>
 800ab1c:	702a      	strb	r2, [r5, #0]
 800ab1e:	6863      	ldr	r3, [r4, #4]
 800ab20:	9e01      	ldr	r6, [sp, #4]
 800ab22:	4639      	mov	r1, r7
 800ab24:	4650      	mov	r0, sl
 800ab26:	47b0      	blx	r6
 800ab28:	6821      	ldr	r1, [r4, #0]
 800ab2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab2e:	f011 0f20 	tst.w	r1, #32
 800ab32:	d013      	beq.n	800ab5c <_scanf_i+0x1c8>
 800ab34:	1d1a      	adds	r2, r3, #4
 800ab36:	f8c8 2000 	str.w	r2, [r8]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6018      	str	r0, [r3, #0]
 800ab3e:	68e3      	ldr	r3, [r4, #12]
 800ab40:	3301      	adds	r3, #1
 800ab42:	60e3      	str	r3, [r4, #12]
 800ab44:	1bed      	subs	r5, r5, r7
 800ab46:	44ab      	add	fp, r5
 800ab48:	6925      	ldr	r5, [r4, #16]
 800ab4a:	445d      	add	r5, fp
 800ab4c:	6125      	str	r5, [r4, #16]
 800ab4e:	2000      	movs	r0, #0
 800ab50:	b007      	add	sp, #28
 800ab52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab56:	f04f 0b00 	mov.w	fp, #0
 800ab5a:	e7ca      	b.n	800aaf2 <_scanf_i+0x15e>
 800ab5c:	1d1a      	adds	r2, r3, #4
 800ab5e:	f8c8 2000 	str.w	r2, [r8]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f011 0f01 	tst.w	r1, #1
 800ab68:	bf14      	ite	ne
 800ab6a:	8018      	strhne	r0, [r3, #0]
 800ab6c:	6018      	streq	r0, [r3, #0]
 800ab6e:	e7e6      	b.n	800ab3e <_scanf_i+0x1aa>
 800ab70:	2001      	movs	r0, #1
 800ab72:	e7ed      	b.n	800ab50 <_scanf_i+0x1bc>
 800ab74:	0800b7d0 	.word	0x0800b7d0
 800ab78:	0800ae25 	.word	0x0800ae25
 800ab7c:	0800ad3d 	.word	0x0800ad3d
 800ab80:	0800ba46 	.word	0x0800ba46

0800ab84 <_read_r>:
 800ab84:	b538      	push	{r3, r4, r5, lr}
 800ab86:	4d07      	ldr	r5, [pc, #28]	; (800aba4 <_read_r+0x20>)
 800ab88:	4604      	mov	r4, r0
 800ab8a:	4608      	mov	r0, r1
 800ab8c:	4611      	mov	r1, r2
 800ab8e:	2200      	movs	r2, #0
 800ab90:	602a      	str	r2, [r5, #0]
 800ab92:	461a      	mov	r2, r3
 800ab94:	f7f9 fa8a 	bl	80040ac <_read>
 800ab98:	1c43      	adds	r3, r0, #1
 800ab9a:	d102      	bne.n	800aba2 <_read_r+0x1e>
 800ab9c:	682b      	ldr	r3, [r5, #0]
 800ab9e:	b103      	cbz	r3, 800aba2 <_read_r+0x1e>
 800aba0:	6023      	str	r3, [r4, #0]
 800aba2:	bd38      	pop	{r3, r4, r5, pc}
 800aba4:	200008a4 	.word	0x200008a4

0800aba8 <_sbrk_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	4d06      	ldr	r5, [pc, #24]	; (800abc4 <_sbrk_r+0x1c>)
 800abac:	2300      	movs	r3, #0
 800abae:	4604      	mov	r4, r0
 800abb0:	4608      	mov	r0, r1
 800abb2:	602b      	str	r3, [r5, #0]
 800abb4:	f7f9 fae8 	bl	8004188 <_sbrk>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d102      	bne.n	800abc2 <_sbrk_r+0x1a>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	b103      	cbz	r3, 800abc2 <_sbrk_r+0x1a>
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	200008a4 	.word	0x200008a4

0800abc8 <__sccl>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	780b      	ldrb	r3, [r1, #0]
 800abcc:	4604      	mov	r4, r0
 800abce:	2b5e      	cmp	r3, #94	; 0x5e
 800abd0:	bf0b      	itete	eq
 800abd2:	784b      	ldrbeq	r3, [r1, #1]
 800abd4:	1c48      	addne	r0, r1, #1
 800abd6:	1c88      	addeq	r0, r1, #2
 800abd8:	2200      	movne	r2, #0
 800abda:	bf08      	it	eq
 800abdc:	2201      	moveq	r2, #1
 800abde:	1e61      	subs	r1, r4, #1
 800abe0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800abe4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800abe8:	42a9      	cmp	r1, r5
 800abea:	d1fb      	bne.n	800abe4 <__sccl+0x1c>
 800abec:	b90b      	cbnz	r3, 800abf2 <__sccl+0x2a>
 800abee:	3801      	subs	r0, #1
 800abf0:	bd70      	pop	{r4, r5, r6, pc}
 800abf2:	f082 0201 	eor.w	r2, r2, #1
 800abf6:	54e2      	strb	r2, [r4, r3]
 800abf8:	4605      	mov	r5, r0
 800abfa:	4628      	mov	r0, r5
 800abfc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ac00:	292d      	cmp	r1, #45	; 0x2d
 800ac02:	d006      	beq.n	800ac12 <__sccl+0x4a>
 800ac04:	295d      	cmp	r1, #93	; 0x5d
 800ac06:	d0f3      	beq.n	800abf0 <__sccl+0x28>
 800ac08:	b909      	cbnz	r1, 800ac0e <__sccl+0x46>
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	e7f0      	b.n	800abf0 <__sccl+0x28>
 800ac0e:	460b      	mov	r3, r1
 800ac10:	e7f1      	b.n	800abf6 <__sccl+0x2e>
 800ac12:	786e      	ldrb	r6, [r5, #1]
 800ac14:	2e5d      	cmp	r6, #93	; 0x5d
 800ac16:	d0fa      	beq.n	800ac0e <__sccl+0x46>
 800ac18:	42b3      	cmp	r3, r6
 800ac1a:	dcf8      	bgt.n	800ac0e <__sccl+0x46>
 800ac1c:	3502      	adds	r5, #2
 800ac1e:	4619      	mov	r1, r3
 800ac20:	3101      	adds	r1, #1
 800ac22:	428e      	cmp	r6, r1
 800ac24:	5462      	strb	r2, [r4, r1]
 800ac26:	dcfb      	bgt.n	800ac20 <__sccl+0x58>
 800ac28:	1af1      	subs	r1, r6, r3
 800ac2a:	3901      	subs	r1, #1
 800ac2c:	1c58      	adds	r0, r3, #1
 800ac2e:	42b3      	cmp	r3, r6
 800ac30:	bfa8      	it	ge
 800ac32:	2100      	movge	r1, #0
 800ac34:	1843      	adds	r3, r0, r1
 800ac36:	e7e0      	b.n	800abfa <__sccl+0x32>

0800ac38 <_strtol_l.constprop.0>:
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac3e:	d001      	beq.n	800ac44 <_strtol_l.constprop.0+0xc>
 800ac40:	2b24      	cmp	r3, #36	; 0x24
 800ac42:	d906      	bls.n	800ac52 <_strtol_l.constprop.0+0x1a>
 800ac44:	f7fe fdce 	bl	80097e4 <__errno>
 800ac48:	2316      	movs	r3, #22
 800ac4a:	6003      	str	r3, [r0, #0]
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ad38 <_strtol_l.constprop.0+0x100>
 800ac56:	460d      	mov	r5, r1
 800ac58:	462e      	mov	r6, r5
 800ac5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ac62:	f017 0708 	ands.w	r7, r7, #8
 800ac66:	d1f7      	bne.n	800ac58 <_strtol_l.constprop.0+0x20>
 800ac68:	2c2d      	cmp	r4, #45	; 0x2d
 800ac6a:	d132      	bne.n	800acd2 <_strtol_l.constprop.0+0x9a>
 800ac6c:	782c      	ldrb	r4, [r5, #0]
 800ac6e:	2701      	movs	r7, #1
 800ac70:	1cb5      	adds	r5, r6, #2
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d05b      	beq.n	800ad2e <_strtol_l.constprop.0+0xf6>
 800ac76:	2b10      	cmp	r3, #16
 800ac78:	d109      	bne.n	800ac8e <_strtol_l.constprop.0+0x56>
 800ac7a:	2c30      	cmp	r4, #48	; 0x30
 800ac7c:	d107      	bne.n	800ac8e <_strtol_l.constprop.0+0x56>
 800ac7e:	782c      	ldrb	r4, [r5, #0]
 800ac80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ac84:	2c58      	cmp	r4, #88	; 0x58
 800ac86:	d14d      	bne.n	800ad24 <_strtol_l.constprop.0+0xec>
 800ac88:	786c      	ldrb	r4, [r5, #1]
 800ac8a:	2310      	movs	r3, #16
 800ac8c:	3502      	adds	r5, #2
 800ac8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ac92:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac96:	f04f 0c00 	mov.w	ip, #0
 800ac9a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ac9e:	4666      	mov	r6, ip
 800aca0:	fb03 8a19 	mls	sl, r3, r9, r8
 800aca4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800aca8:	f1be 0f09 	cmp.w	lr, #9
 800acac:	d816      	bhi.n	800acdc <_strtol_l.constprop.0+0xa4>
 800acae:	4674      	mov	r4, lr
 800acb0:	42a3      	cmp	r3, r4
 800acb2:	dd24      	ble.n	800acfe <_strtol_l.constprop.0+0xc6>
 800acb4:	f1bc 0f00 	cmp.w	ip, #0
 800acb8:	db1e      	blt.n	800acf8 <_strtol_l.constprop.0+0xc0>
 800acba:	45b1      	cmp	r9, r6
 800acbc:	d31c      	bcc.n	800acf8 <_strtol_l.constprop.0+0xc0>
 800acbe:	d101      	bne.n	800acc4 <_strtol_l.constprop.0+0x8c>
 800acc0:	45a2      	cmp	sl, r4
 800acc2:	db19      	blt.n	800acf8 <_strtol_l.constprop.0+0xc0>
 800acc4:	fb06 4603 	mla	r6, r6, r3, r4
 800acc8:	f04f 0c01 	mov.w	ip, #1
 800accc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acd0:	e7e8      	b.n	800aca4 <_strtol_l.constprop.0+0x6c>
 800acd2:	2c2b      	cmp	r4, #43	; 0x2b
 800acd4:	bf04      	itt	eq
 800acd6:	782c      	ldrbeq	r4, [r5, #0]
 800acd8:	1cb5      	addeq	r5, r6, #2
 800acda:	e7ca      	b.n	800ac72 <_strtol_l.constprop.0+0x3a>
 800acdc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ace0:	f1be 0f19 	cmp.w	lr, #25
 800ace4:	d801      	bhi.n	800acea <_strtol_l.constprop.0+0xb2>
 800ace6:	3c37      	subs	r4, #55	; 0x37
 800ace8:	e7e2      	b.n	800acb0 <_strtol_l.constprop.0+0x78>
 800acea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800acee:	f1be 0f19 	cmp.w	lr, #25
 800acf2:	d804      	bhi.n	800acfe <_strtol_l.constprop.0+0xc6>
 800acf4:	3c57      	subs	r4, #87	; 0x57
 800acf6:	e7db      	b.n	800acb0 <_strtol_l.constprop.0+0x78>
 800acf8:	f04f 3cff 	mov.w	ip, #4294967295
 800acfc:	e7e6      	b.n	800accc <_strtol_l.constprop.0+0x94>
 800acfe:	f1bc 0f00 	cmp.w	ip, #0
 800ad02:	da05      	bge.n	800ad10 <_strtol_l.constprop.0+0xd8>
 800ad04:	2322      	movs	r3, #34	; 0x22
 800ad06:	6003      	str	r3, [r0, #0]
 800ad08:	4646      	mov	r6, r8
 800ad0a:	b942      	cbnz	r2, 800ad1e <_strtol_l.constprop.0+0xe6>
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	e79e      	b.n	800ac4e <_strtol_l.constprop.0+0x16>
 800ad10:	b107      	cbz	r7, 800ad14 <_strtol_l.constprop.0+0xdc>
 800ad12:	4276      	negs	r6, r6
 800ad14:	2a00      	cmp	r2, #0
 800ad16:	d0f9      	beq.n	800ad0c <_strtol_l.constprop.0+0xd4>
 800ad18:	f1bc 0f00 	cmp.w	ip, #0
 800ad1c:	d000      	beq.n	800ad20 <_strtol_l.constprop.0+0xe8>
 800ad1e:	1e69      	subs	r1, r5, #1
 800ad20:	6011      	str	r1, [r2, #0]
 800ad22:	e7f3      	b.n	800ad0c <_strtol_l.constprop.0+0xd4>
 800ad24:	2430      	movs	r4, #48	; 0x30
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1b1      	bne.n	800ac8e <_strtol_l.constprop.0+0x56>
 800ad2a:	2308      	movs	r3, #8
 800ad2c:	e7af      	b.n	800ac8e <_strtol_l.constprop.0+0x56>
 800ad2e:	2c30      	cmp	r4, #48	; 0x30
 800ad30:	d0a5      	beq.n	800ac7e <_strtol_l.constprop.0+0x46>
 800ad32:	230a      	movs	r3, #10
 800ad34:	e7ab      	b.n	800ac8e <_strtol_l.constprop.0+0x56>
 800ad36:	bf00      	nop
 800ad38:	0800ba49 	.word	0x0800ba49

0800ad3c <_strtol_r>:
 800ad3c:	f7ff bf7c 	b.w	800ac38 <_strtol_l.constprop.0>

0800ad40 <_strtoul_l.constprop.0>:
 800ad40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad44:	4f36      	ldr	r7, [pc, #216]	; (800ae20 <_strtoul_l.constprop.0+0xe0>)
 800ad46:	4686      	mov	lr, r0
 800ad48:	460d      	mov	r5, r1
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad50:	5de6      	ldrb	r6, [r4, r7]
 800ad52:	f016 0608 	ands.w	r6, r6, #8
 800ad56:	d1f8      	bne.n	800ad4a <_strtoul_l.constprop.0+0xa>
 800ad58:	2c2d      	cmp	r4, #45	; 0x2d
 800ad5a:	d12f      	bne.n	800adbc <_strtoul_l.constprop.0+0x7c>
 800ad5c:	782c      	ldrb	r4, [r5, #0]
 800ad5e:	2601      	movs	r6, #1
 800ad60:	1c85      	adds	r5, r0, #2
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d057      	beq.n	800ae16 <_strtoul_l.constprop.0+0xd6>
 800ad66:	2b10      	cmp	r3, #16
 800ad68:	d109      	bne.n	800ad7e <_strtoul_l.constprop.0+0x3e>
 800ad6a:	2c30      	cmp	r4, #48	; 0x30
 800ad6c:	d107      	bne.n	800ad7e <_strtoul_l.constprop.0+0x3e>
 800ad6e:	7828      	ldrb	r0, [r5, #0]
 800ad70:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad74:	2858      	cmp	r0, #88	; 0x58
 800ad76:	d149      	bne.n	800ae0c <_strtoul_l.constprop.0+0xcc>
 800ad78:	786c      	ldrb	r4, [r5, #1]
 800ad7a:	2310      	movs	r3, #16
 800ad7c:	3502      	adds	r5, #2
 800ad7e:	f04f 38ff 	mov.w	r8, #4294967295
 800ad82:	2700      	movs	r7, #0
 800ad84:	fbb8 f8f3 	udiv	r8, r8, r3
 800ad88:	fb03 f908 	mul.w	r9, r3, r8
 800ad8c:	ea6f 0909 	mvn.w	r9, r9
 800ad90:	4638      	mov	r0, r7
 800ad92:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ad96:	f1bc 0f09 	cmp.w	ip, #9
 800ad9a:	d814      	bhi.n	800adc6 <_strtoul_l.constprop.0+0x86>
 800ad9c:	4664      	mov	r4, ip
 800ad9e:	42a3      	cmp	r3, r4
 800ada0:	dd22      	ble.n	800ade8 <_strtoul_l.constprop.0+0xa8>
 800ada2:	2f00      	cmp	r7, #0
 800ada4:	db1d      	blt.n	800ade2 <_strtoul_l.constprop.0+0xa2>
 800ada6:	4580      	cmp	r8, r0
 800ada8:	d31b      	bcc.n	800ade2 <_strtoul_l.constprop.0+0xa2>
 800adaa:	d101      	bne.n	800adb0 <_strtoul_l.constprop.0+0x70>
 800adac:	45a1      	cmp	r9, r4
 800adae:	db18      	blt.n	800ade2 <_strtoul_l.constprop.0+0xa2>
 800adb0:	fb00 4003 	mla	r0, r0, r3, r4
 800adb4:	2701      	movs	r7, #1
 800adb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adba:	e7ea      	b.n	800ad92 <_strtoul_l.constprop.0+0x52>
 800adbc:	2c2b      	cmp	r4, #43	; 0x2b
 800adbe:	bf04      	itt	eq
 800adc0:	782c      	ldrbeq	r4, [r5, #0]
 800adc2:	1c85      	addeq	r5, r0, #2
 800adc4:	e7cd      	b.n	800ad62 <_strtoul_l.constprop.0+0x22>
 800adc6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800adca:	f1bc 0f19 	cmp.w	ip, #25
 800adce:	d801      	bhi.n	800add4 <_strtoul_l.constprop.0+0x94>
 800add0:	3c37      	subs	r4, #55	; 0x37
 800add2:	e7e4      	b.n	800ad9e <_strtoul_l.constprop.0+0x5e>
 800add4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800add8:	f1bc 0f19 	cmp.w	ip, #25
 800addc:	d804      	bhi.n	800ade8 <_strtoul_l.constprop.0+0xa8>
 800adde:	3c57      	subs	r4, #87	; 0x57
 800ade0:	e7dd      	b.n	800ad9e <_strtoul_l.constprop.0+0x5e>
 800ade2:	f04f 37ff 	mov.w	r7, #4294967295
 800ade6:	e7e6      	b.n	800adb6 <_strtoul_l.constprop.0+0x76>
 800ade8:	2f00      	cmp	r7, #0
 800adea:	da07      	bge.n	800adfc <_strtoul_l.constprop.0+0xbc>
 800adec:	2322      	movs	r3, #34	; 0x22
 800adee:	f8ce 3000 	str.w	r3, [lr]
 800adf2:	f04f 30ff 	mov.w	r0, #4294967295
 800adf6:	b932      	cbnz	r2, 800ae06 <_strtoul_l.constprop.0+0xc6>
 800adf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adfc:	b106      	cbz	r6, 800ae00 <_strtoul_l.constprop.0+0xc0>
 800adfe:	4240      	negs	r0, r0
 800ae00:	2a00      	cmp	r2, #0
 800ae02:	d0f9      	beq.n	800adf8 <_strtoul_l.constprop.0+0xb8>
 800ae04:	b107      	cbz	r7, 800ae08 <_strtoul_l.constprop.0+0xc8>
 800ae06:	1e69      	subs	r1, r5, #1
 800ae08:	6011      	str	r1, [r2, #0]
 800ae0a:	e7f5      	b.n	800adf8 <_strtoul_l.constprop.0+0xb8>
 800ae0c:	2430      	movs	r4, #48	; 0x30
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1b5      	bne.n	800ad7e <_strtoul_l.constprop.0+0x3e>
 800ae12:	2308      	movs	r3, #8
 800ae14:	e7b3      	b.n	800ad7e <_strtoul_l.constprop.0+0x3e>
 800ae16:	2c30      	cmp	r4, #48	; 0x30
 800ae18:	d0a9      	beq.n	800ad6e <_strtoul_l.constprop.0+0x2e>
 800ae1a:	230a      	movs	r3, #10
 800ae1c:	e7af      	b.n	800ad7e <_strtoul_l.constprop.0+0x3e>
 800ae1e:	bf00      	nop
 800ae20:	0800ba49 	.word	0x0800ba49

0800ae24 <_strtoul_r>:
 800ae24:	f7ff bf8c 	b.w	800ad40 <_strtoul_l.constprop.0>

0800ae28 <__submore>:
 800ae28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ae30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae34:	4299      	cmp	r1, r3
 800ae36:	d11d      	bne.n	800ae74 <__submore+0x4c>
 800ae38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ae3c:	f7fe fec0 	bl	8009bc0 <_malloc_r>
 800ae40:	b918      	cbnz	r0, 800ae4a <__submore+0x22>
 800ae42:	f04f 30ff 	mov.w	r0, #4294967295
 800ae46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae4e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ae50:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ae54:	6360      	str	r0, [r4, #52]	; 0x34
 800ae56:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ae5a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ae5e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ae62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ae66:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ae6a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ae6e:	6020      	str	r0, [r4, #0]
 800ae70:	2000      	movs	r0, #0
 800ae72:	e7e8      	b.n	800ae46 <__submore+0x1e>
 800ae74:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ae76:	0077      	lsls	r7, r6, #1
 800ae78:	463a      	mov	r2, r7
 800ae7a:	f000 fb2b 	bl	800b4d4 <_realloc_r>
 800ae7e:	4605      	mov	r5, r0
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d0de      	beq.n	800ae42 <__submore+0x1a>
 800ae84:	eb00 0806 	add.w	r8, r0, r6
 800ae88:	4601      	mov	r1, r0
 800ae8a:	4632      	mov	r2, r6
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	f000 faed 	bl	800b46c <memcpy>
 800ae92:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ae96:	f8c4 8000 	str.w	r8, [r4]
 800ae9a:	e7e9      	b.n	800ae70 <__submore+0x48>

0800ae9c <__swbuf_r>:
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9e:	460e      	mov	r6, r1
 800aea0:	4614      	mov	r4, r2
 800aea2:	4605      	mov	r5, r0
 800aea4:	b118      	cbz	r0, 800aeae <__swbuf_r+0x12>
 800aea6:	6983      	ldr	r3, [r0, #24]
 800aea8:	b90b      	cbnz	r3, 800aeae <__swbuf_r+0x12>
 800aeaa:	f000 f9d9 	bl	800b260 <__sinit>
 800aeae:	4b21      	ldr	r3, [pc, #132]	; (800af34 <__swbuf_r+0x98>)
 800aeb0:	429c      	cmp	r4, r3
 800aeb2:	d12b      	bne.n	800af0c <__swbuf_r+0x70>
 800aeb4:	686c      	ldr	r4, [r5, #4]
 800aeb6:	69a3      	ldr	r3, [r4, #24]
 800aeb8:	60a3      	str	r3, [r4, #8]
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	071a      	lsls	r2, r3, #28
 800aebe:	d52f      	bpl.n	800af20 <__swbuf_r+0x84>
 800aec0:	6923      	ldr	r3, [r4, #16]
 800aec2:	b36b      	cbz	r3, 800af20 <__swbuf_r+0x84>
 800aec4:	6923      	ldr	r3, [r4, #16]
 800aec6:	6820      	ldr	r0, [r4, #0]
 800aec8:	1ac0      	subs	r0, r0, r3
 800aeca:	6963      	ldr	r3, [r4, #20]
 800aecc:	b2f6      	uxtb	r6, r6
 800aece:	4283      	cmp	r3, r0
 800aed0:	4637      	mov	r7, r6
 800aed2:	dc04      	bgt.n	800aede <__swbuf_r+0x42>
 800aed4:	4621      	mov	r1, r4
 800aed6:	4628      	mov	r0, r5
 800aed8:	f000 f92e 	bl	800b138 <_fflush_r>
 800aedc:	bb30      	cbnz	r0, 800af2c <__swbuf_r+0x90>
 800aede:	68a3      	ldr	r3, [r4, #8]
 800aee0:	3b01      	subs	r3, #1
 800aee2:	60a3      	str	r3, [r4, #8]
 800aee4:	6823      	ldr	r3, [r4, #0]
 800aee6:	1c5a      	adds	r2, r3, #1
 800aee8:	6022      	str	r2, [r4, #0]
 800aeea:	701e      	strb	r6, [r3, #0]
 800aeec:	6963      	ldr	r3, [r4, #20]
 800aeee:	3001      	adds	r0, #1
 800aef0:	4283      	cmp	r3, r0
 800aef2:	d004      	beq.n	800aefe <__swbuf_r+0x62>
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	07db      	lsls	r3, r3, #31
 800aef8:	d506      	bpl.n	800af08 <__swbuf_r+0x6c>
 800aefa:	2e0a      	cmp	r6, #10
 800aefc:	d104      	bne.n	800af08 <__swbuf_r+0x6c>
 800aefe:	4621      	mov	r1, r4
 800af00:	4628      	mov	r0, r5
 800af02:	f000 f919 	bl	800b138 <_fflush_r>
 800af06:	b988      	cbnz	r0, 800af2c <__swbuf_r+0x90>
 800af08:	4638      	mov	r0, r7
 800af0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af0c:	4b0a      	ldr	r3, [pc, #40]	; (800af38 <__swbuf_r+0x9c>)
 800af0e:	429c      	cmp	r4, r3
 800af10:	d101      	bne.n	800af16 <__swbuf_r+0x7a>
 800af12:	68ac      	ldr	r4, [r5, #8]
 800af14:	e7cf      	b.n	800aeb6 <__swbuf_r+0x1a>
 800af16:	4b09      	ldr	r3, [pc, #36]	; (800af3c <__swbuf_r+0xa0>)
 800af18:	429c      	cmp	r4, r3
 800af1a:	bf08      	it	eq
 800af1c:	68ec      	ldreq	r4, [r5, #12]
 800af1e:	e7ca      	b.n	800aeb6 <__swbuf_r+0x1a>
 800af20:	4621      	mov	r1, r4
 800af22:	4628      	mov	r0, r5
 800af24:	f000 f80c 	bl	800af40 <__swsetup_r>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d0cb      	beq.n	800aec4 <__swbuf_r+0x28>
 800af2c:	f04f 37ff 	mov.w	r7, #4294967295
 800af30:	e7ea      	b.n	800af08 <__swbuf_r+0x6c>
 800af32:	bf00      	nop
 800af34:	0800bb6c 	.word	0x0800bb6c
 800af38:	0800bb8c 	.word	0x0800bb8c
 800af3c:	0800bb4c 	.word	0x0800bb4c

0800af40 <__swsetup_r>:
 800af40:	4b32      	ldr	r3, [pc, #200]	; (800b00c <__swsetup_r+0xcc>)
 800af42:	b570      	push	{r4, r5, r6, lr}
 800af44:	681d      	ldr	r5, [r3, #0]
 800af46:	4606      	mov	r6, r0
 800af48:	460c      	mov	r4, r1
 800af4a:	b125      	cbz	r5, 800af56 <__swsetup_r+0x16>
 800af4c:	69ab      	ldr	r3, [r5, #24]
 800af4e:	b913      	cbnz	r3, 800af56 <__swsetup_r+0x16>
 800af50:	4628      	mov	r0, r5
 800af52:	f000 f985 	bl	800b260 <__sinit>
 800af56:	4b2e      	ldr	r3, [pc, #184]	; (800b010 <__swsetup_r+0xd0>)
 800af58:	429c      	cmp	r4, r3
 800af5a:	d10f      	bne.n	800af7c <__swsetup_r+0x3c>
 800af5c:	686c      	ldr	r4, [r5, #4]
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af64:	0719      	lsls	r1, r3, #28
 800af66:	d42c      	bmi.n	800afc2 <__swsetup_r+0x82>
 800af68:	06dd      	lsls	r5, r3, #27
 800af6a:	d411      	bmi.n	800af90 <__swsetup_r+0x50>
 800af6c:	2309      	movs	r3, #9
 800af6e:	6033      	str	r3, [r6, #0]
 800af70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af74:	81a3      	strh	r3, [r4, #12]
 800af76:	f04f 30ff 	mov.w	r0, #4294967295
 800af7a:	e03e      	b.n	800affa <__swsetup_r+0xba>
 800af7c:	4b25      	ldr	r3, [pc, #148]	; (800b014 <__swsetup_r+0xd4>)
 800af7e:	429c      	cmp	r4, r3
 800af80:	d101      	bne.n	800af86 <__swsetup_r+0x46>
 800af82:	68ac      	ldr	r4, [r5, #8]
 800af84:	e7eb      	b.n	800af5e <__swsetup_r+0x1e>
 800af86:	4b24      	ldr	r3, [pc, #144]	; (800b018 <__swsetup_r+0xd8>)
 800af88:	429c      	cmp	r4, r3
 800af8a:	bf08      	it	eq
 800af8c:	68ec      	ldreq	r4, [r5, #12]
 800af8e:	e7e6      	b.n	800af5e <__swsetup_r+0x1e>
 800af90:	0758      	lsls	r0, r3, #29
 800af92:	d512      	bpl.n	800afba <__swsetup_r+0x7a>
 800af94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af96:	b141      	cbz	r1, 800afaa <__swsetup_r+0x6a>
 800af98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af9c:	4299      	cmp	r1, r3
 800af9e:	d002      	beq.n	800afa6 <__swsetup_r+0x66>
 800afa0:	4630      	mov	r0, r6
 800afa2:	f7fe fda1 	bl	8009ae8 <_free_r>
 800afa6:	2300      	movs	r3, #0
 800afa8:	6363      	str	r3, [r4, #52]	; 0x34
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800afb0:	81a3      	strh	r3, [r4, #12]
 800afb2:	2300      	movs	r3, #0
 800afb4:	6063      	str	r3, [r4, #4]
 800afb6:	6923      	ldr	r3, [r4, #16]
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	89a3      	ldrh	r3, [r4, #12]
 800afbc:	f043 0308 	orr.w	r3, r3, #8
 800afc0:	81a3      	strh	r3, [r4, #12]
 800afc2:	6923      	ldr	r3, [r4, #16]
 800afc4:	b94b      	cbnz	r3, 800afda <__swsetup_r+0x9a>
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afd0:	d003      	beq.n	800afda <__swsetup_r+0x9a>
 800afd2:	4621      	mov	r1, r4
 800afd4:	4630      	mov	r0, r6
 800afd6:	f000 fa09 	bl	800b3ec <__smakebuf_r>
 800afda:	89a0      	ldrh	r0, [r4, #12]
 800afdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afe0:	f010 0301 	ands.w	r3, r0, #1
 800afe4:	d00a      	beq.n	800affc <__swsetup_r+0xbc>
 800afe6:	2300      	movs	r3, #0
 800afe8:	60a3      	str	r3, [r4, #8]
 800afea:	6963      	ldr	r3, [r4, #20]
 800afec:	425b      	negs	r3, r3
 800afee:	61a3      	str	r3, [r4, #24]
 800aff0:	6923      	ldr	r3, [r4, #16]
 800aff2:	b943      	cbnz	r3, 800b006 <__swsetup_r+0xc6>
 800aff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aff8:	d1ba      	bne.n	800af70 <__swsetup_r+0x30>
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	0781      	lsls	r1, r0, #30
 800affe:	bf58      	it	pl
 800b000:	6963      	ldrpl	r3, [r4, #20]
 800b002:	60a3      	str	r3, [r4, #8]
 800b004:	e7f4      	b.n	800aff0 <__swsetup_r+0xb0>
 800b006:	2000      	movs	r0, #0
 800b008:	e7f7      	b.n	800affa <__swsetup_r+0xba>
 800b00a:	bf00      	nop
 800b00c:	20000118 	.word	0x20000118
 800b010:	0800bb6c 	.word	0x0800bb6c
 800b014:	0800bb8c 	.word	0x0800bb8c
 800b018:	0800bb4c 	.word	0x0800bb4c

0800b01c <abort>:
 800b01c:	b508      	push	{r3, lr}
 800b01e:	2006      	movs	r0, #6
 800b020:	f000 fab0 	bl	800b584 <raise>
 800b024:	2001      	movs	r0, #1
 800b026:	f7f9 f837 	bl	8004098 <_exit>
	...

0800b02c <__sflush_r>:
 800b02c:	898a      	ldrh	r2, [r1, #12]
 800b02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b032:	4605      	mov	r5, r0
 800b034:	0710      	lsls	r0, r2, #28
 800b036:	460c      	mov	r4, r1
 800b038:	d458      	bmi.n	800b0ec <__sflush_r+0xc0>
 800b03a:	684b      	ldr	r3, [r1, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	dc05      	bgt.n	800b04c <__sflush_r+0x20>
 800b040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b042:	2b00      	cmp	r3, #0
 800b044:	dc02      	bgt.n	800b04c <__sflush_r+0x20>
 800b046:	2000      	movs	r0, #0
 800b048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b04c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b04e:	2e00      	cmp	r6, #0
 800b050:	d0f9      	beq.n	800b046 <__sflush_r+0x1a>
 800b052:	2300      	movs	r3, #0
 800b054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b058:	682f      	ldr	r7, [r5, #0]
 800b05a:	602b      	str	r3, [r5, #0]
 800b05c:	d032      	beq.n	800b0c4 <__sflush_r+0x98>
 800b05e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	075a      	lsls	r2, r3, #29
 800b064:	d505      	bpl.n	800b072 <__sflush_r+0x46>
 800b066:	6863      	ldr	r3, [r4, #4]
 800b068:	1ac0      	subs	r0, r0, r3
 800b06a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b06c:	b10b      	cbz	r3, 800b072 <__sflush_r+0x46>
 800b06e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b070:	1ac0      	subs	r0, r0, r3
 800b072:	2300      	movs	r3, #0
 800b074:	4602      	mov	r2, r0
 800b076:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b078:	6a21      	ldr	r1, [r4, #32]
 800b07a:	4628      	mov	r0, r5
 800b07c:	47b0      	blx	r6
 800b07e:	1c43      	adds	r3, r0, #1
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	d106      	bne.n	800b092 <__sflush_r+0x66>
 800b084:	6829      	ldr	r1, [r5, #0]
 800b086:	291d      	cmp	r1, #29
 800b088:	d82c      	bhi.n	800b0e4 <__sflush_r+0xb8>
 800b08a:	4a2a      	ldr	r2, [pc, #168]	; (800b134 <__sflush_r+0x108>)
 800b08c:	40ca      	lsrs	r2, r1
 800b08e:	07d6      	lsls	r6, r2, #31
 800b090:	d528      	bpl.n	800b0e4 <__sflush_r+0xb8>
 800b092:	2200      	movs	r2, #0
 800b094:	6062      	str	r2, [r4, #4]
 800b096:	04d9      	lsls	r1, r3, #19
 800b098:	6922      	ldr	r2, [r4, #16]
 800b09a:	6022      	str	r2, [r4, #0]
 800b09c:	d504      	bpl.n	800b0a8 <__sflush_r+0x7c>
 800b09e:	1c42      	adds	r2, r0, #1
 800b0a0:	d101      	bne.n	800b0a6 <__sflush_r+0x7a>
 800b0a2:	682b      	ldr	r3, [r5, #0]
 800b0a4:	b903      	cbnz	r3, 800b0a8 <__sflush_r+0x7c>
 800b0a6:	6560      	str	r0, [r4, #84]	; 0x54
 800b0a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0aa:	602f      	str	r7, [r5, #0]
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	d0ca      	beq.n	800b046 <__sflush_r+0x1a>
 800b0b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0b4:	4299      	cmp	r1, r3
 800b0b6:	d002      	beq.n	800b0be <__sflush_r+0x92>
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	f7fe fd15 	bl	8009ae8 <_free_r>
 800b0be:	2000      	movs	r0, #0
 800b0c0:	6360      	str	r0, [r4, #52]	; 0x34
 800b0c2:	e7c1      	b.n	800b048 <__sflush_r+0x1c>
 800b0c4:	6a21      	ldr	r1, [r4, #32]
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b0      	blx	r6
 800b0cc:	1c41      	adds	r1, r0, #1
 800b0ce:	d1c7      	bne.n	800b060 <__sflush_r+0x34>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0c4      	beq.n	800b060 <__sflush_r+0x34>
 800b0d6:	2b1d      	cmp	r3, #29
 800b0d8:	d001      	beq.n	800b0de <__sflush_r+0xb2>
 800b0da:	2b16      	cmp	r3, #22
 800b0dc:	d101      	bne.n	800b0e2 <__sflush_r+0xb6>
 800b0de:	602f      	str	r7, [r5, #0]
 800b0e0:	e7b1      	b.n	800b046 <__sflush_r+0x1a>
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0e8:	81a3      	strh	r3, [r4, #12]
 800b0ea:	e7ad      	b.n	800b048 <__sflush_r+0x1c>
 800b0ec:	690f      	ldr	r7, [r1, #16]
 800b0ee:	2f00      	cmp	r7, #0
 800b0f0:	d0a9      	beq.n	800b046 <__sflush_r+0x1a>
 800b0f2:	0793      	lsls	r3, r2, #30
 800b0f4:	680e      	ldr	r6, [r1, #0]
 800b0f6:	bf08      	it	eq
 800b0f8:	694b      	ldreq	r3, [r1, #20]
 800b0fa:	600f      	str	r7, [r1, #0]
 800b0fc:	bf18      	it	ne
 800b0fe:	2300      	movne	r3, #0
 800b100:	eba6 0807 	sub.w	r8, r6, r7
 800b104:	608b      	str	r3, [r1, #8]
 800b106:	f1b8 0f00 	cmp.w	r8, #0
 800b10a:	dd9c      	ble.n	800b046 <__sflush_r+0x1a>
 800b10c:	6a21      	ldr	r1, [r4, #32]
 800b10e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b110:	4643      	mov	r3, r8
 800b112:	463a      	mov	r2, r7
 800b114:	4628      	mov	r0, r5
 800b116:	47b0      	blx	r6
 800b118:	2800      	cmp	r0, #0
 800b11a:	dc06      	bgt.n	800b12a <__sflush_r+0xfe>
 800b11c:	89a3      	ldrh	r3, [r4, #12]
 800b11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b122:	81a3      	strh	r3, [r4, #12]
 800b124:	f04f 30ff 	mov.w	r0, #4294967295
 800b128:	e78e      	b.n	800b048 <__sflush_r+0x1c>
 800b12a:	4407      	add	r7, r0
 800b12c:	eba8 0800 	sub.w	r8, r8, r0
 800b130:	e7e9      	b.n	800b106 <__sflush_r+0xda>
 800b132:	bf00      	nop
 800b134:	20400001 	.word	0x20400001

0800b138 <_fflush_r>:
 800b138:	b538      	push	{r3, r4, r5, lr}
 800b13a:	690b      	ldr	r3, [r1, #16]
 800b13c:	4605      	mov	r5, r0
 800b13e:	460c      	mov	r4, r1
 800b140:	b913      	cbnz	r3, 800b148 <_fflush_r+0x10>
 800b142:	2500      	movs	r5, #0
 800b144:	4628      	mov	r0, r5
 800b146:	bd38      	pop	{r3, r4, r5, pc}
 800b148:	b118      	cbz	r0, 800b152 <_fflush_r+0x1a>
 800b14a:	6983      	ldr	r3, [r0, #24]
 800b14c:	b90b      	cbnz	r3, 800b152 <_fflush_r+0x1a>
 800b14e:	f000 f887 	bl	800b260 <__sinit>
 800b152:	4b14      	ldr	r3, [pc, #80]	; (800b1a4 <_fflush_r+0x6c>)
 800b154:	429c      	cmp	r4, r3
 800b156:	d11b      	bne.n	800b190 <_fflush_r+0x58>
 800b158:	686c      	ldr	r4, [r5, #4]
 800b15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d0ef      	beq.n	800b142 <_fflush_r+0xa>
 800b162:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b164:	07d0      	lsls	r0, r2, #31
 800b166:	d404      	bmi.n	800b172 <_fflush_r+0x3a>
 800b168:	0599      	lsls	r1, r3, #22
 800b16a:	d402      	bmi.n	800b172 <_fflush_r+0x3a>
 800b16c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b16e:	f000 f915 	bl	800b39c <__retarget_lock_acquire_recursive>
 800b172:	4628      	mov	r0, r5
 800b174:	4621      	mov	r1, r4
 800b176:	f7ff ff59 	bl	800b02c <__sflush_r>
 800b17a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b17c:	07da      	lsls	r2, r3, #31
 800b17e:	4605      	mov	r5, r0
 800b180:	d4e0      	bmi.n	800b144 <_fflush_r+0xc>
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	059b      	lsls	r3, r3, #22
 800b186:	d4dd      	bmi.n	800b144 <_fflush_r+0xc>
 800b188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b18a:	f000 f908 	bl	800b39e <__retarget_lock_release_recursive>
 800b18e:	e7d9      	b.n	800b144 <_fflush_r+0xc>
 800b190:	4b05      	ldr	r3, [pc, #20]	; (800b1a8 <_fflush_r+0x70>)
 800b192:	429c      	cmp	r4, r3
 800b194:	d101      	bne.n	800b19a <_fflush_r+0x62>
 800b196:	68ac      	ldr	r4, [r5, #8]
 800b198:	e7df      	b.n	800b15a <_fflush_r+0x22>
 800b19a:	4b04      	ldr	r3, [pc, #16]	; (800b1ac <_fflush_r+0x74>)
 800b19c:	429c      	cmp	r4, r3
 800b19e:	bf08      	it	eq
 800b1a0:	68ec      	ldreq	r4, [r5, #12]
 800b1a2:	e7da      	b.n	800b15a <_fflush_r+0x22>
 800b1a4:	0800bb6c 	.word	0x0800bb6c
 800b1a8:	0800bb8c 	.word	0x0800bb8c
 800b1ac:	0800bb4c 	.word	0x0800bb4c

0800b1b0 <std>:
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	b510      	push	{r4, lr}
 800b1b4:	4604      	mov	r4, r0
 800b1b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b1ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1be:	6083      	str	r3, [r0, #8]
 800b1c0:	8181      	strh	r1, [r0, #12]
 800b1c2:	6643      	str	r3, [r0, #100]	; 0x64
 800b1c4:	81c2      	strh	r2, [r0, #14]
 800b1c6:	6183      	str	r3, [r0, #24]
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	2208      	movs	r2, #8
 800b1cc:	305c      	adds	r0, #92	; 0x5c
 800b1ce:	f7fe fb33 	bl	8009838 <memset>
 800b1d2:	4b05      	ldr	r3, [pc, #20]	; (800b1e8 <std+0x38>)
 800b1d4:	6263      	str	r3, [r4, #36]	; 0x24
 800b1d6:	4b05      	ldr	r3, [pc, #20]	; (800b1ec <std+0x3c>)
 800b1d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1da:	4b05      	ldr	r3, [pc, #20]	; (800b1f0 <std+0x40>)
 800b1dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1de:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <std+0x44>)
 800b1e0:	6224      	str	r4, [r4, #32]
 800b1e2:	6323      	str	r3, [r4, #48]	; 0x30
 800b1e4:	bd10      	pop	{r4, pc}
 800b1e6:	bf00      	nop
 800b1e8:	0800995d 	.word	0x0800995d
 800b1ec:	08009983 	.word	0x08009983
 800b1f0:	080099bb 	.word	0x080099bb
 800b1f4:	080099df 	.word	0x080099df

0800b1f8 <_cleanup_r>:
 800b1f8:	4901      	ldr	r1, [pc, #4]	; (800b200 <_cleanup_r+0x8>)
 800b1fa:	f000 b8af 	b.w	800b35c <_fwalk_reent>
 800b1fe:	bf00      	nop
 800b200:	0800b139 	.word	0x0800b139

0800b204 <__sfmoreglue>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	2268      	movs	r2, #104	; 0x68
 800b208:	1e4d      	subs	r5, r1, #1
 800b20a:	4355      	muls	r5, r2
 800b20c:	460e      	mov	r6, r1
 800b20e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b212:	f7fe fcd5 	bl	8009bc0 <_malloc_r>
 800b216:	4604      	mov	r4, r0
 800b218:	b140      	cbz	r0, 800b22c <__sfmoreglue+0x28>
 800b21a:	2100      	movs	r1, #0
 800b21c:	e9c0 1600 	strd	r1, r6, [r0]
 800b220:	300c      	adds	r0, #12
 800b222:	60a0      	str	r0, [r4, #8]
 800b224:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b228:	f7fe fb06 	bl	8009838 <memset>
 800b22c:	4620      	mov	r0, r4
 800b22e:	bd70      	pop	{r4, r5, r6, pc}

0800b230 <__sfp_lock_acquire>:
 800b230:	4801      	ldr	r0, [pc, #4]	; (800b238 <__sfp_lock_acquire+0x8>)
 800b232:	f000 b8b3 	b.w	800b39c <__retarget_lock_acquire_recursive>
 800b236:	bf00      	nop
 800b238:	200008a9 	.word	0x200008a9

0800b23c <__sfp_lock_release>:
 800b23c:	4801      	ldr	r0, [pc, #4]	; (800b244 <__sfp_lock_release+0x8>)
 800b23e:	f000 b8ae 	b.w	800b39e <__retarget_lock_release_recursive>
 800b242:	bf00      	nop
 800b244:	200008a9 	.word	0x200008a9

0800b248 <__sinit_lock_acquire>:
 800b248:	4801      	ldr	r0, [pc, #4]	; (800b250 <__sinit_lock_acquire+0x8>)
 800b24a:	f000 b8a7 	b.w	800b39c <__retarget_lock_acquire_recursive>
 800b24e:	bf00      	nop
 800b250:	200008aa 	.word	0x200008aa

0800b254 <__sinit_lock_release>:
 800b254:	4801      	ldr	r0, [pc, #4]	; (800b25c <__sinit_lock_release+0x8>)
 800b256:	f000 b8a2 	b.w	800b39e <__retarget_lock_release_recursive>
 800b25a:	bf00      	nop
 800b25c:	200008aa 	.word	0x200008aa

0800b260 <__sinit>:
 800b260:	b510      	push	{r4, lr}
 800b262:	4604      	mov	r4, r0
 800b264:	f7ff fff0 	bl	800b248 <__sinit_lock_acquire>
 800b268:	69a3      	ldr	r3, [r4, #24]
 800b26a:	b11b      	cbz	r3, 800b274 <__sinit+0x14>
 800b26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b270:	f7ff bff0 	b.w	800b254 <__sinit_lock_release>
 800b274:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b278:	6523      	str	r3, [r4, #80]	; 0x50
 800b27a:	4b13      	ldr	r3, [pc, #76]	; (800b2c8 <__sinit+0x68>)
 800b27c:	4a13      	ldr	r2, [pc, #76]	; (800b2cc <__sinit+0x6c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	62a2      	str	r2, [r4, #40]	; 0x28
 800b282:	42a3      	cmp	r3, r4
 800b284:	bf04      	itt	eq
 800b286:	2301      	moveq	r3, #1
 800b288:	61a3      	streq	r3, [r4, #24]
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 f820 	bl	800b2d0 <__sfp>
 800b290:	6060      	str	r0, [r4, #4]
 800b292:	4620      	mov	r0, r4
 800b294:	f000 f81c 	bl	800b2d0 <__sfp>
 800b298:	60a0      	str	r0, [r4, #8]
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 f818 	bl	800b2d0 <__sfp>
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	60e0      	str	r0, [r4, #12]
 800b2a4:	2104      	movs	r1, #4
 800b2a6:	6860      	ldr	r0, [r4, #4]
 800b2a8:	f7ff ff82 	bl	800b1b0 <std>
 800b2ac:	68a0      	ldr	r0, [r4, #8]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	2109      	movs	r1, #9
 800b2b2:	f7ff ff7d 	bl	800b1b0 <std>
 800b2b6:	68e0      	ldr	r0, [r4, #12]
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	2112      	movs	r1, #18
 800b2bc:	f7ff ff78 	bl	800b1b0 <std>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	61a3      	str	r3, [r4, #24]
 800b2c4:	e7d2      	b.n	800b26c <__sinit+0xc>
 800b2c6:	bf00      	nop
 800b2c8:	0800b948 	.word	0x0800b948
 800b2cc:	0800b1f9 	.word	0x0800b1f9

0800b2d0 <__sfp>:
 800b2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d2:	4607      	mov	r7, r0
 800b2d4:	f7ff ffac 	bl	800b230 <__sfp_lock_acquire>
 800b2d8:	4b1e      	ldr	r3, [pc, #120]	; (800b354 <__sfp+0x84>)
 800b2da:	681e      	ldr	r6, [r3, #0]
 800b2dc:	69b3      	ldr	r3, [r6, #24]
 800b2de:	b913      	cbnz	r3, 800b2e6 <__sfp+0x16>
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f7ff ffbd 	bl	800b260 <__sinit>
 800b2e6:	3648      	adds	r6, #72	; 0x48
 800b2e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	d503      	bpl.n	800b2f8 <__sfp+0x28>
 800b2f0:	6833      	ldr	r3, [r6, #0]
 800b2f2:	b30b      	cbz	r3, 800b338 <__sfp+0x68>
 800b2f4:	6836      	ldr	r6, [r6, #0]
 800b2f6:	e7f7      	b.n	800b2e8 <__sfp+0x18>
 800b2f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2fc:	b9d5      	cbnz	r5, 800b334 <__sfp+0x64>
 800b2fe:	4b16      	ldr	r3, [pc, #88]	; (800b358 <__sfp+0x88>)
 800b300:	60e3      	str	r3, [r4, #12]
 800b302:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b306:	6665      	str	r5, [r4, #100]	; 0x64
 800b308:	f000 f847 	bl	800b39a <__retarget_lock_init_recursive>
 800b30c:	f7ff ff96 	bl	800b23c <__sfp_lock_release>
 800b310:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b314:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b318:	6025      	str	r5, [r4, #0]
 800b31a:	61a5      	str	r5, [r4, #24]
 800b31c:	2208      	movs	r2, #8
 800b31e:	4629      	mov	r1, r5
 800b320:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b324:	f7fe fa88 	bl	8009838 <memset>
 800b328:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b32c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b330:	4620      	mov	r0, r4
 800b332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b334:	3468      	adds	r4, #104	; 0x68
 800b336:	e7d9      	b.n	800b2ec <__sfp+0x1c>
 800b338:	2104      	movs	r1, #4
 800b33a:	4638      	mov	r0, r7
 800b33c:	f7ff ff62 	bl	800b204 <__sfmoreglue>
 800b340:	4604      	mov	r4, r0
 800b342:	6030      	str	r0, [r6, #0]
 800b344:	2800      	cmp	r0, #0
 800b346:	d1d5      	bne.n	800b2f4 <__sfp+0x24>
 800b348:	f7ff ff78 	bl	800b23c <__sfp_lock_release>
 800b34c:	230c      	movs	r3, #12
 800b34e:	603b      	str	r3, [r7, #0]
 800b350:	e7ee      	b.n	800b330 <__sfp+0x60>
 800b352:	bf00      	nop
 800b354:	0800b948 	.word	0x0800b948
 800b358:	ffff0001 	.word	0xffff0001

0800b35c <_fwalk_reent>:
 800b35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b360:	4606      	mov	r6, r0
 800b362:	4688      	mov	r8, r1
 800b364:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b368:	2700      	movs	r7, #0
 800b36a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b36e:	f1b9 0901 	subs.w	r9, r9, #1
 800b372:	d505      	bpl.n	800b380 <_fwalk_reent+0x24>
 800b374:	6824      	ldr	r4, [r4, #0]
 800b376:	2c00      	cmp	r4, #0
 800b378:	d1f7      	bne.n	800b36a <_fwalk_reent+0xe>
 800b37a:	4638      	mov	r0, r7
 800b37c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b380:	89ab      	ldrh	r3, [r5, #12]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d907      	bls.n	800b396 <_fwalk_reent+0x3a>
 800b386:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b38a:	3301      	adds	r3, #1
 800b38c:	d003      	beq.n	800b396 <_fwalk_reent+0x3a>
 800b38e:	4629      	mov	r1, r5
 800b390:	4630      	mov	r0, r6
 800b392:	47c0      	blx	r8
 800b394:	4307      	orrs	r7, r0
 800b396:	3568      	adds	r5, #104	; 0x68
 800b398:	e7e9      	b.n	800b36e <_fwalk_reent+0x12>

0800b39a <__retarget_lock_init_recursive>:
 800b39a:	4770      	bx	lr

0800b39c <__retarget_lock_acquire_recursive>:
 800b39c:	4770      	bx	lr

0800b39e <__retarget_lock_release_recursive>:
 800b39e:	4770      	bx	lr

0800b3a0 <__swhatbuf_r>:
 800b3a0:	b570      	push	{r4, r5, r6, lr}
 800b3a2:	460e      	mov	r6, r1
 800b3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a8:	2900      	cmp	r1, #0
 800b3aa:	b096      	sub	sp, #88	; 0x58
 800b3ac:	4614      	mov	r4, r2
 800b3ae:	461d      	mov	r5, r3
 800b3b0:	da08      	bge.n	800b3c4 <__swhatbuf_r+0x24>
 800b3b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	602a      	str	r2, [r5, #0]
 800b3ba:	061a      	lsls	r2, r3, #24
 800b3bc:	d410      	bmi.n	800b3e0 <__swhatbuf_r+0x40>
 800b3be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3c2:	e00e      	b.n	800b3e2 <__swhatbuf_r+0x42>
 800b3c4:	466a      	mov	r2, sp
 800b3c6:	f000 f8f9 	bl	800b5bc <_fstat_r>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	dbf1      	blt.n	800b3b2 <__swhatbuf_r+0x12>
 800b3ce:	9a01      	ldr	r2, [sp, #4]
 800b3d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3d8:	425a      	negs	r2, r3
 800b3da:	415a      	adcs	r2, r3
 800b3dc:	602a      	str	r2, [r5, #0]
 800b3de:	e7ee      	b.n	800b3be <__swhatbuf_r+0x1e>
 800b3e0:	2340      	movs	r3, #64	; 0x40
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	6023      	str	r3, [r4, #0]
 800b3e6:	b016      	add	sp, #88	; 0x58
 800b3e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3ec <__smakebuf_r>:
 800b3ec:	898b      	ldrh	r3, [r1, #12]
 800b3ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3f0:	079d      	lsls	r5, r3, #30
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	460c      	mov	r4, r1
 800b3f6:	d507      	bpl.n	800b408 <__smakebuf_r+0x1c>
 800b3f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	6123      	str	r3, [r4, #16]
 800b400:	2301      	movs	r3, #1
 800b402:	6163      	str	r3, [r4, #20]
 800b404:	b002      	add	sp, #8
 800b406:	bd70      	pop	{r4, r5, r6, pc}
 800b408:	ab01      	add	r3, sp, #4
 800b40a:	466a      	mov	r2, sp
 800b40c:	f7ff ffc8 	bl	800b3a0 <__swhatbuf_r>
 800b410:	9900      	ldr	r1, [sp, #0]
 800b412:	4605      	mov	r5, r0
 800b414:	4630      	mov	r0, r6
 800b416:	f7fe fbd3 	bl	8009bc0 <_malloc_r>
 800b41a:	b948      	cbnz	r0, 800b430 <__smakebuf_r+0x44>
 800b41c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b420:	059a      	lsls	r2, r3, #22
 800b422:	d4ef      	bmi.n	800b404 <__smakebuf_r+0x18>
 800b424:	f023 0303 	bic.w	r3, r3, #3
 800b428:	f043 0302 	orr.w	r3, r3, #2
 800b42c:	81a3      	strh	r3, [r4, #12]
 800b42e:	e7e3      	b.n	800b3f8 <__smakebuf_r+0xc>
 800b430:	4b0d      	ldr	r3, [pc, #52]	; (800b468 <__smakebuf_r+0x7c>)
 800b432:	62b3      	str	r3, [r6, #40]	; 0x28
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	6020      	str	r0, [r4, #0]
 800b438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b43c:	81a3      	strh	r3, [r4, #12]
 800b43e:	9b00      	ldr	r3, [sp, #0]
 800b440:	6163      	str	r3, [r4, #20]
 800b442:	9b01      	ldr	r3, [sp, #4]
 800b444:	6120      	str	r0, [r4, #16]
 800b446:	b15b      	cbz	r3, 800b460 <__smakebuf_r+0x74>
 800b448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b44c:	4630      	mov	r0, r6
 800b44e:	f000 f8c7 	bl	800b5e0 <_isatty_r>
 800b452:	b128      	cbz	r0, 800b460 <__smakebuf_r+0x74>
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	f023 0303 	bic.w	r3, r3, #3
 800b45a:	f043 0301 	orr.w	r3, r3, #1
 800b45e:	81a3      	strh	r3, [r4, #12]
 800b460:	89a0      	ldrh	r0, [r4, #12]
 800b462:	4305      	orrs	r5, r0
 800b464:	81a5      	strh	r5, [r4, #12]
 800b466:	e7cd      	b.n	800b404 <__smakebuf_r+0x18>
 800b468:	0800b1f9 	.word	0x0800b1f9

0800b46c <memcpy>:
 800b46c:	440a      	add	r2, r1
 800b46e:	4291      	cmp	r1, r2
 800b470:	f100 33ff 	add.w	r3, r0, #4294967295
 800b474:	d100      	bne.n	800b478 <memcpy+0xc>
 800b476:	4770      	bx	lr
 800b478:	b510      	push	{r4, lr}
 800b47a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b47e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b482:	4291      	cmp	r1, r2
 800b484:	d1f9      	bne.n	800b47a <memcpy+0xe>
 800b486:	bd10      	pop	{r4, pc}

0800b488 <memmove>:
 800b488:	4288      	cmp	r0, r1
 800b48a:	b510      	push	{r4, lr}
 800b48c:	eb01 0402 	add.w	r4, r1, r2
 800b490:	d902      	bls.n	800b498 <memmove+0x10>
 800b492:	4284      	cmp	r4, r0
 800b494:	4623      	mov	r3, r4
 800b496:	d807      	bhi.n	800b4a8 <memmove+0x20>
 800b498:	1e43      	subs	r3, r0, #1
 800b49a:	42a1      	cmp	r1, r4
 800b49c:	d008      	beq.n	800b4b0 <memmove+0x28>
 800b49e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4a6:	e7f8      	b.n	800b49a <memmove+0x12>
 800b4a8:	4402      	add	r2, r0
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	428a      	cmp	r2, r1
 800b4ae:	d100      	bne.n	800b4b2 <memmove+0x2a>
 800b4b0:	bd10      	pop	{r4, pc}
 800b4b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4ba:	e7f7      	b.n	800b4ac <memmove+0x24>

0800b4bc <__malloc_lock>:
 800b4bc:	4801      	ldr	r0, [pc, #4]	; (800b4c4 <__malloc_lock+0x8>)
 800b4be:	f7ff bf6d 	b.w	800b39c <__retarget_lock_acquire_recursive>
 800b4c2:	bf00      	nop
 800b4c4:	200008a8 	.word	0x200008a8

0800b4c8 <__malloc_unlock>:
 800b4c8:	4801      	ldr	r0, [pc, #4]	; (800b4d0 <__malloc_unlock+0x8>)
 800b4ca:	f7ff bf68 	b.w	800b39e <__retarget_lock_release_recursive>
 800b4ce:	bf00      	nop
 800b4d0:	200008a8 	.word	0x200008a8

0800b4d4 <_realloc_r>:
 800b4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d8:	4680      	mov	r8, r0
 800b4da:	4614      	mov	r4, r2
 800b4dc:	460e      	mov	r6, r1
 800b4de:	b921      	cbnz	r1, 800b4ea <_realloc_r+0x16>
 800b4e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e4:	4611      	mov	r1, r2
 800b4e6:	f7fe bb6b 	b.w	8009bc0 <_malloc_r>
 800b4ea:	b92a      	cbnz	r2, 800b4f8 <_realloc_r+0x24>
 800b4ec:	f7fe fafc 	bl	8009ae8 <_free_r>
 800b4f0:	4625      	mov	r5, r4
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f8:	f000 f882 	bl	800b600 <_malloc_usable_size_r>
 800b4fc:	4284      	cmp	r4, r0
 800b4fe:	4607      	mov	r7, r0
 800b500:	d802      	bhi.n	800b508 <_realloc_r+0x34>
 800b502:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b506:	d812      	bhi.n	800b52e <_realloc_r+0x5a>
 800b508:	4621      	mov	r1, r4
 800b50a:	4640      	mov	r0, r8
 800b50c:	f7fe fb58 	bl	8009bc0 <_malloc_r>
 800b510:	4605      	mov	r5, r0
 800b512:	2800      	cmp	r0, #0
 800b514:	d0ed      	beq.n	800b4f2 <_realloc_r+0x1e>
 800b516:	42bc      	cmp	r4, r7
 800b518:	4622      	mov	r2, r4
 800b51a:	4631      	mov	r1, r6
 800b51c:	bf28      	it	cs
 800b51e:	463a      	movcs	r2, r7
 800b520:	f7ff ffa4 	bl	800b46c <memcpy>
 800b524:	4631      	mov	r1, r6
 800b526:	4640      	mov	r0, r8
 800b528:	f7fe fade 	bl	8009ae8 <_free_r>
 800b52c:	e7e1      	b.n	800b4f2 <_realloc_r+0x1e>
 800b52e:	4635      	mov	r5, r6
 800b530:	e7df      	b.n	800b4f2 <_realloc_r+0x1e>

0800b532 <_raise_r>:
 800b532:	291f      	cmp	r1, #31
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	4604      	mov	r4, r0
 800b538:	460d      	mov	r5, r1
 800b53a:	d904      	bls.n	800b546 <_raise_r+0x14>
 800b53c:	2316      	movs	r3, #22
 800b53e:	6003      	str	r3, [r0, #0]
 800b540:	f04f 30ff 	mov.w	r0, #4294967295
 800b544:	bd38      	pop	{r3, r4, r5, pc}
 800b546:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b548:	b112      	cbz	r2, 800b550 <_raise_r+0x1e>
 800b54a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b54e:	b94b      	cbnz	r3, 800b564 <_raise_r+0x32>
 800b550:	4620      	mov	r0, r4
 800b552:	f000 f831 	bl	800b5b8 <_getpid_r>
 800b556:	462a      	mov	r2, r5
 800b558:	4601      	mov	r1, r0
 800b55a:	4620      	mov	r0, r4
 800b55c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b560:	f000 b818 	b.w	800b594 <_kill_r>
 800b564:	2b01      	cmp	r3, #1
 800b566:	d00a      	beq.n	800b57e <_raise_r+0x4c>
 800b568:	1c59      	adds	r1, r3, #1
 800b56a:	d103      	bne.n	800b574 <_raise_r+0x42>
 800b56c:	2316      	movs	r3, #22
 800b56e:	6003      	str	r3, [r0, #0]
 800b570:	2001      	movs	r0, #1
 800b572:	e7e7      	b.n	800b544 <_raise_r+0x12>
 800b574:	2400      	movs	r4, #0
 800b576:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b57a:	4628      	mov	r0, r5
 800b57c:	4798      	blx	r3
 800b57e:	2000      	movs	r0, #0
 800b580:	e7e0      	b.n	800b544 <_raise_r+0x12>
	...

0800b584 <raise>:
 800b584:	4b02      	ldr	r3, [pc, #8]	; (800b590 <raise+0xc>)
 800b586:	4601      	mov	r1, r0
 800b588:	6818      	ldr	r0, [r3, #0]
 800b58a:	f7ff bfd2 	b.w	800b532 <_raise_r>
 800b58e:	bf00      	nop
 800b590:	20000118 	.word	0x20000118

0800b594 <_kill_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4d07      	ldr	r5, [pc, #28]	; (800b5b4 <_kill_r+0x20>)
 800b598:	2300      	movs	r3, #0
 800b59a:	4604      	mov	r4, r0
 800b59c:	4608      	mov	r0, r1
 800b59e:	4611      	mov	r1, r2
 800b5a0:	602b      	str	r3, [r5, #0]
 800b5a2:	f7f8 fd69 	bl	8004078 <_kill>
 800b5a6:	1c43      	adds	r3, r0, #1
 800b5a8:	d102      	bne.n	800b5b0 <_kill_r+0x1c>
 800b5aa:	682b      	ldr	r3, [r5, #0]
 800b5ac:	b103      	cbz	r3, 800b5b0 <_kill_r+0x1c>
 800b5ae:	6023      	str	r3, [r4, #0]
 800b5b0:	bd38      	pop	{r3, r4, r5, pc}
 800b5b2:	bf00      	nop
 800b5b4:	200008a4 	.word	0x200008a4

0800b5b8 <_getpid_r>:
 800b5b8:	f7f8 bd56 	b.w	8004068 <_getpid>

0800b5bc <_fstat_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d07      	ldr	r5, [pc, #28]	; (800b5dc <_fstat_r+0x20>)
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	4608      	mov	r0, r1
 800b5c6:	4611      	mov	r1, r2
 800b5c8:	602b      	str	r3, [r5, #0]
 800b5ca:	f7f8 fdb4 	bl	8004136 <_fstat>
 800b5ce:	1c43      	adds	r3, r0, #1
 800b5d0:	d102      	bne.n	800b5d8 <_fstat_r+0x1c>
 800b5d2:	682b      	ldr	r3, [r5, #0]
 800b5d4:	b103      	cbz	r3, 800b5d8 <_fstat_r+0x1c>
 800b5d6:	6023      	str	r3, [r4, #0]
 800b5d8:	bd38      	pop	{r3, r4, r5, pc}
 800b5da:	bf00      	nop
 800b5dc:	200008a4 	.word	0x200008a4

0800b5e0 <_isatty_r>:
 800b5e0:	b538      	push	{r3, r4, r5, lr}
 800b5e2:	4d06      	ldr	r5, [pc, #24]	; (800b5fc <_isatty_r+0x1c>)
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	4608      	mov	r0, r1
 800b5ea:	602b      	str	r3, [r5, #0]
 800b5ec:	f7f8 fdb3 	bl	8004156 <_isatty>
 800b5f0:	1c43      	adds	r3, r0, #1
 800b5f2:	d102      	bne.n	800b5fa <_isatty_r+0x1a>
 800b5f4:	682b      	ldr	r3, [r5, #0]
 800b5f6:	b103      	cbz	r3, 800b5fa <_isatty_r+0x1a>
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	200008a4 	.word	0x200008a4

0800b600 <_malloc_usable_size_r>:
 800b600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b604:	1f18      	subs	r0, r3, #4
 800b606:	2b00      	cmp	r3, #0
 800b608:	bfbc      	itt	lt
 800b60a:	580b      	ldrlt	r3, [r1, r0]
 800b60c:	18c0      	addlt	r0, r0, r3
 800b60e:	4770      	bx	lr

0800b610 <_init>:
 800b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b612:	bf00      	nop
 800b614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b616:	bc08      	pop	{r3}
 800b618:	469e      	mov	lr, r3
 800b61a:	4770      	bx	lr

0800b61c <_fini>:
 800b61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b61e:	bf00      	nop
 800b620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b622:	bc08      	pop	{r3}
 800b624:	469e      	mov	lr, r3
 800b626:	4770      	bx	lr
