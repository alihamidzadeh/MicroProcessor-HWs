
Final-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a50c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800a69c  0800a69c  0001a69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9dc  0800a9dc  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9dc  0800a9dc  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9dc  0800a9dc  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9dc  0800a9dc  0001a9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800a9e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00000728  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008a4  200008a4  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d855  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003752  00000000  00000000  0003da01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  00041158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016d0  00000000  00000000  00042930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021394  00000000  00000000  00044000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d8d7  00000000  00000000  00065394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5c4c  00000000  00000000  00082c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001488b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070b4  00000000  00000000  00148908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a684 	.word	0x0800a684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	0800a684 	.word	0x0800a684

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000019a 	.word	0x2000019a
 800039c:	2000019c 	.word	0x2000019c
 80003a0:	2000019e 	.word	0x2000019e
 80003a4:	200001b0 	.word	0x200001b0
 80003a8:	200001a0 	.word	0x200001a0
 80003ac:	200001b4 	.word	0x200001b4

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f003 fe81 	bl	80041b8 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f003 fcd2 	bl	8003e60 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f004 f808 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f004 f800 	bl	80044dc <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 fff4 	bl	80044dc <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f003 fcaa 	bl	8003e60 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f003 fca4 	bl	8003e60 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f003 fc9e 	bl	8003e60 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f003 fc8f 	bl	8003e60 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f003 fc84 	bl	8003e60 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200001b4 	.word	0x200001b4
 80005a8:	200001b7 	.word	0x200001b7
 80005ac:	20000198 	.word	0x20000198
 80005b0:	20000000 	.word	0x20000000
 80005b4:	2000019a 	.word	0x2000019a
 80005b8:	2000019c 	.word	0x2000019c
 80005bc:	2000019e 	.word	0x2000019e
 80005c0:	200001a0 	.word	0x200001a0
 80005c4:	200001b0 	.word	0x200001b0
 80005c8:	200001b5 	.word	0x200001b5
 80005cc:	200001b6 	.word	0x200001b6

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200001b0 	.word	0x200001b0
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200001b8 	.word	0x200001b8

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f003 fb8c 	bl	8003e60 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001b7 	.word	0x200001b7
 80007ac:	200001b8 	.word	0x200001b8

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001b5 	.word	0x200001b5

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 fdfe 	bl	80044dc <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 fdf2 	bl	80044dc <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001b0 	.word	0x200001b0
 8000930:	2000019a 	.word	0x2000019a
 8000934:	2000019c 	.word	0x2000019c
 8000938:	200001b4 	.word	0x200001b4

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f003 fdc6 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f003 fa85 	bl	8003e60 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f003 fdbb 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f003 fa7a 	bl	8003e60 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fdb0 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f003 fa6f 	bl	8003e60 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001b0 	.word	0x200001b0
 800098c:	2000019e 	.word	0x2000019e

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f003 fd8d 	bl	80044dc <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200001b0 	.word	0x200001b0
 80009e0:	200001a0 	.word	0x200001a0

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f003 fd63 	bl	80044dc <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001b0 	.word	0x200001b0
 8000a34:	200001a0 	.word	0x200001a0

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f003 f9aa 	bl	8003d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f844 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 fae8 	bl	8001018 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a48:	f000 f8a8 	bl	8000b9c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a4c:	f000 f940 	bl	8000cd0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000a50:	f000 fac0 	bl	8000fd4 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8000a54:	f000 f8e2 	bl	8000c1c <MX_RTC_Init>
  MX_TIM4_Init();
 8000a58:	f000 fa3e 	bl	8000ed8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000a5c:	f000 fa8a 	bl	8000f74 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000a60:	f000 f974 	bl	8000d4c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a64:	f000 f9c0 	bl	8000de8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000a68:	4814      	ldr	r0, [pc, #80]	; (8000abc <main+0x84>)
 8000a6a:	f005 ffab 	bl	80069c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <main+0x88>)
 8000a70:	f005 ffa8 	bl	80069c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000a74:	4813      	ldr	r0, [pc, #76]	; (8000ac4 <main+0x8c>)
 8000a76:	f005 ffa5 	bl	80069c4 <HAL_TIM_Base_Start_IT>


  programInit();
 8000a7a:	f000 ff39 	bl	80018f0 <programInit>
  PWM_Start();
 8000a7e:	f002 fecd 	bl	800381c <PWM_Start>


  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a88:	480f      	ldr	r0, [pc, #60]	; (8000ac8 <main+0x90>)
 8000a8a:	f003 fd27 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <main+0x90>)
 8000a96:	f003 fd21 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <main+0x90>)
 8000aa2:	f003 fd1b 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aac:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <main+0x90>)
 8000aae:	f003 fd15 	bl	80044dc <HAL_GPIO_WritePin>
  uart_rx_enable_it();
 8000ab2:	f002 fc61 	bl	8003378 <uart_rx_enable_it>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  programLoop();
 8000ab6:	f001 fb5f 	bl	8002178 <programLoop>
  {
 8000aba:	e7fc      	b.n	8000ab6 <main+0x7e>
 8000abc:	2000032c 	.word	0x2000032c
 8000ac0:	20000294 	.word	0x20000294
 8000ac4:	200002e0 	.word	0x200002e0
 8000ac8:	48000c00 	.word	0x48000c00

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b09e      	sub	sp, #120	; 0x78
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ad6:	2228      	movs	r2, #40	; 0x28
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f008 fbb6 	bl	800924c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af0:	463b      	mov	r3, r7
 8000af2:	223c      	movs	r2, #60	; 0x3c
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f008 fba8 	bl	800924c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000afc:	230b      	movs	r3, #11
 8000afe:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0e:	2310      	movs	r3, #16
 8000b10:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b12:	2301      	movs	r3, #1
 8000b14:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b16:	2302      	movs	r3, #2
 8000b18:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b20:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b24:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 ff18 	bl	8004960 <HAL_RCC_OscConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b36:	f000 fb7f 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b54:	2102      	movs	r1, #2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f004 ff40 	bl	80059dc <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b62:	f000 fb69 	bl	8001238 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <SystemClock_Config+0xcc>)
 8000b68:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b76:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f005 f962 	bl	8005e48 <HAL_RCCEx_PeriphCLKConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b8a:	f000 fb55 	bl	8001238 <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3778      	adds	r7, #120	; 0x78
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	00030021 	.word	0x00030021

08000b9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_I2C1_Init+0x74>)
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <MX_I2C1_Init+0x78>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_I2C1_Init+0x74>)
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <MX_I2C1_Init+0x7c>)
 8000baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_I2C1_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_I2C1_Init+0x74>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_I2C1_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_I2C1_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_I2C1_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_I2C1_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_I2C1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd6:	480e      	ldr	r0, [pc, #56]	; (8000c10 <MX_I2C1_Init+0x74>)
 8000bd8:	f003 fcca 	bl	8004570 <HAL_I2C_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000be2:	f000 fb29 	bl	8001238 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000be6:	2100      	movs	r1, #0
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <MX_I2C1_Init+0x74>)
 8000bea:	f003 fd50 	bl	800468e <HAL_I2CEx_ConfigAnalogFilter>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bf4:	f000 fb20 	bl	8001238 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_I2C1_Init+0x74>)
 8000bfc:	f003 fd92 	bl	8004724 <HAL_I2CEx_ConfigDigitalFilter>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c06:	f000 fb17 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200001bc 	.word	0x200001bc
 8000c14:	40005400 	.word	0x40005400
 8000c18:	2000090e 	.word	0x2000090e

08000c1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c30:	2300      	movs	r3, #0
 8000c32:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <MX_RTC_Init+0xac>)
 8000c36:	4a25      	ldr	r2, [pc, #148]	; (8000ccc <MX_RTC_Init+0xb0>)
 8000c38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MX_RTC_Init+0xac>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <MX_RTC_Init+0xac>)
 8000c42:	2227      	movs	r2, #39	; 0x27
 8000c44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <MX_RTC_Init+0xac>)
 8000c48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <MX_RTC_Init+0xac>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <MX_RTC_Init+0xac>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_RTC_Init+0xac>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c60:	4819      	ldr	r0, [pc, #100]	; (8000cc8 <MX_RTC_Init+0xac>)
 8000c62:	f005 faa1 	bl	80061a8 <HAL_RTC_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000c6c:	f000 fae4 	bl	8001238 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2201      	movs	r2, #1
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <MX_RTC_Init+0xac>)
 8000c8c:	f005 fb0f 	bl	80062ae <HAL_RTC_SetTime>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000c96:	f000 facf 	bl	8001238 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000caa:	463b      	mov	r3, r7
 8000cac:	2201      	movs	r2, #1
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_RTC_Init+0xac>)
 8000cb2:	f005 fbf4 	bl	800649e <HAL_RTC_SetDate>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000cbc:	f000 fabc 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000210 	.word	0x20000210
 8000ccc:	40002800 	.word	0x40002800

08000cd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	; (8000d48 <MX_SPI1_Init+0x78>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000cdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ce0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000cea:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d06:	2208      	movs	r2, #8
 8000d08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d1e:	2207      	movs	r2, #7
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d30:	f005 fd46 	bl	80067c0 <HAL_SPI_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d3a:	f000 fa7d 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000230 	.word	0x20000230
 8000d48:	40013000 	.word	0x40013000

08000d4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18000;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d74:	f244 6250 	movw	r2, #18000	; 0x4650
 8000d78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d94:	4813      	ldr	r0, [pc, #76]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d96:	f005 fdbe 	bl	8006916 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000da0:	f000 fa4a 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000db2:	f006 fa07 	bl	80071c4 <HAL_TIM_ConfigClockSource>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000dbc:	f000 fa3c 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000dce:	f006 ff11 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000dd8:	f000 fa2e 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000294 	.word	0x20000294

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e1c:	4a2d      	ldr	r2, [pc, #180]	; (8000ed4 <MX_TIM3_Init+0xec>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e20:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e40:	4823      	ldr	r0, [pc, #140]	; (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e42:	f005 fd68 	bl	8006916 <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e4c:	f000 f9f4 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	481c      	ldr	r0, [pc, #112]	; (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e5e:	f006 f9b1 	bl	80071c4 <HAL_TIM_ConfigClockSource>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e68:	f000 f9e6 	bl	8001238 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6c:	4818      	ldr	r0, [pc, #96]	; (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e6e:	f005 fe13 	bl	8006a98 <HAL_TIM_PWM_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e78:	f000 f9de 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e8c:	f006 feb2 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e96:	f000 f9cf 	bl	8001238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9a:	2360      	movs	r3, #96	; 0x60
 8000e9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4807      	ldr	r0, [pc, #28]	; (8000ed0 <MX_TIM3_Init+0xe8>)
 8000eb2:	f006 f873 	bl	8006f9c <HAL_TIM_PWM_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ebc:	f000 f9bc 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <MX_TIM3_Init+0xe8>)
 8000ec2:	f002 fbc5 	bl	8003650 <HAL_TIM_MspPostInit>

}
 8000ec6:	bf00      	nop
 8000ec8:	3738      	adds	r7, #56	; 0x38
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200002e0 	.word	0x200002e0
 8000ed4:	40000400 	.word	0x40000400

08000ed8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <MX_TIM4_Init+0x94>)
 8000ef8:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <MX_TIM4_Init+0x98>)
 8000efa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48-1;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_TIM4_Init+0x94>)
 8000efe:	222f      	movs	r2, #47	; 0x2f
 8000f00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_TIM4_Init+0x94>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_TIM4_Init+0x94>)
 8000f0a:	2209      	movs	r2, #9
 8000f0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_TIM4_Init+0x94>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_TIM4_Init+0x94>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f1a:	4814      	ldr	r0, [pc, #80]	; (8000f6c <MX_TIM4_Init+0x94>)
 8000f1c:	f005 fcfb 	bl	8006916 <HAL_TIM_Base_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000f26:	f000 f987 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_TIM4_Init+0x94>)
 8000f38:	f006 f944 	bl	80071c4 <HAL_TIM_ConfigClockSource>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000f42:	f000 f979 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <MX_TIM4_Init+0x94>)
 8000f54:	f006 fe4e 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000f5e:	f000 f96b 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000032c 	.word	0x2000032c
 8000f70:	40000800 	.word	0x40000800

08000f74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_USART1_UART_Init+0x58>)
 8000f7a:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <MX_USART1_UART_Init+0x5c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_USART1_UART_Init+0x58>)
 8000f80:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_USART1_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_USART1_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_USART1_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_USART1_UART_Init+0x58>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_USART1_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_USART1_UART_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_USART1_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_USART1_UART_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_USART1_UART_Init+0x58>)
 8000fb8:	f006 feba 	bl	8007d30 <HAL_UART_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fc2:	f000 f939 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000378 	.word	0x20000378
 8000fd0:	40013800 	.word	0x40013800

08000fd4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <MX_USB_PCD_Init+0x3c>)
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <MX_USB_PCD_Init+0x40>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_USB_PCD_Init+0x3c>)
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <MX_USB_PCD_Init+0x3c>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_USB_PCD_Init+0x3c>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <MX_USB_PCD_Init+0x3c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <MX_USB_PCD_Init+0x3c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <MX_USB_PCD_Init+0x3c>)
 8000ffe:	f003 fbdd 	bl	80047bc <HAL_PCD_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001008:	f000 f916 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000400 	.word	0x20000400
 8001014:	40005c00 	.word	0x40005c00

08001018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800102e:	4b7d      	ldr	r3, [pc, #500]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	4a7c      	ldr	r2, [pc, #496]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001038:	6153      	str	r3, [r2, #20]
 800103a:	4b7a      	ldr	r3, [pc, #488]	; (8001224 <MX_GPIO_Init+0x20c>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	4b77      	ldr	r3, [pc, #476]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a76      	ldr	r2, [pc, #472]	; (8001224 <MX_GPIO_Init+0x20c>)
 800104c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001050:	6153      	str	r3, [r2, #20]
 8001052:	4b74      	ldr	r3, [pc, #464]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105e:	4b71      	ldr	r3, [pc, #452]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a70      	ldr	r2, [pc, #448]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001064:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	4b6e      	ldr	r3, [pc, #440]	; (8001224 <MX_GPIO_Init+0x20c>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b6b      	ldr	r3, [pc, #428]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	4a6a      	ldr	r2, [pc, #424]	; (8001224 <MX_GPIO_Init+0x20c>)
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	6153      	str	r3, [r2, #20]
 8001082:	4b68      	ldr	r3, [pc, #416]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b65      	ldr	r3, [pc, #404]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	4a64      	ldr	r2, [pc, #400]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001098:	6153      	str	r3, [r2, #20]
 800109a:	4b62      	ldr	r3, [pc, #392]	; (8001224 <MX_GPIO_Init+0x20c>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a6:	4b5f      	ldr	r3, [pc, #380]	; (8001224 <MX_GPIO_Init+0x20c>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	4a5e      	ldr	r2, [pc, #376]	; (8001224 <MX_GPIO_Init+0x20c>)
 80010ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010b0:	6153      	str	r3, [r2, #20]
 80010b2:	4b5c      	ldr	r3, [pc, #368]	; (8001224 <MX_GPIO_Init+0x20c>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010be:	2200      	movs	r2, #0
 80010c0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80010c4:	4858      	ldr	r0, [pc, #352]	; (8001228 <MX_GPIO_Init+0x210>)
 80010c6:	f003 fa09 	bl	80044dc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2110      	movs	r1, #16
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f003 fa03 	bl	80044dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2150      	movs	r1, #80	; 0x50
 80010da:	4854      	ldr	r0, [pc, #336]	; (800122c <MX_GPIO_Init+0x214>)
 80010dc:	f003 f9fe 	bl	80044dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f242 0105 	movw	r1, #8197	; 0x2005
 80010e6:	4852      	ldr	r0, [pc, #328]	; (8001230 <MX_GPIO_Init+0x218>)
 80010e8:	f003 f9f8 	bl	80044dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 413e 	mov.w	r1, #48640	; 0xbe00
 80010f2:	4850      	ldr	r0, [pc, #320]	; (8001234 <MX_GPIO_Init+0x21c>)
 80010f4:	f003 f9f2 	bl	80044dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010f8:	f64f 7308 	movw	r3, #65288	; 0xff08
 80010fc:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	4845      	ldr	r0, [pc, #276]	; (8001228 <MX_GPIO_Init+0x210>)
 8001112:	f003 f851 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8001116:	2320      	movs	r3, #32
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800111a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800111e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	483f      	ldr	r0, [pc, #252]	; (8001228 <MX_GPIO_Init+0x210>)
 800112c:	f003 f844 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001130:	2301      	movs	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f003 f837 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114a:	2310      	movs	r3, #16
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f003 f828 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001168:	2350      	movs	r3, #80	; 0x50
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	482b      	ldr	r0, [pc, #172]	; (800122c <MX_GPIO_Init+0x214>)
 8001180:	f003 f81a 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 8001184:	f242 0305 	movw	r3, #8197	; 0x2005
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	4824      	ldr	r0, [pc, #144]	; (8001230 <MX_GPIO_Init+0x218>)
 800119e:	f003 f80b 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80011a2:	f44f 433e 	mov.w	r3, #48640	; 0xbe00
 80011a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	481e      	ldr	r0, [pc, #120]	; (8001234 <MX_GPIO_Init+0x21c>)
 80011bc:	f002 fffc 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011c0:	230f      	movs	r3, #15
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ca:	2302      	movs	r3, #2
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	4817      	ldr	r0, [pc, #92]	; (8001234 <MX_GPIO_Init+0x21c>)
 80011d6:	f002 ffef 	bl	80041b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2100      	movs	r1, #0
 80011de:	2006      	movs	r0, #6
 80011e0:	f002 ff3d 	bl	800405e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011e4:	2006      	movs	r0, #6
 80011e6:	f002 ff56 	bl	8004096 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 1);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2100      	movs	r1, #0
 80011ee:	2007      	movs	r0, #7
 80011f0:	f002 ff35 	bl	800405e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011f4:	2007      	movs	r0, #7
 80011f6:	f002 ff4e 	bl	8004096 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 1);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2100      	movs	r1, #0
 80011fe:	2008      	movs	r0, #8
 8001200:	f002 ff2d 	bl	800405e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001204:	2008      	movs	r0, #8
 8001206:	f002 ff46 	bl	8004096 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 800120a:	2201      	movs	r2, #1
 800120c:	2100      	movs	r1, #0
 800120e:	2009      	movs	r0, #9
 8001210:	f002 ff25 	bl	800405e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001214:	2009      	movs	r0, #9
 8001216:	f002 ff3e 	bl	8004096 <HAL_NVIC_EnableIRQ>

}
 800121a:	bf00      	nop
 800121c:	3730      	adds	r7, #48	; 0x30
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	48001000 	.word	0x48001000
 800122c:	48000800 	.word	0x48000800
 8001230:	48000400 	.word	0x48000400
 8001234:	48000c00 	.word	0x48000c00

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	e7fe      	b.n	8001240 <Error_Handler+0x8>
	...

08001244 <set_start_time>:
extern RTC_HandleTypeDef hrtc;

RTC_TimeTypeDef mytime ;
RTC_DateTypeDef mydate ;

void set_start_time(int hour, int minute, int second){
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]

	RTC_TimeTypeDef start_t ;

	start_t.Hours = 20;
 8001250:	2314      	movs	r3, #20
 8001252:	753b      	strb	r3, [r7, #20]
	start_t.Minutes = 20;
 8001254:	2314      	movs	r3, #20
 8001256:	757b      	strb	r3, [r7, #21]
	start_t.Seconds = 20;
 8001258:	2314      	movs	r3, #20
 800125a:	75bb      	strb	r3, [r7, #22]

    HAL_RTC_SetTime(&hrtc, &start_t, RTC_FORMAT_BIN);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4803      	ldr	r0, [pc, #12]	; (8001274 <set_start_time+0x30>)
 8001266:	f005 f822 	bl	80062ae <HAL_RTC_SetTime>
}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000210 	.word	0x20000210

08001278 <set_start_day>:

void set_start_day(int year, int month, int day){
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef start_t ;

	start_t.Year = 2024;
 8001284:	23e8      	movs	r3, #232	; 0xe8
 8001286:	75fb      	strb	r3, [r7, #23]
	start_t.Month = 3;
 8001288:	2303      	movs	r3, #3
 800128a:	757b      	strb	r3, [r7, #21]
	start_t.Date = 20;
 800128c:	2314      	movs	r3, #20
 800128e:	75bb      	strb	r3, [r7, #22]

    HAL_RTC_SetDate(&hrtc, &start_t, RTC_FORMAT_BIN);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	4619      	mov	r1, r3
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <set_start_day+0x30>)
 800129a:	f005 f900 	bl	800649e <HAL_RTC_SetDate>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000210 	.word	0x20000210

080012ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
  if (last_gpio_exti + 70 > HAL_GetTick()) // Simple button debouncing
 80012b6:	4bb3      	ldr	r3, [pc, #716]	; (8001584 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f103 0446 	add.w	r4, r3, #70	; 0x46
 80012be:	f002 fdc3 	bl	8003e48 <HAL_GetTick>
 80012c2:	4603      	mov	r3, r0
 80012c4:	429c      	cmp	r4, r3
 80012c6:	f200 81b8 	bhi.w	800163a <HAL_GPIO_EXTI_Callback+0x38e>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 80012ca:	f002 fdbd 	bl	8003e48 <HAL_GetTick>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4aac      	ldr	r2, [pc, #688]	; (8001584 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80012d2:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 80012d4:	23ff      	movs	r3, #255	; 0xff
 80012d6:	73fb      	strb	r3, [r7, #15]
  int8_t column_number = -1;
 80012d8:	23ff      	movs	r3, #255	; 0xff
 80012da:	73bb      	strb	r3, [r7, #14]
  {
    // blue_button_pressed = 1;
    // return;
  }

  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 80012dc:	2300      	movs	r3, #0
 80012de:	737b      	strb	r3, [r7, #13]
 80012e0:	e00b      	b.n	80012fa <HAL_GPIO_EXTI_Callback+0x4e>
  {
    if (GPIO_Pin == Row_pins[row])
 80012e2:	7b7b      	ldrb	r3, [r7, #13]
 80012e4:	4aa8      	ldr	r2, [pc, #672]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80012e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ea:	88fa      	ldrh	r2, [r7, #6]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d101      	bne.n	80012f4 <HAL_GPIO_EXTI_Callback+0x48>
    {
      row_number = row;
 80012f0:	7b7b      	ldrb	r3, [r7, #13]
 80012f2:	73fb      	strb	r3, [r7, #15]
  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 80012f4:	7b7b      	ldrb	r3, [r7, #13]
 80012f6:	3301      	adds	r3, #1
 80012f8:	737b      	strb	r3, [r7, #13]
 80012fa:	7b7b      	ldrb	r3, [r7, #13]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d9f0      	bls.n	80012e2 <HAL_GPIO_EXTI_Callback+0x36>
    }
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8001300:	4ba2      	ldr	r3, [pc, #648]	; (800158c <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001302:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001306:	2200      	movs	r2, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f003 f8e7 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 800130e:	4b9f      	ldr	r3, [pc, #636]	; (800158c <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001314:	2200      	movs	r2, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f003 f8e0 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 800131c:	4b9b      	ldr	r3, [pc, #620]	; (800158c <HAL_GPIO_EXTI_Callback+0x2e0>)
 800131e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001322:	2200      	movs	r2, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f003 f8d9 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 800132a:	4b98      	ldr	r3, [pc, #608]	; (800158c <HAL_GPIO_EXTI_Callback+0x2e0>)
 800132c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001330:	2200      	movs	r2, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f003 f8d2 	bl	80044dc <HAL_GPIO_WritePin>

  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8001338:	2300      	movs	r3, #0
 800133a:	733b      	strb	r3, [r7, #12]
 800133c:	e02d      	b.n	800139a <HAL_GPIO_EXTI_Callback+0xee>
  {
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 800133e:	7b3b      	ldrb	r3, [r7, #12]
 8001340:	4a93      	ldr	r2, [pc, #588]	; (8001590 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001342:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001346:	7b3b      	ldrb	r3, [r7, #12]
 8001348:	4a92      	ldr	r2, [pc, #584]	; (8001594 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800134a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134e:	2201      	movs	r2, #1
 8001350:	4619      	mov	r1, r3
 8001352:	f003 f8c3 	bl	80044dc <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number]))
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4a8f      	ldr	r2, [pc, #572]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2ec>)
 800135c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001364:	4988      	ldr	r1, [pc, #544]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001366:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800136a:	4619      	mov	r1, r3
 800136c:	4610      	mov	r0, r2
 800136e:	f003 f89d 	bl	80044ac <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_GPIO_EXTI_Callback+0xd0>
    {
      column_number = col;
 8001378:	7b3b      	ldrb	r3, [r7, #12]
 800137a:	73bb      	strb	r3, [r7, #14]
    }
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 800137c:	7b3b      	ldrb	r3, [r7, #12]
 800137e:	4a84      	ldr	r2, [pc, #528]	; (8001590 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001380:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001384:	7b3b      	ldrb	r3, [r7, #12]
 8001386:	4a83      	ldr	r2, [pc, #524]	; (8001594 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800138c:	2200      	movs	r2, #0
 800138e:	4619      	mov	r1, r3
 8001390:	f003 f8a4 	bl	80044dc <HAL_GPIO_WritePin>
  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8001394:	7b3b      	ldrb	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	733b      	strb	r3, [r7, #12]
 800139a:	7b3b      	ldrb	r3, [r7, #12]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d9ce      	bls.n	800133e <HAL_GPIO_EXTI_Callback+0x92>
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 80013a0:	4b7a      	ldr	r3, [pc, #488]	; (800158c <HAL_GPIO_EXTI_Callback+0x2e0>)
 80013a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a6:	2201      	movs	r2, #1
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 f897 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 80013ae:	4b77      	ldr	r3, [pc, #476]	; (800158c <HAL_GPIO_EXTI_Callback+0x2e0>)
 80013b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b4:	2201      	movs	r2, #1
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 f890 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 80013bc:	4b73      	ldr	r3, [pc, #460]	; (800158c <HAL_GPIO_EXTI_Callback+0x2e0>)
 80013be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c2:	2201      	movs	r2, #1
 80013c4:	4618      	mov	r0, r3
 80013c6:	f003 f889 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 80013ca:	4b70      	ldr	r3, [pc, #448]	; (800158c <HAL_GPIO_EXTI_Callback+0x2e0>)
 80013cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d0:	2201      	movs	r2, #1
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 f882 	bl	80044dc <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 80013d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e0:	f000 812d 	beq.w	800163e <HAL_GPIO_EXTI_Callback+0x392>
 80013e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	f000 8127 	beq.w	800163e <HAL_GPIO_EXTI_Callback+0x392>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	4413      	add	r3, r2
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	3301      	adds	r3, #1
 80013fe:	72fb      	strb	r3, [r7, #11]
  switch (button_number){
 8001400:	7afb      	ldrb	r3, [r7, #11]
 8001402:	3b01      	subs	r3, #1
 8001404:	2b0f      	cmp	r3, #15
 8001406:	f200 811c 	bhi.w	8001642 <HAL_GPIO_EXTI_Callback+0x396>
 800140a:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <HAL_GPIO_EXTI_Callback+0x164>)
 800140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001410:	08001451 	.word	0x08001451
 8001414:	08001465 	.word	0x08001465
 8001418:	08001479 	.word	0x08001479
 800141c:	08001487 	.word	0x08001487
 8001420:	08001495 	.word	0x08001495
 8001424:	080014a9 	.word	0x080014a9
 8001428:	080014b7 	.word	0x080014b7
 800142c:	080014c5 	.word	0x080014c5
 8001430:	080014d3 	.word	0x080014d3
 8001434:	080014ff 	.word	0x080014ff
 8001438:	0800152b 	.word	0x0800152b
 800143c:	08001539 	.word	0x08001539
 8001440:	0800154d 	.word	0x0800154d
 8001444:	080015ad 	.word	0x080015ad
 8001448:	08001613 	.word	0x08001613
 800144c:	08001627 	.word	0x08001627
  case 1: //move	//1
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001456:	4851      	ldr	r0, [pc, #324]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001458:	f003 f840 	bl	80044dc <HAL_GPIO_WritePin>
	move(1);
 800145c:	2001      	movs	r0, #1
 800145e:	f001 fcf1 	bl	8002e44 <move>

    break;
 8001462:	e0f7      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 2: //boom 	//2
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800146a:	484c      	ldr	r0, [pc, #304]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800146c:	f003 f836 	bl	80044dc <HAL_GPIO_WritePin>
	boom(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f000 fefb 	bl	800226c <boom>
    break;
 8001476:	e0ed      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 3:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800147e:	4847      	ldr	r0, [pc, #284]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001480:	f003 f82c 	bl	80044dc <HAL_GPIO_WritePin>
    break;
 8001484:	e0e6      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 4:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800148c:	4843      	ldr	r0, [pc, #268]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800148e:	f003 f825 	bl	80044dc <HAL_GPIO_WritePin>
    break;
 8001492:	e0df      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 5: //dir	 	//4
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149a:	4840      	ldr	r0, [pc, #256]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800149c:	f003 f81e 	bl	80044dc <HAL_GPIO_WritePin>
	 change_dir(1);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f000 fe99 	bl	80021d8 <change_dir>
    break;
 80014a6:	e0d5      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 6:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ae:	483b      	ldr	r0, [pc, #236]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80014b0:	f003 f814 	bl	80044dc <HAL_GPIO_WritePin>
    break;
 80014b4:	e0ce      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 7:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 80014b6:	2201      	movs	r2, #1
 80014b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014bc:	4837      	ldr	r0, [pc, #220]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80014be:	f003 f80d 	bl	80044dc <HAL_GPIO_WritePin>
    break;
 80014c2:	e0c7      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 8:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ca:	4834      	ldr	r0, [pc, #208]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80014cc:	f003 f806 	bl	80044dc <HAL_GPIO_WritePin>
    break;
 80014d0:	e0c0      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 9: // menu curser up
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d8:	4830      	ldr	r0, [pc, #192]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80014da:	f002 ffff 	bl	80044dc <HAL_GPIO_WritePin>
		if(pageflag==1){
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	f040 80af 	bne.w	8001646 <HAL_GPIO_EXTI_Callback+0x39a>
			if (menu_curser_r > 1){
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	f340 80aa 	ble.w	8001646 <HAL_GPIO_EXTI_Callback+0x39a>
				menu_curser_r -= 1;
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	4a2a      	ldr	r2, [pc, #168]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80014fa:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 80014fc:	e0a3      	b.n	8001646 <HAL_GPIO_EXTI_Callback+0x39a>
  case 10: // menu cursor down
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001504:	4825      	ldr	r0, [pc, #148]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001506:	f002 ffe9 	bl	80044dc <HAL_GPIO_WritePin>
		if(pageflag==1){
 800150a:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b01      	cmp	r3, #1
 8001510:	f040 809b 	bne.w	800164a <HAL_GPIO_EXTI_Callback+0x39e>
			if (menu_curser_r  < 3){
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b02      	cmp	r3, #2
 800151a:	f300 8096 	bgt.w	800164a <HAL_GPIO_EXTI_Callback+0x39e>
				menu_curser_r +=1;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001526:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 8001528:	e08f      	b.n	800164a <HAL_GPIO_EXTI_Callback+0x39e>
  case 11:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001530:	481a      	ldr	r0, [pc, #104]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001532:	f002 ffd3 	bl	80044dc <HAL_GPIO_WritePin>
    break;
 8001536:	e08d      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 12: //Dir	//C
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153e:	4817      	ldr	r0, [pc, #92]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001540:	f002 ffcc 	bl	80044dc <HAL_GPIO_WritePin>
		change_dir(2);
 8001544:	2002      	movs	r0, #2
 8001546:	f000 fe47 	bl	80021d8 <change_dir>
    break;
 800154a:	e083      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 13: //goto menu
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 800154c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001550:	4812      	ldr	r0, [pc, #72]	; (800159c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001552:	f002 ffdb 	bl	800450c <HAL_GPIO_TogglePin>
		if(pageflag == 0 || pageflag == 3 || pageflag == 4 || pageflag == 2){
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <HAL_GPIO_EXTI_Callback+0x2ca>
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_EXTI_Callback+0x2ca>
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b04      	cmp	r3, #4
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_EXTI_Callback+0x2ca>
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d16b      	bne.n	800164e <HAL_GPIO_EXTI_Callback+0x3a2>
			change_page = 1;
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]
			pageflag = 1;
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
		}
    break;
 8001582:	e064      	b.n	800164e <HAL_GPIO_EXTI_Callback+0x3a2>
 8001584:	200006f8 	.word	0x200006f8
 8001588:	0800a738 	.word	0x0800a738
 800158c:	48000c00 	.word	0x48000c00
 8001590:	0800a740 	.word	0x0800a740
 8001594:	0800a750 	.word	0x0800a750
 8001598:	0800a728 	.word	0x0800a728
 800159c:	48001000 	.word	0x48001000
 80015a0:	200006ec 	.word	0x200006ec
 80015a4:	20000004 	.word	0x20000004
 80015a8:	200006fc 	.word	0x200006fc
  case 14: // select in menu
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b2:	482a      	ldr	r0, [pc, #168]	; (800165c <HAL_GPIO_EXTI_Callback+0x3b0>)
 80015b4:	f002 ff92 	bl	80044dc <HAL_GPIO_WritePin>
		if(pageflag == 1){
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_GPIO_EXTI_Callback+0x3b4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d148      	bne.n	8001652 <HAL_GPIO_EXTI_Callback+0x3a6>
			if(menu_curser_r == 1){
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d10e      	bne.n	80015e6 <HAL_GPIO_EXTI_Callback+0x33a>
				pageflag = 2;
 80015c8:	4b25      	ldr	r3, [pc, #148]	; (8001660 <HAL_GPIO_EXTI_Callback+0x3b4>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	601a      	str	r2, [r3, #0]
				change_page = 1;
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <HAL_GPIO_EXTI_Callback+0x3bc>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
				game_started = 1;
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_GPIO_EXTI_Callback+0x3c0>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
				for30timer = HAL_GetTick();
 80015da:	f002 fc35 	bl	8003e48 <HAL_GetTick>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a23      	ldr	r2, [pc, #140]	; (8001670 <HAL_GPIO_EXTI_Callback+0x3c4>)
 80015e2:	6013      	str	r3, [r2, #0]
				change_page = 1;

			}
		}

    break;
 80015e4:	e035      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x3a6>
			else if(menu_curser_r == 2){
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d106      	bne.n	80015fc <HAL_GPIO_EXTI_Callback+0x350>
				pageflag = 3;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_GPIO_EXTI_Callback+0x3b4>)
 80015f0:	2203      	movs	r2, #3
 80015f2:	601a      	str	r2, [r3, #0]
				change_page = 1;
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_GPIO_EXTI_Callback+0x3bc>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
    break;
 80015fa:	e02a      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x3a6>
			else if(menu_curser_r == 3){
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b03      	cmp	r3, #3
 8001602:	d126      	bne.n	8001652 <HAL_GPIO_EXTI_Callback+0x3a6>
				pageflag = 4;
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_GPIO_EXTI_Callback+0x3b4>)
 8001606:	2204      	movs	r2, #4
 8001608:	601a      	str	r2, [r3, #0]
				change_page = 1;
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <HAL_GPIO_EXTI_Callback+0x3bc>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]
    break;
 8001610:	e01f      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x3a6>
  case 15: //Boom	//#
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001618:	4810      	ldr	r0, [pc, #64]	; (800165c <HAL_GPIO_EXTI_Callback+0x3b0>)
 800161a:	f002 ff5f 	bl	80044dc <HAL_GPIO_WritePin>
		boom(2);
 800161e:	2002      	movs	r0, #2
 8001620:	f000 fe24 	bl	800226c <boom>
    break;
 8001624:	e016      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
  case 16: //move	//D
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	480b      	ldr	r0, [pc, #44]	; (800165c <HAL_GPIO_EXTI_Callback+0x3b0>)
 800162e:	f002 ff55 	bl	80044dc <HAL_GPIO_WritePin>
		move(2);
 8001632:	2002      	movs	r0, #2
 8001634:	f001 fc06 	bl	8002e44 <move>
    break;
 8001638:	e00c      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
    return;
 800163a:	bf00      	nop
 800163c:	e00a      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
    return; // Reject invalid scan
 800163e:	bf00      	nop
 8001640:	e008      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>

  default:
    break;
 8001642:	bf00      	nop
 8001644:	e006      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
    break;
 8001646:	bf00      	nop
 8001648:	e004      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
    break;
 800164a:	bf00      	nop
 800164c:	e002      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
    break;
 800164e:	bf00      	nop
 8001650:	e000      	b.n	8001654 <HAL_GPIO_EXTI_Callback+0x3a8>
    break;
 8001652:	bf00      	nop
  }
}
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}
 800165a:	bf00      	nop
 800165c:	48001000 	.word	0x48001000
 8001660:	200006ec 	.word	0x200006ec
 8001664:	20000004 	.word	0x20000004
 8001668:	200006fc 	.word	0x200006fc
 800166c:	200006f0 	.word	0x200006f0
 8001670:	200006f4 	.word	0x200006f4

08001674 <seven_segment_display_decimal>:
	.digits={0, 0, 0, 0},
	.number = 0};



void seven_segment_display_decimal(uint32_t n) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
    if (n < 10) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b09      	cmp	r3, #9
 8001680:	d832      	bhi.n	80016e8 <seven_segment_display_decimal+0x74>
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin, (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <seven_segment_display_decimal+0x7c>)
 8001684:	6a18      	ldr	r0, [r3, #32]
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <seven_segment_display_decimal+0x7c>)
 8001688:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	f002 ff21 	bl	80044dc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin, (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <seven_segment_display_decimal+0x7c>)
 800169c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <seven_segment_display_decimal+0x7c>)
 80016a0:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	085b      	lsrs	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	f002 ff14 	bl	80044dc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin, (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <seven_segment_display_decimal+0x7c>)
 80016b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <seven_segment_display_decimal+0x7c>)
 80016ba:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	461a      	mov	r2, r3
 80016ca:	f002 ff07 	bl	80044dc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin, (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <seven_segment_display_decimal+0x7c>)
 80016d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <seven_segment_display_decimal+0x7c>)
 80016d4:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	f002 fefa 	bl	80044dc <HAL_GPIO_WritePin>
    }
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200000b0 	.word	0x200000b0

080016f4 <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i)
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	e00f      	b.n	8001720 <seven_segment_deactivate_digits+0x2c>
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin, GPIO_PIN_SET);
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <seven_segment_deactivate_digits+0x3c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001708:	4a09      	ldr	r2, [pc, #36]	; (8001730 <seven_segment_deactivate_digits+0x3c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4413      	add	r3, r2
 8001710:	889b      	ldrh	r3, [r3, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	4619      	mov	r1, r3
 8001716:	f002 fee1 	bl	80044dc <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; ++i)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3301      	adds	r3, #1
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b03      	cmp	r3, #3
 8001724:	ddec      	ble.n	8001700 <seven_segment_deactivate_digits+0xc>
}
 8001726:	bf00      	nop
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200000b0 	.word	0x200000b0

08001734 <seven_segment_activate_digit>:

int last_time_on = 0;
void seven_segment_activate_digit(uint32_t d) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    if (d < 4) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d80c      	bhi.n	800175c <seven_segment_activate_digit+0x28>
    	HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
 8001742:	4a08      	ldr	r2, [pc, #32]	; (8001764 <seven_segment_activate_digit+0x30>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800174a:	4a06      	ldr	r2, [pc, #24]	; (8001764 <seven_segment_activate_digit+0x30>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	889b      	ldrh	r3, [r3, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	4619      	mov	r1, r3
 8001758:	f002 fec0 	bl	80044dc <HAL_GPIO_WritePin>
//		}
//		else if (d != state){
//			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
//		}
    }
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200000b0 	.word	0x200000b0

08001768 <seven_segment_set_num>:

void seven_segment_set_num(int num[4]) {
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i <= 3; ++i) {
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	e00d      	b.n	8001792 <seven_segment_set_num+0x2a>
		seven_segment.digits[i] = num[i];
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <seven_segment_set_num+0x40>)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3310      	adds	r3, #16
 8001788:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i <= 3; ++i) {
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3301      	adds	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d9ee      	bls.n	8001776 <seven_segment_set_num+0xe>
	}
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	200000b0 	.word	0x200000b0

080017ac <seven_segment_refresh>:

void seven_segment_refresh(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
    static uint32_t state_tmp = 0;
    static uint32_t last_time_tmp = 0;
    if (HAL_GetTick() - last_time_tmp > 5) {
 80017b0:	f002 fb4a 	bl	8003e48 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <seven_segment_refresh+0x50>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b05      	cmp	r3, #5
 80017be:	d91b      	bls.n	80017f8 <seven_segment_refresh+0x4c>
        seven_segment_deactivate_digits();
 80017c0:	f7ff ff98 	bl	80016f4 <seven_segment_deactivate_digits>
        seven_segment_activate_digit(state_tmp);
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <seven_segment_refresh+0x54>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ffb3 	bl	8001734 <seven_segment_activate_digit>
        seven_segment_display_decimal(seven_segment.digits[state_tmp]);
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <seven_segment_refresh+0x54>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <seven_segment_refresh+0x58>)
 80017d4:	3310      	adds	r3, #16
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff4a 	bl	8001674 <seven_segment_display_decimal>
        state_tmp = (state_tmp + 1) % 4;
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <seven_segment_refresh+0x54>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <seven_segment_refresh+0x54>)
 80017ec:	6013      	str	r3, [r2, #0]
        last_time_tmp = HAL_GetTick();
 80017ee:	f002 fb2b 	bl	8003e48 <HAL_GetTick>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a01      	ldr	r2, [pc, #4]	; (80017fc <seven_segment_refresh+0x50>)
 80017f6:	6013      	str	r3, [r2, #0]
    }
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000870 	.word	0x20000870
 8001800:	20000874 	.word	0x20000874
 8001804:	200000b0 	.word	0x200000b0

08001808 <setNumber>:


void setNumber(int number){
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	int a = 0, b = 0, c = 0, d = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
	if (number <= 9999 && number >= 0){
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f242 720f 	movw	r2, #9999	; 0x270f
 8001826:	4293      	cmp	r3, r2
 8001828:	dc5b      	bgt.n	80018e2 <setNumber+0xda>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db58      	blt.n	80018e2 <setNumber+0xda>
		a = number % 10;
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <setNumber+0xe4>)
 8001834:	fb83 1302 	smull	r1, r3, r3, r2
 8001838:	1099      	asrs	r1, r3, #2
 800183a:	17d3      	asrs	r3, r2, #31
 800183c:	1ac9      	subs	r1, r1, r3
 800183e:	460b      	mov	r3, r1
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
		number /= 10;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a27      	ldr	r2, [pc, #156]	; (80018ec <setNumber+0xe4>)
 800184e:	fb82 1203 	smull	r1, r2, r2, r3
 8001852:	1092      	asrs	r2, r2, #2
 8001854:	17db      	asrs	r3, r3, #31
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	607b      	str	r3, [r7, #4]
		b = number % 10;
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <setNumber+0xe4>)
 800185e:	fb83 1302 	smull	r1, r3, r3, r2
 8001862:	1099      	asrs	r1, r3, #2
 8001864:	17d3      	asrs	r3, r2, #31
 8001866:	1ac9      	subs	r1, r1, r3
 8001868:	460b      	mov	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	623b      	str	r3, [r7, #32]
		number /= 10;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <setNumber+0xe4>)
 8001878:	fb82 1203 	smull	r1, r2, r2, r3
 800187c:	1092      	asrs	r2, r2, #2
 800187e:	17db      	asrs	r3, r3, #31
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	607b      	str	r3, [r7, #4]
		c = number % 10;
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <setNumber+0xe4>)
 8001888:	fb83 1302 	smull	r1, r3, r3, r2
 800188c:	1099      	asrs	r1, r3, #2
 800188e:	17d3      	asrs	r3, r2, #31
 8001890:	1ac9      	subs	r1, r1, r3
 8001892:	460b      	mov	r3, r1
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	61fb      	str	r3, [r7, #28]
		number /= 10;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a12      	ldr	r2, [pc, #72]	; (80018ec <setNumber+0xe4>)
 80018a2:	fb82 1203 	smull	r1, r2, r2, r3
 80018a6:	1092      	asrs	r2, r2, #2
 80018a8:	17db      	asrs	r3, r3, #31
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	607b      	str	r3, [r7, #4]
		d = number % 10;
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <setNumber+0xe4>)
 80018b2:	fb83 1302 	smull	r1, r3, r3, r2
 80018b6:	1099      	asrs	r1, r3, #2
 80018b8:	17d3      	asrs	r3, r2, #31
 80018ba:	1ac9      	subs	r1, r1, r3
 80018bc:	460b      	mov	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	61bb      	str	r3, [r7, #24]
//		int numbers2[4]={d,c,b,a};
		int numbers2[4]={a,b,c,d};
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	617b      	str	r3, [r7, #20]
		seven_segment_set_num(numbers2);
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff43 	bl	8001768 <seven_segment_set_num>
	}

}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	66666667 	.word	0x66666667

080018f0 <programInit>:
};

struct bullet bul[10];


void programInit() {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af04      	add	r7, sp, #16
    Change_Melody(super_mario_bros, ARRAY_LENGTH(super_mario_bros));
 80018f6:	2141      	movs	r1, #65	; 0x41
 80018f8:	484b      	ldr	r0, [pc, #300]	; (8001a28 <programInit+0x138>)
 80018fa:	f002 f85d 	bl	80039b8 <Change_Melody>

	LiquidCrystal(GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_7);
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	9303      	str	r3, [sp, #12]
 8001902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	2308      	movs	r3, #8
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2304      	movs	r3, #4
 8001914:	2202      	movs	r2, #2
 8001916:	2101      	movs	r1, #1
 8001918:	4844      	ldr	r0, [pc, #272]	; (8001a2c <programInit+0x13c>)
 800191a:	f7fe fcb1 	bl	8000280 <LiquidCrystal>
	begin(20, 4);
 800191e:	2104      	movs	r1, #4
 8001920:	2014      	movs	r0, #20
 8001922:	f7fe fd45 	bl	80003b0 <begin>
//	int n = sprintf(data, "Salammmmm");
//	setCursor(5, 1);
	//	print(data);


	set_start_time(20, 20, 20);
 8001926:	2214      	movs	r2, #20
 8001928:	2114      	movs	r1, #20
 800192a:	2014      	movs	r0, #20
 800192c:	f7ff fc8a 	bl	8001244 <set_start_time>
	set_start_day(2024,2,3);
 8001930:	2203      	movs	r2, #3
 8001932:	2102      	movs	r1, #2
 8001934:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
 8001938:	f7ff fc9e 	bl	8001278 <set_start_day>
	createChar(num_tank_right, tank_right);
 800193c:	4b3c      	ldr	r3, [pc, #240]	; (8001a30 <programInit+0x140>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	493c      	ldr	r1, [pc, #240]	; (8001a34 <programInit+0x144>)
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe ff75 	bl	8000832 <createChar>
	createChar(num_tank_up, tank_up);
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <programInit+0x148>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	493b      	ldr	r1, [pc, #236]	; (8001a3c <programInit+0x14c>)
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe ff6f 	bl	8000832 <createChar>
	createChar(num_tank_down, tank_down);
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <programInit+0x150>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	493a      	ldr	r1, [pc, #232]	; (8001a44 <programInit+0x154>)
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe ff69 	bl	8000832 <createChar>
	createChar(num_tank_left, tank_left);
 8001960:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <programInit+0x158>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4939      	ldr	r1, [pc, #228]	; (8001a4c <programInit+0x15c>)
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe ff63 	bl	8000832 <createChar>
	createChar(num_extra_bullet, extra_bullet);
 800196c:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <programInit+0x160>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4938      	ldr	r1, [pc, #224]	; (8001a54 <programInit+0x164>)
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe ff5d 	bl	8000832 <createChar>
	createChar(num_chance, chance);
 8001978:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <programInit+0x168>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4937      	ldr	r1, [pc, #220]	; (8001a5c <programInit+0x16c>)
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe ff57 	bl	8000832 <createChar>
	createChar(num_health, health);
 8001984:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <programInit+0x170>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4936      	ldr	r1, [pc, #216]	; (8001a64 <programInit+0x174>)
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe ff51 	bl	8000832 <createChar>
	createChar(num_arrow, arrow);
 8001990:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <programInit+0x178>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4935      	ldr	r1, [pc, #212]	; (8001a6c <programInit+0x17c>)
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe ff4b 	bl	8000832 <createChar>
//	starter();
	pageflag=0;
 800199c:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <programInit+0x180>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	e035      	b.n	8001a14 <programInit+0x124>
		bul[i].active=0;
 80019a8:	4932      	ldr	r1, [pc, #200]	; (8001a74 <programInit+0x184>)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	3310      	adds	r3, #16
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
		bul[i].direction=1;
 80019bc:	492d      	ldr	r1, [pc, #180]	; (8001a74 <programInit+0x184>)
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	330c      	adds	r3, #12
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
		bul[i].player_id=1;
 80019d0:	4928      	ldr	r1, [pc, #160]	; (8001a74 <programInit+0x184>)
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
		bul[i].position_x=-1;
 80019e2:	4924      	ldr	r1, [pc, #144]	; (8001a74 <programInit+0x184>)
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3304      	adds	r3, #4
 80019f2:	f04f 32ff 	mov.w	r2, #4294967295
 80019f6:	601a      	str	r2, [r3, #0]
		bul[i].position_y=-1;
 80019f8:	491e      	ldr	r1, [pc, #120]	; (8001a74 <programInit+0x184>)
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	3308      	adds	r3, #8
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3301      	adds	r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b09      	cmp	r3, #9
 8001a18:	ddc6      	ble.n	80019a8 <programInit+0xb8>

	}
    PWM_Start();
 8001a1a:	f001 feff 	bl	800381c <PWM_Start>

}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	0800a758 	.word	0x0800a758
 8001a2c:	48000800 	.word	0x48000800
 8001a30:	20000090 	.word	0x20000090
 8001a34:	20000028 	.word	0x20000028
 8001a38:	2000008c 	.word	0x2000008c
 8001a3c:	20000018 	.word	0x20000018
 8001a40:	20000094 	.word	0x20000094
 8001a44:	20000038 	.word	0x20000038
 8001a48:	20000088 	.word	0x20000088
 8001a4c:	20000020 	.word	0x20000020
 8001a50:	20000098 	.word	0x20000098
 8001a54:	20000008 	.word	0x20000008
 8001a58:	2000009c 	.word	0x2000009c
 8001a5c:	20000010 	.word	0x20000010
 8001a60:	200000a0 	.word	0x200000a0
 8001a64:	20000030 	.word	0x20000030
 8001a68:	200000a4 	.word	0x200000a4
 8001a6c:	20000040 	.word	0x20000040
 8001a70:	200006ec 	.word	0x200006ec
 8001a74:	20000768 	.word	0x20000768

08001a78 <starter>:

void starter(){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b09a      	sub	sp, #104	; 0x68
 8001a7c:	af00      	add	r7, sp, #0

	setCursor(0, 2);
 8001a7e:	2102      	movs	r1, #2
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7fe fe63 	bl	800074c <setCursor>
	write(num_tank_right, tank_right);
 8001a86:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <starter+0xa8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4926      	ldr	r1, [pc, #152]	; (8001b24 <starter+0xac>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe ff07 	bl	80008a0 <write>

	setCursor(1, 1);
 8001a92:	2101      	movs	r1, #1
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7fe fe59 	bl	800074c <setCursor>
	print("#");
 8001a9a:	4823      	ldr	r0, [pc, #140]	; (8001b28 <starter+0xb0>)
 8001a9c:	f7fe fe9e 	bl	80007dc <print>

	setCursor(1, 2);
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f7fe fe52 	bl	800074c <setCursor>
	print("#");
 8001aa8:	481f      	ldr	r0, [pc, #124]	; (8001b28 <starter+0xb0>)
 8001aaa:	f7fe fe97 	bl	80007dc <print>

	char data[100];
	int n = sprintf(data, "TANK BATTLE");
 8001aae:	463b      	mov	r3, r7
 8001ab0:	491e      	ldr	r1, [pc, #120]	; (8001b2c <starter+0xb4>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f007 fc10 	bl	80092d8 <siprintf>
 8001ab8:	6678      	str	r0, [r7, #100]	; 0x64
	setCursor(4, 1);
 8001aba:	2101      	movs	r1, #1
 8001abc:	2004      	movs	r0, #4
 8001abe:	f7fe fe45 	bl	800074c <setCursor>
	print(data);
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fe89 	bl	80007dc <print>
	setCursor(4, 2);
 8001aca:	2102      	movs	r1, #2
 8001acc:	2004      	movs	r0, #4
 8001ace:	f7fe fe3d 	bl	800074c <setCursor>
	n = sprintf(data, "===========");
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	4916      	ldr	r1, [pc, #88]	; (8001b30 <starter+0xb8>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f007 fbfe 	bl	80092d8 <siprintf>
 8001adc:	6678      	str	r0, [r7, #100]	; 0x64
	print(data);
 8001ade:	463b      	mov	r3, r7
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fe7b 	bl	80007dc <print>

	setCursor(18, 1);
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	2012      	movs	r0, #18
 8001aea:	f7fe fe2f 	bl	800074c <setCursor>
	print("#");
 8001aee:	480e      	ldr	r0, [pc, #56]	; (8001b28 <starter+0xb0>)
 8001af0:	f7fe fe74 	bl	80007dc <print>
	setCursor(18, 2);
 8001af4:	2102      	movs	r1, #2
 8001af6:	2012      	movs	r0, #18
 8001af8:	f7fe fe28 	bl	800074c <setCursor>
	print("#");
 8001afc:	480a      	ldr	r0, [pc, #40]	; (8001b28 <starter+0xb0>)
 8001afe:	f7fe fe6d 	bl	80007dc <print>

	setCursor(19, 1);
 8001b02:	2101      	movs	r1, #1
 8001b04:	2013      	movs	r0, #19
 8001b06:	f7fe fe21 	bl	800074c <setCursor>
	write(num_tank_left, tank_left);
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <starter+0xbc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	490a      	ldr	r1, [pc, #40]	; (8001b38 <starter+0xc0>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fec5 	bl	80008a0 <write>

}
 8001b16:	bf00      	nop
 8001b18:	3768      	adds	r7, #104	; 0x68
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000090 	.word	0x20000090
 8001b24:	20000028 	.word	0x20000028
 8001b28:	0800a69c 	.word	0x0800a69c
 8001b2c:	0800a6a0 	.word	0x0800a6a0
 8001b30:	0800a6ac 	.word	0x0800a6ac
 8001b34:	20000088 	.word	0x20000088
 8001b38:	20000020 	.word	0x20000020

08001b3c <init_board>:

void init_board(){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
	//i == soton, j ==> radif

    for (int i = 0; i < 20; i++) {
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	e017      	b.n	8001b78 <init_board+0x3c>
        for (int j = 0; j < 4; j++) {
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
 8001b4c:	e00e      	b.n	8001b6c <init_board+0x30>
        	setCursor(i, j);
 8001b4e:	6a39      	ldr	r1, [r7, #32]
 8001b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b52:	f7fe fdfb 	bl	800074c <setCursor>
        	lcd[i][j] = 0;
 8001b56:	4a6f      	ldr	r2, [pc, #444]	; (8001d14 <init_board+0x1d8>)
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	441a      	add	r2, r3
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	4413      	add	r3, r2
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	dded      	ble.n	8001b4e <init_board+0x12>
    for (int i = 0; i < 20; i++) {
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	3301      	adds	r3, #1
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	2b13      	cmp	r3, #19
 8001b7c:	dde4      	ble.n	8001b48 <init_board+0xc>
//    		print(" ");

        }
    }

	lcd[1][1] = num_wall;
 8001b7e:	4b66      	ldr	r3, [pc, #408]	; (8001d18 <init_board+0x1dc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <init_board+0x1d8>)
 8001b86:	715a      	strb	r2, [r3, #5]
	lcd[1][2] = num_wall;
 8001b88:	4b63      	ldr	r3, [pc, #396]	; (8001d18 <init_board+0x1dc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <init_board+0x1d8>)
 8001b90:	719a      	strb	r2, [r3, #6]
	lcd[18][1] = num_wall;
 8001b92:	4b61      	ldr	r3, [pc, #388]	; (8001d18 <init_board+0x1dc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b5e      	ldr	r3, [pc, #376]	; (8001d14 <init_board+0x1d8>)
 8001b9a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	lcd[18][2] = num_wall;
 8001b9e:	4b5e      	ldr	r3, [pc, #376]	; (8001d18 <init_board+0x1dc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	4b5b      	ldr	r3, [pc, #364]	; (8001d14 <init_board+0x1d8>)
 8001ba6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	lcd[0][1] = num_tank_right;
 8001baa:	4b5c      	ldr	r3, [pc, #368]	; (8001d1c <init_board+0x1e0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b58      	ldr	r3, [pc, #352]	; (8001d14 <init_board+0x1d8>)
 8001bb2:	705a      	strb	r2, [r3, #1]
	lcd[19][2] = num_tank_left;
 8001bb4:	4b5a      	ldr	r3, [pc, #360]	; (8001d20 <init_board+0x1e4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b56      	ldr	r3, [pc, #344]	; (8001d14 <init_board+0x1d8>)
 8001bbc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	int element_counter = 2;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 8001bc4:	e030      	b.n	8001c28 <init_board+0xec>
		int col = rand() % 24;
 8001bc6:	f007 fb49 	bl	800925c <rand>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <init_board+0x1e8>)
 8001bce:	fb83 1302 	smull	r1, r3, r3, r2
 8001bd2:	1099      	asrs	r1, r3, #2
 8001bd4:	17d3      	asrs	r3, r2, #31
 8001bd6:	1ac9      	subs	r1, r1, r3
 8001bd8:	460b      	mov	r3, r1
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	440b      	add	r3, r1
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	60bb      	str	r3, [r7, #8]
		int row = rand() % 4;
 8001be4:	f007 fb3a 	bl	800925c <rand>
 8001be8:	4603      	mov	r3, r0
 8001bea:	425a      	negs	r2, r3
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	f002 0203 	and.w	r2, r2, #3
 8001bf4:	bf58      	it	pl
 8001bf6:	4253      	negpl	r3, r2
 8001bf8:	607b      	str	r3, [r7, #4]
		if(lcd[col][row] == 0){
 8001bfa:	4a46      	ldr	r2, [pc, #280]	; (8001d14 <init_board+0x1d8>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	441a      	add	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10d      	bne.n	8001c28 <init_board+0xec>
			lcd[col][row] = num_extra_bullet;
 8001c0c:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <init_board+0x1ec>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	b2d9      	uxtb	r1, r3
 8001c12:	4a40      	ldr	r2, [pc, #256]	; (8001d14 <init_board+0x1d8>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	441a      	add	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	460a      	mov	r2, r1
 8001c20:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	dccb      	bgt.n	8001bc6 <init_board+0x8a>
		}
	}

	element_counter = 2;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 8001c32:	e030      	b.n	8001c96 <init_board+0x15a>
		int col = rand() % 24;
 8001c34:	f007 fb12 	bl	800925c <rand>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <init_board+0x1e8>)
 8001c3c:	fb83 1302 	smull	r1, r3, r3, r2
 8001c40:	1099      	asrs	r1, r3, #2
 8001c42:	17d3      	asrs	r3, r2, #31
 8001c44:	1ac9      	subs	r1, r1, r3
 8001c46:	460b      	mov	r3, r1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	440b      	add	r3, r1
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	613b      	str	r3, [r7, #16]
		int row = rand() % 4;
 8001c52:	f007 fb03 	bl	800925c <rand>
 8001c56:	4603      	mov	r3, r0
 8001c58:	425a      	negs	r2, r3
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	f002 0203 	and.w	r2, r2, #3
 8001c62:	bf58      	it	pl
 8001c64:	4253      	negpl	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
		if(lcd[col][row] == 0){
 8001c68:	4a2a      	ldr	r2, [pc, #168]	; (8001d14 <init_board+0x1d8>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	441a      	add	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10d      	bne.n	8001c96 <init_board+0x15a>
			lcd[col][row] = num_health;
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <init_board+0x1f0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b2d9      	uxtb	r1, r3
 8001c80:	4a24      	ldr	r2, [pc, #144]	; (8001d14 <init_board+0x1d8>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	441a      	add	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	dccb      	bgt.n	8001c34 <init_board+0xf8>
		}
	}

	element_counter = 2;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 8001ca0:	e030      	b.n	8001d04 <init_board+0x1c8>
		int col = rand() % 24;
 8001ca2:	f007 fadb 	bl	800925c <rand>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <init_board+0x1e8>)
 8001caa:	fb83 1302 	smull	r1, r3, r3, r2
 8001cae:	1099      	asrs	r1, r3, #2
 8001cb0:	17d3      	asrs	r3, r2, #31
 8001cb2:	1ac9      	subs	r1, r1, r3
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	440b      	add	r3, r1
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	61bb      	str	r3, [r7, #24]
		int row = rand() % 4;
 8001cc0:	f007 facc 	bl	800925c <rand>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	425a      	negs	r2, r3
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	f002 0203 	and.w	r2, r2, #3
 8001cd0:	bf58      	it	pl
 8001cd2:	4253      	negpl	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]
		if(lcd[col][row] == 0){
 8001cd6:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <init_board+0x1d8>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	441a      	add	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10d      	bne.n	8001d04 <init_board+0x1c8>
			lcd[col][row] = num_obstacle;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <init_board+0x1f4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b2d9      	uxtb	r1, r3
 8001cee:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <init_board+0x1d8>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	441a      	add	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	460a      	mov	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	dccb      	bgt.n	8001ca2 <init_board+0x166>
		}
	}

}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	3728      	adds	r7, #40	; 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000718 	.word	0x20000718
 8001d18:	200000a8 	.word	0x200000a8
 8001d1c:	20000090 	.word	0x20000090
 8001d20:	20000088 	.word	0x20000088
 8001d24:	2aaaaaab 	.word	0x2aaaaaab
 8001d28:	20000098 	.word	0x20000098
 8001d2c:	200000a0 	.word	0x200000a0
 8001d30:	200000ac 	.word	0x200000ac

08001d34 <update_lcd>:
// D12 -> C9
// D13 -> C8
// D14 -> C7


void update_lcd(){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
	if (game_started==1){
 8001d3a:	4ba3      	ldr	r3, [pc, #652]	; (8001fc8 <update_lcd+0x294>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d109      	bne.n	8001d56 <update_lcd+0x22>
		clear();
 8001d42:	f7fe fcf9 	bl	8000738 <clear>
		init_board();
 8001d46:	f7ff fef9 	bl	8001b3c <init_board>
		change_page = 0;
 8001d4a:	4ba0      	ldr	r3, [pc, #640]	; (8001fcc <update_lcd+0x298>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
		game_started = 0;
 8001d50:	4b9d      	ldr	r3, [pc, #628]	; (8001fc8 <update_lcd+0x294>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
	}

	if(pageflag==0){
 8001d56:	4b9e      	ldr	r3, [pc, #632]	; (8001fd0 <update_lcd+0x29c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <update_lcd+0x2e>
		starter();
 8001d5e:	f7ff fe8b 	bl	8001a78 <starter>
	}


	if(pageflag==2){
 8001d62:	4b9b      	ldr	r3, [pc, #620]	; (8001fd0 <update_lcd+0x29c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	f040 8101 	bne.w	8001f6e <update_lcd+0x23a>
		if(HAL_GetTick() - for30timer > 30000){
 8001d6c:	f002 f86c 	bl	8003e48 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b98      	ldr	r3, [pc, #608]	; (8001fd4 <update_lcd+0x2a0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f247 5230 	movw	r2, #30000	; 0x7530
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	f240 808f 	bls.w	8001ea0 <update_lcd+0x16c>
			int col = rand() % 24;
 8001d82:	f007 fa6b 	bl	800925c <rand>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b93      	ldr	r3, [pc, #588]	; (8001fd8 <update_lcd+0x2a4>)
 8001d8a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d8e:	1099      	asrs	r1, r3, #2
 8001d90:	17d3      	asrs	r3, r2, #31
 8001d92:	1ac9      	subs	r1, r1, r3
 8001d94:	460b      	mov	r3, r1
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	440b      	add	r3, r1
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	607b      	str	r3, [r7, #4]
			int row = rand() % 4;
 8001da0:	f007 fa5c 	bl	800925c <rand>
 8001da4:	4603      	mov	r3, r0
 8001da6:	425a      	negs	r2, r3
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	f002 0203 	and.w	r2, r2, #3
 8001db0:	bf58      	it	pl
 8001db2:	4253      	negpl	r3, r2
 8001db4:	603b      	str	r3, [r7, #0]
			if(lcd[col][row] == 0){
 8001db6:	4a89      	ldr	r2, [pc, #548]	; (8001fdc <update_lcd+0x2a8>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	441a      	add	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10a      	bne.n	8001dde <update_lcd+0xaa>
				lcd[col][row] = num_extra_bullet;
 8001dc8:	4b85      	ldr	r3, [pc, #532]	; (8001fe0 <update_lcd+0x2ac>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b2d9      	uxtb	r1, r3
 8001dce:	4a83      	ldr	r2, [pc, #524]	; (8001fdc <update_lcd+0x2a8>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	441a      	add	r2, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	460a      	mov	r2, r1
 8001ddc:	701a      	strb	r2, [r3, #0]
			}
			 col = rand() % 24;
 8001dde:	f007 fa3d 	bl	800925c <rand>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b7c      	ldr	r3, [pc, #496]	; (8001fd8 <update_lcd+0x2a4>)
 8001de6:	fb83 1302 	smull	r1, r3, r3, r2
 8001dea:	1099      	asrs	r1, r3, #2
 8001dec:	17d3      	asrs	r3, r2, #31
 8001dee:	1ac9      	subs	r1, r1, r3
 8001df0:	460b      	mov	r3, r1
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	440b      	add	r3, r1
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	607b      	str	r3, [r7, #4]
			 row = rand() % 4;
 8001dfc:	f007 fa2e 	bl	800925c <rand>
 8001e00:	4603      	mov	r3, r0
 8001e02:	425a      	negs	r2, r3
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	f002 0203 	and.w	r2, r2, #3
 8001e0c:	bf58      	it	pl
 8001e0e:	4253      	negpl	r3, r2
 8001e10:	603b      	str	r3, [r7, #0]
			if(lcd[col][row] == 0){
 8001e12:	4a72      	ldr	r2, [pc, #456]	; (8001fdc <update_lcd+0x2a8>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	441a      	add	r2, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10a      	bne.n	8001e3a <update_lcd+0x106>
				lcd[col][row] = num_chance;
 8001e24:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <update_lcd+0x2b0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	b2d9      	uxtb	r1, r3
 8001e2a:	4a6c      	ldr	r2, [pc, #432]	; (8001fdc <update_lcd+0x2a8>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	441a      	add	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	4413      	add	r3, r2
 8001e36:	460a      	mov	r2, r1
 8001e38:	701a      	strb	r2, [r3, #0]
			}
			 col = rand() % 24;
 8001e3a:	f007 fa0f 	bl	800925c <rand>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	4b65      	ldr	r3, [pc, #404]	; (8001fd8 <update_lcd+0x2a4>)
 8001e42:	fb83 1302 	smull	r1, r3, r3, r2
 8001e46:	1099      	asrs	r1, r3, #2
 8001e48:	17d3      	asrs	r3, r2, #31
 8001e4a:	1ac9      	subs	r1, r1, r3
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	440b      	add	r3, r1
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	607b      	str	r3, [r7, #4]
			 row = rand() % 4;
 8001e58:	f007 fa00 	bl	800925c <rand>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	425a      	negs	r2, r3
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	f002 0203 	and.w	r2, r2, #3
 8001e68:	bf58      	it	pl
 8001e6a:	4253      	negpl	r3, r2
 8001e6c:	603b      	str	r3, [r7, #0]
			if(lcd[col][row] == 0){
 8001e6e:	4a5b      	ldr	r2, [pc, #364]	; (8001fdc <update_lcd+0x2a8>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	441a      	add	r2, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10a      	bne.n	8001e96 <update_lcd+0x162>
				lcd[col][row] = num_health;
 8001e80:	4b59      	ldr	r3, [pc, #356]	; (8001fe8 <update_lcd+0x2b4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	b2d9      	uxtb	r1, r3
 8001e86:	4a55      	ldr	r2, [pc, #340]	; (8001fdc <update_lcd+0x2a8>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	441a      	add	r2, r3
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	460a      	mov	r2, r1
 8001e94:	701a      	strb	r2, [r3, #0]
			}
			for30timer = HAL_GetTick();
 8001e96:	f001 ffd7 	bl	8003e48 <HAL_GetTick>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4a4d      	ldr	r2, [pc, #308]	; (8001fd4 <update_lcd+0x2a0>)
 8001e9e:	6013      	str	r3, [r2, #0]

		}
		for (int i = 0; i < 20; i++) {
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	e05f      	b.n	8001f66 <update_lcd+0x232>
			for (int j = 0; j < 4; j++) {
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	e056      	b.n	8001f5a <update_lcd+0x226>
				setCursor(i, j);
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f7fe fc4c 	bl	800074c <setCursor>
				if(lcd[i][j] != 9 && lcd[i][j] != 10 && lcd[i][j] != 0)
 8001eb4:	4a49      	ldr	r2, [pc, #292]	; (8001fdc <update_lcd+0x2a8>)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	441a      	add	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b09      	cmp	r3, #9
 8001ec4:	d01c      	beq.n	8001f00 <update_lcd+0x1cc>
 8001ec6:	4a45      	ldr	r2, [pc, #276]	; (8001fdc <update_lcd+0x2a8>)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	441a      	add	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b0a      	cmp	r3, #10
 8001ed6:	d013      	beq.n	8001f00 <update_lcd+0x1cc>
 8001ed8:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <update_lcd+0x2a8>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	441a      	add	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <update_lcd+0x1cc>
					write(lcd[i][j]);
 8001eea:	4a3c      	ldr	r2, [pc, #240]	; (8001fdc <update_lcd+0x2a8>)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	441a      	add	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fcd1 	bl	80008a0 <write>
 8001efe:	e029      	b.n	8001f54 <update_lcd+0x220>
				else if (lcd[i][j] == 9)
 8001f00:	4a36      	ldr	r2, [pc, #216]	; (8001fdc <update_lcd+0x2a8>)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	441a      	add	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b09      	cmp	r3, #9
 8001f10:	d103      	bne.n	8001f1a <update_lcd+0x1e6>
					print("#");
 8001f12:	4836      	ldr	r0, [pc, #216]	; (8001fec <update_lcd+0x2b8>)
 8001f14:	f7fe fc62 	bl	80007dc <print>
 8001f18:	e01c      	b.n	8001f54 <update_lcd+0x220>
				else if (lcd[i][j] == 10)
 8001f1a:	4a30      	ldr	r2, [pc, #192]	; (8001fdc <update_lcd+0x2a8>)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	441a      	add	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4413      	add	r3, r2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b0a      	cmp	r3, #10
 8001f2a:	d103      	bne.n	8001f34 <update_lcd+0x200>
					print("I");
 8001f2c:	4830      	ldr	r0, [pc, #192]	; (8001ff0 <update_lcd+0x2bc>)
 8001f2e:	f7fe fc55 	bl	80007dc <print>
 8001f32:	e00f      	b.n	8001f54 <update_lcd+0x220>
				else if (lcd[i][j] == 0)
 8001f34:	4a29      	ldr	r2, [pc, #164]	; (8001fdc <update_lcd+0x2a8>)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	441a      	add	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <update_lcd+0x21a>
					print(" ");
 8001f46:	482b      	ldr	r0, [pc, #172]	; (8001ff4 <update_lcd+0x2c0>)
 8001f48:	f7fe fc48 	bl	80007dc <print>
 8001f4c:	e002      	b.n	8001f54 <update_lcd+0x220>
				else
					print("U");
 8001f4e:	482a      	ldr	r0, [pc, #168]	; (8001ff8 <update_lcd+0x2c4>)
 8001f50:	f7fe fc44 	bl	80007dc <print>
			for (int j = 0; j < 4; j++) {
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	3301      	adds	r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	dda5      	ble.n	8001eac <update_lcd+0x178>
		for (int i = 0; i < 20; i++) {
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3301      	adds	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b13      	cmp	r3, #19
 8001f6a:	dd9c      	ble.n	8001ea6 <update_lcd+0x172>
	}
	else if (pageflag==4){
		about_page();
	}

}
 8001f6c:	e027      	b.n	8001fbe <update_lcd+0x28a>
	else if (change_page==1){
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <update_lcd+0x298>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d105      	bne.n	8001f82 <update_lcd+0x24e>
		clear();
 8001f76:	f7fe fbdf 	bl	8000738 <clear>
		change_page = 0;
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <update_lcd+0x298>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
}
 8001f80:	e01d      	b.n	8001fbe <update_lcd+0x28a>
	else if (change_page==1){
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <update_lcd+0x298>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d105      	bne.n	8001f96 <update_lcd+0x262>
		clear();
 8001f8a:	f7fe fbd5 	bl	8000738 <clear>
		change_page = 0;
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <update_lcd+0x298>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	e013      	b.n	8001fbe <update_lcd+0x28a>
	else if (pageflag==1){
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <update_lcd+0x29c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d102      	bne.n	8001fa4 <update_lcd+0x270>
		menu();
 8001f9e:	f000 f897 	bl	80020d0 <menu>
}
 8001fa2:	e00c      	b.n	8001fbe <update_lcd+0x28a>
	else if (pageflag==3){
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <update_lcd+0x29c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d102      	bne.n	8001fb2 <update_lcd+0x27e>
		setting_page();
 8001fac:	f000 f882 	bl	80020b4 <setting_page>
}
 8001fb0:	e005      	b.n	8001fbe <update_lcd+0x28a>
	else if (pageflag==4){
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <update_lcd+0x29c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d101      	bne.n	8001fbe <update_lcd+0x28a>
		about_page();
 8001fba:	f000 f81f 	bl	8001ffc <about_page>
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200006f0 	.word	0x200006f0
 8001fcc:	200006fc 	.word	0x200006fc
 8001fd0:	200006ec 	.word	0x200006ec
 8001fd4:	200006f4 	.word	0x200006f4
 8001fd8:	2aaaaaab 	.word	0x2aaaaaab
 8001fdc:	20000718 	.word	0x20000718
 8001fe0:	20000098 	.word	0x20000098
 8001fe4:	2000009c 	.word	0x2000009c
 8001fe8:	200000a0 	.word	0x200000a0
 8001fec:	0800a69c 	.word	0x0800a69c
 8001ff0:	0800a6b8 	.word	0x0800a6b8
 8001ff4:	0800a6bc 	.word	0x0800a6bc
 8001ff8:	0800a6c0 	.word	0x0800a6c0

08001ffc <about_page>:
void about_page(){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b0b4      	sub	sp, #208	; 0xd0
 8002000:	af02      	add	r7, sp, #8
	setCursor(6, 1);
 8002002:	2101      	movs	r1, #1
 8002004:	2006      	movs	r0, #6
 8002006:	f7fe fba1 	bl	800074c <setCursor>
	print("POURIA");
 800200a:	4822      	ldr	r0, [pc, #136]	; (8002094 <about_page+0x98>)
 800200c:	f7fe fbe6 	bl	80007dc <print>
	setCursor(8, 2);
 8002010:	2102      	movs	r1, #2
 8002012:	2008      	movs	r0, #8
 8002014:	f7fe fb9a 	bl	800074c <setCursor>
	print("ALI");
 8002018:	481f      	ldr	r0, [pc, #124]	; (8002098 <about_page+0x9c>)
 800201a:	f7fe fbdf 	bl	80007dc <print>
	char timeStr[100];
	char dateStr[100];

	setCursor(5, 3);
 800201e:	2103      	movs	r1, #3
 8002020:	2005      	movs	r0, #5
 8002022:	f7fe fb93 	bl	800074c <setCursor>
	print("          ");
 8002026:	481d      	ldr	r0, [pc, #116]	; (800209c <about_page+0xa0>)
 8002028:	f7fe fbd8 	bl	80007dc <print>
	HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 800202c:	2200      	movs	r2, #0
 800202e:	491c      	ldr	r1, [pc, #112]	; (80020a0 <about_page+0xa4>)
 8002030:	481c      	ldr	r0, [pc, #112]	; (80020a4 <about_page+0xa8>)
 8002032:	f004 f9d6 	bl	80063e2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &mytime, RTC_FORMAT_BIN);
 8002036:	2200      	movs	r2, #0
 8002038:	4919      	ldr	r1, [pc, #100]	; (80020a0 <about_page+0xa4>)
 800203a:	481a      	ldr	r0, [pc, #104]	; (80020a4 <about_page+0xa8>)
 800203c:	f004 fab3 	bl	80065a6 <HAL_RTC_GetDate>

	sprintf(timeStr, "%02d:%02d:%02d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <about_page+0xa4>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <about_page+0xa4>)
 8002048:	785b      	ldrb	r3, [r3, #1]
 800204a:	4619      	mov	r1, r3
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <about_page+0xa4>)
 800204e:	789b      	ldrb	r3, [r3, #2]
 8002050:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	460b      	mov	r3, r1
 8002058:	4913      	ldr	r1, [pc, #76]	; (80020a8 <about_page+0xac>)
 800205a:	f007 f93d 	bl	80092d8 <siprintf>
	sprintf(dateStr, "%04d:%02d:%02d", mydate.Year, mydate.Month, mydate.Date);
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <about_page+0xb0>)
 8002060:	78db      	ldrb	r3, [r3, #3]
 8002062:	461a      	mov	r2, r3
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <about_page+0xb0>)
 8002066:	785b      	ldrb	r3, [r3, #1]
 8002068:	4619      	mov	r1, r3
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <about_page+0xb0>)
 800206c:	789b      	ldrb	r3, [r3, #2]
 800206e:	4638      	mov	r0, r7
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	460b      	mov	r3, r1
 8002074:	490e      	ldr	r1, [pc, #56]	; (80020b0 <about_page+0xb4>)
 8002076:	f007 f92f 	bl	80092d8 <siprintf>

	setCursor(5, 3);
 800207a:	2103      	movs	r1, #3
 800207c:	2005      	movs	r0, #5
 800207e:	f7fe fb65 	bl	800074c <setCursor>
	print(timeStr);
 8002082:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fba8 	bl	80007dc <print>

}
 800208c:	bf00      	nop
 800208e:	37c8      	adds	r7, #200	; 0xc8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	0800a6c4 	.word	0x0800a6c4
 8002098:	0800a6cc 	.word	0x0800a6cc
 800209c:	0800a6d0 	.word	0x0800a6d0
 80020a0:	20000700 	.word	0x20000700
 80020a4:	20000210 	.word	0x20000210
 80020a8:	0800a6dc 	.word	0x0800a6dc
 80020ac:	20000714 	.word	0x20000714
 80020b0:	0800a6ec 	.word	0x0800a6ec

080020b4 <setting_page>:

void setting_page(){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	setCursor(6, 1);
 80020b8:	2101      	movs	r1, #1
 80020ba:	2006      	movs	r0, #6
 80020bc:	f7fe fb46 	bl	800074c <setCursor>
	print("KHALI");
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <setting_page+0x18>)
 80020c2:	f7fe fb8b 	bl	80007dc <print>

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	0800a6fc 	.word	0x0800a6fc

080020d0 <menu>:
//			pageflag = 1;
//
//		}
//}

void menu(){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0

	setCursor(1, 0);
 80020d4:	2100      	movs	r1, #0
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7fe fb38 	bl	800074c <setCursor>
	print("MENU:");
 80020dc:	481f      	ldr	r0, [pc, #124]	; (800215c <menu+0x8c>)
 80020de:	f7fe fb7d 	bl	80007dc <print>
	setCursor(1, 1);
 80020e2:	2101      	movs	r1, #1
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7fe fb31 	bl	800074c <setCursor>
	print("PLAY");
 80020ea:	481d      	ldr	r0, [pc, #116]	; (8002160 <menu+0x90>)
 80020ec:	f7fe fb76 	bl	80007dc <print>
	setCursor(1, 2);
 80020f0:	2102      	movs	r1, #2
 80020f2:	2001      	movs	r0, #1
 80020f4:	f7fe fb2a 	bl	800074c <setCursor>
	print("SETTING");
 80020f8:	481a      	ldr	r0, [pc, #104]	; (8002164 <menu+0x94>)
 80020fa:	f7fe fb6f 	bl	80007dc <print>
	setCursor(1, 3);
 80020fe:	2103      	movs	r1, #3
 8002100:	2001      	movs	r0, #1
 8002102:	f7fe fb23 	bl	800074c <setCursor>
	print("ABOUT");
 8002106:	4818      	ldr	r0, [pc, #96]	; (8002168 <menu+0x98>)
 8002108:	f7fe fb68 	bl	80007dc <print>
	setCursor(0, 0);
 800210c:	2100      	movs	r1, #0
 800210e:	2000      	movs	r0, #0
 8002110:	f7fe fb1c 	bl	800074c <setCursor>
	print(" ");
 8002114:	4815      	ldr	r0, [pc, #84]	; (800216c <menu+0x9c>)
 8002116:	f7fe fb61 	bl	80007dc <print>
	setCursor(0, 1);
 800211a:	2101      	movs	r1, #1
 800211c:	2000      	movs	r0, #0
 800211e:	f7fe fb15 	bl	800074c <setCursor>
	print(" ");
 8002122:	4812      	ldr	r0, [pc, #72]	; (800216c <menu+0x9c>)
 8002124:	f7fe fb5a 	bl	80007dc <print>
	setCursor(0, 2);
 8002128:	2102      	movs	r1, #2
 800212a:	2000      	movs	r0, #0
 800212c:	f7fe fb0e 	bl	800074c <setCursor>
	print(" ");
 8002130:	480e      	ldr	r0, [pc, #56]	; (800216c <menu+0x9c>)
 8002132:	f7fe fb53 	bl	80007dc <print>
	setCursor(0, 3);
 8002136:	2103      	movs	r1, #3
 8002138:	2000      	movs	r0, #0
 800213a:	f7fe fb07 	bl	800074c <setCursor>
	print(" ");
 800213e:	480b      	ldr	r0, [pc, #44]	; (800216c <menu+0x9c>)
 8002140:	f7fe fb4c 	bl	80007dc <print>
	setCursor(0, menu_curser_r);
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <menu+0xa0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	2000      	movs	r0, #0
 800214c:	f7fe fafe 	bl	800074c <setCursor>
	print(">");
 8002150:	4808      	ldr	r0, [pc, #32]	; (8002174 <menu+0xa4>)
 8002152:	f7fe fb43 	bl	80007dc <print>

}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	0800a704 	.word	0x0800a704
 8002160:	0800a70c 	.word	0x0800a70c
 8002164:	0800a714 	.word	0x0800a714
 8002168:	0800a71c 	.word	0x0800a71c
 800216c:	0800a6bc 	.word	0x0800a6bc
 8002170:	20000004 	.word	0x20000004
 8002174:	0800a724 	.word	0x0800a724

08002178 <programLoop>:

void programLoop() {
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
//    seven_segment_refresh();

    update_lcd();
 800217c:	f7ff fdda 	bl	8001d34 <update_lcd>
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4) {
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d110      	bne.n	80021b8 <HAL_TIM_PeriodElapsedCallback+0x34>
//		update_lcd();
		seven_segment_refresh();
 8002196:	f7ff fb09 	bl	80017ac <seven_segment_refresh>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 800219a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800219e:	480d      	ldr	r0, [pc, #52]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80021a0:	f002 f9b4 	bl	800450c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 80021a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a8:	480a      	ldr	r0, [pc, #40]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80021aa:	f002 f9af 	bl	800450c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80021ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b2:	4808      	ldr	r0, [pc, #32]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80021b4:	f002 f9aa 	bl	800450c <HAL_GPIO_TogglePin>

	}
	if(htim->Instance == TIM2){
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_PeriodElapsedCallback+0x42>
		test_shelik();
 80021c2:	f000 f94f 	bl	8002464 <test_shelik>
	}

}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40000800 	.word	0x40000800
 80021d4:	48001000 	.word	0x48001000

080021d8 <change_dir>:


void change_dir(int player){
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	if (player == 1){
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d119      	bne.n	800221a <change_dir+0x42>
		int new_dir = player1.direction + 1;
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <change_dir+0x88>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	3301      	adds	r3, #1
 80021ec:	60fb      	str	r3, [r7, #12]
		if(new_dir == 5){
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d101      	bne.n	80021f8 <change_dir+0x20>
			new_dir = 1;
 80021f4:	2301      	movs	r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
		}
		player1.direction = new_dir;
 80021f8:	4a19      	ldr	r2, [pc, #100]	; (8002260 <change_dir+0x88>)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	60d3      	str	r3, [r2, #12]
		lcd[player1.position_x][player1.position_y] = player1.direction;
 80021fe:	4b18      	ldr	r3, [pc, #96]	; (8002260 <change_dir+0x88>)
 8002200:	68d9      	ldr	r1, [r3, #12]
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <change_dir+0x88>)
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <change_dir+0x88>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	b2c8      	uxtb	r0, r1
 800220c:	4915      	ldr	r1, [pc, #84]	; (8002264 <change_dir+0x8c>)
 800220e:	0092      	lsls	r2, r2, #2
 8002210:	440a      	add	r2, r1
 8002212:	4413      	add	r3, r2
 8002214:	4602      	mov	r2, r0
 8002216:	701a      	strb	r2, [r3, #0]
		}
		player2.direction = new_dir;
		lcd[player2.position_x][player2.position_y] = player2.direction;

	}
}
 8002218:	e01b      	b.n	8002252 <change_dir+0x7a>
	}else if (player == 2){
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d118      	bne.n	8002252 <change_dir+0x7a>
		int new_dir = player2.direction + 1;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <change_dir+0x90>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	3301      	adds	r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
		if(new_dir == 5){
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b05      	cmp	r3, #5
 800222c:	d101      	bne.n	8002232 <change_dir+0x5a>
			new_dir = 1;
 800222e:	2301      	movs	r3, #1
 8002230:	60bb      	str	r3, [r7, #8]
		player2.direction = new_dir;
 8002232:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <change_dir+0x90>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
		lcd[player2.position_x][player2.position_y] = player2.direction;
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <change_dir+0x90>)
 800223a:	68d9      	ldr	r1, [r3, #12]
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <change_dir+0x90>)
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <change_dir+0x90>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	b2c8      	uxtb	r0, r1
 8002246:	4907      	ldr	r1, [pc, #28]	; (8002264 <change_dir+0x8c>)
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	440a      	add	r2, r1
 800224c:	4413      	add	r3, r2
 800224e:	4602      	mov	r2, r0
 8002250:	701a      	strb	r2, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000048 	.word	0x20000048
 8002264:	20000718 	.word	0x20000718
 8002268:	20000068 	.word	0x20000068

0800226c <boom>:

void boom(int player){
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	 PWM_Change_Tone(1000, 1000);
 8002274:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800227c:	f001 fade 	bl	800383c <PWM_Change_Tone>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0); //Temp
 8002280:	2200      	movs	r2, #0
 8002282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002286:	4847      	ldr	r0, [pc, #284]	; (80023a4 <boom+0x138>)
 8002288:	f002 f928 	bl	80044dc <HAL_GPIO_WritePin>
	int i;
	for(i = 0; i<10;i++){
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e00d      	b.n	80022ae <boom+0x42>
		if(bul[i].active==0)
 8002292:	4945      	ldr	r1, [pc, #276]	; (80023a8 <boom+0x13c>)
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	3310      	adds	r3, #16
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <boom+0x4a>
	for(i = 0; i<10;i++){
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3301      	adds	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	ddee      	ble.n	8002292 <boom+0x26>
 80022b4:	e000      	b.n	80022b8 <boom+0x4c>
			break;
 80022b6:	bf00      	nop
	}
	bul[i].active = 1;
 80022b8:	493b      	ldr	r1, [pc, #236]	; (80023a8 <boom+0x13c>)
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3310      	adds	r3, #16
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
	if (player == 1){
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d12f      	bne.n	8002332 <boom+0xc6>
		bul[i].direction=player1.direction;
 80022d2:	4b36      	ldr	r3, [pc, #216]	; (80023ac <boom+0x140>)
 80022d4:	68d9      	ldr	r1, [r3, #12]
 80022d6:	4834      	ldr	r0, [pc, #208]	; (80023a8 <boom+0x13c>)
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4403      	add	r3, r0
 80022e4:	330c      	adds	r3, #12
 80022e6:	6019      	str	r1, [r3, #0]
		bul[i].position_x=player1.position_x;
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <boom+0x140>)
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	482e      	ldr	r0, [pc, #184]	; (80023a8 <boom+0x13c>)
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4403      	add	r3, r0
 80022fa:	3304      	adds	r3, #4
 80022fc:	6019      	str	r1, [r3, #0]
		bul[i].position_y=player1.position_y;
 80022fe:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <boom+0x140>)
 8002300:	6899      	ldr	r1, [r3, #8]
 8002302:	4829      	ldr	r0, [pc, #164]	; (80023a8 <boom+0x13c>)
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4403      	add	r3, r0
 8002310:	3308      	adds	r3, #8
 8002312:	6019      	str	r1, [r3, #0]
		bul[i].player_id=1;
 8002314:	4924      	ldr	r1, [pc, #144]	; (80023a8 <boom+0x13c>)
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	2201      	movs	r2, #1
 8002324:	601a      	str	r2, [r3, #0]
		player1.arrow--;
 8002326:	4b21      	ldr	r3, [pc, #132]	; (80023ac <boom+0x140>)
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	3b01      	subs	r3, #1
 800232c:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <boom+0x140>)
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	e02e      	b.n	8002390 <boom+0x124>

	}else{
		bul[i].direction=player2.direction;
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <boom+0x144>)
 8002334:	68d9      	ldr	r1, [r3, #12]
 8002336:	481c      	ldr	r0, [pc, #112]	; (80023a8 <boom+0x13c>)
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4403      	add	r3, r0
 8002344:	330c      	adds	r3, #12
 8002346:	6019      	str	r1, [r3, #0]
		bul[i].position_x=player2.position_x;
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <boom+0x144>)
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	4816      	ldr	r0, [pc, #88]	; (80023a8 <boom+0x13c>)
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4403      	add	r3, r0
 800235a:	3304      	adds	r3, #4
 800235c:	6019      	str	r1, [r3, #0]
		bul[i].position_y=player2.position_y;
 800235e:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <boom+0x144>)
 8002360:	6899      	ldr	r1, [r3, #8]
 8002362:	4811      	ldr	r0, [pc, #68]	; (80023a8 <boom+0x13c>)
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4403      	add	r3, r0
 8002370:	3308      	adds	r3, #8
 8002372:	6019      	str	r1, [r3, #0]
		bul[i].player_id=2;
 8002374:	490c      	ldr	r1, [pc, #48]	; (80023a8 <boom+0x13c>)
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	2202      	movs	r2, #2
 8002384:	601a      	str	r2, [r3, #0]
		player2.arrow--;
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <boom+0x144>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	3b01      	subs	r3, #1
 800238c:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <boom+0x144>)
 800238e:	6193      	str	r3, [r2, #24]

	}
	 PWM_Change_Tone(1000, 0);
 8002390:	2100      	movs	r1, #0
 8002392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002396:	f001 fa51 	bl	800383c <PWM_Change_Tone>

//entesab be array

}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	48001000 	.word	0x48001000
 80023a8:	20000768 	.word	0x20000768
 80023ac:	20000048 	.word	0x20000048
 80023b0:	20000068 	.word	0x20000068

080023b4 <collect>:

int sev_result = 0;
void collect(uint8_t pos, int player){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
	if (pos == num_extra_bullet){
 80023c0:	79fa      	ldrb	r2, [r7, #7]
 80023c2:	4b23      	ldr	r3, [pc, #140]	; (8002450 <collect+0x9c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d10e      	bne.n	80023e8 <collect+0x34>
		if (player == 1)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <collect+0x28>
			player1.arrow+=1;
 80023d0:	4b20      	ldr	r3, [pc, #128]	; (8002454 <collect+0xa0>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	3301      	adds	r3, #1
 80023d6:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <collect+0xa0>)
 80023d8:	6193      	str	r3, [r2, #24]
 80023da:	e018      	b.n	800240e <collect+0x5a>
		else
			player2.arrow+=1;
 80023dc:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <collect+0xa4>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	3301      	adds	r3, #1
 80023e2:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <collect+0xa4>)
 80023e4:	6193      	str	r3, [r2, #24]
 80023e6:	e012      	b.n	800240e <collect+0x5a>
	}else if (pos == num_health){
 80023e8:	79fa      	ldrb	r2, [r7, #7]
 80023ea:	4b1c      	ldr	r3, [pc, #112]	; (800245c <collect+0xa8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d10d      	bne.n	800240e <collect+0x5a>
		if (player == 1)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d105      	bne.n	8002404 <collect+0x50>
			player1.health+=1;
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <collect+0xa0>)
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	3301      	adds	r3, #1
 80023fe:	4a15      	ldr	r2, [pc, #84]	; (8002454 <collect+0xa0>)
 8002400:	6153      	str	r3, [r2, #20]
 8002402:	e004      	b.n	800240e <collect+0x5a>
		else
			player2.health+=1;
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <collect+0xa4>)
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	3301      	adds	r3, #1
 800240a:	4a13      	ldr	r2, [pc, #76]	; (8002458 <collect+0xa4>)
 800240c:	6153      	str	r3, [r2, #20]
//	uint8_t c = player1.arrow;
//	uint8_t d = player1.health;
//	int results[4] = {d,c,b,a};
//	seven_segment_set_num(results);

	sev_result = player2.arrow * 1000 + player2.health * 100 + player1.arrow * 10 + player1.health;
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <collect+0xa4>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002416:	fb03 f202 	mul.w	r2, r3, r2
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <collect+0xa4>)
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2164      	movs	r1, #100	; 0x64
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	18d1      	adds	r1, r2, r3
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <collect+0xa0>)
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	18ca      	adds	r2, r1, r3
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <collect+0xa0>)
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	4413      	add	r3, r2
 800243a:	4a09      	ldr	r2, [pc, #36]	; (8002460 <collect+0xac>)
 800243c:	6013      	str	r3, [r2, #0]
	setNumber(sev_result);
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <collect+0xac>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff f9e0 	bl	8001808 <setNumber>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000098 	.word	0x20000098
 8002454:	20000048 	.word	0x20000048
 8002458:	20000068 	.word	0x20000068
 800245c:	200000a0 	.word	0x200000a0
 8002460:	20000830 	.word	0x20000830

08002464 <test_shelik>:

void test_shelik(){
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b08b      	sub	sp, #44	; 0x2c
 8002468:	af00      	add	r7, sp, #0
	for(int i = 0; i<10;i++){
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
 800246e:	f000 bcc1 	b.w	8002df4 <test_shelik+0x990>
		if(bul[i].active==1){
 8002472:	4992      	ldr	r1, [pc, #584]	; (80026bc <test_shelik+0x258>)
 8002474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	3310      	adds	r3, #16
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b01      	cmp	r3, #1
 8002486:	f040 84b2 	bne.w	8002dee <test_shelik+0x98a>
			//4 -> down
			//check direction
			// check next
			// update position and show
			//active =0
			if(bul[i].direction == 1){
 800248a:	498c      	ldr	r1, [pc, #560]	; (80026bc <test_shelik+0x258>)
 800248c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	330c      	adds	r3, #12
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b01      	cmp	r3, #1
 800249e:	f040 8123 	bne.w	80026e8 <test_shelik+0x284>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 80024a2:	4986      	ldr	r1, [pc, #536]	; (80026bc <test_shelik+0x258>)
 80024a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3304      	adds	r3, #4
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	4881      	ldr	r0, [pc, #516]	; (80026bc <test_shelik+0x258>)
 80024b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4403      	add	r3, r0
 80024c2:	3308      	adds	r3, #8
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	487e      	ldr	r0, [pc, #504]	; (80026c0 <test_shelik+0x25c>)
 80024c8:	008a      	lsls	r2, r1, #2
 80024ca:	4402      	add	r2, r0
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b7c      	ldr	r3, [pc, #496]	; (80026c4 <test_shelik+0x260>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d117      	bne.n	800250a <test_shelik+0xa6>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 80024da:	4978      	ldr	r1, [pc, #480]	; (80026bc <test_shelik+0x258>)
 80024dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	3304      	adds	r3, #4
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	4873      	ldr	r0, [pc, #460]	; (80026bc <test_shelik+0x258>)
 80024ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4403      	add	r3, r0
 80024fa:	3308      	adds	r3, #8
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4870      	ldr	r0, [pc, #448]	; (80026c0 <test_shelik+0x25c>)
 8002500:	008a      	lsls	r2, r1, #2
 8002502:	4402      	add	r2, r0
 8002504:	4413      	add	r3, r2
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
				}
				int new_x = bul[i].position_x - 1;
 800250a:	496c      	ldr	r1, [pc, #432]	; (80026bc <test_shelik+0x258>)
 800250c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3304      	adds	r3, #4
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3b01      	subs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]

				if(new_x >= 0){
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	db27      	blt.n	8002576 <test_shelik+0x112>
					bul[i].position_x = new_x;
 8002526:	4965      	ldr	r1, [pc, #404]	; (80026bc <test_shelik+0x258>)
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3304      	adds	r3, #4
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 800253a:	4960      	ldr	r1, [pc, #384]	; (80026bc <test_shelik+0x258>)
 800253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	3304      	adds	r3, #4
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	485b      	ldr	r0, [pc, #364]	; (80026bc <test_shelik+0x258>)
 800254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4403      	add	r3, r0
 800255a:	3308      	adds	r3, #8
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4858      	ldr	r0, [pc, #352]	; (80026c0 <test_shelik+0x25c>)
 8002560:	008a      	lsls	r2, r1, #2
 8002562:	4402      	add	r2, r0
 8002564:	4413      	add	r3, r2
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	607b      	str	r3, [r7, #4]
				if(next_element == num_obstacle){
 800256a:	4b57      	ldr	r3, [pc, #348]	; (80026c8 <test_shelik+0x264>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	429a      	cmp	r2, r3
 8002572:	d129      	bne.n	80025c8 <test_shelik+0x164>
 8002574:	e00b      	b.n	800258e <test_shelik+0x12a>
					bul[i].active = 0;
 8002576:	4951      	ldr	r1, [pc, #324]	; (80026bc <test_shelik+0x258>)
 8002578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	3310      	adds	r3, #16
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
					continue;
 800258a:	f000 bc30 	b.w	8002dee <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 800258e:	4b4d      	ldr	r3, [pc, #308]	; (80026c4 <test_shelik+0x260>)
 8002590:	681c      	ldr	r4, [r3, #0]
 8002592:	494a      	ldr	r1, [pc, #296]	; (80026bc <test_shelik+0x258>)
 8002594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	3304      	adds	r3, #4
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	4845      	ldr	r0, [pc, #276]	; (80026bc <test_shelik+0x258>)
 80025a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4403      	add	r3, r0
 80025b2:	3308      	adds	r3, #8
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	b2e4      	uxtb	r4, r4
 80025b8:	4841      	ldr	r0, [pc, #260]	; (80026c0 <test_shelik+0x25c>)
 80025ba:	008a      	lsls	r2, r1, #2
 80025bc:	4402      	add	r2, r0
 80025be:	4413      	add	r3, r2
 80025c0:	4622      	mov	r2, r4
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	f000 bc13 	b.w	8002dee <test_shelik+0x98a>
				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 80025c8:	4b40      	ldr	r3, [pc, #256]	; (80026cc <test_shelik+0x268>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d00e      	beq.n	80025f0 <test_shelik+0x18c>
 80025d2:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <test_shelik+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d009      	beq.n	80025f0 <test_shelik+0x18c>
 80025dc:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <test_shelik+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d004      	beq.n	80025f0 <test_shelik+0x18c>
 80025e6:	4b3c      	ldr	r3, [pc, #240]	; (80026d8 <test_shelik+0x274>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d135      	bne.n	800265c <test_shelik+0x1f8>
					if(bul[i].player_id == 1){
 80025f0:	4932      	ldr	r1, [pc, #200]	; (80026bc <test_shelik+0x258>)
 80025f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d110      	bne.n	8002626 <test_shelik+0x1c2>
						player2.health--;
 8002604:	4b35      	ldr	r3, [pc, #212]	; (80026dc <test_shelik+0x278>)
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	3b01      	subs	r3, #1
 800260a:	4a34      	ldr	r2, [pc, #208]	; (80026dc <test_shelik+0x278>)
 800260c:	6153      	str	r3, [r2, #20]
						if(player2.health==0){
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <test_shelik+0x278>)
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <test_shelik+0x1b6>
								endgame();
 8002616:	f000 fc0d 	bl	8002e34 <endgame>
							}
						player1.points++;
 800261a:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <test_shelik+0x27c>)
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	3301      	adds	r3, #1
 8002620:	4a2f      	ldr	r2, [pc, #188]	; (80026e0 <test_shelik+0x27c>)
 8002622:	6113      	str	r3, [r2, #16]
 8002624:	e00f      	b.n	8002646 <test_shelik+0x1e2>
					}
					else{
						player1.health--;
 8002626:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <test_shelik+0x27c>)
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	3b01      	subs	r3, #1
 800262c:	4a2c      	ldr	r2, [pc, #176]	; (80026e0 <test_shelik+0x27c>)
 800262e:	6153      	str	r3, [r2, #20]
						if(player1.health==0){
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <test_shelik+0x27c>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <test_shelik+0x1d8>
							endgame();
 8002638:	f000 fbfc 	bl	8002e34 <endgame>
						}
						player2.points++;
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <test_shelik+0x278>)
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	3301      	adds	r3, #1
 8002642:	4a26      	ldr	r2, [pc, #152]	; (80026dc <test_shelik+0x278>)
 8002644:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002646:	491d      	ldr	r1, [pc, #116]	; (80026bc <test_shelik+0x258>)
 8002648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	3310      	adds	r3, #16
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
					continue;
 800265a:	e3c8      	b.n	8002dee <test_shelik+0x98a>
				}
				else if(next_element == num_wall){
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <test_shelik+0x280>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	429a      	cmp	r2, r3
 8002664:	d10a      	bne.n	800267c <test_shelik+0x218>
					bul[i].active = 0;
 8002666:	4915      	ldr	r1, [pc, #84]	; (80026bc <test_shelik+0x258>)
 8002668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	3310      	adds	r3, #16
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
					continue;
 800267a:	e3b8      	b.n	8002dee <test_shelik+0x98a>
				}
				else if(next_element == 0){
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 83b5 	bne.w	8002dee <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <test_shelik+0x260>)
 8002686:	681c      	ldr	r4, [r3, #0]
 8002688:	490c      	ldr	r1, [pc, #48]	; (80026bc <test_shelik+0x258>)
 800268a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3304      	adds	r3, #4
 8002698:	6819      	ldr	r1, [r3, #0]
 800269a:	4808      	ldr	r0, [pc, #32]	; (80026bc <test_shelik+0x258>)
 800269c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4403      	add	r3, r0
 80026a8:	3308      	adds	r3, #8
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	b2e4      	uxtb	r4, r4
 80026ae:	4804      	ldr	r0, [pc, #16]	; (80026c0 <test_shelik+0x25c>)
 80026b0:	008a      	lsls	r2, r1, #2
 80026b2:	4402      	add	r2, r0
 80026b4:	4413      	add	r3, r2
 80026b6:	4622      	mov	r2, r4
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e398      	b.n	8002dee <test_shelik+0x98a>
 80026bc:	20000768 	.word	0x20000768
 80026c0:	20000718 	.word	0x20000718
 80026c4:	200000a4 	.word	0x200000a4
 80026c8:	200000ac 	.word	0x200000ac
 80026cc:	20000094 	.word	0x20000094
 80026d0:	20000088 	.word	0x20000088
 80026d4:	20000090 	.word	0x20000090
 80026d8:	2000008c 	.word	0x2000008c
 80026dc:	20000068 	.word	0x20000068
 80026e0:	20000048 	.word	0x20000048
 80026e4:	200000a8 	.word	0x200000a8
			}




			else if(bul[i].direction == 2){
 80026e8:	49a0      	ldr	r1, [pc, #640]	; (800296c <test_shelik+0x508>)
 80026ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	330c      	adds	r3, #12
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	f040 814c 	bne.w	8002998 <test_shelik+0x534>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 8002700:	499a      	ldr	r1, [pc, #616]	; (800296c <test_shelik+0x508>)
 8002702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3304      	adds	r3, #4
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	4896      	ldr	r0, [pc, #600]	; (800296c <test_shelik+0x508>)
 8002714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4403      	add	r3, r0
 8002720:	3308      	adds	r3, #8
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4892      	ldr	r0, [pc, #584]	; (8002970 <test_shelik+0x50c>)
 8002726:	008a      	lsls	r2, r1, #2
 8002728:	4402      	add	r2, r0
 800272a:	4413      	add	r3, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	4b90      	ldr	r3, [pc, #576]	; (8002974 <test_shelik+0x510>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d117      	bne.n	8002768 <test_shelik+0x304>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 8002738:	498c      	ldr	r1, [pc, #560]	; (800296c <test_shelik+0x508>)
 800273a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	3304      	adds	r3, #4
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	4888      	ldr	r0, [pc, #544]	; (800296c <test_shelik+0x508>)
 800274c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4403      	add	r3, r0
 8002758:	3308      	adds	r3, #8
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4884      	ldr	r0, [pc, #528]	; (8002970 <test_shelik+0x50c>)
 800275e:	008a      	lsls	r2, r1, #2
 8002760:	4402      	add	r2, r0
 8002762:	4413      	add	r3, r2
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
				}

				int new_y = bul[i].position_y - 1;
 8002768:	4980      	ldr	r1, [pc, #512]	; (800296c <test_shelik+0x508>)
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	3308      	adds	r3, #8
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3b01      	subs	r3, #1
 800277c:	613b      	str	r3, [r7, #16]
				if(new_y >= 0){
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db27      	blt.n	80027d4 <test_shelik+0x370>
					bul[i].position_y = new_y;
 8002784:	4979      	ldr	r1, [pc, #484]	; (800296c <test_shelik+0x508>)
 8002786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	3308      	adds	r3, #8
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 8002798:	4974      	ldr	r1, [pc, #464]	; (800296c <test_shelik+0x508>)
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	3304      	adds	r3, #4
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	4870      	ldr	r0, [pc, #448]	; (800296c <test_shelik+0x508>)
 80027ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4403      	add	r3, r0
 80027b8:	3308      	adds	r3, #8
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	486c      	ldr	r0, [pc, #432]	; (8002970 <test_shelik+0x50c>)
 80027be:	008a      	lsls	r2, r1, #2
 80027c0:	4402      	add	r2, r0
 80027c2:	4413      	add	r3, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	60fb      	str	r3, [r7, #12]
				if(next_element == num_obstacle){
 80027c8:	4b6b      	ldr	r3, [pc, #428]	; (8002978 <test_shelik+0x514>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d127      	bne.n	8002822 <test_shelik+0x3be>
 80027d2:	e00a      	b.n	80027ea <test_shelik+0x386>
					bul[i].active = 0;
 80027d4:	4965      	ldr	r1, [pc, #404]	; (800296c <test_shelik+0x508>)
 80027d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	3310      	adds	r3, #16
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
					continue;
 80027e8:	e301      	b.n	8002dee <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 80027ea:	4b62      	ldr	r3, [pc, #392]	; (8002974 <test_shelik+0x510>)
 80027ec:	681c      	ldr	r4, [r3, #0]
 80027ee:	495f      	ldr	r1, [pc, #380]	; (800296c <test_shelik+0x508>)
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3304      	adds	r3, #4
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	485a      	ldr	r0, [pc, #360]	; (800296c <test_shelik+0x508>)
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4403      	add	r3, r0
 800280e:	3308      	adds	r3, #8
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	b2e4      	uxtb	r4, r4
 8002814:	4856      	ldr	r0, [pc, #344]	; (8002970 <test_shelik+0x50c>)
 8002816:	008a      	lsls	r2, r1, #2
 8002818:	4402      	add	r2, r0
 800281a:	4413      	add	r3, r2
 800281c:	4622      	mov	r2, r4
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e06b      	b.n	80028fa <test_shelik+0x496>
				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 8002822:	4b56      	ldr	r3, [pc, #344]	; (800297c <test_shelik+0x518>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d00e      	beq.n	800284a <test_shelik+0x3e6>
 800282c:	4b54      	ldr	r3, [pc, #336]	; (8002980 <test_shelik+0x51c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	429a      	cmp	r2, r3
 8002834:	d009      	beq.n	800284a <test_shelik+0x3e6>
 8002836:	4b53      	ldr	r3, [pc, #332]	; (8002984 <test_shelik+0x520>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	429a      	cmp	r2, r3
 800283e:	d004      	beq.n	800284a <test_shelik+0x3e6>
 8002840:	4b51      	ldr	r3, [pc, #324]	; (8002988 <test_shelik+0x524>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	429a      	cmp	r2, r3
 8002848:	d129      	bne.n	800289e <test_shelik+0x43a>
					if(bul[i].player_id == 1){
 800284a:	4948      	ldr	r1, [pc, #288]	; (800296c <test_shelik+0x508>)
 800284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d10a      	bne.n	8002874 <test_shelik+0x410>
						player2.health--;
 800285e:	4b4b      	ldr	r3, [pc, #300]	; (800298c <test_shelik+0x528>)
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	3b01      	subs	r3, #1
 8002864:	4a49      	ldr	r2, [pc, #292]	; (800298c <test_shelik+0x528>)
 8002866:	6153      	str	r3, [r2, #20]
						player1.points++;
 8002868:	4b49      	ldr	r3, [pc, #292]	; (8002990 <test_shelik+0x52c>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	3301      	adds	r3, #1
 800286e:	4a48      	ldr	r2, [pc, #288]	; (8002990 <test_shelik+0x52c>)
 8002870:	6113      	str	r3, [r2, #16]
 8002872:	e009      	b.n	8002888 <test_shelik+0x424>
					}
					else{
						player1.health--;
 8002874:	4b46      	ldr	r3, [pc, #280]	; (8002990 <test_shelik+0x52c>)
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	3b01      	subs	r3, #1
 800287a:	4a45      	ldr	r2, [pc, #276]	; (8002990 <test_shelik+0x52c>)
 800287c:	6153      	str	r3, [r2, #20]
						player2.points++;
 800287e:	4b43      	ldr	r3, [pc, #268]	; (800298c <test_shelik+0x528>)
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	3301      	adds	r3, #1
 8002884:	4a41      	ldr	r2, [pc, #260]	; (800298c <test_shelik+0x528>)
 8002886:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002888:	4938      	ldr	r1, [pc, #224]	; (800296c <test_shelik+0x508>)
 800288a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	3310      	adds	r3, #16
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
					continue;
 800289c:	e2a7      	b.n	8002dee <test_shelik+0x98a>
				}
				else if(next_element == num_wall){
 800289e:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <test_shelik+0x530>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d10a      	bne.n	80028be <test_shelik+0x45a>
					bul[i].active = 0;
 80028a8:	4930      	ldr	r1, [pc, #192]	; (800296c <test_shelik+0x508>)
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3310      	adds	r3, #16
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
					continue;
 80028bc:	e297      	b.n	8002dee <test_shelik+0x98a>
				}
				else if(next_element == 0){
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d11a      	bne.n	80028fa <test_shelik+0x496>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 80028c4:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <test_shelik+0x510>)
 80028c6:	681c      	ldr	r4, [r3, #0]
 80028c8:	4928      	ldr	r1, [pc, #160]	; (800296c <test_shelik+0x508>)
 80028ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	3304      	adds	r3, #4
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	4824      	ldr	r0, [pc, #144]	; (800296c <test_shelik+0x508>)
 80028dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4403      	add	r3, r0
 80028e8:	3308      	adds	r3, #8
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	b2e4      	uxtb	r4, r4
 80028ee:	4820      	ldr	r0, [pc, #128]	; (8002970 <test_shelik+0x50c>)
 80028f0:	008a      	lsls	r2, r1, #2
 80028f2:	4402      	add	r2, r0
 80028f4:	4413      	add	r3, r2
 80028f6:	4622      	mov	r2, r4
 80028f8:	701a      	strb	r2, [r3, #0]

				}
				if(lcd[bul[i].position_x][bul[i].position_y+1] == num_arrow){
 80028fa:	491c      	ldr	r1, [pc, #112]	; (800296c <test_shelik+0x508>)
 80028fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	3304      	adds	r3, #4
 800290a:	6819      	ldr	r1, [r3, #0]
 800290c:	4817      	ldr	r0, [pc, #92]	; (800296c <test_shelik+0x508>)
 800290e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4403      	add	r3, r0
 800291a:	3308      	adds	r3, #8
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3301      	adds	r3, #1
 8002920:	4813      	ldr	r0, [pc, #76]	; (8002970 <test_shelik+0x50c>)
 8002922:	008a      	lsls	r2, r1, #2
 8002924:	4402      	add	r2, r0
 8002926:	4413      	add	r3, r2
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <test_shelik+0x510>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	f040 825c 	bne.w	8002dee <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y+1] = 0;
 8002936:	490d      	ldr	r1, [pc, #52]	; (800296c <test_shelik+0x508>)
 8002938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	3304      	adds	r3, #4
 8002946:	6819      	ldr	r1, [r3, #0]
 8002948:	4808      	ldr	r0, [pc, #32]	; (800296c <test_shelik+0x508>)
 800294a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4403      	add	r3, r0
 8002956:	3308      	adds	r3, #8
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	4804      	ldr	r0, [pc, #16]	; (8002970 <test_shelik+0x50c>)
 800295e:	008a      	lsls	r2, r1, #2
 8002960:	4402      	add	r2, r0
 8002962:	4413      	add	r3, r2
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	e241      	b.n	8002dee <test_shelik+0x98a>
 800296a:	bf00      	nop
 800296c:	20000768 	.word	0x20000768
 8002970:	20000718 	.word	0x20000718
 8002974:	200000a4 	.word	0x200000a4
 8002978:	200000ac 	.word	0x200000ac
 800297c:	20000094 	.word	0x20000094
 8002980:	20000088 	.word	0x20000088
 8002984:	20000090 	.word	0x20000090
 8002988:	2000008c 	.word	0x2000008c
 800298c:	20000068 	.word	0x20000068
 8002990:	20000048 	.word	0x20000048
 8002994:	200000a8 	.word	0x200000a8
			}




			else if(bul[i].direction == 3){
 8002998:	4985      	ldr	r1, [pc, #532]	; (8002bb0 <test_shelik+0x74c>)
 800299a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	330c      	adds	r3, #12
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	f040 8116 	bne.w	8002bdc <test_shelik+0x778>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 80029b0:	497f      	ldr	r1, [pc, #508]	; (8002bb0 <test_shelik+0x74c>)
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	3304      	adds	r3, #4
 80029c0:	6819      	ldr	r1, [r3, #0]
 80029c2:	487b      	ldr	r0, [pc, #492]	; (8002bb0 <test_shelik+0x74c>)
 80029c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4403      	add	r3, r0
 80029d0:	3308      	adds	r3, #8
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4877      	ldr	r0, [pc, #476]	; (8002bb4 <test_shelik+0x750>)
 80029d6:	008a      	lsls	r2, r1, #2
 80029d8:	4402      	add	r2, r0
 80029da:	4413      	add	r3, r2
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	4b75      	ldr	r3, [pc, #468]	; (8002bb8 <test_shelik+0x754>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d117      	bne.n	8002a18 <test_shelik+0x5b4>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 80029e8:	4971      	ldr	r1, [pc, #452]	; (8002bb0 <test_shelik+0x74c>)
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3304      	adds	r3, #4
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	486d      	ldr	r0, [pc, #436]	; (8002bb0 <test_shelik+0x74c>)
 80029fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4403      	add	r3, r0
 8002a08:	3308      	adds	r3, #8
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4869      	ldr	r0, [pc, #420]	; (8002bb4 <test_shelik+0x750>)
 8002a0e:	008a      	lsls	r2, r1, #2
 8002a10:	4402      	add	r2, r0
 8002a12:	4413      	add	r3, r2
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
				}
				int new_x = bul[i].position_x + 1;
 8002a18:	4965      	ldr	r1, [pc, #404]	; (8002bb0 <test_shelik+0x74c>)
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3304      	adds	r3, #4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	61bb      	str	r3, [r7, #24]
				if(new_x < 24){
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	2b17      	cmp	r3, #23
 8002a32:	dc27      	bgt.n	8002a84 <test_shelik+0x620>
					bul[i].position_x = new_x;
 8002a34:	495e      	ldr	r1, [pc, #376]	; (8002bb0 <test_shelik+0x74c>)
 8002a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	3304      	adds	r3, #4
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 8002a48:	4959      	ldr	r1, [pc, #356]	; (8002bb0 <test_shelik+0x74c>)
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	3304      	adds	r3, #4
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	4855      	ldr	r0, [pc, #340]	; (8002bb0 <test_shelik+0x74c>)
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4403      	add	r3, r0
 8002a68:	3308      	adds	r3, #8
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4851      	ldr	r0, [pc, #324]	; (8002bb4 <test_shelik+0x750>)
 8002a6e:	008a      	lsls	r2, r1, #2
 8002a70:	4402      	add	r2, r0
 8002a72:	4413      	add	r3, r2
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	617b      	str	r3, [r7, #20]
				if(next_element == num_obstacle){
 8002a78:	4b50      	ldr	r3, [pc, #320]	; (8002bbc <test_shelik+0x758>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d127      	bne.n	8002ad2 <test_shelik+0x66e>
 8002a82:	e00a      	b.n	8002a9a <test_shelik+0x636>
					bul[i].active = 0;
 8002a84:	494a      	ldr	r1, [pc, #296]	; (8002bb0 <test_shelik+0x74c>)
 8002a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	3310      	adds	r3, #16
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
					continue;
 8002a98:	e1a9      	b.n	8002dee <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002a9a:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <test_shelik+0x754>)
 8002a9c:	681c      	ldr	r4, [r3, #0]
 8002a9e:	4944      	ldr	r1, [pc, #272]	; (8002bb0 <test_shelik+0x74c>)
 8002aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	3304      	adds	r3, #4
 8002aae:	6819      	ldr	r1, [r3, #0]
 8002ab0:	483f      	ldr	r0, [pc, #252]	; (8002bb0 <test_shelik+0x74c>)
 8002ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4403      	add	r3, r0
 8002abe:	3308      	adds	r3, #8
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	b2e4      	uxtb	r4, r4
 8002ac4:	483b      	ldr	r0, [pc, #236]	; (8002bb4 <test_shelik+0x750>)
 8002ac6:	008a      	lsls	r2, r1, #2
 8002ac8:	4402      	add	r2, r0
 8002aca:	4413      	add	r3, r2
 8002acc:	4622      	mov	r2, r4
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	e18d      	b.n	8002dee <test_shelik+0x98a>
				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <test_shelik+0x75c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d00e      	beq.n	8002afa <test_shelik+0x696>
 8002adc:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <test_shelik+0x760>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d009      	beq.n	8002afa <test_shelik+0x696>
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <test_shelik+0x764>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d004      	beq.n	8002afa <test_shelik+0x696>
 8002af0:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <test_shelik+0x768>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d129      	bne.n	8002b4e <test_shelik+0x6ea>
					if(bul[i].player_id == 1){
 8002afa:	492d      	ldr	r1, [pc, #180]	; (8002bb0 <test_shelik+0x74c>)
 8002afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d10a      	bne.n	8002b24 <test_shelik+0x6c0>
						player2.health--;
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <test_shelik+0x76c>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	4a2e      	ldr	r2, [pc, #184]	; (8002bd0 <test_shelik+0x76c>)
 8002b16:	6153      	str	r3, [r2, #20]
						player1.points++;
 8002b18:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <test_shelik+0x770>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	4a2d      	ldr	r2, [pc, #180]	; (8002bd4 <test_shelik+0x770>)
 8002b20:	6113      	str	r3, [r2, #16]
 8002b22:	e009      	b.n	8002b38 <test_shelik+0x6d4>
					}
					else{
						player1.health--;
 8002b24:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <test_shelik+0x770>)
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	4a2a      	ldr	r2, [pc, #168]	; (8002bd4 <test_shelik+0x770>)
 8002b2c:	6153      	str	r3, [r2, #20]
						player2.points++;
 8002b2e:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <test_shelik+0x76c>)
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	3301      	adds	r3, #1
 8002b34:	4a26      	ldr	r2, [pc, #152]	; (8002bd0 <test_shelik+0x76c>)
 8002b36:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002b38:	491d      	ldr	r1, [pc, #116]	; (8002bb0 <test_shelik+0x74c>)
 8002b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3310      	adds	r3, #16
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
					continue;
 8002b4c:	e14f      	b.n	8002dee <test_shelik+0x98a>
				}
				else if(next_element == num_wall){
 8002b4e:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <test_shelik+0x774>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d10a      	bne.n	8002b6e <test_shelik+0x70a>
					bul[i].active = 0;
 8002b58:	4915      	ldr	r1, [pc, #84]	; (8002bb0 <test_shelik+0x74c>)
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	3310      	adds	r3, #16
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
					continue;
 8002b6c:	e13f      	b.n	8002dee <test_shelik+0x98a>
				}
				else if(next_element == 0){
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f040 813c 	bne.w	8002dee <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <test_shelik+0x754>)
 8002b78:	681c      	ldr	r4, [r3, #0]
 8002b7a:	490d      	ldr	r1, [pc, #52]	; (8002bb0 <test_shelik+0x74c>)
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	3304      	adds	r3, #4
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	4808      	ldr	r0, [pc, #32]	; (8002bb0 <test_shelik+0x74c>)
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4403      	add	r3, r0
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	b2e4      	uxtb	r4, r4
 8002ba0:	4804      	ldr	r0, [pc, #16]	; (8002bb4 <test_shelik+0x750>)
 8002ba2:	008a      	lsls	r2, r1, #2
 8002ba4:	4402      	add	r2, r0
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4622      	mov	r2, r4
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e11f      	b.n	8002dee <test_shelik+0x98a>
 8002bae:	bf00      	nop
 8002bb0:	20000768 	.word	0x20000768
 8002bb4:	20000718 	.word	0x20000718
 8002bb8:	200000a4 	.word	0x200000a4
 8002bbc:	200000ac 	.word	0x200000ac
 8002bc0:	20000094 	.word	0x20000094
 8002bc4:	20000088 	.word	0x20000088
 8002bc8:	20000090 	.word	0x20000090
 8002bcc:	2000008c 	.word	0x2000008c
 8002bd0:	20000068 	.word	0x20000068
 8002bd4:	20000048 	.word	0x20000048
 8002bd8:	200000a8 	.word	0x200000a8
			}




			else if(bul[i].direction == 4){
 8002bdc:	498a      	ldr	r1, [pc, #552]	; (8002e08 <test_shelik+0x9a4>)
 8002bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	330c      	adds	r3, #12
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	f040 80fd 	bne.w	8002dee <test_shelik+0x98a>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 8002bf4:	4984      	ldr	r1, [pc, #528]	; (8002e08 <test_shelik+0x9a4>)
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3304      	adds	r3, #4
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	4880      	ldr	r0, [pc, #512]	; (8002e08 <test_shelik+0x9a4>)
 8002c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4403      	add	r3, r0
 8002c14:	3308      	adds	r3, #8
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	487c      	ldr	r0, [pc, #496]	; (8002e0c <test_shelik+0x9a8>)
 8002c1a:	008a      	lsls	r2, r1, #2
 8002c1c:	4402      	add	r2, r0
 8002c1e:	4413      	add	r3, r2
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b7a      	ldr	r3, [pc, #488]	; (8002e10 <test_shelik+0x9ac>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d117      	bne.n	8002c5c <test_shelik+0x7f8>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 8002c2c:	4976      	ldr	r1, [pc, #472]	; (8002e08 <test_shelik+0x9a4>)
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	6819      	ldr	r1, [r3, #0]
 8002c3e:	4872      	ldr	r0, [pc, #456]	; (8002e08 <test_shelik+0x9a4>)
 8002c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4403      	add	r3, r0
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	486e      	ldr	r0, [pc, #440]	; (8002e0c <test_shelik+0x9a8>)
 8002c52:	008a      	lsls	r2, r1, #2
 8002c54:	4402      	add	r2, r0
 8002c56:	4413      	add	r3, r2
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
				}
				int new_y = bul[i].position_y + 1;
 8002c5c:	496a      	ldr	r1, [pc, #424]	; (8002e08 <test_shelik+0x9a4>)
 8002c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	623b      	str	r3, [r7, #32]
				if(new_y < 4){
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	dc27      	bgt.n	8002cc8 <test_shelik+0x864>
					bul[i].position_y = new_y;
 8002c78:	4963      	ldr	r1, [pc, #396]	; (8002e08 <test_shelik+0x9a4>)
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3308      	adds	r3, #8
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 8002c8c:	495e      	ldr	r1, [pc, #376]	; (8002e08 <test_shelik+0x9a4>)
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	485a      	ldr	r0, [pc, #360]	; (8002e08 <test_shelik+0x9a4>)
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4403      	add	r3, r0
 8002cac:	3308      	adds	r3, #8
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4856      	ldr	r0, [pc, #344]	; (8002e0c <test_shelik+0x9a8>)
 8002cb2:	008a      	lsls	r2, r1, #2
 8002cb4:	4402      	add	r2, r0
 8002cb6:	4413      	add	r3, r2
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	61fb      	str	r3, [r7, #28]
				if(next_element == num_obstacle){
 8002cbc:	4b55      	ldr	r3, [pc, #340]	; (8002e14 <test_shelik+0x9b0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d127      	bne.n	8002d16 <test_shelik+0x8b2>
 8002cc6:	e00a      	b.n	8002cde <test_shelik+0x87a>
					bul[i].active = 0;
 8002cc8:	494f      	ldr	r1, [pc, #316]	; (8002e08 <test_shelik+0x9a4>)
 8002cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3310      	adds	r3, #16
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
					continue;
 8002cdc:	e087      	b.n	8002dee <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002cde:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <test_shelik+0x9ac>)
 8002ce0:	681c      	ldr	r4, [r3, #0]
 8002ce2:	4949      	ldr	r1, [pc, #292]	; (8002e08 <test_shelik+0x9a4>)
 8002ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	6819      	ldr	r1, [r3, #0]
 8002cf4:	4844      	ldr	r0, [pc, #272]	; (8002e08 <test_shelik+0x9a4>)
 8002cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4403      	add	r3, r0
 8002d02:	3308      	adds	r3, #8
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	b2e4      	uxtb	r4, r4
 8002d08:	4840      	ldr	r0, [pc, #256]	; (8002e0c <test_shelik+0x9a8>)
 8002d0a:	008a      	lsls	r2, r1, #2
 8002d0c:	4402      	add	r2, r0
 8002d0e:	4413      	add	r3, r2
 8002d10:	4622      	mov	r2, r4
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e06b      	b.n	8002dee <test_shelik+0x98a>

				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 8002d16:	4b40      	ldr	r3, [pc, #256]	; (8002e18 <test_shelik+0x9b4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69fa      	ldr	r2, [r7, #28]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d00e      	beq.n	8002d3e <test_shelik+0x8da>
 8002d20:	4b3e      	ldr	r3, [pc, #248]	; (8002e1c <test_shelik+0x9b8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d009      	beq.n	8002d3e <test_shelik+0x8da>
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	; (8002e20 <test_shelik+0x9bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d004      	beq.n	8002d3e <test_shelik+0x8da>
 8002d34:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <test_shelik+0x9c0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d129      	bne.n	8002d92 <test_shelik+0x92e>
					if(bul[i].player_id == 1){
 8002d3e:	4932      	ldr	r1, [pc, #200]	; (8002e08 <test_shelik+0x9a4>)
 8002d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d10a      	bne.n	8002d68 <test_shelik+0x904>
						player2.health--;
 8002d52:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <test_shelik+0x9c4>)
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	4a33      	ldr	r2, [pc, #204]	; (8002e28 <test_shelik+0x9c4>)
 8002d5a:	6153      	str	r3, [r2, #20]
						player1.points++;
 8002d5c:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <test_shelik+0x9c8>)
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	3301      	adds	r3, #1
 8002d62:	4a32      	ldr	r2, [pc, #200]	; (8002e2c <test_shelik+0x9c8>)
 8002d64:	6113      	str	r3, [r2, #16]
 8002d66:	e009      	b.n	8002d7c <test_shelik+0x918>
					}
					else{
						player1.health--;
 8002d68:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <test_shelik+0x9c8>)
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <test_shelik+0x9c8>)
 8002d70:	6153      	str	r3, [r2, #20]
						player2.points++;
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <test_shelik+0x9c4>)
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	3301      	adds	r3, #1
 8002d78:	4a2b      	ldr	r2, [pc, #172]	; (8002e28 <test_shelik+0x9c4>)
 8002d7a:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002d7c:	4922      	ldr	r1, [pc, #136]	; (8002e08 <test_shelik+0x9a4>)
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	3310      	adds	r3, #16
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
					continue;
 8002d90:	e02d      	b.n	8002dee <test_shelik+0x98a>
				}

				else if(next_element == num_wall){
 8002d92:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <test_shelik+0x9cc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d10a      	bne.n	8002db2 <test_shelik+0x94e>
					bul[i].active = 0;
 8002d9c:	491a      	ldr	r1, [pc, #104]	; (8002e08 <test_shelik+0x9a4>)
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3310      	adds	r3, #16
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
					continue;
 8002db0:	e01d      	b.n	8002dee <test_shelik+0x98a>
				}
				else if(next_element == 0){
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d11a      	bne.n	8002dee <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <test_shelik+0x9ac>)
 8002dba:	681c      	ldr	r4, [r3, #0]
 8002dbc:	4912      	ldr	r1, [pc, #72]	; (8002e08 <test_shelik+0x9a4>)
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3304      	adds	r3, #4
 8002dcc:	6819      	ldr	r1, [r3, #0]
 8002dce:	480e      	ldr	r0, [pc, #56]	; (8002e08 <test_shelik+0x9a4>)
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4403      	add	r3, r0
 8002ddc:	3308      	adds	r3, #8
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	b2e4      	uxtb	r4, r4
 8002de2:	480a      	ldr	r0, [pc, #40]	; (8002e0c <test_shelik+0x9a8>)
 8002de4:	008a      	lsls	r2, r1, #2
 8002de6:	4402      	add	r2, r0
 8002de8:	4413      	add	r3, r2
 8002dea:	4622      	mov	r2, r4
 8002dec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<10;i++){
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	3301      	adds	r3, #1
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	2b09      	cmp	r3, #9
 8002df8:	f77f ab3b 	ble.w	8002472 <test_shelik+0xe>


			}
		}
	}
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	372c      	adds	r7, #44	; 0x2c
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd90      	pop	{r4, r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000768 	.word	0x20000768
 8002e0c:	20000718 	.word	0x20000718
 8002e10:	200000a4 	.word	0x200000a4
 8002e14:	200000ac 	.word	0x200000ac
 8002e18:	20000094 	.word	0x20000094
 8002e1c:	20000088 	.word	0x20000088
 8002e20:	20000090 	.word	0x20000090
 8002e24:	2000008c 	.word	0x2000008c
 8002e28:	20000068 	.word	0x20000068
 8002e2c:	20000048 	.word	0x20000048
 8002e30:	200000a8 	.word	0x200000a8

08002e34 <endgame>:
void endgame(){
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0

	}
	else{

	}
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <move>:


void move(int player){
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b094      	sub	sp, #80	; 0x50
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	int dir;

	if (player == 1){
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	f040 8148 	bne.w	80030e4 <move+0x2a0>
		dir = player1.direction;
 8002e54:	4b9f      	ldr	r3, [pc, #636]	; (80030d4 <move+0x290>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 8002e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d14b      	bne.n	8002ef8 <move+0xb4>
			int curr_col = player1.position_x;
 8002e60:	4b9c      	ldr	r3, [pc, #624]	; (80030d4 <move+0x290>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	613b      	str	r3, [r7, #16]
			int curr_row = player1.position_y;
 8002e66:	4b9b      	ldr	r3, [pc, #620]	; (80030d4 <move+0x290>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	60fb      	str	r3, [r7, #12]
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f340 8275 	ble.w	800335e <move+0x51a>
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	4a97      	ldr	r2, [pc, #604]	; (80030d8 <move+0x294>)
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	441a      	add	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4413      	add	r3, r2
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b95      	ldr	r3, [pc, #596]	; (80030dc <move+0x298>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	f000 8267 	beq.w	800335e <move+0x51a>
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	4a90      	ldr	r2, [pc, #576]	; (80030d8 <move+0x294>)
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b8f      	ldr	r3, [pc, #572]	; (80030e0 <move+0x29c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	f000 8259 	beq.w	800335e <move+0x51a>
				collect(lcd[curr_col - 1][curr_row], 1); //TODO add prizes
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	4a89      	ldr	r2, [pc, #548]	; (80030d8 <move+0x294>)
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	441a      	add	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4413      	add	r3, r2
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fa78 	bl	80023b4 <collect>
				lcd[curr_col][curr_row] = 0;
 8002ec4:	4a84      	ldr	r2, [pc, #528]	; (80030d8 <move+0x294>)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	441a      	add	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player1.direction;
 8002ed4:	4b7f      	ldr	r3, [pc, #508]	; (80030d4 <move+0x290>)
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b2d1      	uxtb	r1, r2
 8002ede:	4a7e      	ldr	r2, [pc, #504]	; (80030d8 <move+0x294>)
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	441a      	add	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	460a      	mov	r2, r1
 8002eea:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x - 1;
 8002eec:	4b79      	ldr	r3, [pc, #484]	; (80030d4 <move+0x290>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	4a78      	ldr	r2, [pc, #480]	; (80030d4 <move+0x290>)
 8002ef4:	6053      	str	r3, [r2, #4]
				lcd[curr_col][curr_row + 1] = player2.direction;
				player2.position_y = player2.position_y + 1;
			}
		}
	}
}
 8002ef6:	e232      	b.n	800335e <move+0x51a>
		}else if (dir == 2){
 8002ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d14b      	bne.n	8002f96 <move+0x152>
			int curr_col = player1.position_x;
 8002efe:	4b75      	ldr	r3, [pc, #468]	; (80030d4 <move+0x290>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	61bb      	str	r3, [r7, #24]
			int curr_row = player1.position_y;
 8002f04:	4b73      	ldr	r3, [pc, #460]	; (80030d4 <move+0x290>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	617b      	str	r3, [r7, #20]
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f340 8226 	ble.w	800335e <move+0x51a>
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	4970      	ldr	r1, [pc, #448]	; (80030d8 <move+0x294>)
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	0092      	lsls	r2, r2, #2
 8002f1c:	440a      	add	r2, r1
 8002f1e:	4413      	add	r3, r2
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b6d      	ldr	r3, [pc, #436]	; (80030dc <move+0x298>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f000 8218 	beq.w	800335e <move+0x51a>
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	4969      	ldr	r1, [pc, #420]	; (80030d8 <move+0x294>)
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	440a      	add	r2, r1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4b67      	ldr	r3, [pc, #412]	; (80030e0 <move+0x29c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	f000 820a 	beq.w	800335e <move+0x51a>
				collect(lcd[curr_col][curr_row - 1], 1); //TODO add prizes
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	4962      	ldr	r1, [pc, #392]	; (80030d8 <move+0x294>)
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	440a      	add	r2, r1
 8002f56:	4413      	add	r3, r2
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fa29 	bl	80023b4 <collect>
				lcd[curr_col][curr_row] = 0;
 8002f62:	4a5d      	ldr	r2, [pc, #372]	; (80030d8 <move+0x294>)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player1.direction;
 8002f72:	4b58      	ldr	r3, [pc, #352]	; (80030d4 <move+0x290>)
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b2d0      	uxtb	r0, r2
 8002f7c:	4956      	ldr	r1, [pc, #344]	; (80030d8 <move+0x294>)
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	0092      	lsls	r2, r2, #2
 8002f82:	440a      	add	r2, r1
 8002f84:	4413      	add	r3, r2
 8002f86:	4602      	mov	r2, r0
 8002f88:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y - 1;
 8002f8a:	4b52      	ldr	r3, [pc, #328]	; (80030d4 <move+0x290>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	4a50      	ldr	r2, [pc, #320]	; (80030d4 <move+0x290>)
 8002f92:	6093      	str	r3, [r2, #8]
}
 8002f94:	e1e3      	b.n	800335e <move+0x51a>
		}else if (dir == 3){
 8002f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d14b      	bne.n	8003034 <move+0x1f0>
			int curr_col = player1.position_x;
 8002f9c:	4b4d      	ldr	r3, [pc, #308]	; (80030d4 <move+0x290>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	623b      	str	r3, [r7, #32]
			int curr_row = player1.position_y;
 8002fa2:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <move+0x290>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	61fb      	str	r3, [r7, #28]
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	2b12      	cmp	r3, #18
 8002fac:	f300 81d7 	bgt.w	800335e <move+0x51a>
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	4a48      	ldr	r2, [pc, #288]	; (80030d8 <move+0x294>)
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	441a      	add	r2, r3
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b46      	ldr	r3, [pc, #280]	; (80030dc <move+0x298>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	f000 81c9 	beq.w	800335e <move+0x51a>
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	4a41      	ldr	r2, [pc, #260]	; (80030d8 <move+0x294>)
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	441a      	add	r2, r3
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	4413      	add	r3, r2
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <move+0x29c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	f000 81bb 	beq.w	800335e <move+0x51a>
				collect(lcd[curr_col + 1][curr_row], 1); //TODO add prizes
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	3301      	adds	r3, #1
 8002fec:	4a3a      	ldr	r2, [pc, #232]	; (80030d8 <move+0x294>)
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	441a      	add	r2, r3
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff f9da 	bl	80023b4 <collect>
				lcd[curr_col][curr_row] = 0;
 8003000:	4a35      	ldr	r2, [pc, #212]	; (80030d8 <move+0x294>)
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	441a      	add	r2, r3
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	4413      	add	r3, r2
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player1.direction;
 8003010:	4b30      	ldr	r3, [pc, #192]	; (80030d4 <move+0x290>)
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	3301      	adds	r3, #1
 8003018:	b2d1      	uxtb	r1, r2
 800301a:	4a2f      	ldr	r2, [pc, #188]	; (80030d8 <move+0x294>)
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	441a      	add	r2, r3
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	460a      	mov	r2, r1
 8003026:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x + 1;
 8003028:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <move+0x290>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	3301      	adds	r3, #1
 800302e:	4a29      	ldr	r2, [pc, #164]	; (80030d4 <move+0x290>)
 8003030:	6053      	str	r3, [r2, #4]
}
 8003032:	e194      	b.n	800335e <move+0x51a>
		}else if (dir == 4){
 8003034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003036:	2b04      	cmp	r3, #4
 8003038:	f040 8191 	bne.w	800335e <move+0x51a>
			int curr_col = player1.position_x;
 800303c:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <move+0x290>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
			int curr_row = player1.position_y;
 8003042:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <move+0x290>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	2b02      	cmp	r3, #2
 800304c:	f300 8187 	bgt.w	800335e <move+0x51a>
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	3301      	adds	r3, #1
 8003054:	4920      	ldr	r1, [pc, #128]	; (80030d8 <move+0x294>)
 8003056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003058:	0092      	lsls	r2, r2, #2
 800305a:	440a      	add	r2, r1
 800305c:	4413      	add	r3, r2
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <move+0x298>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	f000 8179 	beq.w	800335e <move+0x51a>
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	3301      	adds	r3, #1
 8003070:	4919      	ldr	r1, [pc, #100]	; (80030d8 <move+0x294>)
 8003072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003074:	0092      	lsls	r2, r2, #2
 8003076:	440a      	add	r2, r1
 8003078:	4413      	add	r3, r2
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <move+0x29c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	f000 816b 	beq.w	800335e <move+0x51a>
				collect(lcd[curr_col][curr_row + 1], 1); //TODO add prizes
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	3301      	adds	r3, #1
 800308c:	4912      	ldr	r1, [pc, #72]	; (80030d8 <move+0x294>)
 800308e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003090:	0092      	lsls	r2, r2, #2
 8003092:	440a      	add	r2, r1
 8003094:	4413      	add	r3, r2
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2101      	movs	r1, #1
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff f98a 	bl	80023b4 <collect>
				lcd[curr_col][curr_row] = 0;
 80030a0:	4a0d      	ldr	r2, [pc, #52]	; (80030d8 <move+0x294>)
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	441a      	add	r2, r3
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	4413      	add	r3, r2
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player1.direction;
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <move+0x290>)
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	3301      	adds	r3, #1
 80030b8:	b2d0      	uxtb	r0, r2
 80030ba:	4907      	ldr	r1, [pc, #28]	; (80030d8 <move+0x294>)
 80030bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030be:	0092      	lsls	r2, r2, #2
 80030c0:	440a      	add	r2, r1
 80030c2:	4413      	add	r3, r2
 80030c4:	4602      	mov	r2, r0
 80030c6:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y + 1;
 80030c8:	4b02      	ldr	r3, [pc, #8]	; (80030d4 <move+0x290>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	3301      	adds	r3, #1
 80030ce:	4a01      	ldr	r2, [pc, #4]	; (80030d4 <move+0x290>)
 80030d0:	6093      	str	r3, [r2, #8]
}
 80030d2:	e144      	b.n	800335e <move+0x51a>
 80030d4:	20000048 	.word	0x20000048
 80030d8:	20000718 	.word	0x20000718
 80030dc:	200000ac 	.word	0x200000ac
 80030e0:	200000a8 	.word	0x200000a8
	}else if (player == 2){
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	f040 8139 	bne.w	800335e <move+0x51a>
		dir = player2.direction;
 80030ec:	4b9e      	ldr	r3, [pc, #632]	; (8003368 <move+0x524>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 80030f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d14b      	bne.n	8003190 <move+0x34c>
			int curr_col = player2.position_x;
 80030f8:	4b9b      	ldr	r3, [pc, #620]	; (8003368 <move+0x524>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	633b      	str	r3, [r7, #48]	; 0x30
			int curr_row = player2.position_y;
 80030fe:	4b9a      	ldr	r3, [pc, #616]	; (8003368 <move+0x524>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	2b00      	cmp	r3, #0
 8003108:	f340 8129 	ble.w	800335e <move+0x51a>
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	3b01      	subs	r3, #1
 8003110:	4a96      	ldr	r2, [pc, #600]	; (800336c <move+0x528>)
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	441a      	add	r2, r3
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	4413      	add	r3, r2
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	4b94      	ldr	r3, [pc, #592]	; (8003370 <move+0x52c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	f000 811b 	beq.w	800335e <move+0x51a>
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	3b01      	subs	r3, #1
 800312c:	4a8f      	ldr	r2, [pc, #572]	; (800336c <move+0x528>)
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	441a      	add	r2, r3
 8003132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003134:	4413      	add	r3, r2
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	4b8e      	ldr	r3, [pc, #568]	; (8003374 <move+0x530>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	f000 810d 	beq.w	800335e <move+0x51a>
				collect(lcd[curr_col - 1][curr_row], 2); //TODO add prizes
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	3b01      	subs	r3, #1
 8003148:	4a88      	ldr	r2, [pc, #544]	; (800336c <move+0x528>)
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	441a      	add	r2, r3
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	4413      	add	r3, r2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2102      	movs	r1, #2
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f92c 	bl	80023b4 <collect>
				lcd[curr_col][curr_row] = 0;
 800315c:	4a83      	ldr	r2, [pc, #524]	; (800336c <move+0x528>)
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	441a      	add	r2, r3
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	4413      	add	r3, r2
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player2.direction;
 800316c:	4b7e      	ldr	r3, [pc, #504]	; (8003368 <move+0x524>)
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	3b01      	subs	r3, #1
 8003174:	b2d1      	uxtb	r1, r2
 8003176:	4a7d      	ldr	r2, [pc, #500]	; (800336c <move+0x528>)
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	441a      	add	r2, r3
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	4413      	add	r3, r2
 8003180:	460a      	mov	r2, r1
 8003182:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x - 1;
 8003184:	4b78      	ldr	r3, [pc, #480]	; (8003368 <move+0x524>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	3b01      	subs	r3, #1
 800318a:	4a77      	ldr	r2, [pc, #476]	; (8003368 <move+0x524>)
 800318c:	6053      	str	r3, [r2, #4]
}
 800318e:	e0e6      	b.n	800335e <move+0x51a>
		}else if (dir == 2){
 8003190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003192:	2b02      	cmp	r3, #2
 8003194:	d14b      	bne.n	800322e <move+0x3ea>
			int curr_col = player2.position_x;
 8003196:	4b74      	ldr	r3, [pc, #464]	; (8003368 <move+0x524>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	63bb      	str	r3, [r7, #56]	; 0x38
			int curr_row = player2.position_y;
 800319c:	4b72      	ldr	r3, [pc, #456]	; (8003368 <move+0x524>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 80031a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f340 80da 	ble.w	800335e <move+0x51a>
 80031aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ac:	3b01      	subs	r3, #1
 80031ae:	496f      	ldr	r1, [pc, #444]	; (800336c <move+0x528>)
 80031b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b2:	0092      	lsls	r2, r2, #2
 80031b4:	440a      	add	r2, r1
 80031b6:	4413      	add	r3, r2
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b6c      	ldr	r3, [pc, #432]	; (8003370 <move+0x52c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f000 80cc 	beq.w	800335e <move+0x51a>
 80031c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c8:	3b01      	subs	r3, #1
 80031ca:	4968      	ldr	r1, [pc, #416]	; (800336c <move+0x528>)
 80031cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ce:	0092      	lsls	r2, r2, #2
 80031d0:	440a      	add	r2, r1
 80031d2:	4413      	add	r3, r2
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b66      	ldr	r3, [pc, #408]	; (8003374 <move+0x530>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	f000 80be 	beq.w	800335e <move+0x51a>
				collect(lcd[curr_col][curr_row - 1], 2); //TODO add prizes
 80031e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e4:	3b01      	subs	r3, #1
 80031e6:	4961      	ldr	r1, [pc, #388]	; (800336c <move+0x528>)
 80031e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ea:	0092      	lsls	r2, r2, #2
 80031ec:	440a      	add	r2, r1
 80031ee:	4413      	add	r3, r2
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2102      	movs	r1, #2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff f8dd 	bl	80023b4 <collect>
				lcd[curr_col][curr_row] = 0;
 80031fa:	4a5c      	ldr	r2, [pc, #368]	; (800336c <move+0x528>)
 80031fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	441a      	add	r2, r3
 8003202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003204:	4413      	add	r3, r2
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player2.direction;
 800320a:	4b57      	ldr	r3, [pc, #348]	; (8003368 <move+0x524>)
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003210:	3b01      	subs	r3, #1
 8003212:	b2d0      	uxtb	r0, r2
 8003214:	4955      	ldr	r1, [pc, #340]	; (800336c <move+0x528>)
 8003216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003218:	0092      	lsls	r2, r2, #2
 800321a:	440a      	add	r2, r1
 800321c:	4413      	add	r3, r2
 800321e:	4602      	mov	r2, r0
 8003220:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y - 1;
 8003222:	4b51      	ldr	r3, [pc, #324]	; (8003368 <move+0x524>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	3b01      	subs	r3, #1
 8003228:	4a4f      	ldr	r2, [pc, #316]	; (8003368 <move+0x524>)
 800322a:	6093      	str	r3, [r2, #8]
}
 800322c:	e097      	b.n	800335e <move+0x51a>
		}else if (dir == 3){
 800322e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003230:	2b03      	cmp	r3, #3
 8003232:	d149      	bne.n	80032c8 <move+0x484>
			int curr_col = player2.position_x;
 8003234:	4b4c      	ldr	r3, [pc, #304]	; (8003368 <move+0x524>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	643b      	str	r3, [r7, #64]	; 0x40
			int curr_row = player2.position_y;
 800323a:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <move+0x524>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 8003240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003242:	2b12      	cmp	r3, #18
 8003244:	f300 808b 	bgt.w	800335e <move+0x51a>
 8003248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324a:	3301      	adds	r3, #1
 800324c:	4a47      	ldr	r2, [pc, #284]	; (800336c <move+0x528>)
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	441a      	add	r2, r3
 8003252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003254:	4413      	add	r3, r2
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	4b45      	ldr	r3, [pc, #276]	; (8003370 <move+0x52c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d07d      	beq.n	800335e <move+0x51a>
 8003262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003264:	3301      	adds	r3, #1
 8003266:	4a41      	ldr	r2, [pc, #260]	; (800336c <move+0x528>)
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	441a      	add	r2, r3
 800326c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326e:	4413      	add	r3, r2
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <move+0x530>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d070      	beq.n	800335e <move+0x51a>
				collect(lcd[curr_col + 1][curr_row], 2); //TODO add prizes
 800327c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327e:	3301      	adds	r3, #1
 8003280:	4a3a      	ldr	r2, [pc, #232]	; (800336c <move+0x528>)
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	441a      	add	r2, r3
 8003286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003288:	4413      	add	r3, r2
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2102      	movs	r1, #2
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f890 	bl	80023b4 <collect>
				lcd[curr_col][curr_row] = 0;
 8003294:	4a35      	ldr	r2, [pc, #212]	; (800336c <move+0x528>)
 8003296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	441a      	add	r2, r3
 800329c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329e:	4413      	add	r3, r2
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player2.direction;
 80032a4:	4b30      	ldr	r3, [pc, #192]	; (8003368 <move+0x524>)
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032aa:	3301      	adds	r3, #1
 80032ac:	b2d1      	uxtb	r1, r2
 80032ae:	4a2f      	ldr	r2, [pc, #188]	; (800336c <move+0x528>)
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	441a      	add	r2, r3
 80032b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b6:	4413      	add	r3, r2
 80032b8:	460a      	mov	r2, r1
 80032ba:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x + 1;
 80032bc:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <move+0x524>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	3301      	adds	r3, #1
 80032c2:	4a29      	ldr	r2, [pc, #164]	; (8003368 <move+0x524>)
 80032c4:	6053      	str	r3, [r2, #4]
}
 80032c6:	e04a      	b.n	800335e <move+0x51a>
		}else if (dir == 4){
 80032c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d147      	bne.n	800335e <move+0x51a>
			int curr_col = player2.position_x;
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <move+0x524>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	64bb      	str	r3, [r7, #72]	; 0x48
			int curr_row = player2.position_y;
 80032d4:	4b24      	ldr	r3, [pc, #144]	; (8003368 <move+0x524>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 80032da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032dc:	2b02      	cmp	r3, #2
 80032de:	dc3e      	bgt.n	800335e <move+0x51a>
 80032e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e2:	3301      	adds	r3, #1
 80032e4:	4921      	ldr	r1, [pc, #132]	; (800336c <move+0x528>)
 80032e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e8:	0092      	lsls	r2, r2, #2
 80032ea:	440a      	add	r2, r1
 80032ec:	4413      	add	r3, r2
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	4b1f      	ldr	r3, [pc, #124]	; (8003370 <move+0x52c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d031      	beq.n	800335e <move+0x51a>
 80032fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032fc:	3301      	adds	r3, #1
 80032fe:	491b      	ldr	r1, [pc, #108]	; (800336c <move+0x528>)
 8003300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003302:	0092      	lsls	r2, r2, #2
 8003304:	440a      	add	r2, r1
 8003306:	4413      	add	r3, r2
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <move+0x530>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d024      	beq.n	800335e <move+0x51a>
				collect(lcd[curr_col][curr_row + 1], 2); //TODO add prizes
 8003314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003316:	3301      	adds	r3, #1
 8003318:	4914      	ldr	r1, [pc, #80]	; (800336c <move+0x528>)
 800331a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800331c:	0092      	lsls	r2, r2, #2
 800331e:	440a      	add	r2, r1
 8003320:	4413      	add	r3, r2
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2102      	movs	r1, #2
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff f844 	bl	80023b4 <collect>
				lcd[curr_col][curr_row] = 0;
 800332c:	4a0f      	ldr	r2, [pc, #60]	; (800336c <move+0x528>)
 800332e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	441a      	add	r2, r3
 8003334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003336:	4413      	add	r3, r2
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player2.direction;
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <move+0x524>)
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003342:	3301      	adds	r3, #1
 8003344:	b2d0      	uxtb	r0, r2
 8003346:	4909      	ldr	r1, [pc, #36]	; (800336c <move+0x528>)
 8003348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800334a:	0092      	lsls	r2, r2, #2
 800334c:	440a      	add	r2, r1
 800334e:	4413      	add	r3, r2
 8003350:	4602      	mov	r2, r0
 8003352:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y + 1;
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <move+0x524>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	3301      	adds	r3, #1
 800335a:	4a03      	ldr	r2, [pc, #12]	; (8003368 <move+0x524>)
 800335c:	6093      	str	r3, [r2, #8]
}
 800335e:	bf00      	nop
 8003360:	3750      	adds	r7, #80	; 0x50
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000068 	.word	0x20000068
 800336c:	20000718 	.word	0x20000718
 8003370:	200000ac 	.word	0x200000ac
 8003374:	200000a8 	.word	0x200000a8

08003378 <uart_rx_enable_it>:
char character;
char input[50];
int  index_arr = 0;
extern UART_HandleTypeDef huart1;

void uart_rx_enable_it(void) {
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &character, 1);
 800337c:	2201      	movs	r2, #1
 800337e:	4903      	ldr	r1, [pc, #12]	; (800338c <uart_rx_enable_it+0x14>)
 8003380:	4803      	ldr	r0, [pc, #12]	; (8003390 <uart_rx_enable_it+0x18>)
 8003382:	f004 fd23 	bl	8007dcc <HAL_UART_Receive_IT>
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000834 	.word	0x20000834
 8003390:	20000378 	.word	0x20000378

08003394 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003394:	b580      	push	{r7, lr}
 8003396:	b09c      	sub	sp, #112	; 0x70
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	char data[100];

    if (huart->Instance == USART1){
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a13      	ldr	r2, [pc, #76]	; (80033f0 <HAL_UART_RxCpltCallback+0x5c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d11f      	bne.n	80033e6 <HAL_UART_RxCpltCallback+0x52>
    	if(character != 10){
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HAL_UART_RxCpltCallback+0x60>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b0a      	cmp	r3, #10
 80033ac:	d009      	beq.n	80033c2 <HAL_UART_RxCpltCallback+0x2e>
    		input[index_arr++] = character;
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_UART_RxCpltCallback+0x64>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	4910      	ldr	r1, [pc, #64]	; (80033f8 <HAL_UART_RxCpltCallback+0x64>)
 80033b6:	600a      	str	r2, [r1, #0]
 80033b8:	4a0e      	ldr	r2, [pc, #56]	; (80033f4 <HAL_UART_RxCpltCallback+0x60>)
 80033ba:	7811      	ldrb	r1, [r2, #0]
 80033bc:	4a0f      	ldr	r2, [pc, #60]	; (80033fc <HAL_UART_RxCpltCallback+0x68>)
 80033be:	54d1      	strb	r1, [r2, r3]
 80033c0:	e00f      	b.n	80033e2 <HAL_UART_RxCpltCallback+0x4e>
    	}else{
			input[index_arr++] = '\0';
 80033c2:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <HAL_UART_RxCpltCallback+0x64>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	490b      	ldr	r1, [pc, #44]	; (80033f8 <HAL_UART_RxCpltCallback+0x64>)
 80033ca:	600a      	str	r2, [r1, #0]
 80033cc:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <HAL_UART_RxCpltCallback+0x68>)
 80033ce:	2100      	movs	r1, #0
 80033d0:	54d1      	strb	r1, [r2, r3]
			index_arr = 0;
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_UART_RxCpltCallback+0x64>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
			int value;
			HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 80033d8:	2200      	movs	r2, #0
 80033da:	4909      	ldr	r1, [pc, #36]	; (8003400 <HAL_UART_RxCpltCallback+0x6c>)
 80033dc:	4809      	ldr	r0, [pc, #36]	; (8003404 <HAL_UART_RxCpltCallback+0x70>)
 80033de:	f003 f800 	bl	80063e2 <HAL_RTC_GetTime>
//			sprintf(timeStr, "%02d:%02d:%02d", mytime.Hours, mytime.Minutes, mytime.Seconds);
		}
		uart_rx_enable_it();
 80033e2:	f7ff ffc9 	bl	8003378 <uart_rx_enable_it>
    }
}
 80033e6:	bf00      	nop
 80033e8:	3770      	adds	r7, #112	; 0x70
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40013800 	.word	0x40013800
 80033f4:	20000834 	.word	0x20000834
 80033f8:	2000086c 	.word	0x2000086c
 80033fc:	20000838 	.word	0x20000838
 8003400:	20000700 	.word	0x20000700
 8003404:	20000210 	.word	0x20000210

08003408 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340e:	4b0f      	ldr	r3, [pc, #60]	; (800344c <HAL_MspInit+0x44>)
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	4a0e      	ldr	r2, [pc, #56]	; (800344c <HAL_MspInit+0x44>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6193      	str	r3, [r2, #24]
 800341a:	4b0c      	ldr	r3, [pc, #48]	; (800344c <HAL_MspInit+0x44>)
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_MspInit+0x44>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4a08      	ldr	r2, [pc, #32]	; (800344c <HAL_MspInit+0x44>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003430:	61d3      	str	r3, [r2, #28]
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_MspInit+0x44>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800343e:	2007      	movs	r0, #7
 8003440:	f000 fe02 	bl	8004048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40021000 	.word	0x40021000

08003450 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_I2C_MspInit+0x7c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d127      	bne.n	80034c2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_I2C_MspInit+0x80>)
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <HAL_I2C_MspInit+0x80>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800347c:	6153      	str	r3, [r2, #20]
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_I2C_MspInit+0x80>)
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800348a:	23c0      	movs	r3, #192	; 0xc0
 800348c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800348e:	2312      	movs	r3, #18
 8003490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003492:	2301      	movs	r3, #1
 8003494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003496:	2303      	movs	r3, #3
 8003498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800349a:	2304      	movs	r3, #4
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800349e:	f107 0314 	add.w	r3, r7, #20
 80034a2:	4619      	mov	r1, r3
 80034a4:	480b      	ldr	r0, [pc, #44]	; (80034d4 <HAL_I2C_MspInit+0x84>)
 80034a6:	f000 fe87 	bl	80041b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_I2C_MspInit+0x80>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <HAL_I2C_MspInit+0x80>)
 80034b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034b4:	61d3      	str	r3, [r2, #28]
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_I2C_MspInit+0x80>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034c2:	bf00      	nop
 80034c4:	3728      	adds	r7, #40	; 0x28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40005400 	.word	0x40005400
 80034d0:	40021000 	.word	0x40021000
 80034d4:	48000400 	.word	0x48000400

080034d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a0d      	ldr	r2, [pc, #52]	; (800351c <HAL_RTC_MspInit+0x44>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d111      	bne.n	800350e <HAL_RTC_MspInit+0x36>
 80034ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ee:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034f8:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_RTC_MspInit+0x48>)
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	461a      	mov	r2, r3
 800350a:	2301      	movs	r3, #1
 800350c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40002800 	.word	0x40002800
 8003520:	10908100 	.word	0x10908100

08003524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	; 0x28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	60da      	str	r2, [r3, #12]
 800353a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a17      	ldr	r2, [pc, #92]	; (80035a0 <HAL_SPI_MspInit+0x7c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d128      	bne.n	8003598 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003546:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <HAL_SPI_MspInit+0x80>)
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	4a16      	ldr	r2, [pc, #88]	; (80035a4 <HAL_SPI_MspInit+0x80>)
 800354c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003550:	6193      	str	r3, [r2, #24]
 8003552:	4b14      	ldr	r3, [pc, #80]	; (80035a4 <HAL_SPI_MspInit+0x80>)
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_SPI_MspInit+0x80>)
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <HAL_SPI_MspInit+0x80>)
 8003564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003568:	6153      	str	r3, [r2, #20]
 800356a:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <HAL_SPI_MspInit+0x80>)
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8003576:	23e0      	movs	r3, #224	; 0xe0
 8003578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357a:	2302      	movs	r3, #2
 800357c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003582:	2303      	movs	r3, #3
 8003584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003586:	2305      	movs	r3, #5
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358a:	f107 0314 	add.w	r3, r7, #20
 800358e:	4619      	mov	r1, r3
 8003590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003594:	f000 fe10 	bl	80041b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003598:	bf00      	nop
 800359a:	3728      	adds	r7, #40	; 0x28
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40013000 	.word	0x40013000
 80035a4:	40021000 	.word	0x40021000

080035a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b8:	d114      	bne.n	80035e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035ba:	4b22      	ldr	r3, [pc, #136]	; (8003644 <HAL_TIM_Base_MspInit+0x9c>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4a21      	ldr	r2, [pc, #132]	; (8003644 <HAL_TIM_Base_MspInit+0x9c>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	61d3      	str	r3, [r2, #28]
 80035c6:	4b1f      	ldr	r3, [pc, #124]	; (8003644 <HAL_TIM_Base_MspInit+0x9c>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 80035d2:	2202      	movs	r2, #2
 80035d4:	2100      	movs	r1, #0
 80035d6:	201c      	movs	r0, #28
 80035d8:	f000 fd41 	bl	800405e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035dc:	201c      	movs	r0, #28
 80035de:	f000 fd5a 	bl	8004096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035e2:	e02a      	b.n	800363a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a17      	ldr	r2, [pc, #92]	; (8003648 <HAL_TIM_Base_MspInit+0xa0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10c      	bne.n	8003608 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <HAL_TIM_Base_MspInit+0x9c>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	4a14      	ldr	r2, [pc, #80]	; (8003644 <HAL_TIM_Base_MspInit+0x9c>)
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	61d3      	str	r3, [r2, #28]
 80035fa:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_TIM_Base_MspInit+0x9c>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	693b      	ldr	r3, [r7, #16]
}
 8003606:	e018      	b.n	800363a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0f      	ldr	r2, [pc, #60]	; (800364c <HAL_TIM_Base_MspInit+0xa4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d113      	bne.n	800363a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003612:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <HAL_TIM_Base_MspInit+0x9c>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	4a0b      	ldr	r2, [pc, #44]	; (8003644 <HAL_TIM_Base_MspInit+0x9c>)
 8003618:	f043 0304 	orr.w	r3, r3, #4
 800361c:	61d3      	str	r3, [r2, #28]
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_TIM_Base_MspInit+0x9c>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 4);
 800362a:	2204      	movs	r2, #4
 800362c:	2100      	movs	r1, #0
 800362e:	201e      	movs	r0, #30
 8003630:	f000 fd15 	bl	800405e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003634:	201e      	movs	r0, #30
 8003636:	f000 fd2e 	bl	8004096 <HAL_NVIC_EnableIRQ>
}
 800363a:	bf00      	nop
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800

08003650 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003658:	f107 030c 	add.w	r3, r7, #12
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a11      	ldr	r2, [pc, #68]	; (80036b4 <HAL_TIM_MspPostInit+0x64>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d11b      	bne.n	80036aa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003672:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <HAL_TIM_MspPostInit+0x68>)
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4a10      	ldr	r2, [pc, #64]	; (80036b8 <HAL_TIM_MspPostInit+0x68>)
 8003678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800367c:	6153      	str	r3, [r2, #20]
 800367e:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <HAL_TIM_MspPostInit+0x68>)
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE2     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800368a:	2304      	movs	r3, #4
 800368c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800369a:	2302      	movs	r3, #2
 800369c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800369e:	f107 030c 	add.w	r3, r7, #12
 80036a2:	4619      	mov	r1, r3
 80036a4:	4805      	ldr	r0, [pc, #20]	; (80036bc <HAL_TIM_MspPostInit+0x6c>)
 80036a6:	f000 fd87 	bl	80041b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036aa:	bf00      	nop
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40021000 	.word	0x40021000
 80036bc:	48001000 	.word	0x48001000

080036c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <HAL_UART_MspInit+0xc8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d14d      	bne.n	800377e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036e2:	4b2a      	ldr	r3, [pc, #168]	; (800378c <HAL_UART_MspInit+0xcc>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	4a29      	ldr	r2, [pc, #164]	; (800378c <HAL_UART_MspInit+0xcc>)
 80036e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ec:	6193      	str	r3, [r2, #24]
 80036ee:	4b27      	ldr	r3, [pc, #156]	; (800378c <HAL_UART_MspInit+0xcc>)
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <HAL_UART_MspInit+0xcc>)
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	4a23      	ldr	r2, [pc, #140]	; (800378c <HAL_UART_MspInit+0xcc>)
 8003700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003704:	6153      	str	r3, [r2, #20]
 8003706:	4b21      	ldr	r3, [pc, #132]	; (800378c <HAL_UART_MspInit+0xcc>)
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003712:	4b1e      	ldr	r3, [pc, #120]	; (800378c <HAL_UART_MspInit+0xcc>)
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	4a1d      	ldr	r2, [pc, #116]	; (800378c <HAL_UART_MspInit+0xcc>)
 8003718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371c:	6153      	str	r3, [r2, #20]
 800371e:	4b1b      	ldr	r3, [pc, #108]	; (800378c <HAL_UART_MspInit+0xcc>)
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC5     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800372a:	2320      	movs	r3, #32
 800372c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003736:	2303      	movs	r3, #3
 8003738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800373a:	2307      	movs	r3, #7
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800373e:	f107 0314 	add.w	r3, r7, #20
 8003742:	4619      	mov	r1, r3
 8003744:	4812      	ldr	r0, [pc, #72]	; (8003790 <HAL_UART_MspInit+0xd0>)
 8003746:	f000 fd37 	bl	80041b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800374a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800374e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003750:	2302      	movs	r3, #2
 8003752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003758:	2303      	movs	r3, #3
 800375a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800375c:	2307      	movs	r3, #7
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	4619      	mov	r1, r3
 8003766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800376a:	f000 fd25 	bl	80041b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800376e:	2200      	movs	r2, #0
 8003770:	2100      	movs	r1, #0
 8003772:	2025      	movs	r0, #37	; 0x25
 8003774:	f000 fc73 	bl	800405e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003778:	2025      	movs	r0, #37	; 0x25
 800377a:	f000 fc8c 	bl	8004096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800377e:	bf00      	nop
 8003780:	3728      	adds	r7, #40	; 0x28
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40013800 	.word	0x40013800
 800378c:	40021000 	.word	0x40021000
 8003790:	48000800 	.word	0x48000800

08003794 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	60da      	str	r2, [r3, #12]
 80037aa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a18      	ldr	r2, [pc, #96]	; (8003814 <HAL_PCD_MspInit+0x80>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d129      	bne.n	800380a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b6:	4b18      	ldr	r3, [pc, #96]	; (8003818 <HAL_PCD_MspInit+0x84>)
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	4a17      	ldr	r2, [pc, #92]	; (8003818 <HAL_PCD_MspInit+0x84>)
 80037bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c0:	6153      	str	r3, [r2, #20]
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <HAL_PCD_MspInit+0x84>)
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80037ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80037d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d4:	2302      	movs	r3, #2
 80037d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037dc:	2303      	movs	r3, #3
 80037de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80037e0:	230e      	movs	r3, #14
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	4619      	mov	r1, r3
 80037ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037ee:	f000 fce3 	bl	80041b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80037f2:	4b09      	ldr	r3, [pc, #36]	; (8003818 <HAL_PCD_MspInit+0x84>)
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	4a08      	ldr	r2, [pc, #32]	; (8003818 <HAL_PCD_MspInit+0x84>)
 80037f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037fc:	61d3      	str	r3, [r2, #28]
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_PCD_MspInit+0x84>)
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800380a:	bf00      	nop
 800380c:	3728      	adds	r7, #40	; 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40005c00 	.word	0x40005c00
 8003818:	40021000 	.word	0x40021000

0800381c <PWM_Start>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start()
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <PWM_Start+0x18>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <PWM_Start+0x1c>)
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f003 f996 	bl	8006b5c <HAL_TIM_PWM_Start>
}
 8003830:	bf00      	nop
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000104 	.word	0x20000104
 8003838:	20000878 	.word	0x20000878

0800383c <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	460a      	mov	r2, r1
 8003846:	80fb      	strh	r3, [r7, #6]
 8003848:	4613      	mov	r3, r2
 800384a:	80bb      	strh	r3, [r7, #4]
    if (pwm_freq == 0 || pwm_freq > 20000)
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <PWM_Change_Tone+0x20>
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003858:	4293      	cmp	r3, r2
 800385a:	d937      	bls.n	80038cc <PWM_Change_Tone+0x90>
    {
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 800385c:	4b52      	ldr	r3, [pc, #328]	; (80039a8 <PWM_Change_Tone+0x16c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d105      	bne.n	8003870 <PWM_Change_Tone+0x34>
 8003864:	4b51      	ldr	r3, [pc, #324]	; (80039ac <PWM_Change_Tone+0x170>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2200      	movs	r2, #0
 800386c:	635a      	str	r2, [r3, #52]	; 0x34
 800386e:	e097      	b.n	80039a0 <PWM_Change_Tone+0x164>
 8003870:	4b4d      	ldr	r3, [pc, #308]	; (80039a8 <PWM_Change_Tone+0x16c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b04      	cmp	r3, #4
 8003876:	d105      	bne.n	8003884 <PWM_Change_Tone+0x48>
 8003878:	4b4c      	ldr	r3, [pc, #304]	; (80039ac <PWM_Change_Tone+0x170>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	2300      	movs	r3, #0
 8003880:	6393      	str	r3, [r2, #56]	; 0x38
 8003882:	e08d      	b.n	80039a0 <PWM_Change_Tone+0x164>
 8003884:	4b48      	ldr	r3, [pc, #288]	; (80039a8 <PWM_Change_Tone+0x16c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d105      	bne.n	8003898 <PWM_Change_Tone+0x5c>
 800388c:	4b47      	ldr	r3, [pc, #284]	; (80039ac <PWM_Change_Tone+0x170>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	2300      	movs	r3, #0
 8003894:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003896:	e083      	b.n	80039a0 <PWM_Change_Tone+0x164>
 8003898:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <PWM_Change_Tone+0x16c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b0c      	cmp	r3, #12
 800389e:	d105      	bne.n	80038ac <PWM_Change_Tone+0x70>
 80038a0:	4b42      	ldr	r3, [pc, #264]	; (80039ac <PWM_Change_Tone+0x170>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	2300      	movs	r3, #0
 80038a8:	6413      	str	r3, [r2, #64]	; 0x40
 80038aa:	e079      	b.n	80039a0 <PWM_Change_Tone+0x164>
 80038ac:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <PWM_Change_Tone+0x16c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d105      	bne.n	80038c0 <PWM_Change_Tone+0x84>
 80038b4:	4b3d      	ldr	r3, [pc, #244]	; (80039ac <PWM_Change_Tone+0x170>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	2300      	movs	r3, #0
 80038bc:	6593      	str	r3, [r2, #88]	; 0x58
 80038be:	e06f      	b.n	80039a0 <PWM_Change_Tone+0x164>
 80038c0:	4b3a      	ldr	r3, [pc, #232]	; (80039ac <PWM_Change_Tone+0x170>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	2300      	movs	r3, #0
 80038c8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80038ca:	e069      	b.n	80039a0 <PWM_Change_Tone+0x164>
    }
    else
    {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 80038cc:	f002 fa02 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 80038d0:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038da:	4a35      	ldr	r2, [pc, #212]	; (80039b0 <PWM_Change_Tone+0x174>)
 80038dc:	fba2 2303 	umull	r2, r3, r2, r3
 80038e0:	0b9b      	lsrs	r3, r3, #14
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 80038e8:	8b7b      	ldrh	r3, [r7, #26]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f0:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 80038fc:	88bb      	ldrh	r3, [r7, #4]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	fb02 f303 	mul.w	r3, r2, r3
 8003904:	4a2b      	ldr	r2, [pc, #172]	; (80039b4 <PWM_Change_Tone+0x178>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	09db      	lsrs	r3, r3, #7
 800390c:	60fb      	str	r3, [r7, #12]

        pwm_timer->Instance->PSC = prescaler - 1;
 800390e:	8b7b      	ldrh	r3, [r7, #26]
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	4b26      	ldr	r3, [pc, #152]	; (80039ac <PWM_Change_Tone+0x170>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timer->Instance->ARR = period_cycles - 1;
 800391a:	4b24      	ldr	r3, [pc, #144]	; (80039ac <PWM_Change_Tone+0x170>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	3a01      	subs	r2, #1
 8003924:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timer->Instance->EGR = TIM_EGR_UG;
 8003926:	4b21      	ldr	r3, [pc, #132]	; (80039ac <PWM_Change_Tone+0x170>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2201      	movs	r2, #1
 800392e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003930:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <PWM_Change_Tone+0x16c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <PWM_Change_Tone+0x108>
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <PWM_Change_Tone+0x170>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8003942:	e02d      	b.n	80039a0 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003944:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <PWM_Change_Tone+0x16c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b04      	cmp	r3, #4
 800394a:	d105      	bne.n	8003958 <PWM_Change_Tone+0x11c>
 800394c:	4b17      	ldr	r3, [pc, #92]	; (80039ac <PWM_Change_Tone+0x170>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003956:	e023      	b.n	80039a0 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003958:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <PWM_Change_Tone+0x16c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d105      	bne.n	800396c <PWM_Change_Tone+0x130>
 8003960:	4b12      	ldr	r3, [pc, #72]	; (80039ac <PWM_Change_Tone+0x170>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800396a:	e019      	b.n	80039a0 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <PWM_Change_Tone+0x16c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	d105      	bne.n	8003980 <PWM_Change_Tone+0x144>
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <PWM_Change_Tone+0x170>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800397e:	e00f      	b.n	80039a0 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <PWM_Change_Tone+0x16c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b10      	cmp	r3, #16
 8003986:	d105      	bne.n	8003994 <PWM_Change_Tone+0x158>
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <PWM_Change_Tone+0x170>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003992:	e005      	b.n	80039a0 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <PWM_Change_Tone+0x170>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800399e:	e7ff      	b.n	80039a0 <PWM_Change_Tone+0x164>
 80039a0:	bf00      	nop
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000878 	.word	0x20000878
 80039ac:	20000104 	.word	0x20000104
 80039b0:	45e7b273 	.word	0x45e7b273
 80039b4:	10624dd3 	.word	0x10624dd3

080039b8 <Change_Melody>:
//void Change_Melody(const Tone *melody, uint16_t tone_count)

void Change_Melody(const Tone *melody, uint16_t tone_count)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]

    melody_ptr = melody;
 80039c4:	4a07      	ldr	r2, [pc, #28]	; (80039e4 <Change_Melody+0x2c>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6013      	str	r3, [r2, #0]
    melody_tone_count = tone_count;
 80039ca:	4a07      	ldr	r2, [pc, #28]	; (80039e8 <Change_Melody+0x30>)
 80039cc:	887b      	ldrh	r3, [r7, #2]
 80039ce:	8013      	strh	r3, [r2, #0]
    current_tone_number = 0;
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <Change_Melody+0x34>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	801a      	strh	r2, [r3, #0]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	2000087c 	.word	0x2000087c
 80039e8:	20000880 	.word	0x20000880
 80039ec:	20000882 	.word	0x20000882

080039f0 <Update_Melody>:
extern pageflag;


void Update_Melody()
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
    if ((HAL_GetTick() > current_tone_end) && (current_tone_number < melody_tone_count) && pageflag == 0)
 80039f6:	f000 fa27 	bl	8003e48 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <Update_Melody+0x8c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d936      	bls.n	8003a72 <Update_Melody+0x82>
 8003a04:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <Update_Melody+0x90>)
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	; (8003a84 <Update_Melody+0x94>)
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d22e      	bcs.n	8003a72 <Update_Melody+0x82>
 8003a14:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <Update_Melody+0x98>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d12a      	bne.n	8003a72 <Update_Melody+0x82>
    {
        const Tone active_tone = *(melody_ptr + current_tone_number);
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <Update_Melody+0x9c>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b17      	ldr	r3, [pc, #92]	; (8003a80 <Update_Melody+0x90>)
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	1d3b      	adds	r3, r7, #4
 8003a2c:	6810      	ldr	r0, [r2, #0]
 8003a2e:	6018      	str	r0, [r3, #0]
        PWM_Change_Tone(active_tone.frequency, volume);
 8003a30:	88bb      	ldrh	r3, [r7, #4]
 8003a32:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <Update_Melody+0xa0>)
 8003a34:	8812      	ldrh	r2, [r2, #0]
 8003a36:	b292      	uxth	r2, r2
 8003a38:	4611      	mov	r1, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff fefe 	bl	800383c <PWM_Change_Tone>
        current_tone_end = HAL_GetTick() + active_tone.duration;
 8003a40:	f000 fa02 	bl	8003e48 <HAL_GetTick>
 8003a44:	4603      	mov	r3, r0
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	4413      	add	r3, r2
 8003a4a:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <Update_Melody+0x8c>)
 8003a4c:	6013      	str	r3, [r2, #0]
        current_tone_number++;
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <Update_Melody+0x90>)
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3301      	adds	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <Update_Melody+0x90>)
 8003a5a:	801a      	strh	r2, [r3, #0]
        if(current_tone_number == melody_tone_count){
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <Update_Melody+0x90>)
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <Update_Melody+0x94>)
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d102      	bne.n	8003a72 <Update_Melody+0x82>
        	current_tone_number = 0;
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <Update_Melody+0x90>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000884 	.word	0x20000884
 8003a80:	20000882 	.word	0x20000882
 8003a84:	20000880 	.word	0x20000880
 8003a88:	200006ec 	.word	0x200006ec
 8003a8c:	2000087c 	.word	0x2000087c
 8003a90:	20000108 	.word	0x20000108

08003a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a98:	e7fe      	b.n	8003a98 <NMI_Handler+0x4>

08003a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a9e:	e7fe      	b.n	8003a9e <HardFault_Handler+0x4>

08003aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003aa4:	e7fe      	b.n	8003aa4 <MemManage_Handler+0x4>

08003aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aaa:	e7fe      	b.n	8003aaa <BusFault_Handler+0x4>

08003aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ab0:	e7fe      	b.n	8003ab0 <UsageFault_Handler+0x4>

08003ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ae0:	f000 f99e 	bl	8003e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
 Update_Melody();
 8003ae4:	f7ff ff84 	bl	80039f0 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003ae8:	bf00      	nop
 8003aea:	bd80      	pop	{r7, pc}

08003aec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003af0:	2001      	movs	r0, #1
 8003af2:	f000 fd25 	bl	8004540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if (HAL_GetTick() > last_button_press + 200)
 8003af6:	f000 f9a7 	bl	8003e48 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <EXTI0_IRQHandler+0x34>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	33c8      	adds	r3, #200	; 0xc8
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d909      	bls.n	8003b1a <EXTI0_IRQHandler+0x2e>
  {
      last_button_press = HAL_GetTick();
 8003b06:	f000 f99f 	bl	8003e48 <HAL_GetTick>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <EXTI0_IRQHandler+0x34>)
 8003b0e:	6013      	str	r3, [r2, #0]

      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8003b10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b14:	4803      	ldr	r0, [pc, #12]	; (8003b24 <EXTI0_IRQHandler+0x38>)
 8003b16:	f000 fcf9 	bl	800450c <HAL_GPIO_TogglePin>
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000888 	.word	0x20000888
 8003b24:	48001000 	.word	0x48001000

08003b28 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003b2c:	2002      	movs	r0, #2
 8003b2e:	f000 fd07 	bl	8004540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003b3a:	2004      	movs	r0, #4
 8003b3c:	f000 fd00 	bl	8004540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8003b40:	bf00      	nop
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003b48:	2008      	movs	r0, #8
 8003b4a:	f000 fcf9 	bl	8004540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b58:	4802      	ldr	r0, [pc, #8]	; (8003b64 <TIM2_IRQHandler+0x10>)
 8003b5a:	f003 f8ff 	bl	8006d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000294 	.word	0x20000294

08003b68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b6c:	4802      	ldr	r0, [pc, #8]	; (8003b78 <TIM4_IRQHandler+0x10>)
 8003b6e:	f003 f8f5 	bl	8006d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	2000032c 	.word	0x2000032c

08003b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b80:	4802      	ldr	r0, [pc, #8]	; (8003b8c <USART1_IRQHandler+0x10>)
 8003b82:	f004 f967 	bl	8007e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000378 	.word	0x20000378

08003b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return 1;
 8003b94:	2301      	movs	r3, #1
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <_kill>:

int _kill(int pid, int sig)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003baa:	f005 fb25 	bl	80091f8 <__errno>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2216      	movs	r2, #22
 8003bb2:	601a      	str	r2, [r3, #0]
  return -1;
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <_exit>:

void _exit (int status)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff ffe7 	bl	8003ba0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bd2:	e7fe      	b.n	8003bd2 <_exit+0x12>

08003bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	e00a      	b.n	8003bfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003be6:	f3af 8000 	nop.w
 8003bea:	4601      	mov	r1, r0
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	60ba      	str	r2, [r7, #8]
 8003bf2:	b2ca      	uxtb	r2, r1
 8003bf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	dbf0      	blt.n	8003be6 <_read+0x12>
  }

  return len;
 8003c04:	687b      	ldr	r3, [r7, #4]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b086      	sub	sp, #24
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	e009      	b.n	8003c34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	60ba      	str	r2, [r7, #8]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	3301      	adds	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	dbf1      	blt.n	8003c20 <_write+0x12>
  }
  return len;
 8003c3c:	687b      	ldr	r3, [r7, #4]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <_close>:

int _close(int file)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c6e:	605a      	str	r2, [r3, #4]
  return 0;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <_isatty>:

int _isatty(int file)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c86:	2301      	movs	r3, #1
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cb8:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <_sbrk+0x5c>)
 8003cba:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <_sbrk+0x60>)
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cc4:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <_sbrk+0x64>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d102      	bne.n	8003cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ccc:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <_sbrk+0x64>)
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <_sbrk+0x68>)
 8003cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cd2:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <_sbrk+0x64>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d207      	bcs.n	8003cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ce0:	f005 fa8a 	bl	80091f8 <__errno>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	220c      	movs	r2, #12
 8003ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	e009      	b.n	8003d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <_sbrk+0x64>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <_sbrk+0x64>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	4a05      	ldr	r2, [pc, #20]	; (8003d14 <_sbrk+0x64>)
 8003d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d02:	68fb      	ldr	r3, [r7, #12]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	2000a000 	.word	0x2000a000
 8003d10:	00000400 	.word	0x00000400
 8003d14:	2000088c 	.word	0x2000088c
 8003d18:	200008a8 	.word	0x200008a8

08003d1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <SystemInit+0x20>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	4a05      	ldr	r2, [pc, #20]	; (8003d3c <SystemInit+0x20>)
 8003d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	e000ed00 	.word	0xe000ed00

08003d40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
    ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d78 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d44:	f7ff ffea 	bl	8003d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d48:	480c      	ldr	r0, [pc, #48]	; (8003d7c <LoopForever+0x6>)
  ldr r1, =_edata
 8003d4a:	490d      	ldr	r1, [pc, #52]	; (8003d80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d4c:	4a0d      	ldr	r2, [pc, #52]	; (8003d84 <LoopForever+0xe>)
  movs r3, #0
 8003d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d50:	e002      	b.n	8003d58 <LoopCopyDataInit>

08003d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d56:	3304      	adds	r3, #4

08003d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d5c:	d3f9      	bcc.n	8003d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d60:	4c0a      	ldr	r4, [pc, #40]	; (8003d8c <LoopForever+0x16>)
  movs r3, #0
 8003d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d64:	e001      	b.n	8003d6a <LoopFillZerobss>

08003d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d68:	3204      	adds	r2, #4

08003d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d6c:	d3fb      	bcc.n	8003d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d6e:	f005 fa49 	bl	8009204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d72:	f7fc fe61 	bl	8000a38 <main>

08003d76 <LoopForever>:

LoopForever:
    b LoopForever
 8003d76:	e7fe      	b.n	8003d76 <LoopForever>
    ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003d78:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d80:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8003d84:	0800a9e4 	.word	0x0800a9e4
  ldr r2, =_sbss
 8003d88:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8003d8c:	200008a4 	.word	0x200008a4

08003d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d90:	e7fe      	b.n	8003d90 <ADC1_2_IRQHandler>
	...

08003d94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d98:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <HAL_Init+0x28>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <HAL_Init+0x28>)
 8003d9e:	f043 0310 	orr.w	r3, r3, #16
 8003da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003da4:	2003      	movs	r0, #3
 8003da6:	f000 f94f 	bl	8004048 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003daa:	2000      	movs	r0, #0
 8003dac:	f000 f808 	bl	8003dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003db0:	f7ff fb2a 	bl	8003408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40022000 	.word	0x40022000

08003dc0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_InitTick+0x54>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_InitTick+0x58>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f967 	bl	80040b2 <HAL_SYSTICK_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e00e      	b.n	8003e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b0f      	cmp	r3, #15
 8003df2:	d80a      	bhi.n	8003e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003df4:	2200      	movs	r2, #0
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfc:	f000 f92f 	bl	800405e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e00:	4a06      	ldr	r2, [pc, #24]	; (8003e1c <HAL_InitTick+0x5c>)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e000      	b.n	8003e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	2000010c 	.word	0x2000010c
 8003e18:	20000114 	.word	0x20000114
 8003e1c:	20000110 	.word	0x20000110

08003e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e24:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_IncTick+0x20>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_IncTick+0x24>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4413      	add	r3, r2
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <HAL_IncTick+0x24>)
 8003e32:	6013      	str	r3, [r2, #0]
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000114 	.word	0x20000114
 8003e44:	20000890 	.word	0x20000890

08003e48 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return uwTick;  
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <HAL_GetTick+0x14>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	20000890 	.word	0x20000890

08003e60 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e68:	f7ff ffee 	bl	8003e48 <HAL_GetTick>
 8003e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d005      	beq.n	8003e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_Delay+0x44>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003e86:	bf00      	nop
 8003e88:	f7ff ffde 	bl	8003e48 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d8f7      	bhi.n	8003e88 <HAL_Delay+0x28>
  {
  }
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000114 	.word	0x20000114

08003ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <__NVIC_SetPriorityGrouping+0x44>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eda:	4a04      	ldr	r2, [pc, #16]	; (8003eec <__NVIC_SetPriorityGrouping+0x44>)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	60d3      	str	r3, [r2, #12]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef4:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <__NVIC_GetPriorityGrouping+0x18>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	0a1b      	lsrs	r3, r3, #8
 8003efa:	f003 0307 	and.w	r3, r3, #7
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	db0b      	blt.n	8003f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	f003 021f 	and.w	r2, r3, #31
 8003f24:	4907      	ldr	r1, [pc, #28]	; (8003f44 <__NVIC_EnableIRQ+0x38>)
 8003f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	e000e100 	.word	0xe000e100

08003f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	6039      	str	r1, [r7, #0]
 8003f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	db0a      	blt.n	8003f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	490c      	ldr	r1, [pc, #48]	; (8003f94 <__NVIC_SetPriority+0x4c>)
 8003f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f66:	0112      	lsls	r2, r2, #4
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f70:	e00a      	b.n	8003f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4908      	ldr	r1, [pc, #32]	; (8003f98 <__NVIC_SetPriority+0x50>)
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	3b04      	subs	r3, #4
 8003f80:	0112      	lsls	r2, r2, #4
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	440b      	add	r3, r1
 8003f86:	761a      	strb	r2, [r3, #24]
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	e000e100 	.word	0xe000e100
 8003f98:	e000ed00 	.word	0xe000ed00

08003f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b089      	sub	sp, #36	; 0x24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f1c3 0307 	rsb	r3, r3, #7
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	bf28      	it	cs
 8003fba:	2304      	movcs	r3, #4
 8003fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	2b06      	cmp	r3, #6
 8003fc4:	d902      	bls.n	8003fcc <NVIC_EncodePriority+0x30>
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	3b03      	subs	r3, #3
 8003fca:	e000      	b.n	8003fce <NVIC_EncodePriority+0x32>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43da      	mvns	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	401a      	ands	r2, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	fa01 f303 	lsl.w	r3, r1, r3
 8003fee:	43d9      	mvns	r1, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff4:	4313      	orrs	r3, r2
         );
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3724      	adds	r7, #36	; 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004014:	d301      	bcc.n	800401a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004016:	2301      	movs	r3, #1
 8004018:	e00f      	b.n	800403a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800401a:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <SysTick_Config+0x40>)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3b01      	subs	r3, #1
 8004020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004022:	210f      	movs	r1, #15
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	f7ff ff8e 	bl	8003f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800402c:	4b05      	ldr	r3, [pc, #20]	; (8004044 <SysTick_Config+0x40>)
 800402e:	2200      	movs	r2, #0
 8004030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004032:	4b04      	ldr	r3, [pc, #16]	; (8004044 <SysTick_Config+0x40>)
 8004034:	2207      	movs	r2, #7
 8004036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	e000e010 	.word	0xe000e010

08004048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff29 	bl	8003ea8 <__NVIC_SetPriorityGrouping>
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b086      	sub	sp, #24
 8004062:	af00      	add	r7, sp, #0
 8004064:	4603      	mov	r3, r0
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004070:	f7ff ff3e 	bl	8003ef0 <__NVIC_GetPriorityGrouping>
 8004074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	6978      	ldr	r0, [r7, #20]
 800407c:	f7ff ff8e 	bl	8003f9c <NVIC_EncodePriority>
 8004080:	4602      	mov	r2, r0
 8004082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004086:	4611      	mov	r1, r2
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff ff5d 	bl	8003f48 <__NVIC_SetPriority>
}
 800408e:	bf00      	nop
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	4603      	mov	r3, r0
 800409e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff31 	bl	8003f0c <__NVIC_EnableIRQ>
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff ffa2 	bl	8004004 <SysTick_Config>
 80040c0:	4603      	mov	r3, r0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d008      	beq.n	80040ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2204      	movs	r2, #4
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e020      	b.n	8004130 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 020e 	bic.w	r2, r2, #14
 80040fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	2101      	movs	r1, #1
 8004118:	fa01 f202 	lsl.w	r2, r1, r2
 800411c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800414e:	2b02      	cmp	r3, #2
 8004150:	d005      	beq.n	800415e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2204      	movs	r2, #4
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
 800415c:	e027      	b.n	80041ae <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 020e 	bic.w	r2, r2, #14
 800416c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	2101      	movs	r1, #1
 8004188:	fa01 f202 	lsl.w	r2, r1, r2
 800418c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	4798      	blx	r3
    } 
  }
  return status;
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041c6:	e154      	b.n	8004472 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	2101      	movs	r1, #1
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	fa01 f303 	lsl.w	r3, r1, r3
 80041d4:	4013      	ands	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 8146 	beq.w	800446c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d005      	beq.n	80041f8 <HAL_GPIO_Init+0x40>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d130      	bne.n	800425a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	2203      	movs	r2, #3
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800422e:	2201      	movs	r2, #1
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	f003 0201 	and.w	r2, r3, #1
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b03      	cmp	r3, #3
 8004264:	d017      	beq.n	8004296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	2203      	movs	r2, #3
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d123      	bne.n	80042ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	08da      	lsrs	r2, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3208      	adds	r2, #8
 80042aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	220f      	movs	r2, #15
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43db      	mvns	r3, r3
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4013      	ands	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	08da      	lsrs	r2, r3, #3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3208      	adds	r2, #8
 80042e4:	6939      	ldr	r1, [r7, #16]
 80042e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	2203      	movs	r2, #3
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4013      	ands	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 0203 	and.w	r2, r3, #3
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4313      	orrs	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 80a0 	beq.w	800446c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432c:	4b58      	ldr	r3, [pc, #352]	; (8004490 <HAL_GPIO_Init+0x2d8>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	4a57      	ldr	r2, [pc, #348]	; (8004490 <HAL_GPIO_Init+0x2d8>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	6193      	str	r3, [r2, #24]
 8004338:	4b55      	ldr	r3, [pc, #340]	; (8004490 <HAL_GPIO_Init+0x2d8>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004344:	4a53      	ldr	r2, [pc, #332]	; (8004494 <HAL_GPIO_Init+0x2dc>)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	089b      	lsrs	r3, r3, #2
 800434a:	3302      	adds	r3, #2
 800434c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	220f      	movs	r2, #15
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4013      	ands	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800436e:	d019      	beq.n	80043a4 <HAL_GPIO_Init+0x1ec>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a49      	ldr	r2, [pc, #292]	; (8004498 <HAL_GPIO_Init+0x2e0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d013      	beq.n	80043a0 <HAL_GPIO_Init+0x1e8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a48      	ldr	r2, [pc, #288]	; (800449c <HAL_GPIO_Init+0x2e4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00d      	beq.n	800439c <HAL_GPIO_Init+0x1e4>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a47      	ldr	r2, [pc, #284]	; (80044a0 <HAL_GPIO_Init+0x2e8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d007      	beq.n	8004398 <HAL_GPIO_Init+0x1e0>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a46      	ldr	r2, [pc, #280]	; (80044a4 <HAL_GPIO_Init+0x2ec>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <HAL_GPIO_Init+0x1dc>
 8004390:	2304      	movs	r3, #4
 8004392:	e008      	b.n	80043a6 <HAL_GPIO_Init+0x1ee>
 8004394:	2305      	movs	r3, #5
 8004396:	e006      	b.n	80043a6 <HAL_GPIO_Init+0x1ee>
 8004398:	2303      	movs	r3, #3
 800439a:	e004      	b.n	80043a6 <HAL_GPIO_Init+0x1ee>
 800439c:	2302      	movs	r3, #2
 800439e:	e002      	b.n	80043a6 <HAL_GPIO_Init+0x1ee>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <HAL_GPIO_Init+0x1ee>
 80043a4:	2300      	movs	r3, #0
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	f002 0203 	and.w	r2, r2, #3
 80043ac:	0092      	lsls	r2, r2, #2
 80043ae:	4093      	lsls	r3, r2
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043b6:	4937      	ldr	r1, [pc, #220]	; (8004494 <HAL_GPIO_Init+0x2dc>)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	3302      	adds	r3, #2
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043c4:	4b38      	ldr	r3, [pc, #224]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	43db      	mvns	r3, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4013      	ands	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043e8:	4a2f      	ldr	r2, [pc, #188]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043ee:	4b2e      	ldr	r3, [pc, #184]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	43db      	mvns	r3, r3
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4013      	ands	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004412:	4a25      	ldr	r2, [pc, #148]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004418:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	43db      	mvns	r3, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800443c:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004442:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	43db      	mvns	r3, r3
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004466:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	3301      	adds	r3, #1
 8004470:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	f47f aea3 	bne.w	80041c8 <HAL_GPIO_Init+0x10>
  }
}
 8004482:	bf00      	nop
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40021000 	.word	0x40021000
 8004494:	40010000 	.word	0x40010000
 8004498:	48000400 	.word	0x48000400
 800449c:	48000800 	.word	0x48000800
 80044a0:	48000c00 	.word	0x48000c00
 80044a4:	48001000 	.word	0x48001000
 80044a8:	40010400 	.word	0x40010400

080044ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	887b      	ldrh	r3, [r7, #2]
 80044be:	4013      	ands	r3, r2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
 80044c8:	e001      	b.n	80044ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	807b      	strh	r3, [r7, #2]
 80044e8:	4613      	mov	r3, r2
 80044ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044ec:	787b      	ldrb	r3, [r7, #1]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044f2:	887a      	ldrh	r2, [r7, #2]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044f8:	e002      	b.n	8004500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044fa:	887a      	ldrh	r2, [r7, #2]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800451e:	887a      	ldrh	r2, [r7, #2]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4013      	ands	r3, r2
 8004524:	041a      	lsls	r2, r3, #16
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	43d9      	mvns	r1, r3
 800452a:	887b      	ldrh	r3, [r7, #2]
 800452c:	400b      	ands	r3, r1
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	619a      	str	r2, [r3, #24]
}
 8004534:	bf00      	nop
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d006      	beq.n	8004564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004556:	4a05      	ldr	r2, [pc, #20]	; (800456c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fc fea4 	bl	80012ac <HAL_GPIO_EXTI_Callback>
  }
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40010400 	.word	0x40010400

08004570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e081      	b.n	8004686 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fe ff5a 	bl	8003450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2224      	movs	r2, #36	; 0x24
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d107      	bne.n	80045ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	e006      	b.n	80045f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d104      	bne.n	800460a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800462c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69d9      	ldr	r1, [r3, #28]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d138      	bne.n	8004716 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e032      	b.n	8004718 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2224      	movs	r2, #36	; 0x24
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046e0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6819      	ldr	r1, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0201 	orr.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	e000      	b.n	8004718 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004716:	2302      	movs	r3, #2
  }
}
 8004718:	4618      	mov	r0, r3
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b20      	cmp	r3, #32
 8004738:	d139      	bne.n	80047ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004744:	2302      	movs	r3, #2
 8004746:	e033      	b.n	80047b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2224      	movs	r2, #36	; 0x24
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0201 	bic.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004776:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
  }
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047be:	b08b      	sub	sp, #44	; 0x2c
 80047c0:	af06      	add	r7, sp, #24
 80047c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e0c4      	b.n	8004958 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fe ffd6 	bl	8003794 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2203      	movs	r2, #3
 80047ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f004 fcc3 	bl	8009180 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047fa:	2300      	movs	r3, #0
 80047fc:	73fb      	strb	r3, [r7, #15]
 80047fe:	e040      	b.n	8004882 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	440b      	add	r3, r1
 8004810:	3301      	adds	r3, #1
 8004812:	2201      	movs	r2, #1
 8004814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	440b      	add	r3, r1
 8004826:	7bfa      	ldrb	r2, [r7, #15]
 8004828:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	440b      	add	r3, r1
 800483a:	3303      	adds	r3, #3
 800483c:	2200      	movs	r2, #0
 800483e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004840:	7bfa      	ldrb	r2, [r7, #15]
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	440b      	add	r3, r1
 800484e:	3338      	adds	r3, #56	; 0x38
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004854:	7bfa      	ldrb	r2, [r7, #15]
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	440b      	add	r3, r1
 8004862:	333c      	adds	r3, #60	; 0x3c
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004868:	7bfa      	ldrb	r2, [r7, #15]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	440b      	add	r3, r1
 8004876:	3340      	adds	r3, #64	; 0x40
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	3301      	adds	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
 8004882:	7bfa      	ldrb	r2, [r7, #15]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	429a      	cmp	r2, r3
 800488a:	d3b9      	bcc.n	8004800 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]
 8004890:	e044      	b.n	800491c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004892:	7bfa      	ldrb	r2, [r7, #15]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	440b      	add	r3, r1
 80048a0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048a8:	7bfa      	ldrb	r2, [r7, #15]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	440b      	add	r3, r1
 80048b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048ba:	7bfa      	ldrb	r2, [r7, #15]
 80048bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048be:	7bfa      	ldrb	r2, [r7, #15]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	440b      	add	r3, r1
 80048cc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048d4:	7bfa      	ldrb	r2, [r7, #15]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	440b      	add	r3, r1
 80048e2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048ea:	7bfa      	ldrb	r2, [r7, #15]
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	440b      	add	r3, r1
 80048f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004900:	7bfa      	ldrb	r2, [r7, #15]
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	440b      	add	r3, r1
 800490e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	3301      	adds	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
 800491c:	7bfa      	ldrb	r2, [r7, #15]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d3b5      	bcc.n	8004892 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	687e      	ldr	r6, [r7, #4]
 800492e:	466d      	mov	r5, sp
 8004930:	f106 0410 	add.w	r4, r6, #16
 8004934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	602b      	str	r3, [r5, #0]
 800493c:	1d33      	adds	r3, r6, #4
 800493e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004940:	6838      	ldr	r0, [r7, #0]
 8004942:	f004 fc38 	bl	80091b6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004966:	af00      	add	r7, sp, #0
 8004968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004970:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	f001 b823 	b.w	80059cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 817d 	beq.w	8004c96 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800499c:	4bbc      	ldr	r3, [pc, #752]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 030c 	and.w	r3, r3, #12
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d00c      	beq.n	80049c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049a8:	4bb9      	ldr	r3, [pc, #740]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 030c 	and.w	r3, r3, #12
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d15c      	bne.n	8004a6e <HAL_RCC_OscConfig+0x10e>
 80049b4:	4bb6      	ldr	r3, [pc, #728]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c0:	d155      	bne.n	8004a6e <HAL_RCC_OscConfig+0x10e>
 80049c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80049ce:	fa93 f3a3 	rbit	r3, r3
 80049d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80049d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049da:	fab3 f383 	clz	r3, r3
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d102      	bne.n	80049f4 <HAL_RCC_OscConfig+0x94>
 80049ee:	4ba8      	ldr	r3, [pc, #672]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	e015      	b.n	8004a20 <HAL_RCC_OscConfig+0xc0>
 80049f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004a00:	fa93 f3a3 	rbit	r3, r3
 8004a04:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a0c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004a10:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004a14:	fa93 f3a3 	rbit	r3, r3
 8004a18:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004a1c:	4b9c      	ldr	r3, [pc, #624]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a24:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004a28:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004a2c:	fa92 f2a2 	rbit	r2, r2
 8004a30:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004a34:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004a38:	fab2 f282 	clz	r2, r2
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	f042 0220 	orr.w	r2, r2, #32
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	f002 021f 	and.w	r2, r2, #31
 8004a48:	2101      	movs	r1, #1
 8004a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 811f 	beq.w	8004c94 <HAL_RCC_OscConfig+0x334>
 8004a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f040 8116 	bne.w	8004c94 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f000 bfaf 	b.w	80059cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCC_OscConfig+0x12e>
 8004a80:	4b83      	ldr	r3, [pc, #524]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a82      	ldr	r2, [pc, #520]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	e036      	b.n	8004afc <HAL_RCC_OscConfig+0x19c>
 8004a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x158>
 8004a9e:	4b7c      	ldr	r3, [pc, #496]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7b      	ldr	r2, [pc, #492]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b79      	ldr	r3, [pc, #484]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a78      	ldr	r2, [pc, #480]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e021      	b.n	8004afc <HAL_RCC_OscConfig+0x19c>
 8004ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x184>
 8004aca:	4b71      	ldr	r3, [pc, #452]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a70      	ldr	r2, [pc, #448]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4b6e      	ldr	r3, [pc, #440]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a6d      	ldr	r2, [pc, #436]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e00b      	b.n	8004afc <HAL_RCC_OscConfig+0x19c>
 8004ae4:	4b6a      	ldr	r3, [pc, #424]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a69      	ldr	r2, [pc, #420]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	4b67      	ldr	r3, [pc, #412]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a66      	ldr	r2, [pc, #408]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004afc:	4b64      	ldr	r3, [pc, #400]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	f023 020f 	bic.w	r2, r3, #15
 8004b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	495f      	ldr	r1, [pc, #380]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d059      	beq.n	8004bda <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b26:	f7ff f98f 	bl	8003e48 <HAL_GetTick>
 8004b2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b2e:	e00a      	b.n	8004b46 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b30:	f7ff f98a 	bl	8003e48 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b64      	cmp	r3, #100	; 0x64
 8004b3e:	d902      	bls.n	8004b46 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	f000 bf43 	b.w	80059cc <HAL_RCC_OscConfig+0x106c>
 8004b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b4a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004b52:	fa93 f3a3 	rbit	r3, r3
 8004b56:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004b5a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	fab3 f383 	clz	r3, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d102      	bne.n	8004b78 <HAL_RCC_OscConfig+0x218>
 8004b72:	4b47      	ldr	r3, [pc, #284]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	e015      	b.n	8004ba4 <HAL_RCC_OscConfig+0x244>
 8004b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b7c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b80:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004b84:	fa93 f3a3 	rbit	r3, r3
 8004b88:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b90:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004b94:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004b98:	fa93 f3a3 	rbit	r3, r3
 8004b9c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004ba0:	4b3b      	ldr	r3, [pc, #236]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ba8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004bac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004bb0:	fa92 f2a2 	rbit	r2, r2
 8004bb4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004bb8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004bbc:	fab2 f282 	clz	r2, r2
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	f042 0220 	orr.w	r2, r2, #32
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	f002 021f 	and.w	r2, r2, #31
 8004bcc:	2101      	movs	r1, #1
 8004bce:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ab      	beq.n	8004b30 <HAL_RCC_OscConfig+0x1d0>
 8004bd8:	e05d      	b.n	8004c96 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bda:	f7ff f935 	bl	8003e48 <HAL_GetTick>
 8004bde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be4:	f7ff f930 	bl	8003e48 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b64      	cmp	r3, #100	; 0x64
 8004bf2:	d902      	bls.n	8004bfa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	f000 bee9 	b.w	80059cc <HAL_RCC_OscConfig+0x106c>
 8004bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bfe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c02:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004c06:	fa93 f3a3 	rbit	r3, r3
 8004c0a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004c0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c12:	fab3 f383 	clz	r3, r3
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d102      	bne.n	8004c2c <HAL_RCC_OscConfig+0x2cc>
 8004c26:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	e015      	b.n	8004c58 <HAL_RCC_OscConfig+0x2f8>
 8004c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c30:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c34:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c38:	fa93 f3a3 	rbit	r3, r3
 8004c3c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c44:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004c48:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004c4c:	fa93 f3a3 	rbit	r3, r3
 8004c50:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004c54:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <HAL_RCC_OscConfig+0x330>)
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c5c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004c60:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004c64:	fa92 f2a2 	rbit	r2, r2
 8004c68:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004c6c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004c70:	fab2 f282 	clz	r2, r2
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	f042 0220 	orr.w	r2, r2, #32
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	f002 021f 	and.w	r2, r2, #31
 8004c80:	2101      	movs	r1, #1
 8004c82:	fa01 f202 	lsl.w	r2, r1, r2
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1ab      	bne.n	8004be4 <HAL_RCC_OscConfig+0x284>
 8004c8c:	e003      	b.n	8004c96 <HAL_RCC_OscConfig+0x336>
 8004c8e:	bf00      	nop
 8004c90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 817d 	beq.w	8004fa6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004cac:	4ba6      	ldr	r3, [pc, #664]	; (8004f48 <HAL_RCC_OscConfig+0x5e8>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 030c 	and.w	r3, r3, #12
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00b      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004cb8:	4ba3      	ldr	r3, [pc, #652]	; (8004f48 <HAL_RCC_OscConfig+0x5e8>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d172      	bne.n	8004daa <HAL_RCC_OscConfig+0x44a>
 8004cc4:	4ba0      	ldr	r3, [pc, #640]	; (8004f48 <HAL_RCC_OscConfig+0x5e8>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d16c      	bne.n	8004daa <HAL_RCC_OscConfig+0x44a>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004cda:	fa93 f3a3 	rbit	r3, r3
 8004cde:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004ce2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	095b      	lsrs	r3, r3, #5
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d102      	bne.n	8004d00 <HAL_RCC_OscConfig+0x3a0>
 8004cfa:	4b93      	ldr	r3, [pc, #588]	; (8004f48 <HAL_RCC_OscConfig+0x5e8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	e013      	b.n	8004d28 <HAL_RCC_OscConfig+0x3c8>
 8004d00:	2302      	movs	r3, #2
 8004d02:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d06:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004d0a:	fa93 f3a3 	rbit	r3, r3
 8004d0e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004d12:	2302      	movs	r3, #2
 8004d14:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004d18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004d1c:	fa93 f3a3 	rbit	r3, r3
 8004d20:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004d24:	4b88      	ldr	r3, [pc, #544]	; (8004f48 <HAL_RCC_OscConfig+0x5e8>)
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	2202      	movs	r2, #2
 8004d2a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004d2e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004d32:	fa92 f2a2 	rbit	r2, r2
 8004d36:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004d3a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004d3e:	fab2 f282 	clz	r2, r2
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	f042 0220 	orr.w	r2, r2, #32
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	f002 021f 	and.w	r2, r2, #31
 8004d4e:	2101      	movs	r1, #1
 8004d50:	fa01 f202 	lsl.w	r2, r1, r2
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_RCC_OscConfig+0x410>
 8004d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d002      	beq.n	8004d70 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f000 be2e 	b.w	80059cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d70:	4b75      	ldr	r3, [pc, #468]	; (8004f48 <HAL_RCC_OscConfig+0x5e8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	21f8      	movs	r1, #248	; 0xf8
 8004d86:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004d8e:	fa91 f1a1 	rbit	r1, r1
 8004d92:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004d96:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004d9a:	fab1 f181 	clz	r1, r1
 8004d9e:	b2c9      	uxtb	r1, r1
 8004da0:	408b      	lsls	r3, r1
 8004da2:	4969      	ldr	r1, [pc, #420]	; (8004f48 <HAL_RCC_OscConfig+0x5e8>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da8:	e0fd      	b.n	8004fa6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8088 	beq.w	8004ecc <HAL_RCC_OscConfig+0x56c>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004dce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ddc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	461a      	mov	r2, r3
 8004de4:	2301      	movs	r3, #1
 8004de6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de8:	f7ff f82e 	bl	8003e48 <HAL_GetTick>
 8004dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df0:	e00a      	b.n	8004e08 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004df2:	f7ff f829 	bl	8003e48 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d902      	bls.n	8004e08 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	f000 bde2 	b.w	80059cc <HAL_RCC_OscConfig+0x106c>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004e12:	fa93 f3a3 	rbit	r3, r3
 8004e16:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004e1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1e:	fab3 f383 	clz	r3, r3
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d102      	bne.n	8004e38 <HAL_RCC_OscConfig+0x4d8>
 8004e32:	4b45      	ldr	r3, [pc, #276]	; (8004f48 <HAL_RCC_OscConfig+0x5e8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	e013      	b.n	8004e60 <HAL_RCC_OscConfig+0x500>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004e42:	fa93 f3a3 	rbit	r3, r3
 8004e46:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004e50:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e54:	fa93 f3a3 	rbit	r3, r3
 8004e58:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004e5c:	4b3a      	ldr	r3, [pc, #232]	; (8004f48 <HAL_RCC_OscConfig+0x5e8>)
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	2202      	movs	r2, #2
 8004e62:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004e66:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e6a:	fa92 f2a2 	rbit	r2, r2
 8004e6e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004e72:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004e76:	fab2 f282 	clz	r2, r2
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	f042 0220 	orr.w	r2, r2, #32
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	f002 021f 	and.w	r2, r2, #31
 8004e86:	2101      	movs	r1, #1
 8004e88:	fa01 f202 	lsl.w	r2, r1, r2
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0af      	beq.n	8004df2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e92:	4b2d      	ldr	r3, [pc, #180]	; (8004f48 <HAL_RCC_OscConfig+0x5e8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	21f8      	movs	r1, #248	; 0xf8
 8004ea8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004eb0:	fa91 f1a1 	rbit	r1, r1
 8004eb4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004eb8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004ebc:	fab1 f181 	clz	r1, r1
 8004ec0:	b2c9      	uxtb	r1, r1
 8004ec2:	408b      	lsls	r3, r1
 8004ec4:	4920      	ldr	r1, [pc, #128]	; (8004f48 <HAL_RCC_OscConfig+0x5e8>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]
 8004eca:	e06c      	b.n	8004fa6 <HAL_RCC_OscConfig+0x646>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ed6:	fa93 f3a3 	rbit	r3, r3
 8004eda:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004ede:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ee2:	fab3 f383 	clz	r3, r3
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004eec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef8:	f7fe ffa6 	bl	8003e48 <HAL_GetTick>
 8004efc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f00:	e00a      	b.n	8004f18 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f02:	f7fe ffa1 	bl	8003e48 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d902      	bls.n	8004f18 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	f000 bd5a 	b.w	80059cc <HAL_RCC_OscConfig+0x106c>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f22:	fa93 f3a3 	rbit	r3, r3
 8004f26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2e:	fab3 f383 	clz	r3, r3
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d104      	bne.n	8004f4c <HAL_RCC_OscConfig+0x5ec>
 8004f42:	4b01      	ldr	r3, [pc, #4]	; (8004f48 <HAL_RCC_OscConfig+0x5e8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	e015      	b.n	8004f74 <HAL_RCC_OscConfig+0x614>
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f56:	fa93 f3a3 	rbit	r3, r3
 8004f5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f5e:	2302      	movs	r3, #2
 8004f60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f68:	fa93 f3a3 	rbit	r3, r3
 8004f6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f70:	4bc8      	ldr	r3, [pc, #800]	; (8005294 <HAL_RCC_OscConfig+0x934>)
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	2202      	movs	r2, #2
 8004f76:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004f7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004f7e:	fa92 f2a2 	rbit	r2, r2
 8004f82:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004f86:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004f8a:	fab2 f282 	clz	r2, r2
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	f042 0220 	orr.w	r2, r2, #32
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	f002 021f 	and.w	r2, r2, #31
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1ad      	bne.n	8004f02 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8110 	beq.w	80051dc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d079      	beq.n	80050c0 <HAL_RCC_OscConfig+0x760>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004fd6:	fa93 f3a3 	rbit	r3, r3
 8004fda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fe2:	fab3 f383 	clz	r3, r3
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4bab      	ldr	r3, [pc, #684]	; (8005298 <HAL_RCC_OscConfig+0x938>)
 8004fec:	4413      	add	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff6:	f7fe ff27 	bl	8003e48 <HAL_GetTick>
 8004ffa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffe:	e00a      	b.n	8005016 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005000:	f7fe ff22 	bl	8003e48 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d902      	bls.n	8005016 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	f000 bcdb 	b.w	80059cc <HAL_RCC_OscConfig+0x106c>
 8005016:	2302      	movs	r3, #2
 8005018:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005020:	fa93 f3a3 	rbit	r3, r3
 8005024:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005030:	2202      	movs	r2, #2
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005038:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	fa93 f2a3 	rbit	r2, r3
 8005042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005054:	2202      	movs	r2, #2
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800505c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	fa93 f2a3 	rbit	r2, r3
 8005066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800506e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005070:	4b88      	ldr	r3, [pc, #544]	; (8005294 <HAL_RCC_OscConfig+0x934>)
 8005072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005078:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800507c:	2102      	movs	r1, #2
 800507e:	6019      	str	r1, [r3, #0]
 8005080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005084:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	fa93 f1a3 	rbit	r1, r3
 800508e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005092:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005096:	6019      	str	r1, [r3, #0]
  return result;
 8005098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800509c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	fab3 f383 	clz	r3, r3
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	2101      	movs	r1, #1
 80050b4:	fa01 f303 	lsl.w	r3, r1, r3
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0a0      	beq.n	8005000 <HAL_RCC_OscConfig+0x6a0>
 80050be:	e08d      	b.n	80051dc <HAL_RCC_OscConfig+0x87c>
 80050c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050c8:	2201      	movs	r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	fa93 f2a3 	rbit	r2, r3
 80050da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050e2:	601a      	str	r2, [r3, #0]
  return result;
 80050e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ee:	fab3 f383 	clz	r3, r3
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	4b68      	ldr	r3, [pc, #416]	; (8005298 <HAL_RCC_OscConfig+0x938>)
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	461a      	mov	r2, r3
 80050fe:	2300      	movs	r3, #0
 8005100:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005102:	f7fe fea1 	bl	8003e48 <HAL_GetTick>
 8005106:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800510a:	e00a      	b.n	8005122 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800510c:	f7fe fe9c 	bl	8003e48 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d902      	bls.n	8005122 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	f000 bc55 	b.w	80059cc <HAL_RCC_OscConfig+0x106c>
 8005122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005126:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800512a:	2202      	movs	r2, #2
 800512c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005132:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	fa93 f2a3 	rbit	r2, r3
 800513c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005140:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800514a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800514e:	2202      	movs	r2, #2
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005156:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	fa93 f2a3 	rbit	r2, r3
 8005160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005172:	2202      	movs	r2, #2
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	fa93 f2a3 	rbit	r2, r3
 8005184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005188:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800518c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800518e:	4b41      	ldr	r3, [pc, #260]	; (8005294 <HAL_RCC_OscConfig+0x934>)
 8005190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005196:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800519a:	2102      	movs	r1, #2
 800519c:	6019      	str	r1, [r3, #0]
 800519e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	fa93 f1a3 	rbit	r1, r3
 80051ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80051b4:	6019      	str	r1, [r3, #0]
  return result;
 80051b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	fab3 f383 	clz	r3, r3
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f003 031f 	and.w	r3, r3, #31
 80051d0:	2101      	movs	r1, #1
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d197      	bne.n	800510c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 81a1 	beq.w	8005534 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f2:	2300      	movs	r3, #0
 80051f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f8:	4b26      	ldr	r3, [pc, #152]	; (8005294 <HAL_RCC_OscConfig+0x934>)
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d116      	bne.n	8005232 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005204:	4b23      	ldr	r3, [pc, #140]	; (8005294 <HAL_RCC_OscConfig+0x934>)
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	4a22      	ldr	r2, [pc, #136]	; (8005294 <HAL_RCC_OscConfig+0x934>)
 800520a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520e:	61d3      	str	r3, [r2, #28]
 8005210:	4b20      	ldr	r3, [pc, #128]	; (8005294 <HAL_RCC_OscConfig+0x934>)
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005226:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800522a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800522c:	2301      	movs	r3, #1
 800522e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005232:	4b1a      	ldr	r3, [pc, #104]	; (800529c <HAL_RCC_OscConfig+0x93c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523a:	2b00      	cmp	r3, #0
 800523c:	d11a      	bne.n	8005274 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800523e:	4b17      	ldr	r3, [pc, #92]	; (800529c <HAL_RCC_OscConfig+0x93c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a16      	ldr	r2, [pc, #88]	; (800529c <HAL_RCC_OscConfig+0x93c>)
 8005244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005248:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800524a:	f7fe fdfd 	bl	8003e48 <HAL_GetTick>
 800524e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005252:	e009      	b.n	8005268 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005254:	f7fe fdf8 	bl	8003e48 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b64      	cmp	r3, #100	; 0x64
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e3b1      	b.n	80059cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005268:	4b0c      	ldr	r3, [pc, #48]	; (800529c <HAL_RCC_OscConfig+0x93c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0ef      	beq.n	8005254 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005278:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d10d      	bne.n	80052a0 <HAL_RCC_OscConfig+0x940>
 8005284:	4b03      	ldr	r3, [pc, #12]	; (8005294 <HAL_RCC_OscConfig+0x934>)
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	4a02      	ldr	r2, [pc, #8]	; (8005294 <HAL_RCC_OscConfig+0x934>)
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	6213      	str	r3, [r2, #32]
 8005290:	e03c      	b.n	800530c <HAL_RCC_OscConfig+0x9ac>
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000
 8005298:	10908120 	.word	0x10908120
 800529c:	40007000 	.word	0x40007000
 80052a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10c      	bne.n	80052ca <HAL_RCC_OscConfig+0x96a>
 80052b0:	4bc1      	ldr	r3, [pc, #772]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	4ac0      	ldr	r2, [pc, #768]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80052b6:	f023 0301 	bic.w	r3, r3, #1
 80052ba:	6213      	str	r3, [r2, #32]
 80052bc:	4bbe      	ldr	r3, [pc, #760]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	4abd      	ldr	r2, [pc, #756]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80052c2:	f023 0304 	bic.w	r3, r3, #4
 80052c6:	6213      	str	r3, [r2, #32]
 80052c8:	e020      	b.n	800530c <HAL_RCC_OscConfig+0x9ac>
 80052ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCC_OscConfig+0x994>
 80052da:	4bb7      	ldr	r3, [pc, #732]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	4ab6      	ldr	r2, [pc, #728]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80052e0:	f043 0304 	orr.w	r3, r3, #4
 80052e4:	6213      	str	r3, [r2, #32]
 80052e6:	4bb4      	ldr	r3, [pc, #720]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	4ab3      	ldr	r2, [pc, #716]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	6213      	str	r3, [r2, #32]
 80052f2:	e00b      	b.n	800530c <HAL_RCC_OscConfig+0x9ac>
 80052f4:	4bb0      	ldr	r3, [pc, #704]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	4aaf      	ldr	r2, [pc, #700]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	6213      	str	r3, [r2, #32]
 8005300:	4bad      	ldr	r3, [pc, #692]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	4aac      	ldr	r2, [pc, #688]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 8005306:	f023 0304 	bic.w	r3, r3, #4
 800530a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800530c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8081 	beq.w	8005420 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531e:	f7fe fd93 	bl	8003e48 <HAL_GetTick>
 8005322:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005326:	e00b      	b.n	8005340 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005328:	f7fe fd8e 	bl	8003e48 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	f241 3288 	movw	r2, #5000	; 0x1388
 8005338:	4293      	cmp	r3, r2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e345      	b.n	80059cc <HAL_RCC_OscConfig+0x106c>
 8005340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005344:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005348:	2202      	movs	r2, #2
 800534a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005350:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	fa93 f2a3 	rbit	r2, r3
 800535a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005368:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800536c:	2202      	movs	r2, #2
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005374:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	fa93 f2a3 	rbit	r2, r3
 800537e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005382:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005386:	601a      	str	r2, [r3, #0]
  return result;
 8005388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800538c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005390:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005392:	fab3 f383 	clz	r3, r3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	b2db      	uxtb	r3, r3
 800539c:	f043 0302 	orr.w	r3, r3, #2
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d102      	bne.n	80053ac <HAL_RCC_OscConfig+0xa4c>
 80053a6:	4b84      	ldr	r3, [pc, #528]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	e013      	b.n	80053d4 <HAL_RCC_OscConfig+0xa74>
 80053ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80053b4:	2202      	movs	r2, #2
 80053b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	fa93 f2a3 	rbit	r2, r3
 80053c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	4b79      	ldr	r3, [pc, #484]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80053dc:	2102      	movs	r1, #2
 80053de:	6011      	str	r1, [r2, #0]
 80053e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	fa92 f1a2 	rbit	r1, r2
 80053ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053f2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80053f6:	6011      	str	r1, [r2, #0]
  return result;
 80053f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053fc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005400:	6812      	ldr	r2, [r2, #0]
 8005402:	fab2 f282 	clz	r2, r2
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	f002 021f 	and.w	r2, r2, #31
 8005412:	2101      	movs	r1, #1
 8005414:	fa01 f202 	lsl.w	r2, r1, r2
 8005418:	4013      	ands	r3, r2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d084      	beq.n	8005328 <HAL_RCC_OscConfig+0x9c8>
 800541e:	e07f      	b.n	8005520 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005420:	f7fe fd12 	bl	8003e48 <HAL_GetTick>
 8005424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005428:	e00b      	b.n	8005442 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800542a:	f7fe fd0d 	bl	8003e48 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f241 3288 	movw	r2, #5000	; 0x1388
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e2c4      	b.n	80059cc <HAL_RCC_OscConfig+0x106c>
 8005442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005446:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800544a:	2202      	movs	r2, #2
 800544c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005452:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	fa93 f2a3 	rbit	r2, r3
 800545c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005460:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800546a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800546e:	2202      	movs	r2, #2
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005476:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	fa93 f2a3 	rbit	r2, r3
 8005480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005484:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005488:	601a      	str	r2, [r3, #0]
  return result;
 800548a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800548e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005492:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005494:	fab3 f383 	clz	r3, r3
 8005498:	b2db      	uxtb	r3, r3
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f043 0302 	orr.w	r3, r3, #2
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d102      	bne.n	80054ae <HAL_RCC_OscConfig+0xb4e>
 80054a8:	4b43      	ldr	r3, [pc, #268]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	e013      	b.n	80054d6 <HAL_RCC_OscConfig+0xb76>
 80054ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80054b6:	2202      	movs	r2, #2
 80054b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	fa93 f2a3 	rbit	r2, r3
 80054c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	4b39      	ldr	r3, [pc, #228]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80054de:	2102      	movs	r1, #2
 80054e0:	6011      	str	r1, [r2, #0]
 80054e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	fa92 f1a2 	rbit	r1, r2
 80054f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80054f8:	6011      	str	r1, [r2, #0]
  return result;
 80054fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054fe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	fab2 f282 	clz	r2, r2
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	f002 021f 	and.w	r2, r2, #31
 8005514:	2101      	movs	r1, #1
 8005516:	fa01 f202 	lsl.w	r2, r1, r2
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d184      	bne.n	800542a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005520:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005524:	2b01      	cmp	r3, #1
 8005526:	d105      	bne.n	8005534 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005528:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	4a22      	ldr	r2, [pc, #136]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 800552e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005532:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8242 	beq.w	80059ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005546:	4b1c      	ldr	r3, [pc, #112]	; (80055b8 <HAL_RCC_OscConfig+0xc58>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f003 030c 	and.w	r3, r3, #12
 800554e:	2b08      	cmp	r3, #8
 8005550:	f000 8213 	beq.w	800597a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005558:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	2b02      	cmp	r3, #2
 8005562:	f040 8162 	bne.w	800582a <HAL_RCC_OscConfig+0xeca>
 8005566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800556a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800556e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005578:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	fa93 f2a3 	rbit	r2, r3
 8005582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005586:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800558a:	601a      	str	r2, [r3, #0]
  return result;
 800558c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005590:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005594:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005596:	fab3 f383 	clz	r3, r3
 800559a:	b2db      	uxtb	r3, r3
 800559c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	461a      	mov	r2, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ac:	f7fe fc4c 	bl	8003e48 <HAL_GetTick>
 80055b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055b4:	e00c      	b.n	80055d0 <HAL_RCC_OscConfig+0xc70>
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055bc:	f7fe fc44 	bl	8003e48 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e1fd      	b.n	80059cc <HAL_RCC_OscConfig+0x106c>
 80055d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80055d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	fa93 f2a3 	rbit	r2, r3
 80055ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80055f4:	601a      	str	r2, [r3, #0]
  return result;
 80055f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80055fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005600:	fab3 f383 	clz	r3, r3
 8005604:	b2db      	uxtb	r3, r3
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	b2db      	uxtb	r3, r3
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b01      	cmp	r3, #1
 8005612:	d102      	bne.n	800561a <HAL_RCC_OscConfig+0xcba>
 8005614:	4bb0      	ldr	r3, [pc, #704]	; (80058d8 <HAL_RCC_OscConfig+0xf78>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	e027      	b.n	800566a <HAL_RCC_OscConfig+0xd0a>
 800561a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800561e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	fa93 f2a3 	rbit	r2, r3
 8005636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005644:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005652:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	fa93 f2a3 	rbit	r2, r3
 800565c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005660:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	4b9c      	ldr	r3, [pc, #624]	; (80058d8 <HAL_RCC_OscConfig+0xf78>)
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800566e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005672:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005676:	6011      	str	r1, [r2, #0]
 8005678:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800567c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	fa92 f1a2 	rbit	r1, r2
 8005686:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800568a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800568e:	6011      	str	r1, [r2, #0]
  return result;
 8005690:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005694:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	fab2 f282 	clz	r2, r2
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	f042 0220 	orr.w	r2, r2, #32
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	f002 021f 	and.w	r2, r2, #31
 80056aa:	2101      	movs	r1, #1
 80056ac:	fa01 f202 	lsl.w	r2, r1, r2
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d182      	bne.n	80055bc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056b6:	4b88      	ldr	r3, [pc, #544]	; (80058d8 <HAL_RCC_OscConfig+0xf78>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80056be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80056ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	430b      	orrs	r3, r1
 80056d8:	497f      	ldr	r1, [pc, #508]	; (80058d8 <HAL_RCC_OscConfig+0xf78>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	604b      	str	r3, [r1, #4]
 80056de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80056e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	fa93 f2a3 	rbit	r2, r3
 80056fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005702:	601a      	str	r2, [r3, #0]
  return result;
 8005704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005708:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800570c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800570e:	fab3 f383 	clz	r3, r3
 8005712:	b2db      	uxtb	r3, r3
 8005714:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005718:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	461a      	mov	r2, r3
 8005720:	2301      	movs	r3, #1
 8005722:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005724:	f7fe fb90 	bl	8003e48 <HAL_GetTick>
 8005728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800572c:	e009      	b.n	8005742 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572e:	f7fe fb8b 	bl	8003e48 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e144      	b.n	80059cc <HAL_RCC_OscConfig+0x106c>
 8005742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005746:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800574a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800574e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005754:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	fa93 f2a3 	rbit	r2, r3
 800575e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005762:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005766:	601a      	str	r2, [r3, #0]
  return result;
 8005768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800576c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005770:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005772:	fab3 f383 	clz	r3, r3
 8005776:	b2db      	uxtb	r3, r3
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	b2db      	uxtb	r3, r3
 800577c:	f043 0301 	orr.w	r3, r3, #1
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b01      	cmp	r3, #1
 8005784:	d102      	bne.n	800578c <HAL_RCC_OscConfig+0xe2c>
 8005786:	4b54      	ldr	r3, [pc, #336]	; (80058d8 <HAL_RCC_OscConfig+0xf78>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	e027      	b.n	80057dc <HAL_RCC_OscConfig+0xe7c>
 800578c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005790:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800579e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	fa93 f2a3 	rbit	r2, r3
 80057a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80057ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	fa93 f2a3 	rbit	r2, r3
 80057ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	4b3f      	ldr	r3, [pc, #252]	; (80058d8 <HAL_RCC_OscConfig+0xf78>)
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057e0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80057e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80057e8:	6011      	str	r1, [r2, #0]
 80057ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057ee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80057f2:	6812      	ldr	r2, [r2, #0]
 80057f4:	fa92 f1a2 	rbit	r1, r2
 80057f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057fc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005800:	6011      	str	r1, [r2, #0]
  return result;
 8005802:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005806:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	fab2 f282 	clz	r2, r2
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	f042 0220 	orr.w	r2, r2, #32
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	f002 021f 	and.w	r2, r2, #31
 800581c:	2101      	movs	r1, #1
 800581e:	fa01 f202 	lsl.w	r2, r1, r2
 8005822:	4013      	ands	r3, r2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d082      	beq.n	800572e <HAL_RCC_OscConfig+0xdce>
 8005828:	e0cf      	b.n	80059ca <HAL_RCC_OscConfig+0x106a>
 800582a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800582e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005832:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800583c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	fa93 f2a3 	rbit	r2, r3
 8005846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800584a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800584e:	601a      	str	r2, [r3, #0]
  return result;
 8005850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005854:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005858:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585a:	fab3 f383 	clz	r3, r3
 800585e:	b2db      	uxtb	r3, r3
 8005860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	461a      	mov	r2, r3
 800586c:	2300      	movs	r3, #0
 800586e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005870:	f7fe faea 	bl	8003e48 <HAL_GetTick>
 8005874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005878:	e009      	b.n	800588e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800587a:	f7fe fae5 	bl	8003e48 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e09e      	b.n	80059cc <HAL_RCC_OscConfig+0x106c>
 800588e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005892:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800589a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	fa93 f2a3 	rbit	r2, r3
 80058aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80058b2:	601a      	str	r2, [r3, #0]
  return result;
 80058b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80058bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058be:	fab3 f383 	clz	r3, r3
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d104      	bne.n	80058dc <HAL_RCC_OscConfig+0xf7c>
 80058d2:	4b01      	ldr	r3, [pc, #4]	; (80058d8 <HAL_RCC_OscConfig+0xf78>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	e029      	b.n	800592c <HAL_RCC_OscConfig+0xfcc>
 80058d8:	40021000 	.word	0x40021000
 80058dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80058e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	fa93 f2a3 	rbit	r2, r3
 80058f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005906:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800590a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005914:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	fa93 f2a3 	rbit	r2, r3
 800591e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005922:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	4b2b      	ldr	r3, [pc, #172]	; (80059d8 <HAL_RCC_OscConfig+0x1078>)
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005930:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005934:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005938:	6011      	str	r1, [r2, #0]
 800593a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800593e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	fa92 f1a2 	rbit	r1, r2
 8005948:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800594c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005950:	6011      	str	r1, [r2, #0]
  return result;
 8005952:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005956:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	fab2 f282 	clz	r2, r2
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	f042 0220 	orr.w	r2, r2, #32
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	f002 021f 	and.w	r2, r2, #31
 800596c:	2101      	movs	r1, #1
 800596e:	fa01 f202 	lsl.w	r2, r1, r2
 8005972:	4013      	ands	r3, r2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d180      	bne.n	800587a <HAL_RCC_OscConfig+0xf1a>
 8005978:	e027      	b.n	80059ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800597a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800597e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e01e      	b.n	80059cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800598e:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <HAL_RCC_OscConfig+0x1078>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005996:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800599a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800599e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d10b      	bne.n	80059c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80059ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80059b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80059b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d001      	beq.n	80059ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40021000 	.word	0x40021000

080059dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b09e      	sub	sp, #120	; 0x78
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e162      	b.n	8005cba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059f4:	4b90      	ldr	r3, [pc, #576]	; (8005c38 <HAL_RCC_ClockConfig+0x25c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d910      	bls.n	8005a24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a02:	4b8d      	ldr	r3, [pc, #564]	; (8005c38 <HAL_RCC_ClockConfig+0x25c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f023 0207 	bic.w	r2, r3, #7
 8005a0a:	498b      	ldr	r1, [pc, #556]	; (8005c38 <HAL_RCC_ClockConfig+0x25c>)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a12:	4b89      	ldr	r3, [pc, #548]	; (8005c38 <HAL_RCC_ClockConfig+0x25c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d001      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e14a      	b.n	8005cba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d008      	beq.n	8005a42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a30:	4b82      	ldr	r3, [pc, #520]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	497f      	ldr	r1, [pc, #508]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80dc 	beq.w	8005c08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d13c      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xf6>
 8005a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a60:	fa93 f3a3 	rbit	r3, r3
 8005a64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a68:	fab3 f383 	clz	r3, r3
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	f043 0301 	orr.w	r3, r3, #1
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d102      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xa6>
 8005a7c:	4b6f      	ldr	r3, [pc, #444]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	e00f      	b.n	8005aa2 <HAL_RCC_ClockConfig+0xc6>
 8005a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a8a:	fa93 f3a3 	rbit	r3, r3
 8005a8e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a94:	663b      	str	r3, [r7, #96]	; 0x60
 8005a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a98:	fa93 f3a3 	rbit	r3, r3
 8005a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a9e:	4b67      	ldr	r3, [pc, #412]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005aa6:	65ba      	str	r2, [r7, #88]	; 0x58
 8005aa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005aaa:	fa92 f2a2 	rbit	r2, r2
 8005aae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005ab0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ab2:	fab2 f282 	clz	r2, r2
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	f042 0220 	orr.w	r2, r2, #32
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	f002 021f 	and.w	r2, r2, #31
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d17b      	bne.n	8005bc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e0f3      	b.n	8005cba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d13c      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x178>
 8005ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ade:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ae2:	fa93 f3a3 	rbit	r3, r3
 8005ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aea:	fab3 f383 	clz	r3, r3
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f043 0301 	orr.w	r3, r3, #1
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d102      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x128>
 8005afe:	4b4f      	ldr	r3, [pc, #316]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	e00f      	b.n	8005b24 <HAL_RCC_ClockConfig+0x148>
 8005b04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b0c:	fa93 f3a3 	rbit	r3, r3
 8005b10:	647b      	str	r3, [r7, #68]	; 0x44
 8005b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b16:	643b      	str	r3, [r7, #64]	; 0x40
 8005b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b1a:	fa93 f3a3 	rbit	r3, r3
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b20:	4b46      	ldr	r3, [pc, #280]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b28:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b2c:	fa92 f2a2 	rbit	r2, r2
 8005b30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b34:	fab2 f282 	clz	r2, r2
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	f042 0220 	orr.w	r2, r2, #32
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	f002 021f 	and.w	r2, r2, #31
 8005b44:	2101      	movs	r1, #1
 8005b46:	fa01 f202 	lsl.w	r2, r1, r2
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d13a      	bne.n	8005bc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0b2      	b.n	8005cba <HAL_RCC_ClockConfig+0x2de>
 8005b54:	2302      	movs	r3, #2
 8005b56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	fa93 f3a3 	rbit	r3, r3
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b62:	fab3 f383 	clz	r3, r3
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f043 0301 	orr.w	r3, r3, #1
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d102      	bne.n	8005b7c <HAL_RCC_ClockConfig+0x1a0>
 8005b76:	4b31      	ldr	r3, [pc, #196]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	e00d      	b.n	8005b98 <HAL_RCC_ClockConfig+0x1bc>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	fa93 f3a3 	rbit	r3, r3
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
 8005b88:	2302      	movs	r3, #2
 8005b8a:	623b      	str	r3, [r7, #32]
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	fa93 f3a3 	rbit	r3, r3
 8005b92:	61fb      	str	r3, [r7, #28]
 8005b94:	4b29      	ldr	r3, [pc, #164]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	2202      	movs	r2, #2
 8005b9a:	61ba      	str	r2, [r7, #24]
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	fa92 f2a2 	rbit	r2, r2
 8005ba2:	617a      	str	r2, [r7, #20]
  return result;
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	fab2 f282 	clz	r2, r2
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	f042 0220 	orr.w	r2, r2, #32
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	f002 021f 	and.w	r2, r2, #31
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e079      	b.n	8005cba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f023 0203 	bic.w	r2, r3, #3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	491a      	ldr	r1, [pc, #104]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bd8:	f7fe f936 	bl	8003e48 <HAL_GetTick>
 8005bdc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bde:	e00a      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be0:	f7fe f932 	bl	8003e48 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e061      	b.n	8005cba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf6:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f003 020c 	and.w	r2, r3, #12
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d1eb      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c08:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <HAL_RCC_ClockConfig+0x25c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d214      	bcs.n	8005c40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c16:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <HAL_RCC_ClockConfig+0x25c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f023 0207 	bic.w	r2, r3, #7
 8005c1e:	4906      	ldr	r1, [pc, #24]	; (8005c38 <HAL_RCC_ClockConfig+0x25c>)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c26:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <HAL_RCC_ClockConfig+0x25c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d005      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e040      	b.n	8005cba <HAL_RCC_ClockConfig+0x2de>
 8005c38:	40022000 	.word	0x40022000
 8005c3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c4c:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	491a      	ldr	r1, [pc, #104]	; (8005cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c6a:	4b16      	ldr	r3, [pc, #88]	; (8005cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4912      	ldr	r1, [pc, #72]	; (8005cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c7e:	f000 f829 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 8005c82:	4601      	mov	r1, r0
 8005c84:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c8c:	22f0      	movs	r2, #240	; 0xf0
 8005c8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	fa92 f2a2 	rbit	r2, r2
 8005c96:	60fa      	str	r2, [r7, #12]
  return result;
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	fab2 f282 	clz	r2, r2
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	40d3      	lsrs	r3, r2
 8005ca2:	4a09      	ldr	r2, [pc, #36]	; (8005cc8 <HAL_RCC_ClockConfig+0x2ec>)
 8005ca4:	5cd3      	ldrb	r3, [r2, r3]
 8005ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8005caa:	4a08      	ldr	r2, [pc, #32]	; (8005ccc <HAL_RCC_ClockConfig+0x2f0>)
 8005cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005cae:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <HAL_RCC_ClockConfig+0x2f4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe f884 	bl	8003dc0 <HAL_InitTick>
  
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3778      	adds	r7, #120	; 0x78
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	0800a85c 	.word	0x0800a85c
 8005ccc:	2000010c 	.word	0x2000010c
 8005cd0:	20000110 	.word	0x20000110

08005cd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b08b      	sub	sp, #44	; 0x2c
 8005cd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005cee:	4b29      	ldr	r3, [pc, #164]	; (8005d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f003 030c 	and.w	r3, r3, #12
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d002      	beq.n	8005d04 <HAL_RCC_GetSysClockFreq+0x30>
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d003      	beq.n	8005d0a <HAL_RCC_GetSysClockFreq+0x36>
 8005d02:	e03c      	b.n	8005d7e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d04:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d06:	623b      	str	r3, [r7, #32]
      break;
 8005d08:	e03c      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005d10:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005d14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	fa92 f2a2 	rbit	r2, r2
 8005d1c:	607a      	str	r2, [r7, #4]
  return result;
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	fab2 f282 	clz	r2, r2
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	40d3      	lsrs	r3, r2
 8005d28:	4a1c      	ldr	r2, [pc, #112]	; (8005d9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005d2a:	5cd3      	ldrb	r3, [r2, r3]
 8005d2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005d2e:	4b19      	ldr	r3, [pc, #100]	; (8005d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	220f      	movs	r2, #15
 8005d38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	fa92 f2a2 	rbit	r2, r2
 8005d40:	60fa      	str	r2, [r7, #12]
  return result;
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	fab2 f282 	clz	r2, r2
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	40d3      	lsrs	r3, r2
 8005d4c:	4a14      	ldr	r2, [pc, #80]	; (8005da0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d4e:	5cd3      	ldrb	r3, [r2, r3]
 8005d50:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d5c:	4a0e      	ldr	r2, [pc, #56]	; (8005d98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	fb02 f303 	mul.w	r3, r2, r3
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6c:	e004      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	4a0c      	ldr	r2, [pc, #48]	; (8005da4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d72:	fb02 f303 	mul.w	r3, r2, r3
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	623b      	str	r3, [r7, #32]
      break;
 8005d7c:	e002      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d7e:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d80:	623b      	str	r3, [r7, #32]
      break;
 8005d82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d84:	6a3b      	ldr	r3, [r7, #32]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	372c      	adds	r7, #44	; 0x2c
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40021000 	.word	0x40021000
 8005d98:	007a1200 	.word	0x007a1200
 8005d9c:	0800a874 	.word	0x0800a874
 8005da0:	0800a884 	.word	0x0800a884
 8005da4:	003d0900 	.word	0x003d0900

08005da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dac:	4b03      	ldr	r3, [pc, #12]	; (8005dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8005dae:	681b      	ldr	r3, [r3, #0]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	2000010c 	.word	0x2000010c

08005dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005dc6:	f7ff ffef 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8005dca:	4601      	mov	r1, r0
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dd4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005dd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	fa92 f2a2 	rbit	r2, r2
 8005de0:	603a      	str	r2, [r7, #0]
  return result;
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	fab2 f282 	clz	r2, r2
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	40d3      	lsrs	r3, r2
 8005dec:	4a04      	ldr	r2, [pc, #16]	; (8005e00 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005dee:	5cd3      	ldrb	r3, [r2, r3]
 8005df0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005df4:	4618      	mov	r0, r3
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	0800a86c 	.word	0x0800a86c

08005e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005e0a:	f7ff ffcd 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8005e0e:	4601      	mov	r1, r0
 8005e10:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005e18:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005e1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	fa92 f2a2 	rbit	r2, r2
 8005e24:	603a      	str	r2, [r7, #0]
  return result;
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	fab2 f282 	clz	r2, r2
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	40d3      	lsrs	r3, r2
 8005e30:	4a04      	ldr	r2, [pc, #16]	; (8005e44 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005e32:	5cd3      	ldrb	r3, [r2, r3]
 8005e34:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40021000 	.word	0x40021000
 8005e44:	0800a86c 	.word	0x0800a86c

08005e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b092      	sub	sp, #72	; 0x48
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80d4 	beq.w	8006014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e6c:	4b4e      	ldr	r3, [pc, #312]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10e      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e78:	4b4b      	ldr	r3, [pc, #300]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	4a4a      	ldr	r2, [pc, #296]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e82:	61d3      	str	r3, [r2, #28]
 8005e84:	4b48      	ldr	r3, [pc, #288]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e96:	4b45      	ldr	r3, [pc, #276]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d118      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ea2:	4b42      	ldr	r3, [pc, #264]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a41      	ldr	r2, [pc, #260]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eae:	f7fd ffcb 	bl	8003e48 <HAL_GetTick>
 8005eb2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb6:	f7fd ffc7 	bl	8003e48 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b64      	cmp	r3, #100	; 0x64
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e169      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec8:	4b38      	ldr	r3, [pc, #224]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0f0      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ed4:	4b34      	ldr	r3, [pc, #208]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005edc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8084 	beq.w	8005fee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d07c      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ef4:	4b2c      	ldr	r3, [pc, #176]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005efe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	fa93 f3a3 	rbit	r3, r3
 8005f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f0e:	fab3 f383 	clz	r3, r3
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	4b26      	ldr	r3, [pc, #152]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	2301      	movs	r3, #1
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	fa93 f3a3 	rbit	r3, r3
 8005f2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f32:	fab3 f383 	clz	r3, r3
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	461a      	mov	r2, r3
 8005f42:	2300      	movs	r3, #0
 8005f44:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f46:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d04b      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f56:	f7fd ff77 	bl	8003e48 <HAL_GetTick>
 8005f5a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f5c:	e00a      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5e:	f7fd ff73 	bl	8003e48 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d901      	bls.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e113      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005f74:	2302      	movs	r3, #2
 8005f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7a:	fa93 f3a3 	rbit	r3, r3
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f80:	2302      	movs	r3, #2
 8005f82:	623b      	str	r3, [r7, #32]
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	fa93 f3a3 	rbit	r3, r3
 8005f8a:	61fb      	str	r3, [r7, #28]
  return result;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f8e:	fab3 f383 	clz	r3, r3
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	f043 0302 	orr.w	r3, r3, #2
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d108      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005fa2:	4b01      	ldr	r3, [pc, #4]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	e00d      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	40007000 	.word	0x40007000
 8005fb0:	10908100 	.word	0x10908100
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	fa93 f3a3 	rbit	r3, r3
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	4b78      	ldr	r3, [pc, #480]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	613a      	str	r2, [r7, #16]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	fa92 f2a2 	rbit	r2, r2
 8005fce:	60fa      	str	r2, [r7, #12]
  return result;
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	fab2 f282 	clz	r2, r2
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	f002 021f 	and.w	r2, r2, #31
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0b7      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005fee:	4b6d      	ldr	r3, [pc, #436]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	496a      	ldr	r1, [pc, #424]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006000:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006004:	2b01      	cmp	r3, #1
 8006006:	d105      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006008:	4b66      	ldr	r3, [pc, #408]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	4a65      	ldr	r2, [pc, #404]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800600e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006012:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006020:	4b60      	ldr	r3, [pc, #384]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	f023 0203 	bic.w	r2, r3, #3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	495d      	ldr	r1, [pc, #372]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800602e:	4313      	orrs	r3, r2
 8006030:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d008      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800603e:	4b59      	ldr	r3, [pc, #356]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	4956      	ldr	r1, [pc, #344]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800604c:	4313      	orrs	r3, r2
 800604e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800605c:	4b51      	ldr	r3, [pc, #324]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006060:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	494e      	ldr	r1, [pc, #312]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800606a:	4313      	orrs	r3, r2
 800606c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d008      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800607a:	4b4a      	ldr	r3, [pc, #296]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	f023 0210 	bic.w	r2, r3, #16
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	4947      	ldr	r1, [pc, #284]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006088:	4313      	orrs	r3, r2
 800608a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006098:	4b42      	ldr	r3, [pc, #264]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	493f      	ldr	r1, [pc, #252]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d008      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060b6:	4b3b      	ldr	r3, [pc, #236]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	f023 0220 	bic.w	r2, r3, #32
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	4938      	ldr	r1, [pc, #224]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060d4:	4b33      	ldr	r3, [pc, #204]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	4930      	ldr	r1, [pc, #192]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d008      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060f2:	4b2c      	ldr	r3, [pc, #176]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	4929      	ldr	r1, [pc, #164]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006100:	4313      	orrs	r3, r2
 8006102:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006110:	4b24      	ldr	r3, [pc, #144]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	4921      	ldr	r1, [pc, #132]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800611e:	4313      	orrs	r3, r2
 8006120:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612a:	2b00      	cmp	r3, #0
 800612c:	d008      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800612e:	4b1d      	ldr	r3, [pc, #116]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006132:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	491a      	ldr	r1, [pc, #104]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800613c:	4313      	orrs	r3, r2
 800613e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006148:	2b00      	cmp	r3, #0
 800614a:	d008      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800614c:	4b15      	ldr	r3, [pc, #84]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	4912      	ldr	r1, [pc, #72]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800615a:	4313      	orrs	r3, r2
 800615c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d008      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800616a:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	490b      	ldr	r1, [pc, #44]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006178:	4313      	orrs	r3, r2
 800617a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006188:	4b06      	ldr	r3, [pc, #24]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800618a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006194:	4903      	ldr	r1, [pc, #12]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006196:	4313      	orrs	r3, r2
 8006198:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3748      	adds	r7, #72	; 0x48
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40021000 	.word	0x40021000

080061a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e073      	b.n	80062a6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	7f5b      	ldrb	r3, [r3, #29]
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fd f982 	bl	80034d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	2b10      	cmp	r3, #16
 80061e6:	d055      	beq.n	8006294 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	22ca      	movs	r2, #202	; 0xca
 80061ee:	625a      	str	r2, [r3, #36]	; 0x24
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2253      	movs	r2, #83	; 0x53
 80061f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fa49 	bl	8006690 <RTC_EnterInitMode>
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d12c      	bne.n	8006262 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6899      	ldr	r1, [r3, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	68d2      	ldr	r2, [r2, #12]
 8006242:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6919      	ldr	r1, [r3, #16]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	041a      	lsls	r2, r3, #16
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fa50 	bl	80066fe <RTC_ExitInitMode>
 800625e:	4603      	mov	r3, r0
 8006260:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006262:	7bfb      	ldrb	r3, [r7, #15]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d110      	bne.n	800628a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006276:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	22ff      	movs	r2, #255	; 0xff
 8006290:	625a      	str	r2, [r3, #36]	; 0x24
 8006292:	e001      	b.n	8006298 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d102      	bne.n	80062a4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80062ae:	b590      	push	{r4, r7, lr}
 80062b0:	b087      	sub	sp, #28
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	7f1b      	ldrb	r3, [r3, #28]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_RTC_SetTime+0x1c>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e087      	b.n	80063da <HAL_RTC_SetTime+0x12c>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2202      	movs	r2, #2
 80062d4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d126      	bne.n	800632a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d102      	bne.n	80062f0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2200      	movs	r2, #0
 80062ee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 fa27 	bl	8006748 <RTC_ByteToBcd2>
 80062fa:	4603      	mov	r3, r0
 80062fc:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fa20 	bl	8006748 <RTC_ByteToBcd2>
 8006308:	4603      	mov	r3, r0
 800630a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800630c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	789b      	ldrb	r3, [r3, #2]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fa18 	bl	8006748 <RTC_ByteToBcd2>
 8006318:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800631a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	78db      	ldrb	r3, [r3, #3]
 8006322:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	e018      	b.n	800635c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d102      	bne.n	800633e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2200      	movs	r2, #0
 800633c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800634a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006350:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	78db      	ldrb	r3, [r3, #3]
 8006356:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	22ca      	movs	r2, #202	; 0xca
 8006362:	625a      	str	r2, [r3, #36]	; 0x24
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2253      	movs	r2, #83	; 0x53
 800636a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f98f 	bl	8006690 <RTC_EnterInitMode>
 8006372:	4603      	mov	r3, r0
 8006374:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006376:	7cfb      	ldrb	r3, [r7, #19]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d120      	bne.n	80063be <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006386:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800638a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800639a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6899      	ldr	r1, [r3, #8]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 f9a2 	bl	80066fe <RTC_ExitInitMode>
 80063ba:	4603      	mov	r3, r0
 80063bc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80063be:	7cfb      	ldrb	r3, [r7, #19]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	22ff      	movs	r2, #255	; 0xff
 80063d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	771a      	strb	r2, [r3, #28]

  return status;
 80063d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd90      	pop	{r4, r7, pc}

080063e2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b086      	sub	sp, #24
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006414:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006418:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	0c1b      	lsrs	r3, r3, #16
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006424:	b2da      	uxtb	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	0a1b      	lsrs	r3, r3, #8
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006434:	b2da      	uxtb	r2, r3
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006442:	b2da      	uxtb	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	0d9b      	lsrs	r3, r3, #22
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	b2da      	uxtb	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d11a      	bne.n	8006494 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f000 f98e 	bl	8006784 <RTC_Bcd2ToByte>
 8006468:	4603      	mov	r3, r0
 800646a:	461a      	mov	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	785b      	ldrb	r3, [r3, #1]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 f985 	bl	8006784 <RTC_Bcd2ToByte>
 800647a:	4603      	mov	r3, r0
 800647c:	461a      	mov	r2, r3
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	789b      	ldrb	r3, [r3, #2]
 8006486:	4618      	mov	r0, r3
 8006488:	f000 f97c 	bl	8006784 <RTC_Bcd2ToByte>
 800648c:	4603      	mov	r3, r0
 800648e:	461a      	mov	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800649e:	b590      	push	{r4, r7, lr}
 80064a0:	b087      	sub	sp, #28
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	7f1b      	ldrb	r3, [r3, #28]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_RTC_SetDate+0x1c>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e071      	b.n	800659e <HAL_RTC_SetDate+0x100>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2202      	movs	r2, #2
 80064c4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10e      	bne.n	80064ea <HAL_RTC_SetDate+0x4c>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	785b      	ldrb	r3, [r3, #1]
 80064d0:	f003 0310 	and.w	r3, r3, #16
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d008      	beq.n	80064ea <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	785b      	ldrb	r3, [r3, #1]
 80064dc:	f023 0310 	bic.w	r3, r3, #16
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	330a      	adds	r3, #10
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d11c      	bne.n	800652a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	78db      	ldrb	r3, [r3, #3]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 f927 	bl	8006748 <RTC_ByteToBcd2>
 80064fa:	4603      	mov	r3, r0
 80064fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	785b      	ldrb	r3, [r3, #1]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 f920 	bl	8006748 <RTC_ByteToBcd2>
 8006508:	4603      	mov	r3, r0
 800650a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800650c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	789b      	ldrb	r3, [r3, #2]
 8006512:	4618      	mov	r0, r3
 8006514:	f000 f918 	bl	8006748 <RTC_ByteToBcd2>
 8006518:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800651a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	e00e      	b.n	8006548 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	78db      	ldrb	r3, [r3, #3]
 800652e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006536:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800653c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	22ca      	movs	r2, #202	; 0xca
 800654e:	625a      	str	r2, [r3, #36]	; 0x24
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2253      	movs	r2, #83	; 0x53
 8006556:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 f899 	bl	8006690 <RTC_EnterInitMode>
 800655e:	4603      	mov	r3, r0
 8006560:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006562:	7cfb      	ldrb	r3, [r7, #19]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10c      	bne.n	8006582 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006572:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006576:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f8c0 	bl	80066fe <RTC_ExitInitMode>
 800657e:	4603      	mov	r3, r0
 8006580:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006582:	7cfb      	ldrb	r3, [r7, #19]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	22ff      	movs	r2, #255	; 0xff
 8006594:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	771a      	strb	r2, [r3, #28]

  return status;
 800659c:	7cfb      	ldrb	r3, [r7, #19]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd90      	pop	{r4, r7, pc}

080065a6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b086      	sub	sp, #24
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80065c4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	0c1b      	lsrs	r3, r3, #16
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	0a1b      	lsrs	r3, r3, #8
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	0b5b      	lsrs	r3, r3, #13
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d11a      	bne.n	800663a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	78db      	ldrb	r3, [r3, #3]
 8006608:	4618      	mov	r0, r3
 800660a:	f000 f8bb 	bl	8006784 <RTC_Bcd2ToByte>
 800660e:	4603      	mov	r3, r0
 8006610:	461a      	mov	r2, r3
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	785b      	ldrb	r3, [r3, #1]
 800661a:	4618      	mov	r0, r3
 800661c:	f000 f8b2 	bl	8006784 <RTC_Bcd2ToByte>
 8006620:	4603      	mov	r3, r0
 8006622:	461a      	mov	r2, r3
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	789b      	ldrb	r3, [r3, #2]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 f8a9 	bl	8006784 <RTC_Bcd2ToByte>
 8006632:	4603      	mov	r3, r0
 8006634:	461a      	mov	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a0d      	ldr	r2, [pc, #52]	; (800668c <HAL_RTC_WaitForSynchro+0x48>)
 8006656:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006658:	f7fd fbf6 	bl	8003e48 <HAL_GetTick>
 800665c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800665e:	e009      	b.n	8006674 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006660:	f7fd fbf2 	bl	8003e48 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800666e:	d901      	bls.n	8006674 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e007      	b.n	8006684 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0ee      	beq.n	8006660 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	0001ff5f 	.word	0x0001ff5f

08006690 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d122      	bne.n	80066f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80066bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066be:	f7fd fbc3 	bl	8003e48 <HAL_GetTick>
 80066c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80066c4:	e00c      	b.n	80066e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066c6:	f7fd fbbf 	bl	8003e48 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066d4:	d904      	bls.n	80066e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2204      	movs	r2, #4
 80066da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <RTC_EnterInitMode+0x64>
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d1e8      	bne.n	80066c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b084      	sub	sp, #16
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006718:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ff8b 	bl	8006644 <HAL_RTC_WaitForSynchro>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2204      	movs	r2, #4
 8006738:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006756:	e005      	b.n	8006764 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3301      	adds	r3, #1
 800675c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	3b0a      	subs	r3, #10
 8006762:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	2b09      	cmp	r3, #9
 8006768:	d8f6      	bhi.n	8006758 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	b2da      	uxtb	r2, r3
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	4313      	orrs	r3, r2
 8006776:	b2db      	uxtb	r3, r3
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	091b      	lsrs	r3, r3, #4
 8006796:	b2db      	uxtb	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	4413      	add	r3, r2
 80067b2:	b2db      	uxtb	r3, r3
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e09d      	b.n	800690e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d108      	bne.n	80067ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067e2:	d009      	beq.n	80067f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	61da      	str	r2, [r3, #28]
 80067ea:	e005      	b.n	80067f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d106      	bne.n	8006818 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fc fe86 	bl	8003524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800682e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006838:	d902      	bls.n	8006840 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	e002      	b.n	8006846 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006844:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800684e:	d007      	beq.n	8006860 <HAL_SPI_Init+0xa0>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006858:	d002      	beq.n	8006860 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	431a      	orrs	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	431a      	orrs	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800688e:	431a      	orrs	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a2:	ea42 0103 	orr.w	r1, r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	0c1b      	lsrs	r3, r3, #16
 80068bc:	f003 0204 	and.w	r2, r3, #4
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ce:	f003 0308 	and.w	r3, r3, #8
 80068d2:	431a      	orrs	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068dc:	ea42 0103 	orr.w	r1, r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69da      	ldr	r2, [r3, #28]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e049      	b.n	80069bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d106      	bne.n	8006942 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7fc fe33 	bl	80035a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2202      	movs	r2, #2
 8006946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3304      	adds	r3, #4
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f000 fd27 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d001      	beq.n	80069dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e04a      	b.n	8006a72 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0201 	orr.w	r2, r2, #1
 80069f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a21      	ldr	r2, [pc, #132]	; (8006a80 <HAL_TIM_Base_Start_IT+0xbc>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d018      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x6c>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a06:	d013      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x6c>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1d      	ldr	r2, [pc, #116]	; (8006a84 <HAL_TIM_Base_Start_IT+0xc0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00e      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x6c>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1c      	ldr	r2, [pc, #112]	; (8006a88 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d009      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x6c>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1a      	ldr	r2, [pc, #104]	; (8006a8c <HAL_TIM_Base_Start_IT+0xc8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d004      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x6c>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a19      	ldr	r2, [pc, #100]	; (8006a90 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d115      	bne.n	8006a5c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	4b17      	ldr	r3, [pc, #92]	; (8006a94 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b06      	cmp	r3, #6
 8006a40:	d015      	beq.n	8006a6e <HAL_TIM_Base_Start_IT+0xaa>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a48:	d011      	beq.n	8006a6e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0201 	orr.w	r2, r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5a:	e008      	b.n	8006a6e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0201 	orr.w	r2, r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	e000      	b.n	8006a70 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40012c00 	.word	0x40012c00
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40013400 	.word	0x40013400
 8006a90:	40014000 	.word	0x40014000
 8006a94:	00010007 	.word	0x00010007

08006a98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e049      	b.n	8006b3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d106      	bne.n	8006ac4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f841 	bl	8006b46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f000 fc66 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
	...

08006b5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d109      	bne.n	8006b80 <HAL_TIM_PWM_Start+0x24>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	bf14      	ite	ne
 8006b78:	2301      	movne	r3, #1
 8006b7a:	2300      	moveq	r3, #0
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	e03c      	b.n	8006bfa <HAL_TIM_PWM_Start+0x9e>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d109      	bne.n	8006b9a <HAL_TIM_PWM_Start+0x3e>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	bf14      	ite	ne
 8006b92:	2301      	movne	r3, #1
 8006b94:	2300      	moveq	r3, #0
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	e02f      	b.n	8006bfa <HAL_TIM_PWM_Start+0x9e>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d109      	bne.n	8006bb4 <HAL_TIM_PWM_Start+0x58>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	bf14      	ite	ne
 8006bac:	2301      	movne	r3, #1
 8006bae:	2300      	moveq	r3, #0
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	e022      	b.n	8006bfa <HAL_TIM_PWM_Start+0x9e>
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b0c      	cmp	r3, #12
 8006bb8:	d109      	bne.n	8006bce <HAL_TIM_PWM_Start+0x72>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	bf14      	ite	ne
 8006bc6:	2301      	movne	r3, #1
 8006bc8:	2300      	moveq	r3, #0
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	e015      	b.n	8006bfa <HAL_TIM_PWM_Start+0x9e>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b10      	cmp	r3, #16
 8006bd2:	d109      	bne.n	8006be8 <HAL_TIM_PWM_Start+0x8c>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	bf14      	ite	ne
 8006be0:	2301      	movne	r3, #1
 8006be2:	2300      	moveq	r3, #0
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	e008      	b.n	8006bfa <HAL_TIM_PWM_Start+0x9e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	bf14      	ite	ne
 8006bf4:	2301      	movne	r3, #1
 8006bf6:	2300      	moveq	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e097      	b.n	8006d32 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <HAL_TIM_PWM_Start+0xb6>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c10:	e023      	b.n	8006c5a <HAL_TIM_PWM_Start+0xfe>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d104      	bne.n	8006c22 <HAL_TIM_PWM_Start+0xc6>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c20:	e01b      	b.n	8006c5a <HAL_TIM_PWM_Start+0xfe>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d104      	bne.n	8006c32 <HAL_TIM_PWM_Start+0xd6>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c30:	e013      	b.n	8006c5a <HAL_TIM_PWM_Start+0xfe>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b0c      	cmp	r3, #12
 8006c36:	d104      	bne.n	8006c42 <HAL_TIM_PWM_Start+0xe6>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c40:	e00b      	b.n	8006c5a <HAL_TIM_PWM_Start+0xfe>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b10      	cmp	r3, #16
 8006c46:	d104      	bne.n	8006c52 <HAL_TIM_PWM_Start+0xf6>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c50:	e003      	b.n	8006c5a <HAL_TIM_PWM_Start+0xfe>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2202      	movs	r2, #2
 8006c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 ffa0 	bl	8007ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a33      	ldr	r2, [pc, #204]	; (8006d3c <HAL_TIM_PWM_Start+0x1e0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d013      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x13e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a32      	ldr	r2, [pc, #200]	; (8006d40 <HAL_TIM_PWM_Start+0x1e4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d00e      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x13e>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a30      	ldr	r2, [pc, #192]	; (8006d44 <HAL_TIM_PWM_Start+0x1e8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d009      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x13e>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a2f      	ldr	r2, [pc, #188]	; (8006d48 <HAL_TIM_PWM_Start+0x1ec>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d004      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x13e>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a2d      	ldr	r2, [pc, #180]	; (8006d4c <HAL_TIM_PWM_Start+0x1f0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d101      	bne.n	8006c9e <HAL_TIM_PWM_Start+0x142>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e000      	b.n	8006ca0 <HAL_TIM_PWM_Start+0x144>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d007      	beq.n	8006cb4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a20      	ldr	r2, [pc, #128]	; (8006d3c <HAL_TIM_PWM_Start+0x1e0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d018      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x194>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc6:	d013      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x194>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a20      	ldr	r2, [pc, #128]	; (8006d50 <HAL_TIM_PWM_Start+0x1f4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d00e      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x194>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1f      	ldr	r2, [pc, #124]	; (8006d54 <HAL_TIM_PWM_Start+0x1f8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d009      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x194>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a17      	ldr	r2, [pc, #92]	; (8006d40 <HAL_TIM_PWM_Start+0x1e4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d004      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x194>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a16      	ldr	r2, [pc, #88]	; (8006d44 <HAL_TIM_PWM_Start+0x1e8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d115      	bne.n	8006d1c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	4b18      	ldr	r3, [pc, #96]	; (8006d58 <HAL_TIM_PWM_Start+0x1fc>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b06      	cmp	r3, #6
 8006d00:	d015      	beq.n	8006d2e <HAL_TIM_PWM_Start+0x1d2>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d08:	d011      	beq.n	8006d2e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0201 	orr.w	r2, r2, #1
 8006d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1a:	e008      	b.n	8006d2e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e000      	b.n	8006d30 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40012c00 	.word	0x40012c00
 8006d40:	40013400 	.word	0x40013400
 8006d44:	40014000 	.word	0x40014000
 8006d48:	40014400 	.word	0x40014400
 8006d4c:	40014800 	.word	0x40014800
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40000800 	.word	0x40000800
 8006d58:	00010007 	.word	0x00010007

08006d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d122      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d11b      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f06f 0202 	mvn.w	r2, #2
 8006d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fae3 	bl	800736a <HAL_TIM_IC_CaptureCallback>
 8006da4:	e005      	b.n	8006db2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fad5 	bl	8007356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fae6 	bl	800737e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f003 0304 	and.w	r3, r3, #4
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d122      	bne.n	8006e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d11b      	bne.n	8006e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f06f 0204 	mvn.w	r2, #4
 8006ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fab9 	bl	800736a <HAL_TIM_IC_CaptureCallback>
 8006df8:	e005      	b.n	8006e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 faab 	bl	8007356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fabc 	bl	800737e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	f003 0308 	and.w	r3, r3, #8
 8006e16:	2b08      	cmp	r3, #8
 8006e18:	d122      	bne.n	8006e60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d11b      	bne.n	8006e60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f06f 0208 	mvn.w	r2, #8
 8006e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2204      	movs	r2, #4
 8006e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa8f 	bl	800736a <HAL_TIM_IC_CaptureCallback>
 8006e4c:	e005      	b.n	8006e5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fa81 	bl	8007356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fa92 	bl	800737e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b10      	cmp	r3, #16
 8006e6c:	d122      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	2b10      	cmp	r3, #16
 8006e7a:	d11b      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f06f 0210 	mvn.w	r2, #16
 8006e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2208      	movs	r2, #8
 8006e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa65 	bl	800736a <HAL_TIM_IC_CaptureCallback>
 8006ea0:	e005      	b.n	8006eae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa57 	bl	8007356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fa68 	bl	800737e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d10e      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d107      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0201 	mvn.w	r2, #1
 8006ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fb f952 	bl	8002184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eea:	2b80      	cmp	r3, #128	; 0x80
 8006eec:	d10e      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef8:	2b80      	cmp	r3, #128	; 0x80
 8006efa:	d107      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fefe 	bl	8007d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1a:	d10e      	bne.n	8006f3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f26:	2b80      	cmp	r3, #128	; 0x80
 8006f28:	d107      	bne.n	8006f3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fef1 	bl	8007d1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f44:	2b40      	cmp	r3, #64	; 0x40
 8006f46:	d10e      	bne.n	8006f66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d107      	bne.n	8006f66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fa16 	bl	8007392 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	d10e      	bne.n	8006f92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	d107      	bne.n	8006f92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f06f 0220 	mvn.w	r2, #32
 8006f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 feb1 	bl	8007cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e0ff      	b.n	80071ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b14      	cmp	r3, #20
 8006fc6:	f200 80f0 	bhi.w	80071aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006fca:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08007025 	.word	0x08007025
 8006fd4:	080071ab 	.word	0x080071ab
 8006fd8:	080071ab 	.word	0x080071ab
 8006fdc:	080071ab 	.word	0x080071ab
 8006fe0:	08007065 	.word	0x08007065
 8006fe4:	080071ab 	.word	0x080071ab
 8006fe8:	080071ab 	.word	0x080071ab
 8006fec:	080071ab 	.word	0x080071ab
 8006ff0:	080070a7 	.word	0x080070a7
 8006ff4:	080071ab 	.word	0x080071ab
 8006ff8:	080071ab 	.word	0x080071ab
 8006ffc:	080071ab 	.word	0x080071ab
 8007000:	080070e7 	.word	0x080070e7
 8007004:	080071ab 	.word	0x080071ab
 8007008:	080071ab 	.word	0x080071ab
 800700c:	080071ab 	.word	0x080071ab
 8007010:	08007129 	.word	0x08007129
 8007014:	080071ab 	.word	0x080071ab
 8007018:	080071ab 	.word	0x080071ab
 800701c:	080071ab 	.word	0x080071ab
 8007020:	08007169 	.word	0x08007169
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68b9      	ldr	r1, [r7, #8]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 fa4c 	bl	80074c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699a      	ldr	r2, [r3, #24]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0208 	orr.w	r2, r2, #8
 800703e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0204 	bic.w	r2, r2, #4
 800704e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6999      	ldr	r1, [r3, #24]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	691a      	ldr	r2, [r3, #16]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	619a      	str	r2, [r3, #24]
      break;
 8007062:	e0a5      	b.n	80071b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68b9      	ldr	r1, [r7, #8]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fabc 	bl	80075e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800707e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699a      	ldr	r2, [r3, #24]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800708e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6999      	ldr	r1, [r3, #24]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	021a      	lsls	r2, r3, #8
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	619a      	str	r2, [r3, #24]
      break;
 80070a4:	e084      	b.n	80071b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fb25 	bl	80076fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0208 	orr.w	r2, r2, #8
 80070c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69da      	ldr	r2, [r3, #28]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0204 	bic.w	r2, r2, #4
 80070d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69d9      	ldr	r1, [r3, #28]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	61da      	str	r2, [r3, #28]
      break;
 80070e4:	e064      	b.n	80071b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fb8d 	bl	800780c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69da      	ldr	r2, [r3, #28]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69da      	ldr	r2, [r3, #28]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69d9      	ldr	r1, [r3, #28]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	021a      	lsls	r2, r3, #8
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	61da      	str	r2, [r3, #28]
      break;
 8007126:	e043      	b.n	80071b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	4618      	mov	r0, r3
 8007130:	f000 fbd6 	bl	80078e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f042 0208 	orr.w	r2, r2, #8
 8007142:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0204 	bic.w	r2, r2, #4
 8007152:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	691a      	ldr	r2, [r3, #16]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007166:	e023      	b.n	80071b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fc1a 	bl	80079a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007182:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007192:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	021a      	lsls	r2, r3, #8
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80071a8:	e002      	b.n	80071b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	75fb      	strb	r3, [r7, #23]
      break;
 80071ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop

080071c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_TIM_ConfigClockSource+0x1c>
 80071dc:	2302      	movs	r3, #2
 80071de:	e0b6      	b.n	800734e <HAL_TIM_ConfigClockSource+0x18a>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800720a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800721c:	d03e      	beq.n	800729c <HAL_TIM_ConfigClockSource+0xd8>
 800721e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007222:	f200 8087 	bhi.w	8007334 <HAL_TIM_ConfigClockSource+0x170>
 8007226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800722a:	f000 8086 	beq.w	800733a <HAL_TIM_ConfigClockSource+0x176>
 800722e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007232:	d87f      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x170>
 8007234:	2b70      	cmp	r3, #112	; 0x70
 8007236:	d01a      	beq.n	800726e <HAL_TIM_ConfigClockSource+0xaa>
 8007238:	2b70      	cmp	r3, #112	; 0x70
 800723a:	d87b      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x170>
 800723c:	2b60      	cmp	r3, #96	; 0x60
 800723e:	d050      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0x11e>
 8007240:	2b60      	cmp	r3, #96	; 0x60
 8007242:	d877      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x170>
 8007244:	2b50      	cmp	r3, #80	; 0x50
 8007246:	d03c      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0xfe>
 8007248:	2b50      	cmp	r3, #80	; 0x50
 800724a:	d873      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x170>
 800724c:	2b40      	cmp	r3, #64	; 0x40
 800724e:	d058      	beq.n	8007302 <HAL_TIM_ConfigClockSource+0x13e>
 8007250:	2b40      	cmp	r3, #64	; 0x40
 8007252:	d86f      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x170>
 8007254:	2b30      	cmp	r3, #48	; 0x30
 8007256:	d064      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0x15e>
 8007258:	2b30      	cmp	r3, #48	; 0x30
 800725a:	d86b      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x170>
 800725c:	2b20      	cmp	r3, #32
 800725e:	d060      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0x15e>
 8007260:	2b20      	cmp	r3, #32
 8007262:	d867      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x170>
 8007264:	2b00      	cmp	r3, #0
 8007266:	d05c      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0x15e>
 8007268:	2b10      	cmp	r3, #16
 800726a:	d05a      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0x15e>
 800726c:	e062      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6818      	ldr	r0, [r3, #0]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	6899      	ldr	r1, [r3, #8]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f000 fc73 	bl	8007b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007290:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	609a      	str	r2, [r3, #8]
      break;
 800729a:	e04f      	b.n	800733c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6818      	ldr	r0, [r3, #0]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	6899      	ldr	r1, [r3, #8]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f000 fc5c 	bl	8007b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689a      	ldr	r2, [r3, #8]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072be:	609a      	str	r2, [r3, #8]
      break;
 80072c0:	e03c      	b.n	800733c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6818      	ldr	r0, [r3, #0]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	6859      	ldr	r1, [r3, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	461a      	mov	r2, r3
 80072d0:	f000 fbd0 	bl	8007a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2150      	movs	r1, #80	; 0x50
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fc29 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 80072e0:	e02c      	b.n	800733c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	6859      	ldr	r1, [r3, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f000 fbef 	bl	8007ad2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2160      	movs	r1, #96	; 0x60
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fc19 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 8007300:	e01c      	b.n	800733c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6859      	ldr	r1, [r3, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	461a      	mov	r2, r3
 8007310:	f000 fbb0 	bl	8007a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2140      	movs	r1, #64	; 0x40
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fc09 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 8007320:	e00c      	b.n	800733c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4619      	mov	r1, r3
 800732c:	4610      	mov	r0, r2
 800732e:	f000 fc00 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 8007332:	e003      	b.n	800733c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	73fb      	strb	r3, [r7, #15]
      break;
 8007338:	e000      	b.n	800733c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800733a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800735e:	bf00      	nop
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
	...

080073a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a3c      	ldr	r2, [pc, #240]	; (80074ac <TIM_Base_SetConfig+0x104>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d00f      	beq.n	80073e0 <TIM_Base_SetConfig+0x38>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c6:	d00b      	beq.n	80073e0 <TIM_Base_SetConfig+0x38>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a39      	ldr	r2, [pc, #228]	; (80074b0 <TIM_Base_SetConfig+0x108>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d007      	beq.n	80073e0 <TIM_Base_SetConfig+0x38>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a38      	ldr	r2, [pc, #224]	; (80074b4 <TIM_Base_SetConfig+0x10c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d003      	beq.n	80073e0 <TIM_Base_SetConfig+0x38>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a37      	ldr	r2, [pc, #220]	; (80074b8 <TIM_Base_SetConfig+0x110>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d108      	bne.n	80073f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a2d      	ldr	r2, [pc, #180]	; (80074ac <TIM_Base_SetConfig+0x104>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d01b      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007400:	d017      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a2a      	ldr	r2, [pc, #168]	; (80074b0 <TIM_Base_SetConfig+0x108>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a29      	ldr	r2, [pc, #164]	; (80074b4 <TIM_Base_SetConfig+0x10c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00f      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a28      	ldr	r2, [pc, #160]	; (80074b8 <TIM_Base_SetConfig+0x110>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00b      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a27      	ldr	r2, [pc, #156]	; (80074bc <TIM_Base_SetConfig+0x114>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d007      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a26      	ldr	r2, [pc, #152]	; (80074c0 <TIM_Base_SetConfig+0x118>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d003      	beq.n	8007432 <TIM_Base_SetConfig+0x8a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a25      	ldr	r2, [pc, #148]	; (80074c4 <TIM_Base_SetConfig+0x11c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d108      	bne.n	8007444 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a10      	ldr	r2, [pc, #64]	; (80074ac <TIM_Base_SetConfig+0x104>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00f      	beq.n	8007490 <TIM_Base_SetConfig+0xe8>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a11      	ldr	r2, [pc, #68]	; (80074b8 <TIM_Base_SetConfig+0x110>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d00b      	beq.n	8007490 <TIM_Base_SetConfig+0xe8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a10      	ldr	r2, [pc, #64]	; (80074bc <TIM_Base_SetConfig+0x114>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d007      	beq.n	8007490 <TIM_Base_SetConfig+0xe8>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a0f      	ldr	r2, [pc, #60]	; (80074c0 <TIM_Base_SetConfig+0x118>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d003      	beq.n	8007490 <TIM_Base_SetConfig+0xe8>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a0e      	ldr	r2, [pc, #56]	; (80074c4 <TIM_Base_SetConfig+0x11c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d103      	bne.n	8007498 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	691a      	ldr	r2, [r3, #16]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	615a      	str	r2, [r3, #20]
}
 800749e:	bf00      	nop
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	40012c00 	.word	0x40012c00
 80074b0:	40000400 	.word	0x40000400
 80074b4:	40000800 	.word	0x40000800
 80074b8:	40013400 	.word	0x40013400
 80074bc:	40014000 	.word	0x40014000
 80074c0:	40014400 	.word	0x40014400
 80074c4:	40014800 	.word	0x40014800

080074c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	f023 0201 	bic.w	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 0303 	bic.w	r3, r3, #3
 8007502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f023 0302 	bic.w	r3, r3, #2
 8007514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	4313      	orrs	r3, r2
 800751e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a2c      	ldr	r2, [pc, #176]	; (80075d4 <TIM_OC1_SetConfig+0x10c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d00f      	beq.n	8007548 <TIM_OC1_SetConfig+0x80>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a2b      	ldr	r2, [pc, #172]	; (80075d8 <TIM_OC1_SetConfig+0x110>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00b      	beq.n	8007548 <TIM_OC1_SetConfig+0x80>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a2a      	ldr	r2, [pc, #168]	; (80075dc <TIM_OC1_SetConfig+0x114>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d007      	beq.n	8007548 <TIM_OC1_SetConfig+0x80>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a29      	ldr	r2, [pc, #164]	; (80075e0 <TIM_OC1_SetConfig+0x118>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d003      	beq.n	8007548 <TIM_OC1_SetConfig+0x80>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a28      	ldr	r2, [pc, #160]	; (80075e4 <TIM_OC1_SetConfig+0x11c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d10c      	bne.n	8007562 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f023 0308 	bic.w	r3, r3, #8
 800754e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	4313      	orrs	r3, r2
 8007558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f023 0304 	bic.w	r3, r3, #4
 8007560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a1b      	ldr	r2, [pc, #108]	; (80075d4 <TIM_OC1_SetConfig+0x10c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00f      	beq.n	800758a <TIM_OC1_SetConfig+0xc2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a1a      	ldr	r2, [pc, #104]	; (80075d8 <TIM_OC1_SetConfig+0x110>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00b      	beq.n	800758a <TIM_OC1_SetConfig+0xc2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a19      	ldr	r2, [pc, #100]	; (80075dc <TIM_OC1_SetConfig+0x114>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d007      	beq.n	800758a <TIM_OC1_SetConfig+0xc2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a18      	ldr	r2, [pc, #96]	; (80075e0 <TIM_OC1_SetConfig+0x118>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d003      	beq.n	800758a <TIM_OC1_SetConfig+0xc2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a17      	ldr	r2, [pc, #92]	; (80075e4 <TIM_OC1_SetConfig+0x11c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d111      	bne.n	80075ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	621a      	str	r2, [r3, #32]
}
 80075c8:	bf00      	nop
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	40012c00 	.word	0x40012c00
 80075d8:	40013400 	.word	0x40013400
 80075dc:	40014000 	.word	0x40014000
 80075e0:	40014400 	.word	0x40014400
 80075e4:	40014800 	.word	0x40014800

080075e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f023 0210 	bic.w	r2, r3, #16
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800761a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4313      	orrs	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f023 0320 	bic.w	r3, r3, #32
 8007636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	4313      	orrs	r3, r2
 8007642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a28      	ldr	r2, [pc, #160]	; (80076e8 <TIM_OC2_SetConfig+0x100>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d003      	beq.n	8007654 <TIM_OC2_SetConfig+0x6c>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a27      	ldr	r2, [pc, #156]	; (80076ec <TIM_OC2_SetConfig+0x104>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d10d      	bne.n	8007670 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800765a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800766e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a1d      	ldr	r2, [pc, #116]	; (80076e8 <TIM_OC2_SetConfig+0x100>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d00f      	beq.n	8007698 <TIM_OC2_SetConfig+0xb0>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a1c      	ldr	r2, [pc, #112]	; (80076ec <TIM_OC2_SetConfig+0x104>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00b      	beq.n	8007698 <TIM_OC2_SetConfig+0xb0>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a1b      	ldr	r2, [pc, #108]	; (80076f0 <TIM_OC2_SetConfig+0x108>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d007      	beq.n	8007698 <TIM_OC2_SetConfig+0xb0>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a1a      	ldr	r2, [pc, #104]	; (80076f4 <TIM_OC2_SetConfig+0x10c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d003      	beq.n	8007698 <TIM_OC2_SetConfig+0xb0>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a19      	ldr	r2, [pc, #100]	; (80076f8 <TIM_OC2_SetConfig+0x110>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d113      	bne.n	80076c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800769e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076a6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4313      	orrs	r3, r2
 80076be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	621a      	str	r2, [r3, #32]
}
 80076da:	bf00      	nop
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	40012c00 	.word	0x40012c00
 80076ec:	40013400 	.word	0x40013400
 80076f0:	40014000 	.word	0x40014000
 80076f4:	40014400 	.word	0x40014400
 80076f8:	40014800 	.word	0x40014800

080076fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800772a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0303 	bic.w	r3, r3, #3
 8007736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	021b      	lsls	r3, r3, #8
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a27      	ldr	r2, [pc, #156]	; (80077f8 <TIM_OC3_SetConfig+0xfc>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d003      	beq.n	8007766 <TIM_OC3_SetConfig+0x6a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a26      	ldr	r2, [pc, #152]	; (80077fc <TIM_OC3_SetConfig+0x100>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d10d      	bne.n	8007782 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800776c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007780:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a1c      	ldr	r2, [pc, #112]	; (80077f8 <TIM_OC3_SetConfig+0xfc>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00f      	beq.n	80077aa <TIM_OC3_SetConfig+0xae>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a1b      	ldr	r2, [pc, #108]	; (80077fc <TIM_OC3_SetConfig+0x100>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d00b      	beq.n	80077aa <TIM_OC3_SetConfig+0xae>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a1a      	ldr	r2, [pc, #104]	; (8007800 <TIM_OC3_SetConfig+0x104>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d007      	beq.n	80077aa <TIM_OC3_SetConfig+0xae>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a19      	ldr	r2, [pc, #100]	; (8007804 <TIM_OC3_SetConfig+0x108>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d003      	beq.n	80077aa <TIM_OC3_SetConfig+0xae>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a18      	ldr	r2, [pc, #96]	; (8007808 <TIM_OC3_SetConfig+0x10c>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d113      	bne.n	80077d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	011b      	lsls	r3, r3, #4
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	621a      	str	r2, [r3, #32]
}
 80077ec:	bf00      	nop
 80077ee:	371c      	adds	r7, #28
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	40012c00 	.word	0x40012c00
 80077fc:	40013400 	.word	0x40013400
 8007800:	40014000 	.word	0x40014000
 8007804:	40014400 	.word	0x40014400
 8007808:	40014800 	.word	0x40014800

0800780c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800783a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800783e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	4313      	orrs	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800785a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	031b      	lsls	r3, r3, #12
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a18      	ldr	r2, [pc, #96]	; (80078cc <TIM_OC4_SetConfig+0xc0>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d00f      	beq.n	8007890 <TIM_OC4_SetConfig+0x84>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a17      	ldr	r2, [pc, #92]	; (80078d0 <TIM_OC4_SetConfig+0xc4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00b      	beq.n	8007890 <TIM_OC4_SetConfig+0x84>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a16      	ldr	r2, [pc, #88]	; (80078d4 <TIM_OC4_SetConfig+0xc8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d007      	beq.n	8007890 <TIM_OC4_SetConfig+0x84>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a15      	ldr	r2, [pc, #84]	; (80078d8 <TIM_OC4_SetConfig+0xcc>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d003      	beq.n	8007890 <TIM_OC4_SetConfig+0x84>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a14      	ldr	r2, [pc, #80]	; (80078dc <TIM_OC4_SetConfig+0xd0>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d109      	bne.n	80078a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	019b      	lsls	r3, r3, #6
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	621a      	str	r2, [r3, #32]
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40012c00 	.word	0x40012c00
 80078d0:	40013400 	.word	0x40013400
 80078d4:	40014000 	.word	0x40014000
 80078d8:	40014400 	.word	0x40014400
 80078dc:	40014800 	.word	0x40014800

080078e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800790e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	4313      	orrs	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007924:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	041b      	lsls	r3, r3, #16
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a17      	ldr	r2, [pc, #92]	; (8007994 <TIM_OC5_SetConfig+0xb4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00f      	beq.n	800795a <TIM_OC5_SetConfig+0x7a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a16      	ldr	r2, [pc, #88]	; (8007998 <TIM_OC5_SetConfig+0xb8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d00b      	beq.n	800795a <TIM_OC5_SetConfig+0x7a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a15      	ldr	r2, [pc, #84]	; (800799c <TIM_OC5_SetConfig+0xbc>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d007      	beq.n	800795a <TIM_OC5_SetConfig+0x7a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a14      	ldr	r2, [pc, #80]	; (80079a0 <TIM_OC5_SetConfig+0xc0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d003      	beq.n	800795a <TIM_OC5_SetConfig+0x7a>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <TIM_OC5_SetConfig+0xc4>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d109      	bne.n	800796e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	021b      	lsls	r3, r3, #8
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	4313      	orrs	r3, r2
 800796c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	621a      	str	r2, [r3, #32]
}
 8007988:	bf00      	nop
 800798a:	371c      	adds	r7, #28
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	40012c00 	.word	0x40012c00
 8007998:	40013400 	.word	0x40013400
 800799c:	40014000 	.word	0x40014000
 80079a0:	40014400 	.word	0x40014400
 80079a4:	40014800 	.word	0x40014800

080079a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	021b      	lsls	r3, r3, #8
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	051b      	lsls	r3, r3, #20
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a18      	ldr	r2, [pc, #96]	; (8007a60 <TIM_OC6_SetConfig+0xb8>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d00f      	beq.n	8007a24 <TIM_OC6_SetConfig+0x7c>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <TIM_OC6_SetConfig+0xbc>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d00b      	beq.n	8007a24 <TIM_OC6_SetConfig+0x7c>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a16      	ldr	r2, [pc, #88]	; (8007a68 <TIM_OC6_SetConfig+0xc0>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d007      	beq.n	8007a24 <TIM_OC6_SetConfig+0x7c>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a15      	ldr	r2, [pc, #84]	; (8007a6c <TIM_OC6_SetConfig+0xc4>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d003      	beq.n	8007a24 <TIM_OC6_SetConfig+0x7c>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a14      	ldr	r2, [pc, #80]	; (8007a70 <TIM_OC6_SetConfig+0xc8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d109      	bne.n	8007a38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	029b      	lsls	r3, r3, #10
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	621a      	str	r2, [r3, #32]
}
 8007a52:	bf00      	nop
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	40012c00 	.word	0x40012c00
 8007a64:	40013400 	.word	0x40013400
 8007a68:	40014000 	.word	0x40014000
 8007a6c:	40014400 	.word	0x40014400
 8007a70:	40014800 	.word	0x40014800

08007a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b087      	sub	sp, #28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f023 0201 	bic.w	r2, r3, #1
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f023 030a 	bic.w	r3, r3, #10
 8007ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	621a      	str	r2, [r3, #32]
}
 8007ac6:	bf00      	nop
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b087      	sub	sp, #28
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0210 	bic.w	r2, r3, #16
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	031b      	lsls	r3, r3, #12
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	621a      	str	r2, [r3, #32]
}
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b085      	sub	sp, #20
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f043 0307 	orr.w	r3, r3, #7
 8007b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	609a      	str	r2, [r3, #8]
}
 8007b5c:	bf00      	nop
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	021a      	lsls	r2, r3, #8
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	609a      	str	r2, [r3, #8]
}
 8007b9c:	bf00      	nop
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f003 031f 	and.w	r3, r3, #31
 8007bba:	2201      	movs	r2, #1
 8007bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6a1a      	ldr	r2, [r3, #32]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	43db      	mvns	r3, r3
 8007bca:	401a      	ands	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a1a      	ldr	r2, [r3, #32]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f003 031f 	and.w	r3, r3, #31
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8007be0:	431a      	orrs	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	621a      	str	r2, [r3, #32]
}
 8007be6:	bf00      	nop
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
	...

08007bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d101      	bne.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e063      	b.n	8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a2b      	ldr	r2, [pc, #172]	; (8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d004      	beq.n	8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a2a      	ldr	r2, [pc, #168]	; (8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d108      	bne.n	8007c52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a1b      	ldr	r2, [pc, #108]	; (8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d018      	beq.n	8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c7e:	d013      	beq.n	8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a18      	ldr	r2, [pc, #96]	; (8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d00e      	beq.n	8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a17      	ldr	r2, [pc, #92]	; (8007cec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d009      	beq.n	8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a12      	ldr	r2, [pc, #72]	; (8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d004      	beq.n	8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a13      	ldr	r2, [pc, #76]	; (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d10c      	bne.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	40012c00 	.word	0x40012c00
 8007ce4:	40013400 	.word	0x40013400
 8007ce8:	40000400 	.word	0x40000400
 8007cec:	40000800 	.word	0x40000800
 8007cf0:	40014000 	.word	0x40014000

08007cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d101      	bne.n	8007d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e040      	b.n	8007dc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d106      	bne.n	8007d58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7fb fcb4 	bl	80036c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2224      	movs	r2, #36	; 0x24
 8007d5c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0201 	bic.w	r2, r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fb76 	bl	8008460 <UART_SetConfig>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d101      	bne.n	8007d7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e022      	b.n	8007dc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d002      	beq.n	8007d8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fd3e 	bl	8008808 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f042 0201 	orr.w	r2, r2, #1
 8007dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fdc5 	bl	800894c <UART_CheckIdleState>
 8007dc2:	4603      	mov	r3, r0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08a      	sub	sp, #40	; 0x28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007de0:	2b20      	cmp	r3, #32
 8007de2:	d132      	bne.n	8007e4a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <HAL_UART_Receive_IT+0x24>
 8007dea:	88fb      	ldrh	r3, [r7, #6]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e02b      	b.n	8007e4c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d018      	beq.n	8007e3a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	613b      	str	r3, [r7, #16]
   return(result);
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	623b      	str	r3, [r7, #32]
 8007e28:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	69f9      	ldr	r1, [r7, #28]
 8007e2c:	6a3a      	ldr	r2, [r7, #32]
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e6      	bne.n	8007e08 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e3a:	88fb      	ldrh	r3, [r7, #6]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 fe93 	bl	8008b6c <UART_Start_Receive_IT>
 8007e46:	4603      	mov	r3, r0
 8007e48:	e000      	b.n	8007e4c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007e4a:	2302      	movs	r3, #2
  }
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3728      	adds	r7, #40	; 0x28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b0ba      	sub	sp, #232	; 0xe8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007e7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e82:	4013      	ands	r3, r2
 8007e84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d115      	bne.n	8007ebc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00f      	beq.n	8007ebc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea0:	f003 0320 	and.w	r3, r3, #32
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d009      	beq.n	8007ebc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 82ab 	beq.w	8008408 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
      }
      return;
 8007eba:	e2a5      	b.n	8008408 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 8117 	beq.w	80080f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d106      	bne.n	8007ee0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007ed2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007ed6:	4b85      	ldr	r3, [pc, #532]	; (80080ec <HAL_UART_IRQHandler+0x298>)
 8007ed8:	4013      	ands	r3, r2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 810a 	beq.w	80080f4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d011      	beq.n	8007f10 <HAL_UART_IRQHandler+0xbc>
 8007eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00b      	beq.n	8007f10 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2201      	movs	r2, #1
 8007efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f06:	f043 0201 	orr.w	r2, r3, #1
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d011      	beq.n	8007f40 <HAL_UART_IRQHandler+0xec>
 8007f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f36:	f043 0204 	orr.w	r2, r3, #4
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d011      	beq.n	8007f70 <HAL_UART_IRQHandler+0x11c>
 8007f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00b      	beq.n	8007f70 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2204      	movs	r2, #4
 8007f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f66:	f043 0202 	orr.w	r2, r3, #2
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f74:	f003 0308 	and.w	r3, r3, #8
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d017      	beq.n	8007fac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f80:	f003 0320 	and.w	r3, r3, #32
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d105      	bne.n	8007f94 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f8c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2208      	movs	r2, #8
 8007f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fa2:	f043 0208 	orr.w	r2, r3, #8
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d012      	beq.n	8007fde <HAL_UART_IRQHandler+0x18a>
 8007fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00c      	beq.n	8007fde <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fd4:	f043 0220 	orr.w	r2, r3, #32
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 8211 	beq.w	800840c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00d      	beq.n	8008012 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d007      	beq.n	8008012 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008018:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008026:	2b40      	cmp	r3, #64	; 0x40
 8008028:	d005      	beq.n	8008036 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800802a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800802e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008032:	2b00      	cmp	r3, #0
 8008034:	d04f      	beq.n	80080d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fe4c 	bl	8008cd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008046:	2b40      	cmp	r3, #64	; 0x40
 8008048:	d141      	bne.n	80080ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3308      	adds	r3, #8
 8008050:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008060:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008068:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3308      	adds	r3, #8
 8008072:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008076:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800807a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008082:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008086:	e841 2300 	strex	r3, r2, [r1]
 800808a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800808e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1d9      	bne.n	800804a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800809a:	2b00      	cmp	r3, #0
 800809c:	d013      	beq.n	80080c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080a2:	4a13      	ldr	r2, [pc, #76]	; (80080f0 <HAL_UART_IRQHandler+0x29c>)
 80080a4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fc f846 	bl	800413c <HAL_DMA_Abort_IT>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d017      	beq.n	80080e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80080c0:	4610      	mov	r0, r2
 80080c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c4:	e00f      	b.n	80080e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f9b4 	bl	8008434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080cc:	e00b      	b.n	80080e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f9b0 	bl	8008434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d4:	e007      	b.n	80080e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f9ac 	bl	8008434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80080e4:	e192      	b.n	800840c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e6:	bf00      	nop
    return;
 80080e8:	e190      	b.n	800840c <HAL_UART_IRQHandler+0x5b8>
 80080ea:	bf00      	nop
 80080ec:	04000120 	.word	0x04000120
 80080f0:	08008d9d 	.word	0x08008d9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	f040 814b 	bne.w	8008394 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80080fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008102:	f003 0310 	and.w	r3, r3, #16
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 8144 	beq.w	8008394 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800810c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008110:	f003 0310 	and.w	r3, r3, #16
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 813d 	beq.w	8008394 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2210      	movs	r2, #16
 8008120:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800812c:	2b40      	cmp	r3, #64	; 0x40
 800812e:	f040 80b5 	bne.w	800829c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800813e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008142:	2b00      	cmp	r3, #0
 8008144:	f000 8164 	beq.w	8008410 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800814e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008152:	429a      	cmp	r2, r3
 8008154:	f080 815c 	bcs.w	8008410 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800815e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	2b20      	cmp	r3, #32
 800816a:	f000 8086 	beq.w	800827a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800817a:	e853 3f00 	ldrex	r3, [r3]
 800817e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800818a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008198:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800819c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80081a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80081b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1da      	bne.n	800816e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3308      	adds	r3, #8
 80081be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081c2:	e853 3f00 	ldrex	r3, [r3]
 80081c6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081ca:	f023 0301 	bic.w	r3, r3, #1
 80081ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	3308      	adds	r3, #8
 80081d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80081e0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081e8:	e841 2300 	strex	r3, r2, [r1]
 80081ec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1e1      	bne.n	80081b8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3308      	adds	r3, #8
 80081fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081fe:	e853 3f00 	ldrex	r3, [r3]
 8008202:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800820a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3308      	adds	r3, #8
 8008214:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008218:	66fa      	str	r2, [r7, #108]	; 0x6c
 800821a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800821e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008220:	e841 2300 	strex	r3, r2, [r1]
 8008224:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1e3      	bne.n	80081f4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008242:	e853 3f00 	ldrex	r3, [r3]
 8008246:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800824a:	f023 0310 	bic.w	r3, r3, #16
 800824e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800825c:	65bb      	str	r3, [r7, #88]	; 0x58
 800825e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008260:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008262:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008264:	e841 2300 	strex	r3, r2, [r1]
 8008268:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800826a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e4      	bne.n	800823a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008274:	4618      	mov	r0, r3
 8008276:	f7fb ff28 	bl	80040ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2202      	movs	r2, #2
 800827e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800828c:	b29b      	uxth	r3, r3
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	b29b      	uxth	r3, r3
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f8d7 	bl	8008448 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800829a:	e0b9      	b.n	8008410 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 80ab 	beq.w	8008414 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80082be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 80a6 	beq.w	8008414 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	461a      	mov	r2, r3
 80082e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082ea:	647b      	str	r3, [r7, #68]	; 0x44
 80082ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082f2:	e841 2300 	strex	r3, r2, [r1]
 80082f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1e4      	bne.n	80082c8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	3308      	adds	r3, #8
 8008304:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	623b      	str	r3, [r7, #32]
   return(result);
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	f023 0301 	bic.w	r3, r3, #1
 8008314:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	3308      	adds	r3, #8
 800831e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008322:	633a      	str	r2, [r7, #48]	; 0x30
 8008324:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832a:	e841 2300 	strex	r3, r2, [r1]
 800832e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1e3      	bne.n	80082fe <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2220      	movs	r2, #32
 800833a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	e853 3f00 	ldrex	r3, [r3]
 8008356:	60fb      	str	r3, [r7, #12]
   return(result);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0310 	bic.w	r3, r3, #16
 800835e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800836c:	61fb      	str	r3, [r7, #28]
 800836e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	69b9      	ldr	r1, [r7, #24]
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	e841 2300 	strex	r3, r2, [r1]
 8008378:	617b      	str	r3, [r7, #20]
   return(result);
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e4      	bne.n	800834a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008386:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f85b 	bl	8008448 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008392:	e03f      	b.n	8008414 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00e      	beq.n	80083be <HAL_UART_IRQHandler+0x56a>
 80083a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d008      	beq.n	80083be <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80083b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fed8 	bl	800916c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083bc:	e02d      	b.n	800841a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80083be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00e      	beq.n	80083e8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80083ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d008      	beq.n	80083e8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d01c      	beq.n	8008418 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	4798      	blx	r3
    }
    return;
 80083e6:	e017      	b.n	8008418 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80083e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d012      	beq.n	800841a <HAL_UART_IRQHandler+0x5c6>
 80083f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00c      	beq.n	800841a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fce1 	bl	8008dc8 <UART_EndTransmit_IT>
    return;
 8008406:	e008      	b.n	800841a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008408:	bf00      	nop
 800840a:	e006      	b.n	800841a <HAL_UART_IRQHandler+0x5c6>
    return;
 800840c:	bf00      	nop
 800840e:	e004      	b.n	800841a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008410:	bf00      	nop
 8008412:	e002      	b.n	800841a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008414:	bf00      	nop
 8008416:	e000      	b.n	800841a <HAL_UART_IRQHandler+0x5c6>
    return;
 8008418:	bf00      	nop
  }

}
 800841a:	37e8      	adds	r7, #232	; 0xe8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b088      	sub	sp, #32
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	431a      	orrs	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	4313      	orrs	r3, r2
 8008482:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800848e:	f023 030c 	bic.w	r3, r3, #12
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	6812      	ldr	r2, [r2, #0]
 8008496:	6979      	ldr	r1, [r7, #20]
 8008498:	430b      	orrs	r3, r1
 800849a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68da      	ldr	r2, [r3, #12]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a1b      	ldr	r3, [r3, #32]
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	4313      	orrs	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4aa7      	ldr	r2, [pc, #668]	; (8008778 <UART_SetConfig+0x318>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d120      	bne.n	8008522 <UART_SetConfig+0xc2>
 80084e0:	4ba6      	ldr	r3, [pc, #664]	; (800877c <UART_SetConfig+0x31c>)
 80084e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e4:	f003 0303 	and.w	r3, r3, #3
 80084e8:	2b03      	cmp	r3, #3
 80084ea:	d817      	bhi.n	800851c <UART_SetConfig+0xbc>
 80084ec:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <UART_SetConfig+0x94>)
 80084ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f2:	bf00      	nop
 80084f4:	08008505 	.word	0x08008505
 80084f8:	08008511 	.word	0x08008511
 80084fc:	08008517 	.word	0x08008517
 8008500:	0800850b 	.word	0x0800850b
 8008504:	2301      	movs	r3, #1
 8008506:	77fb      	strb	r3, [r7, #31]
 8008508:	e0b5      	b.n	8008676 <UART_SetConfig+0x216>
 800850a:	2302      	movs	r3, #2
 800850c:	77fb      	strb	r3, [r7, #31]
 800850e:	e0b2      	b.n	8008676 <UART_SetConfig+0x216>
 8008510:	2304      	movs	r3, #4
 8008512:	77fb      	strb	r3, [r7, #31]
 8008514:	e0af      	b.n	8008676 <UART_SetConfig+0x216>
 8008516:	2308      	movs	r3, #8
 8008518:	77fb      	strb	r3, [r7, #31]
 800851a:	e0ac      	b.n	8008676 <UART_SetConfig+0x216>
 800851c:	2310      	movs	r3, #16
 800851e:	77fb      	strb	r3, [r7, #31]
 8008520:	e0a9      	b.n	8008676 <UART_SetConfig+0x216>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a96      	ldr	r2, [pc, #600]	; (8008780 <UART_SetConfig+0x320>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d124      	bne.n	8008576 <UART_SetConfig+0x116>
 800852c:	4b93      	ldr	r3, [pc, #588]	; (800877c <UART_SetConfig+0x31c>)
 800852e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008534:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008538:	d011      	beq.n	800855e <UART_SetConfig+0xfe>
 800853a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800853e:	d817      	bhi.n	8008570 <UART_SetConfig+0x110>
 8008540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008544:	d011      	beq.n	800856a <UART_SetConfig+0x10a>
 8008546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800854a:	d811      	bhi.n	8008570 <UART_SetConfig+0x110>
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <UART_SetConfig+0xf8>
 8008550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008554:	d006      	beq.n	8008564 <UART_SetConfig+0x104>
 8008556:	e00b      	b.n	8008570 <UART_SetConfig+0x110>
 8008558:	2300      	movs	r3, #0
 800855a:	77fb      	strb	r3, [r7, #31]
 800855c:	e08b      	b.n	8008676 <UART_SetConfig+0x216>
 800855e:	2302      	movs	r3, #2
 8008560:	77fb      	strb	r3, [r7, #31]
 8008562:	e088      	b.n	8008676 <UART_SetConfig+0x216>
 8008564:	2304      	movs	r3, #4
 8008566:	77fb      	strb	r3, [r7, #31]
 8008568:	e085      	b.n	8008676 <UART_SetConfig+0x216>
 800856a:	2308      	movs	r3, #8
 800856c:	77fb      	strb	r3, [r7, #31]
 800856e:	e082      	b.n	8008676 <UART_SetConfig+0x216>
 8008570:	2310      	movs	r3, #16
 8008572:	77fb      	strb	r3, [r7, #31]
 8008574:	e07f      	b.n	8008676 <UART_SetConfig+0x216>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a82      	ldr	r2, [pc, #520]	; (8008784 <UART_SetConfig+0x324>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d124      	bne.n	80085ca <UART_SetConfig+0x16a>
 8008580:	4b7e      	ldr	r3, [pc, #504]	; (800877c <UART_SetConfig+0x31c>)
 8008582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008584:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008588:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800858c:	d011      	beq.n	80085b2 <UART_SetConfig+0x152>
 800858e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008592:	d817      	bhi.n	80085c4 <UART_SetConfig+0x164>
 8008594:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008598:	d011      	beq.n	80085be <UART_SetConfig+0x15e>
 800859a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800859e:	d811      	bhi.n	80085c4 <UART_SetConfig+0x164>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <UART_SetConfig+0x14c>
 80085a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085a8:	d006      	beq.n	80085b8 <UART_SetConfig+0x158>
 80085aa:	e00b      	b.n	80085c4 <UART_SetConfig+0x164>
 80085ac:	2300      	movs	r3, #0
 80085ae:	77fb      	strb	r3, [r7, #31]
 80085b0:	e061      	b.n	8008676 <UART_SetConfig+0x216>
 80085b2:	2302      	movs	r3, #2
 80085b4:	77fb      	strb	r3, [r7, #31]
 80085b6:	e05e      	b.n	8008676 <UART_SetConfig+0x216>
 80085b8:	2304      	movs	r3, #4
 80085ba:	77fb      	strb	r3, [r7, #31]
 80085bc:	e05b      	b.n	8008676 <UART_SetConfig+0x216>
 80085be:	2308      	movs	r3, #8
 80085c0:	77fb      	strb	r3, [r7, #31]
 80085c2:	e058      	b.n	8008676 <UART_SetConfig+0x216>
 80085c4:	2310      	movs	r3, #16
 80085c6:	77fb      	strb	r3, [r7, #31]
 80085c8:	e055      	b.n	8008676 <UART_SetConfig+0x216>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a6e      	ldr	r2, [pc, #440]	; (8008788 <UART_SetConfig+0x328>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d124      	bne.n	800861e <UART_SetConfig+0x1be>
 80085d4:	4b69      	ldr	r3, [pc, #420]	; (800877c <UART_SetConfig+0x31c>)
 80085d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80085dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085e0:	d011      	beq.n	8008606 <UART_SetConfig+0x1a6>
 80085e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085e6:	d817      	bhi.n	8008618 <UART_SetConfig+0x1b8>
 80085e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085ec:	d011      	beq.n	8008612 <UART_SetConfig+0x1b2>
 80085ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085f2:	d811      	bhi.n	8008618 <UART_SetConfig+0x1b8>
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <UART_SetConfig+0x1a0>
 80085f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085fc:	d006      	beq.n	800860c <UART_SetConfig+0x1ac>
 80085fe:	e00b      	b.n	8008618 <UART_SetConfig+0x1b8>
 8008600:	2300      	movs	r3, #0
 8008602:	77fb      	strb	r3, [r7, #31]
 8008604:	e037      	b.n	8008676 <UART_SetConfig+0x216>
 8008606:	2302      	movs	r3, #2
 8008608:	77fb      	strb	r3, [r7, #31]
 800860a:	e034      	b.n	8008676 <UART_SetConfig+0x216>
 800860c:	2304      	movs	r3, #4
 800860e:	77fb      	strb	r3, [r7, #31]
 8008610:	e031      	b.n	8008676 <UART_SetConfig+0x216>
 8008612:	2308      	movs	r3, #8
 8008614:	77fb      	strb	r3, [r7, #31]
 8008616:	e02e      	b.n	8008676 <UART_SetConfig+0x216>
 8008618:	2310      	movs	r3, #16
 800861a:	77fb      	strb	r3, [r7, #31]
 800861c:	e02b      	b.n	8008676 <UART_SetConfig+0x216>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a5a      	ldr	r2, [pc, #360]	; (800878c <UART_SetConfig+0x32c>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d124      	bne.n	8008672 <UART_SetConfig+0x212>
 8008628:	4b54      	ldr	r3, [pc, #336]	; (800877c <UART_SetConfig+0x31c>)
 800862a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008630:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008634:	d011      	beq.n	800865a <UART_SetConfig+0x1fa>
 8008636:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800863a:	d817      	bhi.n	800866c <UART_SetConfig+0x20c>
 800863c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008640:	d011      	beq.n	8008666 <UART_SetConfig+0x206>
 8008642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008646:	d811      	bhi.n	800866c <UART_SetConfig+0x20c>
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <UART_SetConfig+0x1f4>
 800864c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008650:	d006      	beq.n	8008660 <UART_SetConfig+0x200>
 8008652:	e00b      	b.n	800866c <UART_SetConfig+0x20c>
 8008654:	2300      	movs	r3, #0
 8008656:	77fb      	strb	r3, [r7, #31]
 8008658:	e00d      	b.n	8008676 <UART_SetConfig+0x216>
 800865a:	2302      	movs	r3, #2
 800865c:	77fb      	strb	r3, [r7, #31]
 800865e:	e00a      	b.n	8008676 <UART_SetConfig+0x216>
 8008660:	2304      	movs	r3, #4
 8008662:	77fb      	strb	r3, [r7, #31]
 8008664:	e007      	b.n	8008676 <UART_SetConfig+0x216>
 8008666:	2308      	movs	r3, #8
 8008668:	77fb      	strb	r3, [r7, #31]
 800866a:	e004      	b.n	8008676 <UART_SetConfig+0x216>
 800866c:	2310      	movs	r3, #16
 800866e:	77fb      	strb	r3, [r7, #31]
 8008670:	e001      	b.n	8008676 <UART_SetConfig+0x216>
 8008672:	2310      	movs	r3, #16
 8008674:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800867e:	d15b      	bne.n	8008738 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8008680:	7ffb      	ldrb	r3, [r7, #31]
 8008682:	2b08      	cmp	r3, #8
 8008684:	d827      	bhi.n	80086d6 <UART_SetConfig+0x276>
 8008686:	a201      	add	r2, pc, #4	; (adr r2, 800868c <UART_SetConfig+0x22c>)
 8008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868c:	080086b1 	.word	0x080086b1
 8008690:	080086b9 	.word	0x080086b9
 8008694:	080086c1 	.word	0x080086c1
 8008698:	080086d7 	.word	0x080086d7
 800869c:	080086c7 	.word	0x080086c7
 80086a0:	080086d7 	.word	0x080086d7
 80086a4:	080086d7 	.word	0x080086d7
 80086a8:	080086d7 	.word	0x080086d7
 80086ac:	080086cf 	.word	0x080086cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086b0:	f7fd fb86 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 80086b4:	61b8      	str	r0, [r7, #24]
        break;
 80086b6:	e013      	b.n	80086e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086b8:	f7fd fba4 	bl	8005e04 <HAL_RCC_GetPCLK2Freq>
 80086bc:	61b8      	str	r0, [r7, #24]
        break;
 80086be:	e00f      	b.n	80086e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086c0:	4b33      	ldr	r3, [pc, #204]	; (8008790 <UART_SetConfig+0x330>)
 80086c2:	61bb      	str	r3, [r7, #24]
        break;
 80086c4:	e00c      	b.n	80086e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086c6:	f7fd fb05 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 80086ca:	61b8      	str	r0, [r7, #24]
        break;
 80086cc:	e008      	b.n	80086e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086d2:	61bb      	str	r3, [r7, #24]
        break;
 80086d4:	e004      	b.n	80086e0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	77bb      	strb	r3, [r7, #30]
        break;
 80086de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 8082 	beq.w	80087ec <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	005a      	lsls	r2, r3, #1
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	085b      	lsrs	r3, r3, #1
 80086f2:	441a      	add	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b0f      	cmp	r3, #15
 8008702:	d916      	bls.n	8008732 <UART_SetConfig+0x2d2>
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800870a:	d212      	bcs.n	8008732 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	b29b      	uxth	r3, r3
 8008710:	f023 030f 	bic.w	r3, r3, #15
 8008714:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	085b      	lsrs	r3, r3, #1
 800871a:	b29b      	uxth	r3, r3
 800871c:	f003 0307 	and.w	r3, r3, #7
 8008720:	b29a      	uxth	r2, r3
 8008722:	89fb      	ldrh	r3, [r7, #14]
 8008724:	4313      	orrs	r3, r2
 8008726:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	89fa      	ldrh	r2, [r7, #14]
 800872e:	60da      	str	r2, [r3, #12]
 8008730:	e05c      	b.n	80087ec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	77bb      	strb	r3, [r7, #30]
 8008736:	e059      	b.n	80087ec <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008738:	7ffb      	ldrb	r3, [r7, #31]
 800873a:	2b08      	cmp	r3, #8
 800873c:	d835      	bhi.n	80087aa <UART_SetConfig+0x34a>
 800873e:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <UART_SetConfig+0x2e4>)
 8008740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008744:	08008769 	.word	0x08008769
 8008748:	08008771 	.word	0x08008771
 800874c:	08008795 	.word	0x08008795
 8008750:	080087ab 	.word	0x080087ab
 8008754:	0800879b 	.word	0x0800879b
 8008758:	080087ab 	.word	0x080087ab
 800875c:	080087ab 	.word	0x080087ab
 8008760:	080087ab 	.word	0x080087ab
 8008764:	080087a3 	.word	0x080087a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008768:	f7fd fb2a 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 800876c:	61b8      	str	r0, [r7, #24]
        break;
 800876e:	e021      	b.n	80087b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008770:	f7fd fb48 	bl	8005e04 <HAL_RCC_GetPCLK2Freq>
 8008774:	61b8      	str	r0, [r7, #24]
        break;
 8008776:	e01d      	b.n	80087b4 <UART_SetConfig+0x354>
 8008778:	40013800 	.word	0x40013800
 800877c:	40021000 	.word	0x40021000
 8008780:	40004400 	.word	0x40004400
 8008784:	40004800 	.word	0x40004800
 8008788:	40004c00 	.word	0x40004c00
 800878c:	40005000 	.word	0x40005000
 8008790:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008794:	4b1b      	ldr	r3, [pc, #108]	; (8008804 <UART_SetConfig+0x3a4>)
 8008796:	61bb      	str	r3, [r7, #24]
        break;
 8008798:	e00c      	b.n	80087b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800879a:	f7fd fa9b 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 800879e:	61b8      	str	r0, [r7, #24]
        break;
 80087a0:	e008      	b.n	80087b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a6:	61bb      	str	r3, [r7, #24]
        break;
 80087a8:	e004      	b.n	80087b4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	77bb      	strb	r3, [r7, #30]
        break;
 80087b2:	bf00      	nop
    }

    if (pclk != 0U)
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d018      	beq.n	80087ec <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	085a      	lsrs	r2, r3, #1
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	441a      	add	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	2b0f      	cmp	r3, #15
 80087d2:	d909      	bls.n	80087e8 <UART_SetConfig+0x388>
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087da:	d205      	bcs.n	80087e8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	b29a      	uxth	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	60da      	str	r2, [r3, #12]
 80087e6:	e001      	b.n	80087ec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80087f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3720      	adds	r7, #32
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	007a1200 	.word	0x007a1200

08008808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00a      	beq.n	8008832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00a      	beq.n	8008876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	f003 0308 	and.w	r3, r3, #8
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	430a      	orrs	r2, r1
 8008896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	f003 0310 	and.w	r3, r3, #16
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00a      	beq.n	80088ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00a      	beq.n	80088dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	430a      	orrs	r2, r1
 80088da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01a      	beq.n	800891e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008906:	d10a      	bne.n	800891e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00a      	beq.n	8008940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	605a      	str	r2, [r3, #4]
  }
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b098      	sub	sp, #96	; 0x60
 8008950:	af02      	add	r7, sp, #8
 8008952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800895c:	f7fb fa74 	bl	8003e48 <HAL_GetTick>
 8008960:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0308 	and.w	r3, r3, #8
 800896c:	2b08      	cmp	r3, #8
 800896e:	d12e      	bne.n	80089ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008978:	2200      	movs	r2, #0
 800897a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f88c 	bl	8008a9c <UART_WaitOnFlagUntilTimeout>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d021      	beq.n	80089ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800899e:	653b      	str	r3, [r7, #80]	; 0x50
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089a8:	647b      	str	r3, [r7, #68]	; 0x44
 80089aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e6      	bne.n	800898a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2220      	movs	r2, #32
 80089c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e062      	b.n	8008a94 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b04      	cmp	r3, #4
 80089da:	d149      	bne.n	8008a70 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089e4:	2200      	movs	r2, #0
 80089e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f856 	bl	8008a9c <UART_WaitOnFlagUntilTimeout>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d03c      	beq.n	8008a70 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	623b      	str	r3, [r7, #32]
   return(result);
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a14:	633b      	str	r3, [r7, #48]	; 0x30
 8008a16:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e6      	bne.n	80089f6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f023 0301 	bic.w	r3, r3, #1
 8008a3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3308      	adds	r3, #8
 8008a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a48:	61fa      	str	r2, [r7, #28]
 8008a4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	69b9      	ldr	r1, [r7, #24]
 8008a4e:	69fa      	ldr	r2, [r7, #28]
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	617b      	str	r3, [r7, #20]
   return(result);
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e5      	bne.n	8008a28 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	e011      	b.n	8008a94 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2220      	movs	r2, #32
 8008a74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3758      	adds	r7, #88	; 0x58
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	603b      	str	r3, [r7, #0]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aac:	e049      	b.n	8008b42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab4:	d045      	beq.n	8008b42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab6:	f7fb f9c7 	bl	8003e48 <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	69ba      	ldr	r2, [r7, #24]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d302      	bcc.n	8008acc <UART_WaitOnFlagUntilTimeout+0x30>
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e048      	b.n	8008b62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0304 	and.w	r3, r3, #4
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d031      	beq.n	8008b42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	f003 0308 	and.w	r3, r3, #8
 8008ae8:	2b08      	cmp	r3, #8
 8008aea:	d110      	bne.n	8008b0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2208      	movs	r2, #8
 8008af2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 f8ed 	bl	8008cd4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2208      	movs	r2, #8
 8008afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e029      	b.n	8008b62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b1c:	d111      	bne.n	8008b42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 f8d3 	bl	8008cd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e00f      	b.n	8008b62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	69da      	ldr	r2, [r3, #28]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	bf0c      	ite	eq
 8008b52:	2301      	moveq	r3, #1
 8008b54:	2300      	movne	r3, #0
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	461a      	mov	r2, r3
 8008b5a:	79fb      	ldrb	r3, [r7, #7]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d0a6      	beq.n	8008aae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b097      	sub	sp, #92	; 0x5c
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	4613      	mov	r3, r2
 8008b78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	88fa      	ldrh	r2, [r7, #6]
 8008b84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	88fa      	ldrh	r2, [r7, #6]
 8008b8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9e:	d10e      	bne.n	8008bbe <UART_Start_Receive_IT+0x52>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d105      	bne.n	8008bb4 <UART_Start_Receive_IT+0x48>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008bae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bb2:	e01a      	b.n	8008bea <UART_Start_Receive_IT+0x7e>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	22ff      	movs	r2, #255	; 0xff
 8008bb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bbc:	e015      	b.n	8008bea <UART_Start_Receive_IT+0x7e>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10d      	bne.n	8008be2 <UART_Start_Receive_IT+0x76>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d104      	bne.n	8008bd8 <UART_Start_Receive_IT+0x6c>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	22ff      	movs	r2, #255	; 0xff
 8008bd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bd6:	e008      	b.n	8008bea <UART_Start_Receive_IT+0x7e>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	227f      	movs	r2, #127	; 0x7f
 8008bdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008be0:	e003      	b.n	8008bea <UART_Start_Receive_IT+0x7e>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2222      	movs	r2, #34	; 0x22
 8008bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3308      	adds	r3, #8
 8008c00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0c:	f043 0301 	orr.w	r3, r3, #1
 8008c10:	657b      	str	r3, [r7, #84]	; 0x54
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3308      	adds	r3, #8
 8008c18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008c1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e5      	bne.n	8008bfa <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c36:	d107      	bne.n	8008c48 <UART_Start_Receive_IT+0xdc>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d103      	bne.n	8008c48 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4a22      	ldr	r2, [pc, #136]	; (8008ccc <UART_Start_Receive_IT+0x160>)
 8008c44:	669a      	str	r2, [r3, #104]	; 0x68
 8008c46:	e002      	b.n	8008c4e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4a21      	ldr	r2, [pc, #132]	; (8008cd0 <UART_Start_Receive_IT+0x164>)
 8008c4c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d019      	beq.n	8008c8a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	e853 3f00 	ldrex	r3, [r3]
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	461a      	mov	r2, r3
 8008c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c74:	637b      	str	r3, [r7, #52]	; 0x34
 8008c76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c7c:	e841 2300 	strex	r3, r2, [r1]
 8008c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1e6      	bne.n	8008c56 <UART_Start_Receive_IT+0xea>
 8008c88:	e018      	b.n	8008cbc <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	613b      	str	r3, [r7, #16]
   return(result);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f043 0320 	orr.w	r3, r3, #32
 8008c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ca8:	623b      	str	r3, [r7, #32]
 8008caa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	69f9      	ldr	r1, [r7, #28]
 8008cae:	6a3a      	ldr	r2, [r7, #32]
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e6      	bne.n	8008c8a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	375c      	adds	r7, #92	; 0x5c
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	08008fc5 	.word	0x08008fc5
 8008cd0:	08008e1d 	.word	0x08008e1d

08008cd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b095      	sub	sp, #84	; 0x54
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cfa:	643b      	str	r3, [r7, #64]	; 0x40
 8008cfc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e6      	bne.n	8008cdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3308      	adds	r3, #8
 8008d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	f023 0301 	bic.w	r3, r3, #1
 8008d24:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	3308      	adds	r3, #8
 8008d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e5      	bne.n	8008d0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d118      	bne.n	8008d7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f023 0310 	bic.w	r3, r3, #16
 8008d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	461a      	mov	r2, r3
 8008d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d68:	61bb      	str	r3, [r7, #24]
 8008d6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	6979      	ldr	r1, [r7, #20]
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	613b      	str	r3, [r7, #16]
   return(result);
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e6      	bne.n	8008d4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2220      	movs	r2, #32
 8008d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008d90:	bf00      	nop
 8008d92:	3754      	adds	r7, #84	; 0x54
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f7ff fb3a 	bl	8008434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	e853 3f00 	ldrex	r3, [r3]
 8008ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de4:	61fb      	str	r3, [r7, #28]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	461a      	mov	r2, r3
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	61bb      	str	r3, [r7, #24]
 8008df0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df2:	6979      	ldr	r1, [r7, #20]
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	e841 2300 	strex	r3, r2, [r1]
 8008dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1e6      	bne.n	8008dd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2220      	movs	r2, #32
 8008e06:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff fb06 	bl	8008420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e14:	bf00      	nop
 8008e16:	3720      	adds	r7, #32
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b09c      	sub	sp, #112	; 0x70
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e2a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e34:	2b22      	cmp	r3, #34	; 0x22
 8008e36:	f040 80b9 	bne.w	8008fac <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008e40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e48:	b2d9      	uxtb	r1, r3
 8008e4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e54:	400a      	ands	r2, r1
 8008e56:	b2d2      	uxtb	r2, r2
 8008e58:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f040 809c 	bne.w	8008fbc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e98:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ea2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ea4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e6      	bne.n	8008e84 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3308      	adds	r3, #8
 8008ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec8:	f023 0301 	bic.w	r3, r3, #1
 8008ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ed6:	647a      	str	r2, [r7, #68]	; 0x44
 8008ed8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008edc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ede:	e841 2300 	strex	r3, r2, [r1]
 8008ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e5      	bne.n	8008eb6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2220      	movs	r2, #32
 8008eee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d018      	beq.n	8008f3e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	623b      	str	r3, [r7, #32]
   return(result);
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f20:	663b      	str	r3, [r7, #96]	; 0x60
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8008f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e6      	bne.n	8008f0c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d12e      	bne.n	8008fa4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	e853 3f00 	ldrex	r3, [r3]
 8008f58:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f023 0310 	bic.w	r3, r3, #16
 8008f60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f6a:	61fb      	str	r3, [r7, #28]
 8008f6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6e:	69b9      	ldr	r1, [r7, #24]
 8008f70:	69fa      	ldr	r2, [r7, #28]
 8008f72:	e841 2300 	strex	r3, r2, [r1]
 8008f76:	617b      	str	r3, [r7, #20]
   return(result);
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1e6      	bne.n	8008f4c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	f003 0310 	and.w	r3, r3, #16
 8008f88:	2b10      	cmp	r3, #16
 8008f8a:	d103      	bne.n	8008f94 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2210      	movs	r2, #16
 8008f92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff fa53 	bl	8008448 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fa2:	e00b      	b.n	8008fbc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7fa f9f5 	bl	8003394 <HAL_UART_RxCpltCallback>
}
 8008faa:	e007      	b.n	8008fbc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	699a      	ldr	r2, [r3, #24]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f042 0208 	orr.w	r2, r2, #8
 8008fba:	619a      	str	r2, [r3, #24]
}
 8008fbc:	bf00      	nop
 8008fbe:	3770      	adds	r7, #112	; 0x70
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b09c      	sub	sp, #112	; 0x70
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fd2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fdc:	2b22      	cmp	r3, #34	; 0x22
 8008fde:	f040 80b9 	bne.w	8009154 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008fe8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ff2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008ff6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009000:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009006:	1c9a      	adds	r2, r3, #2
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009012:	b29b      	uxth	r3, r3
 8009014:	3b01      	subs	r3, #1
 8009016:	b29a      	uxth	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009024:	b29b      	uxth	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	f040 809c 	bne.w	8009164 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009034:	e853 3f00 	ldrex	r3, [r3]
 8009038:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800903a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800903c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009040:	667b      	str	r3, [r7, #100]	; 0x64
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800904a:	657b      	str	r3, [r7, #84]	; 0x54
 800904c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009050:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009052:	e841 2300 	strex	r3, r2, [r1]
 8009056:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e6      	bne.n	800902c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3308      	adds	r3, #8
 8009064:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009068:	e853 3f00 	ldrex	r3, [r3]
 800906c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	f023 0301 	bic.w	r3, r3, #1
 8009074:	663b      	str	r3, [r7, #96]	; 0x60
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3308      	adds	r3, #8
 800907c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800907e:	643a      	str	r2, [r7, #64]	; 0x40
 8009080:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009082:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009086:	e841 2300 	strex	r3, r2, [r1]
 800908a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800908c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1e5      	bne.n	800905e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2220      	movs	r2, #32
 8009096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d018      	beq.n	80090e6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090d4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e6      	bne.n	80090b4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d12e      	bne.n	800914c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	60bb      	str	r3, [r7, #8]
   return(result);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f023 0310 	bic.w	r3, r3, #16
 8009108:	65bb      	str	r3, [r7, #88]	; 0x58
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009112:	61bb      	str	r3, [r7, #24]
 8009114:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	6979      	ldr	r1, [r7, #20]
 8009118:	69ba      	ldr	r2, [r7, #24]
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	613b      	str	r3, [r7, #16]
   return(result);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e6      	bne.n	80090f4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	f003 0310 	and.w	r3, r3, #16
 8009130:	2b10      	cmp	r3, #16
 8009132:	d103      	bne.n	800913c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2210      	movs	r2, #16
 800913a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff f97f 	bl	8008448 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800914a:	e00b      	b.n	8009164 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7fa f921 	bl	8003394 <HAL_UART_RxCpltCallback>
}
 8009152:	e007      	b.n	8009164 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699a      	ldr	r2, [r3, #24]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f042 0208 	orr.w	r2, r2, #8
 8009162:	619a      	str	r2, [r3, #24]
}
 8009164:	bf00      	nop
 8009166:	3770      	adds	r7, #112	; 0x70
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009188:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800918c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009194:	b29a      	uxth	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	b29b      	uxth	r3, r3
 800919a:	43db      	mvns	r3, r3
 800919c:	b29b      	uxth	r3, r3
 800919e:	4013      	ands	r3, r2
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80091b6:	b084      	sub	sp, #16
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	f107 0014 	add.w	r0, r7, #20
 80091c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	b004      	add	sp, #16
 80091f6:	4770      	bx	lr

080091f8 <__errno>:
 80091f8:	4b01      	ldr	r3, [pc, #4]	; (8009200 <__errno+0x8>)
 80091fa:	6818      	ldr	r0, [r3, #0]
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	20000118 	.word	0x20000118

08009204 <__libc_init_array>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	4d0d      	ldr	r5, [pc, #52]	; (800923c <__libc_init_array+0x38>)
 8009208:	4c0d      	ldr	r4, [pc, #52]	; (8009240 <__libc_init_array+0x3c>)
 800920a:	1b64      	subs	r4, r4, r5
 800920c:	10a4      	asrs	r4, r4, #2
 800920e:	2600      	movs	r6, #0
 8009210:	42a6      	cmp	r6, r4
 8009212:	d109      	bne.n	8009228 <__libc_init_array+0x24>
 8009214:	4d0b      	ldr	r5, [pc, #44]	; (8009244 <__libc_init_array+0x40>)
 8009216:	4c0c      	ldr	r4, [pc, #48]	; (8009248 <__libc_init_array+0x44>)
 8009218:	f001 fa34 	bl	800a684 <_init>
 800921c:	1b64      	subs	r4, r4, r5
 800921e:	10a4      	asrs	r4, r4, #2
 8009220:	2600      	movs	r6, #0
 8009222:	42a6      	cmp	r6, r4
 8009224:	d105      	bne.n	8009232 <__libc_init_array+0x2e>
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	f855 3b04 	ldr.w	r3, [r5], #4
 800922c:	4798      	blx	r3
 800922e:	3601      	adds	r6, #1
 8009230:	e7ee      	b.n	8009210 <__libc_init_array+0xc>
 8009232:	f855 3b04 	ldr.w	r3, [r5], #4
 8009236:	4798      	blx	r3
 8009238:	3601      	adds	r6, #1
 800923a:	e7f2      	b.n	8009222 <__libc_init_array+0x1e>
 800923c:	0800a9dc 	.word	0x0800a9dc
 8009240:	0800a9dc 	.word	0x0800a9dc
 8009244:	0800a9dc 	.word	0x0800a9dc
 8009248:	0800a9e0 	.word	0x0800a9e0

0800924c <memset>:
 800924c:	4402      	add	r2, r0
 800924e:	4603      	mov	r3, r0
 8009250:	4293      	cmp	r3, r2
 8009252:	d100      	bne.n	8009256 <memset+0xa>
 8009254:	4770      	bx	lr
 8009256:	f803 1b01 	strb.w	r1, [r3], #1
 800925a:	e7f9      	b.n	8009250 <memset+0x4>

0800925c <rand>:
 800925c:	4b16      	ldr	r3, [pc, #88]	; (80092b8 <rand+0x5c>)
 800925e:	b510      	push	{r4, lr}
 8009260:	681c      	ldr	r4, [r3, #0]
 8009262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009264:	b9b3      	cbnz	r3, 8009294 <rand+0x38>
 8009266:	2018      	movs	r0, #24
 8009268:	f000 f886 	bl	8009378 <malloc>
 800926c:	63a0      	str	r0, [r4, #56]	; 0x38
 800926e:	b928      	cbnz	r0, 800927c <rand+0x20>
 8009270:	4602      	mov	r2, r0
 8009272:	4b12      	ldr	r3, [pc, #72]	; (80092bc <rand+0x60>)
 8009274:	4812      	ldr	r0, [pc, #72]	; (80092c0 <rand+0x64>)
 8009276:	214e      	movs	r1, #78	; 0x4e
 8009278:	f000 f84e 	bl	8009318 <__assert_func>
 800927c:	4a11      	ldr	r2, [pc, #68]	; (80092c4 <rand+0x68>)
 800927e:	4b12      	ldr	r3, [pc, #72]	; (80092c8 <rand+0x6c>)
 8009280:	e9c0 2300 	strd	r2, r3, [r0]
 8009284:	4b11      	ldr	r3, [pc, #68]	; (80092cc <rand+0x70>)
 8009286:	6083      	str	r3, [r0, #8]
 8009288:	230b      	movs	r3, #11
 800928a:	8183      	strh	r3, [r0, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	2300      	movs	r3, #0
 8009290:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009294:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009296:	4a0e      	ldr	r2, [pc, #56]	; (80092d0 <rand+0x74>)
 8009298:	6920      	ldr	r0, [r4, #16]
 800929a:	6963      	ldr	r3, [r4, #20]
 800929c:	490d      	ldr	r1, [pc, #52]	; (80092d4 <rand+0x78>)
 800929e:	4342      	muls	r2, r0
 80092a0:	fb01 2203 	mla	r2, r1, r3, r2
 80092a4:	fba0 0101 	umull	r0, r1, r0, r1
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	eb42 0001 	adc.w	r0, r2, r1
 80092ae:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80092b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80092b6:	bd10      	pop	{r4, pc}
 80092b8:	20000118 	.word	0x20000118
 80092bc:	0800a898 	.word	0x0800a898
 80092c0:	0800a8af 	.word	0x0800a8af
 80092c4:	abcd330e 	.word	0xabcd330e
 80092c8:	e66d1234 	.word	0xe66d1234
 80092cc:	0005deec 	.word	0x0005deec
 80092d0:	5851f42d 	.word	0x5851f42d
 80092d4:	4c957f2d 	.word	0x4c957f2d

080092d8 <siprintf>:
 80092d8:	b40e      	push	{r1, r2, r3}
 80092da:	b500      	push	{lr}
 80092dc:	b09c      	sub	sp, #112	; 0x70
 80092de:	ab1d      	add	r3, sp, #116	; 0x74
 80092e0:	9002      	str	r0, [sp, #8]
 80092e2:	9006      	str	r0, [sp, #24]
 80092e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092e8:	4809      	ldr	r0, [pc, #36]	; (8009310 <siprintf+0x38>)
 80092ea:	9107      	str	r1, [sp, #28]
 80092ec:	9104      	str	r1, [sp, #16]
 80092ee:	4909      	ldr	r1, [pc, #36]	; (8009314 <siprintf+0x3c>)
 80092f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092f4:	9105      	str	r1, [sp, #20]
 80092f6:	6800      	ldr	r0, [r0, #0]
 80092f8:	9301      	str	r3, [sp, #4]
 80092fa:	a902      	add	r1, sp, #8
 80092fc:	f000 f980 	bl	8009600 <_svfiprintf_r>
 8009300:	9b02      	ldr	r3, [sp, #8]
 8009302:	2200      	movs	r2, #0
 8009304:	701a      	strb	r2, [r3, #0]
 8009306:	b01c      	add	sp, #112	; 0x70
 8009308:	f85d eb04 	ldr.w	lr, [sp], #4
 800930c:	b003      	add	sp, #12
 800930e:	4770      	bx	lr
 8009310:	20000118 	.word	0x20000118
 8009314:	ffff0208 	.word	0xffff0208

08009318 <__assert_func>:
 8009318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800931a:	4614      	mov	r4, r2
 800931c:	461a      	mov	r2, r3
 800931e:	4b09      	ldr	r3, [pc, #36]	; (8009344 <__assert_func+0x2c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4605      	mov	r5, r0
 8009324:	68d8      	ldr	r0, [r3, #12]
 8009326:	b14c      	cbz	r4, 800933c <__assert_func+0x24>
 8009328:	4b07      	ldr	r3, [pc, #28]	; (8009348 <__assert_func+0x30>)
 800932a:	9100      	str	r1, [sp, #0]
 800932c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009330:	4906      	ldr	r1, [pc, #24]	; (800934c <__assert_func+0x34>)
 8009332:	462b      	mov	r3, r5
 8009334:	f000 f80e 	bl	8009354 <fiprintf>
 8009338:	f000 fe20 	bl	8009f7c <abort>
 800933c:	4b04      	ldr	r3, [pc, #16]	; (8009350 <__assert_func+0x38>)
 800933e:	461c      	mov	r4, r3
 8009340:	e7f3      	b.n	800932a <__assert_func+0x12>
 8009342:	bf00      	nop
 8009344:	20000118 	.word	0x20000118
 8009348:	0800a90a 	.word	0x0800a90a
 800934c:	0800a917 	.word	0x0800a917
 8009350:	0800a945 	.word	0x0800a945

08009354 <fiprintf>:
 8009354:	b40e      	push	{r1, r2, r3}
 8009356:	b503      	push	{r0, r1, lr}
 8009358:	4601      	mov	r1, r0
 800935a:	ab03      	add	r3, sp, #12
 800935c:	4805      	ldr	r0, [pc, #20]	; (8009374 <fiprintf+0x20>)
 800935e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009362:	6800      	ldr	r0, [r0, #0]
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	f000 fa75 	bl	8009854 <_vfiprintf_r>
 800936a:	b002      	add	sp, #8
 800936c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009370:	b003      	add	sp, #12
 8009372:	4770      	bx	lr
 8009374:	20000118 	.word	0x20000118

08009378 <malloc>:
 8009378:	4b02      	ldr	r3, [pc, #8]	; (8009384 <malloc+0xc>)
 800937a:	4601      	mov	r1, r0
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	f000 b86f 	b.w	8009460 <_malloc_r>
 8009382:	bf00      	nop
 8009384:	20000118 	.word	0x20000118

08009388 <_free_r>:
 8009388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800938a:	2900      	cmp	r1, #0
 800938c:	d044      	beq.n	8009418 <_free_r+0x90>
 800938e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009392:	9001      	str	r0, [sp, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	f1a1 0404 	sub.w	r4, r1, #4
 800939a:	bfb8      	it	lt
 800939c:	18e4      	addlt	r4, r4, r3
 800939e:	f001 f83d 	bl	800a41c <__malloc_lock>
 80093a2:	4a1e      	ldr	r2, [pc, #120]	; (800941c <_free_r+0x94>)
 80093a4:	9801      	ldr	r0, [sp, #4]
 80093a6:	6813      	ldr	r3, [r2, #0]
 80093a8:	b933      	cbnz	r3, 80093b8 <_free_r+0x30>
 80093aa:	6063      	str	r3, [r4, #4]
 80093ac:	6014      	str	r4, [r2, #0]
 80093ae:	b003      	add	sp, #12
 80093b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093b4:	f001 b838 	b.w	800a428 <__malloc_unlock>
 80093b8:	42a3      	cmp	r3, r4
 80093ba:	d908      	bls.n	80093ce <_free_r+0x46>
 80093bc:	6825      	ldr	r5, [r4, #0]
 80093be:	1961      	adds	r1, r4, r5
 80093c0:	428b      	cmp	r3, r1
 80093c2:	bf01      	itttt	eq
 80093c4:	6819      	ldreq	r1, [r3, #0]
 80093c6:	685b      	ldreq	r3, [r3, #4]
 80093c8:	1949      	addeq	r1, r1, r5
 80093ca:	6021      	streq	r1, [r4, #0]
 80093cc:	e7ed      	b.n	80093aa <_free_r+0x22>
 80093ce:	461a      	mov	r2, r3
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	b10b      	cbz	r3, 80093d8 <_free_r+0x50>
 80093d4:	42a3      	cmp	r3, r4
 80093d6:	d9fa      	bls.n	80093ce <_free_r+0x46>
 80093d8:	6811      	ldr	r1, [r2, #0]
 80093da:	1855      	adds	r5, r2, r1
 80093dc:	42a5      	cmp	r5, r4
 80093de:	d10b      	bne.n	80093f8 <_free_r+0x70>
 80093e0:	6824      	ldr	r4, [r4, #0]
 80093e2:	4421      	add	r1, r4
 80093e4:	1854      	adds	r4, r2, r1
 80093e6:	42a3      	cmp	r3, r4
 80093e8:	6011      	str	r1, [r2, #0]
 80093ea:	d1e0      	bne.n	80093ae <_free_r+0x26>
 80093ec:	681c      	ldr	r4, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	6053      	str	r3, [r2, #4]
 80093f2:	4421      	add	r1, r4
 80093f4:	6011      	str	r1, [r2, #0]
 80093f6:	e7da      	b.n	80093ae <_free_r+0x26>
 80093f8:	d902      	bls.n	8009400 <_free_r+0x78>
 80093fa:	230c      	movs	r3, #12
 80093fc:	6003      	str	r3, [r0, #0]
 80093fe:	e7d6      	b.n	80093ae <_free_r+0x26>
 8009400:	6825      	ldr	r5, [r4, #0]
 8009402:	1961      	adds	r1, r4, r5
 8009404:	428b      	cmp	r3, r1
 8009406:	bf04      	itt	eq
 8009408:	6819      	ldreq	r1, [r3, #0]
 800940a:	685b      	ldreq	r3, [r3, #4]
 800940c:	6063      	str	r3, [r4, #4]
 800940e:	bf04      	itt	eq
 8009410:	1949      	addeq	r1, r1, r5
 8009412:	6021      	streq	r1, [r4, #0]
 8009414:	6054      	str	r4, [r2, #4]
 8009416:	e7ca      	b.n	80093ae <_free_r+0x26>
 8009418:	b003      	add	sp, #12
 800941a:	bd30      	pop	{r4, r5, pc}
 800941c:	20000894 	.word	0x20000894

08009420 <sbrk_aligned>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	4e0e      	ldr	r6, [pc, #56]	; (800945c <sbrk_aligned+0x3c>)
 8009424:	460c      	mov	r4, r1
 8009426:	6831      	ldr	r1, [r6, #0]
 8009428:	4605      	mov	r5, r0
 800942a:	b911      	cbnz	r1, 8009432 <sbrk_aligned+0x12>
 800942c:	f000 fcd6 	bl	8009ddc <_sbrk_r>
 8009430:	6030      	str	r0, [r6, #0]
 8009432:	4621      	mov	r1, r4
 8009434:	4628      	mov	r0, r5
 8009436:	f000 fcd1 	bl	8009ddc <_sbrk_r>
 800943a:	1c43      	adds	r3, r0, #1
 800943c:	d00a      	beq.n	8009454 <sbrk_aligned+0x34>
 800943e:	1cc4      	adds	r4, r0, #3
 8009440:	f024 0403 	bic.w	r4, r4, #3
 8009444:	42a0      	cmp	r0, r4
 8009446:	d007      	beq.n	8009458 <sbrk_aligned+0x38>
 8009448:	1a21      	subs	r1, r4, r0
 800944a:	4628      	mov	r0, r5
 800944c:	f000 fcc6 	bl	8009ddc <_sbrk_r>
 8009450:	3001      	adds	r0, #1
 8009452:	d101      	bne.n	8009458 <sbrk_aligned+0x38>
 8009454:	f04f 34ff 	mov.w	r4, #4294967295
 8009458:	4620      	mov	r0, r4
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	20000898 	.word	0x20000898

08009460 <_malloc_r>:
 8009460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009464:	1ccd      	adds	r5, r1, #3
 8009466:	f025 0503 	bic.w	r5, r5, #3
 800946a:	3508      	adds	r5, #8
 800946c:	2d0c      	cmp	r5, #12
 800946e:	bf38      	it	cc
 8009470:	250c      	movcc	r5, #12
 8009472:	2d00      	cmp	r5, #0
 8009474:	4607      	mov	r7, r0
 8009476:	db01      	blt.n	800947c <_malloc_r+0x1c>
 8009478:	42a9      	cmp	r1, r5
 800947a:	d905      	bls.n	8009488 <_malloc_r+0x28>
 800947c:	230c      	movs	r3, #12
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	2600      	movs	r6, #0
 8009482:	4630      	mov	r0, r6
 8009484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009488:	4e2e      	ldr	r6, [pc, #184]	; (8009544 <_malloc_r+0xe4>)
 800948a:	f000 ffc7 	bl	800a41c <__malloc_lock>
 800948e:	6833      	ldr	r3, [r6, #0]
 8009490:	461c      	mov	r4, r3
 8009492:	bb34      	cbnz	r4, 80094e2 <_malloc_r+0x82>
 8009494:	4629      	mov	r1, r5
 8009496:	4638      	mov	r0, r7
 8009498:	f7ff ffc2 	bl	8009420 <sbrk_aligned>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	4604      	mov	r4, r0
 80094a0:	d14d      	bne.n	800953e <_malloc_r+0xde>
 80094a2:	6834      	ldr	r4, [r6, #0]
 80094a4:	4626      	mov	r6, r4
 80094a6:	2e00      	cmp	r6, #0
 80094a8:	d140      	bne.n	800952c <_malloc_r+0xcc>
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	4631      	mov	r1, r6
 80094ae:	4638      	mov	r0, r7
 80094b0:	eb04 0803 	add.w	r8, r4, r3
 80094b4:	f000 fc92 	bl	8009ddc <_sbrk_r>
 80094b8:	4580      	cmp	r8, r0
 80094ba:	d13a      	bne.n	8009532 <_malloc_r+0xd2>
 80094bc:	6821      	ldr	r1, [r4, #0]
 80094be:	3503      	adds	r5, #3
 80094c0:	1a6d      	subs	r5, r5, r1
 80094c2:	f025 0503 	bic.w	r5, r5, #3
 80094c6:	3508      	adds	r5, #8
 80094c8:	2d0c      	cmp	r5, #12
 80094ca:	bf38      	it	cc
 80094cc:	250c      	movcc	r5, #12
 80094ce:	4629      	mov	r1, r5
 80094d0:	4638      	mov	r0, r7
 80094d2:	f7ff ffa5 	bl	8009420 <sbrk_aligned>
 80094d6:	3001      	adds	r0, #1
 80094d8:	d02b      	beq.n	8009532 <_malloc_r+0xd2>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	442b      	add	r3, r5
 80094de:	6023      	str	r3, [r4, #0]
 80094e0:	e00e      	b.n	8009500 <_malloc_r+0xa0>
 80094e2:	6822      	ldr	r2, [r4, #0]
 80094e4:	1b52      	subs	r2, r2, r5
 80094e6:	d41e      	bmi.n	8009526 <_malloc_r+0xc6>
 80094e8:	2a0b      	cmp	r2, #11
 80094ea:	d916      	bls.n	800951a <_malloc_r+0xba>
 80094ec:	1961      	adds	r1, r4, r5
 80094ee:	42a3      	cmp	r3, r4
 80094f0:	6025      	str	r5, [r4, #0]
 80094f2:	bf18      	it	ne
 80094f4:	6059      	strne	r1, [r3, #4]
 80094f6:	6863      	ldr	r3, [r4, #4]
 80094f8:	bf08      	it	eq
 80094fa:	6031      	streq	r1, [r6, #0]
 80094fc:	5162      	str	r2, [r4, r5]
 80094fe:	604b      	str	r3, [r1, #4]
 8009500:	4638      	mov	r0, r7
 8009502:	f104 060b 	add.w	r6, r4, #11
 8009506:	f000 ff8f 	bl	800a428 <__malloc_unlock>
 800950a:	f026 0607 	bic.w	r6, r6, #7
 800950e:	1d23      	adds	r3, r4, #4
 8009510:	1af2      	subs	r2, r6, r3
 8009512:	d0b6      	beq.n	8009482 <_malloc_r+0x22>
 8009514:	1b9b      	subs	r3, r3, r6
 8009516:	50a3      	str	r3, [r4, r2]
 8009518:	e7b3      	b.n	8009482 <_malloc_r+0x22>
 800951a:	6862      	ldr	r2, [r4, #4]
 800951c:	42a3      	cmp	r3, r4
 800951e:	bf0c      	ite	eq
 8009520:	6032      	streq	r2, [r6, #0]
 8009522:	605a      	strne	r2, [r3, #4]
 8009524:	e7ec      	b.n	8009500 <_malloc_r+0xa0>
 8009526:	4623      	mov	r3, r4
 8009528:	6864      	ldr	r4, [r4, #4]
 800952a:	e7b2      	b.n	8009492 <_malloc_r+0x32>
 800952c:	4634      	mov	r4, r6
 800952e:	6876      	ldr	r6, [r6, #4]
 8009530:	e7b9      	b.n	80094a6 <_malloc_r+0x46>
 8009532:	230c      	movs	r3, #12
 8009534:	603b      	str	r3, [r7, #0]
 8009536:	4638      	mov	r0, r7
 8009538:	f000 ff76 	bl	800a428 <__malloc_unlock>
 800953c:	e7a1      	b.n	8009482 <_malloc_r+0x22>
 800953e:	6025      	str	r5, [r4, #0]
 8009540:	e7de      	b.n	8009500 <_malloc_r+0xa0>
 8009542:	bf00      	nop
 8009544:	20000894 	.word	0x20000894

08009548 <__ssputs_r>:
 8009548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800954c:	688e      	ldr	r6, [r1, #8]
 800954e:	429e      	cmp	r6, r3
 8009550:	4682      	mov	sl, r0
 8009552:	460c      	mov	r4, r1
 8009554:	4690      	mov	r8, r2
 8009556:	461f      	mov	r7, r3
 8009558:	d838      	bhi.n	80095cc <__ssputs_r+0x84>
 800955a:	898a      	ldrh	r2, [r1, #12]
 800955c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009560:	d032      	beq.n	80095c8 <__ssputs_r+0x80>
 8009562:	6825      	ldr	r5, [r4, #0]
 8009564:	6909      	ldr	r1, [r1, #16]
 8009566:	eba5 0901 	sub.w	r9, r5, r1
 800956a:	6965      	ldr	r5, [r4, #20]
 800956c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009570:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009574:	3301      	adds	r3, #1
 8009576:	444b      	add	r3, r9
 8009578:	106d      	asrs	r5, r5, #1
 800957a:	429d      	cmp	r5, r3
 800957c:	bf38      	it	cc
 800957e:	461d      	movcc	r5, r3
 8009580:	0553      	lsls	r3, r2, #21
 8009582:	d531      	bpl.n	80095e8 <__ssputs_r+0xa0>
 8009584:	4629      	mov	r1, r5
 8009586:	f7ff ff6b 	bl	8009460 <_malloc_r>
 800958a:	4606      	mov	r6, r0
 800958c:	b950      	cbnz	r0, 80095a4 <__ssputs_r+0x5c>
 800958e:	230c      	movs	r3, #12
 8009590:	f8ca 3000 	str.w	r3, [sl]
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800959a:	81a3      	strh	r3, [r4, #12]
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a4:	6921      	ldr	r1, [r4, #16]
 80095a6:	464a      	mov	r2, r9
 80095a8:	f000 ff10 	bl	800a3cc <memcpy>
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	6126      	str	r6, [r4, #16]
 80095ba:	6165      	str	r5, [r4, #20]
 80095bc:	444e      	add	r6, r9
 80095be:	eba5 0509 	sub.w	r5, r5, r9
 80095c2:	6026      	str	r6, [r4, #0]
 80095c4:	60a5      	str	r5, [r4, #8]
 80095c6:	463e      	mov	r6, r7
 80095c8:	42be      	cmp	r6, r7
 80095ca:	d900      	bls.n	80095ce <__ssputs_r+0x86>
 80095cc:	463e      	mov	r6, r7
 80095ce:	6820      	ldr	r0, [r4, #0]
 80095d0:	4632      	mov	r2, r6
 80095d2:	4641      	mov	r1, r8
 80095d4:	f000 ff08 	bl	800a3e8 <memmove>
 80095d8:	68a3      	ldr	r3, [r4, #8]
 80095da:	1b9b      	subs	r3, r3, r6
 80095dc:	60a3      	str	r3, [r4, #8]
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	4433      	add	r3, r6
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	2000      	movs	r0, #0
 80095e6:	e7db      	b.n	80095a0 <__ssputs_r+0x58>
 80095e8:	462a      	mov	r2, r5
 80095ea:	f000 ff23 	bl	800a434 <_realloc_r>
 80095ee:	4606      	mov	r6, r0
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d1e1      	bne.n	80095b8 <__ssputs_r+0x70>
 80095f4:	6921      	ldr	r1, [r4, #16]
 80095f6:	4650      	mov	r0, sl
 80095f8:	f7ff fec6 	bl	8009388 <_free_r>
 80095fc:	e7c7      	b.n	800958e <__ssputs_r+0x46>
	...

08009600 <_svfiprintf_r>:
 8009600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009604:	4698      	mov	r8, r3
 8009606:	898b      	ldrh	r3, [r1, #12]
 8009608:	061b      	lsls	r3, r3, #24
 800960a:	b09d      	sub	sp, #116	; 0x74
 800960c:	4607      	mov	r7, r0
 800960e:	460d      	mov	r5, r1
 8009610:	4614      	mov	r4, r2
 8009612:	d50e      	bpl.n	8009632 <_svfiprintf_r+0x32>
 8009614:	690b      	ldr	r3, [r1, #16]
 8009616:	b963      	cbnz	r3, 8009632 <_svfiprintf_r+0x32>
 8009618:	2140      	movs	r1, #64	; 0x40
 800961a:	f7ff ff21 	bl	8009460 <_malloc_r>
 800961e:	6028      	str	r0, [r5, #0]
 8009620:	6128      	str	r0, [r5, #16]
 8009622:	b920      	cbnz	r0, 800962e <_svfiprintf_r+0x2e>
 8009624:	230c      	movs	r3, #12
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	f04f 30ff 	mov.w	r0, #4294967295
 800962c:	e0d1      	b.n	80097d2 <_svfiprintf_r+0x1d2>
 800962e:	2340      	movs	r3, #64	; 0x40
 8009630:	616b      	str	r3, [r5, #20]
 8009632:	2300      	movs	r3, #0
 8009634:	9309      	str	r3, [sp, #36]	; 0x24
 8009636:	2320      	movs	r3, #32
 8009638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800963c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009640:	2330      	movs	r3, #48	; 0x30
 8009642:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80097ec <_svfiprintf_r+0x1ec>
 8009646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800964a:	f04f 0901 	mov.w	r9, #1
 800964e:	4623      	mov	r3, r4
 8009650:	469a      	mov	sl, r3
 8009652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009656:	b10a      	cbz	r2, 800965c <_svfiprintf_r+0x5c>
 8009658:	2a25      	cmp	r2, #37	; 0x25
 800965a:	d1f9      	bne.n	8009650 <_svfiprintf_r+0x50>
 800965c:	ebba 0b04 	subs.w	fp, sl, r4
 8009660:	d00b      	beq.n	800967a <_svfiprintf_r+0x7a>
 8009662:	465b      	mov	r3, fp
 8009664:	4622      	mov	r2, r4
 8009666:	4629      	mov	r1, r5
 8009668:	4638      	mov	r0, r7
 800966a:	f7ff ff6d 	bl	8009548 <__ssputs_r>
 800966e:	3001      	adds	r0, #1
 8009670:	f000 80aa 	beq.w	80097c8 <_svfiprintf_r+0x1c8>
 8009674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009676:	445a      	add	r2, fp
 8009678:	9209      	str	r2, [sp, #36]	; 0x24
 800967a:	f89a 3000 	ldrb.w	r3, [sl]
 800967e:	2b00      	cmp	r3, #0
 8009680:	f000 80a2 	beq.w	80097c8 <_svfiprintf_r+0x1c8>
 8009684:	2300      	movs	r3, #0
 8009686:	f04f 32ff 	mov.w	r2, #4294967295
 800968a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800968e:	f10a 0a01 	add.w	sl, sl, #1
 8009692:	9304      	str	r3, [sp, #16]
 8009694:	9307      	str	r3, [sp, #28]
 8009696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800969a:	931a      	str	r3, [sp, #104]	; 0x68
 800969c:	4654      	mov	r4, sl
 800969e:	2205      	movs	r2, #5
 80096a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a4:	4851      	ldr	r0, [pc, #324]	; (80097ec <_svfiprintf_r+0x1ec>)
 80096a6:	f7f6 fd9b 	bl	80001e0 <memchr>
 80096aa:	9a04      	ldr	r2, [sp, #16]
 80096ac:	b9d8      	cbnz	r0, 80096e6 <_svfiprintf_r+0xe6>
 80096ae:	06d0      	lsls	r0, r2, #27
 80096b0:	bf44      	itt	mi
 80096b2:	2320      	movmi	r3, #32
 80096b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096b8:	0711      	lsls	r1, r2, #28
 80096ba:	bf44      	itt	mi
 80096bc:	232b      	movmi	r3, #43	; 0x2b
 80096be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c2:	f89a 3000 	ldrb.w	r3, [sl]
 80096c6:	2b2a      	cmp	r3, #42	; 0x2a
 80096c8:	d015      	beq.n	80096f6 <_svfiprintf_r+0xf6>
 80096ca:	9a07      	ldr	r2, [sp, #28]
 80096cc:	4654      	mov	r4, sl
 80096ce:	2000      	movs	r0, #0
 80096d0:	f04f 0c0a 	mov.w	ip, #10
 80096d4:	4621      	mov	r1, r4
 80096d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096da:	3b30      	subs	r3, #48	; 0x30
 80096dc:	2b09      	cmp	r3, #9
 80096de:	d94e      	bls.n	800977e <_svfiprintf_r+0x17e>
 80096e0:	b1b0      	cbz	r0, 8009710 <_svfiprintf_r+0x110>
 80096e2:	9207      	str	r2, [sp, #28]
 80096e4:	e014      	b.n	8009710 <_svfiprintf_r+0x110>
 80096e6:	eba0 0308 	sub.w	r3, r0, r8
 80096ea:	fa09 f303 	lsl.w	r3, r9, r3
 80096ee:	4313      	orrs	r3, r2
 80096f0:	9304      	str	r3, [sp, #16]
 80096f2:	46a2      	mov	sl, r4
 80096f4:	e7d2      	b.n	800969c <_svfiprintf_r+0x9c>
 80096f6:	9b03      	ldr	r3, [sp, #12]
 80096f8:	1d19      	adds	r1, r3, #4
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	9103      	str	r1, [sp, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	bfbb      	ittet	lt
 8009702:	425b      	neglt	r3, r3
 8009704:	f042 0202 	orrlt.w	r2, r2, #2
 8009708:	9307      	strge	r3, [sp, #28]
 800970a:	9307      	strlt	r3, [sp, #28]
 800970c:	bfb8      	it	lt
 800970e:	9204      	strlt	r2, [sp, #16]
 8009710:	7823      	ldrb	r3, [r4, #0]
 8009712:	2b2e      	cmp	r3, #46	; 0x2e
 8009714:	d10c      	bne.n	8009730 <_svfiprintf_r+0x130>
 8009716:	7863      	ldrb	r3, [r4, #1]
 8009718:	2b2a      	cmp	r3, #42	; 0x2a
 800971a:	d135      	bne.n	8009788 <_svfiprintf_r+0x188>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	1d1a      	adds	r2, r3, #4
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	9203      	str	r2, [sp, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	bfb8      	it	lt
 8009728:	f04f 33ff 	movlt.w	r3, #4294967295
 800972c:	3402      	adds	r4, #2
 800972e:	9305      	str	r3, [sp, #20]
 8009730:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097fc <_svfiprintf_r+0x1fc>
 8009734:	7821      	ldrb	r1, [r4, #0]
 8009736:	2203      	movs	r2, #3
 8009738:	4650      	mov	r0, sl
 800973a:	f7f6 fd51 	bl	80001e0 <memchr>
 800973e:	b140      	cbz	r0, 8009752 <_svfiprintf_r+0x152>
 8009740:	2340      	movs	r3, #64	; 0x40
 8009742:	eba0 000a 	sub.w	r0, r0, sl
 8009746:	fa03 f000 	lsl.w	r0, r3, r0
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	4303      	orrs	r3, r0
 800974e:	3401      	adds	r4, #1
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009756:	4826      	ldr	r0, [pc, #152]	; (80097f0 <_svfiprintf_r+0x1f0>)
 8009758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800975c:	2206      	movs	r2, #6
 800975e:	f7f6 fd3f 	bl	80001e0 <memchr>
 8009762:	2800      	cmp	r0, #0
 8009764:	d038      	beq.n	80097d8 <_svfiprintf_r+0x1d8>
 8009766:	4b23      	ldr	r3, [pc, #140]	; (80097f4 <_svfiprintf_r+0x1f4>)
 8009768:	bb1b      	cbnz	r3, 80097b2 <_svfiprintf_r+0x1b2>
 800976a:	9b03      	ldr	r3, [sp, #12]
 800976c:	3307      	adds	r3, #7
 800976e:	f023 0307 	bic.w	r3, r3, #7
 8009772:	3308      	adds	r3, #8
 8009774:	9303      	str	r3, [sp, #12]
 8009776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009778:	4433      	add	r3, r6
 800977a:	9309      	str	r3, [sp, #36]	; 0x24
 800977c:	e767      	b.n	800964e <_svfiprintf_r+0x4e>
 800977e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009782:	460c      	mov	r4, r1
 8009784:	2001      	movs	r0, #1
 8009786:	e7a5      	b.n	80096d4 <_svfiprintf_r+0xd4>
 8009788:	2300      	movs	r3, #0
 800978a:	3401      	adds	r4, #1
 800978c:	9305      	str	r3, [sp, #20]
 800978e:	4619      	mov	r1, r3
 8009790:	f04f 0c0a 	mov.w	ip, #10
 8009794:	4620      	mov	r0, r4
 8009796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800979a:	3a30      	subs	r2, #48	; 0x30
 800979c:	2a09      	cmp	r2, #9
 800979e:	d903      	bls.n	80097a8 <_svfiprintf_r+0x1a8>
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0c5      	beq.n	8009730 <_svfiprintf_r+0x130>
 80097a4:	9105      	str	r1, [sp, #20]
 80097a6:	e7c3      	b.n	8009730 <_svfiprintf_r+0x130>
 80097a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ac:	4604      	mov	r4, r0
 80097ae:	2301      	movs	r3, #1
 80097b0:	e7f0      	b.n	8009794 <_svfiprintf_r+0x194>
 80097b2:	ab03      	add	r3, sp, #12
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	462a      	mov	r2, r5
 80097b8:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <_svfiprintf_r+0x1f8>)
 80097ba:	a904      	add	r1, sp, #16
 80097bc:	4638      	mov	r0, r7
 80097be:	f3af 8000 	nop.w
 80097c2:	1c42      	adds	r2, r0, #1
 80097c4:	4606      	mov	r6, r0
 80097c6:	d1d6      	bne.n	8009776 <_svfiprintf_r+0x176>
 80097c8:	89ab      	ldrh	r3, [r5, #12]
 80097ca:	065b      	lsls	r3, r3, #25
 80097cc:	f53f af2c 	bmi.w	8009628 <_svfiprintf_r+0x28>
 80097d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097d2:	b01d      	add	sp, #116	; 0x74
 80097d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d8:	ab03      	add	r3, sp, #12
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	462a      	mov	r2, r5
 80097de:	4b06      	ldr	r3, [pc, #24]	; (80097f8 <_svfiprintf_r+0x1f8>)
 80097e0:	a904      	add	r1, sp, #16
 80097e2:	4638      	mov	r0, r7
 80097e4:	f000 f9d4 	bl	8009b90 <_printf_i>
 80097e8:	e7eb      	b.n	80097c2 <_svfiprintf_r+0x1c2>
 80097ea:	bf00      	nop
 80097ec:	0800a946 	.word	0x0800a946
 80097f0:	0800a950 	.word	0x0800a950
 80097f4:	00000000 	.word	0x00000000
 80097f8:	08009549 	.word	0x08009549
 80097fc:	0800a94c 	.word	0x0800a94c

08009800 <__sfputc_r>:
 8009800:	6893      	ldr	r3, [r2, #8]
 8009802:	3b01      	subs	r3, #1
 8009804:	2b00      	cmp	r3, #0
 8009806:	b410      	push	{r4}
 8009808:	6093      	str	r3, [r2, #8]
 800980a:	da08      	bge.n	800981e <__sfputc_r+0x1e>
 800980c:	6994      	ldr	r4, [r2, #24]
 800980e:	42a3      	cmp	r3, r4
 8009810:	db01      	blt.n	8009816 <__sfputc_r+0x16>
 8009812:	290a      	cmp	r1, #10
 8009814:	d103      	bne.n	800981e <__sfputc_r+0x1e>
 8009816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800981a:	f000 baef 	b.w	8009dfc <__swbuf_r>
 800981e:	6813      	ldr	r3, [r2, #0]
 8009820:	1c58      	adds	r0, r3, #1
 8009822:	6010      	str	r0, [r2, #0]
 8009824:	7019      	strb	r1, [r3, #0]
 8009826:	4608      	mov	r0, r1
 8009828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800982c:	4770      	bx	lr

0800982e <__sfputs_r>:
 800982e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009830:	4606      	mov	r6, r0
 8009832:	460f      	mov	r7, r1
 8009834:	4614      	mov	r4, r2
 8009836:	18d5      	adds	r5, r2, r3
 8009838:	42ac      	cmp	r4, r5
 800983a:	d101      	bne.n	8009840 <__sfputs_r+0x12>
 800983c:	2000      	movs	r0, #0
 800983e:	e007      	b.n	8009850 <__sfputs_r+0x22>
 8009840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009844:	463a      	mov	r2, r7
 8009846:	4630      	mov	r0, r6
 8009848:	f7ff ffda 	bl	8009800 <__sfputc_r>
 800984c:	1c43      	adds	r3, r0, #1
 800984e:	d1f3      	bne.n	8009838 <__sfputs_r+0xa>
 8009850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009854 <_vfiprintf_r>:
 8009854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009858:	460d      	mov	r5, r1
 800985a:	b09d      	sub	sp, #116	; 0x74
 800985c:	4614      	mov	r4, r2
 800985e:	4698      	mov	r8, r3
 8009860:	4606      	mov	r6, r0
 8009862:	b118      	cbz	r0, 800986c <_vfiprintf_r+0x18>
 8009864:	6983      	ldr	r3, [r0, #24]
 8009866:	b90b      	cbnz	r3, 800986c <_vfiprintf_r+0x18>
 8009868:	f000 fcaa 	bl	800a1c0 <__sinit>
 800986c:	4b89      	ldr	r3, [pc, #548]	; (8009a94 <_vfiprintf_r+0x240>)
 800986e:	429d      	cmp	r5, r3
 8009870:	d11b      	bne.n	80098aa <_vfiprintf_r+0x56>
 8009872:	6875      	ldr	r5, [r6, #4]
 8009874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009876:	07d9      	lsls	r1, r3, #31
 8009878:	d405      	bmi.n	8009886 <_vfiprintf_r+0x32>
 800987a:	89ab      	ldrh	r3, [r5, #12]
 800987c:	059a      	lsls	r2, r3, #22
 800987e:	d402      	bmi.n	8009886 <_vfiprintf_r+0x32>
 8009880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009882:	f000 fd3b 	bl	800a2fc <__retarget_lock_acquire_recursive>
 8009886:	89ab      	ldrh	r3, [r5, #12]
 8009888:	071b      	lsls	r3, r3, #28
 800988a:	d501      	bpl.n	8009890 <_vfiprintf_r+0x3c>
 800988c:	692b      	ldr	r3, [r5, #16]
 800988e:	b9eb      	cbnz	r3, 80098cc <_vfiprintf_r+0x78>
 8009890:	4629      	mov	r1, r5
 8009892:	4630      	mov	r0, r6
 8009894:	f000 fb04 	bl	8009ea0 <__swsetup_r>
 8009898:	b1c0      	cbz	r0, 80098cc <_vfiprintf_r+0x78>
 800989a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800989c:	07dc      	lsls	r4, r3, #31
 800989e:	d50e      	bpl.n	80098be <_vfiprintf_r+0x6a>
 80098a0:	f04f 30ff 	mov.w	r0, #4294967295
 80098a4:	b01d      	add	sp, #116	; 0x74
 80098a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098aa:	4b7b      	ldr	r3, [pc, #492]	; (8009a98 <_vfiprintf_r+0x244>)
 80098ac:	429d      	cmp	r5, r3
 80098ae:	d101      	bne.n	80098b4 <_vfiprintf_r+0x60>
 80098b0:	68b5      	ldr	r5, [r6, #8]
 80098b2:	e7df      	b.n	8009874 <_vfiprintf_r+0x20>
 80098b4:	4b79      	ldr	r3, [pc, #484]	; (8009a9c <_vfiprintf_r+0x248>)
 80098b6:	429d      	cmp	r5, r3
 80098b8:	bf08      	it	eq
 80098ba:	68f5      	ldreq	r5, [r6, #12]
 80098bc:	e7da      	b.n	8009874 <_vfiprintf_r+0x20>
 80098be:	89ab      	ldrh	r3, [r5, #12]
 80098c0:	0598      	lsls	r0, r3, #22
 80098c2:	d4ed      	bmi.n	80098a0 <_vfiprintf_r+0x4c>
 80098c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098c6:	f000 fd1a 	bl	800a2fe <__retarget_lock_release_recursive>
 80098ca:	e7e9      	b.n	80098a0 <_vfiprintf_r+0x4c>
 80098cc:	2300      	movs	r3, #0
 80098ce:	9309      	str	r3, [sp, #36]	; 0x24
 80098d0:	2320      	movs	r3, #32
 80098d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80098da:	2330      	movs	r3, #48	; 0x30
 80098dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009aa0 <_vfiprintf_r+0x24c>
 80098e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098e4:	f04f 0901 	mov.w	r9, #1
 80098e8:	4623      	mov	r3, r4
 80098ea:	469a      	mov	sl, r3
 80098ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098f0:	b10a      	cbz	r2, 80098f6 <_vfiprintf_r+0xa2>
 80098f2:	2a25      	cmp	r2, #37	; 0x25
 80098f4:	d1f9      	bne.n	80098ea <_vfiprintf_r+0x96>
 80098f6:	ebba 0b04 	subs.w	fp, sl, r4
 80098fa:	d00b      	beq.n	8009914 <_vfiprintf_r+0xc0>
 80098fc:	465b      	mov	r3, fp
 80098fe:	4622      	mov	r2, r4
 8009900:	4629      	mov	r1, r5
 8009902:	4630      	mov	r0, r6
 8009904:	f7ff ff93 	bl	800982e <__sfputs_r>
 8009908:	3001      	adds	r0, #1
 800990a:	f000 80aa 	beq.w	8009a62 <_vfiprintf_r+0x20e>
 800990e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009910:	445a      	add	r2, fp
 8009912:	9209      	str	r2, [sp, #36]	; 0x24
 8009914:	f89a 3000 	ldrb.w	r3, [sl]
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 80a2 	beq.w	8009a62 <_vfiprintf_r+0x20e>
 800991e:	2300      	movs	r3, #0
 8009920:	f04f 32ff 	mov.w	r2, #4294967295
 8009924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009928:	f10a 0a01 	add.w	sl, sl, #1
 800992c:	9304      	str	r3, [sp, #16]
 800992e:	9307      	str	r3, [sp, #28]
 8009930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009934:	931a      	str	r3, [sp, #104]	; 0x68
 8009936:	4654      	mov	r4, sl
 8009938:	2205      	movs	r2, #5
 800993a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800993e:	4858      	ldr	r0, [pc, #352]	; (8009aa0 <_vfiprintf_r+0x24c>)
 8009940:	f7f6 fc4e 	bl	80001e0 <memchr>
 8009944:	9a04      	ldr	r2, [sp, #16]
 8009946:	b9d8      	cbnz	r0, 8009980 <_vfiprintf_r+0x12c>
 8009948:	06d1      	lsls	r1, r2, #27
 800994a:	bf44      	itt	mi
 800994c:	2320      	movmi	r3, #32
 800994e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009952:	0713      	lsls	r3, r2, #28
 8009954:	bf44      	itt	mi
 8009956:	232b      	movmi	r3, #43	; 0x2b
 8009958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800995c:	f89a 3000 	ldrb.w	r3, [sl]
 8009960:	2b2a      	cmp	r3, #42	; 0x2a
 8009962:	d015      	beq.n	8009990 <_vfiprintf_r+0x13c>
 8009964:	9a07      	ldr	r2, [sp, #28]
 8009966:	4654      	mov	r4, sl
 8009968:	2000      	movs	r0, #0
 800996a:	f04f 0c0a 	mov.w	ip, #10
 800996e:	4621      	mov	r1, r4
 8009970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009974:	3b30      	subs	r3, #48	; 0x30
 8009976:	2b09      	cmp	r3, #9
 8009978:	d94e      	bls.n	8009a18 <_vfiprintf_r+0x1c4>
 800997a:	b1b0      	cbz	r0, 80099aa <_vfiprintf_r+0x156>
 800997c:	9207      	str	r2, [sp, #28]
 800997e:	e014      	b.n	80099aa <_vfiprintf_r+0x156>
 8009980:	eba0 0308 	sub.w	r3, r0, r8
 8009984:	fa09 f303 	lsl.w	r3, r9, r3
 8009988:	4313      	orrs	r3, r2
 800998a:	9304      	str	r3, [sp, #16]
 800998c:	46a2      	mov	sl, r4
 800998e:	e7d2      	b.n	8009936 <_vfiprintf_r+0xe2>
 8009990:	9b03      	ldr	r3, [sp, #12]
 8009992:	1d19      	adds	r1, r3, #4
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	9103      	str	r1, [sp, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	bfbb      	ittet	lt
 800999c:	425b      	neglt	r3, r3
 800999e:	f042 0202 	orrlt.w	r2, r2, #2
 80099a2:	9307      	strge	r3, [sp, #28]
 80099a4:	9307      	strlt	r3, [sp, #28]
 80099a6:	bfb8      	it	lt
 80099a8:	9204      	strlt	r2, [sp, #16]
 80099aa:	7823      	ldrb	r3, [r4, #0]
 80099ac:	2b2e      	cmp	r3, #46	; 0x2e
 80099ae:	d10c      	bne.n	80099ca <_vfiprintf_r+0x176>
 80099b0:	7863      	ldrb	r3, [r4, #1]
 80099b2:	2b2a      	cmp	r3, #42	; 0x2a
 80099b4:	d135      	bne.n	8009a22 <_vfiprintf_r+0x1ce>
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	1d1a      	adds	r2, r3, #4
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	9203      	str	r2, [sp, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	bfb8      	it	lt
 80099c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80099c6:	3402      	adds	r4, #2
 80099c8:	9305      	str	r3, [sp, #20]
 80099ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ab0 <_vfiprintf_r+0x25c>
 80099ce:	7821      	ldrb	r1, [r4, #0]
 80099d0:	2203      	movs	r2, #3
 80099d2:	4650      	mov	r0, sl
 80099d4:	f7f6 fc04 	bl	80001e0 <memchr>
 80099d8:	b140      	cbz	r0, 80099ec <_vfiprintf_r+0x198>
 80099da:	2340      	movs	r3, #64	; 0x40
 80099dc:	eba0 000a 	sub.w	r0, r0, sl
 80099e0:	fa03 f000 	lsl.w	r0, r3, r0
 80099e4:	9b04      	ldr	r3, [sp, #16]
 80099e6:	4303      	orrs	r3, r0
 80099e8:	3401      	adds	r4, #1
 80099ea:	9304      	str	r3, [sp, #16]
 80099ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f0:	482c      	ldr	r0, [pc, #176]	; (8009aa4 <_vfiprintf_r+0x250>)
 80099f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099f6:	2206      	movs	r2, #6
 80099f8:	f7f6 fbf2 	bl	80001e0 <memchr>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d03f      	beq.n	8009a80 <_vfiprintf_r+0x22c>
 8009a00:	4b29      	ldr	r3, [pc, #164]	; (8009aa8 <_vfiprintf_r+0x254>)
 8009a02:	bb1b      	cbnz	r3, 8009a4c <_vfiprintf_r+0x1f8>
 8009a04:	9b03      	ldr	r3, [sp, #12]
 8009a06:	3307      	adds	r3, #7
 8009a08:	f023 0307 	bic.w	r3, r3, #7
 8009a0c:	3308      	adds	r3, #8
 8009a0e:	9303      	str	r3, [sp, #12]
 8009a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a12:	443b      	add	r3, r7
 8009a14:	9309      	str	r3, [sp, #36]	; 0x24
 8009a16:	e767      	b.n	80098e8 <_vfiprintf_r+0x94>
 8009a18:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	2001      	movs	r0, #1
 8009a20:	e7a5      	b.n	800996e <_vfiprintf_r+0x11a>
 8009a22:	2300      	movs	r3, #0
 8009a24:	3401      	adds	r4, #1
 8009a26:	9305      	str	r3, [sp, #20]
 8009a28:	4619      	mov	r1, r3
 8009a2a:	f04f 0c0a 	mov.w	ip, #10
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a34:	3a30      	subs	r2, #48	; 0x30
 8009a36:	2a09      	cmp	r2, #9
 8009a38:	d903      	bls.n	8009a42 <_vfiprintf_r+0x1ee>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d0c5      	beq.n	80099ca <_vfiprintf_r+0x176>
 8009a3e:	9105      	str	r1, [sp, #20]
 8009a40:	e7c3      	b.n	80099ca <_vfiprintf_r+0x176>
 8009a42:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a46:	4604      	mov	r4, r0
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e7f0      	b.n	8009a2e <_vfiprintf_r+0x1da>
 8009a4c:	ab03      	add	r3, sp, #12
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	462a      	mov	r2, r5
 8009a52:	4b16      	ldr	r3, [pc, #88]	; (8009aac <_vfiprintf_r+0x258>)
 8009a54:	a904      	add	r1, sp, #16
 8009a56:	4630      	mov	r0, r6
 8009a58:	f3af 8000 	nop.w
 8009a5c:	4607      	mov	r7, r0
 8009a5e:	1c78      	adds	r0, r7, #1
 8009a60:	d1d6      	bne.n	8009a10 <_vfiprintf_r+0x1bc>
 8009a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a64:	07d9      	lsls	r1, r3, #31
 8009a66:	d405      	bmi.n	8009a74 <_vfiprintf_r+0x220>
 8009a68:	89ab      	ldrh	r3, [r5, #12]
 8009a6a:	059a      	lsls	r2, r3, #22
 8009a6c:	d402      	bmi.n	8009a74 <_vfiprintf_r+0x220>
 8009a6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a70:	f000 fc45 	bl	800a2fe <__retarget_lock_release_recursive>
 8009a74:	89ab      	ldrh	r3, [r5, #12]
 8009a76:	065b      	lsls	r3, r3, #25
 8009a78:	f53f af12 	bmi.w	80098a0 <_vfiprintf_r+0x4c>
 8009a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a7e:	e711      	b.n	80098a4 <_vfiprintf_r+0x50>
 8009a80:	ab03      	add	r3, sp, #12
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	462a      	mov	r2, r5
 8009a86:	4b09      	ldr	r3, [pc, #36]	; (8009aac <_vfiprintf_r+0x258>)
 8009a88:	a904      	add	r1, sp, #16
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f000 f880 	bl	8009b90 <_printf_i>
 8009a90:	e7e4      	b.n	8009a5c <_vfiprintf_r+0x208>
 8009a92:	bf00      	nop
 8009a94:	0800a99c 	.word	0x0800a99c
 8009a98:	0800a9bc 	.word	0x0800a9bc
 8009a9c:	0800a97c 	.word	0x0800a97c
 8009aa0:	0800a946 	.word	0x0800a946
 8009aa4:	0800a950 	.word	0x0800a950
 8009aa8:	00000000 	.word	0x00000000
 8009aac:	0800982f 	.word	0x0800982f
 8009ab0:	0800a94c 	.word	0x0800a94c

08009ab4 <_printf_common>:
 8009ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab8:	4616      	mov	r6, r2
 8009aba:	4699      	mov	r9, r3
 8009abc:	688a      	ldr	r2, [r1, #8]
 8009abe:	690b      	ldr	r3, [r1, #16]
 8009ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	bfb8      	it	lt
 8009ac8:	4613      	movlt	r3, r2
 8009aca:	6033      	str	r3, [r6, #0]
 8009acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	b10a      	cbz	r2, 8009ada <_printf_common+0x26>
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	6033      	str	r3, [r6, #0]
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	0699      	lsls	r1, r3, #26
 8009ade:	bf42      	ittt	mi
 8009ae0:	6833      	ldrmi	r3, [r6, #0]
 8009ae2:	3302      	addmi	r3, #2
 8009ae4:	6033      	strmi	r3, [r6, #0]
 8009ae6:	6825      	ldr	r5, [r4, #0]
 8009ae8:	f015 0506 	ands.w	r5, r5, #6
 8009aec:	d106      	bne.n	8009afc <_printf_common+0x48>
 8009aee:	f104 0a19 	add.w	sl, r4, #25
 8009af2:	68e3      	ldr	r3, [r4, #12]
 8009af4:	6832      	ldr	r2, [r6, #0]
 8009af6:	1a9b      	subs	r3, r3, r2
 8009af8:	42ab      	cmp	r3, r5
 8009afa:	dc26      	bgt.n	8009b4a <_printf_common+0x96>
 8009afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b00:	1e13      	subs	r3, r2, #0
 8009b02:	6822      	ldr	r2, [r4, #0]
 8009b04:	bf18      	it	ne
 8009b06:	2301      	movne	r3, #1
 8009b08:	0692      	lsls	r2, r2, #26
 8009b0a:	d42b      	bmi.n	8009b64 <_printf_common+0xb0>
 8009b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b10:	4649      	mov	r1, r9
 8009b12:	4638      	mov	r0, r7
 8009b14:	47c0      	blx	r8
 8009b16:	3001      	adds	r0, #1
 8009b18:	d01e      	beq.n	8009b58 <_printf_common+0xa4>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	68e5      	ldr	r5, [r4, #12]
 8009b1e:	6832      	ldr	r2, [r6, #0]
 8009b20:	f003 0306 	and.w	r3, r3, #6
 8009b24:	2b04      	cmp	r3, #4
 8009b26:	bf08      	it	eq
 8009b28:	1aad      	subeq	r5, r5, r2
 8009b2a:	68a3      	ldr	r3, [r4, #8]
 8009b2c:	6922      	ldr	r2, [r4, #16]
 8009b2e:	bf0c      	ite	eq
 8009b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b34:	2500      	movne	r5, #0
 8009b36:	4293      	cmp	r3, r2
 8009b38:	bfc4      	itt	gt
 8009b3a:	1a9b      	subgt	r3, r3, r2
 8009b3c:	18ed      	addgt	r5, r5, r3
 8009b3e:	2600      	movs	r6, #0
 8009b40:	341a      	adds	r4, #26
 8009b42:	42b5      	cmp	r5, r6
 8009b44:	d11a      	bne.n	8009b7c <_printf_common+0xc8>
 8009b46:	2000      	movs	r0, #0
 8009b48:	e008      	b.n	8009b5c <_printf_common+0xa8>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	4652      	mov	r2, sl
 8009b4e:	4649      	mov	r1, r9
 8009b50:	4638      	mov	r0, r7
 8009b52:	47c0      	blx	r8
 8009b54:	3001      	adds	r0, #1
 8009b56:	d103      	bne.n	8009b60 <_printf_common+0xac>
 8009b58:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b60:	3501      	adds	r5, #1
 8009b62:	e7c6      	b.n	8009af2 <_printf_common+0x3e>
 8009b64:	18e1      	adds	r1, r4, r3
 8009b66:	1c5a      	adds	r2, r3, #1
 8009b68:	2030      	movs	r0, #48	; 0x30
 8009b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b6e:	4422      	add	r2, r4
 8009b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b78:	3302      	adds	r3, #2
 8009b7a:	e7c7      	b.n	8009b0c <_printf_common+0x58>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	4622      	mov	r2, r4
 8009b80:	4649      	mov	r1, r9
 8009b82:	4638      	mov	r0, r7
 8009b84:	47c0      	blx	r8
 8009b86:	3001      	adds	r0, #1
 8009b88:	d0e6      	beq.n	8009b58 <_printf_common+0xa4>
 8009b8a:	3601      	adds	r6, #1
 8009b8c:	e7d9      	b.n	8009b42 <_printf_common+0x8e>
	...

08009b90 <_printf_i>:
 8009b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b94:	7e0f      	ldrb	r7, [r1, #24]
 8009b96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b98:	2f78      	cmp	r7, #120	; 0x78
 8009b9a:	4691      	mov	r9, r2
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	469a      	mov	sl, r3
 8009ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ba6:	d807      	bhi.n	8009bb8 <_printf_i+0x28>
 8009ba8:	2f62      	cmp	r7, #98	; 0x62
 8009baa:	d80a      	bhi.n	8009bc2 <_printf_i+0x32>
 8009bac:	2f00      	cmp	r7, #0
 8009bae:	f000 80d8 	beq.w	8009d62 <_printf_i+0x1d2>
 8009bb2:	2f58      	cmp	r7, #88	; 0x58
 8009bb4:	f000 80a3 	beq.w	8009cfe <_printf_i+0x16e>
 8009bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bc0:	e03a      	b.n	8009c38 <_printf_i+0xa8>
 8009bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bc6:	2b15      	cmp	r3, #21
 8009bc8:	d8f6      	bhi.n	8009bb8 <_printf_i+0x28>
 8009bca:	a101      	add	r1, pc, #4	; (adr r1, 8009bd0 <_printf_i+0x40>)
 8009bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bd0:	08009c29 	.word	0x08009c29
 8009bd4:	08009c3d 	.word	0x08009c3d
 8009bd8:	08009bb9 	.word	0x08009bb9
 8009bdc:	08009bb9 	.word	0x08009bb9
 8009be0:	08009bb9 	.word	0x08009bb9
 8009be4:	08009bb9 	.word	0x08009bb9
 8009be8:	08009c3d 	.word	0x08009c3d
 8009bec:	08009bb9 	.word	0x08009bb9
 8009bf0:	08009bb9 	.word	0x08009bb9
 8009bf4:	08009bb9 	.word	0x08009bb9
 8009bf8:	08009bb9 	.word	0x08009bb9
 8009bfc:	08009d49 	.word	0x08009d49
 8009c00:	08009c6d 	.word	0x08009c6d
 8009c04:	08009d2b 	.word	0x08009d2b
 8009c08:	08009bb9 	.word	0x08009bb9
 8009c0c:	08009bb9 	.word	0x08009bb9
 8009c10:	08009d6b 	.word	0x08009d6b
 8009c14:	08009bb9 	.word	0x08009bb9
 8009c18:	08009c6d 	.word	0x08009c6d
 8009c1c:	08009bb9 	.word	0x08009bb9
 8009c20:	08009bb9 	.word	0x08009bb9
 8009c24:	08009d33 	.word	0x08009d33
 8009c28:	682b      	ldr	r3, [r5, #0]
 8009c2a:	1d1a      	adds	r2, r3, #4
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	602a      	str	r2, [r5, #0]
 8009c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e0a3      	b.n	8009d84 <_printf_i+0x1f4>
 8009c3c:	6820      	ldr	r0, [r4, #0]
 8009c3e:	6829      	ldr	r1, [r5, #0]
 8009c40:	0606      	lsls	r6, r0, #24
 8009c42:	f101 0304 	add.w	r3, r1, #4
 8009c46:	d50a      	bpl.n	8009c5e <_printf_i+0xce>
 8009c48:	680e      	ldr	r6, [r1, #0]
 8009c4a:	602b      	str	r3, [r5, #0]
 8009c4c:	2e00      	cmp	r6, #0
 8009c4e:	da03      	bge.n	8009c58 <_printf_i+0xc8>
 8009c50:	232d      	movs	r3, #45	; 0x2d
 8009c52:	4276      	negs	r6, r6
 8009c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c58:	485e      	ldr	r0, [pc, #376]	; (8009dd4 <_printf_i+0x244>)
 8009c5a:	230a      	movs	r3, #10
 8009c5c:	e019      	b.n	8009c92 <_printf_i+0x102>
 8009c5e:	680e      	ldr	r6, [r1, #0]
 8009c60:	602b      	str	r3, [r5, #0]
 8009c62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c66:	bf18      	it	ne
 8009c68:	b236      	sxthne	r6, r6
 8009c6a:	e7ef      	b.n	8009c4c <_printf_i+0xbc>
 8009c6c:	682b      	ldr	r3, [r5, #0]
 8009c6e:	6820      	ldr	r0, [r4, #0]
 8009c70:	1d19      	adds	r1, r3, #4
 8009c72:	6029      	str	r1, [r5, #0]
 8009c74:	0601      	lsls	r1, r0, #24
 8009c76:	d501      	bpl.n	8009c7c <_printf_i+0xec>
 8009c78:	681e      	ldr	r6, [r3, #0]
 8009c7a:	e002      	b.n	8009c82 <_printf_i+0xf2>
 8009c7c:	0646      	lsls	r6, r0, #25
 8009c7e:	d5fb      	bpl.n	8009c78 <_printf_i+0xe8>
 8009c80:	881e      	ldrh	r6, [r3, #0]
 8009c82:	4854      	ldr	r0, [pc, #336]	; (8009dd4 <_printf_i+0x244>)
 8009c84:	2f6f      	cmp	r7, #111	; 0x6f
 8009c86:	bf0c      	ite	eq
 8009c88:	2308      	moveq	r3, #8
 8009c8a:	230a      	movne	r3, #10
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c92:	6865      	ldr	r5, [r4, #4]
 8009c94:	60a5      	str	r5, [r4, #8]
 8009c96:	2d00      	cmp	r5, #0
 8009c98:	bfa2      	ittt	ge
 8009c9a:	6821      	ldrge	r1, [r4, #0]
 8009c9c:	f021 0104 	bicge.w	r1, r1, #4
 8009ca0:	6021      	strge	r1, [r4, #0]
 8009ca2:	b90e      	cbnz	r6, 8009ca8 <_printf_i+0x118>
 8009ca4:	2d00      	cmp	r5, #0
 8009ca6:	d04d      	beq.n	8009d44 <_printf_i+0x1b4>
 8009ca8:	4615      	mov	r5, r2
 8009caa:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cae:	fb03 6711 	mls	r7, r3, r1, r6
 8009cb2:	5dc7      	ldrb	r7, [r0, r7]
 8009cb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cb8:	4637      	mov	r7, r6
 8009cba:	42bb      	cmp	r3, r7
 8009cbc:	460e      	mov	r6, r1
 8009cbe:	d9f4      	bls.n	8009caa <_printf_i+0x11a>
 8009cc0:	2b08      	cmp	r3, #8
 8009cc2:	d10b      	bne.n	8009cdc <_printf_i+0x14c>
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	07de      	lsls	r6, r3, #31
 8009cc8:	d508      	bpl.n	8009cdc <_printf_i+0x14c>
 8009cca:	6923      	ldr	r3, [r4, #16]
 8009ccc:	6861      	ldr	r1, [r4, #4]
 8009cce:	4299      	cmp	r1, r3
 8009cd0:	bfde      	ittt	le
 8009cd2:	2330      	movle	r3, #48	; 0x30
 8009cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cdc:	1b52      	subs	r2, r2, r5
 8009cde:	6122      	str	r2, [r4, #16]
 8009ce0:	f8cd a000 	str.w	sl, [sp]
 8009ce4:	464b      	mov	r3, r9
 8009ce6:	aa03      	add	r2, sp, #12
 8009ce8:	4621      	mov	r1, r4
 8009cea:	4640      	mov	r0, r8
 8009cec:	f7ff fee2 	bl	8009ab4 <_printf_common>
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d14c      	bne.n	8009d8e <_printf_i+0x1fe>
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf8:	b004      	add	sp, #16
 8009cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfe:	4835      	ldr	r0, [pc, #212]	; (8009dd4 <_printf_i+0x244>)
 8009d00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d04:	6829      	ldr	r1, [r5, #0]
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d0c:	6029      	str	r1, [r5, #0]
 8009d0e:	061d      	lsls	r5, r3, #24
 8009d10:	d514      	bpl.n	8009d3c <_printf_i+0x1ac>
 8009d12:	07df      	lsls	r7, r3, #31
 8009d14:	bf44      	itt	mi
 8009d16:	f043 0320 	orrmi.w	r3, r3, #32
 8009d1a:	6023      	strmi	r3, [r4, #0]
 8009d1c:	b91e      	cbnz	r6, 8009d26 <_printf_i+0x196>
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	f023 0320 	bic.w	r3, r3, #32
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	2310      	movs	r3, #16
 8009d28:	e7b0      	b.n	8009c8c <_printf_i+0xfc>
 8009d2a:	6823      	ldr	r3, [r4, #0]
 8009d2c:	f043 0320 	orr.w	r3, r3, #32
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	2378      	movs	r3, #120	; 0x78
 8009d34:	4828      	ldr	r0, [pc, #160]	; (8009dd8 <_printf_i+0x248>)
 8009d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d3a:	e7e3      	b.n	8009d04 <_printf_i+0x174>
 8009d3c:	0659      	lsls	r1, r3, #25
 8009d3e:	bf48      	it	mi
 8009d40:	b2b6      	uxthmi	r6, r6
 8009d42:	e7e6      	b.n	8009d12 <_printf_i+0x182>
 8009d44:	4615      	mov	r5, r2
 8009d46:	e7bb      	b.n	8009cc0 <_printf_i+0x130>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	6826      	ldr	r6, [r4, #0]
 8009d4c:	6961      	ldr	r1, [r4, #20]
 8009d4e:	1d18      	adds	r0, r3, #4
 8009d50:	6028      	str	r0, [r5, #0]
 8009d52:	0635      	lsls	r5, r6, #24
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	d501      	bpl.n	8009d5c <_printf_i+0x1cc>
 8009d58:	6019      	str	r1, [r3, #0]
 8009d5a:	e002      	b.n	8009d62 <_printf_i+0x1d2>
 8009d5c:	0670      	lsls	r0, r6, #25
 8009d5e:	d5fb      	bpl.n	8009d58 <_printf_i+0x1c8>
 8009d60:	8019      	strh	r1, [r3, #0]
 8009d62:	2300      	movs	r3, #0
 8009d64:	6123      	str	r3, [r4, #16]
 8009d66:	4615      	mov	r5, r2
 8009d68:	e7ba      	b.n	8009ce0 <_printf_i+0x150>
 8009d6a:	682b      	ldr	r3, [r5, #0]
 8009d6c:	1d1a      	adds	r2, r3, #4
 8009d6e:	602a      	str	r2, [r5, #0]
 8009d70:	681d      	ldr	r5, [r3, #0]
 8009d72:	6862      	ldr	r2, [r4, #4]
 8009d74:	2100      	movs	r1, #0
 8009d76:	4628      	mov	r0, r5
 8009d78:	f7f6 fa32 	bl	80001e0 <memchr>
 8009d7c:	b108      	cbz	r0, 8009d82 <_printf_i+0x1f2>
 8009d7e:	1b40      	subs	r0, r0, r5
 8009d80:	6060      	str	r0, [r4, #4]
 8009d82:	6863      	ldr	r3, [r4, #4]
 8009d84:	6123      	str	r3, [r4, #16]
 8009d86:	2300      	movs	r3, #0
 8009d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d8c:	e7a8      	b.n	8009ce0 <_printf_i+0x150>
 8009d8e:	6923      	ldr	r3, [r4, #16]
 8009d90:	462a      	mov	r2, r5
 8009d92:	4649      	mov	r1, r9
 8009d94:	4640      	mov	r0, r8
 8009d96:	47d0      	blx	sl
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d0ab      	beq.n	8009cf4 <_printf_i+0x164>
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	079b      	lsls	r3, r3, #30
 8009da0:	d413      	bmi.n	8009dca <_printf_i+0x23a>
 8009da2:	68e0      	ldr	r0, [r4, #12]
 8009da4:	9b03      	ldr	r3, [sp, #12]
 8009da6:	4298      	cmp	r0, r3
 8009da8:	bfb8      	it	lt
 8009daa:	4618      	movlt	r0, r3
 8009dac:	e7a4      	b.n	8009cf8 <_printf_i+0x168>
 8009dae:	2301      	movs	r3, #1
 8009db0:	4632      	mov	r2, r6
 8009db2:	4649      	mov	r1, r9
 8009db4:	4640      	mov	r0, r8
 8009db6:	47d0      	blx	sl
 8009db8:	3001      	adds	r0, #1
 8009dba:	d09b      	beq.n	8009cf4 <_printf_i+0x164>
 8009dbc:	3501      	adds	r5, #1
 8009dbe:	68e3      	ldr	r3, [r4, #12]
 8009dc0:	9903      	ldr	r1, [sp, #12]
 8009dc2:	1a5b      	subs	r3, r3, r1
 8009dc4:	42ab      	cmp	r3, r5
 8009dc6:	dcf2      	bgt.n	8009dae <_printf_i+0x21e>
 8009dc8:	e7eb      	b.n	8009da2 <_printf_i+0x212>
 8009dca:	2500      	movs	r5, #0
 8009dcc:	f104 0619 	add.w	r6, r4, #25
 8009dd0:	e7f5      	b.n	8009dbe <_printf_i+0x22e>
 8009dd2:	bf00      	nop
 8009dd4:	0800a957 	.word	0x0800a957
 8009dd8:	0800a968 	.word	0x0800a968

08009ddc <_sbrk_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	4d06      	ldr	r5, [pc, #24]	; (8009df8 <_sbrk_r+0x1c>)
 8009de0:	2300      	movs	r3, #0
 8009de2:	4604      	mov	r4, r0
 8009de4:	4608      	mov	r0, r1
 8009de6:	602b      	str	r3, [r5, #0]
 8009de8:	f7f9 ff62 	bl	8003cb0 <_sbrk>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d102      	bne.n	8009df6 <_sbrk_r+0x1a>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	b103      	cbz	r3, 8009df6 <_sbrk_r+0x1a>
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	200008a0 	.word	0x200008a0

08009dfc <__swbuf_r>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	460e      	mov	r6, r1
 8009e00:	4614      	mov	r4, r2
 8009e02:	4605      	mov	r5, r0
 8009e04:	b118      	cbz	r0, 8009e0e <__swbuf_r+0x12>
 8009e06:	6983      	ldr	r3, [r0, #24]
 8009e08:	b90b      	cbnz	r3, 8009e0e <__swbuf_r+0x12>
 8009e0a:	f000 f9d9 	bl	800a1c0 <__sinit>
 8009e0e:	4b21      	ldr	r3, [pc, #132]	; (8009e94 <__swbuf_r+0x98>)
 8009e10:	429c      	cmp	r4, r3
 8009e12:	d12b      	bne.n	8009e6c <__swbuf_r+0x70>
 8009e14:	686c      	ldr	r4, [r5, #4]
 8009e16:	69a3      	ldr	r3, [r4, #24]
 8009e18:	60a3      	str	r3, [r4, #8]
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	071a      	lsls	r2, r3, #28
 8009e1e:	d52f      	bpl.n	8009e80 <__swbuf_r+0x84>
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	b36b      	cbz	r3, 8009e80 <__swbuf_r+0x84>
 8009e24:	6923      	ldr	r3, [r4, #16]
 8009e26:	6820      	ldr	r0, [r4, #0]
 8009e28:	1ac0      	subs	r0, r0, r3
 8009e2a:	6963      	ldr	r3, [r4, #20]
 8009e2c:	b2f6      	uxtb	r6, r6
 8009e2e:	4283      	cmp	r3, r0
 8009e30:	4637      	mov	r7, r6
 8009e32:	dc04      	bgt.n	8009e3e <__swbuf_r+0x42>
 8009e34:	4621      	mov	r1, r4
 8009e36:	4628      	mov	r0, r5
 8009e38:	f000 f92e 	bl	800a098 <_fflush_r>
 8009e3c:	bb30      	cbnz	r0, 8009e8c <__swbuf_r+0x90>
 8009e3e:	68a3      	ldr	r3, [r4, #8]
 8009e40:	3b01      	subs	r3, #1
 8009e42:	60a3      	str	r3, [r4, #8]
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	6022      	str	r2, [r4, #0]
 8009e4a:	701e      	strb	r6, [r3, #0]
 8009e4c:	6963      	ldr	r3, [r4, #20]
 8009e4e:	3001      	adds	r0, #1
 8009e50:	4283      	cmp	r3, r0
 8009e52:	d004      	beq.n	8009e5e <__swbuf_r+0x62>
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	07db      	lsls	r3, r3, #31
 8009e58:	d506      	bpl.n	8009e68 <__swbuf_r+0x6c>
 8009e5a:	2e0a      	cmp	r6, #10
 8009e5c:	d104      	bne.n	8009e68 <__swbuf_r+0x6c>
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4628      	mov	r0, r5
 8009e62:	f000 f919 	bl	800a098 <_fflush_r>
 8009e66:	b988      	cbnz	r0, 8009e8c <__swbuf_r+0x90>
 8009e68:	4638      	mov	r0, r7
 8009e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e6c:	4b0a      	ldr	r3, [pc, #40]	; (8009e98 <__swbuf_r+0x9c>)
 8009e6e:	429c      	cmp	r4, r3
 8009e70:	d101      	bne.n	8009e76 <__swbuf_r+0x7a>
 8009e72:	68ac      	ldr	r4, [r5, #8]
 8009e74:	e7cf      	b.n	8009e16 <__swbuf_r+0x1a>
 8009e76:	4b09      	ldr	r3, [pc, #36]	; (8009e9c <__swbuf_r+0xa0>)
 8009e78:	429c      	cmp	r4, r3
 8009e7a:	bf08      	it	eq
 8009e7c:	68ec      	ldreq	r4, [r5, #12]
 8009e7e:	e7ca      	b.n	8009e16 <__swbuf_r+0x1a>
 8009e80:	4621      	mov	r1, r4
 8009e82:	4628      	mov	r0, r5
 8009e84:	f000 f80c 	bl	8009ea0 <__swsetup_r>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d0cb      	beq.n	8009e24 <__swbuf_r+0x28>
 8009e8c:	f04f 37ff 	mov.w	r7, #4294967295
 8009e90:	e7ea      	b.n	8009e68 <__swbuf_r+0x6c>
 8009e92:	bf00      	nop
 8009e94:	0800a99c 	.word	0x0800a99c
 8009e98:	0800a9bc 	.word	0x0800a9bc
 8009e9c:	0800a97c 	.word	0x0800a97c

08009ea0 <__swsetup_r>:
 8009ea0:	4b32      	ldr	r3, [pc, #200]	; (8009f6c <__swsetup_r+0xcc>)
 8009ea2:	b570      	push	{r4, r5, r6, lr}
 8009ea4:	681d      	ldr	r5, [r3, #0]
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	b125      	cbz	r5, 8009eb6 <__swsetup_r+0x16>
 8009eac:	69ab      	ldr	r3, [r5, #24]
 8009eae:	b913      	cbnz	r3, 8009eb6 <__swsetup_r+0x16>
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	f000 f985 	bl	800a1c0 <__sinit>
 8009eb6:	4b2e      	ldr	r3, [pc, #184]	; (8009f70 <__swsetup_r+0xd0>)
 8009eb8:	429c      	cmp	r4, r3
 8009eba:	d10f      	bne.n	8009edc <__swsetup_r+0x3c>
 8009ebc:	686c      	ldr	r4, [r5, #4]
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ec4:	0719      	lsls	r1, r3, #28
 8009ec6:	d42c      	bmi.n	8009f22 <__swsetup_r+0x82>
 8009ec8:	06dd      	lsls	r5, r3, #27
 8009eca:	d411      	bmi.n	8009ef0 <__swsetup_r+0x50>
 8009ecc:	2309      	movs	r3, #9
 8009ece:	6033      	str	r3, [r6, #0]
 8009ed0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ed4:	81a3      	strh	r3, [r4, #12]
 8009ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eda:	e03e      	b.n	8009f5a <__swsetup_r+0xba>
 8009edc:	4b25      	ldr	r3, [pc, #148]	; (8009f74 <__swsetup_r+0xd4>)
 8009ede:	429c      	cmp	r4, r3
 8009ee0:	d101      	bne.n	8009ee6 <__swsetup_r+0x46>
 8009ee2:	68ac      	ldr	r4, [r5, #8]
 8009ee4:	e7eb      	b.n	8009ebe <__swsetup_r+0x1e>
 8009ee6:	4b24      	ldr	r3, [pc, #144]	; (8009f78 <__swsetup_r+0xd8>)
 8009ee8:	429c      	cmp	r4, r3
 8009eea:	bf08      	it	eq
 8009eec:	68ec      	ldreq	r4, [r5, #12]
 8009eee:	e7e6      	b.n	8009ebe <__swsetup_r+0x1e>
 8009ef0:	0758      	lsls	r0, r3, #29
 8009ef2:	d512      	bpl.n	8009f1a <__swsetup_r+0x7a>
 8009ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ef6:	b141      	cbz	r1, 8009f0a <__swsetup_r+0x6a>
 8009ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009efc:	4299      	cmp	r1, r3
 8009efe:	d002      	beq.n	8009f06 <__swsetup_r+0x66>
 8009f00:	4630      	mov	r0, r6
 8009f02:	f7ff fa41 	bl	8009388 <_free_r>
 8009f06:	2300      	movs	r3, #0
 8009f08:	6363      	str	r3, [r4, #52]	; 0x34
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f10:	81a3      	strh	r3, [r4, #12]
 8009f12:	2300      	movs	r3, #0
 8009f14:	6063      	str	r3, [r4, #4]
 8009f16:	6923      	ldr	r3, [r4, #16]
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	f043 0308 	orr.w	r3, r3, #8
 8009f20:	81a3      	strh	r3, [r4, #12]
 8009f22:	6923      	ldr	r3, [r4, #16]
 8009f24:	b94b      	cbnz	r3, 8009f3a <__swsetup_r+0x9a>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f30:	d003      	beq.n	8009f3a <__swsetup_r+0x9a>
 8009f32:	4621      	mov	r1, r4
 8009f34:	4630      	mov	r0, r6
 8009f36:	f000 fa09 	bl	800a34c <__smakebuf_r>
 8009f3a:	89a0      	ldrh	r0, [r4, #12]
 8009f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f40:	f010 0301 	ands.w	r3, r0, #1
 8009f44:	d00a      	beq.n	8009f5c <__swsetup_r+0xbc>
 8009f46:	2300      	movs	r3, #0
 8009f48:	60a3      	str	r3, [r4, #8]
 8009f4a:	6963      	ldr	r3, [r4, #20]
 8009f4c:	425b      	negs	r3, r3
 8009f4e:	61a3      	str	r3, [r4, #24]
 8009f50:	6923      	ldr	r3, [r4, #16]
 8009f52:	b943      	cbnz	r3, 8009f66 <__swsetup_r+0xc6>
 8009f54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f58:	d1ba      	bne.n	8009ed0 <__swsetup_r+0x30>
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	0781      	lsls	r1, r0, #30
 8009f5e:	bf58      	it	pl
 8009f60:	6963      	ldrpl	r3, [r4, #20]
 8009f62:	60a3      	str	r3, [r4, #8]
 8009f64:	e7f4      	b.n	8009f50 <__swsetup_r+0xb0>
 8009f66:	2000      	movs	r0, #0
 8009f68:	e7f7      	b.n	8009f5a <__swsetup_r+0xba>
 8009f6a:	bf00      	nop
 8009f6c:	20000118 	.word	0x20000118
 8009f70:	0800a99c 	.word	0x0800a99c
 8009f74:	0800a9bc 	.word	0x0800a9bc
 8009f78:	0800a97c 	.word	0x0800a97c

08009f7c <abort>:
 8009f7c:	b508      	push	{r3, lr}
 8009f7e:	2006      	movs	r0, #6
 8009f80:	f000 fab0 	bl	800a4e4 <raise>
 8009f84:	2001      	movs	r0, #1
 8009f86:	f7f9 fe1b 	bl	8003bc0 <_exit>
	...

08009f8c <__sflush_r>:
 8009f8c:	898a      	ldrh	r2, [r1, #12]
 8009f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f92:	4605      	mov	r5, r0
 8009f94:	0710      	lsls	r0, r2, #28
 8009f96:	460c      	mov	r4, r1
 8009f98:	d458      	bmi.n	800a04c <__sflush_r+0xc0>
 8009f9a:	684b      	ldr	r3, [r1, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	dc05      	bgt.n	8009fac <__sflush_r+0x20>
 8009fa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	dc02      	bgt.n	8009fac <__sflush_r+0x20>
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fae:	2e00      	cmp	r6, #0
 8009fb0:	d0f9      	beq.n	8009fa6 <__sflush_r+0x1a>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fb8:	682f      	ldr	r7, [r5, #0]
 8009fba:	602b      	str	r3, [r5, #0]
 8009fbc:	d032      	beq.n	800a024 <__sflush_r+0x98>
 8009fbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	075a      	lsls	r2, r3, #29
 8009fc4:	d505      	bpl.n	8009fd2 <__sflush_r+0x46>
 8009fc6:	6863      	ldr	r3, [r4, #4]
 8009fc8:	1ac0      	subs	r0, r0, r3
 8009fca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fcc:	b10b      	cbz	r3, 8009fd2 <__sflush_r+0x46>
 8009fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fd0:	1ac0      	subs	r0, r0, r3
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fd8:	6a21      	ldr	r1, [r4, #32]
 8009fda:	4628      	mov	r0, r5
 8009fdc:	47b0      	blx	r6
 8009fde:	1c43      	adds	r3, r0, #1
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	d106      	bne.n	8009ff2 <__sflush_r+0x66>
 8009fe4:	6829      	ldr	r1, [r5, #0]
 8009fe6:	291d      	cmp	r1, #29
 8009fe8:	d82c      	bhi.n	800a044 <__sflush_r+0xb8>
 8009fea:	4a2a      	ldr	r2, [pc, #168]	; (800a094 <__sflush_r+0x108>)
 8009fec:	40ca      	lsrs	r2, r1
 8009fee:	07d6      	lsls	r6, r2, #31
 8009ff0:	d528      	bpl.n	800a044 <__sflush_r+0xb8>
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	6062      	str	r2, [r4, #4]
 8009ff6:	04d9      	lsls	r1, r3, #19
 8009ff8:	6922      	ldr	r2, [r4, #16]
 8009ffa:	6022      	str	r2, [r4, #0]
 8009ffc:	d504      	bpl.n	800a008 <__sflush_r+0x7c>
 8009ffe:	1c42      	adds	r2, r0, #1
 800a000:	d101      	bne.n	800a006 <__sflush_r+0x7a>
 800a002:	682b      	ldr	r3, [r5, #0]
 800a004:	b903      	cbnz	r3, 800a008 <__sflush_r+0x7c>
 800a006:	6560      	str	r0, [r4, #84]	; 0x54
 800a008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a00a:	602f      	str	r7, [r5, #0]
 800a00c:	2900      	cmp	r1, #0
 800a00e:	d0ca      	beq.n	8009fa6 <__sflush_r+0x1a>
 800a010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a014:	4299      	cmp	r1, r3
 800a016:	d002      	beq.n	800a01e <__sflush_r+0x92>
 800a018:	4628      	mov	r0, r5
 800a01a:	f7ff f9b5 	bl	8009388 <_free_r>
 800a01e:	2000      	movs	r0, #0
 800a020:	6360      	str	r0, [r4, #52]	; 0x34
 800a022:	e7c1      	b.n	8009fa8 <__sflush_r+0x1c>
 800a024:	6a21      	ldr	r1, [r4, #32]
 800a026:	2301      	movs	r3, #1
 800a028:	4628      	mov	r0, r5
 800a02a:	47b0      	blx	r6
 800a02c:	1c41      	adds	r1, r0, #1
 800a02e:	d1c7      	bne.n	8009fc0 <__sflush_r+0x34>
 800a030:	682b      	ldr	r3, [r5, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0c4      	beq.n	8009fc0 <__sflush_r+0x34>
 800a036:	2b1d      	cmp	r3, #29
 800a038:	d001      	beq.n	800a03e <__sflush_r+0xb2>
 800a03a:	2b16      	cmp	r3, #22
 800a03c:	d101      	bne.n	800a042 <__sflush_r+0xb6>
 800a03e:	602f      	str	r7, [r5, #0]
 800a040:	e7b1      	b.n	8009fa6 <__sflush_r+0x1a>
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a048:	81a3      	strh	r3, [r4, #12]
 800a04a:	e7ad      	b.n	8009fa8 <__sflush_r+0x1c>
 800a04c:	690f      	ldr	r7, [r1, #16]
 800a04e:	2f00      	cmp	r7, #0
 800a050:	d0a9      	beq.n	8009fa6 <__sflush_r+0x1a>
 800a052:	0793      	lsls	r3, r2, #30
 800a054:	680e      	ldr	r6, [r1, #0]
 800a056:	bf08      	it	eq
 800a058:	694b      	ldreq	r3, [r1, #20]
 800a05a:	600f      	str	r7, [r1, #0]
 800a05c:	bf18      	it	ne
 800a05e:	2300      	movne	r3, #0
 800a060:	eba6 0807 	sub.w	r8, r6, r7
 800a064:	608b      	str	r3, [r1, #8]
 800a066:	f1b8 0f00 	cmp.w	r8, #0
 800a06a:	dd9c      	ble.n	8009fa6 <__sflush_r+0x1a>
 800a06c:	6a21      	ldr	r1, [r4, #32]
 800a06e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a070:	4643      	mov	r3, r8
 800a072:	463a      	mov	r2, r7
 800a074:	4628      	mov	r0, r5
 800a076:	47b0      	blx	r6
 800a078:	2800      	cmp	r0, #0
 800a07a:	dc06      	bgt.n	800a08a <__sflush_r+0xfe>
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a082:	81a3      	strh	r3, [r4, #12]
 800a084:	f04f 30ff 	mov.w	r0, #4294967295
 800a088:	e78e      	b.n	8009fa8 <__sflush_r+0x1c>
 800a08a:	4407      	add	r7, r0
 800a08c:	eba8 0800 	sub.w	r8, r8, r0
 800a090:	e7e9      	b.n	800a066 <__sflush_r+0xda>
 800a092:	bf00      	nop
 800a094:	20400001 	.word	0x20400001

0800a098 <_fflush_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	690b      	ldr	r3, [r1, #16]
 800a09c:	4605      	mov	r5, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	b913      	cbnz	r3, 800a0a8 <_fflush_r+0x10>
 800a0a2:	2500      	movs	r5, #0
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	bd38      	pop	{r3, r4, r5, pc}
 800a0a8:	b118      	cbz	r0, 800a0b2 <_fflush_r+0x1a>
 800a0aa:	6983      	ldr	r3, [r0, #24]
 800a0ac:	b90b      	cbnz	r3, 800a0b2 <_fflush_r+0x1a>
 800a0ae:	f000 f887 	bl	800a1c0 <__sinit>
 800a0b2:	4b14      	ldr	r3, [pc, #80]	; (800a104 <_fflush_r+0x6c>)
 800a0b4:	429c      	cmp	r4, r3
 800a0b6:	d11b      	bne.n	800a0f0 <_fflush_r+0x58>
 800a0b8:	686c      	ldr	r4, [r5, #4]
 800a0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0ef      	beq.n	800a0a2 <_fflush_r+0xa>
 800a0c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0c4:	07d0      	lsls	r0, r2, #31
 800a0c6:	d404      	bmi.n	800a0d2 <_fflush_r+0x3a>
 800a0c8:	0599      	lsls	r1, r3, #22
 800a0ca:	d402      	bmi.n	800a0d2 <_fflush_r+0x3a>
 800a0cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0ce:	f000 f915 	bl	800a2fc <__retarget_lock_acquire_recursive>
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	f7ff ff59 	bl	8009f8c <__sflush_r>
 800a0da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0dc:	07da      	lsls	r2, r3, #31
 800a0de:	4605      	mov	r5, r0
 800a0e0:	d4e0      	bmi.n	800a0a4 <_fflush_r+0xc>
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	059b      	lsls	r3, r3, #22
 800a0e6:	d4dd      	bmi.n	800a0a4 <_fflush_r+0xc>
 800a0e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0ea:	f000 f908 	bl	800a2fe <__retarget_lock_release_recursive>
 800a0ee:	e7d9      	b.n	800a0a4 <_fflush_r+0xc>
 800a0f0:	4b05      	ldr	r3, [pc, #20]	; (800a108 <_fflush_r+0x70>)
 800a0f2:	429c      	cmp	r4, r3
 800a0f4:	d101      	bne.n	800a0fa <_fflush_r+0x62>
 800a0f6:	68ac      	ldr	r4, [r5, #8]
 800a0f8:	e7df      	b.n	800a0ba <_fflush_r+0x22>
 800a0fa:	4b04      	ldr	r3, [pc, #16]	; (800a10c <_fflush_r+0x74>)
 800a0fc:	429c      	cmp	r4, r3
 800a0fe:	bf08      	it	eq
 800a100:	68ec      	ldreq	r4, [r5, #12]
 800a102:	e7da      	b.n	800a0ba <_fflush_r+0x22>
 800a104:	0800a99c 	.word	0x0800a99c
 800a108:	0800a9bc 	.word	0x0800a9bc
 800a10c:	0800a97c 	.word	0x0800a97c

0800a110 <std>:
 800a110:	2300      	movs	r3, #0
 800a112:	b510      	push	{r4, lr}
 800a114:	4604      	mov	r4, r0
 800a116:	e9c0 3300 	strd	r3, r3, [r0]
 800a11a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a11e:	6083      	str	r3, [r0, #8]
 800a120:	8181      	strh	r1, [r0, #12]
 800a122:	6643      	str	r3, [r0, #100]	; 0x64
 800a124:	81c2      	strh	r2, [r0, #14]
 800a126:	6183      	str	r3, [r0, #24]
 800a128:	4619      	mov	r1, r3
 800a12a:	2208      	movs	r2, #8
 800a12c:	305c      	adds	r0, #92	; 0x5c
 800a12e:	f7ff f88d 	bl	800924c <memset>
 800a132:	4b05      	ldr	r3, [pc, #20]	; (800a148 <std+0x38>)
 800a134:	6263      	str	r3, [r4, #36]	; 0x24
 800a136:	4b05      	ldr	r3, [pc, #20]	; (800a14c <std+0x3c>)
 800a138:	62a3      	str	r3, [r4, #40]	; 0x28
 800a13a:	4b05      	ldr	r3, [pc, #20]	; (800a150 <std+0x40>)
 800a13c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a13e:	4b05      	ldr	r3, [pc, #20]	; (800a154 <std+0x44>)
 800a140:	6224      	str	r4, [r4, #32]
 800a142:	6323      	str	r3, [r4, #48]	; 0x30
 800a144:	bd10      	pop	{r4, pc}
 800a146:	bf00      	nop
 800a148:	0800a51d 	.word	0x0800a51d
 800a14c:	0800a53f 	.word	0x0800a53f
 800a150:	0800a577 	.word	0x0800a577
 800a154:	0800a59b 	.word	0x0800a59b

0800a158 <_cleanup_r>:
 800a158:	4901      	ldr	r1, [pc, #4]	; (800a160 <_cleanup_r+0x8>)
 800a15a:	f000 b8af 	b.w	800a2bc <_fwalk_reent>
 800a15e:	bf00      	nop
 800a160:	0800a099 	.word	0x0800a099

0800a164 <__sfmoreglue>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	2268      	movs	r2, #104	; 0x68
 800a168:	1e4d      	subs	r5, r1, #1
 800a16a:	4355      	muls	r5, r2
 800a16c:	460e      	mov	r6, r1
 800a16e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a172:	f7ff f975 	bl	8009460 <_malloc_r>
 800a176:	4604      	mov	r4, r0
 800a178:	b140      	cbz	r0, 800a18c <__sfmoreglue+0x28>
 800a17a:	2100      	movs	r1, #0
 800a17c:	e9c0 1600 	strd	r1, r6, [r0]
 800a180:	300c      	adds	r0, #12
 800a182:	60a0      	str	r0, [r4, #8]
 800a184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a188:	f7ff f860 	bl	800924c <memset>
 800a18c:	4620      	mov	r0, r4
 800a18e:	bd70      	pop	{r4, r5, r6, pc}

0800a190 <__sfp_lock_acquire>:
 800a190:	4801      	ldr	r0, [pc, #4]	; (800a198 <__sfp_lock_acquire+0x8>)
 800a192:	f000 b8b3 	b.w	800a2fc <__retarget_lock_acquire_recursive>
 800a196:	bf00      	nop
 800a198:	2000089d 	.word	0x2000089d

0800a19c <__sfp_lock_release>:
 800a19c:	4801      	ldr	r0, [pc, #4]	; (800a1a4 <__sfp_lock_release+0x8>)
 800a19e:	f000 b8ae 	b.w	800a2fe <__retarget_lock_release_recursive>
 800a1a2:	bf00      	nop
 800a1a4:	2000089d 	.word	0x2000089d

0800a1a8 <__sinit_lock_acquire>:
 800a1a8:	4801      	ldr	r0, [pc, #4]	; (800a1b0 <__sinit_lock_acquire+0x8>)
 800a1aa:	f000 b8a7 	b.w	800a2fc <__retarget_lock_acquire_recursive>
 800a1ae:	bf00      	nop
 800a1b0:	2000089e 	.word	0x2000089e

0800a1b4 <__sinit_lock_release>:
 800a1b4:	4801      	ldr	r0, [pc, #4]	; (800a1bc <__sinit_lock_release+0x8>)
 800a1b6:	f000 b8a2 	b.w	800a2fe <__retarget_lock_release_recursive>
 800a1ba:	bf00      	nop
 800a1bc:	2000089e 	.word	0x2000089e

0800a1c0 <__sinit>:
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	f7ff fff0 	bl	800a1a8 <__sinit_lock_acquire>
 800a1c8:	69a3      	ldr	r3, [r4, #24]
 800a1ca:	b11b      	cbz	r3, 800a1d4 <__sinit+0x14>
 800a1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d0:	f7ff bff0 	b.w	800a1b4 <__sinit_lock_release>
 800a1d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a1d8:	6523      	str	r3, [r4, #80]	; 0x50
 800a1da:	4b13      	ldr	r3, [pc, #76]	; (800a228 <__sinit+0x68>)
 800a1dc:	4a13      	ldr	r2, [pc, #76]	; (800a22c <__sinit+0x6c>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1e2:	42a3      	cmp	r3, r4
 800a1e4:	bf04      	itt	eq
 800a1e6:	2301      	moveq	r3, #1
 800a1e8:	61a3      	streq	r3, [r4, #24]
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f000 f820 	bl	800a230 <__sfp>
 800a1f0:	6060      	str	r0, [r4, #4]
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f000 f81c 	bl	800a230 <__sfp>
 800a1f8:	60a0      	str	r0, [r4, #8]
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f000 f818 	bl	800a230 <__sfp>
 800a200:	2200      	movs	r2, #0
 800a202:	60e0      	str	r0, [r4, #12]
 800a204:	2104      	movs	r1, #4
 800a206:	6860      	ldr	r0, [r4, #4]
 800a208:	f7ff ff82 	bl	800a110 <std>
 800a20c:	68a0      	ldr	r0, [r4, #8]
 800a20e:	2201      	movs	r2, #1
 800a210:	2109      	movs	r1, #9
 800a212:	f7ff ff7d 	bl	800a110 <std>
 800a216:	68e0      	ldr	r0, [r4, #12]
 800a218:	2202      	movs	r2, #2
 800a21a:	2112      	movs	r1, #18
 800a21c:	f7ff ff78 	bl	800a110 <std>
 800a220:	2301      	movs	r3, #1
 800a222:	61a3      	str	r3, [r4, #24]
 800a224:	e7d2      	b.n	800a1cc <__sinit+0xc>
 800a226:	bf00      	nop
 800a228:	0800a894 	.word	0x0800a894
 800a22c:	0800a159 	.word	0x0800a159

0800a230 <__sfp>:
 800a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a232:	4607      	mov	r7, r0
 800a234:	f7ff ffac 	bl	800a190 <__sfp_lock_acquire>
 800a238:	4b1e      	ldr	r3, [pc, #120]	; (800a2b4 <__sfp+0x84>)
 800a23a:	681e      	ldr	r6, [r3, #0]
 800a23c:	69b3      	ldr	r3, [r6, #24]
 800a23e:	b913      	cbnz	r3, 800a246 <__sfp+0x16>
 800a240:	4630      	mov	r0, r6
 800a242:	f7ff ffbd 	bl	800a1c0 <__sinit>
 800a246:	3648      	adds	r6, #72	; 0x48
 800a248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	d503      	bpl.n	800a258 <__sfp+0x28>
 800a250:	6833      	ldr	r3, [r6, #0]
 800a252:	b30b      	cbz	r3, 800a298 <__sfp+0x68>
 800a254:	6836      	ldr	r6, [r6, #0]
 800a256:	e7f7      	b.n	800a248 <__sfp+0x18>
 800a258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a25c:	b9d5      	cbnz	r5, 800a294 <__sfp+0x64>
 800a25e:	4b16      	ldr	r3, [pc, #88]	; (800a2b8 <__sfp+0x88>)
 800a260:	60e3      	str	r3, [r4, #12]
 800a262:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a266:	6665      	str	r5, [r4, #100]	; 0x64
 800a268:	f000 f847 	bl	800a2fa <__retarget_lock_init_recursive>
 800a26c:	f7ff ff96 	bl	800a19c <__sfp_lock_release>
 800a270:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a274:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a278:	6025      	str	r5, [r4, #0]
 800a27a:	61a5      	str	r5, [r4, #24]
 800a27c:	2208      	movs	r2, #8
 800a27e:	4629      	mov	r1, r5
 800a280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a284:	f7fe ffe2 	bl	800924c <memset>
 800a288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a28c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a290:	4620      	mov	r0, r4
 800a292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a294:	3468      	adds	r4, #104	; 0x68
 800a296:	e7d9      	b.n	800a24c <__sfp+0x1c>
 800a298:	2104      	movs	r1, #4
 800a29a:	4638      	mov	r0, r7
 800a29c:	f7ff ff62 	bl	800a164 <__sfmoreglue>
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	6030      	str	r0, [r6, #0]
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d1d5      	bne.n	800a254 <__sfp+0x24>
 800a2a8:	f7ff ff78 	bl	800a19c <__sfp_lock_release>
 800a2ac:	230c      	movs	r3, #12
 800a2ae:	603b      	str	r3, [r7, #0]
 800a2b0:	e7ee      	b.n	800a290 <__sfp+0x60>
 800a2b2:	bf00      	nop
 800a2b4:	0800a894 	.word	0x0800a894
 800a2b8:	ffff0001 	.word	0xffff0001

0800a2bc <_fwalk_reent>:
 800a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	4688      	mov	r8, r1
 800a2c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2c8:	2700      	movs	r7, #0
 800a2ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2ce:	f1b9 0901 	subs.w	r9, r9, #1
 800a2d2:	d505      	bpl.n	800a2e0 <_fwalk_reent+0x24>
 800a2d4:	6824      	ldr	r4, [r4, #0]
 800a2d6:	2c00      	cmp	r4, #0
 800a2d8:	d1f7      	bne.n	800a2ca <_fwalk_reent+0xe>
 800a2da:	4638      	mov	r0, r7
 800a2dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e0:	89ab      	ldrh	r3, [r5, #12]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d907      	bls.n	800a2f6 <_fwalk_reent+0x3a>
 800a2e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	d003      	beq.n	800a2f6 <_fwalk_reent+0x3a>
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	47c0      	blx	r8
 800a2f4:	4307      	orrs	r7, r0
 800a2f6:	3568      	adds	r5, #104	; 0x68
 800a2f8:	e7e9      	b.n	800a2ce <_fwalk_reent+0x12>

0800a2fa <__retarget_lock_init_recursive>:
 800a2fa:	4770      	bx	lr

0800a2fc <__retarget_lock_acquire_recursive>:
 800a2fc:	4770      	bx	lr

0800a2fe <__retarget_lock_release_recursive>:
 800a2fe:	4770      	bx	lr

0800a300 <__swhatbuf_r>:
 800a300:	b570      	push	{r4, r5, r6, lr}
 800a302:	460e      	mov	r6, r1
 800a304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a308:	2900      	cmp	r1, #0
 800a30a:	b096      	sub	sp, #88	; 0x58
 800a30c:	4614      	mov	r4, r2
 800a30e:	461d      	mov	r5, r3
 800a310:	da08      	bge.n	800a324 <__swhatbuf_r+0x24>
 800a312:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	602a      	str	r2, [r5, #0]
 800a31a:	061a      	lsls	r2, r3, #24
 800a31c:	d410      	bmi.n	800a340 <__swhatbuf_r+0x40>
 800a31e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a322:	e00e      	b.n	800a342 <__swhatbuf_r+0x42>
 800a324:	466a      	mov	r2, sp
 800a326:	f000 f95f 	bl	800a5e8 <_fstat_r>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	dbf1      	blt.n	800a312 <__swhatbuf_r+0x12>
 800a32e:	9a01      	ldr	r2, [sp, #4]
 800a330:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a334:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a338:	425a      	negs	r2, r3
 800a33a:	415a      	adcs	r2, r3
 800a33c:	602a      	str	r2, [r5, #0]
 800a33e:	e7ee      	b.n	800a31e <__swhatbuf_r+0x1e>
 800a340:	2340      	movs	r3, #64	; 0x40
 800a342:	2000      	movs	r0, #0
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	b016      	add	sp, #88	; 0x58
 800a348:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a34c <__smakebuf_r>:
 800a34c:	898b      	ldrh	r3, [r1, #12]
 800a34e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a350:	079d      	lsls	r5, r3, #30
 800a352:	4606      	mov	r6, r0
 800a354:	460c      	mov	r4, r1
 800a356:	d507      	bpl.n	800a368 <__smakebuf_r+0x1c>
 800a358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	6123      	str	r3, [r4, #16]
 800a360:	2301      	movs	r3, #1
 800a362:	6163      	str	r3, [r4, #20]
 800a364:	b002      	add	sp, #8
 800a366:	bd70      	pop	{r4, r5, r6, pc}
 800a368:	ab01      	add	r3, sp, #4
 800a36a:	466a      	mov	r2, sp
 800a36c:	f7ff ffc8 	bl	800a300 <__swhatbuf_r>
 800a370:	9900      	ldr	r1, [sp, #0]
 800a372:	4605      	mov	r5, r0
 800a374:	4630      	mov	r0, r6
 800a376:	f7ff f873 	bl	8009460 <_malloc_r>
 800a37a:	b948      	cbnz	r0, 800a390 <__smakebuf_r+0x44>
 800a37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a380:	059a      	lsls	r2, r3, #22
 800a382:	d4ef      	bmi.n	800a364 <__smakebuf_r+0x18>
 800a384:	f023 0303 	bic.w	r3, r3, #3
 800a388:	f043 0302 	orr.w	r3, r3, #2
 800a38c:	81a3      	strh	r3, [r4, #12]
 800a38e:	e7e3      	b.n	800a358 <__smakebuf_r+0xc>
 800a390:	4b0d      	ldr	r3, [pc, #52]	; (800a3c8 <__smakebuf_r+0x7c>)
 800a392:	62b3      	str	r3, [r6, #40]	; 0x28
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	6020      	str	r0, [r4, #0]
 800a398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a39c:	81a3      	strh	r3, [r4, #12]
 800a39e:	9b00      	ldr	r3, [sp, #0]
 800a3a0:	6163      	str	r3, [r4, #20]
 800a3a2:	9b01      	ldr	r3, [sp, #4]
 800a3a4:	6120      	str	r0, [r4, #16]
 800a3a6:	b15b      	cbz	r3, 800a3c0 <__smakebuf_r+0x74>
 800a3a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f000 f92d 	bl	800a60c <_isatty_r>
 800a3b2:	b128      	cbz	r0, 800a3c0 <__smakebuf_r+0x74>
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	f023 0303 	bic.w	r3, r3, #3
 800a3ba:	f043 0301 	orr.w	r3, r3, #1
 800a3be:	81a3      	strh	r3, [r4, #12]
 800a3c0:	89a0      	ldrh	r0, [r4, #12]
 800a3c2:	4305      	orrs	r5, r0
 800a3c4:	81a5      	strh	r5, [r4, #12]
 800a3c6:	e7cd      	b.n	800a364 <__smakebuf_r+0x18>
 800a3c8:	0800a159 	.word	0x0800a159

0800a3cc <memcpy>:
 800a3cc:	440a      	add	r2, r1
 800a3ce:	4291      	cmp	r1, r2
 800a3d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3d4:	d100      	bne.n	800a3d8 <memcpy+0xc>
 800a3d6:	4770      	bx	lr
 800a3d8:	b510      	push	{r4, lr}
 800a3da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3e2:	4291      	cmp	r1, r2
 800a3e4:	d1f9      	bne.n	800a3da <memcpy+0xe>
 800a3e6:	bd10      	pop	{r4, pc}

0800a3e8 <memmove>:
 800a3e8:	4288      	cmp	r0, r1
 800a3ea:	b510      	push	{r4, lr}
 800a3ec:	eb01 0402 	add.w	r4, r1, r2
 800a3f0:	d902      	bls.n	800a3f8 <memmove+0x10>
 800a3f2:	4284      	cmp	r4, r0
 800a3f4:	4623      	mov	r3, r4
 800a3f6:	d807      	bhi.n	800a408 <memmove+0x20>
 800a3f8:	1e43      	subs	r3, r0, #1
 800a3fa:	42a1      	cmp	r1, r4
 800a3fc:	d008      	beq.n	800a410 <memmove+0x28>
 800a3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a402:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a406:	e7f8      	b.n	800a3fa <memmove+0x12>
 800a408:	4402      	add	r2, r0
 800a40a:	4601      	mov	r1, r0
 800a40c:	428a      	cmp	r2, r1
 800a40e:	d100      	bne.n	800a412 <memmove+0x2a>
 800a410:	bd10      	pop	{r4, pc}
 800a412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a41a:	e7f7      	b.n	800a40c <memmove+0x24>

0800a41c <__malloc_lock>:
 800a41c:	4801      	ldr	r0, [pc, #4]	; (800a424 <__malloc_lock+0x8>)
 800a41e:	f7ff bf6d 	b.w	800a2fc <__retarget_lock_acquire_recursive>
 800a422:	bf00      	nop
 800a424:	2000089c 	.word	0x2000089c

0800a428 <__malloc_unlock>:
 800a428:	4801      	ldr	r0, [pc, #4]	; (800a430 <__malloc_unlock+0x8>)
 800a42a:	f7ff bf68 	b.w	800a2fe <__retarget_lock_release_recursive>
 800a42e:	bf00      	nop
 800a430:	2000089c 	.word	0x2000089c

0800a434 <_realloc_r>:
 800a434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a438:	4680      	mov	r8, r0
 800a43a:	4614      	mov	r4, r2
 800a43c:	460e      	mov	r6, r1
 800a43e:	b921      	cbnz	r1, 800a44a <_realloc_r+0x16>
 800a440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a444:	4611      	mov	r1, r2
 800a446:	f7ff b80b 	b.w	8009460 <_malloc_r>
 800a44a:	b92a      	cbnz	r2, 800a458 <_realloc_r+0x24>
 800a44c:	f7fe ff9c 	bl	8009388 <_free_r>
 800a450:	4625      	mov	r5, r4
 800a452:	4628      	mov	r0, r5
 800a454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a458:	f000 f8fa 	bl	800a650 <_malloc_usable_size_r>
 800a45c:	4284      	cmp	r4, r0
 800a45e:	4607      	mov	r7, r0
 800a460:	d802      	bhi.n	800a468 <_realloc_r+0x34>
 800a462:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a466:	d812      	bhi.n	800a48e <_realloc_r+0x5a>
 800a468:	4621      	mov	r1, r4
 800a46a:	4640      	mov	r0, r8
 800a46c:	f7fe fff8 	bl	8009460 <_malloc_r>
 800a470:	4605      	mov	r5, r0
 800a472:	2800      	cmp	r0, #0
 800a474:	d0ed      	beq.n	800a452 <_realloc_r+0x1e>
 800a476:	42bc      	cmp	r4, r7
 800a478:	4622      	mov	r2, r4
 800a47a:	4631      	mov	r1, r6
 800a47c:	bf28      	it	cs
 800a47e:	463a      	movcs	r2, r7
 800a480:	f7ff ffa4 	bl	800a3cc <memcpy>
 800a484:	4631      	mov	r1, r6
 800a486:	4640      	mov	r0, r8
 800a488:	f7fe ff7e 	bl	8009388 <_free_r>
 800a48c:	e7e1      	b.n	800a452 <_realloc_r+0x1e>
 800a48e:	4635      	mov	r5, r6
 800a490:	e7df      	b.n	800a452 <_realloc_r+0x1e>

0800a492 <_raise_r>:
 800a492:	291f      	cmp	r1, #31
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4604      	mov	r4, r0
 800a498:	460d      	mov	r5, r1
 800a49a:	d904      	bls.n	800a4a6 <_raise_r+0x14>
 800a49c:	2316      	movs	r3, #22
 800a49e:	6003      	str	r3, [r0, #0]
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	bd38      	pop	{r3, r4, r5, pc}
 800a4a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4a8:	b112      	cbz	r2, 800a4b0 <_raise_r+0x1e>
 800a4aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4ae:	b94b      	cbnz	r3, 800a4c4 <_raise_r+0x32>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 f831 	bl	800a518 <_getpid_r>
 800a4b6:	462a      	mov	r2, r5
 800a4b8:	4601      	mov	r1, r0
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4c0:	f000 b818 	b.w	800a4f4 <_kill_r>
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d00a      	beq.n	800a4de <_raise_r+0x4c>
 800a4c8:	1c59      	adds	r1, r3, #1
 800a4ca:	d103      	bne.n	800a4d4 <_raise_r+0x42>
 800a4cc:	2316      	movs	r3, #22
 800a4ce:	6003      	str	r3, [r0, #0]
 800a4d0:	2001      	movs	r0, #1
 800a4d2:	e7e7      	b.n	800a4a4 <_raise_r+0x12>
 800a4d4:	2400      	movs	r4, #0
 800a4d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4da:	4628      	mov	r0, r5
 800a4dc:	4798      	blx	r3
 800a4de:	2000      	movs	r0, #0
 800a4e0:	e7e0      	b.n	800a4a4 <_raise_r+0x12>
	...

0800a4e4 <raise>:
 800a4e4:	4b02      	ldr	r3, [pc, #8]	; (800a4f0 <raise+0xc>)
 800a4e6:	4601      	mov	r1, r0
 800a4e8:	6818      	ldr	r0, [r3, #0]
 800a4ea:	f7ff bfd2 	b.w	800a492 <_raise_r>
 800a4ee:	bf00      	nop
 800a4f0:	20000118 	.word	0x20000118

0800a4f4 <_kill_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	4d07      	ldr	r5, [pc, #28]	; (800a514 <_kill_r+0x20>)
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	4608      	mov	r0, r1
 800a4fe:	4611      	mov	r1, r2
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	f7f9 fb4d 	bl	8003ba0 <_kill>
 800a506:	1c43      	adds	r3, r0, #1
 800a508:	d102      	bne.n	800a510 <_kill_r+0x1c>
 800a50a:	682b      	ldr	r3, [r5, #0]
 800a50c:	b103      	cbz	r3, 800a510 <_kill_r+0x1c>
 800a50e:	6023      	str	r3, [r4, #0]
 800a510:	bd38      	pop	{r3, r4, r5, pc}
 800a512:	bf00      	nop
 800a514:	200008a0 	.word	0x200008a0

0800a518 <_getpid_r>:
 800a518:	f7f9 bb3a 	b.w	8003b90 <_getpid>

0800a51c <__sread>:
 800a51c:	b510      	push	{r4, lr}
 800a51e:	460c      	mov	r4, r1
 800a520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a524:	f000 f89c 	bl	800a660 <_read_r>
 800a528:	2800      	cmp	r0, #0
 800a52a:	bfab      	itete	ge
 800a52c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a52e:	89a3      	ldrhlt	r3, [r4, #12]
 800a530:	181b      	addge	r3, r3, r0
 800a532:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a536:	bfac      	ite	ge
 800a538:	6563      	strge	r3, [r4, #84]	; 0x54
 800a53a:	81a3      	strhlt	r3, [r4, #12]
 800a53c:	bd10      	pop	{r4, pc}

0800a53e <__swrite>:
 800a53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a542:	461f      	mov	r7, r3
 800a544:	898b      	ldrh	r3, [r1, #12]
 800a546:	05db      	lsls	r3, r3, #23
 800a548:	4605      	mov	r5, r0
 800a54a:	460c      	mov	r4, r1
 800a54c:	4616      	mov	r6, r2
 800a54e:	d505      	bpl.n	800a55c <__swrite+0x1e>
 800a550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a554:	2302      	movs	r3, #2
 800a556:	2200      	movs	r2, #0
 800a558:	f000 f868 	bl	800a62c <_lseek_r>
 800a55c:	89a3      	ldrh	r3, [r4, #12]
 800a55e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a566:	81a3      	strh	r3, [r4, #12]
 800a568:	4632      	mov	r2, r6
 800a56a:	463b      	mov	r3, r7
 800a56c:	4628      	mov	r0, r5
 800a56e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a572:	f000 b817 	b.w	800a5a4 <_write_r>

0800a576 <__sseek>:
 800a576:	b510      	push	{r4, lr}
 800a578:	460c      	mov	r4, r1
 800a57a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a57e:	f000 f855 	bl	800a62c <_lseek_r>
 800a582:	1c43      	adds	r3, r0, #1
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	bf15      	itete	ne
 800a588:	6560      	strne	r0, [r4, #84]	; 0x54
 800a58a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a58e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a592:	81a3      	strheq	r3, [r4, #12]
 800a594:	bf18      	it	ne
 800a596:	81a3      	strhne	r3, [r4, #12]
 800a598:	bd10      	pop	{r4, pc}

0800a59a <__sclose>:
 800a59a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59e:	f000 b813 	b.w	800a5c8 <_close_r>
	...

0800a5a4 <_write_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d07      	ldr	r5, [pc, #28]	; (800a5c4 <_write_r+0x20>)
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	4608      	mov	r0, r1
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	602a      	str	r2, [r5, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	f7f9 fb2b 	bl	8003c0e <_write>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d102      	bne.n	800a5c2 <_write_r+0x1e>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	b103      	cbz	r3, 800a5c2 <_write_r+0x1e>
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	bd38      	pop	{r3, r4, r5, pc}
 800a5c4:	200008a0 	.word	0x200008a0

0800a5c8 <_close_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d06      	ldr	r5, [pc, #24]	; (800a5e4 <_close_r+0x1c>)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	602b      	str	r3, [r5, #0]
 800a5d4:	f7f9 fb37 	bl	8003c46 <_close>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d102      	bne.n	800a5e2 <_close_r+0x1a>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <_close_r+0x1a>
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	200008a0 	.word	0x200008a0

0800a5e8 <_fstat_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4d07      	ldr	r5, [pc, #28]	; (800a608 <_fstat_r+0x20>)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	4611      	mov	r1, r2
 800a5f4:	602b      	str	r3, [r5, #0]
 800a5f6:	f7f9 fb32 	bl	8003c5e <_fstat>
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	d102      	bne.n	800a604 <_fstat_r+0x1c>
 800a5fe:	682b      	ldr	r3, [r5, #0]
 800a600:	b103      	cbz	r3, 800a604 <_fstat_r+0x1c>
 800a602:	6023      	str	r3, [r4, #0]
 800a604:	bd38      	pop	{r3, r4, r5, pc}
 800a606:	bf00      	nop
 800a608:	200008a0 	.word	0x200008a0

0800a60c <_isatty_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d06      	ldr	r5, [pc, #24]	; (800a628 <_isatty_r+0x1c>)
 800a610:	2300      	movs	r3, #0
 800a612:	4604      	mov	r4, r0
 800a614:	4608      	mov	r0, r1
 800a616:	602b      	str	r3, [r5, #0]
 800a618:	f7f9 fb31 	bl	8003c7e <_isatty>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_isatty_r+0x1a>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	b103      	cbz	r3, 800a626 <_isatty_r+0x1a>
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	200008a0 	.word	0x200008a0

0800a62c <_lseek_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4d07      	ldr	r5, [pc, #28]	; (800a64c <_lseek_r+0x20>)
 800a630:	4604      	mov	r4, r0
 800a632:	4608      	mov	r0, r1
 800a634:	4611      	mov	r1, r2
 800a636:	2200      	movs	r2, #0
 800a638:	602a      	str	r2, [r5, #0]
 800a63a:	461a      	mov	r2, r3
 800a63c:	f7f9 fb2a 	bl	8003c94 <_lseek>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d102      	bne.n	800a64a <_lseek_r+0x1e>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	b103      	cbz	r3, 800a64a <_lseek_r+0x1e>
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	200008a0 	.word	0x200008a0

0800a650 <_malloc_usable_size_r>:
 800a650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a654:	1f18      	subs	r0, r3, #4
 800a656:	2b00      	cmp	r3, #0
 800a658:	bfbc      	itt	lt
 800a65a:	580b      	ldrlt	r3, [r1, r0]
 800a65c:	18c0      	addlt	r0, r0, r3
 800a65e:	4770      	bx	lr

0800a660 <_read_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4d07      	ldr	r5, [pc, #28]	; (800a680 <_read_r+0x20>)
 800a664:	4604      	mov	r4, r0
 800a666:	4608      	mov	r0, r1
 800a668:	4611      	mov	r1, r2
 800a66a:	2200      	movs	r2, #0
 800a66c:	602a      	str	r2, [r5, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	f7f9 fab0 	bl	8003bd4 <_read>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_read_r+0x1e>
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_read_r+0x1e>
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	200008a0 	.word	0x200008a0

0800a684 <_init>:
 800a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a686:	bf00      	nop
 800a688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a68a:	bc08      	pop	{r3}
 800a68c:	469e      	mov	lr, r3
 800a68e:	4770      	bx	lr

0800a690 <_fini>:
 800a690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a692:	bf00      	nop
 800a694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a696:	bc08      	pop	{r3}
 800a698:	469e      	mov	lr, r3
 800a69a:	4770      	bx	lr
