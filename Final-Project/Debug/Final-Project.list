
Final-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005274  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08005404  08005404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055bc  080055bc  00020114  2**0
                  CONTENTS
  4 .ARM          00000000  080055bc  080055bc  00020114  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055bc  080055bc  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055bc  080055bc  000155bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055c0  080055c0  000155c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  080055c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020114  2**0
                  CONTENTS
 10 .bss          00000450  20000114  20000114  00020114  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000564  20000564  00020114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f8ff  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000270c  00000000  00000000  0002fa43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00032150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c78  00000000  00000000  00032ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb54  00000000  00000000  00033b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011554  00000000  00000000  000526b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0c6b  00000000  00000000  00063c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00114873  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004090  00000000  00000000  001148c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053ec 	.word	0x080053ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	080053ec 	.word	0x080053ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000132 	.word	0x20000132
 800039c:	20000134 	.word	0x20000134
 80003a0:	20000136 	.word	0x20000136
 80003a4:	20000148 	.word	0x20000148
 80003a8:	20000138 	.word	0x20000138
 80003ac:	2000014c 	.word	0x2000014c

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 febb 	bl	800222c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f001 fd82 	bl	8001fc0 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 f842 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 f83a 	bl	8002550 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 f82e 	bl	8002550 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f001 fd5a 	bl	8001fc0 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f001 fd54 	bl	8001fc0 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f001 fd4e 	bl	8001fc0 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f001 fd3f 	bl	8001fc0 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f001 fd34 	bl	8001fc0 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000014c 	.word	0x2000014c
 80005a8:	2000014f 	.word	0x2000014f
 80005ac:	20000130 	.word	0x20000130
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000132 	.word	0x20000132
 80005b8:	20000134 	.word	0x20000134
 80005bc:	20000136 	.word	0x20000136
 80005c0:	20000138 	.word	0x20000138
 80005c4:	20000148 	.word	0x20000148
 80005c8:	2000014d 	.word	0x2000014d
 80005cc:	2000014e 	.word	0x2000014e

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	20000148 	.word	0x20000148
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000150 	.word	0x20000150

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f001 fc3c 	bl	8001fc0 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000014f 	.word	0x2000014f
 80007ac:	20000150 	.word	0x20000150

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000014d 	.word	0x2000014d

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fe38 	bl	8002550 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fe2c 	bl	8002550 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000148 	.word	0x20000148
 8000930:	20000132 	.word	0x20000132
 8000934:	20000134 	.word	0x20000134
 8000938:	2000014c 	.word	0x2000014c

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fe00 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f001 fb35 	bl	8001fc0 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fdf5 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f001 fb2a 	bl	8001fc0 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f001 fdea 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f001 fb1f 	bl	8001fc0 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000148 	.word	0x20000148
 800098c:	20000136 	.word	0x20000136

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f001 fdc7 	bl	8002550 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000148 	.word	0x20000148
 80009e0:	20000138 	.word	0x20000138

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f001 fd9d 	bl	8002550 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000148 	.word	0x20000148
 8000a34:	20000138 	.word	0x20000138

08000a38 <HAL_GPIO_EXTI_Callback>:
GPIO_TypeDef *const Column_ports[] = {GPIOD, GPIOD, GPIOD, GPIOD};
const uint16_t Column_pins[] = {GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13};
volatile uint32_t last_gpio_exti;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
  if (last_gpio_exti + 70 > HAL_GetTick()) // Simple button debouncing
 8000a42:	4bab      	ldr	r3, [pc, #684]	; (8000cf0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f103 0446 	add.w	r4, r3, #70	; 0x46
 8000a4a:	f001 faad 	bl	8001fa8 <HAL_GetTick>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	429c      	cmp	r4, r3
 8000a52:	f200 8145 	bhi.w	8000ce0 <HAL_GPIO_EXTI_Callback+0x2a8>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 8000a56:	f001 faa7 	bl	8001fa8 <HAL_GetTick>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4aa4      	ldr	r2, [pc, #656]	; (8000cf0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000a5e:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 8000a60:	23ff      	movs	r3, #255	; 0xff
 8000a62:	73fb      	strb	r3, [r7, #15]
  int8_t column_number = -1;
 8000a64:	23ff      	movs	r3, #255	; 0xff
 8000a66:	73bb      	strb	r3, [r7, #14]
  {
    // blue_button_pressed = 1;
    // return;
  }

  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000a68:	2300      	movs	r3, #0
 8000a6a:	737b      	strb	r3, [r7, #13]
 8000a6c:	e00b      	b.n	8000a86 <HAL_GPIO_EXTI_Callback+0x4e>
  {
    if (GPIO_Pin == Row_pins[row])
 8000a6e:	7b7b      	ldrb	r3, [r7, #13]
 8000a70:	4aa0      	ldr	r2, [pc, #640]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a76:	88fa      	ldrh	r2, [r7, #6]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d101      	bne.n	8000a80 <HAL_GPIO_EXTI_Callback+0x48>
    {
      row_number = row;
 8000a7c:	7b7b      	ldrb	r3, [r7, #13]
 8000a7e:	73fb      	strb	r3, [r7, #15]
  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	3301      	adds	r3, #1
 8000a84:	737b      	strb	r3, [r7, #13]
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d9f0      	bls.n	8000a6e <HAL_GPIO_EXTI_Callback+0x36>
    }
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8000a8c:	4b9a      	ldr	r3, [pc, #616]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a92:	2200      	movs	r2, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fd5b 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8000a9a:	4b97      	ldr	r3, [pc, #604]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fd54 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8000aa8:	4b93      	ldr	r3, [pc, #588]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fd4d 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000ab6:	4b90      	ldr	r3, [pc, #576]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000ab8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000abc:	2200      	movs	r2, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fd46 	bl	8002550 <HAL_GPIO_WritePin>

  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	733b      	strb	r3, [r7, #12]
 8000ac8:	e02d      	b.n	8000b26 <HAL_GPIO_EXTI_Callback+0xee>
  {
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8000aca:	7b3b      	ldrb	r3, [r7, #12]
 8000acc:	4a8b      	ldr	r2, [pc, #556]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000ace:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ad2:	7b3b      	ldrb	r3, [r7, #12]
 8000ad4:	4a8a      	ldr	r2, [pc, #552]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ada:	2201      	movs	r2, #1
 8000adc:	4619      	mov	r1, r3
 8000ade:	f001 fd37 	bl	8002550 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number]))
 8000ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae6:	4a87      	ldr	r2, [pc, #540]	; (8000d04 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000ae8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af0:	4980      	ldr	r1, [pc, #512]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000af2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000af6:	4619      	mov	r1, r3
 8000af8:	4610      	mov	r0, r2
 8000afa:	f001 fd11 	bl	8002520 <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_GPIO_EXTI_Callback+0xd0>
    {
      column_number = col;
 8000b04:	7b3b      	ldrb	r3, [r7, #12]
 8000b06:	73bb      	strb	r3, [r7, #14]
    }
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8000b08:	7b3b      	ldrb	r3, [r7, #12]
 8000b0a:	4a7c      	ldr	r2, [pc, #496]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000b0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b10:	7b3b      	ldrb	r3, [r7, #12]
 8000b12:	4a7b      	ldr	r2, [pc, #492]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f001 fd18 	bl	8002550 <HAL_GPIO_WritePin>
  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000b20:	7b3b      	ldrb	r3, [r7, #12]
 8000b22:	3301      	adds	r3, #1
 8000b24:	733b      	strb	r3, [r7, #12]
 8000b26:	7b3b      	ldrb	r3, [r7, #12]
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d9ce      	bls.n	8000aca <HAL_GPIO_EXTI_Callback+0x92>
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8000b2c:	4b72      	ldr	r3, [pc, #456]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b32:	2201      	movs	r2, #1
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fd0b 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8000b3a:	4b6f      	ldr	r3, [pc, #444]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000b3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b40:	2201      	movs	r2, #1
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 fd04 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8000b48:	4b6b      	ldr	r3, [pc, #428]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fcfd 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8000b56:	4b68      	ldr	r3, [pc, #416]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fcf6 	bl	8002550 <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 8000b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b6c:	f000 80ba 	beq.w	8000ce4 <HAL_GPIO_EXTI_Callback+0x2ac>
 8000b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b78:	f000 80b4 	beq.w	8000ce4 <HAL_GPIO_EXTI_Callback+0x2ac>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	4413      	add	r3, r2
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	3301      	adds	r3, #1
 8000b8a:	72fb      	strb	r3, [r7, #11]
  switch (button_number){
 8000b8c:	7afb      	ldrb	r3, [r7, #11]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	f200 80a9 	bhi.w	8000ce8 <HAL_GPIO_EXTI_Callback+0x2b0>
 8000b96:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <HAL_GPIO_EXTI_Callback+0x164>)
 8000b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9c:	08000bdd 	.word	0x08000bdd
 8000ba0:	08000bf1 	.word	0x08000bf1
 8000ba4:	08000c05 	.word	0x08000c05
 8000ba8:	08000c13 	.word	0x08000c13
 8000bac:	08000c21 	.word	0x08000c21
 8000bb0:	08000c35 	.word	0x08000c35
 8000bb4:	08000c43 	.word	0x08000c43
 8000bb8:	08000c51 	.word	0x08000c51
 8000bbc:	08000c5f 	.word	0x08000c5f
 8000bc0:	08000c6d 	.word	0x08000c6d
 8000bc4:	08000c7b 	.word	0x08000c7b
 8000bc8:	08000c89 	.word	0x08000c89
 8000bcc:	08000c9d 	.word	0x08000c9d
 8000bd0:	08000cab 	.word	0x08000cab
 8000bd4:	08000cb9 	.word	0x08000cb9
 8000bd8:	08000ccd 	.word	0x08000ccd
  case 1: //move	//1
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be2:	4849      	ldr	r0, [pc, #292]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000be4:	f001 fcb4 	bl	8002550 <HAL_GPIO_WritePin>
	move(1);
 8000be8:	2001      	movs	r0, #1
 8000bea:	f000 fd13 	bl	8001614 <move>

    break;
 8000bee:	e07c      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 2: //boom 	//2
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf6:	4844      	ldr	r0, [pc, #272]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000bf8:	f001 fcaa 	bl	8002550 <HAL_GPIO_WritePin>
	boom(1);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 fcf9 	bl	80015f4 <boom>
    break;
 8000c02:	e072      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 3:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c0a:	483f      	ldr	r0, [pc, #252]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000c0c:	f001 fca0 	bl	8002550 <HAL_GPIO_WritePin>
    break;
 8000c10:	e06b      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 4:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c18:	483b      	ldr	r0, [pc, #236]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000c1a:	f001 fc99 	bl	8002550 <HAL_GPIO_WritePin>
    break;
 8000c1e:	e064      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 5: //dir	 	//4
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c26:	4838      	ldr	r0, [pc, #224]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000c28:	f001 fc92 	bl	8002550 <HAL_GPIO_WritePin>
	 change_dir(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f000 fc97 	bl	8001560 <change_dir>
    break;
 8000c32:	e05a      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 6:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	4833      	ldr	r0, [pc, #204]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000c3c:	f001 fc88 	bl	8002550 <HAL_GPIO_WritePin>
    break;
 8000c40:	e053      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 7:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c48:	482f      	ldr	r0, [pc, #188]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000c4a:	f001 fc81 	bl	8002550 <HAL_GPIO_WritePin>
    break;
 8000c4e:	e04c      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 8:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c56:	482c      	ldr	r0, [pc, #176]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000c58:	f001 fc7a 	bl	8002550 <HAL_GPIO_WritePin>
    break;
 8000c5c:	e045      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 9:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c64:	4828      	ldr	r0, [pc, #160]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000c66:	f001 fc73 	bl	8002550 <HAL_GPIO_WritePin>
    break;
 8000c6a:	e03e      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 10:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c72:	4825      	ldr	r0, [pc, #148]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000c74:	f001 fc6c 	bl	8002550 <HAL_GPIO_WritePin>
    break;
 8000c78:	e037      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 11:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c80:	4821      	ldr	r0, [pc, #132]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000c82:	f001 fc65 	bl	8002550 <HAL_GPIO_WritePin>
    break;
 8000c86:	e030      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 12: //Dir	//C
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8e:	481e      	ldr	r0, [pc, #120]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000c90:	f001 fc5e 	bl	8002550 <HAL_GPIO_WritePin>
		change_dir(2);
 8000c94:	2002      	movs	r0, #2
 8000c96:	f000 fc63 	bl	8001560 <change_dir>
    break;
 8000c9a:	e026      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 13:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca2:	4819      	ldr	r0, [pc, #100]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000ca4:	f001 fc54 	bl	8002550 <HAL_GPIO_WritePin>
    break;
 8000ca8:	e01f      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 14:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb0:	4815      	ldr	r0, [pc, #84]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000cb2:	f001 fc4d 	bl	8002550 <HAL_GPIO_WritePin>
    break;
 8000cb6:	e018      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 15: //Boom	//#
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cbe:	4812      	ldr	r0, [pc, #72]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000cc0:	f001 fc46 	bl	8002550 <HAL_GPIO_WritePin>
		boom(2);
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f000 fc95 	bl	80015f4 <boom>
    break;
 8000cca:	e00e      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
  case 16: //move	//D
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd2:	480d      	ldr	r0, [pc, #52]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000cd4:	f001 fc3c 	bl	8002550 <HAL_GPIO_WritePin>
		move(2);
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f000 fc9b 	bl	8001614 <move>
    break;
 8000cde:	e004      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
    return;
 8000ce0:	bf00      	nop
 8000ce2:	e002      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
    return; // Reject invalid scan
 8000ce4:	bf00      	nop
 8000ce6:	e000      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>

  default:
    break;
 8000ce8:	bf00      	nop
  }
}
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd90      	pop	{r4, r7, pc}
 8000cf0:	20000154 	.word	0x20000154
 8000cf4:	08005424 	.word	0x08005424
 8000cf8:	48000c00 	.word	0x48000c00
 8000cfc:	0800542c 	.word	0x0800542c
 8000d00:	0800543c 	.word	0x0800543c
 8000d04:	08005414 	.word	0x08005414
 8000d08:	48001000 	.word	0x48001000

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f001 f8f0 	bl	8001ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f828 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f000 f928 	bl	8000f6c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d1c:	f000 f886 	bl	8000e2c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d20:	f000 f8c4 	bl	8000eac <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d24:	f000 f900 	bl	8000f28 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  programInit();
 8000d28:	f000 fa36 	bl	8001198 <programInit>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d32:	480c      	ldr	r0, [pc, #48]	; (8000d64 <main+0x58>)
 8000d34:	f001 fc0c 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d3e:	4809      	ldr	r0, [pc, #36]	; (8000d64 <main+0x58>)
 8000d40:	f001 fc06 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4a:	4806      	ldr	r0, [pc, #24]	; (8000d64 <main+0x58>)
 8000d4c:	f001 fc00 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d56:	4803      	ldr	r0, [pc, #12]	; (8000d64 <main+0x58>)
 8000d58:	f001 fbfa 	bl	8002550 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  programLoop();
	  update_board();
 8000d5c:	f000 fb88 	bl	8001470 <update_board>
  {
 8000d60:	e7fc      	b.n	8000d5c <main+0x50>
 8000d62:	bf00      	nop
 8000d64:	48000c00 	.word	0x48000c00

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b09e      	sub	sp, #120	; 0x78
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d72:	2228      	movs	r2, #40	; 0x28
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 faf8 	bl	800436c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	223c      	movs	r2, #60	; 0x3c
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 faea 	bl	800436c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000da0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da6:	2301      	movs	r3, #1
 8000da8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000daa:	2310      	movs	r3, #16
 8000dac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000db8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dbc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 fdec 	bl	80029a0 <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000dce:	f000 f9dd 	bl	800118c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000de8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dec:	2101      	movs	r1, #1
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 fe14 	bl	8003a1c <HAL_RCC_ClockConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dfa:	f000 f9c7 	bl	800118c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <SystemClock_Config+0xc0>)
 8000e00:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 ffea 	bl	8003de8 <HAL_RCCEx_PeriphCLKConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e1a:	f000 f9b7 	bl	800118c <Error_Handler>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3778      	adds	r7, #120	; 0x78
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	00020020 	.word	0x00020020

08000e2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e32:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <MX_I2C1_Init+0x78>)
 8000e34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e38:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <MX_I2C1_Init+0x7c>)
 8000e3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e66:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e68:	f001 fba2 	bl	80025b0 <HAL_I2C_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e72:	f000 f98b 	bl	800118c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e7a:	f001 fc28 	bl	80026ce <HAL_I2CEx_ConfigAnalogFilter>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e84:	f000 f982 	bl	800118c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e8c:	f001 fc6a 	bl	8002764 <HAL_I2CEx_ConfigDigitalFilter>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e96:	f000 f979 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000158 	.word	0x20000158
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	2000090e 	.word	0x2000090e

08000eac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <MX_SPI1_Init+0x78>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000eb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ebc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000ec6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000eca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ede:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000ee2:	2208      	movs	r2, #8
 8000ee4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000efa:	2207      	movs	r2, #7
 8000efc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000f06:	2208      	movs	r2, #8
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_SPI1_Init+0x74>)
 8000f0c:	f003 f91c 	bl	8004148 <HAL_SPI_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f16:	f000 f939 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001ac 	.word	0x200001ac
 8000f24:	40013000 	.word	0x40013000

08000f28 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <MX_USB_PCD_Init+0x3c>)
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <MX_USB_PCD_Init+0x40>)
 8000f30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USB_PCD_Init+0x3c>)
 8000f34:	2208      	movs	r2, #8
 8000f36:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_USB_PCD_Init+0x3c>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USB_PCD_Init+0x3c>)
 8000f40:	2202      	movs	r2, #2
 8000f42:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_USB_PCD_Init+0x3c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USB_PCD_Init+0x3c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_USB_PCD_Init+0x3c>)
 8000f52:	f001 fc53 	bl	80027fc <HAL_PCD_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000f5c:	f000 f916 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000210 	.word	0x20000210
 8000f68:	40005c00 	.word	0x40005c00

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f82:	4b7d      	ldr	r3, [pc, #500]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	4a7c      	ldr	r2, [pc, #496]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f8c:	6153      	str	r3, [r2, #20]
 8000f8e:	4b7a      	ldr	r3, [pc, #488]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f96:	61bb      	str	r3, [r7, #24]
 8000f98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b77      	ldr	r3, [pc, #476]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	4a76      	ldr	r2, [pc, #472]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fa4:	6153      	str	r3, [r2, #20]
 8000fa6:	4b74      	ldr	r3, [pc, #464]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb2:	4b71      	ldr	r3, [pc, #452]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a70      	ldr	r2, [pc, #448]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000fb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	4b6e      	ldr	r3, [pc, #440]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b6b      	ldr	r3, [pc, #428]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a6a      	ldr	r2, [pc, #424]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b68      	ldr	r3, [pc, #416]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b65      	ldr	r3, [pc, #404]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	4a64      	ldr	r2, [pc, #400]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fec:	6153      	str	r3, [r2, #20]
 8000fee:	4b62      	ldr	r3, [pc, #392]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b5f      	ldr	r3, [pc, #380]	; (8001178 <MX_GPIO_Init+0x20c>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4a5e      	ldr	r2, [pc, #376]	; (8001178 <MX_GPIO_Init+0x20c>)
 8001000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001004:	6153      	str	r3, [r2, #20]
 8001006:	4b5c      	ldr	r3, [pc, #368]	; (8001178 <MX_GPIO_Init+0x20c>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001012:	2200      	movs	r2, #0
 8001014:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001018:	4858      	ldr	r0, [pc, #352]	; (800117c <MX_GPIO_Init+0x210>)
 800101a:	f001 fa99 	bl	8002550 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2110      	movs	r1, #16
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f001 fa93 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2150      	movs	r1, #80	; 0x50
 800102e:	4854      	ldr	r0, [pc, #336]	; (8001180 <MX_GPIO_Init+0x214>)
 8001030:	f001 fa8e 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f242 0105 	movw	r1, #8197	; 0x2005
 800103a:	4852      	ldr	r0, [pc, #328]	; (8001184 <MX_GPIO_Init+0x218>)
 800103c:	f001 fa88 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 413e 	mov.w	r1, #48640	; 0xbe00
 8001046:	4850      	ldr	r0, [pc, #320]	; (8001188 <MX_GPIO_Init+0x21c>)
 8001048:	f001 fa82 	bl	8002550 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800104c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001050:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	4845      	ldr	r0, [pc, #276]	; (800117c <MX_GPIO_Init+0x210>)
 8001066:	f001 f8e1 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 800106a:	2320      	movs	r3, #32
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800106e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	483f      	ldr	r0, [pc, #252]	; (800117c <MX_GPIO_Init+0x210>)
 8001080:	f001 f8d4 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001084:	2301      	movs	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f001 f8c7 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800109e:	2310      	movs	r3, #16
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b8:	f001 f8b8 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80010bc:	2350      	movs	r3, #80	; 0x50
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	482b      	ldr	r0, [pc, #172]	; (8001180 <MX_GPIO_Init+0x214>)
 80010d4:	f001 f8aa 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 80010d8:	f242 0305 	movw	r3, #8197	; 0x2005
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4824      	ldr	r0, [pc, #144]	; (8001184 <MX_GPIO_Init+0x218>)
 80010f2:	f001 f89b 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80010f6:	f44f 433e 	mov.w	r3, #48640	; 0xbe00
 80010fa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	481e      	ldr	r0, [pc, #120]	; (8001188 <MX_GPIO_Init+0x21c>)
 8001110:	f001 f88c 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001114:	230f      	movs	r3, #15
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001118:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800111e:	2302      	movs	r3, #2
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4817      	ldr	r0, [pc, #92]	; (8001188 <MX_GPIO_Init+0x21c>)
 800112a:	f001 f87f 	bl	800222c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2006      	movs	r0, #6
 8001134:	f001 f843 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001138:	2006      	movs	r0, #6
 800113a:	f001 f85c 	bl	80021f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2007      	movs	r0, #7
 8001144:	f001 f83b 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001148:	2007      	movs	r0, #7
 800114a:	f001 f854 	bl	80021f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2008      	movs	r0, #8
 8001154:	f001 f833 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001158:	2008      	movs	r0, #8
 800115a:	f001 f84c 	bl	80021f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2009      	movs	r0, #9
 8001164:	f001 f82b 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001168:	2009      	movs	r0, #9
 800116a:	f001 f844 	bl	80021f6 <HAL_NVIC_EnableIRQ>

}
 800116e:	bf00      	nop
 8001170:	3730      	adds	r7, #48	; 0x30
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	48001000 	.word	0x48001000
 8001180:	48000800 	.word	0x48000800
 8001184:	48000400 	.word	0x48000400
 8001188:	48000c00 	.word	0x48000c00

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001194:	e7fe      	b.n	8001194 <Error_Handler+0x8>
	...

08001198 <programInit>:

}



void programInit() {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af04      	add	r7, sp, #16
	LiquidCrystal(GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_7);
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	9303      	str	r3, [sp, #12]
 80011a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	2308      	movs	r3, #8
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2304      	movs	r3, #4
 80011b4:	2202      	movs	r2, #2
 80011b6:	2101      	movs	r1, #1
 80011b8:	481e      	ldr	r0, [pc, #120]	; (8001234 <programInit+0x9c>)
 80011ba:	f7ff f861 	bl	8000280 <LiquidCrystal>
	begin(20, 4);
 80011be:	2104      	movs	r1, #4
 80011c0:	2014      	movs	r0, #20
 80011c2:	f7ff f8f5 	bl	80003b0 <begin>

//	createChar(num_health, health);
//	createChar(num_arrow_vert, arrow_vert);
//	createChar(num_arrow_hori, arrow_hori);

	createChar(num_tank_right, tank_right);
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <programInit+0xa0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	491c      	ldr	r1, [pc, #112]	; (800123c <programInit+0xa4>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fb30 	bl	8000832 <createChar>
	createChar(num_tank_up, tank_up);
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <programInit+0xa8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	491b      	ldr	r1, [pc, #108]	; (8001244 <programInit+0xac>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fb2a 	bl	8000832 <createChar>
	createChar(num_tank_down, tank_down);
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <programInit+0xb0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	491a      	ldr	r1, [pc, #104]	; (800124c <programInit+0xb4>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fb24 	bl	8000832 <createChar>
	createChar(num_tank_left, tank_left);
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <programInit+0xb8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4919      	ldr	r1, [pc, #100]	; (8001254 <programInit+0xbc>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fb1e 	bl	8000832 <createChar>
	createChar(num_extra_bullet, extra_bullet);
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <programInit+0xc0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4918      	ldr	r1, [pc, #96]	; (800125c <programInit+0xc4>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fb18 	bl	8000832 <createChar>
	createChar(num_chance, chance);
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <programInit+0xc8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4917      	ldr	r1, [pc, #92]	; (8001264 <programInit+0xcc>)
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fb12 	bl	8000832 <createChar>
	createChar(num_health, health);
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <programInit+0xd0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4916      	ldr	r1, [pc, #88]	; (800126c <programInit+0xd4>)
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fb0c 	bl	8000832 <createChar>
	createChar(num_arrow, arrow);
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <programInit+0xd8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4915      	ldr	r1, [pc, #84]	; (8001274 <programInit+0xdc>)
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fb06 	bl	8000832 <createChar>


	init_board();
 8001226:	f000 f827 	bl	8001278 <init_board>
//	lcd[8][0] = num_health; //health
//	lcd[9][0] = num_arrow; //chance



	update_board();
 800122a:	f000 f921 	bl	8001470 <update_board>
//	print(data);

}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	48000800 	.word	0x48000800
 8001238:	20000084 	.word	0x20000084
 800123c:	20000024 	.word	0x20000024
 8001240:	20000080 	.word	0x20000080
 8001244:	20000014 	.word	0x20000014
 8001248:	20000088 	.word	0x20000088
 800124c:	20000034 	.word	0x20000034
 8001250:	2000007c 	.word	0x2000007c
 8001254:	2000001c 	.word	0x2000001c
 8001258:	2000008c 	.word	0x2000008c
 800125c:	20000004 	.word	0x20000004
 8001260:	20000090 	.word	0x20000090
 8001264:	2000000c 	.word	0x2000000c
 8001268:	20000094 	.word	0x20000094
 800126c:	2000002c 	.word	0x2000002c
 8001270:	20000098 	.word	0x20000098
 8001274:	2000003c 	.word	0x2000003c

08001278 <init_board>:

void init_board(){
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
	//i == soton, j ==> radif

    for (int i = 0; i < 20; i++) {
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	e017      	b.n	80012b4 <init_board+0x3c>
        for (int j = 0; j < 4; j++) {
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	e00e      	b.n	80012a8 <init_board+0x30>
        	setCursor(i, j);
 800128a:	6a39      	ldr	r1, [r7, #32]
 800128c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800128e:	f7ff fa5d 	bl	800074c <setCursor>
        	lcd[i][j] = 0;
 8001292:	4a6f      	ldr	r2, [pc, #444]	; (8001450 <init_board+0x1d8>)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	441a      	add	r2, r3
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	4413      	add	r3, r2
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	3301      	adds	r3, #1
 80012a6:	623b      	str	r3, [r7, #32]
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	dded      	ble.n	800128a <init_board+0x12>
    for (int i = 0; i < 20; i++) {
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	3301      	adds	r3, #1
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	2b13      	cmp	r3, #19
 80012b8:	dde4      	ble.n	8001284 <init_board+0xc>
//    		print(" ");

        }
    }

	lcd[1][1] = num_wall;
 80012ba:	4b66      	ldr	r3, [pc, #408]	; (8001454 <init_board+0x1dc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b63      	ldr	r3, [pc, #396]	; (8001450 <init_board+0x1d8>)
 80012c2:	715a      	strb	r2, [r3, #5]
	lcd[1][2] = num_wall;
 80012c4:	4b63      	ldr	r3, [pc, #396]	; (8001454 <init_board+0x1dc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b61      	ldr	r3, [pc, #388]	; (8001450 <init_board+0x1d8>)
 80012cc:	719a      	strb	r2, [r3, #6]
	lcd[18][1] = num_wall;
 80012ce:	4b61      	ldr	r3, [pc, #388]	; (8001454 <init_board+0x1dc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b5e      	ldr	r3, [pc, #376]	; (8001450 <init_board+0x1d8>)
 80012d6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	lcd[18][2] = num_wall;
 80012da:	4b5e      	ldr	r3, [pc, #376]	; (8001454 <init_board+0x1dc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b5b      	ldr	r3, [pc, #364]	; (8001450 <init_board+0x1d8>)
 80012e2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	lcd[0][1] = num_tank_right;
 80012e6:	4b5c      	ldr	r3, [pc, #368]	; (8001458 <init_board+0x1e0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b58      	ldr	r3, [pc, #352]	; (8001450 <init_board+0x1d8>)
 80012ee:	705a      	strb	r2, [r3, #1]
	lcd[19][2] = num_tank_left;
 80012f0:	4b5a      	ldr	r3, [pc, #360]	; (800145c <init_board+0x1e4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b56      	ldr	r3, [pc, #344]	; (8001450 <init_board+0x1d8>)
 80012f8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	int element_counter = 2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 8001300:	e030      	b.n	8001364 <init_board+0xec>
		int col = rand() % 24;
 8001302:	f003 f83b 	bl	800437c <rand>
 8001306:	4602      	mov	r2, r0
 8001308:	4b55      	ldr	r3, [pc, #340]	; (8001460 <init_board+0x1e8>)
 800130a:	fb83 1302 	smull	r1, r3, r3, r2
 800130e:	1099      	asrs	r1, r3, #2
 8001310:	17d3      	asrs	r3, r2, #31
 8001312:	1ac9      	subs	r1, r1, r3
 8001314:	460b      	mov	r3, r1
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	440b      	add	r3, r1
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	60bb      	str	r3, [r7, #8]
		int row = rand() % 4;
 8001320:	f003 f82c 	bl	800437c <rand>
 8001324:	4603      	mov	r3, r0
 8001326:	425a      	negs	r2, r3
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	f002 0203 	and.w	r2, r2, #3
 8001330:	bf58      	it	pl
 8001332:	4253      	negpl	r3, r2
 8001334:	607b      	str	r3, [r7, #4]
		if(lcd[col][row] == 0){
 8001336:	4a46      	ldr	r2, [pc, #280]	; (8001450 <init_board+0x1d8>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	441a      	add	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10d      	bne.n	8001364 <init_board+0xec>
			lcd[col][row] = num_extra_bullet;
 8001348:	4b46      	ldr	r3, [pc, #280]	; (8001464 <init_board+0x1ec>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	b2d9      	uxtb	r1, r3
 800134e:	4a40      	ldr	r2, [pc, #256]	; (8001450 <init_board+0x1d8>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	441a      	add	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	460a      	mov	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
			element_counter--;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b01      	subs	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	2b00      	cmp	r3, #0
 8001368:	dccb      	bgt.n	8001302 <init_board+0x8a>
		}
	}

	element_counter = 2;
 800136a:	2302      	movs	r3, #2
 800136c:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 800136e:	e030      	b.n	80013d2 <init_board+0x15a>
		int col = rand() % 24;
 8001370:	f003 f804 	bl	800437c <rand>
 8001374:	4602      	mov	r2, r0
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <init_board+0x1e8>)
 8001378:	fb83 1302 	smull	r1, r3, r3, r2
 800137c:	1099      	asrs	r1, r3, #2
 800137e:	17d3      	asrs	r3, r2, #31
 8001380:	1ac9      	subs	r1, r1, r3
 8001382:	460b      	mov	r3, r1
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	440b      	add	r3, r1
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	613b      	str	r3, [r7, #16]
		int row = rand() % 4;
 800138e:	f002 fff5 	bl	800437c <rand>
 8001392:	4603      	mov	r3, r0
 8001394:	425a      	negs	r2, r3
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	bf58      	it	pl
 80013a0:	4253      	negpl	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
		if(lcd[col][row] == 0){
 80013a4:	4a2a      	ldr	r2, [pc, #168]	; (8001450 <init_board+0x1d8>)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	441a      	add	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10d      	bne.n	80013d2 <init_board+0x15a>
			lcd[col][row] = num_health;
 80013b6:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <init_board+0x1f0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b2d9      	uxtb	r1, r3
 80013bc:	4a24      	ldr	r2, [pc, #144]	; (8001450 <init_board+0x1d8>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	441a      	add	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	460a      	mov	r2, r1
 80013ca:	701a      	strb	r2, [r3, #0]
			element_counter--;
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	dccb      	bgt.n	8001370 <init_board+0xf8>
		}
	}

	element_counter = 2;
 80013d8:	2302      	movs	r3, #2
 80013da:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 80013dc:	e030      	b.n	8001440 <init_board+0x1c8>
		int col = rand() % 24;
 80013de:	f002 ffcd 	bl	800437c <rand>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <init_board+0x1e8>)
 80013e6:	fb83 1302 	smull	r1, r3, r3, r2
 80013ea:	1099      	asrs	r1, r3, #2
 80013ec:	17d3      	asrs	r3, r2, #31
 80013ee:	1ac9      	subs	r1, r1, r3
 80013f0:	460b      	mov	r3, r1
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	440b      	add	r3, r1
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	61bb      	str	r3, [r7, #24]
		int row = rand() % 4;
 80013fc:	f002 ffbe 	bl	800437c <rand>
 8001400:	4603      	mov	r3, r0
 8001402:	425a      	negs	r2, r3
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	f002 0203 	and.w	r2, r2, #3
 800140c:	bf58      	it	pl
 800140e:	4253      	negpl	r3, r2
 8001410:	617b      	str	r3, [r7, #20]
		if(lcd[col][row] == 0){
 8001412:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <init_board+0x1d8>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	441a      	add	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10d      	bne.n	8001440 <init_board+0x1c8>
			lcd[col][row] = num_obstacle;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <init_board+0x1f4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	b2d9      	uxtb	r1, r3
 800142a:	4a09      	ldr	r2, [pc, #36]	; (8001450 <init_board+0x1d8>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	441a      	add	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	4413      	add	r3, r2
 8001436:	460a      	mov	r2, r1
 8001438:	701a      	strb	r2, [r3, #0]
			element_counter--;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b01      	subs	r3, #1
 800143e:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	2b00      	cmp	r3, #0
 8001444:	dccb      	bgt.n	80013de <init_board+0x166>
		}
	}

}
 8001446:	bf00      	nop
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200004fc 	.word	0x200004fc
 8001454:	2000009c 	.word	0x2000009c
 8001458:	20000084 	.word	0x20000084
 800145c:	2000007c 	.word	0x2000007c
 8001460:	2aaaaaab 	.word	0x2aaaaaab
 8001464:	2000008c 	.word	0x2000008c
 8001468:	20000094 	.word	0x20000094
 800146c:	200000a0 	.word	0x200000a0

08001470 <update_board>:

void update_board(){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0

    for (int i = 0; i < 20; i++) {
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	e05f      	b.n	800153c <update_board+0xcc>
        for (int j = 0; j < 4; j++) {
 800147c:	2300      	movs	r3, #0
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	e056      	b.n	8001530 <update_board+0xc0>
        	setCursor(i, j);
 8001482:	6839      	ldr	r1, [r7, #0]
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff f961 	bl	800074c <setCursor>
        	if(lcd[i][j] != 9 && lcd[i][j] != 10 && lcd[i][j] != 0){
 800148a:	4a30      	ldr	r2, [pc, #192]	; (800154c <update_board+0xdc>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	441a      	add	r2, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b09      	cmp	r3, #9
 800149a:	d01c      	beq.n	80014d6 <update_board+0x66>
 800149c:	4a2b      	ldr	r2, [pc, #172]	; (800154c <update_board+0xdc>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	441a      	add	r2, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b0a      	cmp	r3, #10
 80014ac:	d013      	beq.n	80014d6 <update_board+0x66>
 80014ae:	4a27      	ldr	r2, [pc, #156]	; (800154c <update_board+0xdc>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	441a      	add	r2, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00a      	beq.n	80014d6 <update_board+0x66>
        		write(lcd[i][j]);
 80014c0:	4a22      	ldr	r2, [pc, #136]	; (800154c <update_board+0xdc>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	441a      	add	r2, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f9e6 	bl	80008a0 <write>
        	if(lcd[i][j] != 9 && lcd[i][j] != 10 && lcd[i][j] != 0){
 80014d4:	e029      	b.n	800152a <update_board+0xba>
        	}
        	else if (lcd[i][j] == 9 ){
 80014d6:	4a1d      	ldr	r2, [pc, #116]	; (800154c <update_board+0xdc>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	441a      	add	r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	d103      	bne.n	80014f0 <update_board+0x80>
        		print("#");
 80014e8:	4819      	ldr	r0, [pc, #100]	; (8001550 <update_board+0xe0>)
 80014ea:	f7ff f977 	bl	80007dc <print>
 80014ee:	e01c      	b.n	800152a <update_board+0xba>
        	}
        	else if (lcd[i][j] == 10 ){
 80014f0:	4a16      	ldr	r2, [pc, #88]	; (800154c <update_board+0xdc>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	441a      	add	r2, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b0a      	cmp	r3, #10
 8001500:	d103      	bne.n	800150a <update_board+0x9a>
        		print("I");
 8001502:	4814      	ldr	r0, [pc, #80]	; (8001554 <update_board+0xe4>)
 8001504:	f7ff f96a 	bl	80007dc <print>
 8001508:	e00f      	b.n	800152a <update_board+0xba>
        	}
        	else if (lcd[i][j] == 0){
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <update_board+0xdc>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	441a      	add	r2, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	4413      	add	r3, r2
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <update_board+0xb4>
        		print(" ");
 800151c:	480e      	ldr	r0, [pc, #56]	; (8001558 <update_board+0xe8>)
 800151e:	f7ff f95d 	bl	80007dc <print>
 8001522:	e002      	b.n	800152a <update_board+0xba>

        	}
        	else{
        		print("U");
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <update_board+0xec>)
 8001526:	f7ff f959 	bl	80007dc <print>
        for (int j = 0; j < 4; j++) {
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2b03      	cmp	r3, #3
 8001534:	dda5      	ble.n	8001482 <update_board+0x12>
    for (int i = 0; i < 20; i++) {
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3301      	adds	r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b13      	cmp	r3, #19
 8001540:	dd9c      	ble.n	800147c <update_board+0xc>

        	}
        }
    }
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200004fc 	.word	0x200004fc
 8001550:	08005404 	.word	0x08005404
 8001554:	08005408 	.word	0x08005408
 8001558:	0800540c 	.word	0x0800540c
 800155c:	08005410 	.word	0x08005410

08001560 <change_dir>:
    setNumber(1234);
}



void change_dir(int player){
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	if (player == 1){
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d119      	bne.n	80015a2 <change_dir+0x42>
		int new_dir = player1.direction + 1;
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <change_dir+0x88>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	3301      	adds	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
		if(new_dir == 5){
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2b05      	cmp	r3, #5
 800157a:	d101      	bne.n	8001580 <change_dir+0x20>
			new_dir = 1;
 800157c:	2301      	movs	r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
		}
		player1.direction = new_dir;
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <change_dir+0x88>)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	60d3      	str	r3, [r2, #12]
		lcd[player1.position_x][player1.position_y] = player1.direction;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <change_dir+0x88>)
 8001588:	68d9      	ldr	r1, [r3, #12]
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <change_dir+0x88>)
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <change_dir+0x88>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	b2c8      	uxtb	r0, r1
 8001594:	4915      	ldr	r1, [pc, #84]	; (80015ec <change_dir+0x8c>)
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	440a      	add	r2, r1
 800159a:	4413      	add	r3, r2
 800159c:	4602      	mov	r2, r0
 800159e:	701a      	strb	r2, [r3, #0]
		}
		player2.direction = new_dir;
		lcd[player2.position_x][player2.position_y] = player2.direction;

	}
}
 80015a0:	e01b      	b.n	80015da <change_dir+0x7a>
	}else if (player == 2){
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d118      	bne.n	80015da <change_dir+0x7a>
		int new_dir = player2.direction + 1;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <change_dir+0x90>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	3301      	adds	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
		if(new_dir == 5){
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d101      	bne.n	80015ba <change_dir+0x5a>
			new_dir = 1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
		player2.direction = new_dir;
 80015ba:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <change_dir+0x90>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
		lcd[player2.position_x][player2.position_y] = player2.direction;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <change_dir+0x90>)
 80015c2:	68d9      	ldr	r1, [r3, #12]
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <change_dir+0x90>)
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <change_dir+0x90>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	b2c8      	uxtb	r0, r1
 80015ce:	4907      	ldr	r1, [pc, #28]	; (80015ec <change_dir+0x8c>)
 80015d0:	0092      	lsls	r2, r2, #2
 80015d2:	440a      	add	r2, r1
 80015d4:	4413      	add	r3, r2
 80015d6:	4602      	mov	r2, r0
 80015d8:	701a      	strb	r2, [r3, #0]
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000044 	.word	0x20000044
 80015ec:	200004fc 	.word	0x200004fc
 80015f0:	20000060 	.word	0x20000060

080015f4 <boom>:

void boom(int player){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0); //Temp
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <boom+0x1c>)
 8001604:	f000 ffa4 	bl	8002550 <HAL_GPIO_WritePin>
	//TODO

}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	48001000 	.word	0x48001000

08001614 <move>:

void move(int player){
 8001614:	b480      	push	{r7}
 8001616:	b095      	sub	sp, #84	; 0x54
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	int dir;

	if (player == 1){
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b01      	cmp	r3, #1
 8001620:	f040 8118 	bne.w	8001854 <move+0x240>
		dir = player1.direction;
 8001624:	4b87      	ldr	r3, [pc, #540]	; (8001844 <move+0x230>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 800162a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800162c:	2b01      	cmp	r3, #1
 800162e:	d13f      	bne.n	80016b0 <move+0x9c>
			int curr_col = player1.position_x;
 8001630:	4b84      	ldr	r3, [pc, #528]	; (8001844 <move+0x230>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	613b      	str	r3, [r7, #16]
			int curr_row = player1.position_y;
 8001636:	4b83      	ldr	r3, [pc, #524]	; (8001844 <move+0x230>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	60fb      	str	r3, [r7, #12]
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f340 8214 	ble.w	8001a6c <move+0x458>
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	3b01      	subs	r3, #1
 8001648:	4a7f      	ldr	r2, [pc, #508]	; (8001848 <move+0x234>)
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	441a      	add	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b7d      	ldr	r3, [pc, #500]	; (800184c <move+0x238>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	f000 8206 	beq.w	8001a6c <move+0x458>
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	3b01      	subs	r3, #1
 8001664:	4a78      	ldr	r2, [pc, #480]	; (8001848 <move+0x234>)
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	441a      	add	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b77      	ldr	r3, [pc, #476]	; (8001850 <move+0x23c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	f000 81f8 	beq.w	8001a6c <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 800167c:	4a72      	ldr	r2, [pc, #456]	; (8001848 <move+0x234>)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	441a      	add	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player1.direction;
 800168c:	4b6d      	ldr	r3, [pc, #436]	; (8001844 <move+0x230>)
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	3b01      	subs	r3, #1
 8001694:	b2d1      	uxtb	r1, r2
 8001696:	4a6c      	ldr	r2, [pc, #432]	; (8001848 <move+0x234>)
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	441a      	add	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	460a      	mov	r2, r1
 80016a2:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x - 1;
 80016a4:	4b67      	ldr	r3, [pc, #412]	; (8001844 <move+0x230>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	4a66      	ldr	r2, [pc, #408]	; (8001844 <move+0x230>)
 80016ac:	6053      	str	r3, [r2, #4]
			}
		}
	}


}
 80016ae:	e1dd      	b.n	8001a6c <move+0x458>
		}else if (dir == 2){
 80016b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d13f      	bne.n	8001736 <move+0x122>
			int curr_col = player1.position_x;
 80016b6:	4b63      	ldr	r3, [pc, #396]	; (8001844 <move+0x230>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61bb      	str	r3, [r7, #24]
			int curr_row = player1.position_y;
 80016bc:	4b61      	ldr	r3, [pc, #388]	; (8001844 <move+0x230>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	617b      	str	r3, [r7, #20]
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f340 81d1 	ble.w	8001a6c <move+0x458>
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	495e      	ldr	r1, [pc, #376]	; (8001848 <move+0x234>)
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	440a      	add	r2, r1
 80016d6:	4413      	add	r3, r2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	4b5b      	ldr	r3, [pc, #364]	; (800184c <move+0x238>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	f000 81c3 	beq.w	8001a6c <move+0x458>
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	4957      	ldr	r1, [pc, #348]	; (8001848 <move+0x234>)
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	440a      	add	r2, r1
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b55      	ldr	r3, [pc, #340]	; (8001850 <move+0x23c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	f000 81b5 	beq.w	8001a6c <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 8001702:	4a51      	ldr	r2, [pc, #324]	; (8001848 <move+0x234>)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	441a      	add	r2, r3
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	4413      	add	r3, r2
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player1.direction;
 8001712:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <move+0x230>)
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3b01      	subs	r3, #1
 800171a:	b2d0      	uxtb	r0, r2
 800171c:	494a      	ldr	r1, [pc, #296]	; (8001848 <move+0x234>)
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	0092      	lsls	r2, r2, #2
 8001722:	440a      	add	r2, r1
 8001724:	4413      	add	r3, r2
 8001726:	4602      	mov	r2, r0
 8001728:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y - 1;
 800172a:	4b46      	ldr	r3, [pc, #280]	; (8001844 <move+0x230>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	3b01      	subs	r3, #1
 8001730:	4a44      	ldr	r2, [pc, #272]	; (8001844 <move+0x230>)
 8001732:	6093      	str	r3, [r2, #8]
}
 8001734:	e19a      	b.n	8001a6c <move+0x458>
		}else if (dir == 3){
 8001736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001738:	2b03      	cmp	r3, #3
 800173a:	d13f      	bne.n	80017bc <move+0x1a8>
			int curr_col = player1.position_x;
 800173c:	4b41      	ldr	r3, [pc, #260]	; (8001844 <move+0x230>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	623b      	str	r3, [r7, #32]
			int curr_row = player1.position_y;
 8001742:	4b40      	ldr	r3, [pc, #256]	; (8001844 <move+0x230>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	61fb      	str	r3, [r7, #28]
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	2b12      	cmp	r3, #18
 800174c:	f300 818e 	bgt.w	8001a6c <move+0x458>
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	3301      	adds	r3, #1
 8001754:	4a3c      	ldr	r2, [pc, #240]	; (8001848 <move+0x234>)
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	441a      	add	r2, r3
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b3a      	ldr	r3, [pc, #232]	; (800184c <move+0x238>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	f000 8180 	beq.w	8001a6c <move+0x458>
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	3301      	adds	r3, #1
 8001770:	4a35      	ldr	r2, [pc, #212]	; (8001848 <move+0x234>)
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	441a      	add	r2, r3
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <move+0x23c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	f000 8172 	beq.w	8001a6c <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 8001788:	4a2f      	ldr	r2, [pc, #188]	; (8001848 <move+0x234>)
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	441a      	add	r2, r3
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	4413      	add	r3, r2
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player1.direction;
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <move+0x230>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	3301      	adds	r3, #1
 80017a0:	b2d1      	uxtb	r1, r2
 80017a2:	4a29      	ldr	r2, [pc, #164]	; (8001848 <move+0x234>)
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	441a      	add	r2, r3
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	4413      	add	r3, r2
 80017ac:	460a      	mov	r2, r1
 80017ae:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x + 1;
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <move+0x230>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a23      	ldr	r2, [pc, #140]	; (8001844 <move+0x230>)
 80017b8:	6053      	str	r3, [r2, #4]
}
 80017ba:	e157      	b.n	8001a6c <move+0x458>
		}else if (dir == 4){
 80017bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017be:	2b04      	cmp	r3, #4
 80017c0:	f040 8154 	bne.w	8001a6c <move+0x458>
			int curr_col = player1.position_x;
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <move+0x230>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
			int curr_row = player1.position_y;
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <move+0x230>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	f300 814a 	bgt.w	8001a6c <move+0x458>
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	3301      	adds	r3, #1
 80017dc:	491a      	ldr	r1, [pc, #104]	; (8001848 <move+0x234>)
 80017de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	440a      	add	r2, r1
 80017e4:	4413      	add	r3, r2
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <move+0x238>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	f000 813c 	beq.w	8001a6c <move+0x458>
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	3301      	adds	r3, #1
 80017f8:	4913      	ldr	r1, [pc, #76]	; (8001848 <move+0x234>)
 80017fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	440a      	add	r2, r1
 8001800:	4413      	add	r3, r2
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <move+0x23c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	f000 812e 	beq.w	8001a6c <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <move+0x234>)
 8001812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	441a      	add	r2, r3
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	4413      	add	r3, r2
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player1.direction;
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <move+0x230>)
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	3301      	adds	r3, #1
 8001828:	b2d0      	uxtb	r0, r2
 800182a:	4907      	ldr	r1, [pc, #28]	; (8001848 <move+0x234>)
 800182c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	440a      	add	r2, r1
 8001832:	4413      	add	r3, r2
 8001834:	4602      	mov	r2, r0
 8001836:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y + 1;
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <move+0x230>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	3301      	adds	r3, #1
 800183e:	4a01      	ldr	r2, [pc, #4]	; (8001844 <move+0x230>)
 8001840:	6093      	str	r3, [r2, #8]
}
 8001842:	e113      	b.n	8001a6c <move+0x458>
 8001844:	20000044 	.word	0x20000044
 8001848:	200004fc 	.word	0x200004fc
 800184c:	200000a0 	.word	0x200000a0
 8001850:	2000009c 	.word	0x2000009c
	}else if (player == 2){
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	f040 8108 	bne.w	8001a6c <move+0x458>
		dir = player2.direction;
 800185c:	4b86      	ldr	r3, [pc, #536]	; (8001a78 <move+0x464>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 8001862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001864:	2b01      	cmp	r3, #1
 8001866:	d13f      	bne.n	80018e8 <move+0x2d4>
			int curr_col = player2.position_x;
 8001868:	4b83      	ldr	r3, [pc, #524]	; (8001a78 <move+0x464>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
			int curr_row = player2.position_y;
 800186e:	4b82      	ldr	r3, [pc, #520]	; (8001a78 <move+0x464>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 8001874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001876:	2b00      	cmp	r3, #0
 8001878:	f340 80f8 	ble.w	8001a6c <move+0x458>
 800187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187e:	3b01      	subs	r3, #1
 8001880:	4a7e      	ldr	r2, [pc, #504]	; (8001a7c <move+0x468>)
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	441a      	add	r2, r3
 8001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b7c      	ldr	r3, [pc, #496]	; (8001a80 <move+0x46c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	f000 80ea 	beq.w	8001a6c <move+0x458>
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	3b01      	subs	r3, #1
 800189c:	4a77      	ldr	r2, [pc, #476]	; (8001a7c <move+0x468>)
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	441a      	add	r2, r3
 80018a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a4:	4413      	add	r3, r2
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b76      	ldr	r3, [pc, #472]	; (8001a84 <move+0x470>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	f000 80dc 	beq.w	8001a6c <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 80018b4:	4a71      	ldr	r2, [pc, #452]	; (8001a7c <move+0x468>)
 80018b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	441a      	add	r2, r3
 80018bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018be:	4413      	add	r3, r2
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player2.direction;
 80018c4:	4b6c      	ldr	r3, [pc, #432]	; (8001a78 <move+0x464>)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b2d1      	uxtb	r1, r2
 80018ce:	4a6b      	ldr	r2, [pc, #428]	; (8001a7c <move+0x468>)
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	441a      	add	r2, r3
 80018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d6:	4413      	add	r3, r2
 80018d8:	460a      	mov	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x - 1;
 80018dc:	4b66      	ldr	r3, [pc, #408]	; (8001a78 <move+0x464>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	4a65      	ldr	r2, [pc, #404]	; (8001a78 <move+0x464>)
 80018e4:	6053      	str	r3, [r2, #4]
}
 80018e6:	e0c1      	b.n	8001a6c <move+0x458>
		}else if (dir == 2){
 80018e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d13f      	bne.n	800196e <move+0x35a>
			int curr_col = player2.position_x;
 80018ee:	4b62      	ldr	r3, [pc, #392]	; (8001a78 <move+0x464>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
			int curr_row = player2.position_y;
 80018f4:	4b60      	ldr	r3, [pc, #384]	; (8001a78 <move+0x464>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f340 80b5 	ble.w	8001a6c <move+0x458>
 8001902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001904:	3b01      	subs	r3, #1
 8001906:	495d      	ldr	r1, [pc, #372]	; (8001a7c <move+0x468>)
 8001908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	440a      	add	r2, r1
 800190e:	4413      	add	r3, r2
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	4b5a      	ldr	r3, [pc, #360]	; (8001a80 <move+0x46c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	f000 80a7 	beq.w	8001a6c <move+0x458>
 800191e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001920:	3b01      	subs	r3, #1
 8001922:	4956      	ldr	r1, [pc, #344]	; (8001a7c <move+0x468>)
 8001924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001926:	0092      	lsls	r2, r2, #2
 8001928:	440a      	add	r2, r1
 800192a:	4413      	add	r3, r2
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	4b54      	ldr	r3, [pc, #336]	; (8001a84 <move+0x470>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	f000 8099 	beq.w	8001a6c <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 800193a:	4a50      	ldr	r2, [pc, #320]	; (8001a7c <move+0x468>)
 800193c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	441a      	add	r2, r3
 8001942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001944:	4413      	add	r3, r2
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player2.direction;
 800194a:	4b4b      	ldr	r3, [pc, #300]	; (8001a78 <move+0x464>)
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001950:	3b01      	subs	r3, #1
 8001952:	b2d0      	uxtb	r0, r2
 8001954:	4949      	ldr	r1, [pc, #292]	; (8001a7c <move+0x468>)
 8001956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	440a      	add	r2, r1
 800195c:	4413      	add	r3, r2
 800195e:	4602      	mov	r2, r0
 8001960:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y - 1;
 8001962:	4b45      	ldr	r3, [pc, #276]	; (8001a78 <move+0x464>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	3b01      	subs	r3, #1
 8001968:	4a43      	ldr	r2, [pc, #268]	; (8001a78 <move+0x464>)
 800196a:	6093      	str	r3, [r2, #8]
}
 800196c:	e07e      	b.n	8001a6c <move+0x458>
		}else if (dir == 3){
 800196e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001970:	2b03      	cmp	r3, #3
 8001972:	d13c      	bne.n	80019ee <move+0x3da>
			int curr_col = player2.position_x;
 8001974:	4b40      	ldr	r3, [pc, #256]	; (8001a78 <move+0x464>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	643b      	str	r3, [r7, #64]	; 0x40
			int curr_row = player2.position_y;
 800197a:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <move+0x464>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 8001980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001982:	2b12      	cmp	r3, #18
 8001984:	dc72      	bgt.n	8001a6c <move+0x458>
 8001986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001988:	3301      	adds	r3, #1
 800198a:	4a3c      	ldr	r2, [pc, #240]	; (8001a7c <move+0x468>)
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	441a      	add	r2, r3
 8001990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001992:	4413      	add	r3, r2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b39      	ldr	r3, [pc, #228]	; (8001a80 <move+0x46c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d065      	beq.n	8001a6c <move+0x458>
 80019a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a2:	3301      	adds	r3, #1
 80019a4:	4a35      	ldr	r2, [pc, #212]	; (8001a7c <move+0x468>)
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	441a      	add	r2, r3
 80019aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <move+0x470>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d058      	beq.n	8001a6c <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 80019ba:	4a30      	ldr	r2, [pc, #192]	; (8001a7c <move+0x468>)
 80019bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	441a      	add	r2, r3
 80019c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019c4:	4413      	add	r3, r2
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player2.direction;
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <move+0x464>)
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d0:	3301      	adds	r3, #1
 80019d2:	b2d1      	uxtb	r1, r2
 80019d4:	4a29      	ldr	r2, [pc, #164]	; (8001a7c <move+0x468>)
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	441a      	add	r2, r3
 80019da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019dc:	4413      	add	r3, r2
 80019de:	460a      	mov	r2, r1
 80019e0:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x + 1;
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <move+0x464>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	3301      	adds	r3, #1
 80019e8:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <move+0x464>)
 80019ea:	6053      	str	r3, [r2, #4]
}
 80019ec:	e03e      	b.n	8001a6c <move+0x458>
		}else if (dir == 4){
 80019ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d13b      	bne.n	8001a6c <move+0x458>
			int curr_col = player2.position_x;
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <move+0x464>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	64bb      	str	r3, [r7, #72]	; 0x48
			int curr_row = player2.position_y;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <move+0x464>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	647b      	str	r3, [r7, #68]	; 0x44
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 8001a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	dc32      	bgt.n	8001a6c <move+0x458>
 8001a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a08:	3301      	adds	r3, #1
 8001a0a:	491c      	ldr	r1, [pc, #112]	; (8001a7c <move+0x468>)
 8001a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	440a      	add	r2, r1
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <move+0x46c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d025      	beq.n	8001a6c <move+0x458>
 8001a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a22:	3301      	adds	r3, #1
 8001a24:	4915      	ldr	r1, [pc, #84]	; (8001a7c <move+0x468>)
 8001a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	440a      	add	r2, r1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <move+0x470>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d018      	beq.n	8001a6c <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 8001a3a:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <move+0x468>)
 8001a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	441a      	add	r2, r3
 8001a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a44:	4413      	add	r3, r2
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player2.direction;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <move+0x464>)
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a50:	3301      	adds	r3, #1
 8001a52:	b2d0      	uxtb	r0, r2
 8001a54:	4909      	ldr	r1, [pc, #36]	; (8001a7c <move+0x468>)
 8001a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	440a      	add	r2, r1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4602      	mov	r2, r0
 8001a60:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y + 1;
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <move+0x464>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	3301      	adds	r3, #1
 8001a68:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <move+0x464>)
 8001a6a:	6093      	str	r3, [r2, #8]
}
 8001a6c:	bf00      	nop
 8001a6e:	3754      	adds	r7, #84	; 0x54
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	20000060 	.word	0x20000060
 8001a7c:	200004fc 	.word	0x200004fc
 8001a80:	200000a0 	.word	0x200000a0
 8001a84:	2000009c 	.word	0x2000009c

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_MspInit+0x44>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_MspInit+0x44>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6193      	str	r3, [r2, #24]
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_MspInit+0x44>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_MspInit+0x44>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <HAL_MspInit+0x44>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	61d3      	str	r3, [r2, #28]
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_MspInit+0x44>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001abe:	2007      	movs	r0, #7
 8001ac0:	f000 fb72 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <HAL_I2C_MspInit+0x7c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d127      	bne.n	8001b42 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_I2C_MspInit+0x80>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <HAL_I2C_MspInit+0x80>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6153      	str	r3, [r2, #20]
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_I2C_MspInit+0x80>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001b0a:	23c0      	movs	r3, #192	; 0xc0
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0e:	2312      	movs	r3, #18
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <HAL_I2C_MspInit+0x84>)
 8001b26:	f000 fb81 	bl	800222c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_I2C_MspInit+0x80>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <HAL_I2C_MspInit+0x80>)
 8001b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_I2C_MspInit+0x80>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40005400 	.word	0x40005400
 8001b50:	40021000 	.word	0x40021000
 8001b54:	48000400 	.word	0x48000400

08001b58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <HAL_SPI_MspInit+0x7c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d128      	bne.n	8001bcc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_SPI_MspInit+0x80>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	4a16      	ldr	r2, [pc, #88]	; (8001bd8 <HAL_SPI_MspInit+0x80>)
 8001b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b84:	6193      	str	r3, [r2, #24]
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_SPI_MspInit+0x80>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_SPI_MspInit+0x80>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <HAL_SPI_MspInit+0x80>)
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9c:	6153      	str	r3, [r2, #20]
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_SPI_MspInit+0x80>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001baa:	23e0      	movs	r3, #224	; 0xe0
 8001bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bba:	2305      	movs	r3, #5
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc8:	f000 fb30 	bl	800222c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40013000 	.word	0x40013000
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_PCD_MspInit+0x80>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d129      	bne.n	8001c52 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_PCD_MspInit+0x84>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_PCD_MspInit+0x84>)
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c08:	6153      	str	r3, [r2, #20]
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_PCD_MspInit+0x84>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001c16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001c28:	230e      	movs	r3, #14
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c36:	f000 faf9 	bl	800222c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_PCD_MspInit+0x84>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <HAL_PCD_MspInit+0x84>)
 8001c40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c44:	61d3      	str	r3, [r2, #28]
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_PCD_MspInit+0x84>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40005c00 	.word	0x40005c00
 8001c60:	40021000 	.word	0x40021000

08001c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <NMI_Handler+0x4>

08001c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <HardFault_Handler+0x4>

08001c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <MemManage_Handler+0x4>

08001c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb0:	f000 f966 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f000 fc5f 	bl	8002580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f000 fc58 	bl	8002580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001cd8:	2004      	movs	r0, #4
 8001cda:	f000 fc51 	bl	8002580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001ce6:	2008      	movs	r0, #8
 8001ce8:	f000 fc4a 	bl	8002580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return 1;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_kill>:

int _kill(int pid, int sig)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d0a:	f002 fb05 	bl	8004318 <__errno>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2216      	movs	r2, #22
 8001d12:	601a      	str	r2, [r3, #0]
  return -1;
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_exit>:

void _exit (int status)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ffe7 	bl	8001d00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d32:	e7fe      	b.n	8001d32 <_exit+0x12>

08001d34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e00a      	b.n	8001d5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d46:	f3af 8000 	nop.w
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	60ba      	str	r2, [r7, #8]
 8001d52:	b2ca      	uxtb	r2, r1
 8001d54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dbf0      	blt.n	8001d46 <_read+0x12>
  }

  return len;
 8001d64:	687b      	ldr	r3, [r7, #4]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e009      	b.n	8001d94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	60ba      	str	r2, [r7, #8]
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbf1      	blt.n	8001d80 <_write+0x12>
  }
  return len;
 8001d9c:	687b      	ldr	r3, [r7, #4]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_close>:

int _close(int file)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dce:	605a      	str	r2, [r3, #4]
  return 0;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_isatty>:

int _isatty(int file)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001de6:	2301      	movs	r3, #1
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <_sbrk+0x5c>)
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <_sbrk+0x60>)
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <_sbrk+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <_sbrk+0x64>)
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <_sbrk+0x68>)
 8001e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d207      	bcs.n	8001e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e40:	f002 fa6a 	bl	8004318 <__errno>
 8001e44:	4603      	mov	r3, r0
 8001e46:	220c      	movs	r2, #12
 8001e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4e:	e009      	b.n	8001e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <_sbrk+0x64>)
 8001e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e62:	68fb      	ldr	r3, [r7, #12]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	2000a000 	.word	0x2000a000
 8001e70:	00000400 	.word	0x00000400
 8001e74:	2000054c 	.word	0x2000054c
 8001e78:	20000568 	.word	0x20000568

08001e7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <SystemInit+0x20>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <SystemInit+0x20>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ea4:	f7ff ffea 	bl	8001e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea8:	480c      	ldr	r0, [pc, #48]	; (8001edc <LoopForever+0x6>)
  ldr r1, =_edata
 8001eaa:	490d      	ldr	r1, [pc, #52]	; (8001ee0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eac:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <LoopForever+0xe>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb0:	e002      	b.n	8001eb8 <LoopCopyDataInit>

08001eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb6:	3304      	adds	r3, #4

08001eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ebc:	d3f9      	bcc.n	8001eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ec0:	4c0a      	ldr	r4, [pc, #40]	; (8001eec <LoopForever+0x16>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec4:	e001      	b.n	8001eca <LoopFillZerobss>

08001ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec8:	3204      	adds	r2, #4

08001eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ecc:	d3fb      	bcc.n	8001ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ece:	f002 fa29 	bl	8004324 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ed2:	f7fe ff1b 	bl	8000d0c <main>

08001ed6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ed6:	e7fe      	b.n	8001ed6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ed8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8001ee4:	080055c4 	.word	0x080055c4
  ldr r2, =_sbss
 8001ee8:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8001eec:	20000564 	.word	0x20000564

08001ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC1_2_IRQHandler>
	...

08001ef4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_Init+0x28>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_Init+0x28>)
 8001efe:	f043 0310 	orr.w	r3, r3, #16
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 f94f 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f000 f808 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f10:	f7ff fdba 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40022000 	.word	0x40022000

08001f20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f967 	bl	8002212 <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f000 f92f 	bl	80021be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200000a4 	.word	0x200000a4
 8001f78:	200000ac 	.word	0x200000ac
 8001f7c:	200000a8 	.word	0x200000a8

08001f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	200000ac 	.word	0x200000ac
 8001fa4:	20000550 	.word	0x20000550

08001fa8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;  
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000550 	.word	0x20000550

08001fc0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff ffee 	bl	8001fa8 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffde 	bl	8001fa8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200000ac 	.word	0x200000ac

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4907      	ldr	r1, [pc, #28]	; (80020a4 <__NVIC_EnableIRQ+0x38>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f7ff ff8e 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff29 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff3e 	bl	8002050 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff8e 	bl	80020fc <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5d 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff31 	bl	800206c <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa2 	bl	8002164 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223a:	e154      	b.n	80024e6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2101      	movs	r1, #1
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8146 	beq.w	80024e0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d005      	beq.n	800226c <HAL_GPIO_Init+0x40>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d130      	bne.n	80022ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a2:	2201      	movs	r2, #1
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	f003 0201 	and.w	r2, r3, #1
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d017      	beq.n	800230a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d123      	bne.n	800235e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002322:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	220f      	movs	r2, #15
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	6939      	ldr	r1, [r7, #16]
 800235a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	2203      	movs	r2, #3
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0203 	and.w	r2, r3, #3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80a0 	beq.w	80024e0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a0:	4b58      	ldr	r3, [pc, #352]	; (8002504 <HAL_GPIO_Init+0x2d8>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a57      	ldr	r2, [pc, #348]	; (8002504 <HAL_GPIO_Init+0x2d8>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b55      	ldr	r3, [pc, #340]	; (8002504 <HAL_GPIO_Init+0x2d8>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023b8:	4a53      	ldr	r2, [pc, #332]	; (8002508 <HAL_GPIO_Init+0x2dc>)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	220f      	movs	r2, #15
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023e2:	d019      	beq.n	8002418 <HAL_GPIO_Init+0x1ec>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a49      	ldr	r2, [pc, #292]	; (800250c <HAL_GPIO_Init+0x2e0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d013      	beq.n	8002414 <HAL_GPIO_Init+0x1e8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a48      	ldr	r2, [pc, #288]	; (8002510 <HAL_GPIO_Init+0x2e4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00d      	beq.n	8002410 <HAL_GPIO_Init+0x1e4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a47      	ldr	r2, [pc, #284]	; (8002514 <HAL_GPIO_Init+0x2e8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d007      	beq.n	800240c <HAL_GPIO_Init+0x1e0>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a46      	ldr	r2, [pc, #280]	; (8002518 <HAL_GPIO_Init+0x2ec>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d101      	bne.n	8002408 <HAL_GPIO_Init+0x1dc>
 8002404:	2304      	movs	r3, #4
 8002406:	e008      	b.n	800241a <HAL_GPIO_Init+0x1ee>
 8002408:	2305      	movs	r3, #5
 800240a:	e006      	b.n	800241a <HAL_GPIO_Init+0x1ee>
 800240c:	2303      	movs	r3, #3
 800240e:	e004      	b.n	800241a <HAL_GPIO_Init+0x1ee>
 8002410:	2302      	movs	r3, #2
 8002412:	e002      	b.n	800241a <HAL_GPIO_Init+0x1ee>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <HAL_GPIO_Init+0x1ee>
 8002418:	2300      	movs	r3, #0
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	f002 0203 	and.w	r2, r2, #3
 8002420:	0092      	lsls	r2, r2, #2
 8002422:	4093      	lsls	r3, r2
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800242a:	4937      	ldr	r1, [pc, #220]	; (8002508 <HAL_GPIO_Init+0x2dc>)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002438:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_GPIO_Init+0x2f0>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800245c:	4a2f      	ldr	r2, [pc, #188]	; (800251c <HAL_GPIO_Init+0x2f0>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002462:	4b2e      	ldr	r3, [pc, #184]	; (800251c <HAL_GPIO_Init+0x2f0>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002486:	4a25      	ldr	r2, [pc, #148]	; (800251c <HAL_GPIO_Init+0x2f0>)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800248c:	4b23      	ldr	r3, [pc, #140]	; (800251c <HAL_GPIO_Init+0x2f0>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024b0:	4a1a      	ldr	r2, [pc, #104]	; (800251c <HAL_GPIO_Init+0x2f0>)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_GPIO_Init+0x2f0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_GPIO_Init+0x2f0>)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f47f aea3 	bne.w	800223c <HAL_GPIO_Init+0x10>
  }
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	371c      	adds	r7, #28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40021000 	.word	0x40021000
 8002508:	40010000 	.word	0x40010000
 800250c:	48000400 	.word	0x48000400
 8002510:	48000800 	.word	0x48000800
 8002514:	48000c00 	.word	0x48000c00
 8002518:	48001000 	.word	0x48001000
 800251c:	40010400 	.word	0x40010400

08002520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	887b      	ldrh	r3, [r7, #2]
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	e001      	b.n	8002542 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
 800255c:	4613      	mov	r3, r2
 800255e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002560:	787b      	ldrb	r3, [r7, #1]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800256c:	e002      	b.n	8002574 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d006      	beq.n	80025a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002596:	4a05      	ldr	r2, [pc, #20]	; (80025ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fa4a 	bl	8000a38 <HAL_GPIO_EXTI_Callback>
  }
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40010400 	.word	0x40010400

080025b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e081      	b.n	80026c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fa7a 	bl	8001ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	; 0x24
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002600:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002610:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	e006      	b.n	8002638 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002636:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d104      	bne.n	800264a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002648:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800266c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69d9      	ldr	r1, [r3, #28]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1a      	ldr	r2, [r3, #32]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d138      	bne.n	8002756 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e032      	b.n	8002758 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2224      	movs	r2, #36	; 0x24
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002720:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b20      	cmp	r3, #32
 8002778:	d139      	bne.n	80027ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002784:	2302      	movs	r3, #2
 8002786:	e033      	b.n	80027f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2224      	movs	r2, #36	; 0x24
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0201 	orr.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e000      	b.n	80027f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027ee:	2302      	movs	r3, #2
  }
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fe:	b08b      	sub	sp, #44	; 0x2c
 8002800:	af06      	add	r7, sp, #24
 8002802:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0c4      	b.n	8002998 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff f9da 	bl	8001bdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2203      	movs	r2, #3
 800282c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f001 fd32 	bl	800429e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	e040      	b.n	80028c2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	3301      	adds	r3, #1
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	3303      	adds	r3, #3
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002880:	7bfa      	ldrb	r2, [r7, #15]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	3338      	adds	r3, #56	; 0x38
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	440b      	add	r3, r1
 80028a2:	333c      	adds	r3, #60	; 0x3c
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	3340      	adds	r3, #64	; 0x40
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	3301      	adds	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3b9      	bcc.n	8002840 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	e044      	b.n	800295c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	440b      	add	r3, r1
 8002922:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	3301      	adds	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	429a      	cmp	r2, r3
 8002964:	d3b5      	bcc.n	80028d2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	687e      	ldr	r6, [r7, #4]
 800296e:	466d      	mov	r5, sp
 8002970:	f106 0410 	add.w	r4, r6, #16
 8002974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	602b      	str	r3, [r5, #0]
 800297c:	1d33      	adds	r3, r6, #4
 800297e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002980:	6838      	ldr	r0, [r7, #0]
 8002982:	f001 fca7 	bl	80042d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f001 b823 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 817d 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029dc:	4bbc      	ldr	r3, [pc, #752]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d00c      	beq.n	8002a02 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029e8:	4bb9      	ldr	r3, [pc, #740]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d15c      	bne.n	8002aae <HAL_RCC_OscConfig+0x10e>
 80029f4:	4bb6      	ldr	r3, [pc, #728]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a00:	d155      	bne.n	8002aae <HAL_RCC_OscConfig+0x10e>
 8002a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a06:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a16:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_RCC_OscConfig+0x94>
 8002a2e:	4ba8      	ldr	r3, [pc, #672]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	e015      	b.n	8002a60 <HAL_RCC_OscConfig+0xc0>
 8002a34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a38:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a50:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a5c:	4b9c      	ldr	r3, [pc, #624]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a64:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a68:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a6c:	fa92 f2a2 	rbit	r2, r2
 8002a70:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a74:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a78:	fab2 f282 	clz	r2, r2
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f042 0220 	orr.w	r2, r2, #32
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f002 021f 	and.w	r2, r2, #31
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 811f 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x334>
 8002a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 8116 	bne.w	8002cd4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f000 bfaf 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x12e>
 8002ac0:	4b83      	ldr	r3, [pc, #524]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a82      	ldr	r2, [pc, #520]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	e036      	b.n	8002b3c <HAL_RCC_OscConfig+0x19c>
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x158>
 8002ade:	4b7c      	ldr	r3, [pc, #496]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7b      	ldr	r2, [pc, #492]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b79      	ldr	r3, [pc, #484]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a78      	ldr	r2, [pc, #480]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e021      	b.n	8002b3c <HAL_RCC_OscConfig+0x19c>
 8002af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x184>
 8002b0a:	4b71      	ldr	r3, [pc, #452]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a70      	ldr	r2, [pc, #448]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4b6e      	ldr	r3, [pc, #440]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a6d      	ldr	r2, [pc, #436]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e00b      	b.n	8002b3c <HAL_RCC_OscConfig+0x19c>
 8002b24:	4b6a      	ldr	r3, [pc, #424]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a69      	ldr	r2, [pc, #420]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b67      	ldr	r3, [pc, #412]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a66      	ldr	r2, [pc, #408]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b3c:	4b64      	ldr	r3, [pc, #400]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	f023 020f 	bic.w	r2, r3, #15
 8002b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	495f      	ldr	r1, [pc, #380]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d059      	beq.n	8002c1a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7ff fa1f 	bl	8001fa8 <HAL_GetTick>
 8002b6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b70:	f7ff fa1a 	bl	8001fa8 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b64      	cmp	r3, #100	; 0x64
 8002b7e:	d902      	bls.n	8002b86 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	f000 bf43 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
 8002b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b9a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d102      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x218>
 8002bb2:	4b47      	ldr	r3, [pc, #284]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	e015      	b.n	8002be4 <HAL_RCC_OscConfig+0x244>
 8002bb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bbc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bd4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002be0:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002be8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002bec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002bf0:	fa92 f2a2 	rbit	r2, r2
 8002bf4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002bf8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002bfc:	fab2 f282 	clz	r2, r2
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f042 0220 	orr.w	r2, r2, #32
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	f002 021f 	and.w	r2, r2, #31
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ab      	beq.n	8002b70 <HAL_RCC_OscConfig+0x1d0>
 8002c18:	e05d      	b.n	8002cd6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7ff f9c5 	bl	8001fa8 <HAL_GetTick>
 8002c1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c24:	f7ff f9c0 	bl	8001fa8 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b64      	cmp	r3, #100	; 0x64
 8002c32:	d902      	bls.n	8002c3a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	f000 bee9 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
 8002c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c3e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c4e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d102      	bne.n	8002c6c <HAL_RCC_OscConfig+0x2cc>
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	e015      	b.n	8002c98 <HAL_RCC_OscConfig+0x2f8>
 8002c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c70:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c84:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c88:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c94:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c9c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002ca0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002ca4:	fa92 f2a2 	rbit	r2, r2
 8002ca8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002cac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002cb0:	fab2 f282 	clz	r2, r2
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	f042 0220 	orr.w	r2, r2, #32
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	f002 021f 	and.w	r2, r2, #31
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ab      	bne.n	8002c24 <HAL_RCC_OscConfig+0x284>
 8002ccc:	e003      	b.n	8002cd6 <HAL_RCC_OscConfig+0x336>
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 817d 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cec:	4ba6      	ldr	r3, [pc, #664]	; (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cf8:	4ba3      	ldr	r3, [pc, #652]	; (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d172      	bne.n	8002dea <HAL_RCC_OscConfig+0x44a>
 8002d04:	4ba0      	ldr	r3, [pc, #640]	; (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d16c      	bne.n	8002dea <HAL_RCC_OscConfig+0x44a>
 8002d10:	2302      	movs	r3, #2
 8002d12:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d22:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_OscConfig+0x3a0>
 8002d3a:	4b93      	ldr	r3, [pc, #588]	; (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	e013      	b.n	8002d68 <HAL_RCC_OscConfig+0x3c8>
 8002d40:	2302      	movs	r3, #2
 8002d42:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d52:	2302      	movs	r3, #2
 8002d54:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d58:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d64:	4b88      	ldr	r3, [pc, #544]	; (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d6e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d72:	fa92 f2a2 	rbit	r2, r2
 8002d76:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d7a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f042 0220 	orr.w	r2, r2, #32
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f002 021f 	and.w	r2, r2, #31
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCC_OscConfig+0x410>
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d002      	beq.n	8002db0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f000 be2e 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	4b75      	ldr	r3, [pc, #468]	; (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	21f8      	movs	r1, #248	; 0xf8
 8002dc6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002dce:	fa91 f1a1 	rbit	r1, r1
 8002dd2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002dd6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002dda:	fab1 f181 	clz	r1, r1
 8002dde:	b2c9      	uxtb	r1, r1
 8002de0:	408b      	lsls	r3, r1
 8002de2:	4969      	ldr	r1, [pc, #420]	; (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de8:	e0fd      	b.n	8002fe6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8088 	beq.w	8002f0c <HAL_RCC_OscConfig+0x56c>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	461a      	mov	r2, r3
 8002e24:	2301      	movs	r3, #1
 8002e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff f8be 	bl	8001fa8 <HAL_GetTick>
 8002e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e32:	f7ff f8b9 	bl	8001fa8 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d902      	bls.n	8002e48 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	f000 bde2 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4d8>
 8002e72:	4b45      	ldr	r3, [pc, #276]	; (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e013      	b.n	8002ea0 <HAL_RCC_OscConfig+0x500>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e9c:	4b3a      	ldr	r3, [pc, #232]	; (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ea6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002eaa:	fa92 f2a2 	rbit	r2, r2
 8002eae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002eb2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002eb6:	fab2 f282 	clz	r2, r2
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	f042 0220 	orr.w	r2, r2, #32
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	f002 021f 	and.w	r2, r2, #31
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0af      	beq.n	8002e32 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	21f8      	movs	r1, #248	; 0xf8
 8002ee8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ef0:	fa91 f1a1 	rbit	r1, r1
 8002ef4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ef8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002efc:	fab1 f181 	clz	r1, r1
 8002f00:	b2c9      	uxtb	r1, r1
 8002f02:	408b      	lsls	r3, r1
 8002f04:	4920      	ldr	r1, [pc, #128]	; (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
 8002f0a:	e06c      	b.n	8002fe6 <HAL_RCC_OscConfig+0x646>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	461a      	mov	r2, r3
 8002f34:	2300      	movs	r3, #0
 8002f36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7ff f836 	bl	8001fa8 <HAL_GetTick>
 8002f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f42:	f7ff f831 	bl	8001fa8 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d902      	bls.n	8002f58 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	f000 bd5a 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d104      	bne.n	8002f8c <HAL_RCC_OscConfig+0x5ec>
 8002f82:	4b01      	ldr	r3, [pc, #4]	; (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	e015      	b.n	8002fb4 <HAL_RCC_OscConfig+0x614>
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002fa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002fb0:	4bc8      	ldr	r3, [pc, #800]	; (80032d4 <HAL_RCC_OscConfig+0x934>)
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002fba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002fbe:	fa92 f2a2 	rbit	r2, r2
 8002fc2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002fc6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002fca:	fab2 f282 	clz	r2, r2
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	f042 0220 	orr.w	r2, r2, #32
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	f002 021f 	and.w	r2, r2, #31
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ad      	bne.n	8002f42 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8110 	beq.w	800321c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d079      	beq.n	8003100 <HAL_RCC_OscConfig+0x760>
 800300c:	2301      	movs	r3, #1
 800300e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800301e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	4bab      	ldr	r3, [pc, #684]	; (80032d8 <HAL_RCC_OscConfig+0x938>)
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	461a      	mov	r2, r3
 8003032:	2301      	movs	r3, #1
 8003034:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003036:	f7fe ffb7 	bl	8001fa8 <HAL_GetTick>
 800303a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	e00a      	b.n	8003056 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003040:	f7fe ffb2 	bl	8001fa8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d902      	bls.n	8003056 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	f000 bcdb 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
 8003056:	2302      	movs	r3, #2
 8003058:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003070:	2202      	movs	r2, #2
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003078:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	fa93 f2a3 	rbit	r2, r3
 8003082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003086:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003094:	2202      	movs	r2, #2
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	fa93 f2a3 	rbit	r2, r3
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b0:	4b88      	ldr	r3, [pc, #544]	; (80032d4 <HAL_RCC_OscConfig+0x934>)
 80030b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030bc:	2102      	movs	r1, #2
 80030be:	6019      	str	r1, [r3, #0]
 80030c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	fa93 f1a3 	rbit	r1, r3
 80030ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030d6:	6019      	str	r1, [r3, #0]
  return result;
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	2101      	movs	r1, #1
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0a0      	beq.n	8003040 <HAL_RCC_OscConfig+0x6a0>
 80030fe:	e08d      	b.n	800321c <HAL_RCC_OscConfig+0x87c>
 8003100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003104:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003110:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	fa93 f2a3 	rbit	r2, r3
 800311a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003122:	601a      	str	r2, [r3, #0]
  return result;
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800312c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	4b68      	ldr	r3, [pc, #416]	; (80032d8 <HAL_RCC_OscConfig+0x938>)
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	461a      	mov	r2, r3
 800313e:	2300      	movs	r3, #0
 8003140:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003142:	f7fe ff31 	bl	8001fa8 <HAL_GetTick>
 8003146:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314a:	e00a      	b.n	8003162 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800314c:	f7fe ff2c 	bl	8001fa8 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d902      	bls.n	8003162 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	f000 bc55 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800316a:	2202      	movs	r2, #2
 800316c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003172:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	fa93 f2a3 	rbit	r2, r3
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800318e:	2202      	movs	r2, #2
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	fa93 f2a3 	rbit	r2, r3
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031b2:	2202      	movs	r2, #2
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	fa93 f2a3 	rbit	r2, r3
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ce:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <HAL_RCC_OscConfig+0x934>)
 80031d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031da:	2102      	movs	r1, #2
 80031dc:	6019      	str	r1, [r3, #0]
 80031de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	fa93 f1a3 	rbit	r1, r3
 80031ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031f4:	6019      	str	r1, [r3, #0]
  return result;
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	2101      	movs	r1, #1
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d197      	bne.n	800314c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 81a1 	beq.w	8003574 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003238:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <HAL_RCC_OscConfig+0x934>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d116      	bne.n	8003272 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003244:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <HAL_RCC_OscConfig+0x934>)
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <HAL_RCC_OscConfig+0x934>)
 800324a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324e:	61d3      	str	r3, [r2, #28]
 8003250:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_RCC_OscConfig+0x934>)
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003266:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800326a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <HAL_RCC_OscConfig+0x93c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11a      	bne.n	80032b4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <HAL_RCC_OscConfig+0x93c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a16      	ldr	r2, [pc, #88]	; (80032dc <HAL_RCC_OscConfig+0x93c>)
 8003284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003288:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328a:	f7fe fe8d 	bl	8001fa8 <HAL_GetTick>
 800328e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003292:	e009      	b.n	80032a8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003294:	f7fe fe88 	bl	8001fa8 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b64      	cmp	r3, #100	; 0x64
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e3b1      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_RCC_OscConfig+0x93c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ef      	beq.n	8003294 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10d      	bne.n	80032e0 <HAL_RCC_OscConfig+0x940>
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <HAL_RCC_OscConfig+0x934>)
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	4a02      	ldr	r2, [pc, #8]	; (80032d4 <HAL_RCC_OscConfig+0x934>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6213      	str	r3, [r2, #32]
 80032d0:	e03c      	b.n	800334c <HAL_RCC_OscConfig+0x9ac>
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	10908120 	.word	0x10908120
 80032dc:	40007000 	.word	0x40007000
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10c      	bne.n	800330a <HAL_RCC_OscConfig+0x96a>
 80032f0:	4bc1      	ldr	r3, [pc, #772]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4ac0      	ldr	r2, [pc, #768]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	6213      	str	r3, [r2, #32]
 80032fc:	4bbe      	ldr	r3, [pc, #760]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4abd      	ldr	r2, [pc, #756]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003302:	f023 0304 	bic.w	r3, r3, #4
 8003306:	6213      	str	r3, [r2, #32]
 8003308:	e020      	b.n	800334c <HAL_RCC_OscConfig+0x9ac>
 800330a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x994>
 800331a:	4bb7      	ldr	r3, [pc, #732]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4ab6      	ldr	r2, [pc, #728]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	6213      	str	r3, [r2, #32]
 8003326:	4bb4      	ldr	r3, [pc, #720]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4ab3      	ldr	r2, [pc, #716]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6213      	str	r3, [r2, #32]
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0x9ac>
 8003334:	4bb0      	ldr	r3, [pc, #704]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4aaf      	ldr	r2, [pc, #700]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	6213      	str	r3, [r2, #32]
 8003340:	4bad      	ldr	r3, [pc, #692]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4aac      	ldr	r2, [pc, #688]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003346:	f023 0304 	bic.w	r3, r3, #4
 800334a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8081 	beq.w	8003460 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335e:	f7fe fe23 	bl	8001fa8 <HAL_GetTick>
 8003362:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fe fe1e 	bl	8001fa8 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f241 3288 	movw	r2, #5000	; 0x1388
 8003378:	4293      	cmp	r3, r2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e345      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003388:	2202      	movs	r2, #2
 800338a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003390:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	fa93 f2a3 	rbit	r2, r3
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033ac:	2202      	movs	r2, #2
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	fa93 f2a3 	rbit	r2, r3
 80033be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033c6:	601a      	str	r2, [r3, #0]
  return result;
 80033c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033cc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f043 0302 	orr.w	r3, r3, #2
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d102      	bne.n	80033ec <HAL_RCC_OscConfig+0xa4c>
 80033e6:	4b84      	ldr	r3, [pc, #528]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	e013      	b.n	8003414 <HAL_RCC_OscConfig+0xa74>
 80033ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80033f4:	2202      	movs	r2, #2
 80033f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	4b79      	ldr	r3, [pc, #484]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003418:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800341c:	2102      	movs	r1, #2
 800341e:	6011      	str	r1, [r2, #0]
 8003420:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003424:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	fa92 f1a2 	rbit	r1, r2
 800342e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003432:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003436:	6011      	str	r1, [r2, #0]
  return result;
 8003438:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800343c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	fab2 f282 	clz	r2, r2
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	f002 021f 	and.w	r2, r2, #31
 8003452:	2101      	movs	r1, #1
 8003454:	fa01 f202 	lsl.w	r2, r1, r2
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d084      	beq.n	8003368 <HAL_RCC_OscConfig+0x9c8>
 800345e:	e07f      	b.n	8003560 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7fe fda2 	bl	8001fa8 <HAL_GetTick>
 8003464:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003468:	e00b      	b.n	8003482 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fe fd9d 	bl	8001fa8 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e2c4      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800348a:	2202      	movs	r2, #2
 800348c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003492:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	fa93 f2a3 	rbit	r2, r3
 800349c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034ae:	2202      	movs	r2, #2
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	fa93 f2a3 	rbit	r2, r3
 80034c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034c8:	601a      	str	r2, [r3, #0]
  return result;
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f043 0302 	orr.w	r3, r3, #2
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d102      	bne.n	80034ee <HAL_RCC_OscConfig+0xb4e>
 80034e8:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	e013      	b.n	8003516 <HAL_RCC_OscConfig+0xb76>
 80034ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034f6:	2202      	movs	r2, #2
 80034f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800351a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800351e:	2102      	movs	r1, #2
 8003520:	6011      	str	r1, [r2, #0]
 8003522:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003526:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	fa92 f1a2 	rbit	r1, r2
 8003530:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003534:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003538:	6011      	str	r1, [r2, #0]
  return result;
 800353a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800353e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	fab2 f282 	clz	r2, r2
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	f002 021f 	and.w	r2, r2, #31
 8003554:	2101      	movs	r1, #1
 8003556:	fa01 f202 	lsl.w	r2, r1, r2
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d184      	bne.n	800346a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003560:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003564:	2b01      	cmp	r3, #1
 8003566:	d105      	bne.n	8003574 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003568:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 800356e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003572:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8242 	beq.w	8003a0a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003586:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b08      	cmp	r3, #8
 8003590:	f000 8213 	beq.w	80039ba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	f040 8162 	bne.w	800386a <HAL_RCC_OscConfig+0xeca>
 80035a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035aa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	fa93 f2a3 	rbit	r2, r3
 80035c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035ca:	601a      	str	r2, [r3, #0]
  return result;
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	461a      	mov	r2, r3
 80035e8:	2300      	movs	r3, #0
 80035ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe fcdc 	bl	8001fa8 <HAL_GetTick>
 80035f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f4:	e00c      	b.n	8003610 <HAL_RCC_OscConfig+0xc70>
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe fcd4 	bl	8001fa8 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e1fd      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
 8003610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003614:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003618:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800361c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003622:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	fa93 f2a3 	rbit	r2, r3
 800362c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003630:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003634:	601a      	str	r2, [r3, #0]
  return result;
 8003636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800363e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003640:	fab3 f383 	clz	r3, r3
 8003644:	b2db      	uxtb	r3, r3
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d102      	bne.n	800365a <HAL_RCC_OscConfig+0xcba>
 8003654:	4bb0      	ldr	r3, [pc, #704]	; (8003918 <HAL_RCC_OscConfig+0xf78>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	e027      	b.n	80036aa <HAL_RCC_OscConfig+0xd0a>
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	fa93 f2a3 	rbit	r2, r3
 8003676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003684:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003688:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003692:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	fa93 f2a3 	rbit	r2, r3
 800369c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	4b9c      	ldr	r3, [pc, #624]	; (8003918 <HAL_RCC_OscConfig+0xf78>)
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ae:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80036b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036b6:	6011      	str	r1, [r2, #0]
 80036b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036bc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	fa92 f1a2 	rbit	r1, r2
 80036c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036ce:	6011      	str	r1, [r2, #0]
  return result;
 80036d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	fab2 f282 	clz	r2, r2
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	f042 0220 	orr.w	r2, r2, #32
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	f002 021f 	and.w	r2, r2, #31
 80036ea:	2101      	movs	r1, #1
 80036ec:	fa01 f202 	lsl.w	r2, r1, r2
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d182      	bne.n	80035fc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f6:	4b88      	ldr	r3, [pc, #544]	; (8003918 <HAL_RCC_OscConfig+0xf78>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800370a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	430b      	orrs	r3, r1
 8003718:	497f      	ldr	r1, [pc, #508]	; (8003918 <HAL_RCC_OscConfig+0xf78>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003726:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800372a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	fa93 f2a3 	rbit	r2, r3
 800373a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003742:	601a      	str	r2, [r3, #0]
  return result;
 8003744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003748:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800374c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003758:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	461a      	mov	r2, r3
 8003760:	2301      	movs	r3, #1
 8003762:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fc20 	bl	8001fa8 <HAL_GetTick>
 8003768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800376c:	e009      	b.n	8003782 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376e:	f7fe fc1b 	bl	8001fa8 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e144      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
 8003782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003786:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800378a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800378e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003794:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	fa93 f2a3 	rbit	r2, r3
 800379e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037a6:	601a      	str	r2, [r3, #0]
  return result;
 80037a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d102      	bne.n	80037cc <HAL_RCC_OscConfig+0xe2c>
 80037c6:	4b54      	ldr	r3, [pc, #336]	; (8003918 <HAL_RCC_OscConfig+0xf78>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	e027      	b.n	800381c <HAL_RCC_OscConfig+0xe7c>
 80037cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	fa93 f2a3 	rbit	r2, r3
 80037e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	fa93 f2a3 	rbit	r2, r3
 800380e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003812:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	4b3f      	ldr	r3, [pc, #252]	; (8003918 <HAL_RCC_OscConfig+0xf78>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003820:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003824:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003828:	6011      	str	r1, [r2, #0]
 800382a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800382e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	fa92 f1a2 	rbit	r1, r2
 8003838:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800383c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003840:	6011      	str	r1, [r2, #0]
  return result;
 8003842:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003846:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	fab2 f282 	clz	r2, r2
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f042 0220 	orr.w	r2, r2, #32
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f002 021f 	and.w	r2, r2, #31
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d082      	beq.n	800376e <HAL_RCC_OscConfig+0xdce>
 8003868:	e0cf      	b.n	8003a0a <HAL_RCC_OscConfig+0x106a>
 800386a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003872:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	fa93 f2a3 	rbit	r2, r3
 8003886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800388e:	601a      	str	r2, [r3, #0]
  return result;
 8003890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003894:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003898:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	461a      	mov	r2, r3
 80038ac:	2300      	movs	r3, #0
 80038ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe fb7a 	bl	8001fa8 <HAL_GetTick>
 80038b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b8:	e009      	b.n	80038ce <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fe fb75 	bl	8001fa8 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e09e      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
 80038ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	fa93 f2a3 	rbit	r2, r3
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038f2:	601a      	str	r2, [r3, #0]
  return result;
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d104      	bne.n	800391c <HAL_RCC_OscConfig+0xf7c>
 8003912:	4b01      	ldr	r3, [pc, #4]	; (8003918 <HAL_RCC_OscConfig+0xf78>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	e029      	b.n	800396c <HAL_RCC_OscConfig+0xfcc>
 8003918:	40021000 	.word	0x40021000
 800391c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003920:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	fa93 f2a3 	rbit	r2, r3
 8003938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003946:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800394a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003954:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	fa93 f2a3 	rbit	r2, r3
 800395e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003962:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <HAL_RCC_OscConfig+0x1078>)
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003970:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003974:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003978:	6011      	str	r1, [r2, #0]
 800397a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800397e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	fa92 f1a2 	rbit	r1, r2
 8003988:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800398c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003990:	6011      	str	r1, [r2, #0]
  return result;
 8003992:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003996:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	fab2 f282 	clz	r2, r2
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	f042 0220 	orr.w	r2, r2, #32
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	f002 021f 	and.w	r2, r2, #31
 80039ac:	2101      	movs	r1, #1
 80039ae:	fa01 f202 	lsl.w	r2, r1, r2
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d180      	bne.n	80038ba <HAL_RCC_OscConfig+0xf1a>
 80039b8:	e027      	b.n	8003a0a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e01e      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_RCC_OscConfig+0x1078>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039da:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d10b      	bne.n	8003a06 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80039ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000

08003a1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b09e      	sub	sp, #120	; 0x78
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e162      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	4b90      	ldr	r3, [pc, #576]	; (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d910      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b8d      	ldr	r3, [pc, #564]	; (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 0207 	bic.w	r2, r3, #7
 8003a4a:	498b      	ldr	r1, [pc, #556]	; (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b89      	ldr	r3, [pc, #548]	; (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e14a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a70:	4b82      	ldr	r3, [pc, #520]	; (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	497f      	ldr	r1, [pc, #508]	; (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80dc 	beq.w	8003c48 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d13c      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xf6>
 8003a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aa0:	fa93 f3a3 	rbit	r3, r3
 8003aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa8:	fab3 f383 	clz	r3, r3
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d102      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xa6>
 8003abc:	4b6f      	ldr	r3, [pc, #444]	; (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	e00f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0xc6>
 8003ac2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ac6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aca:	fa93 f3a3 	rbit	r3, r3
 8003ace:	667b      	str	r3, [r7, #100]	; 0x64
 8003ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ad8:	fa93 f3a3 	rbit	r3, r3
 8003adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ade:	4b67      	ldr	r3, [pc, #412]	; (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ae6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aea:	fa92 f2a2 	rbit	r2, r2
 8003aee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003af0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003af2:	fab2 f282 	clz	r2, r2
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	f042 0220 	orr.w	r2, r2, #32
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	f002 021f 	and.w	r2, r2, #31
 8003b02:	2101      	movs	r1, #1
 8003b04:	fa01 f202 	lsl.w	r2, r1, r2
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d17b      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0f3      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d13c      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x178>
 8003b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d102      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x128>
 8003b3e:	4b4f      	ldr	r3, [pc, #316]	; (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	e00f      	b.n	8003b64 <HAL_RCC_ClockConfig+0x148>
 8003b44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4c:	fa93 f3a3 	rbit	r3, r3
 8003b50:	647b      	str	r3, [r7, #68]	; 0x44
 8003b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b56:	643b      	str	r3, [r7, #64]	; 0x40
 8003b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b60:	4b46      	ldr	r3, [pc, #280]	; (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b68:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b6c:	fa92 f2a2 	rbit	r2, r2
 8003b70:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b74:	fab2 f282 	clz	r2, r2
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	f042 0220 	orr.w	r2, r2, #32
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	f002 021f 	and.w	r2, r2, #31
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d13a      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0b2      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
 8003b94:	2302      	movs	r3, #2
 8003b96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	fab3 f383 	clz	r3, r3
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d102      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x1a0>
 8003bb6:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	e00d      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x1bc>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc8:	2302      	movs	r3, #2
 8003bca:	623b      	str	r3, [r7, #32]
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	fa93 f3a3 	rbit	r3, r3
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	2202      	movs	r2, #2
 8003bda:	61ba      	str	r2, [r7, #24]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	fa92 f2a2 	rbit	r2, r2
 8003be2:	617a      	str	r2, [r7, #20]
  return result;
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	fab2 f282 	clz	r2, r2
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	f042 0220 	orr.w	r2, r2, #32
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	f002 021f 	and.w	r2, r2, #31
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e079      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c06:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f023 0203 	bic.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	491a      	ldr	r1, [pc, #104]	; (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c18:	f7fe f9c6 	bl	8001fa8 <HAL_GetTick>
 8003c1c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c20:	f7fe f9c2 	bl	8001fa8 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e061      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f003 020c 	and.w	r2, r3, #12
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d1eb      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d214      	bcs.n	8003c80 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 0207 	bic.w	r2, r3, #7
 8003c5e:	4906      	ldr	r1, [pc, #24]	; (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e040      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
 8003c78:	40022000 	.word	0x40022000
 8003c7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c8c:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <HAL_RCC_ClockConfig+0x2e8>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	491a      	ldr	r1, [pc, #104]	; (8003d04 <HAL_RCC_ClockConfig+0x2e8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003caa:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <HAL_RCC_ClockConfig+0x2e8>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4912      	ldr	r1, [pc, #72]	; (8003d04 <HAL_RCC_ClockConfig+0x2e8>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003cbe:	f000 f829 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003cc2:	4601      	mov	r1, r0
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <HAL_RCC_ClockConfig+0x2e8>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ccc:	22f0      	movs	r2, #240	; 0xf0
 8003cce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	fa92 f2a2 	rbit	r2, r2
 8003cd6:	60fa      	str	r2, [r7, #12]
  return result;
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	fab2 f282 	clz	r2, r2
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	40d3      	lsrs	r3, r2
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <HAL_RCC_ClockConfig+0x2ec>)
 8003ce4:	5cd3      	ldrb	r3, [r2, r3]
 8003ce6:	fa21 f303 	lsr.w	r3, r1, r3
 8003cea:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <HAL_RCC_ClockConfig+0x2f0>)
 8003cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003cee:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <HAL_RCC_ClockConfig+0x2f4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe f914 	bl	8001f20 <HAL_InitTick>
  
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3778      	adds	r7, #120	; 0x78
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000
 8003d08:	08005444 	.word	0x08005444
 8003d0c:	200000a4 	.word	0x200000a4
 8003d10:	200000a8 	.word	0x200000a8

08003d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b08b      	sub	sp, #44	; 0x2c
 8003d18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	2300      	movs	r3, #0
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d2e:	4b29      	ldr	r3, [pc, #164]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x30>
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x36>
 8003d42:	e03c      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d44:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d46:	623b      	str	r3, [r7, #32]
      break;
 8003d48:	e03c      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d50:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d54:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	fa92 f2a2 	rbit	r2, r2
 8003d5c:	607a      	str	r2, [r7, #4]
  return result;
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	fab2 f282 	clz	r2, r2
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	40d3      	lsrs	r3, r2
 8003d68:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d6a:	5cd3      	ldrb	r3, [r2, r3]
 8003d6c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d6e:	4b19      	ldr	r3, [pc, #100]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	220f      	movs	r2, #15
 8003d78:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	fa92 f2a2 	rbit	r2, r2
 8003d80:	60fa      	str	r2, [r7, #12]
  return result;
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	fab2 f282 	clz	r2, r2
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	40d3      	lsrs	r3, r2
 8003d8c:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d8e:	5cd3      	ldrb	r3, [r2, r3]
 8003d90:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d9c:	4a0e      	ldr	r2, [pc, #56]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dac:	e004      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	623b      	str	r3, [r7, #32]
      break;
 8003dbc:	e002      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003dc0:	623b      	str	r3, [r7, #32]
      break;
 8003dc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	372c      	adds	r7, #44	; 0x2c
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	007a1200 	.word	0x007a1200
 8003ddc:	08005454 	.word	0x08005454
 8003de0:	08005464 	.word	0x08005464
 8003de4:	003d0900 	.word	0x003d0900

08003de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b092      	sub	sp, #72	; 0x48
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80d4 	beq.w	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0c:	4b4e      	ldr	r3, [pc, #312]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10e      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e18:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	4a4a      	ldr	r2, [pc, #296]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e22:	61d3      	str	r3, [r2, #28]
 8003e24:	4b48      	ldr	r3, [pc, #288]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e36:	4b45      	ldr	r3, [pc, #276]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d118      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e42:	4b42      	ldr	r3, [pc, #264]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a41      	ldr	r2, [pc, #260]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4e:	f7fe f8ab 	bl	8001fa8 <HAL_GetTick>
 8003e52:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	e008      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e56:	f7fe f8a7 	bl	8001fa8 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b64      	cmp	r3, #100	; 0x64
 8003e62:	d901      	bls.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e169      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e68:	4b38      	ldr	r3, [pc, #224]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e74:	4b34      	ldr	r3, [pc, #208]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8084 	beq.w	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d07c      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e94:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ea2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea6:	fa93 f3a3 	rbit	r3, r3
 8003eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eae:	fab3 f383 	clz	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ee6:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d04b      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef6:	f7fe f857 	bl	8001fa8 <HAL_GetTick>
 8003efa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fe f853 	bl	8001fa8 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e113      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003f14:	2302      	movs	r3, #2
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	fa93 f3a3 	rbit	r3, r3
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f20:	2302      	movs	r3, #2
 8003f22:	623b      	str	r3, [r7, #32]
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	61fb      	str	r3, [r7, #28]
  return result;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f043 0302 	orr.w	r3, r3, #2
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d108      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f42:	4b01      	ldr	r3, [pc, #4]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	e00d      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40007000 	.word	0x40007000
 8003f50:	10908100 	.word	0x10908100
 8003f54:	2302      	movs	r3, #2
 8003f56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	fa93 f3a3 	rbit	r3, r3
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	4b78      	ldr	r3, [pc, #480]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	2202      	movs	r2, #2
 8003f66:	613a      	str	r2, [r7, #16]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	fa92 f2a2 	rbit	r2, r2
 8003f6e:	60fa      	str	r2, [r7, #12]
  return result;
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	fab2 f282 	clz	r2, r2
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	f002 021f 	and.w	r2, r2, #31
 8003f82:	2101      	movs	r1, #1
 8003f84:	fa01 f202 	lsl.w	r2, r1, r2
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0b7      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f8e:	4b6d      	ldr	r3, [pc, #436]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	496a      	ldr	r1, [pc, #424]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fa0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d105      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa8:	4b66      	ldr	r3, [pc, #408]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	4a65      	ldr	r2, [pc, #404]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fc0:	4b60      	ldr	r3, [pc, #384]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	f023 0203 	bic.w	r2, r3, #3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	495d      	ldr	r1, [pc, #372]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d008      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fde:	4b59      	ldr	r3, [pc, #356]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	4956      	ldr	r1, [pc, #344]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ffc:	4b51      	ldr	r3, [pc, #324]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	494e      	ldr	r1, [pc, #312]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800400a:	4313      	orrs	r3, r2
 800400c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800401a:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f023 0210 	bic.w	r2, r3, #16
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	4947      	ldr	r1, [pc, #284]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004028:	4313      	orrs	r3, r2
 800402a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004038:	4b42      	ldr	r3, [pc, #264]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	493f      	ldr	r1, [pc, #252]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004046:	4313      	orrs	r3, r2
 8004048:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d008      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004056:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	f023 0220 	bic.w	r2, r3, #32
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	4938      	ldr	r1, [pc, #224]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004064:	4313      	orrs	r3, r2
 8004066:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004074:	4b33      	ldr	r3, [pc, #204]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	4930      	ldr	r1, [pc, #192]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004082:	4313      	orrs	r3, r2
 8004084:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004092:	4b2c      	ldr	r3, [pc, #176]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	4929      	ldr	r1, [pc, #164]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040b0:	4b24      	ldr	r3, [pc, #144]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	4921      	ldr	r1, [pc, #132]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040ce:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	491a      	ldr	r1, [pc, #104]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80040ec:	4b15      	ldr	r3, [pc, #84]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	4912      	ldr	r1, [pc, #72]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	490b      	ldr	r1, [pc, #44]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004118:	4313      	orrs	r3, r2
 800411a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004134:	4903      	ldr	r1, [pc, #12]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3748      	adds	r7, #72	; 0x48
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000

08004148 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e09d      	b.n	8004296 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	2b00      	cmp	r3, #0
 8004160:	d108      	bne.n	8004174 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800416a:	d009      	beq.n	8004180 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	61da      	str	r2, [r3, #28]
 8004172:	e005      	b.n	8004180 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fd fcdc 	bl	8001b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041c0:	d902      	bls.n	80041c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	e002      	b.n	80041ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80041d6:	d007      	beq.n	80041e8 <HAL_SPI_Init+0xa0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041e0:	d002      	beq.n	80041e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422a:	ea42 0103 	orr.w	r1, r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	0c1b      	lsrs	r3, r3, #16
 8004244:	f003 0204 	and.w	r2, r3, #4
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004264:	ea42 0103 	orr.w	r1, r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004284:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042a6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	4013      	ands	r3, r2
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042d4:	b084      	sub	sp, #16
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	f107 0014 	add.w	r0, r7, #20
 80042e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	b004      	add	sp, #16
 8004314:	4770      	bx	lr
	...

08004318 <__errno>:
 8004318:	4b01      	ldr	r3, [pc, #4]	; (8004320 <__errno+0x8>)
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	200000b0 	.word	0x200000b0

08004324 <__libc_init_array>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	4d0d      	ldr	r5, [pc, #52]	; (800435c <__libc_init_array+0x38>)
 8004328:	4c0d      	ldr	r4, [pc, #52]	; (8004360 <__libc_init_array+0x3c>)
 800432a:	1b64      	subs	r4, r4, r5
 800432c:	10a4      	asrs	r4, r4, #2
 800432e:	2600      	movs	r6, #0
 8004330:	42a6      	cmp	r6, r4
 8004332:	d109      	bne.n	8004348 <__libc_init_array+0x24>
 8004334:	4d0b      	ldr	r5, [pc, #44]	; (8004364 <__libc_init_array+0x40>)
 8004336:	4c0c      	ldr	r4, [pc, #48]	; (8004368 <__libc_init_array+0x44>)
 8004338:	f001 f858 	bl	80053ec <_init>
 800433c:	1b64      	subs	r4, r4, r5
 800433e:	10a4      	asrs	r4, r4, #2
 8004340:	2600      	movs	r6, #0
 8004342:	42a6      	cmp	r6, r4
 8004344:	d105      	bne.n	8004352 <__libc_init_array+0x2e>
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	f855 3b04 	ldr.w	r3, [r5], #4
 800434c:	4798      	blx	r3
 800434e:	3601      	adds	r6, #1
 8004350:	e7ee      	b.n	8004330 <__libc_init_array+0xc>
 8004352:	f855 3b04 	ldr.w	r3, [r5], #4
 8004356:	4798      	blx	r3
 8004358:	3601      	adds	r6, #1
 800435a:	e7f2      	b.n	8004342 <__libc_init_array+0x1e>
 800435c:	080055bc 	.word	0x080055bc
 8004360:	080055bc 	.word	0x080055bc
 8004364:	080055bc 	.word	0x080055bc
 8004368:	080055c0 	.word	0x080055c0

0800436c <memset>:
 800436c:	4402      	add	r2, r0
 800436e:	4603      	mov	r3, r0
 8004370:	4293      	cmp	r3, r2
 8004372:	d100      	bne.n	8004376 <memset+0xa>
 8004374:	4770      	bx	lr
 8004376:	f803 1b01 	strb.w	r1, [r3], #1
 800437a:	e7f9      	b.n	8004370 <memset+0x4>

0800437c <rand>:
 800437c:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <rand+0x5c>)
 800437e:	b510      	push	{r4, lr}
 8004380:	681c      	ldr	r4, [r3, #0]
 8004382:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004384:	b9b3      	cbnz	r3, 80043b4 <rand+0x38>
 8004386:	2018      	movs	r0, #24
 8004388:	f000 f866 	bl	8004458 <malloc>
 800438c:	63a0      	str	r0, [r4, #56]	; 0x38
 800438e:	b928      	cbnz	r0, 800439c <rand+0x20>
 8004390:	4602      	mov	r2, r0
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <rand+0x60>)
 8004394:	4812      	ldr	r0, [pc, #72]	; (80043e0 <rand+0x64>)
 8004396:	214e      	movs	r1, #78	; 0x4e
 8004398:	f000 f82e 	bl	80043f8 <__assert_func>
 800439c:	4a11      	ldr	r2, [pc, #68]	; (80043e4 <rand+0x68>)
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <rand+0x6c>)
 80043a0:	e9c0 2300 	strd	r2, r3, [r0]
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <rand+0x70>)
 80043a6:	6083      	str	r3, [r0, #8]
 80043a8:	230b      	movs	r3, #11
 80043aa:	8183      	strh	r3, [r0, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	2300      	movs	r3, #0
 80043b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80043b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80043b6:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <rand+0x74>)
 80043b8:	6920      	ldr	r0, [r4, #16]
 80043ba:	6963      	ldr	r3, [r4, #20]
 80043bc:	490d      	ldr	r1, [pc, #52]	; (80043f4 <rand+0x78>)
 80043be:	4342      	muls	r2, r0
 80043c0:	fb01 2203 	mla	r2, r1, r3, r2
 80043c4:	fba0 0101 	umull	r0, r1, r0, r1
 80043c8:	1c43      	adds	r3, r0, #1
 80043ca:	eb42 0001 	adc.w	r0, r2, r1
 80043ce:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80043d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80043d6:	bd10      	pop	{r4, pc}
 80043d8:	200000b0 	.word	0x200000b0
 80043dc:	08005478 	.word	0x08005478
 80043e0:	0800548f 	.word	0x0800548f
 80043e4:	abcd330e 	.word	0xabcd330e
 80043e8:	e66d1234 	.word	0xe66d1234
 80043ec:	0005deec 	.word	0x0005deec
 80043f0:	5851f42d 	.word	0x5851f42d
 80043f4:	4c957f2d 	.word	0x4c957f2d

080043f8 <__assert_func>:
 80043f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80043fa:	4614      	mov	r4, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	4b09      	ldr	r3, [pc, #36]	; (8004424 <__assert_func+0x2c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4605      	mov	r5, r0
 8004404:	68d8      	ldr	r0, [r3, #12]
 8004406:	b14c      	cbz	r4, 800441c <__assert_func+0x24>
 8004408:	4b07      	ldr	r3, [pc, #28]	; (8004428 <__assert_func+0x30>)
 800440a:	9100      	str	r1, [sp, #0]
 800440c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004410:	4906      	ldr	r1, [pc, #24]	; (800442c <__assert_func+0x34>)
 8004412:	462b      	mov	r3, r5
 8004414:	f000 f80e 	bl	8004434 <fiprintf>
 8004418:	f000 fcc4 	bl	8004da4 <abort>
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <__assert_func+0x38>)
 800441e:	461c      	mov	r4, r3
 8004420:	e7f3      	b.n	800440a <__assert_func+0x12>
 8004422:	bf00      	nop
 8004424:	200000b0 	.word	0x200000b0
 8004428:	080054ea 	.word	0x080054ea
 800442c:	080054f7 	.word	0x080054f7
 8004430:	08005525 	.word	0x08005525

08004434 <fiprintf>:
 8004434:	b40e      	push	{r1, r2, r3}
 8004436:	b503      	push	{r0, r1, lr}
 8004438:	4601      	mov	r1, r0
 800443a:	ab03      	add	r3, sp, #12
 800443c:	4805      	ldr	r0, [pc, #20]	; (8004454 <fiprintf+0x20>)
 800443e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004442:	6800      	ldr	r0, [r0, #0]
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	f000 f919 	bl	800467c <_vfiprintf_r>
 800444a:	b002      	add	sp, #8
 800444c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004450:	b003      	add	sp, #12
 8004452:	4770      	bx	lr
 8004454:	200000b0 	.word	0x200000b0

08004458 <malloc>:
 8004458:	4b02      	ldr	r3, [pc, #8]	; (8004464 <malloc+0xc>)
 800445a:	4601      	mov	r1, r0
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	f000 b86f 	b.w	8004540 <_malloc_r>
 8004462:	bf00      	nop
 8004464:	200000b0 	.word	0x200000b0

08004468 <_free_r>:
 8004468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800446a:	2900      	cmp	r1, #0
 800446c:	d044      	beq.n	80044f8 <_free_r+0x90>
 800446e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004472:	9001      	str	r0, [sp, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f1a1 0404 	sub.w	r4, r1, #4
 800447a:	bfb8      	it	lt
 800447c:	18e4      	addlt	r4, r4, r3
 800447e:	f000 feb9 	bl	80051f4 <__malloc_lock>
 8004482:	4a1e      	ldr	r2, [pc, #120]	; (80044fc <_free_r+0x94>)
 8004484:	9801      	ldr	r0, [sp, #4]
 8004486:	6813      	ldr	r3, [r2, #0]
 8004488:	b933      	cbnz	r3, 8004498 <_free_r+0x30>
 800448a:	6063      	str	r3, [r4, #4]
 800448c:	6014      	str	r4, [r2, #0]
 800448e:	b003      	add	sp, #12
 8004490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004494:	f000 beb4 	b.w	8005200 <__malloc_unlock>
 8004498:	42a3      	cmp	r3, r4
 800449a:	d908      	bls.n	80044ae <_free_r+0x46>
 800449c:	6825      	ldr	r5, [r4, #0]
 800449e:	1961      	adds	r1, r4, r5
 80044a0:	428b      	cmp	r3, r1
 80044a2:	bf01      	itttt	eq
 80044a4:	6819      	ldreq	r1, [r3, #0]
 80044a6:	685b      	ldreq	r3, [r3, #4]
 80044a8:	1949      	addeq	r1, r1, r5
 80044aa:	6021      	streq	r1, [r4, #0]
 80044ac:	e7ed      	b.n	800448a <_free_r+0x22>
 80044ae:	461a      	mov	r2, r3
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	b10b      	cbz	r3, 80044b8 <_free_r+0x50>
 80044b4:	42a3      	cmp	r3, r4
 80044b6:	d9fa      	bls.n	80044ae <_free_r+0x46>
 80044b8:	6811      	ldr	r1, [r2, #0]
 80044ba:	1855      	adds	r5, r2, r1
 80044bc:	42a5      	cmp	r5, r4
 80044be:	d10b      	bne.n	80044d8 <_free_r+0x70>
 80044c0:	6824      	ldr	r4, [r4, #0]
 80044c2:	4421      	add	r1, r4
 80044c4:	1854      	adds	r4, r2, r1
 80044c6:	42a3      	cmp	r3, r4
 80044c8:	6011      	str	r1, [r2, #0]
 80044ca:	d1e0      	bne.n	800448e <_free_r+0x26>
 80044cc:	681c      	ldr	r4, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	6053      	str	r3, [r2, #4]
 80044d2:	4421      	add	r1, r4
 80044d4:	6011      	str	r1, [r2, #0]
 80044d6:	e7da      	b.n	800448e <_free_r+0x26>
 80044d8:	d902      	bls.n	80044e0 <_free_r+0x78>
 80044da:	230c      	movs	r3, #12
 80044dc:	6003      	str	r3, [r0, #0]
 80044de:	e7d6      	b.n	800448e <_free_r+0x26>
 80044e0:	6825      	ldr	r5, [r4, #0]
 80044e2:	1961      	adds	r1, r4, r5
 80044e4:	428b      	cmp	r3, r1
 80044e6:	bf04      	itt	eq
 80044e8:	6819      	ldreq	r1, [r3, #0]
 80044ea:	685b      	ldreq	r3, [r3, #4]
 80044ec:	6063      	str	r3, [r4, #4]
 80044ee:	bf04      	itt	eq
 80044f0:	1949      	addeq	r1, r1, r5
 80044f2:	6021      	streq	r1, [r4, #0]
 80044f4:	6054      	str	r4, [r2, #4]
 80044f6:	e7ca      	b.n	800448e <_free_r+0x26>
 80044f8:	b003      	add	sp, #12
 80044fa:	bd30      	pop	{r4, r5, pc}
 80044fc:	20000554 	.word	0x20000554

08004500 <sbrk_aligned>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	4e0e      	ldr	r6, [pc, #56]	; (800453c <sbrk_aligned+0x3c>)
 8004504:	460c      	mov	r4, r1
 8004506:	6831      	ldr	r1, [r6, #0]
 8004508:	4605      	mov	r5, r0
 800450a:	b911      	cbnz	r1, 8004512 <sbrk_aligned+0x12>
 800450c:	f000 fb7a 	bl	8004c04 <_sbrk_r>
 8004510:	6030      	str	r0, [r6, #0]
 8004512:	4621      	mov	r1, r4
 8004514:	4628      	mov	r0, r5
 8004516:	f000 fb75 	bl	8004c04 <_sbrk_r>
 800451a:	1c43      	adds	r3, r0, #1
 800451c:	d00a      	beq.n	8004534 <sbrk_aligned+0x34>
 800451e:	1cc4      	adds	r4, r0, #3
 8004520:	f024 0403 	bic.w	r4, r4, #3
 8004524:	42a0      	cmp	r0, r4
 8004526:	d007      	beq.n	8004538 <sbrk_aligned+0x38>
 8004528:	1a21      	subs	r1, r4, r0
 800452a:	4628      	mov	r0, r5
 800452c:	f000 fb6a 	bl	8004c04 <_sbrk_r>
 8004530:	3001      	adds	r0, #1
 8004532:	d101      	bne.n	8004538 <sbrk_aligned+0x38>
 8004534:	f04f 34ff 	mov.w	r4, #4294967295
 8004538:	4620      	mov	r0, r4
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	20000558 	.word	0x20000558

08004540 <_malloc_r>:
 8004540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004544:	1ccd      	adds	r5, r1, #3
 8004546:	f025 0503 	bic.w	r5, r5, #3
 800454a:	3508      	adds	r5, #8
 800454c:	2d0c      	cmp	r5, #12
 800454e:	bf38      	it	cc
 8004550:	250c      	movcc	r5, #12
 8004552:	2d00      	cmp	r5, #0
 8004554:	4607      	mov	r7, r0
 8004556:	db01      	blt.n	800455c <_malloc_r+0x1c>
 8004558:	42a9      	cmp	r1, r5
 800455a:	d905      	bls.n	8004568 <_malloc_r+0x28>
 800455c:	230c      	movs	r3, #12
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	2600      	movs	r6, #0
 8004562:	4630      	mov	r0, r6
 8004564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004568:	4e2e      	ldr	r6, [pc, #184]	; (8004624 <_malloc_r+0xe4>)
 800456a:	f000 fe43 	bl	80051f4 <__malloc_lock>
 800456e:	6833      	ldr	r3, [r6, #0]
 8004570:	461c      	mov	r4, r3
 8004572:	bb34      	cbnz	r4, 80045c2 <_malloc_r+0x82>
 8004574:	4629      	mov	r1, r5
 8004576:	4638      	mov	r0, r7
 8004578:	f7ff ffc2 	bl	8004500 <sbrk_aligned>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	4604      	mov	r4, r0
 8004580:	d14d      	bne.n	800461e <_malloc_r+0xde>
 8004582:	6834      	ldr	r4, [r6, #0]
 8004584:	4626      	mov	r6, r4
 8004586:	2e00      	cmp	r6, #0
 8004588:	d140      	bne.n	800460c <_malloc_r+0xcc>
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	4631      	mov	r1, r6
 800458e:	4638      	mov	r0, r7
 8004590:	eb04 0803 	add.w	r8, r4, r3
 8004594:	f000 fb36 	bl	8004c04 <_sbrk_r>
 8004598:	4580      	cmp	r8, r0
 800459a:	d13a      	bne.n	8004612 <_malloc_r+0xd2>
 800459c:	6821      	ldr	r1, [r4, #0]
 800459e:	3503      	adds	r5, #3
 80045a0:	1a6d      	subs	r5, r5, r1
 80045a2:	f025 0503 	bic.w	r5, r5, #3
 80045a6:	3508      	adds	r5, #8
 80045a8:	2d0c      	cmp	r5, #12
 80045aa:	bf38      	it	cc
 80045ac:	250c      	movcc	r5, #12
 80045ae:	4629      	mov	r1, r5
 80045b0:	4638      	mov	r0, r7
 80045b2:	f7ff ffa5 	bl	8004500 <sbrk_aligned>
 80045b6:	3001      	adds	r0, #1
 80045b8:	d02b      	beq.n	8004612 <_malloc_r+0xd2>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	442b      	add	r3, r5
 80045be:	6023      	str	r3, [r4, #0]
 80045c0:	e00e      	b.n	80045e0 <_malloc_r+0xa0>
 80045c2:	6822      	ldr	r2, [r4, #0]
 80045c4:	1b52      	subs	r2, r2, r5
 80045c6:	d41e      	bmi.n	8004606 <_malloc_r+0xc6>
 80045c8:	2a0b      	cmp	r2, #11
 80045ca:	d916      	bls.n	80045fa <_malloc_r+0xba>
 80045cc:	1961      	adds	r1, r4, r5
 80045ce:	42a3      	cmp	r3, r4
 80045d0:	6025      	str	r5, [r4, #0]
 80045d2:	bf18      	it	ne
 80045d4:	6059      	strne	r1, [r3, #4]
 80045d6:	6863      	ldr	r3, [r4, #4]
 80045d8:	bf08      	it	eq
 80045da:	6031      	streq	r1, [r6, #0]
 80045dc:	5162      	str	r2, [r4, r5]
 80045de:	604b      	str	r3, [r1, #4]
 80045e0:	4638      	mov	r0, r7
 80045e2:	f104 060b 	add.w	r6, r4, #11
 80045e6:	f000 fe0b 	bl	8005200 <__malloc_unlock>
 80045ea:	f026 0607 	bic.w	r6, r6, #7
 80045ee:	1d23      	adds	r3, r4, #4
 80045f0:	1af2      	subs	r2, r6, r3
 80045f2:	d0b6      	beq.n	8004562 <_malloc_r+0x22>
 80045f4:	1b9b      	subs	r3, r3, r6
 80045f6:	50a3      	str	r3, [r4, r2]
 80045f8:	e7b3      	b.n	8004562 <_malloc_r+0x22>
 80045fa:	6862      	ldr	r2, [r4, #4]
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	bf0c      	ite	eq
 8004600:	6032      	streq	r2, [r6, #0]
 8004602:	605a      	strne	r2, [r3, #4]
 8004604:	e7ec      	b.n	80045e0 <_malloc_r+0xa0>
 8004606:	4623      	mov	r3, r4
 8004608:	6864      	ldr	r4, [r4, #4]
 800460a:	e7b2      	b.n	8004572 <_malloc_r+0x32>
 800460c:	4634      	mov	r4, r6
 800460e:	6876      	ldr	r6, [r6, #4]
 8004610:	e7b9      	b.n	8004586 <_malloc_r+0x46>
 8004612:	230c      	movs	r3, #12
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	4638      	mov	r0, r7
 8004618:	f000 fdf2 	bl	8005200 <__malloc_unlock>
 800461c:	e7a1      	b.n	8004562 <_malloc_r+0x22>
 800461e:	6025      	str	r5, [r4, #0]
 8004620:	e7de      	b.n	80045e0 <_malloc_r+0xa0>
 8004622:	bf00      	nop
 8004624:	20000554 	.word	0x20000554

08004628 <__sfputc_r>:
 8004628:	6893      	ldr	r3, [r2, #8]
 800462a:	3b01      	subs	r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	b410      	push	{r4}
 8004630:	6093      	str	r3, [r2, #8]
 8004632:	da08      	bge.n	8004646 <__sfputc_r+0x1e>
 8004634:	6994      	ldr	r4, [r2, #24]
 8004636:	42a3      	cmp	r3, r4
 8004638:	db01      	blt.n	800463e <__sfputc_r+0x16>
 800463a:	290a      	cmp	r1, #10
 800463c:	d103      	bne.n	8004646 <__sfputc_r+0x1e>
 800463e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004642:	f000 baef 	b.w	8004c24 <__swbuf_r>
 8004646:	6813      	ldr	r3, [r2, #0]
 8004648:	1c58      	adds	r0, r3, #1
 800464a:	6010      	str	r0, [r2, #0]
 800464c:	7019      	strb	r1, [r3, #0]
 800464e:	4608      	mov	r0, r1
 8004650:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004654:	4770      	bx	lr

08004656 <__sfputs_r>:
 8004656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004658:	4606      	mov	r6, r0
 800465a:	460f      	mov	r7, r1
 800465c:	4614      	mov	r4, r2
 800465e:	18d5      	adds	r5, r2, r3
 8004660:	42ac      	cmp	r4, r5
 8004662:	d101      	bne.n	8004668 <__sfputs_r+0x12>
 8004664:	2000      	movs	r0, #0
 8004666:	e007      	b.n	8004678 <__sfputs_r+0x22>
 8004668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800466c:	463a      	mov	r2, r7
 800466e:	4630      	mov	r0, r6
 8004670:	f7ff ffda 	bl	8004628 <__sfputc_r>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d1f3      	bne.n	8004660 <__sfputs_r+0xa>
 8004678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800467c <_vfiprintf_r>:
 800467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004680:	460d      	mov	r5, r1
 8004682:	b09d      	sub	sp, #116	; 0x74
 8004684:	4614      	mov	r4, r2
 8004686:	4698      	mov	r8, r3
 8004688:	4606      	mov	r6, r0
 800468a:	b118      	cbz	r0, 8004694 <_vfiprintf_r+0x18>
 800468c:	6983      	ldr	r3, [r0, #24]
 800468e:	b90b      	cbnz	r3, 8004694 <_vfiprintf_r+0x18>
 8004690:	f000 fcaa 	bl	8004fe8 <__sinit>
 8004694:	4b89      	ldr	r3, [pc, #548]	; (80048bc <_vfiprintf_r+0x240>)
 8004696:	429d      	cmp	r5, r3
 8004698:	d11b      	bne.n	80046d2 <_vfiprintf_r+0x56>
 800469a:	6875      	ldr	r5, [r6, #4]
 800469c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800469e:	07d9      	lsls	r1, r3, #31
 80046a0:	d405      	bmi.n	80046ae <_vfiprintf_r+0x32>
 80046a2:	89ab      	ldrh	r3, [r5, #12]
 80046a4:	059a      	lsls	r2, r3, #22
 80046a6:	d402      	bmi.n	80046ae <_vfiprintf_r+0x32>
 80046a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046aa:	f000 fd3b 	bl	8005124 <__retarget_lock_acquire_recursive>
 80046ae:	89ab      	ldrh	r3, [r5, #12]
 80046b0:	071b      	lsls	r3, r3, #28
 80046b2:	d501      	bpl.n	80046b8 <_vfiprintf_r+0x3c>
 80046b4:	692b      	ldr	r3, [r5, #16]
 80046b6:	b9eb      	cbnz	r3, 80046f4 <_vfiprintf_r+0x78>
 80046b8:	4629      	mov	r1, r5
 80046ba:	4630      	mov	r0, r6
 80046bc:	f000 fb04 	bl	8004cc8 <__swsetup_r>
 80046c0:	b1c0      	cbz	r0, 80046f4 <_vfiprintf_r+0x78>
 80046c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046c4:	07dc      	lsls	r4, r3, #31
 80046c6:	d50e      	bpl.n	80046e6 <_vfiprintf_r+0x6a>
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295
 80046cc:	b01d      	add	sp, #116	; 0x74
 80046ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d2:	4b7b      	ldr	r3, [pc, #492]	; (80048c0 <_vfiprintf_r+0x244>)
 80046d4:	429d      	cmp	r5, r3
 80046d6:	d101      	bne.n	80046dc <_vfiprintf_r+0x60>
 80046d8:	68b5      	ldr	r5, [r6, #8]
 80046da:	e7df      	b.n	800469c <_vfiprintf_r+0x20>
 80046dc:	4b79      	ldr	r3, [pc, #484]	; (80048c4 <_vfiprintf_r+0x248>)
 80046de:	429d      	cmp	r5, r3
 80046e0:	bf08      	it	eq
 80046e2:	68f5      	ldreq	r5, [r6, #12]
 80046e4:	e7da      	b.n	800469c <_vfiprintf_r+0x20>
 80046e6:	89ab      	ldrh	r3, [r5, #12]
 80046e8:	0598      	lsls	r0, r3, #22
 80046ea:	d4ed      	bmi.n	80046c8 <_vfiprintf_r+0x4c>
 80046ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046ee:	f000 fd1a 	bl	8005126 <__retarget_lock_release_recursive>
 80046f2:	e7e9      	b.n	80046c8 <_vfiprintf_r+0x4c>
 80046f4:	2300      	movs	r3, #0
 80046f6:	9309      	str	r3, [sp, #36]	; 0x24
 80046f8:	2320      	movs	r3, #32
 80046fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004702:	2330      	movs	r3, #48	; 0x30
 8004704:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80048c8 <_vfiprintf_r+0x24c>
 8004708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800470c:	f04f 0901 	mov.w	r9, #1
 8004710:	4623      	mov	r3, r4
 8004712:	469a      	mov	sl, r3
 8004714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004718:	b10a      	cbz	r2, 800471e <_vfiprintf_r+0xa2>
 800471a:	2a25      	cmp	r2, #37	; 0x25
 800471c:	d1f9      	bne.n	8004712 <_vfiprintf_r+0x96>
 800471e:	ebba 0b04 	subs.w	fp, sl, r4
 8004722:	d00b      	beq.n	800473c <_vfiprintf_r+0xc0>
 8004724:	465b      	mov	r3, fp
 8004726:	4622      	mov	r2, r4
 8004728:	4629      	mov	r1, r5
 800472a:	4630      	mov	r0, r6
 800472c:	f7ff ff93 	bl	8004656 <__sfputs_r>
 8004730:	3001      	adds	r0, #1
 8004732:	f000 80aa 	beq.w	800488a <_vfiprintf_r+0x20e>
 8004736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004738:	445a      	add	r2, fp
 800473a:	9209      	str	r2, [sp, #36]	; 0x24
 800473c:	f89a 3000 	ldrb.w	r3, [sl]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80a2 	beq.w	800488a <_vfiprintf_r+0x20e>
 8004746:	2300      	movs	r3, #0
 8004748:	f04f 32ff 	mov.w	r2, #4294967295
 800474c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004750:	f10a 0a01 	add.w	sl, sl, #1
 8004754:	9304      	str	r3, [sp, #16]
 8004756:	9307      	str	r3, [sp, #28]
 8004758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800475c:	931a      	str	r3, [sp, #104]	; 0x68
 800475e:	4654      	mov	r4, sl
 8004760:	2205      	movs	r2, #5
 8004762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004766:	4858      	ldr	r0, [pc, #352]	; (80048c8 <_vfiprintf_r+0x24c>)
 8004768:	f7fb fd3a 	bl	80001e0 <memchr>
 800476c:	9a04      	ldr	r2, [sp, #16]
 800476e:	b9d8      	cbnz	r0, 80047a8 <_vfiprintf_r+0x12c>
 8004770:	06d1      	lsls	r1, r2, #27
 8004772:	bf44      	itt	mi
 8004774:	2320      	movmi	r3, #32
 8004776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800477a:	0713      	lsls	r3, r2, #28
 800477c:	bf44      	itt	mi
 800477e:	232b      	movmi	r3, #43	; 0x2b
 8004780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004784:	f89a 3000 	ldrb.w	r3, [sl]
 8004788:	2b2a      	cmp	r3, #42	; 0x2a
 800478a:	d015      	beq.n	80047b8 <_vfiprintf_r+0x13c>
 800478c:	9a07      	ldr	r2, [sp, #28]
 800478e:	4654      	mov	r4, sl
 8004790:	2000      	movs	r0, #0
 8004792:	f04f 0c0a 	mov.w	ip, #10
 8004796:	4621      	mov	r1, r4
 8004798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800479c:	3b30      	subs	r3, #48	; 0x30
 800479e:	2b09      	cmp	r3, #9
 80047a0:	d94e      	bls.n	8004840 <_vfiprintf_r+0x1c4>
 80047a2:	b1b0      	cbz	r0, 80047d2 <_vfiprintf_r+0x156>
 80047a4:	9207      	str	r2, [sp, #28]
 80047a6:	e014      	b.n	80047d2 <_vfiprintf_r+0x156>
 80047a8:	eba0 0308 	sub.w	r3, r0, r8
 80047ac:	fa09 f303 	lsl.w	r3, r9, r3
 80047b0:	4313      	orrs	r3, r2
 80047b2:	9304      	str	r3, [sp, #16]
 80047b4:	46a2      	mov	sl, r4
 80047b6:	e7d2      	b.n	800475e <_vfiprintf_r+0xe2>
 80047b8:	9b03      	ldr	r3, [sp, #12]
 80047ba:	1d19      	adds	r1, r3, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	9103      	str	r1, [sp, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bfbb      	ittet	lt
 80047c4:	425b      	neglt	r3, r3
 80047c6:	f042 0202 	orrlt.w	r2, r2, #2
 80047ca:	9307      	strge	r3, [sp, #28]
 80047cc:	9307      	strlt	r3, [sp, #28]
 80047ce:	bfb8      	it	lt
 80047d0:	9204      	strlt	r2, [sp, #16]
 80047d2:	7823      	ldrb	r3, [r4, #0]
 80047d4:	2b2e      	cmp	r3, #46	; 0x2e
 80047d6:	d10c      	bne.n	80047f2 <_vfiprintf_r+0x176>
 80047d8:	7863      	ldrb	r3, [r4, #1]
 80047da:	2b2a      	cmp	r3, #42	; 0x2a
 80047dc:	d135      	bne.n	800484a <_vfiprintf_r+0x1ce>
 80047de:	9b03      	ldr	r3, [sp, #12]
 80047e0:	1d1a      	adds	r2, r3, #4
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	9203      	str	r2, [sp, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bfb8      	it	lt
 80047ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80047ee:	3402      	adds	r4, #2
 80047f0:	9305      	str	r3, [sp, #20]
 80047f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80048d8 <_vfiprintf_r+0x25c>
 80047f6:	7821      	ldrb	r1, [r4, #0]
 80047f8:	2203      	movs	r2, #3
 80047fa:	4650      	mov	r0, sl
 80047fc:	f7fb fcf0 	bl	80001e0 <memchr>
 8004800:	b140      	cbz	r0, 8004814 <_vfiprintf_r+0x198>
 8004802:	2340      	movs	r3, #64	; 0x40
 8004804:	eba0 000a 	sub.w	r0, r0, sl
 8004808:	fa03 f000 	lsl.w	r0, r3, r0
 800480c:	9b04      	ldr	r3, [sp, #16]
 800480e:	4303      	orrs	r3, r0
 8004810:	3401      	adds	r4, #1
 8004812:	9304      	str	r3, [sp, #16]
 8004814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004818:	482c      	ldr	r0, [pc, #176]	; (80048cc <_vfiprintf_r+0x250>)
 800481a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800481e:	2206      	movs	r2, #6
 8004820:	f7fb fcde 	bl	80001e0 <memchr>
 8004824:	2800      	cmp	r0, #0
 8004826:	d03f      	beq.n	80048a8 <_vfiprintf_r+0x22c>
 8004828:	4b29      	ldr	r3, [pc, #164]	; (80048d0 <_vfiprintf_r+0x254>)
 800482a:	bb1b      	cbnz	r3, 8004874 <_vfiprintf_r+0x1f8>
 800482c:	9b03      	ldr	r3, [sp, #12]
 800482e:	3307      	adds	r3, #7
 8004830:	f023 0307 	bic.w	r3, r3, #7
 8004834:	3308      	adds	r3, #8
 8004836:	9303      	str	r3, [sp, #12]
 8004838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800483a:	443b      	add	r3, r7
 800483c:	9309      	str	r3, [sp, #36]	; 0x24
 800483e:	e767      	b.n	8004710 <_vfiprintf_r+0x94>
 8004840:	fb0c 3202 	mla	r2, ip, r2, r3
 8004844:	460c      	mov	r4, r1
 8004846:	2001      	movs	r0, #1
 8004848:	e7a5      	b.n	8004796 <_vfiprintf_r+0x11a>
 800484a:	2300      	movs	r3, #0
 800484c:	3401      	adds	r4, #1
 800484e:	9305      	str	r3, [sp, #20]
 8004850:	4619      	mov	r1, r3
 8004852:	f04f 0c0a 	mov.w	ip, #10
 8004856:	4620      	mov	r0, r4
 8004858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800485c:	3a30      	subs	r2, #48	; 0x30
 800485e:	2a09      	cmp	r2, #9
 8004860:	d903      	bls.n	800486a <_vfiprintf_r+0x1ee>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0c5      	beq.n	80047f2 <_vfiprintf_r+0x176>
 8004866:	9105      	str	r1, [sp, #20]
 8004868:	e7c3      	b.n	80047f2 <_vfiprintf_r+0x176>
 800486a:	fb0c 2101 	mla	r1, ip, r1, r2
 800486e:	4604      	mov	r4, r0
 8004870:	2301      	movs	r3, #1
 8004872:	e7f0      	b.n	8004856 <_vfiprintf_r+0x1da>
 8004874:	ab03      	add	r3, sp, #12
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	462a      	mov	r2, r5
 800487a:	4b16      	ldr	r3, [pc, #88]	; (80048d4 <_vfiprintf_r+0x258>)
 800487c:	a904      	add	r1, sp, #16
 800487e:	4630      	mov	r0, r6
 8004880:	f3af 8000 	nop.w
 8004884:	4607      	mov	r7, r0
 8004886:	1c78      	adds	r0, r7, #1
 8004888:	d1d6      	bne.n	8004838 <_vfiprintf_r+0x1bc>
 800488a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800488c:	07d9      	lsls	r1, r3, #31
 800488e:	d405      	bmi.n	800489c <_vfiprintf_r+0x220>
 8004890:	89ab      	ldrh	r3, [r5, #12]
 8004892:	059a      	lsls	r2, r3, #22
 8004894:	d402      	bmi.n	800489c <_vfiprintf_r+0x220>
 8004896:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004898:	f000 fc45 	bl	8005126 <__retarget_lock_release_recursive>
 800489c:	89ab      	ldrh	r3, [r5, #12]
 800489e:	065b      	lsls	r3, r3, #25
 80048a0:	f53f af12 	bmi.w	80046c8 <_vfiprintf_r+0x4c>
 80048a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048a6:	e711      	b.n	80046cc <_vfiprintf_r+0x50>
 80048a8:	ab03      	add	r3, sp, #12
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	462a      	mov	r2, r5
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <_vfiprintf_r+0x258>)
 80048b0:	a904      	add	r1, sp, #16
 80048b2:	4630      	mov	r0, r6
 80048b4:	f000 f880 	bl	80049b8 <_printf_i>
 80048b8:	e7e4      	b.n	8004884 <_vfiprintf_r+0x208>
 80048ba:	bf00      	nop
 80048bc:	0800557c 	.word	0x0800557c
 80048c0:	0800559c 	.word	0x0800559c
 80048c4:	0800555c 	.word	0x0800555c
 80048c8:	08005526 	.word	0x08005526
 80048cc:	08005530 	.word	0x08005530
 80048d0:	00000000 	.word	0x00000000
 80048d4:	08004657 	.word	0x08004657
 80048d8:	0800552c 	.word	0x0800552c

080048dc <_printf_common>:
 80048dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e0:	4616      	mov	r6, r2
 80048e2:	4699      	mov	r9, r3
 80048e4:	688a      	ldr	r2, [r1, #8]
 80048e6:	690b      	ldr	r3, [r1, #16]
 80048e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048ec:	4293      	cmp	r3, r2
 80048ee:	bfb8      	it	lt
 80048f0:	4613      	movlt	r3, r2
 80048f2:	6033      	str	r3, [r6, #0]
 80048f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048f8:	4607      	mov	r7, r0
 80048fa:	460c      	mov	r4, r1
 80048fc:	b10a      	cbz	r2, 8004902 <_printf_common+0x26>
 80048fe:	3301      	adds	r3, #1
 8004900:	6033      	str	r3, [r6, #0]
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	0699      	lsls	r1, r3, #26
 8004906:	bf42      	ittt	mi
 8004908:	6833      	ldrmi	r3, [r6, #0]
 800490a:	3302      	addmi	r3, #2
 800490c:	6033      	strmi	r3, [r6, #0]
 800490e:	6825      	ldr	r5, [r4, #0]
 8004910:	f015 0506 	ands.w	r5, r5, #6
 8004914:	d106      	bne.n	8004924 <_printf_common+0x48>
 8004916:	f104 0a19 	add.w	sl, r4, #25
 800491a:	68e3      	ldr	r3, [r4, #12]
 800491c:	6832      	ldr	r2, [r6, #0]
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	42ab      	cmp	r3, r5
 8004922:	dc26      	bgt.n	8004972 <_printf_common+0x96>
 8004924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004928:	1e13      	subs	r3, r2, #0
 800492a:	6822      	ldr	r2, [r4, #0]
 800492c:	bf18      	it	ne
 800492e:	2301      	movne	r3, #1
 8004930:	0692      	lsls	r2, r2, #26
 8004932:	d42b      	bmi.n	800498c <_printf_common+0xb0>
 8004934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004938:	4649      	mov	r1, r9
 800493a:	4638      	mov	r0, r7
 800493c:	47c0      	blx	r8
 800493e:	3001      	adds	r0, #1
 8004940:	d01e      	beq.n	8004980 <_printf_common+0xa4>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	68e5      	ldr	r5, [r4, #12]
 8004946:	6832      	ldr	r2, [r6, #0]
 8004948:	f003 0306 	and.w	r3, r3, #6
 800494c:	2b04      	cmp	r3, #4
 800494e:	bf08      	it	eq
 8004950:	1aad      	subeq	r5, r5, r2
 8004952:	68a3      	ldr	r3, [r4, #8]
 8004954:	6922      	ldr	r2, [r4, #16]
 8004956:	bf0c      	ite	eq
 8004958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800495c:	2500      	movne	r5, #0
 800495e:	4293      	cmp	r3, r2
 8004960:	bfc4      	itt	gt
 8004962:	1a9b      	subgt	r3, r3, r2
 8004964:	18ed      	addgt	r5, r5, r3
 8004966:	2600      	movs	r6, #0
 8004968:	341a      	adds	r4, #26
 800496a:	42b5      	cmp	r5, r6
 800496c:	d11a      	bne.n	80049a4 <_printf_common+0xc8>
 800496e:	2000      	movs	r0, #0
 8004970:	e008      	b.n	8004984 <_printf_common+0xa8>
 8004972:	2301      	movs	r3, #1
 8004974:	4652      	mov	r2, sl
 8004976:	4649      	mov	r1, r9
 8004978:	4638      	mov	r0, r7
 800497a:	47c0      	blx	r8
 800497c:	3001      	adds	r0, #1
 800497e:	d103      	bne.n	8004988 <_printf_common+0xac>
 8004980:	f04f 30ff 	mov.w	r0, #4294967295
 8004984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004988:	3501      	adds	r5, #1
 800498a:	e7c6      	b.n	800491a <_printf_common+0x3e>
 800498c:	18e1      	adds	r1, r4, r3
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	2030      	movs	r0, #48	; 0x30
 8004992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004996:	4422      	add	r2, r4
 8004998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800499c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049a0:	3302      	adds	r3, #2
 80049a2:	e7c7      	b.n	8004934 <_printf_common+0x58>
 80049a4:	2301      	movs	r3, #1
 80049a6:	4622      	mov	r2, r4
 80049a8:	4649      	mov	r1, r9
 80049aa:	4638      	mov	r0, r7
 80049ac:	47c0      	blx	r8
 80049ae:	3001      	adds	r0, #1
 80049b0:	d0e6      	beq.n	8004980 <_printf_common+0xa4>
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7d9      	b.n	800496a <_printf_common+0x8e>
	...

080049b8 <_printf_i>:
 80049b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049bc:	7e0f      	ldrb	r7, [r1, #24]
 80049be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049c0:	2f78      	cmp	r7, #120	; 0x78
 80049c2:	4691      	mov	r9, r2
 80049c4:	4680      	mov	r8, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	469a      	mov	sl, r3
 80049ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ce:	d807      	bhi.n	80049e0 <_printf_i+0x28>
 80049d0:	2f62      	cmp	r7, #98	; 0x62
 80049d2:	d80a      	bhi.n	80049ea <_printf_i+0x32>
 80049d4:	2f00      	cmp	r7, #0
 80049d6:	f000 80d8 	beq.w	8004b8a <_printf_i+0x1d2>
 80049da:	2f58      	cmp	r7, #88	; 0x58
 80049dc:	f000 80a3 	beq.w	8004b26 <_printf_i+0x16e>
 80049e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049e8:	e03a      	b.n	8004a60 <_printf_i+0xa8>
 80049ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ee:	2b15      	cmp	r3, #21
 80049f0:	d8f6      	bhi.n	80049e0 <_printf_i+0x28>
 80049f2:	a101      	add	r1, pc, #4	; (adr r1, 80049f8 <_printf_i+0x40>)
 80049f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049f8:	08004a51 	.word	0x08004a51
 80049fc:	08004a65 	.word	0x08004a65
 8004a00:	080049e1 	.word	0x080049e1
 8004a04:	080049e1 	.word	0x080049e1
 8004a08:	080049e1 	.word	0x080049e1
 8004a0c:	080049e1 	.word	0x080049e1
 8004a10:	08004a65 	.word	0x08004a65
 8004a14:	080049e1 	.word	0x080049e1
 8004a18:	080049e1 	.word	0x080049e1
 8004a1c:	080049e1 	.word	0x080049e1
 8004a20:	080049e1 	.word	0x080049e1
 8004a24:	08004b71 	.word	0x08004b71
 8004a28:	08004a95 	.word	0x08004a95
 8004a2c:	08004b53 	.word	0x08004b53
 8004a30:	080049e1 	.word	0x080049e1
 8004a34:	080049e1 	.word	0x080049e1
 8004a38:	08004b93 	.word	0x08004b93
 8004a3c:	080049e1 	.word	0x080049e1
 8004a40:	08004a95 	.word	0x08004a95
 8004a44:	080049e1 	.word	0x080049e1
 8004a48:	080049e1 	.word	0x080049e1
 8004a4c:	08004b5b 	.word	0x08004b5b
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	1d1a      	adds	r2, r3, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	602a      	str	r2, [r5, #0]
 8004a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0a3      	b.n	8004bac <_printf_i+0x1f4>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	6829      	ldr	r1, [r5, #0]
 8004a68:	0606      	lsls	r6, r0, #24
 8004a6a:	f101 0304 	add.w	r3, r1, #4
 8004a6e:	d50a      	bpl.n	8004a86 <_printf_i+0xce>
 8004a70:	680e      	ldr	r6, [r1, #0]
 8004a72:	602b      	str	r3, [r5, #0]
 8004a74:	2e00      	cmp	r6, #0
 8004a76:	da03      	bge.n	8004a80 <_printf_i+0xc8>
 8004a78:	232d      	movs	r3, #45	; 0x2d
 8004a7a:	4276      	negs	r6, r6
 8004a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a80:	485e      	ldr	r0, [pc, #376]	; (8004bfc <_printf_i+0x244>)
 8004a82:	230a      	movs	r3, #10
 8004a84:	e019      	b.n	8004aba <_printf_i+0x102>
 8004a86:	680e      	ldr	r6, [r1, #0]
 8004a88:	602b      	str	r3, [r5, #0]
 8004a8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a8e:	bf18      	it	ne
 8004a90:	b236      	sxthne	r6, r6
 8004a92:	e7ef      	b.n	8004a74 <_printf_i+0xbc>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	6820      	ldr	r0, [r4, #0]
 8004a98:	1d19      	adds	r1, r3, #4
 8004a9a:	6029      	str	r1, [r5, #0]
 8004a9c:	0601      	lsls	r1, r0, #24
 8004a9e:	d501      	bpl.n	8004aa4 <_printf_i+0xec>
 8004aa0:	681e      	ldr	r6, [r3, #0]
 8004aa2:	e002      	b.n	8004aaa <_printf_i+0xf2>
 8004aa4:	0646      	lsls	r6, r0, #25
 8004aa6:	d5fb      	bpl.n	8004aa0 <_printf_i+0xe8>
 8004aa8:	881e      	ldrh	r6, [r3, #0]
 8004aaa:	4854      	ldr	r0, [pc, #336]	; (8004bfc <_printf_i+0x244>)
 8004aac:	2f6f      	cmp	r7, #111	; 0x6f
 8004aae:	bf0c      	ite	eq
 8004ab0:	2308      	moveq	r3, #8
 8004ab2:	230a      	movne	r3, #10
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aba:	6865      	ldr	r5, [r4, #4]
 8004abc:	60a5      	str	r5, [r4, #8]
 8004abe:	2d00      	cmp	r5, #0
 8004ac0:	bfa2      	ittt	ge
 8004ac2:	6821      	ldrge	r1, [r4, #0]
 8004ac4:	f021 0104 	bicge.w	r1, r1, #4
 8004ac8:	6021      	strge	r1, [r4, #0]
 8004aca:	b90e      	cbnz	r6, 8004ad0 <_printf_i+0x118>
 8004acc:	2d00      	cmp	r5, #0
 8004ace:	d04d      	beq.n	8004b6c <_printf_i+0x1b4>
 8004ad0:	4615      	mov	r5, r2
 8004ad2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ad6:	fb03 6711 	mls	r7, r3, r1, r6
 8004ada:	5dc7      	ldrb	r7, [r0, r7]
 8004adc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ae0:	4637      	mov	r7, r6
 8004ae2:	42bb      	cmp	r3, r7
 8004ae4:	460e      	mov	r6, r1
 8004ae6:	d9f4      	bls.n	8004ad2 <_printf_i+0x11a>
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d10b      	bne.n	8004b04 <_printf_i+0x14c>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	07de      	lsls	r6, r3, #31
 8004af0:	d508      	bpl.n	8004b04 <_printf_i+0x14c>
 8004af2:	6923      	ldr	r3, [r4, #16]
 8004af4:	6861      	ldr	r1, [r4, #4]
 8004af6:	4299      	cmp	r1, r3
 8004af8:	bfde      	ittt	le
 8004afa:	2330      	movle	r3, #48	; 0x30
 8004afc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b04:	1b52      	subs	r2, r2, r5
 8004b06:	6122      	str	r2, [r4, #16]
 8004b08:	f8cd a000 	str.w	sl, [sp]
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	aa03      	add	r2, sp, #12
 8004b10:	4621      	mov	r1, r4
 8004b12:	4640      	mov	r0, r8
 8004b14:	f7ff fee2 	bl	80048dc <_printf_common>
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d14c      	bne.n	8004bb6 <_printf_i+0x1fe>
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	b004      	add	sp, #16
 8004b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b26:	4835      	ldr	r0, [pc, #212]	; (8004bfc <_printf_i+0x244>)
 8004b28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b2c:	6829      	ldr	r1, [r5, #0]
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b34:	6029      	str	r1, [r5, #0]
 8004b36:	061d      	lsls	r5, r3, #24
 8004b38:	d514      	bpl.n	8004b64 <_printf_i+0x1ac>
 8004b3a:	07df      	lsls	r7, r3, #31
 8004b3c:	bf44      	itt	mi
 8004b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b42:	6023      	strmi	r3, [r4, #0]
 8004b44:	b91e      	cbnz	r6, 8004b4e <_printf_i+0x196>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	f023 0320 	bic.w	r3, r3, #32
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	2310      	movs	r3, #16
 8004b50:	e7b0      	b.n	8004ab4 <_printf_i+0xfc>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	f043 0320 	orr.w	r3, r3, #32
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	2378      	movs	r3, #120	; 0x78
 8004b5c:	4828      	ldr	r0, [pc, #160]	; (8004c00 <_printf_i+0x248>)
 8004b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b62:	e7e3      	b.n	8004b2c <_printf_i+0x174>
 8004b64:	0659      	lsls	r1, r3, #25
 8004b66:	bf48      	it	mi
 8004b68:	b2b6      	uxthmi	r6, r6
 8004b6a:	e7e6      	b.n	8004b3a <_printf_i+0x182>
 8004b6c:	4615      	mov	r5, r2
 8004b6e:	e7bb      	b.n	8004ae8 <_printf_i+0x130>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	6826      	ldr	r6, [r4, #0]
 8004b74:	6961      	ldr	r1, [r4, #20]
 8004b76:	1d18      	adds	r0, r3, #4
 8004b78:	6028      	str	r0, [r5, #0]
 8004b7a:	0635      	lsls	r5, r6, #24
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	d501      	bpl.n	8004b84 <_printf_i+0x1cc>
 8004b80:	6019      	str	r1, [r3, #0]
 8004b82:	e002      	b.n	8004b8a <_printf_i+0x1d2>
 8004b84:	0670      	lsls	r0, r6, #25
 8004b86:	d5fb      	bpl.n	8004b80 <_printf_i+0x1c8>
 8004b88:	8019      	strh	r1, [r3, #0]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6123      	str	r3, [r4, #16]
 8004b8e:	4615      	mov	r5, r2
 8004b90:	e7ba      	b.n	8004b08 <_printf_i+0x150>
 8004b92:	682b      	ldr	r3, [r5, #0]
 8004b94:	1d1a      	adds	r2, r3, #4
 8004b96:	602a      	str	r2, [r5, #0]
 8004b98:	681d      	ldr	r5, [r3, #0]
 8004b9a:	6862      	ldr	r2, [r4, #4]
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f7fb fb1e 	bl	80001e0 <memchr>
 8004ba4:	b108      	cbz	r0, 8004baa <_printf_i+0x1f2>
 8004ba6:	1b40      	subs	r0, r0, r5
 8004ba8:	6060      	str	r0, [r4, #4]
 8004baa:	6863      	ldr	r3, [r4, #4]
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bb4:	e7a8      	b.n	8004b08 <_printf_i+0x150>
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	462a      	mov	r2, r5
 8004bba:	4649      	mov	r1, r9
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	47d0      	blx	sl
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d0ab      	beq.n	8004b1c <_printf_i+0x164>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	079b      	lsls	r3, r3, #30
 8004bc8:	d413      	bmi.n	8004bf2 <_printf_i+0x23a>
 8004bca:	68e0      	ldr	r0, [r4, #12]
 8004bcc:	9b03      	ldr	r3, [sp, #12]
 8004bce:	4298      	cmp	r0, r3
 8004bd0:	bfb8      	it	lt
 8004bd2:	4618      	movlt	r0, r3
 8004bd4:	e7a4      	b.n	8004b20 <_printf_i+0x168>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	4632      	mov	r2, r6
 8004bda:	4649      	mov	r1, r9
 8004bdc:	4640      	mov	r0, r8
 8004bde:	47d0      	blx	sl
 8004be0:	3001      	adds	r0, #1
 8004be2:	d09b      	beq.n	8004b1c <_printf_i+0x164>
 8004be4:	3501      	adds	r5, #1
 8004be6:	68e3      	ldr	r3, [r4, #12]
 8004be8:	9903      	ldr	r1, [sp, #12]
 8004bea:	1a5b      	subs	r3, r3, r1
 8004bec:	42ab      	cmp	r3, r5
 8004bee:	dcf2      	bgt.n	8004bd6 <_printf_i+0x21e>
 8004bf0:	e7eb      	b.n	8004bca <_printf_i+0x212>
 8004bf2:	2500      	movs	r5, #0
 8004bf4:	f104 0619 	add.w	r6, r4, #25
 8004bf8:	e7f5      	b.n	8004be6 <_printf_i+0x22e>
 8004bfa:	bf00      	nop
 8004bfc:	08005537 	.word	0x08005537
 8004c00:	08005548 	.word	0x08005548

08004c04 <_sbrk_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	4d06      	ldr	r5, [pc, #24]	; (8004c20 <_sbrk_r+0x1c>)
 8004c08:	2300      	movs	r3, #0
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	4608      	mov	r0, r1
 8004c0e:	602b      	str	r3, [r5, #0]
 8004c10:	f7fd f8fe 	bl	8001e10 <_sbrk>
 8004c14:	1c43      	adds	r3, r0, #1
 8004c16:	d102      	bne.n	8004c1e <_sbrk_r+0x1a>
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	b103      	cbz	r3, 8004c1e <_sbrk_r+0x1a>
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	bd38      	pop	{r3, r4, r5, pc}
 8004c20:	20000560 	.word	0x20000560

08004c24 <__swbuf_r>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	460e      	mov	r6, r1
 8004c28:	4614      	mov	r4, r2
 8004c2a:	4605      	mov	r5, r0
 8004c2c:	b118      	cbz	r0, 8004c36 <__swbuf_r+0x12>
 8004c2e:	6983      	ldr	r3, [r0, #24]
 8004c30:	b90b      	cbnz	r3, 8004c36 <__swbuf_r+0x12>
 8004c32:	f000 f9d9 	bl	8004fe8 <__sinit>
 8004c36:	4b21      	ldr	r3, [pc, #132]	; (8004cbc <__swbuf_r+0x98>)
 8004c38:	429c      	cmp	r4, r3
 8004c3a:	d12b      	bne.n	8004c94 <__swbuf_r+0x70>
 8004c3c:	686c      	ldr	r4, [r5, #4]
 8004c3e:	69a3      	ldr	r3, [r4, #24]
 8004c40:	60a3      	str	r3, [r4, #8]
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	071a      	lsls	r2, r3, #28
 8004c46:	d52f      	bpl.n	8004ca8 <__swbuf_r+0x84>
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	b36b      	cbz	r3, 8004ca8 <__swbuf_r+0x84>
 8004c4c:	6923      	ldr	r3, [r4, #16]
 8004c4e:	6820      	ldr	r0, [r4, #0]
 8004c50:	1ac0      	subs	r0, r0, r3
 8004c52:	6963      	ldr	r3, [r4, #20]
 8004c54:	b2f6      	uxtb	r6, r6
 8004c56:	4283      	cmp	r3, r0
 8004c58:	4637      	mov	r7, r6
 8004c5a:	dc04      	bgt.n	8004c66 <__swbuf_r+0x42>
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 f92e 	bl	8004ec0 <_fflush_r>
 8004c64:	bb30      	cbnz	r0, 8004cb4 <__swbuf_r+0x90>
 8004c66:	68a3      	ldr	r3, [r4, #8]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	60a3      	str	r3, [r4, #8]
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	6022      	str	r2, [r4, #0]
 8004c72:	701e      	strb	r6, [r3, #0]
 8004c74:	6963      	ldr	r3, [r4, #20]
 8004c76:	3001      	adds	r0, #1
 8004c78:	4283      	cmp	r3, r0
 8004c7a:	d004      	beq.n	8004c86 <__swbuf_r+0x62>
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	07db      	lsls	r3, r3, #31
 8004c80:	d506      	bpl.n	8004c90 <__swbuf_r+0x6c>
 8004c82:	2e0a      	cmp	r6, #10
 8004c84:	d104      	bne.n	8004c90 <__swbuf_r+0x6c>
 8004c86:	4621      	mov	r1, r4
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f000 f919 	bl	8004ec0 <_fflush_r>
 8004c8e:	b988      	cbnz	r0, 8004cb4 <__swbuf_r+0x90>
 8004c90:	4638      	mov	r0, r7
 8004c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c94:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <__swbuf_r+0x9c>)
 8004c96:	429c      	cmp	r4, r3
 8004c98:	d101      	bne.n	8004c9e <__swbuf_r+0x7a>
 8004c9a:	68ac      	ldr	r4, [r5, #8]
 8004c9c:	e7cf      	b.n	8004c3e <__swbuf_r+0x1a>
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <__swbuf_r+0xa0>)
 8004ca0:	429c      	cmp	r4, r3
 8004ca2:	bf08      	it	eq
 8004ca4:	68ec      	ldreq	r4, [r5, #12]
 8004ca6:	e7ca      	b.n	8004c3e <__swbuf_r+0x1a>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 f80c 	bl	8004cc8 <__swsetup_r>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d0cb      	beq.n	8004c4c <__swbuf_r+0x28>
 8004cb4:	f04f 37ff 	mov.w	r7, #4294967295
 8004cb8:	e7ea      	b.n	8004c90 <__swbuf_r+0x6c>
 8004cba:	bf00      	nop
 8004cbc:	0800557c 	.word	0x0800557c
 8004cc0:	0800559c 	.word	0x0800559c
 8004cc4:	0800555c 	.word	0x0800555c

08004cc8 <__swsetup_r>:
 8004cc8:	4b32      	ldr	r3, [pc, #200]	; (8004d94 <__swsetup_r+0xcc>)
 8004cca:	b570      	push	{r4, r5, r6, lr}
 8004ccc:	681d      	ldr	r5, [r3, #0]
 8004cce:	4606      	mov	r6, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	b125      	cbz	r5, 8004cde <__swsetup_r+0x16>
 8004cd4:	69ab      	ldr	r3, [r5, #24]
 8004cd6:	b913      	cbnz	r3, 8004cde <__swsetup_r+0x16>
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f000 f985 	bl	8004fe8 <__sinit>
 8004cde:	4b2e      	ldr	r3, [pc, #184]	; (8004d98 <__swsetup_r+0xd0>)
 8004ce0:	429c      	cmp	r4, r3
 8004ce2:	d10f      	bne.n	8004d04 <__swsetup_r+0x3c>
 8004ce4:	686c      	ldr	r4, [r5, #4]
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cec:	0719      	lsls	r1, r3, #28
 8004cee:	d42c      	bmi.n	8004d4a <__swsetup_r+0x82>
 8004cf0:	06dd      	lsls	r5, r3, #27
 8004cf2:	d411      	bmi.n	8004d18 <__swsetup_r+0x50>
 8004cf4:	2309      	movs	r3, #9
 8004cf6:	6033      	str	r3, [r6, #0]
 8004cf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cfc:	81a3      	strh	r3, [r4, #12]
 8004cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8004d02:	e03e      	b.n	8004d82 <__swsetup_r+0xba>
 8004d04:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <__swsetup_r+0xd4>)
 8004d06:	429c      	cmp	r4, r3
 8004d08:	d101      	bne.n	8004d0e <__swsetup_r+0x46>
 8004d0a:	68ac      	ldr	r4, [r5, #8]
 8004d0c:	e7eb      	b.n	8004ce6 <__swsetup_r+0x1e>
 8004d0e:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <__swsetup_r+0xd8>)
 8004d10:	429c      	cmp	r4, r3
 8004d12:	bf08      	it	eq
 8004d14:	68ec      	ldreq	r4, [r5, #12]
 8004d16:	e7e6      	b.n	8004ce6 <__swsetup_r+0x1e>
 8004d18:	0758      	lsls	r0, r3, #29
 8004d1a:	d512      	bpl.n	8004d42 <__swsetup_r+0x7a>
 8004d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d1e:	b141      	cbz	r1, 8004d32 <__swsetup_r+0x6a>
 8004d20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d24:	4299      	cmp	r1, r3
 8004d26:	d002      	beq.n	8004d2e <__swsetup_r+0x66>
 8004d28:	4630      	mov	r0, r6
 8004d2a:	f7ff fb9d 	bl	8004468 <_free_r>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6363      	str	r3, [r4, #52]	; 0x34
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d38:	81a3      	strh	r3, [r4, #12]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6063      	str	r3, [r4, #4]
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	f043 0308 	orr.w	r3, r3, #8
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	6923      	ldr	r3, [r4, #16]
 8004d4c:	b94b      	cbnz	r3, 8004d62 <__swsetup_r+0x9a>
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d58:	d003      	beq.n	8004d62 <__swsetup_r+0x9a>
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f000 fa09 	bl	8005174 <__smakebuf_r>
 8004d62:	89a0      	ldrh	r0, [r4, #12]
 8004d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d68:	f010 0301 	ands.w	r3, r0, #1
 8004d6c:	d00a      	beq.n	8004d84 <__swsetup_r+0xbc>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60a3      	str	r3, [r4, #8]
 8004d72:	6963      	ldr	r3, [r4, #20]
 8004d74:	425b      	negs	r3, r3
 8004d76:	61a3      	str	r3, [r4, #24]
 8004d78:	6923      	ldr	r3, [r4, #16]
 8004d7a:	b943      	cbnz	r3, 8004d8e <__swsetup_r+0xc6>
 8004d7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d80:	d1ba      	bne.n	8004cf8 <__swsetup_r+0x30>
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	0781      	lsls	r1, r0, #30
 8004d86:	bf58      	it	pl
 8004d88:	6963      	ldrpl	r3, [r4, #20]
 8004d8a:	60a3      	str	r3, [r4, #8]
 8004d8c:	e7f4      	b.n	8004d78 <__swsetup_r+0xb0>
 8004d8e:	2000      	movs	r0, #0
 8004d90:	e7f7      	b.n	8004d82 <__swsetup_r+0xba>
 8004d92:	bf00      	nop
 8004d94:	200000b0 	.word	0x200000b0
 8004d98:	0800557c 	.word	0x0800557c
 8004d9c:	0800559c 	.word	0x0800559c
 8004da0:	0800555c 	.word	0x0800555c

08004da4 <abort>:
 8004da4:	b508      	push	{r3, lr}
 8004da6:	2006      	movs	r0, #6
 8004da8:	f000 fa58 	bl	800525c <raise>
 8004dac:	2001      	movs	r0, #1
 8004dae:	f7fc ffb7 	bl	8001d20 <_exit>
	...

08004db4 <__sflush_r>:
 8004db4:	898a      	ldrh	r2, [r1, #12]
 8004db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dba:	4605      	mov	r5, r0
 8004dbc:	0710      	lsls	r0, r2, #28
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	d458      	bmi.n	8004e74 <__sflush_r+0xc0>
 8004dc2:	684b      	ldr	r3, [r1, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dc05      	bgt.n	8004dd4 <__sflush_r+0x20>
 8004dc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	dc02      	bgt.n	8004dd4 <__sflush_r+0x20>
 8004dce:	2000      	movs	r0, #0
 8004dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dd6:	2e00      	cmp	r6, #0
 8004dd8:	d0f9      	beq.n	8004dce <__sflush_r+0x1a>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004de0:	682f      	ldr	r7, [r5, #0]
 8004de2:	602b      	str	r3, [r5, #0]
 8004de4:	d032      	beq.n	8004e4c <__sflush_r+0x98>
 8004de6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	075a      	lsls	r2, r3, #29
 8004dec:	d505      	bpl.n	8004dfa <__sflush_r+0x46>
 8004dee:	6863      	ldr	r3, [r4, #4]
 8004df0:	1ac0      	subs	r0, r0, r3
 8004df2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004df4:	b10b      	cbz	r3, 8004dfa <__sflush_r+0x46>
 8004df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004df8:	1ac0      	subs	r0, r0, r3
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e00:	6a21      	ldr	r1, [r4, #32]
 8004e02:	4628      	mov	r0, r5
 8004e04:	47b0      	blx	r6
 8004e06:	1c43      	adds	r3, r0, #1
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	d106      	bne.n	8004e1a <__sflush_r+0x66>
 8004e0c:	6829      	ldr	r1, [r5, #0]
 8004e0e:	291d      	cmp	r1, #29
 8004e10:	d82c      	bhi.n	8004e6c <__sflush_r+0xb8>
 8004e12:	4a2a      	ldr	r2, [pc, #168]	; (8004ebc <__sflush_r+0x108>)
 8004e14:	40ca      	lsrs	r2, r1
 8004e16:	07d6      	lsls	r6, r2, #31
 8004e18:	d528      	bpl.n	8004e6c <__sflush_r+0xb8>
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	6062      	str	r2, [r4, #4]
 8004e1e:	04d9      	lsls	r1, r3, #19
 8004e20:	6922      	ldr	r2, [r4, #16]
 8004e22:	6022      	str	r2, [r4, #0]
 8004e24:	d504      	bpl.n	8004e30 <__sflush_r+0x7c>
 8004e26:	1c42      	adds	r2, r0, #1
 8004e28:	d101      	bne.n	8004e2e <__sflush_r+0x7a>
 8004e2a:	682b      	ldr	r3, [r5, #0]
 8004e2c:	b903      	cbnz	r3, 8004e30 <__sflush_r+0x7c>
 8004e2e:	6560      	str	r0, [r4, #84]	; 0x54
 8004e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e32:	602f      	str	r7, [r5, #0]
 8004e34:	2900      	cmp	r1, #0
 8004e36:	d0ca      	beq.n	8004dce <__sflush_r+0x1a>
 8004e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	d002      	beq.n	8004e46 <__sflush_r+0x92>
 8004e40:	4628      	mov	r0, r5
 8004e42:	f7ff fb11 	bl	8004468 <_free_r>
 8004e46:	2000      	movs	r0, #0
 8004e48:	6360      	str	r0, [r4, #52]	; 0x34
 8004e4a:	e7c1      	b.n	8004dd0 <__sflush_r+0x1c>
 8004e4c:	6a21      	ldr	r1, [r4, #32]
 8004e4e:	2301      	movs	r3, #1
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b0      	blx	r6
 8004e54:	1c41      	adds	r1, r0, #1
 8004e56:	d1c7      	bne.n	8004de8 <__sflush_r+0x34>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0c4      	beq.n	8004de8 <__sflush_r+0x34>
 8004e5e:	2b1d      	cmp	r3, #29
 8004e60:	d001      	beq.n	8004e66 <__sflush_r+0xb2>
 8004e62:	2b16      	cmp	r3, #22
 8004e64:	d101      	bne.n	8004e6a <__sflush_r+0xb6>
 8004e66:	602f      	str	r7, [r5, #0]
 8004e68:	e7b1      	b.n	8004dce <__sflush_r+0x1a>
 8004e6a:	89a3      	ldrh	r3, [r4, #12]
 8004e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e70:	81a3      	strh	r3, [r4, #12]
 8004e72:	e7ad      	b.n	8004dd0 <__sflush_r+0x1c>
 8004e74:	690f      	ldr	r7, [r1, #16]
 8004e76:	2f00      	cmp	r7, #0
 8004e78:	d0a9      	beq.n	8004dce <__sflush_r+0x1a>
 8004e7a:	0793      	lsls	r3, r2, #30
 8004e7c:	680e      	ldr	r6, [r1, #0]
 8004e7e:	bf08      	it	eq
 8004e80:	694b      	ldreq	r3, [r1, #20]
 8004e82:	600f      	str	r7, [r1, #0]
 8004e84:	bf18      	it	ne
 8004e86:	2300      	movne	r3, #0
 8004e88:	eba6 0807 	sub.w	r8, r6, r7
 8004e8c:	608b      	str	r3, [r1, #8]
 8004e8e:	f1b8 0f00 	cmp.w	r8, #0
 8004e92:	dd9c      	ble.n	8004dce <__sflush_r+0x1a>
 8004e94:	6a21      	ldr	r1, [r4, #32]
 8004e96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e98:	4643      	mov	r3, r8
 8004e9a:	463a      	mov	r2, r7
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	47b0      	blx	r6
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	dc06      	bgt.n	8004eb2 <__sflush_r+0xfe>
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eaa:	81a3      	strh	r3, [r4, #12]
 8004eac:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb0:	e78e      	b.n	8004dd0 <__sflush_r+0x1c>
 8004eb2:	4407      	add	r7, r0
 8004eb4:	eba8 0800 	sub.w	r8, r8, r0
 8004eb8:	e7e9      	b.n	8004e8e <__sflush_r+0xda>
 8004eba:	bf00      	nop
 8004ebc:	20400001 	.word	0x20400001

08004ec0 <_fflush_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	690b      	ldr	r3, [r1, #16]
 8004ec4:	4605      	mov	r5, r0
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	b913      	cbnz	r3, 8004ed0 <_fflush_r+0x10>
 8004eca:	2500      	movs	r5, #0
 8004ecc:	4628      	mov	r0, r5
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	b118      	cbz	r0, 8004eda <_fflush_r+0x1a>
 8004ed2:	6983      	ldr	r3, [r0, #24]
 8004ed4:	b90b      	cbnz	r3, 8004eda <_fflush_r+0x1a>
 8004ed6:	f000 f887 	bl	8004fe8 <__sinit>
 8004eda:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <_fflush_r+0x6c>)
 8004edc:	429c      	cmp	r4, r3
 8004ede:	d11b      	bne.n	8004f18 <_fflush_r+0x58>
 8004ee0:	686c      	ldr	r4, [r5, #4]
 8004ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0ef      	beq.n	8004eca <_fflush_r+0xa>
 8004eea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004eec:	07d0      	lsls	r0, r2, #31
 8004eee:	d404      	bmi.n	8004efa <_fflush_r+0x3a>
 8004ef0:	0599      	lsls	r1, r3, #22
 8004ef2:	d402      	bmi.n	8004efa <_fflush_r+0x3a>
 8004ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ef6:	f000 f915 	bl	8005124 <__retarget_lock_acquire_recursive>
 8004efa:	4628      	mov	r0, r5
 8004efc:	4621      	mov	r1, r4
 8004efe:	f7ff ff59 	bl	8004db4 <__sflush_r>
 8004f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f04:	07da      	lsls	r2, r3, #31
 8004f06:	4605      	mov	r5, r0
 8004f08:	d4e0      	bmi.n	8004ecc <_fflush_r+0xc>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	059b      	lsls	r3, r3, #22
 8004f0e:	d4dd      	bmi.n	8004ecc <_fflush_r+0xc>
 8004f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f12:	f000 f908 	bl	8005126 <__retarget_lock_release_recursive>
 8004f16:	e7d9      	b.n	8004ecc <_fflush_r+0xc>
 8004f18:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <_fflush_r+0x70>)
 8004f1a:	429c      	cmp	r4, r3
 8004f1c:	d101      	bne.n	8004f22 <_fflush_r+0x62>
 8004f1e:	68ac      	ldr	r4, [r5, #8]
 8004f20:	e7df      	b.n	8004ee2 <_fflush_r+0x22>
 8004f22:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <_fflush_r+0x74>)
 8004f24:	429c      	cmp	r4, r3
 8004f26:	bf08      	it	eq
 8004f28:	68ec      	ldreq	r4, [r5, #12]
 8004f2a:	e7da      	b.n	8004ee2 <_fflush_r+0x22>
 8004f2c:	0800557c 	.word	0x0800557c
 8004f30:	0800559c 	.word	0x0800559c
 8004f34:	0800555c 	.word	0x0800555c

08004f38 <std>:
 8004f38:	2300      	movs	r3, #0
 8004f3a:	b510      	push	{r4, lr}
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f46:	6083      	str	r3, [r0, #8]
 8004f48:	8181      	strh	r1, [r0, #12]
 8004f4a:	6643      	str	r3, [r0, #100]	; 0x64
 8004f4c:	81c2      	strh	r2, [r0, #14]
 8004f4e:	6183      	str	r3, [r0, #24]
 8004f50:	4619      	mov	r1, r3
 8004f52:	2208      	movs	r2, #8
 8004f54:	305c      	adds	r0, #92	; 0x5c
 8004f56:	f7ff fa09 	bl	800436c <memset>
 8004f5a:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <std+0x38>)
 8004f5c:	6263      	str	r3, [r4, #36]	; 0x24
 8004f5e:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <std+0x3c>)
 8004f60:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f62:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <std+0x40>)
 8004f64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <std+0x44>)
 8004f68:	6224      	str	r4, [r4, #32]
 8004f6a:	6323      	str	r3, [r4, #48]	; 0x30
 8004f6c:	bd10      	pop	{r4, pc}
 8004f6e:	bf00      	nop
 8004f70:	08005295 	.word	0x08005295
 8004f74:	080052b7 	.word	0x080052b7
 8004f78:	080052ef 	.word	0x080052ef
 8004f7c:	08005313 	.word	0x08005313

08004f80 <_cleanup_r>:
 8004f80:	4901      	ldr	r1, [pc, #4]	; (8004f88 <_cleanup_r+0x8>)
 8004f82:	f000 b8af 	b.w	80050e4 <_fwalk_reent>
 8004f86:	bf00      	nop
 8004f88:	08004ec1 	.word	0x08004ec1

08004f8c <__sfmoreglue>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	2268      	movs	r2, #104	; 0x68
 8004f90:	1e4d      	subs	r5, r1, #1
 8004f92:	4355      	muls	r5, r2
 8004f94:	460e      	mov	r6, r1
 8004f96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f9a:	f7ff fad1 	bl	8004540 <_malloc_r>
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	b140      	cbz	r0, 8004fb4 <__sfmoreglue+0x28>
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	e9c0 1600 	strd	r1, r6, [r0]
 8004fa8:	300c      	adds	r0, #12
 8004faa:	60a0      	str	r0, [r4, #8]
 8004fac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fb0:	f7ff f9dc 	bl	800436c <memset>
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}

08004fb8 <__sfp_lock_acquire>:
 8004fb8:	4801      	ldr	r0, [pc, #4]	; (8004fc0 <__sfp_lock_acquire+0x8>)
 8004fba:	f000 b8b3 	b.w	8005124 <__retarget_lock_acquire_recursive>
 8004fbe:	bf00      	nop
 8004fc0:	2000055d 	.word	0x2000055d

08004fc4 <__sfp_lock_release>:
 8004fc4:	4801      	ldr	r0, [pc, #4]	; (8004fcc <__sfp_lock_release+0x8>)
 8004fc6:	f000 b8ae 	b.w	8005126 <__retarget_lock_release_recursive>
 8004fca:	bf00      	nop
 8004fcc:	2000055d 	.word	0x2000055d

08004fd0 <__sinit_lock_acquire>:
 8004fd0:	4801      	ldr	r0, [pc, #4]	; (8004fd8 <__sinit_lock_acquire+0x8>)
 8004fd2:	f000 b8a7 	b.w	8005124 <__retarget_lock_acquire_recursive>
 8004fd6:	bf00      	nop
 8004fd8:	2000055e 	.word	0x2000055e

08004fdc <__sinit_lock_release>:
 8004fdc:	4801      	ldr	r0, [pc, #4]	; (8004fe4 <__sinit_lock_release+0x8>)
 8004fde:	f000 b8a2 	b.w	8005126 <__retarget_lock_release_recursive>
 8004fe2:	bf00      	nop
 8004fe4:	2000055e 	.word	0x2000055e

08004fe8 <__sinit>:
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	4604      	mov	r4, r0
 8004fec:	f7ff fff0 	bl	8004fd0 <__sinit_lock_acquire>
 8004ff0:	69a3      	ldr	r3, [r4, #24]
 8004ff2:	b11b      	cbz	r3, 8004ffc <__sinit+0x14>
 8004ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ff8:	f7ff bff0 	b.w	8004fdc <__sinit_lock_release>
 8004ffc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005000:	6523      	str	r3, [r4, #80]	; 0x50
 8005002:	4b13      	ldr	r3, [pc, #76]	; (8005050 <__sinit+0x68>)
 8005004:	4a13      	ldr	r2, [pc, #76]	; (8005054 <__sinit+0x6c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	62a2      	str	r2, [r4, #40]	; 0x28
 800500a:	42a3      	cmp	r3, r4
 800500c:	bf04      	itt	eq
 800500e:	2301      	moveq	r3, #1
 8005010:	61a3      	streq	r3, [r4, #24]
 8005012:	4620      	mov	r0, r4
 8005014:	f000 f820 	bl	8005058 <__sfp>
 8005018:	6060      	str	r0, [r4, #4]
 800501a:	4620      	mov	r0, r4
 800501c:	f000 f81c 	bl	8005058 <__sfp>
 8005020:	60a0      	str	r0, [r4, #8]
 8005022:	4620      	mov	r0, r4
 8005024:	f000 f818 	bl	8005058 <__sfp>
 8005028:	2200      	movs	r2, #0
 800502a:	60e0      	str	r0, [r4, #12]
 800502c:	2104      	movs	r1, #4
 800502e:	6860      	ldr	r0, [r4, #4]
 8005030:	f7ff ff82 	bl	8004f38 <std>
 8005034:	68a0      	ldr	r0, [r4, #8]
 8005036:	2201      	movs	r2, #1
 8005038:	2109      	movs	r1, #9
 800503a:	f7ff ff7d 	bl	8004f38 <std>
 800503e:	68e0      	ldr	r0, [r4, #12]
 8005040:	2202      	movs	r2, #2
 8005042:	2112      	movs	r1, #18
 8005044:	f7ff ff78 	bl	8004f38 <std>
 8005048:	2301      	movs	r3, #1
 800504a:	61a3      	str	r3, [r4, #24]
 800504c:	e7d2      	b.n	8004ff4 <__sinit+0xc>
 800504e:	bf00      	nop
 8005050:	08005474 	.word	0x08005474
 8005054:	08004f81 	.word	0x08004f81

08005058 <__sfp>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	4607      	mov	r7, r0
 800505c:	f7ff ffac 	bl	8004fb8 <__sfp_lock_acquire>
 8005060:	4b1e      	ldr	r3, [pc, #120]	; (80050dc <__sfp+0x84>)
 8005062:	681e      	ldr	r6, [r3, #0]
 8005064:	69b3      	ldr	r3, [r6, #24]
 8005066:	b913      	cbnz	r3, 800506e <__sfp+0x16>
 8005068:	4630      	mov	r0, r6
 800506a:	f7ff ffbd 	bl	8004fe8 <__sinit>
 800506e:	3648      	adds	r6, #72	; 0x48
 8005070:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005074:	3b01      	subs	r3, #1
 8005076:	d503      	bpl.n	8005080 <__sfp+0x28>
 8005078:	6833      	ldr	r3, [r6, #0]
 800507a:	b30b      	cbz	r3, 80050c0 <__sfp+0x68>
 800507c:	6836      	ldr	r6, [r6, #0]
 800507e:	e7f7      	b.n	8005070 <__sfp+0x18>
 8005080:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005084:	b9d5      	cbnz	r5, 80050bc <__sfp+0x64>
 8005086:	4b16      	ldr	r3, [pc, #88]	; (80050e0 <__sfp+0x88>)
 8005088:	60e3      	str	r3, [r4, #12]
 800508a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800508e:	6665      	str	r5, [r4, #100]	; 0x64
 8005090:	f000 f847 	bl	8005122 <__retarget_lock_init_recursive>
 8005094:	f7ff ff96 	bl	8004fc4 <__sfp_lock_release>
 8005098:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800509c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050a0:	6025      	str	r5, [r4, #0]
 80050a2:	61a5      	str	r5, [r4, #24]
 80050a4:	2208      	movs	r2, #8
 80050a6:	4629      	mov	r1, r5
 80050a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050ac:	f7ff f95e 	bl	800436c <memset>
 80050b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050b8:	4620      	mov	r0, r4
 80050ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050bc:	3468      	adds	r4, #104	; 0x68
 80050be:	e7d9      	b.n	8005074 <__sfp+0x1c>
 80050c0:	2104      	movs	r1, #4
 80050c2:	4638      	mov	r0, r7
 80050c4:	f7ff ff62 	bl	8004f8c <__sfmoreglue>
 80050c8:	4604      	mov	r4, r0
 80050ca:	6030      	str	r0, [r6, #0]
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d1d5      	bne.n	800507c <__sfp+0x24>
 80050d0:	f7ff ff78 	bl	8004fc4 <__sfp_lock_release>
 80050d4:	230c      	movs	r3, #12
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	e7ee      	b.n	80050b8 <__sfp+0x60>
 80050da:	bf00      	nop
 80050dc:	08005474 	.word	0x08005474
 80050e0:	ffff0001 	.word	0xffff0001

080050e4 <_fwalk_reent>:
 80050e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050e8:	4606      	mov	r6, r0
 80050ea:	4688      	mov	r8, r1
 80050ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050f0:	2700      	movs	r7, #0
 80050f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050f6:	f1b9 0901 	subs.w	r9, r9, #1
 80050fa:	d505      	bpl.n	8005108 <_fwalk_reent+0x24>
 80050fc:	6824      	ldr	r4, [r4, #0]
 80050fe:	2c00      	cmp	r4, #0
 8005100:	d1f7      	bne.n	80050f2 <_fwalk_reent+0xe>
 8005102:	4638      	mov	r0, r7
 8005104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005108:	89ab      	ldrh	r3, [r5, #12]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d907      	bls.n	800511e <_fwalk_reent+0x3a>
 800510e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005112:	3301      	adds	r3, #1
 8005114:	d003      	beq.n	800511e <_fwalk_reent+0x3a>
 8005116:	4629      	mov	r1, r5
 8005118:	4630      	mov	r0, r6
 800511a:	47c0      	blx	r8
 800511c:	4307      	orrs	r7, r0
 800511e:	3568      	adds	r5, #104	; 0x68
 8005120:	e7e9      	b.n	80050f6 <_fwalk_reent+0x12>

08005122 <__retarget_lock_init_recursive>:
 8005122:	4770      	bx	lr

08005124 <__retarget_lock_acquire_recursive>:
 8005124:	4770      	bx	lr

08005126 <__retarget_lock_release_recursive>:
 8005126:	4770      	bx	lr

08005128 <__swhatbuf_r>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	460e      	mov	r6, r1
 800512c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005130:	2900      	cmp	r1, #0
 8005132:	b096      	sub	sp, #88	; 0x58
 8005134:	4614      	mov	r4, r2
 8005136:	461d      	mov	r5, r3
 8005138:	da08      	bge.n	800514c <__swhatbuf_r+0x24>
 800513a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	602a      	str	r2, [r5, #0]
 8005142:	061a      	lsls	r2, r3, #24
 8005144:	d410      	bmi.n	8005168 <__swhatbuf_r+0x40>
 8005146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514a:	e00e      	b.n	800516a <__swhatbuf_r+0x42>
 800514c:	466a      	mov	r2, sp
 800514e:	f000 f907 	bl	8005360 <_fstat_r>
 8005152:	2800      	cmp	r0, #0
 8005154:	dbf1      	blt.n	800513a <__swhatbuf_r+0x12>
 8005156:	9a01      	ldr	r2, [sp, #4]
 8005158:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800515c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005160:	425a      	negs	r2, r3
 8005162:	415a      	adcs	r2, r3
 8005164:	602a      	str	r2, [r5, #0]
 8005166:	e7ee      	b.n	8005146 <__swhatbuf_r+0x1e>
 8005168:	2340      	movs	r3, #64	; 0x40
 800516a:	2000      	movs	r0, #0
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	b016      	add	sp, #88	; 0x58
 8005170:	bd70      	pop	{r4, r5, r6, pc}
	...

08005174 <__smakebuf_r>:
 8005174:	898b      	ldrh	r3, [r1, #12]
 8005176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005178:	079d      	lsls	r5, r3, #30
 800517a:	4606      	mov	r6, r0
 800517c:	460c      	mov	r4, r1
 800517e:	d507      	bpl.n	8005190 <__smakebuf_r+0x1c>
 8005180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	6123      	str	r3, [r4, #16]
 8005188:	2301      	movs	r3, #1
 800518a:	6163      	str	r3, [r4, #20]
 800518c:	b002      	add	sp, #8
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	ab01      	add	r3, sp, #4
 8005192:	466a      	mov	r2, sp
 8005194:	f7ff ffc8 	bl	8005128 <__swhatbuf_r>
 8005198:	9900      	ldr	r1, [sp, #0]
 800519a:	4605      	mov	r5, r0
 800519c:	4630      	mov	r0, r6
 800519e:	f7ff f9cf 	bl	8004540 <_malloc_r>
 80051a2:	b948      	cbnz	r0, 80051b8 <__smakebuf_r+0x44>
 80051a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051a8:	059a      	lsls	r2, r3, #22
 80051aa:	d4ef      	bmi.n	800518c <__smakebuf_r+0x18>
 80051ac:	f023 0303 	bic.w	r3, r3, #3
 80051b0:	f043 0302 	orr.w	r3, r3, #2
 80051b4:	81a3      	strh	r3, [r4, #12]
 80051b6:	e7e3      	b.n	8005180 <__smakebuf_r+0xc>
 80051b8:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <__smakebuf_r+0x7c>)
 80051ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	6020      	str	r0, [r4, #0]
 80051c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c4:	81a3      	strh	r3, [r4, #12]
 80051c6:	9b00      	ldr	r3, [sp, #0]
 80051c8:	6163      	str	r3, [r4, #20]
 80051ca:	9b01      	ldr	r3, [sp, #4]
 80051cc:	6120      	str	r0, [r4, #16]
 80051ce:	b15b      	cbz	r3, 80051e8 <__smakebuf_r+0x74>
 80051d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051d4:	4630      	mov	r0, r6
 80051d6:	f000 f8d5 	bl	8005384 <_isatty_r>
 80051da:	b128      	cbz	r0, 80051e8 <__smakebuf_r+0x74>
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	f023 0303 	bic.w	r3, r3, #3
 80051e2:	f043 0301 	orr.w	r3, r3, #1
 80051e6:	81a3      	strh	r3, [r4, #12]
 80051e8:	89a0      	ldrh	r0, [r4, #12]
 80051ea:	4305      	orrs	r5, r0
 80051ec:	81a5      	strh	r5, [r4, #12]
 80051ee:	e7cd      	b.n	800518c <__smakebuf_r+0x18>
 80051f0:	08004f81 	.word	0x08004f81

080051f4 <__malloc_lock>:
 80051f4:	4801      	ldr	r0, [pc, #4]	; (80051fc <__malloc_lock+0x8>)
 80051f6:	f7ff bf95 	b.w	8005124 <__retarget_lock_acquire_recursive>
 80051fa:	bf00      	nop
 80051fc:	2000055c 	.word	0x2000055c

08005200 <__malloc_unlock>:
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <__malloc_unlock+0x8>)
 8005202:	f7ff bf90 	b.w	8005126 <__retarget_lock_release_recursive>
 8005206:	bf00      	nop
 8005208:	2000055c 	.word	0x2000055c

0800520c <_raise_r>:
 800520c:	291f      	cmp	r1, #31
 800520e:	b538      	push	{r3, r4, r5, lr}
 8005210:	4604      	mov	r4, r0
 8005212:	460d      	mov	r5, r1
 8005214:	d904      	bls.n	8005220 <_raise_r+0x14>
 8005216:	2316      	movs	r3, #22
 8005218:	6003      	str	r3, [r0, #0]
 800521a:	f04f 30ff 	mov.w	r0, #4294967295
 800521e:	bd38      	pop	{r3, r4, r5, pc}
 8005220:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005222:	b112      	cbz	r2, 800522a <_raise_r+0x1e>
 8005224:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005228:	b94b      	cbnz	r3, 800523e <_raise_r+0x32>
 800522a:	4620      	mov	r0, r4
 800522c:	f000 f830 	bl	8005290 <_getpid_r>
 8005230:	462a      	mov	r2, r5
 8005232:	4601      	mov	r1, r0
 8005234:	4620      	mov	r0, r4
 8005236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800523a:	f000 b817 	b.w	800526c <_kill_r>
 800523e:	2b01      	cmp	r3, #1
 8005240:	d00a      	beq.n	8005258 <_raise_r+0x4c>
 8005242:	1c59      	adds	r1, r3, #1
 8005244:	d103      	bne.n	800524e <_raise_r+0x42>
 8005246:	2316      	movs	r3, #22
 8005248:	6003      	str	r3, [r0, #0]
 800524a:	2001      	movs	r0, #1
 800524c:	e7e7      	b.n	800521e <_raise_r+0x12>
 800524e:	2400      	movs	r4, #0
 8005250:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005254:	4628      	mov	r0, r5
 8005256:	4798      	blx	r3
 8005258:	2000      	movs	r0, #0
 800525a:	e7e0      	b.n	800521e <_raise_r+0x12>

0800525c <raise>:
 800525c:	4b02      	ldr	r3, [pc, #8]	; (8005268 <raise+0xc>)
 800525e:	4601      	mov	r1, r0
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	f7ff bfd3 	b.w	800520c <_raise_r>
 8005266:	bf00      	nop
 8005268:	200000b0 	.word	0x200000b0

0800526c <_kill_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4d07      	ldr	r5, [pc, #28]	; (800528c <_kill_r+0x20>)
 8005270:	2300      	movs	r3, #0
 8005272:	4604      	mov	r4, r0
 8005274:	4608      	mov	r0, r1
 8005276:	4611      	mov	r1, r2
 8005278:	602b      	str	r3, [r5, #0]
 800527a:	f7fc fd41 	bl	8001d00 <_kill>
 800527e:	1c43      	adds	r3, r0, #1
 8005280:	d102      	bne.n	8005288 <_kill_r+0x1c>
 8005282:	682b      	ldr	r3, [r5, #0]
 8005284:	b103      	cbz	r3, 8005288 <_kill_r+0x1c>
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	bd38      	pop	{r3, r4, r5, pc}
 800528a:	bf00      	nop
 800528c:	20000560 	.word	0x20000560

08005290 <_getpid_r>:
 8005290:	f7fc bd2e 	b.w	8001cf0 <_getpid>

08005294 <__sread>:
 8005294:	b510      	push	{r4, lr}
 8005296:	460c      	mov	r4, r1
 8005298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529c:	f000 f894 	bl	80053c8 <_read_r>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	bfab      	itete	ge
 80052a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052a6:	89a3      	ldrhlt	r3, [r4, #12]
 80052a8:	181b      	addge	r3, r3, r0
 80052aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052ae:	bfac      	ite	ge
 80052b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80052b2:	81a3      	strhlt	r3, [r4, #12]
 80052b4:	bd10      	pop	{r4, pc}

080052b6 <__swrite>:
 80052b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ba:	461f      	mov	r7, r3
 80052bc:	898b      	ldrh	r3, [r1, #12]
 80052be:	05db      	lsls	r3, r3, #23
 80052c0:	4605      	mov	r5, r0
 80052c2:	460c      	mov	r4, r1
 80052c4:	4616      	mov	r6, r2
 80052c6:	d505      	bpl.n	80052d4 <__swrite+0x1e>
 80052c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052cc:	2302      	movs	r3, #2
 80052ce:	2200      	movs	r2, #0
 80052d0:	f000 f868 	bl	80053a4 <_lseek_r>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052de:	81a3      	strh	r3, [r4, #12]
 80052e0:	4632      	mov	r2, r6
 80052e2:	463b      	mov	r3, r7
 80052e4:	4628      	mov	r0, r5
 80052e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ea:	f000 b817 	b.w	800531c <_write_r>

080052ee <__sseek>:
 80052ee:	b510      	push	{r4, lr}
 80052f0:	460c      	mov	r4, r1
 80052f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f6:	f000 f855 	bl	80053a4 <_lseek_r>
 80052fa:	1c43      	adds	r3, r0, #1
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	bf15      	itete	ne
 8005300:	6560      	strne	r0, [r4, #84]	; 0x54
 8005302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800530a:	81a3      	strheq	r3, [r4, #12]
 800530c:	bf18      	it	ne
 800530e:	81a3      	strhne	r3, [r4, #12]
 8005310:	bd10      	pop	{r4, pc}

08005312 <__sclose>:
 8005312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005316:	f000 b813 	b.w	8005340 <_close_r>
	...

0800531c <_write_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4d07      	ldr	r5, [pc, #28]	; (800533c <_write_r+0x20>)
 8005320:	4604      	mov	r4, r0
 8005322:	4608      	mov	r0, r1
 8005324:	4611      	mov	r1, r2
 8005326:	2200      	movs	r2, #0
 8005328:	602a      	str	r2, [r5, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	f7fc fd1f 	bl	8001d6e <_write>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d102      	bne.n	800533a <_write_r+0x1e>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	b103      	cbz	r3, 800533a <_write_r+0x1e>
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	bd38      	pop	{r3, r4, r5, pc}
 800533c:	20000560 	.word	0x20000560

08005340 <_close_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4d06      	ldr	r5, [pc, #24]	; (800535c <_close_r+0x1c>)
 8005344:	2300      	movs	r3, #0
 8005346:	4604      	mov	r4, r0
 8005348:	4608      	mov	r0, r1
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	f7fc fd2b 	bl	8001da6 <_close>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_close_r+0x1a>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_close_r+0x1a>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	20000560 	.word	0x20000560

08005360 <_fstat_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4d07      	ldr	r5, [pc, #28]	; (8005380 <_fstat_r+0x20>)
 8005364:	2300      	movs	r3, #0
 8005366:	4604      	mov	r4, r0
 8005368:	4608      	mov	r0, r1
 800536a:	4611      	mov	r1, r2
 800536c:	602b      	str	r3, [r5, #0]
 800536e:	f7fc fd26 	bl	8001dbe <_fstat>
 8005372:	1c43      	adds	r3, r0, #1
 8005374:	d102      	bne.n	800537c <_fstat_r+0x1c>
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	b103      	cbz	r3, 800537c <_fstat_r+0x1c>
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	bd38      	pop	{r3, r4, r5, pc}
 800537e:	bf00      	nop
 8005380:	20000560 	.word	0x20000560

08005384 <_isatty_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4d06      	ldr	r5, [pc, #24]	; (80053a0 <_isatty_r+0x1c>)
 8005388:	2300      	movs	r3, #0
 800538a:	4604      	mov	r4, r0
 800538c:	4608      	mov	r0, r1
 800538e:	602b      	str	r3, [r5, #0]
 8005390:	f7fc fd25 	bl	8001dde <_isatty>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_isatty_r+0x1a>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_isatty_r+0x1a>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	20000560 	.word	0x20000560

080053a4 <_lseek_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4d07      	ldr	r5, [pc, #28]	; (80053c4 <_lseek_r+0x20>)
 80053a8:	4604      	mov	r4, r0
 80053aa:	4608      	mov	r0, r1
 80053ac:	4611      	mov	r1, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	602a      	str	r2, [r5, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fc fd1e 	bl	8001df4 <_lseek>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_lseek_r+0x1e>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_lseek_r+0x1e>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	20000560 	.word	0x20000560

080053c8 <_read_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4d07      	ldr	r5, [pc, #28]	; (80053e8 <_read_r+0x20>)
 80053cc:	4604      	mov	r4, r0
 80053ce:	4608      	mov	r0, r1
 80053d0:	4611      	mov	r1, r2
 80053d2:	2200      	movs	r2, #0
 80053d4:	602a      	str	r2, [r5, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f7fc fcac 	bl	8001d34 <_read>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_read_r+0x1e>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_read_r+0x1e>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	20000560 	.word	0x20000560

080053ec <_init>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	bf00      	nop
 80053f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f2:	bc08      	pop	{r3}
 80053f4:	469e      	mov	lr, r3
 80053f6:	4770      	bx	lr

080053f8 <_fini>:
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	bf00      	nop
 80053fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fe:	bc08      	pop	{r3}
 8005400:	469e      	mov	lr, r3
 8005402:	4770      	bx	lr
