
Final-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008568  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  080086f8  080086f8  000186f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008924  08008924  0002016c  2**0
                  CONTENTS
  4 .ARM          00000000  08008924  08008924  0002016c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008924  08008924  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008924  08008924  00018924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008928  08008928  00018928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800892c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002016c  2**0
                  CONTENTS
 10 .bss          000005ac  2000016c  2000016c  0002016c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000718  20000718  0002016c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cd87  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000360e  00000000  00000000  0003cf23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001780  00000000  00000000  00040538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001640  00000000  00000000  00041cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021387  00000000  00000000  000432f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d35b  00000000  00000000  0006467f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5a29  00000000  00000000  000819da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147403  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f20  00000000  00000000  00147454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086e0 	.word	0x080086e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	080086e0 	.word	0x080086e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000018a 	.word	0x2000018a
 800039c:	2000018c 	.word	0x2000018c
 80003a0:	2000018e 	.word	0x2000018e
 80003a4:	200001a0 	.word	0x200001a0
 80003a8:	20000190 	.word	0x20000190
 80003ac:	200001a4 	.word	0x200001a4

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f002 fcf5 	bl	8002ea0 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f002 fb46 	bl	8002b48 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 fe7c 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 fe74 	bl	80031c4 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fe68 	bl	80031c4 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f002 fb1e 	bl	8002b48 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f002 fb18 	bl	8002b48 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f002 fb12 	bl	8002b48 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f002 fb03 	bl	8002b48 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f002 faf8 	bl	8002b48 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200001a4 	.word	0x200001a4
 80005a8:	200001a7 	.word	0x200001a7
 80005ac:	20000188 	.word	0x20000188
 80005b0:	20000000 	.word	0x20000000
 80005b4:	2000018a 	.word	0x2000018a
 80005b8:	2000018c 	.word	0x2000018c
 80005bc:	2000018e 	.word	0x2000018e
 80005c0:	20000190 	.word	0x20000190
 80005c4:	200001a0 	.word	0x200001a0
 80005c8:	200001a5 	.word	0x200001a5
 80005cc:	200001a6 	.word	0x200001a6

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200001a0 	.word	0x200001a0
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200001a8 	.word	0x200001a8

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f002 fa00 	bl	8002b48 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001a7 	.word	0x200001a7
 80007ac:	200001a8 	.word	0x200001a8

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001a5 	.word	0x200001a5

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fc72 	bl	80031c4 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fc66 	bl	80031c4 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001a0 	.word	0x200001a0
 8000930:	2000018a 	.word	0x2000018a
 8000934:	2000018c 	.word	0x2000018c
 8000938:	200001a4 	.word	0x200001a4

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fc3a 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f002 f8f9 	bl	8002b48 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fc2f 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f002 f8ee 	bl	8002b48 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fc24 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f002 f8e3 	bl	8002b48 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001a0 	.word	0x200001a0
 800098c:	2000018e 	.word	0x2000018e

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f002 fc01 	bl	80031c4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200001a0 	.word	0x200001a0
 80009e0:	20000190 	.word	0x20000190

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f002 fbd7 	bl	80031c4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001a0 	.word	0x200001a0
 8000a34:	20000190 	.word	0x20000190

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f002 f81e 	bl	8002a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f834 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 f9e0 	bl	8000e08 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a48:	f000 f898 	bl	8000b7c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a4c:	f000 f8fc 	bl	8000c48 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000a50:	f000 f9b8 	bl	8000dc4 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8000a54:	f000 f8d2 	bl	8000bfc <MX_RTC_Init>
  MX_TIM4_Init();
 8000a58:	f000 f934 	bl	8000cc4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000a5c:	f000 f982 	bl	8000d64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000a60:	4810      	ldr	r0, [pc, #64]	; (8000aa4 <main+0x6c>)
 8000a62:	f004 fd51 	bl	8005508 <HAL_TIM_Base_Start_IT>
  programInit();
 8000a66:	f000 fe15 	bl	8001694 <programInit>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <main+0x70>)
 8000a72:	f002 fba7 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7c:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <main+0x70>)
 8000a7e:	f002 fba1 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a88:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <main+0x70>)
 8000a8a:	f002 fb9b 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <main+0x70>)
 8000a96:	f002 fb95 	bl	80031c4 <HAL_GPIO_WritePin>
  uart_rx_enable_it();
 8000a9a:	f001 fca7 	bl	80023ec <uart_rx_enable_it>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  programLoop();
 8000a9e:	f001 f931 	bl	8001d04 <programLoop>
  {
 8000aa2:	e7fc      	b.n	8000a9e <main+0x66>
 8000aa4:	20000284 	.word	0x20000284
 8000aa8:	48000c00 	.word	0x48000c00

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b09e      	sub	sp, #120	; 0x78
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ab6:	2228      	movs	r2, #40	; 0x28
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f006 fbf4 	bl	80072a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	223c      	movs	r2, #60	; 0x3c
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f006 fbe6 	bl	80072a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000adc:	230b      	movs	r3, #11
 8000ade:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ae0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ae4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aea:	2301      	movs	r3, #1
 8000aec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aee:	2310      	movs	r3, #16
 8000af0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000af2:	2301      	movs	r3, #1
 8000af4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	2302      	movs	r3, #2
 8000af8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000afe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b04:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fd9c 	bl	8003648 <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b16:	f000 fa87 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b34:	2101      	movs	r1, #1
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 fdc4 	bl	80046c4 <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b42:	f000 fa71 	bl	8001028 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <SystemClock_Config+0xcc>)
 8000b48:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b56:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5e:	463b      	mov	r3, r7
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 ffe5 	bl	8004b30 <HAL_RCCEx_PeriphCLKConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b6c:	f000 fa5c 	bl	8001028 <Error_Handler>
  }
}
 8000b70:	bf00      	nop
 8000b72:	3778      	adds	r7, #120	; 0x78
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	00030021 	.word	0x00030021

08000b7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000b82:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <MX_I2C1_Init+0x78>)
 8000b84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <MX_I2C1_Init+0x7c>)
 8000b8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb6:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000bb8:	f002 fb4e 	bl	8003258 <HAL_I2C_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bc2:	f000 fa31 	bl	8001028 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000bca:	f002 fbd4 	bl	8003376 <HAL_I2CEx_ConfigAnalogFilter>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bd4:	f000 fa28 	bl	8001028 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_I2C1_Init+0x74>)
 8000bdc:	f002 fc16 	bl	800340c <HAL_I2CEx_ConfigDigitalFilter>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000be6:	f000 fa1f 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200001ac 	.word	0x200001ac
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	2000090e 	.word	0x2000090e

08000bfc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_RTC_Init+0x44>)
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <MX_RTC_Init+0x48>)
 8000c04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_RTC_Init+0x44>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_RTC_Init+0x44>)
 8000c0e:	2227      	movs	r2, #39	; 0x27
 8000c10:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_RTC_Init+0x44>)
 8000c14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c18:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_RTC_Init+0x44>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_RTC_Init+0x44>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_RTC_Init+0x44>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_RTC_Init+0x44>)
 8000c2e:	f004 f92f 	bl	8004e90 <HAL_RTC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8000c38:	f000 f9f6 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000200 	.word	0x20000200
 8000c44:	40002800 	.word	0x40002800

08000c48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <MX_SPI1_Init+0x78>)
 8000c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000c54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000c62:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000c7e:	2208      	movs	r2, #8
 8000c80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000c96:	2207      	movs	r2, #7
 8000c98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_SPI1_Init+0x74>)
 8000ca8:	f004 fb2c 	bl	8005304 <HAL_SPI_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cb2:	f000 f9b9 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000220 	.word	0x20000220
 8000cc0:	40013000 	.word	0x40013000

08000cc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_TIM4_Init+0x98>)
 8000ce4:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <MX_TIM4_Init+0x9c>)
 8000ce6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_TIM4_Init+0x98>)
 8000cea:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000cee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_TIM4_Init+0x98>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_TIM4_Init+0x98>)
 8000cf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cfc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_TIM4_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_TIM4_Init+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d0a:	4814      	ldr	r0, [pc, #80]	; (8000d5c <MX_TIM4_Init+0x98>)
 8000d0c:	f004 fba5 	bl	800545a <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000d16:	f000 f987 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4619      	mov	r1, r3
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <MX_TIM4_Init+0x98>)
 8000d28:	f004 fd77 	bl	800581a <HAL_TIM_ConfigClockSource>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000d32:	f000 f979 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <MX_TIM4_Init+0x98>)
 8000d44:	f004 ff84 	bl	8005c50 <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000d4e:	f000 f96b 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000284 	.word	0x20000284
 8000d60:	40000800 	.word	0x40000800

08000d64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d6a:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <MX_USART1_UART_Init+0x5c>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d70:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_USART1_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_USART1_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_USART1_UART_Init+0x58>)
 8000da8:	f004 fff0 	bl	8005d8c <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000db2:	f000 f939 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200002d0 	.word	0x200002d0
 8000dc0:	40013800 	.word	0x40013800

08000dc4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <MX_USB_PCD_Init+0x40>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000dd0:	2208      	movs	r2, #8
 8000dd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_USB_PCD_Init+0x3c>)
 8000dee:	f002 fb59 	bl	80034a4 <HAL_PCD_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000df8:	f000 f916 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000358 	.word	0x20000358
 8000e04:	40005c00 	.word	0x40005c00

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	; 0x30
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1e:	4b7d      	ldr	r3, [pc, #500]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	4a7c      	ldr	r2, [pc, #496]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e28:	6153      	str	r3, [r2, #20]
 8000e2a:	4b7a      	ldr	r3, [pc, #488]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b77      	ldr	r3, [pc, #476]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a76      	ldr	r2, [pc, #472]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b74      	ldr	r3, [pc, #464]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4e:	4b71      	ldr	r3, [pc, #452]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a70      	ldr	r2, [pc, #448]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b6e      	ldr	r3, [pc, #440]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b6b      	ldr	r3, [pc, #428]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a6a      	ldr	r2, [pc, #424]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b68      	ldr	r3, [pc, #416]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b65      	ldr	r3, [pc, #404]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a64      	ldr	r2, [pc, #400]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b62      	ldr	r3, [pc, #392]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e96:	4b5f      	ldr	r3, [pc, #380]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	4a5e      	ldr	r2, [pc, #376]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000e9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ea0:	6153      	str	r3, [r2, #20]
 8000ea2:	4b5c      	ldr	r3, [pc, #368]	; (8001014 <MX_GPIO_Init+0x20c>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000eb4:	4858      	ldr	r0, [pc, #352]	; (8001018 <MX_GPIO_Init+0x210>)
 8000eb6:	f002 f985 	bl	80031c4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2110      	movs	r1, #16
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f002 f97f 	bl	80031c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2150      	movs	r1, #80	; 0x50
 8000eca:	4854      	ldr	r0, [pc, #336]	; (800101c <MX_GPIO_Init+0x214>)
 8000ecc:	f002 f97a 	bl	80031c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f242 0105 	movw	r1, #8197	; 0x2005
 8000ed6:	4852      	ldr	r0, [pc, #328]	; (8001020 <MX_GPIO_Init+0x218>)
 8000ed8:	f002 f974 	bl	80031c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 413e 	mov.w	r1, #48640	; 0xbe00
 8000ee2:	4850      	ldr	r0, [pc, #320]	; (8001024 <MX_GPIO_Init+0x21c>)
 8000ee4:	f002 f96e 	bl	80031c4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000ee8:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000eec:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4845      	ldr	r0, [pc, #276]	; (8001018 <MX_GPIO_Init+0x210>)
 8000f02:	f001 ffcd 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8000f06:	2320      	movs	r3, #32
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f0a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	483f      	ldr	r0, [pc, #252]	; (8001018 <MX_GPIO_Init+0x210>)
 8000f1c:	f001 ffc0 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f001 ffb3 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f001 ffa4 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000f58:	2350      	movs	r3, #80	; 0x50
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	482b      	ldr	r0, [pc, #172]	; (800101c <MX_GPIO_Init+0x214>)
 8000f70:	f001 ff96 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 8000f74:	f242 0305 	movw	r3, #8197	; 0x2005
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4824      	ldr	r0, [pc, #144]	; (8001020 <MX_GPIO_Init+0x218>)
 8000f8e:	f001 ff87 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000f92:	f44f 433e 	mov.w	r3, #48640	; 0xbe00
 8000f96:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	481e      	ldr	r0, [pc, #120]	; (8001024 <MX_GPIO_Init+0x21c>)
 8000fac:	f001 ff78 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <MX_GPIO_Init+0x21c>)
 8000fc6:	f001 ff6b 	bl	8002ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2006      	movs	r0, #6
 8000fd0:	f001 feb9 	bl	8002d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fd4:	2006      	movs	r0, #6
 8000fd6:	f001 fed2 	bl	8002d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2007      	movs	r0, #7
 8000fe0:	f001 feb1 	bl	8002d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fe4:	2007      	movs	r0, #7
 8000fe6:	f001 feca 	bl	8002d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	2008      	movs	r0, #8
 8000ff0:	f001 fea9 	bl	8002d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000ff4:	2008      	movs	r0, #8
 8000ff6:	f001 fec2 	bl	8002d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2009      	movs	r0, #9
 8001000:	f001 fea1 	bl	8002d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001004:	2009      	movs	r0, #9
 8001006:	f001 feba 	bl	8002d7e <HAL_NVIC_EnableIRQ>

}
 800100a:	bf00      	nop
 800100c:	3730      	adds	r7, #48	; 0x30
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	48001000 	.word	0x48001000
 800101c:	48000800 	.word	0x48000800
 8001020:	48000400 	.word	0x48000400
 8001024:	48000c00 	.word	0x48000c00

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <set_start_time>:

extern RTC_HandleTypeDef hrtc;

RTC_TimeTypeDef mytime ;

void set_start_time(int hour, int minute, int second){
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]

	RTC_TimeTypeDef start_t ;

	start_t.Hours = 20;
 8001040:	2314      	movs	r3, #20
 8001042:	753b      	strb	r3, [r7, #20]
	start_t.Minutes = 20;
 8001044:	2314      	movs	r3, #20
 8001046:	757b      	strb	r3, [r7, #21]
	start_t.Seconds = 20;
 8001048:	2314      	movs	r3, #20
 800104a:	75bb      	strb	r3, [r7, #22]

    HAL_RTC_SetTime(&hrtc, &start_t, RTC_FORMAT_BIN);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <set_start_time+0x30>)
 8001056:	f003 ff9e 	bl	8004f96 <HAL_RTC_SetTime>
}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	; 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000200 	.word	0x20000200

08001068 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
  if (last_gpio_exti + 70 > HAL_GetTick()) // Simple button debouncing
 8001072:	4bbd      	ldr	r3, [pc, #756]	; (8001368 <HAL_GPIO_EXTI_Callback+0x300>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f103 0446 	add.w	r4, r3, #70	; 0x46
 800107a:	f001 fd59 	bl	8002b30 <HAL_GetTick>
 800107e:	4603      	mov	r3, r0
 8001080:	429c      	cmp	r4, r3
 8001082:	f200 81b1 	bhi.w	80013e8 <HAL_GPIO_EXTI_Callback+0x380>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 8001086:	f001 fd53 	bl	8002b30 <HAL_GetTick>
 800108a:	4603      	mov	r3, r0
 800108c:	4ab6      	ldr	r2, [pc, #728]	; (8001368 <HAL_GPIO_EXTI_Callback+0x300>)
 800108e:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 8001090:	23ff      	movs	r3, #255	; 0xff
 8001092:	73fb      	strb	r3, [r7, #15]
  int8_t column_number = -1;
 8001094:	23ff      	movs	r3, #255	; 0xff
 8001096:	73bb      	strb	r3, [r7, #14]
  {
    // blue_button_pressed = 1;
    // return;
  }

  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8001098:	2300      	movs	r3, #0
 800109a:	737b      	strb	r3, [r7, #13]
 800109c:	e00b      	b.n	80010b6 <HAL_GPIO_EXTI_Callback+0x4e>
  {
    if (GPIO_Pin == Row_pins[row])
 800109e:	7b7b      	ldrb	r3, [r7, #13]
 80010a0:	4ab2      	ldr	r2, [pc, #712]	; (800136c <HAL_GPIO_EXTI_Callback+0x304>)
 80010a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a6:	88fa      	ldrh	r2, [r7, #6]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d101      	bne.n	80010b0 <HAL_GPIO_EXTI_Callback+0x48>
    {
      row_number = row;
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	73fb      	strb	r3, [r7, #15]
  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 80010b0:	7b7b      	ldrb	r3, [r7, #13]
 80010b2:	3301      	adds	r3, #1
 80010b4:	737b      	strb	r3, [r7, #13]
 80010b6:	7b7b      	ldrb	r3, [r7, #13]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d9f0      	bls.n	800109e <HAL_GPIO_EXTI_Callback+0x36>
    }
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 80010bc:	4bac      	ldr	r3, [pc, #688]	; (8001370 <HAL_GPIO_EXTI_Callback+0x308>)
 80010be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c2:	2200      	movs	r2, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 f87d 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 80010ca:	4ba9      	ldr	r3, [pc, #676]	; (8001370 <HAL_GPIO_EXTI_Callback+0x308>)
 80010cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d0:	2200      	movs	r2, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 f876 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 80010d8:	4ba5      	ldr	r3, [pc, #660]	; (8001370 <HAL_GPIO_EXTI_Callback+0x308>)
 80010da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010de:	2200      	movs	r2, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 f86f 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 80010e6:	4ba2      	ldr	r3, [pc, #648]	; (8001370 <HAL_GPIO_EXTI_Callback+0x308>)
 80010e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ec:	2200      	movs	r2, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 f868 	bl	80031c4 <HAL_GPIO_WritePin>

  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 80010f4:	2300      	movs	r3, #0
 80010f6:	733b      	strb	r3, [r7, #12]
 80010f8:	e02d      	b.n	8001156 <HAL_GPIO_EXTI_Callback+0xee>
  {
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 80010fa:	7b3b      	ldrb	r3, [r7, #12]
 80010fc:	4a9d      	ldr	r2, [pc, #628]	; (8001374 <HAL_GPIO_EXTI_Callback+0x30c>)
 80010fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001102:	7b3b      	ldrb	r3, [r7, #12]
 8001104:	4a9c      	ldr	r2, [pc, #624]	; (8001378 <HAL_GPIO_EXTI_Callback+0x310>)
 8001106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800110a:	2201      	movs	r2, #1
 800110c:	4619      	mov	r1, r3
 800110e:	f002 f859 	bl	80031c4 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number]))
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4a99      	ldr	r2, [pc, #612]	; (800137c <HAL_GPIO_EXTI_Callback+0x314>)
 8001118:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800111c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001120:	4992      	ldr	r1, [pc, #584]	; (800136c <HAL_GPIO_EXTI_Callback+0x304>)
 8001122:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001126:	4619      	mov	r1, r3
 8001128:	4610      	mov	r0, r2
 800112a:	f002 f833 	bl	8003194 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_GPIO_EXTI_Callback+0xd0>
    {
      column_number = col;
 8001134:	7b3b      	ldrb	r3, [r7, #12]
 8001136:	73bb      	strb	r3, [r7, #14]
    }
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8001138:	7b3b      	ldrb	r3, [r7, #12]
 800113a:	4a8e      	ldr	r2, [pc, #568]	; (8001374 <HAL_GPIO_EXTI_Callback+0x30c>)
 800113c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	4a8d      	ldr	r2, [pc, #564]	; (8001378 <HAL_GPIO_EXTI_Callback+0x310>)
 8001144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	f002 f83a 	bl	80031c4 <HAL_GPIO_WritePin>
  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8001150:	7b3b      	ldrb	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	733b      	strb	r3, [r7, #12]
 8001156:	7b3b      	ldrb	r3, [r7, #12]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d9ce      	bls.n	80010fa <HAL_GPIO_EXTI_Callback+0x92>
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 800115c:	4b84      	ldr	r3, [pc, #528]	; (8001370 <HAL_GPIO_EXTI_Callback+0x308>)
 800115e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001162:	2201      	movs	r2, #1
 8001164:	4618      	mov	r0, r3
 8001166:	f002 f82d 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 800116a:	4b81      	ldr	r3, [pc, #516]	; (8001370 <HAL_GPIO_EXTI_Callback+0x308>)
 800116c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001170:	2201      	movs	r2, #1
 8001172:	4618      	mov	r0, r3
 8001174:	f002 f826 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8001178:	4b7d      	ldr	r3, [pc, #500]	; (8001370 <HAL_GPIO_EXTI_Callback+0x308>)
 800117a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117e:	2201      	movs	r2, #1
 8001180:	4618      	mov	r0, r3
 8001182:	f002 f81f 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8001186:	4b7a      	ldr	r3, [pc, #488]	; (8001370 <HAL_GPIO_EXTI_Callback+0x308>)
 8001188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118c:	2201      	movs	r2, #1
 800118e:	4618      	mov	r0, r3
 8001190:	f002 f818 	bl	80031c4 <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 8001194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	f000 8126 	beq.w	80013ec <HAL_GPIO_EXTI_Callback+0x384>
 80011a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	f000 8120 	beq.w	80013ec <HAL_GPIO_EXTI_Callback+0x384>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	7bbb      	ldrb	r3, [r7, #14]
 80011b4:	4413      	add	r3, r2
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	3301      	adds	r3, #1
 80011ba:	72fb      	strb	r3, [r7, #11]
  switch (button_number){
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	3b01      	subs	r3, #1
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	f200 8115 	bhi.w	80013f0 <HAL_GPIO_EXTI_Callback+0x388>
 80011c6:	a201      	add	r2, pc, #4	; (adr r2, 80011cc <HAL_GPIO_EXTI_Callback+0x164>)
 80011c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011cc:	0800120d 	.word	0x0800120d
 80011d0:	08001221 	.word	0x08001221
 80011d4:	08001235 	.word	0x08001235
 80011d8:	08001243 	.word	0x08001243
 80011dc:	08001251 	.word	0x08001251
 80011e0:	08001265 	.word	0x08001265
 80011e4:	08001273 	.word	0x08001273
 80011e8:	08001281 	.word	0x08001281
 80011ec:	0800128f 	.word	0x0800128f
 80011f0:	080012bb 	.word	0x080012bb
 80011f4:	080012e7 	.word	0x080012e7
 80011f8:	080012f5 	.word	0x080012f5
 80011fc:	08001309 	.word	0x08001309
 8001200:	08001339 	.word	0x08001339
 8001204:	080013c1 	.word	0x080013c1
 8001208:	080013d5 	.word	0x080013d5
  case 1: //move	//1
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001212:	485b      	ldr	r0, [pc, #364]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 8001214:	f001 ffd6 	bl	80031c4 <HAL_GPIO_WritePin>
	move(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f000 fe4d 	bl	8001eb8 <move>

    break;
 800121e:	e0f0      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
  case 2: //boom 	//2
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001226:	4856      	ldr	r0, [pc, #344]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 8001228:	f001 ffcc 	bl	80031c4 <HAL_GPIO_WritePin>
	boom(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f000 fddb 	bl	8001de8 <boom>
    break;
 8001232:	e0e6      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
  case 3:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123a:	4851      	ldr	r0, [pc, #324]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 800123c:	f001 ffc2 	bl	80031c4 <HAL_GPIO_WritePin>
    break;
 8001240:	e0df      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
  case 4:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001248:	484d      	ldr	r0, [pc, #308]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 800124a:	f001 ffbb 	bl	80031c4 <HAL_GPIO_WritePin>
    break;
 800124e:	e0d8      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
  case 5: //dir	 	//4
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001256:	484a      	ldr	r0, [pc, #296]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 8001258:	f001 ffb4 	bl	80031c4 <HAL_GPIO_WritePin>
	 change_dir(1);
 800125c:	2001      	movs	r0, #1
 800125e:	f000 fd79 	bl	8001d54 <change_dir>
    break;
 8001262:	e0ce      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
  case 6:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126a:	4845      	ldr	r0, [pc, #276]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 800126c:	f001 ffaa 	bl	80031c4 <HAL_GPIO_WritePin>
    break;
 8001270:	e0c7      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
  case 7:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001278:	4841      	ldr	r0, [pc, #260]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 800127a:	f001 ffa3 	bl	80031c4 <HAL_GPIO_WritePin>
    break;
 800127e:	e0c0      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
  case 8:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001286:	483e      	ldr	r0, [pc, #248]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 8001288:	f001 ff9c 	bl	80031c4 <HAL_GPIO_WritePin>
    break;
 800128c:	e0b9      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
  case 9: // menu curser up
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001294:	483a      	ldr	r0, [pc, #232]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 8001296:	f001 ff95 	bl	80031c4 <HAL_GPIO_WritePin>
		if(pageflag==1){
 800129a:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <HAL_GPIO_EXTI_Callback+0x31c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	f040 80a8 	bne.w	80013f4 <HAL_GPIO_EXTI_Callback+0x38c>
			if (menu_curser_r > 1){
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <HAL_GPIO_EXTI_Callback+0x320>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	f340 80a3 	ble.w	80013f4 <HAL_GPIO_EXTI_Callback+0x38c>
				menu_curser_r -= 1;
 80012ae:	4b36      	ldr	r3, [pc, #216]	; (8001388 <HAL_GPIO_EXTI_Callback+0x320>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	4a34      	ldr	r2, [pc, #208]	; (8001388 <HAL_GPIO_EXTI_Callback+0x320>)
 80012b6:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 80012b8:	e09c      	b.n	80013f4 <HAL_GPIO_EXTI_Callback+0x38c>
  case 10: // menu cursor down
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c0:	482f      	ldr	r0, [pc, #188]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 80012c2:	f001 ff7f 	bl	80031c4 <HAL_GPIO_WritePin>
		if(pageflag==1){
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <HAL_GPIO_EXTI_Callback+0x31c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	f040 8094 	bne.w	80013f8 <HAL_GPIO_EXTI_Callback+0x390>
			if (menu_curser_r  < 3){
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_GPIO_EXTI_Callback+0x320>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	f300 808f 	bgt.w	80013f8 <HAL_GPIO_EXTI_Callback+0x390>
				menu_curser_r +=1;
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <HAL_GPIO_EXTI_Callback+0x320>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a29      	ldr	r2, [pc, #164]	; (8001388 <HAL_GPIO_EXTI_Callback+0x320>)
 80012e2:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 80012e4:	e088      	b.n	80013f8 <HAL_GPIO_EXTI_Callback+0x390>
  case 11:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ec:	4824      	ldr	r0, [pc, #144]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 80012ee:	f001 ff69 	bl	80031c4 <HAL_GPIO_WritePin>
    break;
 80012f2:	e086      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
  case 12: //Dir	//C
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fa:	4821      	ldr	r0, [pc, #132]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 80012fc:	f001 ff62 	bl	80031c4 <HAL_GPIO_WritePin>
		change_dir(2);
 8001300:	2002      	movs	r0, #2
 8001302:	f000 fd27 	bl	8001d54 <change_dir>
    break;
 8001306:	e07c      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
  case 13: //goto menu
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8001308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130c:	481c      	ldr	r0, [pc, #112]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 800130e:	f001 ff71 	bl	80031f4 <HAL_GPIO_TogglePin>
		if(pageflag == 0 || pageflag == 3 || pageflag == 4){
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <HAL_GPIO_EXTI_Callback+0x2c2>
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_GPIO_EXTI_Callback+0x31c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d003      	beq.n	800132a <HAL_GPIO_EXTI_Callback+0x2c2>
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b04      	cmp	r3, #4
 8001328:	d168      	bne.n	80013fc <HAL_GPIO_EXTI_Callback+0x394>
			change_page = 1;
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_GPIO_EXTI_Callback+0x324>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]
			pageflag = 1;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
		}
    break;
 8001336:	e061      	b.n	80013fc <HAL_GPIO_EXTI_Callback+0x394>
  case 14: // select in menu
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133e:	4810      	ldr	r0, [pc, #64]	; (8001380 <HAL_GPIO_EXTI_Callback+0x318>)
 8001340:	f001 ff40 	bl	80031c4 <HAL_GPIO_WritePin>
		if(pageflag == 1){
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d159      	bne.n	8001400 <HAL_GPIO_EXTI_Callback+0x398>
			if(menu_curser_r == 1){
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_GPIO_EXTI_Callback+0x320>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d11f      	bne.n	8001394 <HAL_GPIO_EXTI_Callback+0x32c>
				pageflag = 2;
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001356:	2202      	movs	r2, #2
 8001358:	601a      	str	r2, [r3, #0]
				change_page = 1;
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_GPIO_EXTI_Callback+0x324>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]
				game_started = 1;
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_GPIO_EXTI_Callback+0x328>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]
				change_page = 1;

			}
		}

    break;
 8001366:	e04b      	b.n	8001400 <HAL_GPIO_EXTI_Callback+0x398>
 8001368:	2000064c 	.word	0x2000064c
 800136c:	08008784 	.word	0x08008784
 8001370:	48000c00 	.word	0x48000c00
 8001374:	0800878c 	.word	0x0800878c
 8001378:	0800879c 	.word	0x0800879c
 800137c:	08008774 	.word	0x08008774
 8001380:	48001000 	.word	0x48001000
 8001384:	20000644 	.word	0x20000644
 8001388:	20000004 	.word	0x20000004
 800138c:	20000650 	.word	0x20000650
 8001390:	20000648 	.word	0x20000648
			else if(menu_curser_r == 2){
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d106      	bne.n	80013aa <HAL_GPIO_EXTI_Callback+0x342>
				pageflag = 3;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_GPIO_EXTI_Callback+0x3a4>)
 800139e:	2203      	movs	r2, #3
 80013a0:	601a      	str	r2, [r3, #0]
				change_page = 1;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_GPIO_EXTI_Callback+0x3a8>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
    break;
 80013a8:	e02a      	b.n	8001400 <HAL_GPIO_EXTI_Callback+0x398>
			else if(menu_curser_r == 3){
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_GPIO_EXTI_Callback+0x3a0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d126      	bne.n	8001400 <HAL_GPIO_EXTI_Callback+0x398>
				pageflag = 4;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_GPIO_EXTI_Callback+0x3a4>)
 80013b4:	2204      	movs	r2, #4
 80013b6:	601a      	str	r2, [r3, #0]
				change_page = 1;
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_GPIO_EXTI_Callback+0x3a8>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	601a      	str	r2, [r3, #0]
    break;
 80013be:	e01f      	b.n	8001400 <HAL_GPIO_EXTI_Callback+0x398>
  case 15: //Boom	//#
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c6:	4813      	ldr	r0, [pc, #76]	; (8001414 <HAL_GPIO_EXTI_Callback+0x3ac>)
 80013c8:	f001 fefc 	bl	80031c4 <HAL_GPIO_WritePin>
		boom(2);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f000 fd0b 	bl	8001de8 <boom>
    break;
 80013d2:	e016      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
  case 16: //move	//D
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013da:	480e      	ldr	r0, [pc, #56]	; (8001414 <HAL_GPIO_EXTI_Callback+0x3ac>)
 80013dc:	f001 fef2 	bl	80031c4 <HAL_GPIO_WritePin>
		move(2);
 80013e0:	2002      	movs	r0, #2
 80013e2:	f000 fd69 	bl	8001eb8 <move>
    break;
 80013e6:	e00c      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
    return;
 80013e8:	bf00      	nop
 80013ea:	e00a      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
    return; // Reject invalid scan
 80013ec:	bf00      	nop
 80013ee:	e008      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>

  default:
    break;
 80013f0:	bf00      	nop
 80013f2:	e006      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
    break;
 80013f4:	bf00      	nop
 80013f6:	e004      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
    break;
 80013f8:	bf00      	nop
 80013fa:	e002      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
    break;
 80013fc:	bf00      	nop
 80013fe:	e000      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x39a>
    break;
 8001400:	bf00      	nop
  }
}
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	20000004 	.word	0x20000004
 800140c:	20000644 	.word	0x20000644
 8001410:	20000650 	.word	0x20000650
 8001414:	48001000 	.word	0x48001000

08001418 <seven_segment_display_decimal>:
	.digits={0, 0, 0, 0},
	.number = 0};



void seven_segment_display_decimal(uint32_t n) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    if (n < 10) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b09      	cmp	r3, #9
 8001424:	d832      	bhi.n	800148c <seven_segment_display_decimal+0x74>
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin, (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <seven_segment_display_decimal+0x7c>)
 8001428:	6a18      	ldr	r0, [r3, #32]
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <seven_segment_display_decimal+0x7c>)
 800142c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	f001 fec3 	bl	80031c4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin, (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <seven_segment_display_decimal+0x7c>)
 8001440:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <seven_segment_display_decimal+0x7c>)
 8001444:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	461a      	mov	r2, r3
 8001454:	f001 feb6 	bl	80031c4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin, (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <seven_segment_display_decimal+0x7c>)
 800145a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <seven_segment_display_decimal+0x7c>)
 800145e:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	f001 fea9 	bl	80031c4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin, (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <seven_segment_display_decimal+0x7c>)
 8001474:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <seven_segment_display_decimal+0x7c>)
 8001478:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	08db      	lsrs	r3, r3, #3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	f001 fe9c 	bl	80031c4 <HAL_GPIO_WritePin>
    }
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200000a8 	.word	0x200000a8

08001498 <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i)
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	e00f      	b.n	80014c4 <seven_segment_deactivate_digits+0x2c>
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin, GPIO_PIN_SET);
 80014a4:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <seven_segment_deactivate_digits+0x3c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80014ac:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <seven_segment_deactivate_digits+0x3c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4413      	add	r3, r2
 80014b4:	889b      	ldrh	r3, [r3, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	4619      	mov	r1, r3
 80014ba:	f001 fe83 	bl	80031c4 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; ++i)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3301      	adds	r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	ddec      	ble.n	80014a4 <seven_segment_deactivate_digits+0xc>
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200000a8 	.word	0x200000a8

080014d8 <seven_segment_activate_digit>:

int last_time_on = 0;
void seven_segment_activate_digit(uint32_t d) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    if (d < 4) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d80c      	bhi.n	8001500 <seven_segment_activate_digit+0x28>
    	HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
 80014e6:	4a08      	ldr	r2, [pc, #32]	; (8001508 <seven_segment_activate_digit+0x30>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80014ee:	4a06      	ldr	r2, [pc, #24]	; (8001508 <seven_segment_activate_digit+0x30>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4413      	add	r3, r2
 80014f6:	889b      	ldrh	r3, [r3, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	4619      	mov	r1, r3
 80014fc:	f001 fe62 	bl	80031c4 <HAL_GPIO_WritePin>
//		}
//		else if (d != state){
//			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
//		}
    }
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200000a8 	.word	0x200000a8

0800150c <seven_segment_set_num>:

void seven_segment_set_num(int num[4]) {
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i <= 3; ++i) {
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	e00d      	b.n	8001536 <seven_segment_set_num+0x2a>
		seven_segment.digits[i] = num[i];
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <seven_segment_set_num+0x40>)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3310      	adds	r3, #16
 800152c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i <= 3; ++i) {
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3301      	adds	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d9ee      	bls.n	800151a <seven_segment_set_num+0xe>
	}
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	200000a8 	.word	0x200000a8

08001550 <seven_segment_refresh>:

void seven_segment_refresh(void) {
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
    static uint32_t state_tmp = 0;
    static uint32_t last_time_tmp = 0;
    if (HAL_GetTick() - last_time_tmp > 5) {
 8001554:	f001 faec 	bl	8002b30 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <seven_segment_refresh+0x50>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b05      	cmp	r3, #5
 8001562:	d91b      	bls.n	800159c <seven_segment_refresh+0x4c>
        seven_segment_deactivate_digits();
 8001564:	f7ff ff98 	bl	8001498 <seven_segment_deactivate_digits>
        seven_segment_activate_digit(state_tmp);
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <seven_segment_refresh+0x54>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ffb3 	bl	80014d8 <seven_segment_activate_digit>
        seven_segment_display_decimal(seven_segment.digits[state_tmp]);
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <seven_segment_refresh+0x54>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <seven_segment_refresh+0x58>)
 8001578:	3310      	adds	r3, #16
 800157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff4a 	bl	8001418 <seven_segment_display_decimal>
        state_tmp = (state_tmp + 1) % 4;
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <seven_segment_refresh+0x54>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <seven_segment_refresh+0x54>)
 8001590:	6013      	str	r3, [r2, #0]
        last_time_tmp = HAL_GetTick();
 8001592:	f001 facd 	bl	8002b30 <HAL_GetTick>
 8001596:	4603      	mov	r3, r0
 8001598:	4a01      	ldr	r2, [pc, #4]	; (80015a0 <seven_segment_refresh+0x50>)
 800159a:	6013      	str	r3, [r2, #0]
    }
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200006f8 	.word	0x200006f8
 80015a4:	200006fc 	.word	0x200006fc
 80015a8:	200000a8 	.word	0x200000a8

080015ac <setNumber>:


void setNumber(int number){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	int a = 0, b = 0, c = 0, d = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
	if (number <= 9999 && number >= 0){
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80015ca:	4293      	cmp	r3, r2
 80015cc:	dc5b      	bgt.n	8001686 <setNumber+0xda>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db58      	blt.n	8001686 <setNumber+0xda>
		a = number % 10;
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <setNumber+0xe4>)
 80015d8:	fb83 1302 	smull	r1, r3, r3, r2
 80015dc:	1099      	asrs	r1, r3, #2
 80015de:	17d3      	asrs	r3, r2, #31
 80015e0:	1ac9      	subs	r1, r1, r3
 80015e2:	460b      	mov	r3, r1
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
		number /= 10;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <setNumber+0xe4>)
 80015f2:	fb82 1203 	smull	r1, r2, r2, r3
 80015f6:	1092      	asrs	r2, r2, #2
 80015f8:	17db      	asrs	r3, r3, #31
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	607b      	str	r3, [r7, #4]
		b = number % 10;
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	4b23      	ldr	r3, [pc, #140]	; (8001690 <setNumber+0xe4>)
 8001602:	fb83 1302 	smull	r1, r3, r3, r2
 8001606:	1099      	asrs	r1, r3, #2
 8001608:	17d3      	asrs	r3, r2, #31
 800160a:	1ac9      	subs	r1, r1, r3
 800160c:	460b      	mov	r3, r1
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	623b      	str	r3, [r7, #32]
		number /= 10;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <setNumber+0xe4>)
 800161c:	fb82 1203 	smull	r1, r2, r2, r3
 8001620:	1092      	asrs	r2, r2, #2
 8001622:	17db      	asrs	r3, r3, #31
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	607b      	str	r3, [r7, #4]
		c = number % 10;
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <setNumber+0xe4>)
 800162c:	fb83 1302 	smull	r1, r3, r3, r2
 8001630:	1099      	asrs	r1, r3, #2
 8001632:	17d3      	asrs	r3, r2, #31
 8001634:	1ac9      	subs	r1, r1, r3
 8001636:	460b      	mov	r3, r1
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	61fb      	str	r3, [r7, #28]
		number /= 10;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <setNumber+0xe4>)
 8001646:	fb82 1203 	smull	r1, r2, r2, r3
 800164a:	1092      	asrs	r2, r2, #2
 800164c:	17db      	asrs	r3, r3, #31
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	607b      	str	r3, [r7, #4]
		d = number % 10;
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <setNumber+0xe4>)
 8001656:	fb83 1302 	smull	r1, r3, r3, r2
 800165a:	1099      	asrs	r1, r3, #2
 800165c:	17d3      	asrs	r3, r2, #31
 800165e:	1ac9      	subs	r1, r1, r3
 8001660:	460b      	mov	r3, r1
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	61bb      	str	r3, [r7, #24]
//		int numbers2[4]={d,c,b,a};
		int numbers2[4]={a,b,c,d};
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	617b      	str	r3, [r7, #20]
		seven_segment_set_num(numbers2);
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff43 	bl	800150c <seven_segment_set_num>
	}

}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	66666667 	.word	0x66666667

08001694 <programInit>:



void programInit() {
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af04      	add	r7, sp, #16
	LiquidCrystal(GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_7);
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	9303      	str	r3, [sp, #12]
 800169e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	2308      	movs	r3, #8
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2304      	movs	r3, #4
 80016b0:	2202      	movs	r2, #2
 80016b2:	2101      	movs	r1, #1
 80016b4:	4820      	ldr	r0, [pc, #128]	; (8001738 <programInit+0xa4>)
 80016b6:	f7fe fde3 	bl	8000280 <LiquidCrystal>
	begin(20, 4);
 80016ba:	2104      	movs	r1, #4
 80016bc:	2014      	movs	r0, #20
 80016be:	f7fe fe77 	bl	80003b0 <begin>
//	int n = sprintf(data, "Salammmmm");
//	setCursor(5, 1);
	//	print(data);


	set_start_time(20, 20, 20);
 80016c2:	2214      	movs	r2, #20
 80016c4:	2114      	movs	r1, #20
 80016c6:	2014      	movs	r0, #20
 80016c8:	f7ff fcb4 	bl	8001034 <set_start_time>
	createChar(num_tank_right, tank_right);
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <programInit+0xa8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	491b      	ldr	r1, [pc, #108]	; (8001740 <programInit+0xac>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff f8ad 	bl	8000832 <createChar>
	createChar(num_tank_up, tank_up);
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <programInit+0xb0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	491a      	ldr	r1, [pc, #104]	; (8001748 <programInit+0xb4>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff f8a7 	bl	8000832 <createChar>
	createChar(num_tank_down, tank_down);
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <programInit+0xb8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4919      	ldr	r1, [pc, #100]	; (8001750 <programInit+0xbc>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff f8a1 	bl	8000832 <createChar>
	createChar(num_tank_left, tank_left);
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <programInit+0xc0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4918      	ldr	r1, [pc, #96]	; (8001758 <programInit+0xc4>)
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f89b 	bl	8000832 <createChar>
	createChar(num_extra_bullet, extra_bullet);
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <programInit+0xc8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4917      	ldr	r1, [pc, #92]	; (8001760 <programInit+0xcc>)
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f895 	bl	8000832 <createChar>
	createChar(num_chance, chance);
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <programInit+0xd0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4916      	ldr	r1, [pc, #88]	; (8001768 <programInit+0xd4>)
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f88f 	bl	8000832 <createChar>
	createChar(num_health, health);
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <programInit+0xd8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4915      	ldr	r1, [pc, #84]	; (8001770 <programInit+0xdc>)
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f889 	bl	8000832 <createChar>
	createChar(num_arrow, arrow);
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <programInit+0xe0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4914      	ldr	r1, [pc, #80]	; (8001778 <programInit+0xe4>)
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff f883 	bl	8000832 <createChar>
//	starter();
	pageflag=0;
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <programInit+0xe8>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]

//	init_board();


}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	48000800 	.word	0x48000800
 800173c:	20000088 	.word	0x20000088
 8001740:	20000028 	.word	0x20000028
 8001744:	20000084 	.word	0x20000084
 8001748:	20000018 	.word	0x20000018
 800174c:	2000008c 	.word	0x2000008c
 8001750:	20000038 	.word	0x20000038
 8001754:	20000080 	.word	0x20000080
 8001758:	20000020 	.word	0x20000020
 800175c:	20000090 	.word	0x20000090
 8001760:	20000008 	.word	0x20000008
 8001764:	20000094 	.word	0x20000094
 8001768:	20000010 	.word	0x20000010
 800176c:	20000098 	.word	0x20000098
 8001770:	20000030 	.word	0x20000030
 8001774:	2000009c 	.word	0x2000009c
 8001778:	20000040 	.word	0x20000040
 800177c:	20000644 	.word	0x20000644

08001780 <starter>:

void starter(){
 8001780:	b580      	push	{r7, lr}
 8001782:	b09a      	sub	sp, #104	; 0x68
 8001784:	af00      	add	r7, sp, #0
	setCursor(0, 2);
 8001786:	2102      	movs	r1, #2
 8001788:	2000      	movs	r0, #0
 800178a:	f7fe ffdf 	bl	800074c <setCursor>
	write(num_tank_right, tank_right);
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <starter+0xa8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4926      	ldr	r1, [pc, #152]	; (800182c <starter+0xac>)
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff f883 	bl	80008a0 <write>

	setCursor(1, 1);
 800179a:	2101      	movs	r1, #1
 800179c:	2001      	movs	r0, #1
 800179e:	f7fe ffd5 	bl	800074c <setCursor>
	print("#");
 80017a2:	4823      	ldr	r0, [pc, #140]	; (8001830 <starter+0xb0>)
 80017a4:	f7ff f81a 	bl	80007dc <print>

	setCursor(1, 2);
 80017a8:	2102      	movs	r1, #2
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7fe ffce 	bl	800074c <setCursor>
	print("#");
 80017b0:	481f      	ldr	r0, [pc, #124]	; (8001830 <starter+0xb0>)
 80017b2:	f7ff f813 	bl	80007dc <print>

	char data[100];
	int n = sprintf(data, "TANK BATTLE");
 80017b6:	463b      	mov	r3, r7
 80017b8:	491e      	ldr	r1, [pc, #120]	; (8001834 <starter+0xb4>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f005 fdba 	bl	8007334 <siprintf>
 80017c0:	6678      	str	r0, [r7, #100]	; 0x64
	setCursor(4, 1);
 80017c2:	2101      	movs	r1, #1
 80017c4:	2004      	movs	r0, #4
 80017c6:	f7fe ffc1 	bl	800074c <setCursor>
	print(data);
 80017ca:	463b      	mov	r3, r7
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff f805 	bl	80007dc <print>
	setCursor(4, 2);
 80017d2:	2102      	movs	r1, #2
 80017d4:	2004      	movs	r0, #4
 80017d6:	f7fe ffb9 	bl	800074c <setCursor>
	n = sprintf(data, "===========");
 80017da:	463b      	mov	r3, r7
 80017dc:	4916      	ldr	r1, [pc, #88]	; (8001838 <starter+0xb8>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f005 fda8 	bl	8007334 <siprintf>
 80017e4:	6678      	str	r0, [r7, #100]	; 0x64
	print(data);
 80017e6:	463b      	mov	r3, r7
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fff7 	bl	80007dc <print>

	setCursor(18, 1);
 80017ee:	2101      	movs	r1, #1
 80017f0:	2012      	movs	r0, #18
 80017f2:	f7fe ffab 	bl	800074c <setCursor>
	print("#");
 80017f6:	480e      	ldr	r0, [pc, #56]	; (8001830 <starter+0xb0>)
 80017f8:	f7fe fff0 	bl	80007dc <print>
	setCursor(18, 2);
 80017fc:	2102      	movs	r1, #2
 80017fe:	2012      	movs	r0, #18
 8001800:	f7fe ffa4 	bl	800074c <setCursor>
	print("#");
 8001804:	480a      	ldr	r0, [pc, #40]	; (8001830 <starter+0xb0>)
 8001806:	f7fe ffe9 	bl	80007dc <print>

	setCursor(19, 1);
 800180a:	2101      	movs	r1, #1
 800180c:	2013      	movs	r0, #19
 800180e:	f7fe ff9d 	bl	800074c <setCursor>
	write(num_tank_left, tank_left);
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <starter+0xbc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	490a      	ldr	r1, [pc, #40]	; (8001840 <starter+0xc0>)
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff f841 	bl	80008a0 <write>

}
 800181e:	bf00      	nop
 8001820:	3768      	adds	r7, #104	; 0x68
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000088 	.word	0x20000088
 800182c:	20000028 	.word	0x20000028
 8001830:	080086f8 	.word	0x080086f8
 8001834:	080086fc 	.word	0x080086fc
 8001838:	08008708 	.word	0x08008708
 800183c:	20000080 	.word	0x20000080
 8001840:	20000020 	.word	0x20000020

08001844 <init_board>:

void init_board(){
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
	//i == soton, j ==> radif

    for (int i = 0; i < 20; i++) {
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	e017      	b.n	8001880 <init_board+0x3c>
        for (int j = 0; j < 4; j++) {
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	e00e      	b.n	8001874 <init_board+0x30>
        	setCursor(i, j);
 8001856:	6a39      	ldr	r1, [r7, #32]
 8001858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800185a:	f7fe ff77 	bl	800074c <setCursor>
        	lcd[i][j] = 0;
 800185e:	4a6f      	ldr	r2, [pc, #444]	; (8001a1c <init_board+0x1d8>)
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	441a      	add	r2, r3
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	4413      	add	r3, r2
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	3301      	adds	r3, #1
 8001872:	623b      	str	r3, [r7, #32]
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	2b03      	cmp	r3, #3
 8001878:	dded      	ble.n	8001856 <init_board+0x12>
    for (int i = 0; i < 20; i++) {
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	3301      	adds	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	2b13      	cmp	r3, #19
 8001884:	dde4      	ble.n	8001850 <init_board+0xc>
//    		print(" ");

        }
    }

	lcd[1][1] = num_wall;
 8001886:	4b66      	ldr	r3, [pc, #408]	; (8001a20 <init_board+0x1dc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <init_board+0x1d8>)
 800188e:	715a      	strb	r2, [r3, #5]
	lcd[1][2] = num_wall;
 8001890:	4b63      	ldr	r3, [pc, #396]	; (8001a20 <init_board+0x1dc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <init_board+0x1d8>)
 8001898:	719a      	strb	r2, [r3, #6]
	lcd[18][1] = num_wall;
 800189a:	4b61      	ldr	r3, [pc, #388]	; (8001a20 <init_board+0x1dc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b5e      	ldr	r3, [pc, #376]	; (8001a1c <init_board+0x1d8>)
 80018a2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	lcd[18][2] = num_wall;
 80018a6:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <init_board+0x1dc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <init_board+0x1d8>)
 80018ae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	lcd[0][1] = num_tank_right;
 80018b2:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <init_board+0x1e0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <init_board+0x1d8>)
 80018ba:	705a      	strb	r2, [r3, #1]
	lcd[19][2] = num_tank_left;
 80018bc:	4b5a      	ldr	r3, [pc, #360]	; (8001a28 <init_board+0x1e4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b56      	ldr	r3, [pc, #344]	; (8001a1c <init_board+0x1d8>)
 80018c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	int element_counter = 2;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 80018cc:	e030      	b.n	8001930 <init_board+0xec>
		int col = rand() % 24;
 80018ce:	f005 fcf3 	bl	80072b8 <rand>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b55      	ldr	r3, [pc, #340]	; (8001a2c <init_board+0x1e8>)
 80018d6:	fb83 1302 	smull	r1, r3, r3, r2
 80018da:	1099      	asrs	r1, r3, #2
 80018dc:	17d3      	asrs	r3, r2, #31
 80018de:	1ac9      	subs	r1, r1, r3
 80018e0:	460b      	mov	r3, r1
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	440b      	add	r3, r1
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	60bb      	str	r3, [r7, #8]
		int row = rand() % 4;
 80018ec:	f005 fce4 	bl	80072b8 <rand>
 80018f0:	4603      	mov	r3, r0
 80018f2:	425a      	negs	r2, r3
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	f002 0203 	and.w	r2, r2, #3
 80018fc:	bf58      	it	pl
 80018fe:	4253      	negpl	r3, r2
 8001900:	607b      	str	r3, [r7, #4]
		if(lcd[col][row] == 0){
 8001902:	4a46      	ldr	r2, [pc, #280]	; (8001a1c <init_board+0x1d8>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	441a      	add	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10d      	bne.n	8001930 <init_board+0xec>
			lcd[col][row] = num_extra_bullet;
 8001914:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <init_board+0x1ec>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b2d9      	uxtb	r1, r3
 800191a:	4a40      	ldr	r2, [pc, #256]	; (8001a1c <init_board+0x1d8>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	441a      	add	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	460a      	mov	r2, r1
 8001928:	701a      	strb	r2, [r3, #0]
			element_counter--;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b01      	subs	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	dccb      	bgt.n	80018ce <init_board+0x8a>
		}
	}

	element_counter = 2;
 8001936:	2302      	movs	r3, #2
 8001938:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 800193a:	e030      	b.n	800199e <init_board+0x15a>
		int col = rand() % 24;
 800193c:	f005 fcbc 	bl	80072b8 <rand>
 8001940:	4602      	mov	r2, r0
 8001942:	4b3a      	ldr	r3, [pc, #232]	; (8001a2c <init_board+0x1e8>)
 8001944:	fb83 1302 	smull	r1, r3, r3, r2
 8001948:	1099      	asrs	r1, r3, #2
 800194a:	17d3      	asrs	r3, r2, #31
 800194c:	1ac9      	subs	r1, r1, r3
 800194e:	460b      	mov	r3, r1
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	440b      	add	r3, r1
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	613b      	str	r3, [r7, #16]
		int row = rand() % 4;
 800195a:	f005 fcad 	bl	80072b8 <rand>
 800195e:	4603      	mov	r3, r0
 8001960:	425a      	negs	r2, r3
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	f002 0203 	and.w	r2, r2, #3
 800196a:	bf58      	it	pl
 800196c:	4253      	negpl	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
		if(lcd[col][row] == 0){
 8001970:	4a2a      	ldr	r2, [pc, #168]	; (8001a1c <init_board+0x1d8>)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	441a      	add	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10d      	bne.n	800199e <init_board+0x15a>
			lcd[col][row] = num_health;
 8001982:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <init_board+0x1f0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b2d9      	uxtb	r1, r3
 8001988:	4a24      	ldr	r2, [pc, #144]	; (8001a1c <init_board+0x1d8>)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	441a      	add	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	460a      	mov	r2, r1
 8001996:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3b01      	subs	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	dccb      	bgt.n	800193c <init_board+0xf8>
		}
	}

	element_counter = 2;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 80019a8:	e030      	b.n	8001a0c <init_board+0x1c8>
		int col = rand() % 24;
 80019aa:	f005 fc85 	bl	80072b8 <rand>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <init_board+0x1e8>)
 80019b2:	fb83 1302 	smull	r1, r3, r3, r2
 80019b6:	1099      	asrs	r1, r3, #2
 80019b8:	17d3      	asrs	r3, r2, #31
 80019ba:	1ac9      	subs	r1, r1, r3
 80019bc:	460b      	mov	r3, r1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	440b      	add	r3, r1
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	61bb      	str	r3, [r7, #24]
		int row = rand() % 4;
 80019c8:	f005 fc76 	bl	80072b8 <rand>
 80019cc:	4603      	mov	r3, r0
 80019ce:	425a      	negs	r2, r3
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	bf58      	it	pl
 80019da:	4253      	negpl	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]
		if(lcd[col][row] == 0){
 80019de:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <init_board+0x1d8>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	441a      	add	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4413      	add	r3, r2
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10d      	bne.n	8001a0c <init_board+0x1c8>
			lcd[col][row] = num_obstacle;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <init_board+0x1f4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b2d9      	uxtb	r1, r3
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <init_board+0x1d8>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	441a      	add	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	4413      	add	r3, r2
 8001a02:	460a      	mov	r2, r1
 8001a04:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	dccb      	bgt.n	80019aa <init_board+0x166>
		}
	}

}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	; 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000668 	.word	0x20000668
 8001a20:	200000a0 	.word	0x200000a0
 8001a24:	20000088 	.word	0x20000088
 8001a28:	20000080 	.word	0x20000080
 8001a2c:	2aaaaaab 	.word	0x2aaaaaab
 8001a30:	20000090 	.word	0x20000090
 8001a34:	20000098 	.word	0x20000098
 8001a38:	200000a4 	.word	0x200000a4

08001a3c <update_lcd>:
// D11 -> C3
// D12 -> C9
// D13 -> C8
// D14 -> C7

void update_lcd(){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
	if (game_started==1){
 8001a42:	4b55      	ldr	r3, [pc, #340]	; (8001b98 <update_lcd+0x15c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d109      	bne.n	8001a5e <update_lcd+0x22>
		clear();
 8001a4a:	f7fe fe75 	bl	8000738 <clear>
		init_board();
 8001a4e:	f7ff fef9 	bl	8001844 <init_board>
		change_page = 0;
 8001a52:	4b52      	ldr	r3, [pc, #328]	; (8001b9c <update_lcd+0x160>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
		game_started = 0;
 8001a58:	4b4f      	ldr	r3, [pc, #316]	; (8001b98 <update_lcd+0x15c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
	}

	if(pageflag==0){
 8001a5e:	4b50      	ldr	r3, [pc, #320]	; (8001ba0 <update_lcd+0x164>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <update_lcd+0x2e>
		starter();
 8001a66:	f7ff fe8b 	bl	8001780 <starter>
	}


	if(pageflag==2){
 8001a6a:	4b4d      	ldr	r3, [pc, #308]	; (8001ba0 <update_lcd+0x164>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d166      	bne.n	8001b40 <update_lcd+0x104>
		for (int i = 0; i < 20; i++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	e05f      	b.n	8001b38 <update_lcd+0xfc>
			for (int j = 0; j < 4; j++) {
 8001a78:	2300      	movs	r3, #0
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	e056      	b.n	8001b2c <update_lcd+0xf0>
				setCursor(i, j);
 8001a7e:	6839      	ldr	r1, [r7, #0]
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7fe fe63 	bl	800074c <setCursor>
				if(lcd[i][j] != 9 && lcd[i][j] != 10 && lcd[i][j] != 0)
 8001a86:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <update_lcd+0x168>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	441a      	add	r2, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	4413      	add	r3, r2
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b09      	cmp	r3, #9
 8001a96:	d01c      	beq.n	8001ad2 <update_lcd+0x96>
 8001a98:	4a42      	ldr	r2, [pc, #264]	; (8001ba4 <update_lcd+0x168>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	441a      	add	r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b0a      	cmp	r3, #10
 8001aa8:	d013      	beq.n	8001ad2 <update_lcd+0x96>
 8001aaa:	4a3e      	ldr	r2, [pc, #248]	; (8001ba4 <update_lcd+0x168>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	441a      	add	r2, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00a      	beq.n	8001ad2 <update_lcd+0x96>
					write(lcd[i][j]);
 8001abc:	4a39      	ldr	r2, [pc, #228]	; (8001ba4 <update_lcd+0x168>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	441a      	add	r2, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fee8 	bl	80008a0 <write>
 8001ad0:	e029      	b.n	8001b26 <update_lcd+0xea>
				else if (lcd[i][j] == 9)
 8001ad2:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <update_lcd+0x168>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	441a      	add	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b09      	cmp	r3, #9
 8001ae2:	d103      	bne.n	8001aec <update_lcd+0xb0>
					print("#");
 8001ae4:	4830      	ldr	r0, [pc, #192]	; (8001ba8 <update_lcd+0x16c>)
 8001ae6:	f7fe fe79 	bl	80007dc <print>
 8001aea:	e01c      	b.n	8001b26 <update_lcd+0xea>
				else if (lcd[i][j] == 10)
 8001aec:	4a2d      	ldr	r2, [pc, #180]	; (8001ba4 <update_lcd+0x168>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	441a      	add	r2, r3
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b0a      	cmp	r3, #10
 8001afc:	d103      	bne.n	8001b06 <update_lcd+0xca>
					print("I");
 8001afe:	482b      	ldr	r0, [pc, #172]	; (8001bac <update_lcd+0x170>)
 8001b00:	f7fe fe6c 	bl	80007dc <print>
 8001b04:	e00f      	b.n	8001b26 <update_lcd+0xea>
				else if (lcd[i][j] == 0)
 8001b06:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <update_lcd+0x168>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	441a      	add	r2, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	4413      	add	r3, r2
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d103      	bne.n	8001b20 <update_lcd+0xe4>
					print(" ");
 8001b18:	4825      	ldr	r0, [pc, #148]	; (8001bb0 <update_lcd+0x174>)
 8001b1a:	f7fe fe5f 	bl	80007dc <print>
 8001b1e:	e002      	b.n	8001b26 <update_lcd+0xea>
				else
					print("U");
 8001b20:	4824      	ldr	r0, [pc, #144]	; (8001bb4 <update_lcd+0x178>)
 8001b22:	f7fe fe5b 	bl	80007dc <print>
			for (int j = 0; j < 4; j++) {
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	dda5      	ble.n	8001a7e <update_lcd+0x42>
		for (int i = 0; i < 20; i++) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3301      	adds	r3, #1
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b13      	cmp	r3, #19
 8001b3c:	dd9c      	ble.n	8001a78 <update_lcd+0x3c>
	}
	else if (pageflag==4){
		about_page();
	}

}
 8001b3e:	e027      	b.n	8001b90 <update_lcd+0x154>
	else if (change_page==1){
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <update_lcd+0x160>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <update_lcd+0x118>
		clear();
 8001b48:	f7fe fdf6 	bl	8000738 <clear>
		change_page = 0;
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <update_lcd+0x160>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	e01d      	b.n	8001b90 <update_lcd+0x154>
	else if (change_page==1){
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <update_lcd+0x160>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <update_lcd+0x12c>
		clear();
 8001b5c:	f7fe fdec 	bl	8000738 <clear>
		change_page = 0;
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <update_lcd+0x160>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
}
 8001b66:	e013      	b.n	8001b90 <update_lcd+0x154>
	else if (pageflag==1){
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <update_lcd+0x164>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d102      	bne.n	8001b76 <update_lcd+0x13a>
		menu();
 8001b70:	f000 f874 	bl	8001c5c <menu>
}
 8001b74:	e00c      	b.n	8001b90 <update_lcd+0x154>
	else if (pageflag==3){
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <update_lcd+0x164>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d102      	bne.n	8001b84 <update_lcd+0x148>
		setting_page();
 8001b7e:	f000 f85f 	bl	8001c40 <setting_page>
}
 8001b82:	e005      	b.n	8001b90 <update_lcd+0x154>
	else if (pageflag==4){
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <update_lcd+0x164>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d101      	bne.n	8001b90 <update_lcd+0x154>
		about_page();
 8001b8c:	f000 f814 	bl	8001bb8 <about_page>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000648 	.word	0x20000648
 8001b9c:	20000650 	.word	0x20000650
 8001ba0:	20000644 	.word	0x20000644
 8001ba4:	20000668 	.word	0x20000668
 8001ba8:	080086f8 	.word	0x080086f8
 8001bac:	08008714 	.word	0x08008714
 8001bb0:	08008718 	.word	0x08008718
 8001bb4:	0800871c 	.word	0x0800871c

08001bb8 <about_page>:
void about_page(){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b09c      	sub	sp, #112	; 0x70
 8001bbc:	af02      	add	r7, sp, #8
	setCursor(6, 1);
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	2006      	movs	r0, #6
 8001bc2:	f7fe fdc3 	bl	800074c <setCursor>
	print("POURIA");
 8001bc6:	4818      	ldr	r0, [pc, #96]	; (8001c28 <about_page+0x70>)
 8001bc8:	f7fe fe08 	bl	80007dc <print>
	setCursor(8, 2);
 8001bcc:	2102      	movs	r1, #2
 8001bce:	2008      	movs	r0, #8
 8001bd0:	f7fe fdbc 	bl	800074c <setCursor>
	print("ALI");
 8001bd4:	4815      	ldr	r0, [pc, #84]	; (8001c2c <about_page+0x74>)
 8001bd6:	f7fe fe01 	bl	80007dc <print>
	char timeStr[100];
	setCursor(5, 3);
 8001bda:	2103      	movs	r1, #3
 8001bdc:	2005      	movs	r0, #5
 8001bde:	f7fe fdb5 	bl	800074c <setCursor>
	print("          ");
 8001be2:	4813      	ldr	r0, [pc, #76]	; (8001c30 <about_page+0x78>)
 8001be4:	f7fe fdfa 	bl	80007dc <print>
	HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001be8:	2200      	movs	r2, #0
 8001bea:	4912      	ldr	r1, [pc, #72]	; (8001c34 <about_page+0x7c>)
 8001bec:	4812      	ldr	r0, [pc, #72]	; (8001c38 <about_page+0x80>)
 8001bee:	f003 fa6c 	bl	80050ca <HAL_RTC_GetTime>
	sprintf(timeStr, "%02d:%02d:%02d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <about_page+0x7c>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <about_page+0x7c>)
 8001bfa:	785b      	ldrb	r3, [r3, #1]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <about_page+0x7c>)
 8001c00:	789b      	ldrb	r3, [r3, #2]
 8001c02:	1d38      	adds	r0, r7, #4
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	460b      	mov	r3, r1
 8001c08:	490c      	ldr	r1, [pc, #48]	; (8001c3c <about_page+0x84>)
 8001c0a:	f005 fb93 	bl	8007334 <siprintf>
	setCursor(5, 3);
 8001c0e:	2103      	movs	r1, #3
 8001c10:	2005      	movs	r0, #5
 8001c12:	f7fe fd9b 	bl	800074c <setCursor>
	print(timeStr);
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fddf 	bl	80007dc <print>

}
 8001c1e:	bf00      	nop
 8001c20:	3768      	adds	r7, #104	; 0x68
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	08008720 	.word	0x08008720
 8001c2c:	08008728 	.word	0x08008728
 8001c30:	0800872c 	.word	0x0800872c
 8001c34:	20000654 	.word	0x20000654
 8001c38:	20000200 	.word	0x20000200
 8001c3c:	08008738 	.word	0x08008738

08001c40 <setting_page>:

void setting_page(){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
	setCursor(6, 1);
 8001c44:	2101      	movs	r1, #1
 8001c46:	2006      	movs	r0, #6
 8001c48:	f7fe fd80 	bl	800074c <setCursor>
	print("KHALI");
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <setting_page+0x18>)
 8001c4e:	f7fe fdc5 	bl	80007dc <print>

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	08008748 	.word	0x08008748

08001c5c <menu>:
//			pageflag = 1;
//
//		}
//}

void menu(){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0

	setCursor(1, 0);
 8001c60:	2100      	movs	r1, #0
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7fe fd72 	bl	800074c <setCursor>
	print("MENU:");
 8001c68:	481f      	ldr	r0, [pc, #124]	; (8001ce8 <menu+0x8c>)
 8001c6a:	f7fe fdb7 	bl	80007dc <print>
	setCursor(1, 1);
 8001c6e:	2101      	movs	r1, #1
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7fe fd6b 	bl	800074c <setCursor>
	print("PLAY");
 8001c76:	481d      	ldr	r0, [pc, #116]	; (8001cec <menu+0x90>)
 8001c78:	f7fe fdb0 	bl	80007dc <print>
	setCursor(1, 2);
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f7fe fd64 	bl	800074c <setCursor>
	print("SETTING");
 8001c84:	481a      	ldr	r0, [pc, #104]	; (8001cf0 <menu+0x94>)
 8001c86:	f7fe fda9 	bl	80007dc <print>
	setCursor(1, 3);
 8001c8a:	2103      	movs	r1, #3
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7fe fd5d 	bl	800074c <setCursor>
	print("ABOUT");
 8001c92:	4818      	ldr	r0, [pc, #96]	; (8001cf4 <menu+0x98>)
 8001c94:	f7fe fda2 	bl	80007dc <print>
	setCursor(0, 0);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f7fe fd56 	bl	800074c <setCursor>
	print(" ");
 8001ca0:	4815      	ldr	r0, [pc, #84]	; (8001cf8 <menu+0x9c>)
 8001ca2:	f7fe fd9b 	bl	80007dc <print>
	setCursor(0, 1);
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7fe fd4f 	bl	800074c <setCursor>
	print(" ");
 8001cae:	4812      	ldr	r0, [pc, #72]	; (8001cf8 <menu+0x9c>)
 8001cb0:	f7fe fd94 	bl	80007dc <print>
	setCursor(0, 2);
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f7fe fd48 	bl	800074c <setCursor>
	print(" ");
 8001cbc:	480e      	ldr	r0, [pc, #56]	; (8001cf8 <menu+0x9c>)
 8001cbe:	f7fe fd8d 	bl	80007dc <print>
	setCursor(0, 3);
 8001cc2:	2103      	movs	r1, #3
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f7fe fd41 	bl	800074c <setCursor>
	print(" ");
 8001cca:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <menu+0x9c>)
 8001ccc:	f7fe fd86 	bl	80007dc <print>
	setCursor(0, menu_curser_r);
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <menu+0xa0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7fe fd38 	bl	800074c <setCursor>
	print(">");
 8001cdc:	4808      	ldr	r0, [pc, #32]	; (8001d00 <menu+0xa4>)
 8001cde:	f7fe fd7d 	bl	80007dc <print>

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	08008750 	.word	0x08008750
 8001cec:	08008758 	.word	0x08008758
 8001cf0:	08008760 	.word	0x08008760
 8001cf4:	08008768 	.word	0x08008768
 8001cf8:	08008718 	.word	0x08008718
 8001cfc:	20000004 	.word	0x20000004
 8001d00:	08008770 	.word	0x08008770

08001d04 <programLoop>:

void programLoop() {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
    seven_segment_refresh();
 8001d08:	f7ff fc22 	bl	8001550 <seven_segment_refresh>

    update_lcd();
 8001d0c:	f7ff fe96 	bl	8001a3c <update_lcd>
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10e      	bne.n	8001d44 <HAL_TIM_PeriodElapsedCallback+0x30>
//		update_lcd();
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8001d26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2a:	4809      	ldr	r0, [pc, #36]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d2c:	f001 fa62 	bl	80031f4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8001d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d34:	4806      	ldr	r0, [pc, #24]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d36:	f001 fa5d 	bl	80031f4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8001d3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d3e:	4804      	ldr	r0, [pc, #16]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d40:	f001 fa58 	bl	80031f4 <HAL_GPIO_TogglePin>
	}

}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40000800 	.word	0x40000800
 8001d50:	48001000 	.word	0x48001000

08001d54 <change_dir>:


void change_dir(int player){
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	if (player == 1){
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d119      	bne.n	8001d96 <change_dir+0x42>
		int new_dir = player1.direction + 1;
 8001d62:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <change_dir+0x88>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	3301      	adds	r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
		if(new_dir == 5){
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d101      	bne.n	8001d74 <change_dir+0x20>
			new_dir = 1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
		}
		player1.direction = new_dir;
 8001d74:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <change_dir+0x88>)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	60d3      	str	r3, [r2, #12]
		lcd[player1.position_x][player1.position_y] = player1.direction;
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <change_dir+0x88>)
 8001d7c:	68d9      	ldr	r1, [r3, #12]
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <change_dir+0x88>)
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <change_dir+0x88>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	b2c8      	uxtb	r0, r1
 8001d88:	4915      	ldr	r1, [pc, #84]	; (8001de0 <change_dir+0x8c>)
 8001d8a:	0092      	lsls	r2, r2, #2
 8001d8c:	440a      	add	r2, r1
 8001d8e:	4413      	add	r3, r2
 8001d90:	4602      	mov	r2, r0
 8001d92:	701a      	strb	r2, [r3, #0]
		}
		player2.direction = new_dir;
		lcd[player2.position_x][player2.position_y] = player2.direction;

	}
}
 8001d94:	e01b      	b.n	8001dce <change_dir+0x7a>
	}else if (player == 2){
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d118      	bne.n	8001dce <change_dir+0x7a>
		int new_dir = player2.direction + 1;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <change_dir+0x90>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	3301      	adds	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
		if(new_dir == 5){
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b05      	cmp	r3, #5
 8001da8:	d101      	bne.n	8001dae <change_dir+0x5a>
			new_dir = 1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
		player2.direction = new_dir;
 8001dae:	4a0d      	ldr	r2, [pc, #52]	; (8001de4 <change_dir+0x90>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
		lcd[player2.position_x][player2.position_y] = player2.direction;
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <change_dir+0x90>)
 8001db6:	68d9      	ldr	r1, [r3, #12]
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <change_dir+0x90>)
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <change_dir+0x90>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	b2c8      	uxtb	r0, r1
 8001dc2:	4907      	ldr	r1, [pc, #28]	; (8001de0 <change_dir+0x8c>)
 8001dc4:	0092      	lsls	r2, r2, #2
 8001dc6:	440a      	add	r2, r1
 8001dc8:	4413      	add	r3, r2
 8001dca:	4602      	mov	r2, r0
 8001dcc:	701a      	strb	r2, [r3, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000048 	.word	0x20000048
 8001de0:	20000668 	.word	0x20000668
 8001de4:	20000064 	.word	0x20000064

08001de8 <boom>:

void boom(int player){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0); //Temp
 8001df0:	2200      	movs	r2, #0
 8001df2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001df6:	4803      	ldr	r0, [pc, #12]	; (8001e04 <boom+0x1c>)
 8001df8:	f001 f9e4 	bl	80031c4 <HAL_GPIO_WritePin>
	//TODO

}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	48001000 	.word	0x48001000

08001e08 <collect>:

int sev_result = 0;
void collect(uint8_t pos, int player){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
	if (pos == num_extra_bullet){
 8001e14:	79fa      	ldrb	r2, [r7, #7]
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <collect+0x9c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d10e      	bne.n	8001e3c <collect+0x34>
		if (player == 1)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <collect+0x28>
			player1.arrow+=1;
 8001e24:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <collect+0xa0>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <collect+0xa0>)
 8001e2c:	6193      	str	r3, [r2, #24]
 8001e2e:	e018      	b.n	8001e62 <collect+0x5a>
		else
			player2.arrow+=1;
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <collect+0xa4>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	3301      	adds	r3, #1
 8001e36:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <collect+0xa4>)
 8001e38:	6193      	str	r3, [r2, #24]
 8001e3a:	e012      	b.n	8001e62 <collect+0x5a>
	}else if (pos == num_health){
 8001e3c:	79fa      	ldrb	r2, [r7, #7]
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <collect+0xa8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d10d      	bne.n	8001e62 <collect+0x5a>
		if (player == 1)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d105      	bne.n	8001e58 <collect+0x50>
			player1.health+=1;
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <collect+0xa0>)
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	3301      	adds	r3, #1
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <collect+0xa0>)
 8001e54:	6153      	str	r3, [r2, #20]
 8001e56:	e004      	b.n	8001e62 <collect+0x5a>
		else
			player2.health+=1;
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <collect+0xa4>)
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	4a13      	ldr	r2, [pc, #76]	; (8001eac <collect+0xa4>)
 8001e60:	6153      	str	r3, [r2, #20]
//	uint8_t c = player1.arrow;
//	uint8_t d = player1.health;
//	int results[4] = {d,c,b,a};
//	seven_segment_set_num(results);

	sev_result = player2.arrow * 1000 + player2.health * 100 + player1.arrow * 10 + player1.health;
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <collect+0xa4>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e6a:	fb03 f202 	mul.w	r2, r3, r2
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <collect+0xa4>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2164      	movs	r1, #100	; 0x64
 8001e74:	fb01 f303 	mul.w	r3, r1, r3
 8001e78:	18d1      	adds	r1, r2, r3
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <collect+0xa0>)
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	18ca      	adds	r2, r1, r3
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <collect+0xa0>)
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <collect+0xac>)
 8001e90:	6013      	str	r3, [r2, #0]
	setNumber(sev_result);
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <collect+0xac>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fb88 	bl	80015ac <setNumber>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000090 	.word	0x20000090
 8001ea8:	20000048 	.word	0x20000048
 8001eac:	20000064 	.word	0x20000064
 8001eb0:	20000098 	.word	0x20000098
 8001eb4:	200006b8 	.word	0x200006b8

08001eb8 <move>:

void move(int player){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b094      	sub	sp, #80	; 0x50
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	int dir;

	if (player == 1){
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	f040 8148 	bne.w	8002158 <move+0x2a0>
		dir = player1.direction;
 8001ec8:	4b9f      	ldr	r3, [pc, #636]	; (8002148 <move+0x290>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 8001ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d14b      	bne.n	8001f6c <move+0xb4>
			int curr_col = player1.position_x;
 8001ed4:	4b9c      	ldr	r3, [pc, #624]	; (8002148 <move+0x290>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	613b      	str	r3, [r7, #16]
			int curr_row = player1.position_y;
 8001eda:	4b9b      	ldr	r3, [pc, #620]	; (8002148 <move+0x290>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	60fb      	str	r3, [r7, #12]
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f340 8275 	ble.w	80023d2 <move+0x51a>
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	4a97      	ldr	r2, [pc, #604]	; (800214c <move+0x294>)
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	441a      	add	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b95      	ldr	r3, [pc, #596]	; (8002150 <move+0x298>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	f000 8267 	beq.w	80023d2 <move+0x51a>
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	4a90      	ldr	r2, [pc, #576]	; (800214c <move+0x294>)
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	441a      	add	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4413      	add	r3, r2
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b8f      	ldr	r3, [pc, #572]	; (8002154 <move+0x29c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	f000 8259 	beq.w	80023d2 <move+0x51a>
				collect(lcd[curr_col - 1][curr_row], 1); //TODO add prizes
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	4a89      	ldr	r2, [pc, #548]	; (800214c <move+0x294>)
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	441a      	add	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff68 	bl	8001e08 <collect>
				lcd[curr_col][curr_row] = 0;
 8001f38:	4a84      	ldr	r2, [pc, #528]	; (800214c <move+0x294>)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	441a      	add	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player1.direction;
 8001f48:	4b7f      	ldr	r3, [pc, #508]	; (8002148 <move+0x290>)
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b2d1      	uxtb	r1, r2
 8001f52:	4a7e      	ldr	r2, [pc, #504]	; (800214c <move+0x294>)
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	441a      	add	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x - 1;
 8001f60:	4b79      	ldr	r3, [pc, #484]	; (8002148 <move+0x290>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	4a78      	ldr	r2, [pc, #480]	; (8002148 <move+0x290>)
 8001f68:	6053      	str	r3, [r2, #4]
				lcd[curr_col][curr_row + 1] = player2.direction;
				player2.position_y = player2.position_y + 1;
			}
		}
	}
}
 8001f6a:	e232      	b.n	80023d2 <move+0x51a>
		}else if (dir == 2){
 8001f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d14b      	bne.n	800200a <move+0x152>
			int curr_col = player1.position_x;
 8001f72:	4b75      	ldr	r3, [pc, #468]	; (8002148 <move+0x290>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
			int curr_row = player1.position_y;
 8001f78:	4b73      	ldr	r3, [pc, #460]	; (8002148 <move+0x290>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	617b      	str	r3, [r7, #20]
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f340 8226 	ble.w	80023d2 <move+0x51a>
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	4970      	ldr	r1, [pc, #448]	; (800214c <move+0x294>)
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	440a      	add	r2, r1
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b6d      	ldr	r3, [pc, #436]	; (8002150 <move+0x298>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f000 8218 	beq.w	80023d2 <move+0x51a>
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	4969      	ldr	r1, [pc, #420]	; (800214c <move+0x294>)
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	440a      	add	r2, r1
 8001fae:	4413      	add	r3, r2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b67      	ldr	r3, [pc, #412]	; (8002154 <move+0x29c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f000 820a 	beq.w	80023d2 <move+0x51a>
				collect(lcd[curr_col][curr_row - 1], 1); //TODO add prizes
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	4962      	ldr	r1, [pc, #392]	; (800214c <move+0x294>)
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	0092      	lsls	r2, r2, #2
 8001fc8:	440a      	add	r2, r1
 8001fca:	4413      	add	r3, r2
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2101      	movs	r1, #1
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff19 	bl	8001e08 <collect>
				lcd[curr_col][curr_row] = 0;
 8001fd6:	4a5d      	ldr	r2, [pc, #372]	; (800214c <move+0x294>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	441a      	add	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player1.direction;
 8001fe6:	4b58      	ldr	r3, [pc, #352]	; (8002148 <move+0x290>)
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b2d0      	uxtb	r0, r2
 8001ff0:	4956      	ldr	r1, [pc, #344]	; (800214c <move+0x294>)
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	440a      	add	r2, r1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y - 1;
 8001ffe:	4b52      	ldr	r3, [pc, #328]	; (8002148 <move+0x290>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	3b01      	subs	r3, #1
 8002004:	4a50      	ldr	r2, [pc, #320]	; (8002148 <move+0x290>)
 8002006:	6093      	str	r3, [r2, #8]
}
 8002008:	e1e3      	b.n	80023d2 <move+0x51a>
		}else if (dir == 3){
 800200a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800200c:	2b03      	cmp	r3, #3
 800200e:	d14b      	bne.n	80020a8 <move+0x1f0>
			int curr_col = player1.position_x;
 8002010:	4b4d      	ldr	r3, [pc, #308]	; (8002148 <move+0x290>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	623b      	str	r3, [r7, #32]
			int curr_row = player1.position_y;
 8002016:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <move+0x290>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	61fb      	str	r3, [r7, #28]
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	2b12      	cmp	r3, #18
 8002020:	f300 81d7 	bgt.w	80023d2 <move+0x51a>
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	3301      	adds	r3, #1
 8002028:	4a48      	ldr	r2, [pc, #288]	; (800214c <move+0x294>)
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	441a      	add	r2, r3
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b46      	ldr	r3, [pc, #280]	; (8002150 <move+0x298>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	f000 81c9 	beq.w	80023d2 <move+0x51a>
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	3301      	adds	r3, #1
 8002044:	4a41      	ldr	r2, [pc, #260]	; (800214c <move+0x294>)
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	441a      	add	r2, r3
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	4413      	add	r3, r2
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b40      	ldr	r3, [pc, #256]	; (8002154 <move+0x29c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	f000 81bb 	beq.w	80023d2 <move+0x51a>
				collect(lcd[curr_col + 1][curr_row], 1); //TODO add prizes
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	3301      	adds	r3, #1
 8002060:	4a3a      	ldr	r2, [pc, #232]	; (800214c <move+0x294>)
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	441a      	add	r2, r3
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	4413      	add	r3, r2
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff feca 	bl	8001e08 <collect>
				lcd[curr_col][curr_row] = 0;
 8002074:	4a35      	ldr	r2, [pc, #212]	; (800214c <move+0x294>)
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	441a      	add	r2, r3
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	4413      	add	r3, r2
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player1.direction;
 8002084:	4b30      	ldr	r3, [pc, #192]	; (8002148 <move+0x290>)
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	3301      	adds	r3, #1
 800208c:	b2d1      	uxtb	r1, r2
 800208e:	4a2f      	ldr	r2, [pc, #188]	; (800214c <move+0x294>)
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	441a      	add	r2, r3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	4413      	add	r3, r2
 8002098:	460a      	mov	r2, r1
 800209a:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x + 1;
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <move+0x290>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	3301      	adds	r3, #1
 80020a2:	4a29      	ldr	r2, [pc, #164]	; (8002148 <move+0x290>)
 80020a4:	6053      	str	r3, [r2, #4]
}
 80020a6:	e194      	b.n	80023d2 <move+0x51a>
		}else if (dir == 4){
 80020a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	f040 8191 	bne.w	80023d2 <move+0x51a>
			int curr_col = player1.position_x;
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <move+0x290>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
			int curr_row = player1.position_y;
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <move+0x290>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	2b02      	cmp	r3, #2
 80020c0:	f300 8187 	bgt.w	80023d2 <move+0x51a>
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	3301      	adds	r3, #1
 80020c8:	4920      	ldr	r1, [pc, #128]	; (800214c <move+0x294>)
 80020ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020cc:	0092      	lsls	r2, r2, #2
 80020ce:	440a      	add	r2, r1
 80020d0:	4413      	add	r3, r2
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <move+0x298>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	f000 8179 	beq.w	80023d2 <move+0x51a>
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	3301      	adds	r3, #1
 80020e4:	4919      	ldr	r1, [pc, #100]	; (800214c <move+0x294>)
 80020e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	440a      	add	r2, r1
 80020ec:	4413      	add	r3, r2
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b18      	ldr	r3, [pc, #96]	; (8002154 <move+0x29c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	f000 816b 	beq.w	80023d2 <move+0x51a>
				collect(lcd[curr_col][curr_row + 1], 1); //TODO add prizes
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	3301      	adds	r3, #1
 8002100:	4912      	ldr	r1, [pc, #72]	; (800214c <move+0x294>)
 8002102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002104:	0092      	lsls	r2, r2, #2
 8002106:	440a      	add	r2, r1
 8002108:	4413      	add	r3, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2101      	movs	r1, #1
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fe7a 	bl	8001e08 <collect>
				lcd[curr_col][curr_row] = 0;
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <move+0x294>)
 8002116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	441a      	add	r2, r3
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	4413      	add	r3, r2
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player1.direction;
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <move+0x290>)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	3301      	adds	r3, #1
 800212c:	b2d0      	uxtb	r0, r2
 800212e:	4907      	ldr	r1, [pc, #28]	; (800214c <move+0x294>)
 8002130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	440a      	add	r2, r1
 8002136:	4413      	add	r3, r2
 8002138:	4602      	mov	r2, r0
 800213a:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y + 1;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <move+0x290>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	3301      	adds	r3, #1
 8002142:	4a01      	ldr	r2, [pc, #4]	; (8002148 <move+0x290>)
 8002144:	6093      	str	r3, [r2, #8]
}
 8002146:	e144      	b.n	80023d2 <move+0x51a>
 8002148:	20000048 	.word	0x20000048
 800214c:	20000668 	.word	0x20000668
 8002150:	200000a4 	.word	0x200000a4
 8002154:	200000a0 	.word	0x200000a0
	}else if (player == 2){
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	f040 8139 	bne.w	80023d2 <move+0x51a>
		dir = player2.direction;
 8002160:	4b9e      	ldr	r3, [pc, #632]	; (80023dc <move+0x524>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 8002166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d14b      	bne.n	8002204 <move+0x34c>
			int curr_col = player2.position_x;
 800216c:	4b9b      	ldr	r3, [pc, #620]	; (80023dc <move+0x524>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
			int curr_row = player2.position_y;
 8002172:	4b9a      	ldr	r3, [pc, #616]	; (80023dc <move+0x524>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	2b00      	cmp	r3, #0
 800217c:	f340 8129 	ble.w	80023d2 <move+0x51a>
 8002180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002182:	3b01      	subs	r3, #1
 8002184:	4a96      	ldr	r2, [pc, #600]	; (80023e0 <move+0x528>)
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	441a      	add	r2, r3
 800218a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218c:	4413      	add	r3, r2
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b94      	ldr	r3, [pc, #592]	; (80023e4 <move+0x52c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	f000 811b 	beq.w	80023d2 <move+0x51a>
 800219c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219e:	3b01      	subs	r3, #1
 80021a0:	4a8f      	ldr	r2, [pc, #572]	; (80023e0 <move+0x528>)
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	441a      	add	r2, r3
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	4413      	add	r3, r2
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b8e      	ldr	r3, [pc, #568]	; (80023e8 <move+0x530>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	f000 810d 	beq.w	80023d2 <move+0x51a>
				collect(lcd[curr_col - 1][curr_row], 2); //TODO add prizes
 80021b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ba:	3b01      	subs	r3, #1
 80021bc:	4a88      	ldr	r2, [pc, #544]	; (80023e0 <move+0x528>)
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	441a      	add	r2, r3
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	4413      	add	r3, r2
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2102      	movs	r1, #2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fe1c 	bl	8001e08 <collect>
				lcd[curr_col][curr_row] = 0;
 80021d0:	4a83      	ldr	r2, [pc, #524]	; (80023e0 <move+0x528>)
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	441a      	add	r2, r3
 80021d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021da:	4413      	add	r3, r2
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player2.direction;
 80021e0:	4b7e      	ldr	r3, [pc, #504]	; (80023dc <move+0x524>)
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b2d1      	uxtb	r1, r2
 80021ea:	4a7d      	ldr	r2, [pc, #500]	; (80023e0 <move+0x528>)
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	441a      	add	r2, r3
 80021f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f2:	4413      	add	r3, r2
 80021f4:	460a      	mov	r2, r1
 80021f6:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x - 1;
 80021f8:	4b78      	ldr	r3, [pc, #480]	; (80023dc <move+0x524>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	4a77      	ldr	r2, [pc, #476]	; (80023dc <move+0x524>)
 8002200:	6053      	str	r3, [r2, #4]
}
 8002202:	e0e6      	b.n	80023d2 <move+0x51a>
		}else if (dir == 2){
 8002204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002206:	2b02      	cmp	r3, #2
 8002208:	d14b      	bne.n	80022a2 <move+0x3ea>
			int curr_col = player2.position_x;
 800220a:	4b74      	ldr	r3, [pc, #464]	; (80023dc <move+0x524>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	63bb      	str	r3, [r7, #56]	; 0x38
			int curr_row = player2.position_y;
 8002210:	4b72      	ldr	r3, [pc, #456]	; (80023dc <move+0x524>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 8002216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002218:	2b00      	cmp	r3, #0
 800221a:	f340 80da 	ble.w	80023d2 <move+0x51a>
 800221e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002220:	3b01      	subs	r3, #1
 8002222:	496f      	ldr	r1, [pc, #444]	; (80023e0 <move+0x528>)
 8002224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	440a      	add	r2, r1
 800222a:	4413      	add	r3, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	4b6c      	ldr	r3, [pc, #432]	; (80023e4 <move+0x52c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	f000 80cc 	beq.w	80023d2 <move+0x51a>
 800223a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223c:	3b01      	subs	r3, #1
 800223e:	4968      	ldr	r1, [pc, #416]	; (80023e0 <move+0x528>)
 8002240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002242:	0092      	lsls	r2, r2, #2
 8002244:	440a      	add	r2, r1
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <move+0x530>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	f000 80be 	beq.w	80023d2 <move+0x51a>
				collect(lcd[curr_col][curr_row - 1], 2); //TODO add prizes
 8002256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002258:	3b01      	subs	r3, #1
 800225a:	4961      	ldr	r1, [pc, #388]	; (80023e0 <move+0x528>)
 800225c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	440a      	add	r2, r1
 8002262:	4413      	add	r3, r2
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2102      	movs	r1, #2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fdcd 	bl	8001e08 <collect>
				lcd[curr_col][curr_row] = 0;
 800226e:	4a5c      	ldr	r2, [pc, #368]	; (80023e0 <move+0x528>)
 8002270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	441a      	add	r2, r3
 8002276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002278:	4413      	add	r3, r2
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player2.direction;
 800227e:	4b57      	ldr	r3, [pc, #348]	; (80023dc <move+0x524>)
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002284:	3b01      	subs	r3, #1
 8002286:	b2d0      	uxtb	r0, r2
 8002288:	4955      	ldr	r1, [pc, #340]	; (80023e0 <move+0x528>)
 800228a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800228c:	0092      	lsls	r2, r2, #2
 800228e:	440a      	add	r2, r1
 8002290:	4413      	add	r3, r2
 8002292:	4602      	mov	r2, r0
 8002294:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y - 1;
 8002296:	4b51      	ldr	r3, [pc, #324]	; (80023dc <move+0x524>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	3b01      	subs	r3, #1
 800229c:	4a4f      	ldr	r2, [pc, #316]	; (80023dc <move+0x524>)
 800229e:	6093      	str	r3, [r2, #8]
}
 80022a0:	e097      	b.n	80023d2 <move+0x51a>
		}else if (dir == 3){
 80022a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d149      	bne.n	800233c <move+0x484>
			int curr_col = player2.position_x;
 80022a8:	4b4c      	ldr	r3, [pc, #304]	; (80023dc <move+0x524>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	643b      	str	r3, [r7, #64]	; 0x40
			int curr_row = player2.position_y;
 80022ae:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <move+0x524>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 80022b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b6:	2b12      	cmp	r3, #18
 80022b8:	f300 808b 	bgt.w	80023d2 <move+0x51a>
 80022bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022be:	3301      	adds	r3, #1
 80022c0:	4a47      	ldr	r2, [pc, #284]	; (80023e0 <move+0x528>)
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	441a      	add	r2, r3
 80022c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c8:	4413      	add	r3, r2
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b45      	ldr	r3, [pc, #276]	; (80023e4 <move+0x52c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d07d      	beq.n	80023d2 <move+0x51a>
 80022d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d8:	3301      	adds	r3, #1
 80022da:	4a41      	ldr	r2, [pc, #260]	; (80023e0 <move+0x528>)
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	441a      	add	r2, r3
 80022e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e2:	4413      	add	r3, r2
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <move+0x530>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d070      	beq.n	80023d2 <move+0x51a>
				collect(lcd[curr_col + 1][curr_row], 2); //TODO add prizes
 80022f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a3a      	ldr	r2, [pc, #232]	; (80023e0 <move+0x528>)
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	441a      	add	r2, r3
 80022fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fc:	4413      	add	r3, r2
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2102      	movs	r1, #2
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fd80 	bl	8001e08 <collect>
				lcd[curr_col][curr_row] = 0;
 8002308:	4a35      	ldr	r2, [pc, #212]	; (80023e0 <move+0x528>)
 800230a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	441a      	add	r2, r3
 8002310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002312:	4413      	add	r3, r2
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player2.direction;
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <move+0x524>)
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800231e:	3301      	adds	r3, #1
 8002320:	b2d1      	uxtb	r1, r2
 8002322:	4a2f      	ldr	r2, [pc, #188]	; (80023e0 <move+0x528>)
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	441a      	add	r2, r3
 8002328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232a:	4413      	add	r3, r2
 800232c:	460a      	mov	r2, r1
 800232e:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x + 1;
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <move+0x524>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	3301      	adds	r3, #1
 8002336:	4a29      	ldr	r2, [pc, #164]	; (80023dc <move+0x524>)
 8002338:	6053      	str	r3, [r2, #4]
}
 800233a:	e04a      	b.n	80023d2 <move+0x51a>
		}else if (dir == 4){
 800233c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800233e:	2b04      	cmp	r3, #4
 8002340:	d147      	bne.n	80023d2 <move+0x51a>
			int curr_col = player2.position_x;
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <move+0x524>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	64bb      	str	r3, [r7, #72]	; 0x48
			int curr_row = player2.position_y;
 8002348:	4b24      	ldr	r3, [pc, #144]	; (80023dc <move+0x524>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	647b      	str	r3, [r7, #68]	; 0x44
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 800234e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002350:	2b02      	cmp	r3, #2
 8002352:	dc3e      	bgt.n	80023d2 <move+0x51a>
 8002354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002356:	3301      	adds	r3, #1
 8002358:	4921      	ldr	r1, [pc, #132]	; (80023e0 <move+0x528>)
 800235a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800235c:	0092      	lsls	r2, r2, #2
 800235e:	440a      	add	r2, r1
 8002360:	4413      	add	r3, r2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <move+0x52c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d031      	beq.n	80023d2 <move+0x51a>
 800236e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002370:	3301      	adds	r3, #1
 8002372:	491b      	ldr	r1, [pc, #108]	; (80023e0 <move+0x528>)
 8002374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	440a      	add	r2, r1
 800237a:	4413      	add	r3, r2
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <move+0x530>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d024      	beq.n	80023d2 <move+0x51a>
				collect(lcd[curr_col][curr_row + 1], 2); //TODO add prizes
 8002388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238a:	3301      	adds	r3, #1
 800238c:	4914      	ldr	r1, [pc, #80]	; (80023e0 <move+0x528>)
 800238e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002390:	0092      	lsls	r2, r2, #2
 8002392:	440a      	add	r2, r1
 8002394:	4413      	add	r3, r2
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2102      	movs	r1, #2
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fd34 	bl	8001e08 <collect>
				lcd[curr_col][curr_row] = 0;
 80023a0:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <move+0x528>)
 80023a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	441a      	add	r2, r3
 80023a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023aa:	4413      	add	r3, r2
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player2.direction;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <move+0x524>)
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b6:	3301      	adds	r3, #1
 80023b8:	b2d0      	uxtb	r0, r2
 80023ba:	4909      	ldr	r1, [pc, #36]	; (80023e0 <move+0x528>)
 80023bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	440a      	add	r2, r1
 80023c2:	4413      	add	r3, r2
 80023c4:	4602      	mov	r2, r0
 80023c6:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y + 1;
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <move+0x524>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	3301      	adds	r3, #1
 80023ce:	4a03      	ldr	r2, [pc, #12]	; (80023dc <move+0x524>)
 80023d0:	6093      	str	r3, [r2, #8]
}
 80023d2:	bf00      	nop
 80023d4:	3750      	adds	r7, #80	; 0x50
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000064 	.word	0x20000064
 80023e0:	20000668 	.word	0x20000668
 80023e4:	200000a4 	.word	0x200000a4
 80023e8:	200000a0 	.word	0x200000a0

080023ec <uart_rx_enable_it>:
char character;
char input[50];
int  index_arr = 0;
extern UART_HandleTypeDef huart1;

void uart_rx_enable_it(void) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &character, 1);
 80023f0:	2201      	movs	r2, #1
 80023f2:	4903      	ldr	r1, [pc, #12]	; (8002400 <uart_rx_enable_it+0x14>)
 80023f4:	4803      	ldr	r0, [pc, #12]	; (8002404 <uart_rx_enable_it+0x18>)
 80023f6:	f003 fd17 	bl	8005e28 <HAL_UART_Receive_IT>
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200006bc 	.word	0x200006bc
 8002404:	200002d0 	.word	0x200002d0

08002408 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002408:	b580      	push	{r7, lr}
 800240a:	b09c      	sub	sp, #112	; 0x70
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	char data[100];

    if (huart->Instance == USART1){
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a13      	ldr	r2, [pc, #76]	; (8002464 <HAL_UART_RxCpltCallback+0x5c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d11f      	bne.n	800245a <HAL_UART_RxCpltCallback+0x52>
    	if(character != 10){
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_UART_RxCpltCallback+0x60>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b0a      	cmp	r3, #10
 8002420:	d009      	beq.n	8002436 <HAL_UART_RxCpltCallback+0x2e>
    		input[index_arr++] = character;
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_UART_RxCpltCallback+0x64>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	4910      	ldr	r1, [pc, #64]	; (800246c <HAL_UART_RxCpltCallback+0x64>)
 800242a:	600a      	str	r2, [r1, #0]
 800242c:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <HAL_UART_RxCpltCallback+0x60>)
 800242e:	7811      	ldrb	r1, [r2, #0]
 8002430:	4a0f      	ldr	r2, [pc, #60]	; (8002470 <HAL_UART_RxCpltCallback+0x68>)
 8002432:	54d1      	strb	r1, [r2, r3]
 8002434:	e00f      	b.n	8002456 <HAL_UART_RxCpltCallback+0x4e>
    	}else{
			input[index_arr++] = '\0';
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_UART_RxCpltCallback+0x64>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	490b      	ldr	r1, [pc, #44]	; (800246c <HAL_UART_RxCpltCallback+0x64>)
 800243e:	600a      	str	r2, [r1, #0]
 8002440:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <HAL_UART_RxCpltCallback+0x68>)
 8002442:	2100      	movs	r1, #0
 8002444:	54d1      	strb	r1, [r2, r3]
			index_arr = 0;
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_UART_RxCpltCallback+0x64>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
			int value;
			HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 800244c:	2200      	movs	r2, #0
 800244e:	4909      	ldr	r1, [pc, #36]	; (8002474 <HAL_UART_RxCpltCallback+0x6c>)
 8002450:	4809      	ldr	r0, [pc, #36]	; (8002478 <HAL_UART_RxCpltCallback+0x70>)
 8002452:	f002 fe3a 	bl	80050ca <HAL_RTC_GetTime>
//			sprintf(timeStr, "%02d:%02d:%02d", mytime.Hours, mytime.Minutes, mytime.Seconds);
		}
		uart_rx_enable_it();
 8002456:	f7ff ffc9 	bl	80023ec <uart_rx_enable_it>
    }
}
 800245a:	bf00      	nop
 800245c:	3770      	adds	r7, #112	; 0x70
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40013800 	.word	0x40013800
 8002468:	200006bc 	.word	0x200006bc
 800246c:	200006f4 	.word	0x200006f4
 8002470:	200006c0 	.word	0x200006c0
 8002474:	20000654 	.word	0x20000654
 8002478:	20000200 	.word	0x20000200

0800247c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_MspInit+0x44>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <HAL_MspInit+0x44>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6193      	str	r3, [r2, #24]
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_MspInit+0x44>)
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_MspInit+0x44>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <HAL_MspInit+0x44>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_MspInit+0x44>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024b2:	2007      	movs	r0, #7
 80024b4:	f000 fc3c 	bl	8002d30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000

080024c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a17      	ldr	r2, [pc, #92]	; (8002540 <HAL_I2C_MspInit+0x7c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d127      	bne.n	8002536 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_I2C_MspInit+0x80>)
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	4a16      	ldr	r2, [pc, #88]	; (8002544 <HAL_I2C_MspInit+0x80>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f0:	6153      	str	r3, [r2, #20]
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <HAL_I2C_MspInit+0x80>)
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80024fe:	23c0      	movs	r3, #192	; 0xc0
 8002500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002502:	2312      	movs	r3, #18
 8002504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002506:	2301      	movs	r3, #1
 8002508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800250a:	2303      	movs	r3, #3
 800250c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800250e:	2304      	movs	r3, #4
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	480b      	ldr	r0, [pc, #44]	; (8002548 <HAL_I2C_MspInit+0x84>)
 800251a:	f000 fcc1 	bl	8002ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_I2C_MspInit+0x80>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	4a08      	ldr	r2, [pc, #32]	; (8002544 <HAL_I2C_MspInit+0x80>)
 8002524:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002528:	61d3      	str	r3, [r2, #28]
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_I2C_MspInit+0x80>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002536:	bf00      	nop
 8002538:	3728      	adds	r7, #40	; 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40005400 	.word	0x40005400
 8002544:	40021000 	.word	0x40021000
 8002548:	48000400 	.word	0x48000400

0800254c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0d      	ldr	r2, [pc, #52]	; (8002590 <HAL_RTC_MspInit+0x44>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d111      	bne.n	8002582 <HAL_RTC_MspInit+0x36>
 800255e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002562:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800256c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <HAL_RTC_MspInit+0x48>)
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	461a      	mov	r2, r3
 800257e:	2301      	movs	r3, #1
 8002580:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40002800 	.word	0x40002800
 8002594:	10908100 	.word	0x10908100

08002598 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	; 0x28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a17      	ldr	r2, [pc, #92]	; (8002614 <HAL_SPI_MspInit+0x7c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d128      	bne.n	800260c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_SPI_MspInit+0x80>)
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_SPI_MspInit+0x80>)
 80025c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025c4:	6193      	str	r3, [r2, #24]
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <HAL_SPI_MspInit+0x80>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_SPI_MspInit+0x80>)
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_SPI_MspInit+0x80>)
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	6153      	str	r3, [r2, #20]
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <HAL_SPI_MspInit+0x80>)
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80025ea:	23e0      	movs	r3, #224	; 0xe0
 80025ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025fa:	2305      	movs	r3, #5
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fe:	f107 0314 	add.w	r3, r7, #20
 8002602:	4619      	mov	r1, r3
 8002604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002608:	f000 fc4a 	bl	8002ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800260c:	bf00      	nop
 800260e:	3728      	adds	r7, #40	; 0x28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40013000 	.word	0x40013000
 8002618:	40021000 	.word	0x40021000

0800261c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <HAL_TIM_Base_MspInit+0x44>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d113      	bne.n	8002656 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_TIM_Base_MspInit+0x48>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <HAL_TIM_Base_MspInit+0x48>)
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	61d3      	str	r3, [r2, #28]
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_TIM_Base_MspInit+0x48>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	201e      	movs	r0, #30
 800264c:	f000 fb7b 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002650:	201e      	movs	r0, #30
 8002652:	f000 fb94 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40000800 	.word	0x40000800
 8002664:	40021000 	.word	0x40021000

08002668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <HAL_UART_MspInit+0xc8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d14d      	bne.n	8002726 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800268a:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <HAL_UART_MspInit+0xcc>)
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	4a29      	ldr	r2, [pc, #164]	; (8002734 <HAL_UART_MspInit+0xcc>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002694:	6193      	str	r3, [r2, #24]
 8002696:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_UART_MspInit+0xcc>)
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_UART_MspInit+0xcc>)
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	4a23      	ldr	r2, [pc, #140]	; (8002734 <HAL_UART_MspInit+0xcc>)
 80026a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026ac:	6153      	str	r3, [r2, #20]
 80026ae:	4b21      	ldr	r3, [pc, #132]	; (8002734 <HAL_UART_MspInit+0xcc>)
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <HAL_UART_MspInit+0xcc>)
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	4a1d      	ldr	r2, [pc, #116]	; (8002734 <HAL_UART_MspInit+0xcc>)
 80026c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c4:	6153      	str	r3, [r2, #20]
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_UART_MspInit+0xcc>)
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC5     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026d2:	2320      	movs	r3, #32
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026de:	2303      	movs	r3, #3
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026e2:	2307      	movs	r3, #7
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	4812      	ldr	r0, [pc, #72]	; (8002738 <HAL_UART_MspInit+0xd0>)
 80026ee:	f000 fbd7 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002704:	2307      	movs	r3, #7
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002712:	f000 fbc5 	bl	8002ea0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2100      	movs	r1, #0
 800271a:	2025      	movs	r0, #37	; 0x25
 800271c:	f000 fb13 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002720:	2025      	movs	r0, #37	; 0x25
 8002722:	f000 fb2c 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40013800 	.word	0x40013800
 8002734:	40021000 	.word	0x40021000
 8002738:	48000800 	.word	0x48000800

0800273c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a18      	ldr	r2, [pc, #96]	; (80027bc <HAL_PCD_MspInit+0x80>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d129      	bne.n	80027b2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_PCD_MspInit+0x84>)
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <HAL_PCD_MspInit+0x84>)
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	6153      	str	r3, [r2, #20]
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_PCD_MspInit+0x84>)
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002776:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800277a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002784:	2303      	movs	r3, #3
 8002786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002788:	230e      	movs	r3, #14
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002796:	f000 fb83 	bl	8002ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_PCD_MspInit+0x84>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <HAL_PCD_MspInit+0x84>)
 80027a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027a4:	61d3      	str	r3, [r2, #28]
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_PCD_MspInit+0x84>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40005c00 	.word	0x40005c00
 80027c0:	40021000 	.word	0x40021000

080027c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <NMI_Handler+0x4>

080027ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ce:	e7fe      	b.n	80027ce <HardFault_Handler+0x4>

080027d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <MemManage_Handler+0x4>

080027d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027da:	e7fe      	b.n	80027da <BusFault_Handler+0x4>

080027dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <UsageFault_Handler+0x4>

080027e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002810:	f000 f97a 	bl	8002b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}

08002818 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800281c:	2001      	movs	r0, #1
 800281e:	f000 fd03 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}

08002826 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800282a:	2002      	movs	r0, #2
 800282c:	f000 fcfc 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}

08002834 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002838:	2004      	movs	r0, #4
 800283a:	f000 fcf5 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}

08002842 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002846:	2008      	movs	r0, #8
 8002848:	f000 fcee 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}

08002850 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002854:	4802      	ldr	r0, [pc, #8]	; (8002860 <TIM4_IRQHandler+0x10>)
 8002856:	f002 fec1 	bl	80055dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000284 	.word	0x20000284

08002864 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002868:	4802      	ldr	r0, [pc, #8]	; (8002874 <USART1_IRQHandler+0x10>)
 800286a:	f003 fb21 	bl	8005eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200002d0 	.word	0x200002d0

08002878 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return 1;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_kill>:

int _kill(int pid, int sig)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002892:	f004 fcdf 	bl	8007254 <__errno>
 8002896:	4603      	mov	r3, r0
 8002898:	2216      	movs	r2, #22
 800289a:	601a      	str	r2, [r3, #0]
  return -1;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_exit>:

void _exit (int status)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ffe7 	bl	8002888 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028ba:	e7fe      	b.n	80028ba <_exit+0x12>

080028bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	e00a      	b.n	80028e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028ce:	f3af 8000 	nop.w
 80028d2:	4601      	mov	r1, r0
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	60ba      	str	r2, [r7, #8]
 80028da:	b2ca      	uxtb	r2, r1
 80028dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	dbf0      	blt.n	80028ce <_read+0x12>
  }

  return len;
 80028ec:	687b      	ldr	r3, [r7, #4]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	e009      	b.n	800291c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	60ba      	str	r2, [r7, #8]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3301      	adds	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	dbf1      	blt.n	8002908 <_write+0x12>
  }
  return len;
 8002924:	687b      	ldr	r3, [r7, #4]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <_close>:

int _close(int file)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002956:	605a      	str	r2, [r3, #4]
  return 0;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <_isatty>:

int _isatty(int file)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800296e:	2301      	movs	r3, #1
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a0:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <_sbrk+0x5c>)
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <_sbrk+0x60>)
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <_sbrk+0x64>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <_sbrk+0x64>)
 80029b6:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <_sbrk+0x68>)
 80029b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <_sbrk+0x64>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d207      	bcs.n	80029d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c8:	f004 fc44 	bl	8007254 <__errno>
 80029cc:	4603      	mov	r3, r0
 80029ce:	220c      	movs	r2, #12
 80029d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	e009      	b.n	80029ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <_sbrk+0x64>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029de:	4b07      	ldr	r3, [pc, #28]	; (80029fc <_sbrk+0x64>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	4a05      	ldr	r2, [pc, #20]	; (80029fc <_sbrk+0x64>)
 80029e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	2000a000 	.word	0x2000a000
 80029f8:	00000400 	.word	0x00000400
 80029fc:	20000700 	.word	0x20000700
 8002a00:	20000718 	.word	0x20000718

08002a04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <SystemInit+0x20>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <SystemInit+0x20>)
 8002a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a60 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a2c:	f7ff ffea 	bl	8002a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a30:	480c      	ldr	r0, [pc, #48]	; (8002a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a32:	490d      	ldr	r1, [pc, #52]	; (8002a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a34:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <LoopForever+0xe>)
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a38:	e002      	b.n	8002a40 <LoopCopyDataInit>

08002a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a3e:	3304      	adds	r3, #4

08002a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a44:	d3f9      	bcc.n	8002a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a48:	4c0a      	ldr	r4, [pc, #40]	; (8002a74 <LoopForever+0x16>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a4c:	e001      	b.n	8002a52 <LoopFillZerobss>

08002a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a50:	3204      	adds	r2, #4

08002a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a54:	d3fb      	bcc.n	8002a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a56:	f004 fc03 	bl	8007260 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a5a:	f7fd ffed 	bl	8000a38 <main>

08002a5e <LoopForever>:

LoopForever:
    b LoopForever
 8002a5e:	e7fe      	b.n	8002a5e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a60:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a68:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8002a6c:	0800892c 	.word	0x0800892c
  ldr r2, =_sbss
 8002a70:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8002a74:	20000718 	.word	0x20000718

08002a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a78:	e7fe      	b.n	8002a78 <ADC1_2_IRQHandler>
	...

08002a7c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_Init+0x28>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <HAL_Init+0x28>)
 8002a86:	f043 0310 	orr.w	r3, r3, #16
 8002a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f000 f94f 	bl	8002d30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f000 f808 	bl	8002aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a98:	f7ff fcf0 	bl	800247c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40022000 	.word	0x40022000

08002aa8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_InitTick+0x54>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_InitTick+0x58>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f967 	bl	8002d9a <HAL_SYSTICK_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00e      	b.n	8002af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d80a      	bhi.n	8002af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002adc:	2200      	movs	r2, #0
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	f000 f92f 	bl	8002d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae8:	4a06      	ldr	r2, [pc, #24]	; (8002b04 <HAL_InitTick+0x5c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	200000fc 	.word	0x200000fc
 8002b00:	20000104 	.word	0x20000104
 8002b04:	20000100 	.word	0x20000100

08002b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_IncTick+0x20>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_IncTick+0x24>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_IncTick+0x24>)
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000104 	.word	0x20000104
 8002b2c:	20000704 	.word	0x20000704

08002b30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return uwTick;  
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_GetTick+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000704 	.word	0x20000704

08002b48 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff ffee 	bl	8002b30 <HAL_GetTick>
 8002b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d005      	beq.n	8002b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_Delay+0x44>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b6e:	bf00      	nop
 8002b70:	f7ff ffde 	bl	8002b30 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d8f7      	bhi.n	8002b70 <HAL_Delay+0x28>
  {
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000104 	.word	0x20000104

08002b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bac:	4013      	ands	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc2:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60d3      	str	r3, [r2, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	f003 0307 	and.w	r3, r3, #7
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	db0b      	blt.n	8002c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	f003 021f 	and.w	r2, r3, #31
 8002c0c:	4907      	ldr	r1, [pc, #28]	; (8002c2c <__NVIC_EnableIRQ+0x38>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2001      	movs	r0, #1
 8002c16:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	db0a      	blt.n	8002c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	490c      	ldr	r1, [pc, #48]	; (8002c7c <__NVIC_SetPriority+0x4c>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	0112      	lsls	r2, r2, #4
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	440b      	add	r3, r1
 8002c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c58:	e00a      	b.n	8002c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4908      	ldr	r1, [pc, #32]	; (8002c80 <__NVIC_SetPriority+0x50>)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	3b04      	subs	r3, #4
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	761a      	strb	r2, [r3, #24]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000e100 	.word	0xe000e100
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f1c3 0307 	rsb	r3, r3, #7
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	bf28      	it	cs
 8002ca2:	2304      	movcs	r3, #4
 8002ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d902      	bls.n	8002cb4 <NVIC_EncodePriority+0x30>
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3b03      	subs	r3, #3
 8002cb2:	e000      	b.n	8002cb6 <NVIC_EncodePriority+0x32>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	43d9      	mvns	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	4313      	orrs	r3, r2
         );
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3724      	adds	r7, #36	; 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cfc:	d301      	bcc.n	8002d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00f      	b.n	8002d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d02:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <SysTick_Config+0x40>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0a:	210f      	movs	r1, #15
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	f7ff ff8e 	bl	8002c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <SysTick_Config+0x40>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1a:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <SysTick_Config+0x40>)
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	e000e010 	.word	0xe000e010

08002d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ff29 	bl	8002b90 <__NVIC_SetPriorityGrouping>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d58:	f7ff ff3e 	bl	8002bd8 <__NVIC_GetPriorityGrouping>
 8002d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7ff ff8e 	bl	8002c84 <NVIC_EncodePriority>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff5d 	bl	8002c30 <__NVIC_SetPriority>
}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff31 	bl	8002bf4 <__NVIC_EnableIRQ>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ffa2 	bl	8002cec <SysTick_Config>
 8002da8:	4603      	mov	r3, r0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d008      	beq.n	8002dd6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e020      	b.n	8002e18 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 020e 	bic.w	r2, r2, #14
 8002de4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	2101      	movs	r1, #1
 8002e00:	fa01 f202 	lsl.w	r2, r1, r2
 8002e04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d005      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
 8002e44:	e027      	b.n	8002e96 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 020e 	bic.w	r2, r2, #14
 8002e54:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	2101      	movs	r1, #1
 8002e70:	fa01 f202 	lsl.w	r2, r1, r2
 8002e74:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
    } 
  }
  return status;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eae:	e154      	b.n	800315a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8146 	beq.w	8003154 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d005      	beq.n	8002ee0 <HAL_GPIO_Init+0x40>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d130      	bne.n	8002f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2203      	movs	r2, #3
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f16:	2201      	movs	r2, #1
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f003 0201 	and.w	r2, r3, #1
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d017      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d123      	bne.n	8002fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	08da      	lsrs	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3208      	adds	r2, #8
 8002f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	220f      	movs	r2, #15
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	08da      	lsrs	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3208      	adds	r2, #8
 8002fcc:	6939      	ldr	r1, [r7, #16]
 8002fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	2203      	movs	r2, #3
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0203 	and.w	r2, r3, #3
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80a0 	beq.w	8003154 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003014:	4b58      	ldr	r3, [pc, #352]	; (8003178 <HAL_GPIO_Init+0x2d8>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	4a57      	ldr	r2, [pc, #348]	; (8003178 <HAL_GPIO_Init+0x2d8>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6193      	str	r3, [r2, #24]
 8003020:	4b55      	ldr	r3, [pc, #340]	; (8003178 <HAL_GPIO_Init+0x2d8>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800302c:	4a53      	ldr	r2, [pc, #332]	; (800317c <HAL_GPIO_Init+0x2dc>)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003056:	d019      	beq.n	800308c <HAL_GPIO_Init+0x1ec>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a49      	ldr	r2, [pc, #292]	; (8003180 <HAL_GPIO_Init+0x2e0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <HAL_GPIO_Init+0x1e8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a48      	ldr	r2, [pc, #288]	; (8003184 <HAL_GPIO_Init+0x2e4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00d      	beq.n	8003084 <HAL_GPIO_Init+0x1e4>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a47      	ldr	r2, [pc, #284]	; (8003188 <HAL_GPIO_Init+0x2e8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <HAL_GPIO_Init+0x1e0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a46      	ldr	r2, [pc, #280]	; (800318c <HAL_GPIO_Init+0x2ec>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <HAL_GPIO_Init+0x1dc>
 8003078:	2304      	movs	r3, #4
 800307a:	e008      	b.n	800308e <HAL_GPIO_Init+0x1ee>
 800307c:	2305      	movs	r3, #5
 800307e:	e006      	b.n	800308e <HAL_GPIO_Init+0x1ee>
 8003080:	2303      	movs	r3, #3
 8003082:	e004      	b.n	800308e <HAL_GPIO_Init+0x1ee>
 8003084:	2302      	movs	r3, #2
 8003086:	e002      	b.n	800308e <HAL_GPIO_Init+0x1ee>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <HAL_GPIO_Init+0x1ee>
 800308c:	2300      	movs	r3, #0
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	f002 0203 	and.w	r2, r2, #3
 8003094:	0092      	lsls	r2, r2, #2
 8003096:	4093      	lsls	r3, r2
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800309e:	4937      	ldr	r1, [pc, #220]	; (800317c <HAL_GPIO_Init+0x2dc>)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ac:	4b38      	ldr	r3, [pc, #224]	; (8003190 <HAL_GPIO_Init+0x2f0>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030d0:	4a2f      	ldr	r2, [pc, #188]	; (8003190 <HAL_GPIO_Init+0x2f0>)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030d6:	4b2e      	ldr	r3, [pc, #184]	; (8003190 <HAL_GPIO_Init+0x2f0>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	43db      	mvns	r3, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030fa:	4a25      	ldr	r2, [pc, #148]	; (8003190 <HAL_GPIO_Init+0x2f0>)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003100:	4b23      	ldr	r3, [pc, #140]	; (8003190 <HAL_GPIO_Init+0x2f0>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	43db      	mvns	r3, r3
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003124:	4a1a      	ldr	r2, [pc, #104]	; (8003190 <HAL_GPIO_Init+0x2f0>)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800312a:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_GPIO_Init+0x2f0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	43db      	mvns	r3, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800314e:	4a10      	ldr	r2, [pc, #64]	; (8003190 <HAL_GPIO_Init+0x2f0>)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	3301      	adds	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f aea3 	bne.w	8002eb0 <HAL_GPIO_Init+0x10>
  }
}
 800316a:	bf00      	nop
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	40021000 	.word	0x40021000
 800317c:	40010000 	.word	0x40010000
 8003180:	48000400 	.word	0x48000400
 8003184:	48000800 	.word	0x48000800
 8003188:	48000c00 	.word	0x48000c00
 800318c:	48001000 	.word	0x48001000
 8003190:	40010400 	.word	0x40010400

08003194 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	887b      	ldrh	r3, [r7, #2]
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
 80031b0:	e001      	b.n	80031b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
 80031d0:	4613      	mov	r3, r2
 80031d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031d4:	787b      	ldrb	r3, [r7, #1]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031e0:	e002      	b.n	80031e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003206:	887a      	ldrh	r2, [r7, #2]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4013      	ands	r3, r2
 800320c:	041a      	lsls	r2, r3, #16
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	43d9      	mvns	r1, r3
 8003212:	887b      	ldrh	r3, [r7, #2]
 8003214:	400b      	ands	r3, r1
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	619a      	str	r2, [r3, #24]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d006      	beq.n	800324c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800323e:	4a05      	ldr	r2, [pc, #20]	; (8003254 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd ff0e 	bl	8001068 <HAL_GPIO_EXTI_Callback>
  }
}
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40010400 	.word	0x40010400

08003258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e081      	b.n	800336e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff f920 	bl	80024c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2224      	movs	r2, #36	; 0x24
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	e006      	b.n	80032e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d104      	bne.n	80032f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003304:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003314:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69d9      	ldr	r1, [r3, #28]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1a      	ldr	r2, [r3, #32]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b20      	cmp	r3, #32
 800338a:	d138      	bne.n	80033fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003396:	2302      	movs	r3, #2
 8003398:	e032      	b.n	8003400 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2224      	movs	r2, #36	; 0x24
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0201 	bic.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b20      	cmp	r3, #32
 8003420:	d139      	bne.n	8003496 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800342c:	2302      	movs	r3, #2
 800342e:	e033      	b.n	8003498 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800345e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a6:	b08b      	sub	sp, #44	; 0x2c
 80034a8:	af06      	add	r7, sp, #24
 80034aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0c4      	b.n	8003640 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff f936 	bl	800273c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2203      	movs	r2, #3
 80034d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f003 fe7d 	bl	80071dc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]
 80034e6:	e040      	b.n	800356a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	440b      	add	r3, r1
 80034f8:	3301      	adds	r3, #1
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	3303      	adds	r3, #3
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	3338      	adds	r3, #56	; 0x38
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	333c      	adds	r3, #60	; 0x3c
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	440b      	add	r3, r1
 800355e:	3340      	adds	r3, #64	; 0x40
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	3301      	adds	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	429a      	cmp	r2, r3
 8003572:	d3b9      	bcc.n	80034e8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	e044      	b.n	8003604 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	440b      	add	r3, r1
 8003588:	f203 1369 	addw	r3, r3, #361	; 0x169
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	440b      	add	r3, r1
 800359e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	440b      	add	r3, r1
 80035b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	440b      	add	r3, r1
 80035ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	440b      	add	r3, r1
 80035e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	440b      	add	r3, r1
 80035f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	3301      	adds	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	429a      	cmp	r2, r3
 800360c:	d3b5      	bcc.n	800357a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	687e      	ldr	r6, [r7, #4]
 8003616:	466d      	mov	r5, sp
 8003618:	f106 0410 	add.w	r4, r6, #16
 800361c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800361e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	602b      	str	r3, [r5, #0]
 8003624:	1d33      	adds	r3, r6, #4
 8003626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003628:	6838      	ldr	r0, [r7, #0]
 800362a:	f003 fdf2 	bl	8007212 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800364e:	af00      	add	r7, sp, #0
 8003650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003654:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003658:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	f001 b823 	b.w	80046b4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 817d 	beq.w	800397e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003684:	4bbc      	ldr	r3, [pc, #752]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 030c 	and.w	r3, r3, #12
 800368c:	2b04      	cmp	r3, #4
 800368e:	d00c      	beq.n	80036aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003690:	4bb9      	ldr	r3, [pc, #740]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 030c 	and.w	r3, r3, #12
 8003698:	2b08      	cmp	r3, #8
 800369a:	d15c      	bne.n	8003756 <HAL_RCC_OscConfig+0x10e>
 800369c:	4bb6      	ldr	r3, [pc, #728]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a8:	d155      	bne.n	8003756 <HAL_RCC_OscConfig+0x10e>
 80036aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80036be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c2:	fab3 f383 	clz	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d102      	bne.n	80036dc <HAL_RCC_OscConfig+0x94>
 80036d6:	4ba8      	ldr	r3, [pc, #672]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	e015      	b.n	8003708 <HAL_RCC_OscConfig+0xc0>
 80036dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80036f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036f4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80036f8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003704:	4b9c      	ldr	r3, [pc, #624]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800370c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003710:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003714:	fa92 f2a2 	rbit	r2, r2
 8003718:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800371c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003720:	fab2 f282 	clz	r2, r2
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	f042 0220 	orr.w	r2, r2, #32
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	f002 021f 	and.w	r2, r2, #31
 8003730:	2101      	movs	r1, #1
 8003732:	fa01 f202 	lsl.w	r2, r1, r2
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 811f 	beq.w	800397c <HAL_RCC_OscConfig+0x334>
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 8116 	bne.w	800397c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f000 bfaf 	b.w	80046b4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x12e>
 8003768:	4b83      	ldr	r3, [pc, #524]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a82      	ldr	r2, [pc, #520]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800376e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	e036      	b.n	80037e4 <HAL_RCC_OscConfig+0x19c>
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x158>
 8003786:	4b7c      	ldr	r3, [pc, #496]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a7b      	ldr	r2, [pc, #492]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800378c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	4b79      	ldr	r3, [pc, #484]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a78      	ldr	r2, [pc, #480]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e021      	b.n	80037e4 <HAL_RCC_OscConfig+0x19c>
 80037a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x184>
 80037b2:	4b71      	ldr	r3, [pc, #452]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a70      	ldr	r2, [pc, #448]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b6e      	ldr	r3, [pc, #440]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a6d      	ldr	r2, [pc, #436]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0x19c>
 80037cc:	4b6a      	ldr	r3, [pc, #424]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a69      	ldr	r2, [pc, #420]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b67      	ldr	r3, [pc, #412]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a66      	ldr	r2, [pc, #408]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037e4:	4b64      	ldr	r3, [pc, #400]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	f023 020f 	bic.w	r2, r3, #15
 80037ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	495f      	ldr	r1, [pc, #380]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d059      	beq.n	80038c2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380e:	f7ff f98f 	bl	8002b30 <HAL_GetTick>
 8003812:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003818:	f7ff f98a 	bl	8002b30 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b64      	cmp	r3, #100	; 0x64
 8003826:	d902      	bls.n	800382e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	f000 bf43 	b.w	80046b4 <HAL_RCC_OscConfig+0x106c>
 800382e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003832:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003842:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	095b      	lsrs	r3, r3, #5
 800384e:	b2db      	uxtb	r3, r3
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d102      	bne.n	8003860 <HAL_RCC_OscConfig+0x218>
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	e015      	b.n	800388c <HAL_RCC_OscConfig+0x244>
 8003860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003864:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800386c:	fa93 f3a3 	rbit	r3, r3
 8003870:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003878:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800387c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003888:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003890:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003894:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003898:	fa92 f2a2 	rbit	r2, r2
 800389c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80038a0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80038a4:	fab2 f282 	clz	r2, r2
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	f042 0220 	orr.w	r2, r2, #32
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	f002 021f 	and.w	r2, r2, #31
 80038b4:	2101      	movs	r1, #1
 80038b6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ab      	beq.n	8003818 <HAL_RCC_OscConfig+0x1d0>
 80038c0:	e05d      	b.n	800397e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c2:	f7ff f935 	bl	8002b30 <HAL_GetTick>
 80038c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038cc:	f7ff f930 	bl	8002b30 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b64      	cmp	r3, #100	; 0x64
 80038da:	d902      	bls.n	80038e2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	f000 bee9 	b.w	80046b4 <HAL_RCC_OscConfig+0x106c>
 80038e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038e6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80038f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fa:	fab3 f383 	clz	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d102      	bne.n	8003914 <HAL_RCC_OscConfig+0x2cc>
 800390e:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	e015      	b.n	8003940 <HAL_RCC_OscConfig+0x2f8>
 8003914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003918:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800392c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003930:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800393c:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003944:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003948:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800394c:	fa92 f2a2 	rbit	r2, r2
 8003950:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003954:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003958:	fab2 f282 	clz	r2, r2
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	f042 0220 	orr.w	r2, r2, #32
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	f002 021f 	and.w	r2, r2, #31
 8003968:	2101      	movs	r1, #1
 800396a:	fa01 f202 	lsl.w	r2, r1, r2
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1ab      	bne.n	80038cc <HAL_RCC_OscConfig+0x284>
 8003974:	e003      	b.n	800397e <HAL_RCC_OscConfig+0x336>
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003982:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 817d 	beq.w	8003c8e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003994:	4ba6      	ldr	r3, [pc, #664]	; (8003c30 <HAL_RCC_OscConfig+0x5e8>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00b      	beq.n	80039b8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039a0:	4ba3      	ldr	r3, [pc, #652]	; (8003c30 <HAL_RCC_OscConfig+0x5e8>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 030c 	and.w	r3, r3, #12
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d172      	bne.n	8003a92 <HAL_RCC_OscConfig+0x44a>
 80039ac:	4ba0      	ldr	r3, [pc, #640]	; (8003c30 <HAL_RCC_OscConfig+0x5e8>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d16c      	bne.n	8003a92 <HAL_RCC_OscConfig+0x44a>
 80039b8:	2302      	movs	r3, #2
 80039ba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80039ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	fab3 f383 	clz	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d102      	bne.n	80039e8 <HAL_RCC_OscConfig+0x3a0>
 80039e2:	4b93      	ldr	r3, [pc, #588]	; (8003c30 <HAL_RCC_OscConfig+0x5e8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	e013      	b.n	8003a10 <HAL_RCC_OscConfig+0x3c8>
 80039e8:	2302      	movs	r3, #2
 80039ea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80039fa:	2302      	movs	r3, #2
 80039fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003a00:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a04:	fa93 f3a3 	rbit	r3, r3
 8003a08:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003a0c:	4b88      	ldr	r3, [pc, #544]	; (8003c30 <HAL_RCC_OscConfig+0x5e8>)
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	2202      	movs	r2, #2
 8003a12:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003a16:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003a1a:	fa92 f2a2 	rbit	r2, r2
 8003a1e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003a22:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003a26:	fab2 f282 	clz	r2, r2
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	f042 0220 	orr.w	r2, r2, #32
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	f002 021f 	and.w	r2, r2, #31
 8003a36:	2101      	movs	r1, #1
 8003a38:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_RCC_OscConfig+0x410>
 8003a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f000 be2e 	b.w	80046b4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a58:	4b75      	ldr	r3, [pc, #468]	; (8003c30 <HAL_RCC_OscConfig+0x5e8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	21f8      	movs	r1, #248	; 0xf8
 8003a6e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003a76:	fa91 f1a1 	rbit	r1, r1
 8003a7a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003a7e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003a82:	fab1 f181 	clz	r1, r1
 8003a86:	b2c9      	uxtb	r1, r1
 8003a88:	408b      	lsls	r3, r1
 8003a8a:	4969      	ldr	r1, [pc, #420]	; (8003c30 <HAL_RCC_OscConfig+0x5e8>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a90:	e0fd      	b.n	8003c8e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8088 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x56c>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003aae:	fa93 f3a3 	rbit	r3, r3
 8003ab2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003ab6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ac4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	461a      	mov	r2, r3
 8003acc:	2301      	movs	r3, #1
 8003ace:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7ff f82e 	bl	8002b30 <HAL_GetTick>
 8003ad4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ada:	f7ff f829 	bl	8002b30 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d902      	bls.n	8003af0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	f000 bde2 	b.w	80046b4 <HAL_RCC_OscConfig+0x106c>
 8003af0:	2302      	movs	r3, #2
 8003af2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003b02:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b06:	fab3 f383 	clz	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d102      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4d8>
 8003b1a:	4b45      	ldr	r3, [pc, #276]	; (8003c30 <HAL_RCC_OscConfig+0x5e8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	e013      	b.n	8003b48 <HAL_RCC_OscConfig+0x500>
 8003b20:	2302      	movs	r3, #2
 8003b22:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003b2a:	fa93 f3a3 	rbit	r3, r3
 8003b2e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003b32:	2302      	movs	r3, #2
 8003b34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003b38:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003b44:	4b3a      	ldr	r3, [pc, #232]	; (8003c30 <HAL_RCC_OscConfig+0x5e8>)
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003b4e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003b52:	fa92 f2a2 	rbit	r2, r2
 8003b56:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003b5a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003b5e:	fab2 f282 	clz	r2, r2
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	f042 0220 	orr.w	r2, r2, #32
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	f002 021f 	and.w	r2, r2, #31
 8003b6e:	2101      	movs	r1, #1
 8003b70:	fa01 f202 	lsl.w	r2, r1, r2
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0af      	beq.n	8003ada <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	4b2d      	ldr	r3, [pc, #180]	; (8003c30 <HAL_RCC_OscConfig+0x5e8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	21f8      	movs	r1, #248	; 0xf8
 8003b90:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003b98:	fa91 f1a1 	rbit	r1, r1
 8003b9c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003ba0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003ba4:	fab1 f181 	clz	r1, r1
 8003ba8:	b2c9      	uxtb	r1, r1
 8003baa:	408b      	lsls	r3, r1
 8003bac:	4920      	ldr	r1, [pc, #128]	; (8003c30 <HAL_RCC_OscConfig+0x5e8>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]
 8003bb2:	e06c      	b.n	8003c8e <HAL_RCC_OscConfig+0x646>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003bc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fe ffa6 	bl	8002b30 <HAL_GetTick>
 8003be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bea:	f7fe ffa1 	bl	8002b30 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d902      	bls.n	8003c00 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	f000 bd5a 	b.w	80046b4 <HAL_RCC_OscConfig+0x106c>
 8003c00:	2302      	movs	r3, #2
 8003c02:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d104      	bne.n	8003c34 <HAL_RCC_OscConfig+0x5ec>
 8003c2a:	4b01      	ldr	r3, [pc, #4]	; (8003c30 <HAL_RCC_OscConfig+0x5e8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	e015      	b.n	8003c5c <HAL_RCC_OscConfig+0x614>
 8003c30:	40021000 	.word	0x40021000
 8003c34:	2302      	movs	r3, #2
 8003c36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003c46:	2302      	movs	r3, #2
 8003c48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003c4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c58:	4bc8      	ldr	r3, [pc, #800]	; (8003f7c <HAL_RCC_OscConfig+0x934>)
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003c62:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003c66:	fa92 f2a2 	rbit	r2, r2
 8003c6a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003c6e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003c72:	fab2 f282 	clz	r2, r2
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	f042 0220 	orr.w	r2, r2, #32
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	f002 021f 	and.w	r2, r2, #31
 8003c82:	2101      	movs	r1, #1
 8003c84:	fa01 f202 	lsl.w	r2, r1, r2
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1ad      	bne.n	8003bea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8110 	beq.w	8003ec4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d079      	beq.n	8003da8 <HAL_RCC_OscConfig+0x760>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4bab      	ldr	r3, [pc, #684]	; (8003f80 <HAL_RCC_OscConfig+0x938>)
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2301      	movs	r3, #1
 8003cdc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cde:	f7fe ff27 	bl	8002b30 <HAL_GetTick>
 8003ce2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce8:	f7fe ff22 	bl	8002b30 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d902      	bls.n	8003cfe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	f000 bcdb 	b.w	80046b4 <HAL_RCC_OscConfig+0x106c>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003d18:	2202      	movs	r2, #2
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	fa93 f2a3 	rbit	r2, r3
 8003d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	fa93 f2a3 	rbit	r2, r3
 8003d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003d56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d58:	4b88      	ldr	r3, [pc, #544]	; (8003f7c <HAL_RCC_OscConfig+0x934>)
 8003d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003d64:	2102      	movs	r1, #2
 8003d66:	6019      	str	r1, [r3, #0]
 8003d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	fa93 f1a3 	rbit	r1, r3
 8003d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d7e:	6019      	str	r1, [r3, #0]
  return result;
 8003d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	fab3 f383 	clz	r3, r3
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0a0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x6a0>
 8003da6:	e08d      	b.n	8003ec4 <HAL_RCC_OscConfig+0x87c>
 8003da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003db0:	2201      	movs	r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	fa93 f2a3 	rbit	r2, r3
 8003dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003dca:	601a      	str	r2, [r3, #0]
  return result;
 8003dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003dd4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd6:	fab3 f383 	clz	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4b68      	ldr	r3, [pc, #416]	; (8003f80 <HAL_RCC_OscConfig+0x938>)
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	461a      	mov	r2, r3
 8003de6:	2300      	movs	r3, #0
 8003de8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dea:	f7fe fea1 	bl	8002b30 <HAL_GetTick>
 8003dee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fe fe9c 	bl	8002b30 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d902      	bls.n	8003e0a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	f000 bc55 	b.w	80046b4 <HAL_RCC_OscConfig+0x106c>
 8003e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e12:	2202      	movs	r2, #2
 8003e14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	fa93 f2a3 	rbit	r2, r3
 8003e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003e36:	2202      	movs	r2, #2
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	fa93 f2a3 	rbit	r2, r3
 8003e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	fa93 f2a3 	rbit	r2, r3
 8003e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e70:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003e74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e76:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <HAL_RCC_OscConfig+0x934>)
 8003e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003e82:	2102      	movs	r1, #2
 8003e84:	6019      	str	r1, [r3, #0]
 8003e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	fa93 f1a3 	rbit	r1, r3
 8003e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e98:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003e9c:	6019      	str	r1, [r3, #0]
  return result;
 8003e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	fab3 f383 	clz	r3, r3
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	2101      	movs	r1, #1
 8003eba:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d197      	bne.n	8003df4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 81a1 	beq.w	800421c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee0:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <HAL_RCC_OscConfig+0x934>)
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d116      	bne.n	8003f1a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eec:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <HAL_RCC_OscConfig+0x934>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <HAL_RCC_OscConfig+0x934>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	61d3      	str	r3, [r2, #28]
 8003ef8:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_RCC_OscConfig+0x934>)
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f04:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003f12:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <HAL_RCC_OscConfig+0x93c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d11a      	bne.n	8003f5c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f26:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <HAL_RCC_OscConfig+0x93c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <HAL_RCC_OscConfig+0x93c>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f32:	f7fe fdfd 	bl	8002b30 <HAL_GetTick>
 8003f36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3a:	e009      	b.n	8003f50 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3c:	f7fe fdf8 	bl	8002b30 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b64      	cmp	r3, #100	; 0x64
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e3b1      	b.n	80046b4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <HAL_RCC_OscConfig+0x93c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0ef      	beq.n	8003f3c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d10d      	bne.n	8003f88 <HAL_RCC_OscConfig+0x940>
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HAL_RCC_OscConfig+0x934>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	4a02      	ldr	r2, [pc, #8]	; (8003f7c <HAL_RCC_OscConfig+0x934>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6213      	str	r3, [r2, #32]
 8003f78:	e03c      	b.n	8003ff4 <HAL_RCC_OscConfig+0x9ac>
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	10908120 	.word	0x10908120
 8003f84:	40007000 	.word	0x40007000
 8003f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10c      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x96a>
 8003f98:	4bc1      	ldr	r3, [pc, #772]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	4ac0      	ldr	r2, [pc, #768]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	6213      	str	r3, [r2, #32]
 8003fa4:	4bbe      	ldr	r3, [pc, #760]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	4abd      	ldr	r2, [pc, #756]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8003faa:	f023 0304 	bic.w	r3, r3, #4
 8003fae:	6213      	str	r3, [r2, #32]
 8003fb0:	e020      	b.n	8003ff4 <HAL_RCC_OscConfig+0x9ac>
 8003fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b05      	cmp	r3, #5
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x994>
 8003fc2:	4bb7      	ldr	r3, [pc, #732]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	4ab6      	ldr	r2, [pc, #728]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8003fc8:	f043 0304 	orr.w	r3, r3, #4
 8003fcc:	6213      	str	r3, [r2, #32]
 8003fce:	4bb4      	ldr	r3, [pc, #720]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	4ab3      	ldr	r2, [pc, #716]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	6213      	str	r3, [r2, #32]
 8003fda:	e00b      	b.n	8003ff4 <HAL_RCC_OscConfig+0x9ac>
 8003fdc:	4bb0      	ldr	r3, [pc, #704]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4aaf      	ldr	r2, [pc, #700]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	6213      	str	r3, [r2, #32]
 8003fe8:	4bad      	ldr	r3, [pc, #692]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	4aac      	ldr	r2, [pc, #688]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8003fee:	f023 0304 	bic.w	r3, r3, #4
 8003ff2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8081 	beq.w	8004108 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004006:	f7fe fd93 	bl	8002b30 <HAL_GetTick>
 800400a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400e:	e00b      	b.n	8004028 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004010:	f7fe fd8e 	bl	8002b30 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004020:	4293      	cmp	r3, r2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e345      	b.n	80046b4 <HAL_RCC_OscConfig+0x106c>
 8004028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004030:	2202      	movs	r2, #2
 8004032:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004038:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	fa93 f2a3 	rbit	r2, r3
 8004042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004046:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004050:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004054:	2202      	movs	r2, #2
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	fa93 f2a3 	rbit	r2, r3
 8004066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800406e:	601a      	str	r2, [r3, #0]
  return result;
 8004070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004074:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004078:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d102      	bne.n	8004094 <HAL_RCC_OscConfig+0xa4c>
 800408e:	4b84      	ldr	r3, [pc, #528]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	e013      	b.n	80040bc <HAL_RCC_OscConfig+0xa74>
 8004094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004098:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800409c:	2202      	movs	r2, #2
 800409e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	fa93 f2a3 	rbit	r2, r3
 80040ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	4b79      	ldr	r3, [pc, #484]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80040c4:	2102      	movs	r1, #2
 80040c6:	6011      	str	r1, [r2, #0]
 80040c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	fa92 f1a2 	rbit	r1, r2
 80040d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80040de:	6011      	str	r1, [r2, #0]
  return result;
 80040e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040e4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	fab2 f282 	clz	r2, r2
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	f002 021f 	and.w	r2, r2, #31
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004100:	4013      	ands	r3, r2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d084      	beq.n	8004010 <HAL_RCC_OscConfig+0x9c8>
 8004106:	e07f      	b.n	8004208 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004108:	f7fe fd12 	bl	8002b30 <HAL_GetTick>
 800410c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004110:	e00b      	b.n	800412a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004112:	f7fe fd0d 	bl	8002b30 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e2c4      	b.n	80046b4 <HAL_RCC_OscConfig+0x106c>
 800412a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004132:	2202      	movs	r2, #2
 8004134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800413a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	fa93 f2a3 	rbit	r2, r3
 8004144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004148:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004152:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004156:	2202      	movs	r2, #2
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	fa93 f2a3 	rbit	r2, r3
 8004168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004170:	601a      	str	r2, [r3, #0]
  return result;
 8004172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004176:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800417a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800417c:	fab3 f383 	clz	r3, r3
 8004180:	b2db      	uxtb	r3, r3
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f043 0302 	orr.w	r3, r3, #2
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d102      	bne.n	8004196 <HAL_RCC_OscConfig+0xb4e>
 8004190:	4b43      	ldr	r3, [pc, #268]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	e013      	b.n	80041be <HAL_RCC_OscConfig+0xb76>
 8004196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800419e:	2202      	movs	r2, #2
 80041a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	fa93 f2a3 	rbit	r2, r3
 80041b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	4b39      	ldr	r3, [pc, #228]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80041c6:	2102      	movs	r1, #2
 80041c8:	6011      	str	r1, [r2, #0]
 80041ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	fa92 f1a2 	rbit	r1, r2
 80041d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80041e0:	6011      	str	r1, [r2, #0]
  return result;
 80041e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041e6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	fab2 f282 	clz	r2, r2
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	f002 021f 	and.w	r2, r2, #31
 80041fc:	2101      	movs	r1, #1
 80041fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004202:	4013      	ands	r3, r2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d184      	bne.n	8004112 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004208:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004210:	4b23      	ldr	r3, [pc, #140]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8004216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004220:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8242 	beq.w	80046b2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800422e:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <HAL_RCC_OscConfig+0xc58>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b08      	cmp	r3, #8
 8004238:	f000 8213 	beq.w	8004662 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800423c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004240:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	2b02      	cmp	r3, #2
 800424a:	f040 8162 	bne.w	8004512 <HAL_RCC_OscConfig+0xeca>
 800424e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004252:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004256:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800425a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004260:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	fa93 f2a3 	rbit	r2, r3
 800426a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004272:	601a      	str	r2, [r3, #0]
  return result;
 8004274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004278:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800427c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427e:	fab3 f383 	clz	r3, r3
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004288:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	461a      	mov	r2, r3
 8004290:	2300      	movs	r3, #0
 8004292:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004294:	f7fe fc4c 	bl	8002b30 <HAL_GetTick>
 8004298:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800429c:	e00c      	b.n	80042b8 <HAL_RCC_OscConfig+0xc70>
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a4:	f7fe fc44 	bl	8002b30 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e1fd      	b.n	80046b4 <HAL_RCC_OscConfig+0x106c>
 80042b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042bc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80042c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	fa93 f2a3 	rbit	r2, r3
 80042d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80042dc:	601a      	str	r2, [r3, #0]
  return result;
 80042de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80042e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d102      	bne.n	8004302 <HAL_RCC_OscConfig+0xcba>
 80042fc:	4bb0      	ldr	r3, [pc, #704]	; (80045c0 <HAL_RCC_OscConfig+0xf78>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	e027      	b.n	8004352 <HAL_RCC_OscConfig+0xd0a>
 8004302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004306:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800430a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800430e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004314:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	fa93 f2a3 	rbit	r2, r3
 800431e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004322:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004330:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	fa93 f2a3 	rbit	r2, r3
 8004344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004348:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	4b9c      	ldr	r3, [pc, #624]	; (80045c0 <HAL_RCC_OscConfig+0xf78>)
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004356:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800435a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800435e:	6011      	str	r1, [r2, #0]
 8004360:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004364:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	fa92 f1a2 	rbit	r1, r2
 800436e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004372:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004376:	6011      	str	r1, [r2, #0]
  return result;
 8004378:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800437c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	fab2 f282 	clz	r2, r2
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	f042 0220 	orr.w	r2, r2, #32
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	f002 021f 	and.w	r2, r2, #31
 8004392:	2101      	movs	r1, #1
 8004394:	fa01 f202 	lsl.w	r2, r1, r2
 8004398:	4013      	ands	r3, r2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d182      	bne.n	80042a4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800439e:	4b88      	ldr	r3, [pc, #544]	; (80045c0 <HAL_RCC_OscConfig+0xf78>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	430b      	orrs	r3, r1
 80043c0:	497f      	ldr	r1, [pc, #508]	; (80045c0 <HAL_RCC_OscConfig+0xf78>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	604b      	str	r3, [r1, #4]
 80043c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80043ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	fa93 f2a3 	rbit	r2, r3
 80043e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80043ea:	601a      	str	r2, [r3, #0]
  return result;
 80043ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80043f4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004400:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	461a      	mov	r2, r3
 8004408:	2301      	movs	r3, #1
 800440a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fe fb90 	bl	8002b30 <HAL_GetTick>
 8004410:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004414:	e009      	b.n	800442a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004416:	f7fe fb8b 	bl	8002b30 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e144      	b.n	80046b4 <HAL_RCC_OscConfig+0x106c>
 800442a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004432:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	fa93 f2a3 	rbit	r2, r3
 8004446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800444e:	601a      	str	r2, [r3, #0]
  return result;
 8004450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004454:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004458:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	b2db      	uxtb	r3, r3
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b01      	cmp	r3, #1
 800446c:	d102      	bne.n	8004474 <HAL_RCC_OscConfig+0xe2c>
 800446e:	4b54      	ldr	r3, [pc, #336]	; (80045c0 <HAL_RCC_OscConfig+0xf78>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	e027      	b.n	80044c4 <HAL_RCC_OscConfig+0xe7c>
 8004474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004478:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800447c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004486:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	fa93 f2a3 	rbit	r2, r3
 8004490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004494:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80044a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	fa93 f2a3 	rbit	r2, r3
 80044b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	4b3f      	ldr	r3, [pc, #252]	; (80045c0 <HAL_RCC_OscConfig+0xf78>)
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044c8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80044cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044d0:	6011      	str	r1, [r2, #0]
 80044d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044d6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	fa92 f1a2 	rbit	r1, r2
 80044e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044e4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80044e8:	6011      	str	r1, [r2, #0]
  return result;
 80044ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044ee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	fab2 f282 	clz	r2, r2
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	f042 0220 	orr.w	r2, r2, #32
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	f002 021f 	and.w	r2, r2, #31
 8004504:	2101      	movs	r1, #1
 8004506:	fa01 f202 	lsl.w	r2, r1, r2
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d082      	beq.n	8004416 <HAL_RCC_OscConfig+0xdce>
 8004510:	e0cf      	b.n	80046b2 <HAL_RCC_OscConfig+0x106a>
 8004512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004516:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800451a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800451e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004524:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	fa93 f2a3 	rbit	r2, r3
 800452e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004532:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004536:	601a      	str	r2, [r3, #0]
  return result;
 8004538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800453c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004540:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004542:	fab3 f383 	clz	r3, r3
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800454c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	461a      	mov	r2, r3
 8004554:	2300      	movs	r3, #0
 8004556:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fe faea 	bl	8002b30 <HAL_GetTick>
 800455c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004560:	e009      	b.n	8004576 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004562:	f7fe fae5 	bl	8002b30 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e09e      	b.n	80046b4 <HAL_RCC_OscConfig+0x106c>
 8004576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800457a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800457e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004582:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004588:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	fa93 f2a3 	rbit	r2, r3
 8004592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004596:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800459a:	601a      	str	r2, [r3, #0]
  return result;
 800459c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80045a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a6:	fab3 f383 	clz	r3, r3
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d104      	bne.n	80045c4 <HAL_RCC_OscConfig+0xf7c>
 80045ba:	4b01      	ldr	r3, [pc, #4]	; (80045c0 <HAL_RCC_OscConfig+0xf78>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	e029      	b.n	8004614 <HAL_RCC_OscConfig+0xfcc>
 80045c0:	40021000 	.word	0x40021000
 80045c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80045cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	fa93 f2a3 	rbit	r2, r3
 80045e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80045f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	fa93 f2a3 	rbit	r2, r3
 8004606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800460a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	4b2b      	ldr	r3, [pc, #172]	; (80046c0 <HAL_RCC_OscConfig+0x1078>)
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004618:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800461c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004620:	6011      	str	r1, [r2, #0]
 8004622:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004626:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	fa92 f1a2 	rbit	r1, r2
 8004630:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004634:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004638:	6011      	str	r1, [r2, #0]
  return result;
 800463a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800463e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	fab2 f282 	clz	r2, r2
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	f042 0220 	orr.w	r2, r2, #32
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	f002 021f 	and.w	r2, r2, #31
 8004654:	2101      	movs	r1, #1
 8004656:	fa01 f202 	lsl.w	r2, r1, r2
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d180      	bne.n	8004562 <HAL_RCC_OscConfig+0xf1a>
 8004660:	e027      	b.n	80046b2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004666:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e01e      	b.n	80046b4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <HAL_RCC_OscConfig+0x1078>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800467e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004682:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	429a      	cmp	r2, r3
 8004694:	d10b      	bne.n	80046ae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004696:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800469a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800469e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000

080046c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b09e      	sub	sp, #120	; 0x78
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e162      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046dc:	4b90      	ldr	r3, [pc, #576]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d910      	bls.n	800470c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b8d      	ldr	r3, [pc, #564]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 0207 	bic.w	r2, r3, #7
 80046f2:	498b      	ldr	r1, [pc, #556]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b89      	ldr	r3, [pc, #548]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e14a      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004718:	4b82      	ldr	r3, [pc, #520]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	497f      	ldr	r1, [pc, #508]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80dc 	beq.w	80048f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d13c      	bne.n	80047ba <HAL_RCC_ClockConfig+0xf6>
 8004740:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004744:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004748:	fa93 f3a3 	rbit	r3, r3
 800474c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800474e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004750:	fab3 f383 	clz	r3, r3
 8004754:	b2db      	uxtb	r3, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d102      	bne.n	800476a <HAL_RCC_ClockConfig+0xa6>
 8004764:	4b6f      	ldr	r3, [pc, #444]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	e00f      	b.n	800478a <HAL_RCC_ClockConfig+0xc6>
 800476a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800476e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004772:	fa93 f3a3 	rbit	r3, r3
 8004776:	667b      	str	r3, [r7, #100]	; 0x64
 8004778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800477c:	663b      	str	r3, [r7, #96]	; 0x60
 800477e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004780:	fa93 f3a3 	rbit	r3, r3
 8004784:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004786:	4b67      	ldr	r3, [pc, #412]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800478e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004792:	fa92 f2a2 	rbit	r2, r2
 8004796:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004798:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800479a:	fab2 f282 	clz	r2, r2
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	f042 0220 	orr.w	r2, r2, #32
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	f002 021f 	and.w	r2, r2, #31
 80047aa:	2101      	movs	r1, #1
 80047ac:	fa01 f202 	lsl.w	r2, r1, r2
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d17b      	bne.n	80048ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e0f3      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d13c      	bne.n	800483c <HAL_RCC_ClockConfig+0x178>
 80047c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ca:	fa93 f3a3 	rbit	r3, r3
 80047ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80047d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d2:	fab3 f383 	clz	r3, r3
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d102      	bne.n	80047ec <HAL_RCC_ClockConfig+0x128>
 80047e6:	4b4f      	ldr	r3, [pc, #316]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	e00f      	b.n	800480c <HAL_RCC_ClockConfig+0x148>
 80047ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f4:	fa93 f3a3 	rbit	r3, r3
 80047f8:	647b      	str	r3, [r7, #68]	; 0x44
 80047fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004802:	fa93 f3a3 	rbit	r3, r3
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004808:	4b46      	ldr	r3, [pc, #280]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004810:	63ba      	str	r2, [r7, #56]	; 0x38
 8004812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004814:	fa92 f2a2 	rbit	r2, r2
 8004818:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800481a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800481c:	fab2 f282 	clz	r2, r2
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	f042 0220 	orr.w	r2, r2, #32
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	f002 021f 	and.w	r2, r2, #31
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f202 	lsl.w	r2, r1, r2
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d13a      	bne.n	80048ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0b2      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
 800483c:	2302      	movs	r3, #2
 800483e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484a:	fab3 f383 	clz	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	d102      	bne.n	8004864 <HAL_RCC_ClockConfig+0x1a0>
 800485e:	4b31      	ldr	r3, [pc, #196]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	e00d      	b.n	8004880 <HAL_RCC_ClockConfig+0x1bc>
 8004864:	2302      	movs	r3, #2
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
 8004870:	2302      	movs	r3, #2
 8004872:	623b      	str	r3, [r7, #32]
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	4b29      	ldr	r3, [pc, #164]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	2202      	movs	r2, #2
 8004882:	61ba      	str	r2, [r7, #24]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	fa92 f2a2 	rbit	r2, r2
 800488a:	617a      	str	r2, [r7, #20]
  return result;
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	fab2 f282 	clz	r2, r2
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	f042 0220 	orr.w	r2, r2, #32
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	f002 021f 	and.w	r2, r2, #31
 800489e:	2101      	movs	r1, #1
 80048a0:	fa01 f202 	lsl.w	r2, r1, r2
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e079      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ae:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f023 0203 	bic.w	r2, r3, #3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	491a      	ldr	r1, [pc, #104]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048c0:	f7fe f936 	bl	8002b30 <HAL_GetTick>
 80048c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c6:	e00a      	b.n	80048de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c8:	f7fe f932 	bl	8002b30 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e061      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048de:	4b11      	ldr	r3, [pc, #68]	; (8004924 <HAL_RCC_ClockConfig+0x260>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 020c 	and.w	r2, r3, #12
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d1eb      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d214      	bcs.n	8004928 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b08      	ldr	r3, [pc, #32]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 0207 	bic.w	r2, r3, #7
 8004906:	4906      	ldr	r1, [pc, #24]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <HAL_RCC_ClockConfig+0x25c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d005      	beq.n	8004928 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e040      	b.n	80049a2 <HAL_RCC_ClockConfig+0x2de>
 8004920:	40022000 	.word	0x40022000
 8004924:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <HAL_RCC_ClockConfig+0x2e8>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	491a      	ldr	r1, [pc, #104]	; (80049ac <HAL_RCC_ClockConfig+0x2e8>)
 8004942:	4313      	orrs	r3, r2
 8004944:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004952:	4b16      	ldr	r3, [pc, #88]	; (80049ac <HAL_RCC_ClockConfig+0x2e8>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4912      	ldr	r1, [pc, #72]	; (80049ac <HAL_RCC_ClockConfig+0x2e8>)
 8004962:	4313      	orrs	r3, r2
 8004964:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004966:	f000 f829 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 800496a:	4601      	mov	r1, r0
 800496c:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <HAL_RCC_ClockConfig+0x2e8>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004974:	22f0      	movs	r2, #240	; 0xf0
 8004976:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	fa92 f2a2 	rbit	r2, r2
 800497e:	60fa      	str	r2, [r7, #12]
  return result;
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	fab2 f282 	clz	r2, r2
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	40d3      	lsrs	r3, r2
 800498a:	4a09      	ldr	r2, [pc, #36]	; (80049b0 <HAL_RCC_ClockConfig+0x2ec>)
 800498c:	5cd3      	ldrb	r3, [r2, r3]
 800498e:	fa21 f303 	lsr.w	r3, r1, r3
 8004992:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <HAL_RCC_ClockConfig+0x2f0>)
 8004994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004996:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <HAL_RCC_ClockConfig+0x2f4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe f884 	bl	8002aa8 <HAL_InitTick>
  
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3778      	adds	r7, #120	; 0x78
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	080087a4 	.word	0x080087a4
 80049b4:	200000fc 	.word	0x200000fc
 80049b8:	20000100 	.word	0x20000100

080049bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	b08b      	sub	sp, #44	; 0x2c
 80049c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	2300      	movs	r3, #0
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80049d6:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <HAL_RCC_GetSysClockFreq+0xc0>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d002      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0x30>
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d003      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0x36>
 80049ea:	e03c      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049ec:	4b24      	ldr	r3, [pc, #144]	; (8004a80 <HAL_RCC_GetSysClockFreq+0xc4>)
 80049ee:	623b      	str	r3, [r7, #32]
      break;
 80049f0:	e03c      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80049f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80049fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	fa92 f2a2 	rbit	r2, r2
 8004a04:	607a      	str	r2, [r7, #4]
  return result;
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	fab2 f282 	clz	r2, r2
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	40d3      	lsrs	r3, r2
 8004a10:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a12:	5cd3      	ldrb	r3, [r2, r3]
 8004a14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004a16:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	220f      	movs	r2, #15
 8004a20:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	fa92 f2a2 	rbit	r2, r2
 8004a28:	60fa      	str	r2, [r7, #12]
  return result;
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	fab2 f282 	clz	r2, r2
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	40d3      	lsrs	r3, r2
 8004a34:	4a14      	ldr	r2, [pc, #80]	; (8004a88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a36:	5cd3      	ldrb	r3, [r2, r3]
 8004a38:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a44:	4a0e      	ldr	r2, [pc, #56]	; (8004a80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
 8004a54:	e004      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	4a0c      	ldr	r2, [pc, #48]	; (8004a8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	623b      	str	r3, [r7, #32]
      break;
 8004a64:	e002      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a68:	623b      	str	r3, [r7, #32]
      break;
 8004a6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	372c      	adds	r7, #44	; 0x2c
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	007a1200 	.word	0x007a1200
 8004a84:	080087bc 	.word	0x080087bc
 8004a88:	080087cc 	.word	0x080087cc
 8004a8c:	003d0900 	.word	0x003d0900

08004a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a94:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a96:	681b      	ldr	r3, [r3, #0]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	200000fc 	.word	0x200000fc

08004aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004aae:	f7ff ffef 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004ab2:	4601      	mov	r1, r0
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004abc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004ac0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	fa92 f2a2 	rbit	r2, r2
 8004ac8:	603a      	str	r2, [r7, #0]
  return result;
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	fab2 f282 	clz	r2, r2
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	40d3      	lsrs	r3, r2
 8004ad4:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004ad6:	5cd3      	ldrb	r3, [r2, r3]
 8004ad8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	080087b4 	.word	0x080087b4

08004aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004af2:	f7ff ffcd 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004af6:	4601      	mov	r1, r0
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004b00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004b04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	fa92 f2a2 	rbit	r2, r2
 8004b0c:	603a      	str	r2, [r7, #0]
  return result;
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	fab2 f282 	clz	r2, r2
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	40d3      	lsrs	r3, r2
 8004b18:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004b1a:	5cd3      	ldrb	r3, [r2, r3]
 8004b1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	080087b4 	.word	0x080087b4

08004b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b092      	sub	sp, #72	; 0x48
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80d4 	beq.w	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b54:	4b4e      	ldr	r3, [pc, #312]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10e      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b60:	4b4b      	ldr	r3, [pc, #300]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	4a4a      	ldr	r2, [pc, #296]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	61d3      	str	r3, [r2, #28]
 8004b6c:	4b48      	ldr	r3, [pc, #288]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7e:	4b45      	ldr	r3, [pc, #276]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d118      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b8a:	4b42      	ldr	r3, [pc, #264]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a41      	ldr	r2, [pc, #260]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b96:	f7fd ffcb 	bl	8002b30 <HAL_GetTick>
 8004b9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b9e:	f7fd ffc7 	bl	8002b30 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b64      	cmp	r3, #100	; 0x64
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e169      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb0:	4b38      	ldr	r3, [pc, #224]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bbc:	4b34      	ldr	r3, [pc, #208]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8084 	beq.w	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d07c      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bdc:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bf6:	fab3 f383 	clz	r3, r3
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4b26      	ldr	r3, [pc, #152]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	461a      	mov	r2, r3
 8004c06:	2301      	movs	r3, #1
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	fa93 f3a3 	rbit	r3, r3
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c1a:	fab3 f383 	clz	r3, r3
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c2e:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d04b      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3e:	f7fd ff77 	bl	8002b30 <HAL_GetTick>
 8004c42:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c44:	e00a      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fd ff73 	bl	8002b30 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e113      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	fa93 f3a3 	rbit	r3, r3
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
 8004c68:	2302      	movs	r3, #2
 8004c6a:	623b      	str	r3, [r7, #32]
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	fa93 f3a3 	rbit	r3, r3
 8004c72:	61fb      	str	r3, [r7, #28]
  return result;
 8004c74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c76:	fab3 f383 	clz	r3, r3
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f043 0302 	orr.w	r3, r3, #2
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d108      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c8a:	4b01      	ldr	r3, [pc, #4]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	e00d      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40007000 	.word	0x40007000
 8004c98:	10908100 	.word	0x10908100
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	fa93 f3a3 	rbit	r3, r3
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	4b78      	ldr	r3, [pc, #480]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	2202      	movs	r2, #2
 8004cae:	613a      	str	r2, [r7, #16]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	fa92 f2a2 	rbit	r2, r2
 8004cb6:	60fa      	str	r2, [r7, #12]
  return result;
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	fab2 f282 	clz	r2, r2
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	f002 021f 	and.w	r2, r2, #31
 8004cca:	2101      	movs	r1, #1
 8004ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0b7      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004cd6:	4b6d      	ldr	r3, [pc, #436]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	496a      	ldr	r1, [pc, #424]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ce8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d105      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf0:	4b66      	ldr	r3, [pc, #408]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	4a65      	ldr	r2, [pc, #404]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d08:	4b60      	ldr	r3, [pc, #384]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	f023 0203 	bic.w	r2, r3, #3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	495d      	ldr	r1, [pc, #372]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d008      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d26:	4b59      	ldr	r3, [pc, #356]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	4956      	ldr	r1, [pc, #344]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d44:	4b51      	ldr	r3, [pc, #324]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	494e      	ldr	r1, [pc, #312]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d62:	4b4a      	ldr	r3, [pc, #296]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	f023 0210 	bic.w	r2, r3, #16
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	4947      	ldr	r1, [pc, #284]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004d80:	4b42      	ldr	r3, [pc, #264]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	493f      	ldr	r1, [pc, #252]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d9e:	4b3b      	ldr	r3, [pc, #236]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	f023 0220 	bic.w	r2, r3, #32
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	4938      	ldr	r1, [pc, #224]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dbc:	4b33      	ldr	r3, [pc, #204]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	4930      	ldr	r1, [pc, #192]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dda:	4b2c      	ldr	r3, [pc, #176]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	4929      	ldr	r1, [pc, #164]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004df8:	4b24      	ldr	r3, [pc, #144]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	4921      	ldr	r1, [pc, #132]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e16:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	491a      	ldr	r1, [pc, #104]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	4912      	ldr	r1, [pc, #72]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e52:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	490b      	ldr	r1, [pc, #44]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7c:	4903      	ldr	r1, [pc, #12]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3748      	adds	r7, #72	; 0x48
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40021000 	.word	0x40021000

08004e90 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e073      	b.n	8004f8e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	7f5b      	ldrb	r3, [r3, #29]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fd fb48 	bl	800254c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d055      	beq.n	8004f7c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	22ca      	movs	r2, #202	; 0xca
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2253      	movs	r2, #83	; 0x53
 8004ede:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f977 	bl	80051d4 <RTC_EnterInitMode>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d12c      	bne.n	8004f4a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f02:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6899      	ldr	r1, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	68d2      	ldr	r2, [r2, #12]
 8004f2a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6919      	ldr	r1, [r3, #16]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	041a      	lsls	r2, r3, #16
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f97e 	bl	8005242 <RTC_ExitInitMode>
 8004f46:	4603      	mov	r3, r0
 8004f48:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d110      	bne.n	8004f72 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f5e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	22ff      	movs	r2, #255	; 0xff
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24
 8004f7a:	e001      	b.n	8004f80 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f96:	b590      	push	{r4, r7, lr}
 8004f98:	b087      	sub	sp, #28
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	7f1b      	ldrb	r3, [r3, #28]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_RTC_SetTime+0x1c>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e087      	b.n	80050c2 <HAL_RTC_SetTime+0x12c>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d126      	bne.n	8005012 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d102      	bne.n	8004fd8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 f955 	bl	800528c <RTC_ByteToBcd2>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f94e 	bl	800528c <RTC_ByteToBcd2>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ff4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	789b      	ldrb	r3, [r3, #2]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 f946 	bl	800528c <RTC_ByteToBcd2>
 8005000:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005002:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	78db      	ldrb	r3, [r3, #3]
 800500a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e018      	b.n	8005044 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005032:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005038:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	78db      	ldrb	r3, [r3, #3]
 800503e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	22ca      	movs	r2, #202	; 0xca
 800504a:	625a      	str	r2, [r3, #36]	; 0x24
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2253      	movs	r2, #83	; 0x53
 8005052:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f8bd 	bl	80051d4 <RTC_EnterInitMode>
 800505a:	4603      	mov	r3, r0
 800505c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800505e:	7cfb      	ldrb	r3, [r7, #19]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d120      	bne.n	80050a6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800506e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005072:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005082:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6899      	ldr	r1, [r3, #8]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	431a      	orrs	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f8d0 	bl	8005242 <RTC_ExitInitMode>
 80050a2:	4603      	mov	r3, r0
 80050a4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80050a6:	7cfb      	ldrb	r3, [r7, #19]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d102      	bne.n	80050b2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	22ff      	movs	r2, #255	; 0xff
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	771a      	strb	r2, [r3, #28]

  return status;
 80050c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd90      	pop	{r4, r7, pc}

080050ca <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b086      	sub	sp, #24
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80050fc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005100:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	0c1b      	lsrs	r3, r3, #16
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800510c:	b2da      	uxtb	r2, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	0a1b      	lsrs	r3, r3, #8
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800511c:	b2da      	uxtb	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800512a:	b2da      	uxtb	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	0d9b      	lsrs	r3, r3, #22
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	b2da      	uxtb	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d11a      	bne.n	800517c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f000 f8bc 	bl	80052c8 <RTC_Bcd2ToByte>
 8005150:	4603      	mov	r3, r0
 8005152:	461a      	mov	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	785b      	ldrb	r3, [r3, #1]
 800515c:	4618      	mov	r0, r3
 800515e:	f000 f8b3 	bl	80052c8 <RTC_Bcd2ToByte>
 8005162:	4603      	mov	r3, r0
 8005164:	461a      	mov	r2, r3
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	789b      	ldrb	r3, [r3, #2]
 800516e:	4618      	mov	r0, r3
 8005170:	f000 f8aa 	bl	80052c8 <RTC_Bcd2ToByte>
 8005174:	4603      	mov	r3, r0
 8005176:	461a      	mov	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a0d      	ldr	r2, [pc, #52]	; (80051d0 <HAL_RTC_WaitForSynchro+0x48>)
 800519a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800519c:	f7fd fcc8 	bl	8002b30 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051a2:	e009      	b.n	80051b8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051a4:	f7fd fcc4 	bl	8002b30 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051b2:	d901      	bls.n	80051b8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e007      	b.n	80051c8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0ee      	beq.n	80051a4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	0001ff5f 	.word	0x0001ff5f

080051d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d122      	bne.n	8005238 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005200:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005202:	f7fd fc95 	bl	8002b30 <HAL_GetTick>
 8005206:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005208:	e00c      	b.n	8005224 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800520a:	f7fd fc91 	bl	8002b30 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005218:	d904      	bls.n	8005224 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2204      	movs	r2, #4
 800521e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d102      	bne.n	8005238 <RTC_EnterInitMode+0x64>
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d1e8      	bne.n	800520a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005238:	7bfb      	ldrb	r3, [r7, #15]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800525c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff ff8b 	bl	8005188 <HAL_RTC_WaitForSynchro>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d004      	beq.n	8005282 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2204      	movs	r2, #4
 800527c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800529a:	e005      	b.n	80052a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	3b0a      	subs	r3, #10
 80052a6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	2b09      	cmp	r3, #9
 80052ac:	d8f6      	bhi.n	800529c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	b2db      	uxtb	r3, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	091b      	lsrs	r3, r3, #4
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	4413      	add	r3, r2
 80052f6:	b2db      	uxtb	r3, r3
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e09d      	b.n	8005452 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	2b00      	cmp	r3, #0
 800531c:	d108      	bne.n	8005330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005326:	d009      	beq.n	800533c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	61da      	str	r2, [r3, #28]
 800532e:	e005      	b.n	800533c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fd f91e 	bl	8002598 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005372:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800537c:	d902      	bls.n	8005384 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	e002      	b.n	800538a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005388:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005392:	d007      	beq.n	80053a4 <HAL_SPI_Init+0xa0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800539c:	d002      	beq.n	80053a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e6:	ea42 0103 	orr.w	r1, r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	0c1b      	lsrs	r3, r3, #16
 8005400:	f003 0204 	and.w	r2, r3, #4
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005420:	ea42 0103 	orr.w	r1, r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005440:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b082      	sub	sp, #8
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e049      	b.n	8005500 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d106      	bne.n	8005486 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7fd f8cb 	bl	800261c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2202      	movs	r2, #2
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3304      	adds	r3, #4
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f000 faaf 	bl	80059fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	d001      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e04a      	b.n	80055b6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <HAL_TIM_Base_Start_IT+0xbc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d018      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x6c>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554a:	d013      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x6c>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1d      	ldr	r2, [pc, #116]	; (80055c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00e      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x6c>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1c      	ldr	r2, [pc, #112]	; (80055cc <HAL_TIM_Base_Start_IT+0xc4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d009      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x6c>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a1a      	ldr	r2, [pc, #104]	; (80055d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x6c>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a19      	ldr	r2, [pc, #100]	; (80055d4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d115      	bne.n	80055a0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	4b17      	ldr	r3, [pc, #92]	; (80055d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800557c:	4013      	ands	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b06      	cmp	r3, #6
 8005584:	d015      	beq.n	80055b2 <HAL_TIM_Base_Start_IT+0xaa>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558c:	d011      	beq.n	80055b2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0201 	orr.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559e:	e008      	b.n	80055b2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	e000      	b.n	80055b4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40013400 	.word	0x40013400
 80055d4:	40014000 	.word	0x40014000
 80055d8:	00010007 	.word	0x00010007

080055dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d122      	bne.n	8005638 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d11b      	bne.n	8005638 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0202 	mvn.w	r2, #2
 8005608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f9ce 	bl	80059c0 <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f9c0 	bl	80059ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f9d1 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b04      	cmp	r3, #4
 8005644:	d122      	bne.n	800568c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b04      	cmp	r3, #4
 8005652:	d11b      	bne.n	800568c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0204 	mvn.w	r2, #4
 800565c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2202      	movs	r2, #2
 8005662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f9a4 	bl	80059c0 <HAL_TIM_IC_CaptureCallback>
 8005678:	e005      	b.n	8005686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f996 	bl	80059ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f9a7 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b08      	cmp	r3, #8
 8005698:	d122      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d11b      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0208 	mvn.w	r2, #8
 80056b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2204      	movs	r2, #4
 80056b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f97a 	bl	80059c0 <HAL_TIM_IC_CaptureCallback>
 80056cc:	e005      	b.n	80056da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f96c 	bl	80059ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f97d 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b10      	cmp	r3, #16
 80056ec:	d122      	bne.n	8005734 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d11b      	bne.n	8005734 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0210 	mvn.w	r2, #16
 8005704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2208      	movs	r2, #8
 800570a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f950 	bl	80059c0 <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f942 	bl	80059ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f953 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b01      	cmp	r3, #1
 8005740:	d10e      	bne.n	8005760 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b01      	cmp	r3, #1
 800574e:	d107      	bne.n	8005760 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0201 	mvn.w	r2, #1
 8005758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fc fada 	bl	8001d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576a:	2b80      	cmp	r3, #128	; 0x80
 800576c:	d10e      	bne.n	800578c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005778:	2b80      	cmp	r3, #128	; 0x80
 800577a:	d107      	bne.n	800578c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 faec 	bl	8005d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579a:	d10e      	bne.n	80057ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a6:	2b80      	cmp	r3, #128	; 0x80
 80057a8:	d107      	bne.n	80057ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fadf 	bl	8005d78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c4:	2b40      	cmp	r3, #64	; 0x40
 80057c6:	d10e      	bne.n	80057e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d2:	2b40      	cmp	r3, #64	; 0x40
 80057d4:	d107      	bne.n	80057e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f901 	bl	80059e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d10e      	bne.n	8005812 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d107      	bne.n	8005812 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f06f 0220 	mvn.w	r2, #32
 800580a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fa9f 	bl	8005d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005812:	bf00      	nop
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <HAL_TIM_ConfigClockSource+0x1c>
 8005832:	2302      	movs	r3, #2
 8005834:	e0b6      	b.n	80059a4 <HAL_TIM_ConfigClockSource+0x18a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005854:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005858:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005860:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005872:	d03e      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0xd8>
 8005874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005878:	f200 8087 	bhi.w	800598a <HAL_TIM_ConfigClockSource+0x170>
 800587c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005880:	f000 8086 	beq.w	8005990 <HAL_TIM_ConfigClockSource+0x176>
 8005884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005888:	d87f      	bhi.n	800598a <HAL_TIM_ConfigClockSource+0x170>
 800588a:	2b70      	cmp	r3, #112	; 0x70
 800588c:	d01a      	beq.n	80058c4 <HAL_TIM_ConfigClockSource+0xaa>
 800588e:	2b70      	cmp	r3, #112	; 0x70
 8005890:	d87b      	bhi.n	800598a <HAL_TIM_ConfigClockSource+0x170>
 8005892:	2b60      	cmp	r3, #96	; 0x60
 8005894:	d050      	beq.n	8005938 <HAL_TIM_ConfigClockSource+0x11e>
 8005896:	2b60      	cmp	r3, #96	; 0x60
 8005898:	d877      	bhi.n	800598a <HAL_TIM_ConfigClockSource+0x170>
 800589a:	2b50      	cmp	r3, #80	; 0x50
 800589c:	d03c      	beq.n	8005918 <HAL_TIM_ConfigClockSource+0xfe>
 800589e:	2b50      	cmp	r3, #80	; 0x50
 80058a0:	d873      	bhi.n	800598a <HAL_TIM_ConfigClockSource+0x170>
 80058a2:	2b40      	cmp	r3, #64	; 0x40
 80058a4:	d058      	beq.n	8005958 <HAL_TIM_ConfigClockSource+0x13e>
 80058a6:	2b40      	cmp	r3, #64	; 0x40
 80058a8:	d86f      	bhi.n	800598a <HAL_TIM_ConfigClockSource+0x170>
 80058aa:	2b30      	cmp	r3, #48	; 0x30
 80058ac:	d064      	beq.n	8005978 <HAL_TIM_ConfigClockSource+0x15e>
 80058ae:	2b30      	cmp	r3, #48	; 0x30
 80058b0:	d86b      	bhi.n	800598a <HAL_TIM_ConfigClockSource+0x170>
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d060      	beq.n	8005978 <HAL_TIM_ConfigClockSource+0x15e>
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d867      	bhi.n	800598a <HAL_TIM_ConfigClockSource+0x170>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d05c      	beq.n	8005978 <HAL_TIM_ConfigClockSource+0x15e>
 80058be:	2b10      	cmp	r3, #16
 80058c0:	d05a      	beq.n	8005978 <HAL_TIM_ConfigClockSource+0x15e>
 80058c2:	e062      	b.n	800598a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	6899      	ldr	r1, [r3, #8]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f000 f99c 	bl	8005c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	609a      	str	r2, [r3, #8]
      break;
 80058f0:	e04f      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6899      	ldr	r1, [r3, #8]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f000 f985 	bl	8005c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005914:	609a      	str	r2, [r3, #8]
      break;
 8005916:	e03c      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	6859      	ldr	r1, [r3, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	461a      	mov	r2, r3
 8005926:	f000 f8f9 	bl	8005b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2150      	movs	r1, #80	; 0x50
 8005930:	4618      	mov	r0, r3
 8005932:	f000 f952 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 8005936:	e02c      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	6859      	ldr	r1, [r3, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	461a      	mov	r2, r3
 8005946:	f000 f918 	bl	8005b7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2160      	movs	r1, #96	; 0x60
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f942 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 8005956:	e01c      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	6859      	ldr	r1, [r3, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	461a      	mov	r2, r3
 8005966:	f000 f8d9 	bl	8005b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2140      	movs	r1, #64	; 0x40
 8005970:	4618      	mov	r0, r3
 8005972:	f000 f932 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 8005976:	e00c      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4619      	mov	r1, r3
 8005982:	4610      	mov	r0, r2
 8005984:	f000 f929 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 8005988:	e003      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	73fb      	strb	r3, [r7, #15]
      break;
 800598e:	e000      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005990:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3c      	ldr	r2, [pc, #240]	; (8005b00 <TIM_Base_SetConfig+0x104>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00f      	beq.n	8005a34 <TIM_Base_SetConfig+0x38>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1a:	d00b      	beq.n	8005a34 <TIM_Base_SetConfig+0x38>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a39      	ldr	r2, [pc, #228]	; (8005b04 <TIM_Base_SetConfig+0x108>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d007      	beq.n	8005a34 <TIM_Base_SetConfig+0x38>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a38      	ldr	r2, [pc, #224]	; (8005b08 <TIM_Base_SetConfig+0x10c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_Base_SetConfig+0x38>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a37      	ldr	r2, [pc, #220]	; (8005b0c <TIM_Base_SetConfig+0x110>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d108      	bne.n	8005a46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a2d      	ldr	r2, [pc, #180]	; (8005b00 <TIM_Base_SetConfig+0x104>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01b      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a54:	d017      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a2a      	ldr	r2, [pc, #168]	; (8005b04 <TIM_Base_SetConfig+0x108>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a29      	ldr	r2, [pc, #164]	; (8005b08 <TIM_Base_SetConfig+0x10c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00f      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a28      	ldr	r2, [pc, #160]	; (8005b0c <TIM_Base_SetConfig+0x110>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00b      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a27      	ldr	r2, [pc, #156]	; (8005b10 <TIM_Base_SetConfig+0x114>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a26      	ldr	r2, [pc, #152]	; (8005b14 <TIM_Base_SetConfig+0x118>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a25      	ldr	r2, [pc, #148]	; (8005b18 <TIM_Base_SetConfig+0x11c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d108      	bne.n	8005a98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a10      	ldr	r2, [pc, #64]	; (8005b00 <TIM_Base_SetConfig+0x104>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00f      	beq.n	8005ae4 <TIM_Base_SetConfig+0xe8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a11      	ldr	r2, [pc, #68]	; (8005b0c <TIM_Base_SetConfig+0x110>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00b      	beq.n	8005ae4 <TIM_Base_SetConfig+0xe8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a10      	ldr	r2, [pc, #64]	; (8005b10 <TIM_Base_SetConfig+0x114>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d007      	beq.n	8005ae4 <TIM_Base_SetConfig+0xe8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a0f      	ldr	r2, [pc, #60]	; (8005b14 <TIM_Base_SetConfig+0x118>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_Base_SetConfig+0xe8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a0e      	ldr	r2, [pc, #56]	; (8005b18 <TIM_Base_SetConfig+0x11c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d103      	bne.n	8005aec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	615a      	str	r2, [r3, #20]
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40013400 	.word	0x40013400
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40014400 	.word	0x40014400
 8005b18:	40014800 	.word	0x40014800

08005b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f023 0201 	bic.w	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 030a 	bic.w	r3, r3, #10
 8005b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b087      	sub	sp, #28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f023 0210 	bic.w	r2, r3, #16
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	031b      	lsls	r3, r3, #12
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f043 0307 	orr.w	r3, r3, #7
 8005bfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	609a      	str	r2, [r3, #8]
}
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	021a      	lsls	r2, r3, #8
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	609a      	str	r2, [r3, #8]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e063      	b.n	8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a2b      	ldr	r2, [pc, #172]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d004      	beq.n	8005c9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2a      	ldr	r2, [pc, #168]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d108      	bne.n	8005cae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ca2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1b      	ldr	r2, [pc, #108]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d018      	beq.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cda:	d013      	beq.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a18      	ldr	r2, [pc, #96]	; (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00e      	beq.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a17      	ldr	r2, [pc, #92]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d009      	beq.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a12      	ldr	r2, [pc, #72]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a13      	ldr	r2, [pc, #76]	; (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d10c      	bne.n	8005d1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40013400 	.word	0x40013400
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40014000 	.word	0x40014000

08005d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e040      	b.n	8005e20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fc fc5a 	bl	8002668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2224      	movs	r2, #36	; 0x24
 8005db8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0201 	bic.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fb76 	bl	80064bc <UART_SetConfig>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e022      	b.n	8005e20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fd3e 	bl	8006864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fdc5 	bl	80069a8 <UART_CheckIdleState>
 8005e1e:	4603      	mov	r3, r0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	4613      	mov	r3, r2
 8005e34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d132      	bne.n	8005ea6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <HAL_UART_Receive_IT+0x24>
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e02b      	b.n	8005ea8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d018      	beq.n	8005e96 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	613b      	str	r3, [r7, #16]
   return(result);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	623b      	str	r3, [r7, #32]
 8005e84:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	69f9      	ldr	r1, [r7, #28]
 8005e88:	6a3a      	ldr	r2, [r7, #32]
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e6      	bne.n	8005e64 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e96:	88fb      	ldrh	r3, [r7, #6]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fe93 	bl	8006bc8 <UART_Start_Receive_IT>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	e000      	b.n	8005ea8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005ea6:	2302      	movs	r3, #2
  }
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3728      	adds	r7, #40	; 0x28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b0ba      	sub	sp, #232	; 0xe8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ed6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005eda:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ede:	4013      	ands	r3, r2
 8005ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ee4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d115      	bne.n	8005f18 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00f      	beq.n	8005f18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d009      	beq.n	8005f18 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 82ab 	beq.w	8006464 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	4798      	blx	r3
      }
      return;
 8005f16:	e2a5      	b.n	8006464 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8117 	beq.w	8006150 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f32:	4b85      	ldr	r3, [pc, #532]	; (8006148 <HAL_UART_IRQHandler+0x298>)
 8005f34:	4013      	ands	r3, r2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 810a 	beq.w	8006150 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d011      	beq.n	8005f6c <HAL_UART_IRQHandler+0xbc>
 8005f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f62:	f043 0201 	orr.w	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d011      	beq.n	8005f9c <HAL_UART_IRQHandler+0xec>
 8005f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f92:	f043 0204 	orr.w	r2, r3, #4
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d011      	beq.n	8005fcc <HAL_UART_IRQHandler+0x11c>
 8005fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2204      	movs	r2, #4
 8005fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc2:	f043 0202 	orr.w	r2, r3, #2
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d017      	beq.n	8006008 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d105      	bne.n	8005ff0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fe8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00b      	beq.n	8006008 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ffe:	f043 0208 	orr.w	r2, r3, #8
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006010:	2b00      	cmp	r3, #0
 8006012:	d012      	beq.n	800603a <HAL_UART_IRQHandler+0x18a>
 8006014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006018:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00c      	beq.n	800603a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006028:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006030:	f043 0220 	orr.w	r2, r3, #32
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8211 	beq.w	8006468 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00d      	beq.n	800606e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006074:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	d005      	beq.n	8006092 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800608a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800608e:	2b00      	cmp	r3, #0
 8006090:	d04f      	beq.n	8006132 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fe4c 	bl	8006d30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	d141      	bne.n	800612a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3308      	adds	r3, #8
 80060ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80060bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3308      	adds	r3, #8
 80060ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1d9      	bne.n	80060a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d013      	beq.n	8006122 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fe:	4a13      	ldr	r2, [pc, #76]	; (800614c <HAL_UART_IRQHandler+0x29c>)
 8006100:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006106:	4618      	mov	r0, r3
 8006108:	f7fc fe8c 	bl	8002e24 <HAL_DMA_Abort_IT>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d017      	beq.n	8006142 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800611c:	4610      	mov	r0, r2
 800611e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006120:	e00f      	b.n	8006142 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f9b4 	bl	8006490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006128:	e00b      	b.n	8006142 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f9b0 	bl	8006490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006130:	e007      	b.n	8006142 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f9ac 	bl	8006490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006140:	e192      	b.n	8006468 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006142:	bf00      	nop
    return;
 8006144:	e190      	b.n	8006468 <HAL_UART_IRQHandler+0x5b8>
 8006146:	bf00      	nop
 8006148:	04000120 	.word	0x04000120
 800614c:	08006df9 	.word	0x08006df9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006154:	2b01      	cmp	r3, #1
 8006156:	f040 814b 	bne.w	80063f0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800615a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615e:	f003 0310 	and.w	r3, r3, #16
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 8144 	beq.w	80063f0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 813d 	beq.w	80063f0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2210      	movs	r2, #16
 800617c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	f040 80b5 	bne.w	80062f8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800619a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 8164 	beq.w	800646c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061ae:	429a      	cmp	r2, r3
 80061b0:	f080 815c 	bcs.w	800646c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	f000 8086 	beq.w	80062d6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006200:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800620c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1da      	bne.n	80061ca <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3308      	adds	r3, #8
 800621a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006226:	f023 0301 	bic.w	r3, r3, #1
 800622a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3308      	adds	r3, #8
 8006234:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006238:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800623c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006240:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800624a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e1      	bne.n	8006214 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3308      	adds	r3, #8
 8006256:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3308      	adds	r3, #8
 8006270:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006274:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006276:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800627a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006282:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e3      	bne.n	8006250 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062a6:	f023 0310 	bic.w	r3, r3, #16
 80062aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80062ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062c0:	e841 2300 	strex	r3, r2, [r1]
 80062c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e4      	bne.n	8006296 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fc fd6e 	bl	8002db2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2202      	movs	r2, #2
 80062da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f8d7 	bl	80064a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062f6:	e0b9      	b.n	800646c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006304:	b29b      	uxth	r3, r3
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006312:	b29b      	uxth	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80ab 	beq.w	8006470 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800631a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 80a6 	beq.w	8006470 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006334:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006338:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	461a      	mov	r2, r3
 8006342:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006346:	647b      	str	r3, [r7, #68]	; 0x44
 8006348:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800634c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e4      	bne.n	8006324 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3308      	adds	r3, #8
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	623b      	str	r3, [r7, #32]
   return(result);
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800637e:	633a      	str	r2, [r7, #48]	; 0x30
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e3      	bne.n	800635a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0310 	bic.w	r3, r3, #16
 80063ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	69b9      	ldr	r1, [r7, #24]
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	617b      	str	r3, [r7, #20]
   return(result);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e4      	bne.n	80063a6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f85b 	bl	80064a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063ee:	e03f      	b.n	8006470 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00e      	beq.n	800641a <HAL_UART_IRQHandler+0x56a>
 80063fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d008      	beq.n	800641a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006410:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fed8 	bl	80071c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006418:	e02d      	b.n	8006476 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800641a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00e      	beq.n	8006444 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800642a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01c      	beq.n	8006474 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
    }
    return;
 8006442:	e017      	b.n	8006474 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644c:	2b00      	cmp	r3, #0
 800644e:	d012      	beq.n	8006476 <HAL_UART_IRQHandler+0x5c6>
 8006450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00c      	beq.n	8006476 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fce1 	bl	8006e24 <UART_EndTransmit_IT>
    return;
 8006462:	e008      	b.n	8006476 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006464:	bf00      	nop
 8006466:	e006      	b.n	8006476 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006468:	bf00      	nop
 800646a:	e004      	b.n	8006476 <HAL_UART_IRQHandler+0x5c6>
      return;
 800646c:	bf00      	nop
 800646e:	e002      	b.n	8006476 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006470:	bf00      	nop
 8006472:	e000      	b.n	8006476 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006474:	bf00      	nop
  }

}
 8006476:	37e8      	adds	r7, #232	; 0xe8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80064ea:	f023 030c 	bic.w	r3, r3, #12
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	6979      	ldr	r1, [r7, #20]
 80064f4:	430b      	orrs	r3, r1
 80064f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	4313      	orrs	r3, r2
 800651c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	430a      	orrs	r2, r1
 8006530:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4aa7      	ldr	r2, [pc, #668]	; (80067d4 <UART_SetConfig+0x318>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d120      	bne.n	800657e <UART_SetConfig+0xc2>
 800653c:	4ba6      	ldr	r3, [pc, #664]	; (80067d8 <UART_SetConfig+0x31c>)
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	f003 0303 	and.w	r3, r3, #3
 8006544:	2b03      	cmp	r3, #3
 8006546:	d817      	bhi.n	8006578 <UART_SetConfig+0xbc>
 8006548:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <UART_SetConfig+0x94>)
 800654a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654e:	bf00      	nop
 8006550:	08006561 	.word	0x08006561
 8006554:	0800656d 	.word	0x0800656d
 8006558:	08006573 	.word	0x08006573
 800655c:	08006567 	.word	0x08006567
 8006560:	2301      	movs	r3, #1
 8006562:	77fb      	strb	r3, [r7, #31]
 8006564:	e0b5      	b.n	80066d2 <UART_SetConfig+0x216>
 8006566:	2302      	movs	r3, #2
 8006568:	77fb      	strb	r3, [r7, #31]
 800656a:	e0b2      	b.n	80066d2 <UART_SetConfig+0x216>
 800656c:	2304      	movs	r3, #4
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e0af      	b.n	80066d2 <UART_SetConfig+0x216>
 8006572:	2308      	movs	r3, #8
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e0ac      	b.n	80066d2 <UART_SetConfig+0x216>
 8006578:	2310      	movs	r3, #16
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e0a9      	b.n	80066d2 <UART_SetConfig+0x216>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a96      	ldr	r2, [pc, #600]	; (80067dc <UART_SetConfig+0x320>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d124      	bne.n	80065d2 <UART_SetConfig+0x116>
 8006588:	4b93      	ldr	r3, [pc, #588]	; (80067d8 <UART_SetConfig+0x31c>)
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006590:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006594:	d011      	beq.n	80065ba <UART_SetConfig+0xfe>
 8006596:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800659a:	d817      	bhi.n	80065cc <UART_SetConfig+0x110>
 800659c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065a0:	d011      	beq.n	80065c6 <UART_SetConfig+0x10a>
 80065a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065a6:	d811      	bhi.n	80065cc <UART_SetConfig+0x110>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <UART_SetConfig+0xf8>
 80065ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b0:	d006      	beq.n	80065c0 <UART_SetConfig+0x104>
 80065b2:	e00b      	b.n	80065cc <UART_SetConfig+0x110>
 80065b4:	2300      	movs	r3, #0
 80065b6:	77fb      	strb	r3, [r7, #31]
 80065b8:	e08b      	b.n	80066d2 <UART_SetConfig+0x216>
 80065ba:	2302      	movs	r3, #2
 80065bc:	77fb      	strb	r3, [r7, #31]
 80065be:	e088      	b.n	80066d2 <UART_SetConfig+0x216>
 80065c0:	2304      	movs	r3, #4
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e085      	b.n	80066d2 <UART_SetConfig+0x216>
 80065c6:	2308      	movs	r3, #8
 80065c8:	77fb      	strb	r3, [r7, #31]
 80065ca:	e082      	b.n	80066d2 <UART_SetConfig+0x216>
 80065cc:	2310      	movs	r3, #16
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	e07f      	b.n	80066d2 <UART_SetConfig+0x216>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a82      	ldr	r2, [pc, #520]	; (80067e0 <UART_SetConfig+0x324>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d124      	bne.n	8006626 <UART_SetConfig+0x16a>
 80065dc:	4b7e      	ldr	r3, [pc, #504]	; (80067d8 <UART_SetConfig+0x31c>)
 80065de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80065e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80065e8:	d011      	beq.n	800660e <UART_SetConfig+0x152>
 80065ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80065ee:	d817      	bhi.n	8006620 <UART_SetConfig+0x164>
 80065f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80065f4:	d011      	beq.n	800661a <UART_SetConfig+0x15e>
 80065f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80065fa:	d811      	bhi.n	8006620 <UART_SetConfig+0x164>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <UART_SetConfig+0x14c>
 8006600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006604:	d006      	beq.n	8006614 <UART_SetConfig+0x158>
 8006606:	e00b      	b.n	8006620 <UART_SetConfig+0x164>
 8006608:	2300      	movs	r3, #0
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e061      	b.n	80066d2 <UART_SetConfig+0x216>
 800660e:	2302      	movs	r3, #2
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	e05e      	b.n	80066d2 <UART_SetConfig+0x216>
 8006614:	2304      	movs	r3, #4
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e05b      	b.n	80066d2 <UART_SetConfig+0x216>
 800661a:	2308      	movs	r3, #8
 800661c:	77fb      	strb	r3, [r7, #31]
 800661e:	e058      	b.n	80066d2 <UART_SetConfig+0x216>
 8006620:	2310      	movs	r3, #16
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e055      	b.n	80066d2 <UART_SetConfig+0x216>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a6e      	ldr	r2, [pc, #440]	; (80067e4 <UART_SetConfig+0x328>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d124      	bne.n	800667a <UART_SetConfig+0x1be>
 8006630:	4b69      	ldr	r3, [pc, #420]	; (80067d8 <UART_SetConfig+0x31c>)
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800663c:	d011      	beq.n	8006662 <UART_SetConfig+0x1a6>
 800663e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006642:	d817      	bhi.n	8006674 <UART_SetConfig+0x1b8>
 8006644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006648:	d011      	beq.n	800666e <UART_SetConfig+0x1b2>
 800664a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800664e:	d811      	bhi.n	8006674 <UART_SetConfig+0x1b8>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <UART_SetConfig+0x1a0>
 8006654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006658:	d006      	beq.n	8006668 <UART_SetConfig+0x1ac>
 800665a:	e00b      	b.n	8006674 <UART_SetConfig+0x1b8>
 800665c:	2300      	movs	r3, #0
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e037      	b.n	80066d2 <UART_SetConfig+0x216>
 8006662:	2302      	movs	r3, #2
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e034      	b.n	80066d2 <UART_SetConfig+0x216>
 8006668:	2304      	movs	r3, #4
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e031      	b.n	80066d2 <UART_SetConfig+0x216>
 800666e:	2308      	movs	r3, #8
 8006670:	77fb      	strb	r3, [r7, #31]
 8006672:	e02e      	b.n	80066d2 <UART_SetConfig+0x216>
 8006674:	2310      	movs	r3, #16
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e02b      	b.n	80066d2 <UART_SetConfig+0x216>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a5a      	ldr	r2, [pc, #360]	; (80067e8 <UART_SetConfig+0x32c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d124      	bne.n	80066ce <UART_SetConfig+0x212>
 8006684:	4b54      	ldr	r3, [pc, #336]	; (80067d8 <UART_SetConfig+0x31c>)
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800668c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006690:	d011      	beq.n	80066b6 <UART_SetConfig+0x1fa>
 8006692:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006696:	d817      	bhi.n	80066c8 <UART_SetConfig+0x20c>
 8006698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800669c:	d011      	beq.n	80066c2 <UART_SetConfig+0x206>
 800669e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066a2:	d811      	bhi.n	80066c8 <UART_SetConfig+0x20c>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <UART_SetConfig+0x1f4>
 80066a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ac:	d006      	beq.n	80066bc <UART_SetConfig+0x200>
 80066ae:	e00b      	b.n	80066c8 <UART_SetConfig+0x20c>
 80066b0:	2300      	movs	r3, #0
 80066b2:	77fb      	strb	r3, [r7, #31]
 80066b4:	e00d      	b.n	80066d2 <UART_SetConfig+0x216>
 80066b6:	2302      	movs	r3, #2
 80066b8:	77fb      	strb	r3, [r7, #31]
 80066ba:	e00a      	b.n	80066d2 <UART_SetConfig+0x216>
 80066bc:	2304      	movs	r3, #4
 80066be:	77fb      	strb	r3, [r7, #31]
 80066c0:	e007      	b.n	80066d2 <UART_SetConfig+0x216>
 80066c2:	2308      	movs	r3, #8
 80066c4:	77fb      	strb	r3, [r7, #31]
 80066c6:	e004      	b.n	80066d2 <UART_SetConfig+0x216>
 80066c8:	2310      	movs	r3, #16
 80066ca:	77fb      	strb	r3, [r7, #31]
 80066cc:	e001      	b.n	80066d2 <UART_SetConfig+0x216>
 80066ce:	2310      	movs	r3, #16
 80066d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066da:	d15b      	bne.n	8006794 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80066dc:	7ffb      	ldrb	r3, [r7, #31]
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d827      	bhi.n	8006732 <UART_SetConfig+0x276>
 80066e2:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <UART_SetConfig+0x22c>)
 80066e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e8:	0800670d 	.word	0x0800670d
 80066ec:	08006715 	.word	0x08006715
 80066f0:	0800671d 	.word	0x0800671d
 80066f4:	08006733 	.word	0x08006733
 80066f8:	08006723 	.word	0x08006723
 80066fc:	08006733 	.word	0x08006733
 8006700:	08006733 	.word	0x08006733
 8006704:	08006733 	.word	0x08006733
 8006708:	0800672b 	.word	0x0800672b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800670c:	f7fe f9cc 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 8006710:	61b8      	str	r0, [r7, #24]
        break;
 8006712:	e013      	b.n	800673c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006714:	f7fe f9ea 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 8006718:	61b8      	str	r0, [r7, #24]
        break;
 800671a:	e00f      	b.n	800673c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800671c:	4b33      	ldr	r3, [pc, #204]	; (80067ec <UART_SetConfig+0x330>)
 800671e:	61bb      	str	r3, [r7, #24]
        break;
 8006720:	e00c      	b.n	800673c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006722:	f7fe f94b 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 8006726:	61b8      	str	r0, [r7, #24]
        break;
 8006728:	e008      	b.n	800673c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800672a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800672e:	61bb      	str	r3, [r7, #24]
        break;
 8006730:	e004      	b.n	800673c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	77bb      	strb	r3, [r7, #30]
        break;
 800673a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 8082 	beq.w	8006848 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	005a      	lsls	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	441a      	add	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	fbb2 f3f3 	udiv	r3, r2, r3
 8006758:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b0f      	cmp	r3, #15
 800675e:	d916      	bls.n	800678e <UART_SetConfig+0x2d2>
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006766:	d212      	bcs.n	800678e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	b29b      	uxth	r3, r3
 800676c:	f023 030f 	bic.w	r3, r3, #15
 8006770:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	085b      	lsrs	r3, r3, #1
 8006776:	b29b      	uxth	r3, r3
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	b29a      	uxth	r2, r3
 800677e:	89fb      	ldrh	r3, [r7, #14]
 8006780:	4313      	orrs	r3, r2
 8006782:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	89fa      	ldrh	r2, [r7, #14]
 800678a:	60da      	str	r2, [r3, #12]
 800678c:	e05c      	b.n	8006848 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	77bb      	strb	r3, [r7, #30]
 8006792:	e059      	b.n	8006848 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006794:	7ffb      	ldrb	r3, [r7, #31]
 8006796:	2b08      	cmp	r3, #8
 8006798:	d835      	bhi.n	8006806 <UART_SetConfig+0x34a>
 800679a:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <UART_SetConfig+0x2e4>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067cd 	.word	0x080067cd
 80067a8:	080067f1 	.word	0x080067f1
 80067ac:	08006807 	.word	0x08006807
 80067b0:	080067f7 	.word	0x080067f7
 80067b4:	08006807 	.word	0x08006807
 80067b8:	08006807 	.word	0x08006807
 80067bc:	08006807 	.word	0x08006807
 80067c0:	080067ff 	.word	0x080067ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c4:	f7fe f970 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 80067c8:	61b8      	str	r0, [r7, #24]
        break;
 80067ca:	e021      	b.n	8006810 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067cc:	f7fe f98e 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 80067d0:	61b8      	str	r0, [r7, #24]
        break;
 80067d2:	e01d      	b.n	8006810 <UART_SetConfig+0x354>
 80067d4:	40013800 	.word	0x40013800
 80067d8:	40021000 	.word	0x40021000
 80067dc:	40004400 	.word	0x40004400
 80067e0:	40004800 	.word	0x40004800
 80067e4:	40004c00 	.word	0x40004c00
 80067e8:	40005000 	.word	0x40005000
 80067ec:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067f0:	4b1b      	ldr	r3, [pc, #108]	; (8006860 <UART_SetConfig+0x3a4>)
 80067f2:	61bb      	str	r3, [r7, #24]
        break;
 80067f4:	e00c      	b.n	8006810 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067f6:	f7fe f8e1 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 80067fa:	61b8      	str	r0, [r7, #24]
        break;
 80067fc:	e008      	b.n	8006810 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006802:	61bb      	str	r3, [r7, #24]
        break;
 8006804:	e004      	b.n	8006810 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	77bb      	strb	r3, [r7, #30]
        break;
 800680e:	bf00      	nop
    }

    if (pclk != 0U)
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d018      	beq.n	8006848 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	085a      	lsrs	r2, r3, #1
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	441a      	add	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	fbb2 f3f3 	udiv	r3, r2, r3
 8006828:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b0f      	cmp	r3, #15
 800682e:	d909      	bls.n	8006844 <UART_SetConfig+0x388>
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006836:	d205      	bcs.n	8006844 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	b29a      	uxth	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60da      	str	r2, [r3, #12]
 8006842:	e001      	b.n	8006848 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006854:	7fbb      	ldrb	r3, [r7, #30]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	007a1200 	.word	0x007a1200

08006864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01a      	beq.n	800697a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006962:	d10a      	bne.n	800697a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	605a      	str	r2, [r3, #4]
  }
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b098      	sub	sp, #96	; 0x60
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069b8:	f7fc f8ba 	bl	8002b30 <HAL_GetTick>
 80069bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d12e      	bne.n	8006a2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069d4:	2200      	movs	r2, #0
 80069d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f88c 	bl	8006af8 <UART_WaitOnFlagUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d021      	beq.n	8006a2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fa:	653b      	str	r3, [r7, #80]	; 0x50
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a04:	647b      	str	r3, [r7, #68]	; 0x44
 8006a06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e6      	bne.n	80069e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e062      	b.n	8006af0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d149      	bne.n	8006acc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a40:	2200      	movs	r2, #0
 8006a42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f856 	bl	8006af8 <UART_WaitOnFlagUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d03c      	beq.n	8006acc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	623b      	str	r3, [r7, #32]
   return(result);
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a70:	633b      	str	r3, [r7, #48]	; 0x30
 8006a72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e6      	bne.n	8006a52 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0301 	bic.w	r3, r3, #1
 8006a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa4:	61fa      	str	r2, [r7, #28]
 8006aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	69b9      	ldr	r1, [r7, #24]
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e5      	bne.n	8006a84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e011      	b.n	8006af0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3758      	adds	r7, #88	; 0x58
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	4613      	mov	r3, r2
 8006b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b08:	e049      	b.n	8006b9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b10:	d045      	beq.n	8006b9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b12:	f7fc f80d 	bl	8002b30 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d302      	bcc.n	8006b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e048      	b.n	8006bbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d031      	beq.n	8006b9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d110      	bne.n	8006b6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 f8ed 	bl	8006d30 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2208      	movs	r2, #8
 8006b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e029      	b.n	8006bbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b78:	d111      	bne.n	8006b9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f8d3 	bl	8006d30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e00f      	b.n	8006bbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69da      	ldr	r2, [r3, #28]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	bf0c      	ite	eq
 8006bae:	2301      	moveq	r3, #1
 8006bb0:	2300      	movne	r3, #0
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d0a6      	beq.n	8006b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b097      	sub	sp, #92	; 0x5c
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	88fa      	ldrh	r2, [r7, #6]
 8006be0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	88fa      	ldrh	r2, [r7, #6]
 8006be8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bfa:	d10e      	bne.n	8006c1a <UART_Start_Receive_IT+0x52>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d105      	bne.n	8006c10 <UART_Start_Receive_IT+0x48>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006c0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c0e:	e01a      	b.n	8006c46 <UART_Start_Receive_IT+0x7e>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	22ff      	movs	r2, #255	; 0xff
 8006c14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c18:	e015      	b.n	8006c46 <UART_Start_Receive_IT+0x7e>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10d      	bne.n	8006c3e <UART_Start_Receive_IT+0x76>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d104      	bne.n	8006c34 <UART_Start_Receive_IT+0x6c>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	22ff      	movs	r2, #255	; 0xff
 8006c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c32:	e008      	b.n	8006c46 <UART_Start_Receive_IT+0x7e>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	227f      	movs	r2, #127	; 0x7f
 8006c38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c3c:	e003      	b.n	8006c46 <UART_Start_Receive_IT+0x7e>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2222      	movs	r2, #34	; 0x22
 8006c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	657b      	str	r3, [r7, #84]	; 0x54
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3308      	adds	r3, #8
 8006c74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c76:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e5      	bne.n	8006c56 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c92:	d107      	bne.n	8006ca4 <UART_Start_Receive_IT+0xdc>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d103      	bne.n	8006ca4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4a22      	ldr	r2, [pc, #136]	; (8006d28 <UART_Start_Receive_IT+0x160>)
 8006ca0:	669a      	str	r2, [r3, #104]	; 0x68
 8006ca2:	e002      	b.n	8006caa <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4a21      	ldr	r2, [pc, #132]	; (8006d2c <UART_Start_Receive_IT+0x164>)
 8006ca8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d019      	beq.n	8006ce6 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e6      	bne.n	8006cb2 <UART_Start_Receive_IT+0xea>
 8006ce4:	e018      	b.n	8006d18 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	e853 3f00 	ldrex	r3, [r3]
 8006cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f043 0320 	orr.w	r3, r3, #32
 8006cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d04:	623b      	str	r3, [r7, #32]
 8006d06:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d08:	69f9      	ldr	r1, [r7, #28]
 8006d0a:	6a3a      	ldr	r2, [r7, #32]
 8006d0c:	e841 2300 	strex	r3, r2, [r1]
 8006d10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1e6      	bne.n	8006ce6 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	375c      	adds	r7, #92	; 0x5c
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	08007021 	.word	0x08007021
 8006d2c:	08006e79 	.word	0x08006e79

08006d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b095      	sub	sp, #84	; 0x54
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d56:	643b      	str	r3, [r7, #64]	; 0x40
 8006d58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e6      	bne.n	8006d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3308      	adds	r3, #8
 8006d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3308      	adds	r3, #8
 8006d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e5      	bne.n	8006d6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d118      	bne.n	8006dd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f023 0310 	bic.w	r3, r3, #16
 8006dba:	647b      	str	r3, [r7, #68]	; 0x44
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dc4:	61bb      	str	r3, [r7, #24]
 8006dc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	6979      	ldr	r1, [r7, #20]
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	e841 2300 	strex	r3, r2, [r1]
 8006dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e6      	bne.n	8006da6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006dec:	bf00      	nop
 8006dee:	3754      	adds	r7, #84	; 0x54
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7ff fb3a 	bl	8006490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e1c:	bf00      	nop
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b088      	sub	sp, #32
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e40:	61fb      	str	r3, [r7, #28]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	61bb      	str	r3, [r7, #24]
 8006e4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	6979      	ldr	r1, [r7, #20]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	613b      	str	r3, [r7, #16]
   return(result);
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e6      	bne.n	8006e2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2220      	movs	r2, #32
 8006e62:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fb06 	bl	800647c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e70:	bf00      	nop
 8006e72:	3720      	adds	r7, #32
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b09c      	sub	sp, #112	; 0x70
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e90:	2b22      	cmp	r3, #34	; 0x22
 8006e92:	f040 80b9 	bne.w	8007008 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ea0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006ea4:	b2d9      	uxtb	r1, r3
 8006ea6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb0:	400a      	ands	r2, r1
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f040 809c 	bne.w	8007018 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ef4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006efe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e6      	bne.n	8006ee0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3308      	adds	r3, #8
 8006f18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f24:	f023 0301 	bic.w	r3, r3, #1
 8006f28:	667b      	str	r3, [r7, #100]	; 0x64
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f32:	647a      	str	r2, [r7, #68]	; 0x44
 8006f34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e5      	bne.n	8006f12 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d018      	beq.n	8006f9a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	623b      	str	r3, [r7, #32]
   return(result);
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f86:	633b      	str	r3, [r7, #48]	; 0x30
 8006f88:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e6      	bne.n	8006f68 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d12e      	bne.n	8007000 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f023 0310 	bic.w	r3, r3, #16
 8006fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	69b9      	ldr	r1, [r7, #24]
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	617b      	str	r3, [r7, #20]
   return(result);
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e6      	bne.n	8006fa8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	2b10      	cmp	r3, #16
 8006fe6:	d103      	bne.n	8006ff0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2210      	movs	r2, #16
 8006fee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff fa53 	bl	80064a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ffe:	e00b      	b.n	8007018 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7fb fa01 	bl	8002408 <HAL_UART_RxCpltCallback>
}
 8007006:	e007      	b.n	8007018 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699a      	ldr	r2, [r3, #24]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0208 	orr.w	r2, r2, #8
 8007016:	619a      	str	r2, [r3, #24]
}
 8007018:	bf00      	nop
 800701a:	3770      	adds	r7, #112	; 0x70
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b09c      	sub	sp, #112	; 0x70
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800702e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007038:	2b22      	cmp	r3, #34	; 0x22
 800703a:	f040 80b9 	bne.w	80071b0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007044:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800704e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007052:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007056:	4013      	ands	r3, r2
 8007058:	b29a      	uxth	r2, r3
 800705a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800705c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	1c9a      	adds	r2, r3, #2
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	f040 809c 	bne.w	80071c0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800709c:	667b      	str	r3, [r7, #100]	; 0x64
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070a6:	657b      	str	r3, [r7, #84]	; 0x54
 80070a8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e6      	bne.n	8007088 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3308      	adds	r3, #8
 80070c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	f023 0301 	bic.w	r3, r3, #1
 80070d0:	663b      	str	r3, [r7, #96]	; 0x60
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3308      	adds	r3, #8
 80070d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070da:	643a      	str	r2, [r7, #64]	; 0x40
 80070dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e5      	bne.n	80070ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d018      	beq.n	8007142 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	61fb      	str	r3, [r7, #28]
   return(result);
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007130:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e6      	bne.n	8007110 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007146:	2b01      	cmp	r3, #1
 8007148:	d12e      	bne.n	80071a8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	60bb      	str	r3, [r7, #8]
   return(result);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f023 0310 	bic.w	r3, r3, #16
 8007164:	65bb      	str	r3, [r7, #88]	; 0x58
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800716e:	61bb      	str	r3, [r7, #24]
 8007170:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	6979      	ldr	r1, [r7, #20]
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	613b      	str	r3, [r7, #16]
   return(result);
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e6      	bne.n	8007150 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	f003 0310 	and.w	r3, r3, #16
 800718c:	2b10      	cmp	r3, #16
 800718e:	d103      	bne.n	8007198 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2210      	movs	r2, #16
 8007196:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff f97f 	bl	80064a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071a6:	e00b      	b.n	80071c0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7fb f92d 	bl	8002408 <HAL_UART_RxCpltCallback>
}
 80071ae:	e007      	b.n	80071c0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699a      	ldr	r2, [r3, #24]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0208 	orr.w	r2, r2, #8
 80071be:	619a      	str	r2, [r3, #24]
}
 80071c0:	bf00      	nop
 80071c2:	3770      	adds	r7, #112	; 0x70
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80071e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80071e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	43db      	mvns	r3, r3
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	4013      	ands	r3, r2
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007212:	b084      	sub	sp, #16
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	f107 0014 	add.w	r0, r7, #20
 8007220:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	b004      	add	sp, #16
 8007252:	4770      	bx	lr

08007254 <__errno>:
 8007254:	4b01      	ldr	r3, [pc, #4]	; (800725c <__errno+0x8>)
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	20000108 	.word	0x20000108

08007260 <__libc_init_array>:
 8007260:	b570      	push	{r4, r5, r6, lr}
 8007262:	4d0d      	ldr	r5, [pc, #52]	; (8007298 <__libc_init_array+0x38>)
 8007264:	4c0d      	ldr	r4, [pc, #52]	; (800729c <__libc_init_array+0x3c>)
 8007266:	1b64      	subs	r4, r4, r5
 8007268:	10a4      	asrs	r4, r4, #2
 800726a:	2600      	movs	r6, #0
 800726c:	42a6      	cmp	r6, r4
 800726e:	d109      	bne.n	8007284 <__libc_init_array+0x24>
 8007270:	4d0b      	ldr	r5, [pc, #44]	; (80072a0 <__libc_init_array+0x40>)
 8007272:	4c0c      	ldr	r4, [pc, #48]	; (80072a4 <__libc_init_array+0x44>)
 8007274:	f001 fa34 	bl	80086e0 <_init>
 8007278:	1b64      	subs	r4, r4, r5
 800727a:	10a4      	asrs	r4, r4, #2
 800727c:	2600      	movs	r6, #0
 800727e:	42a6      	cmp	r6, r4
 8007280:	d105      	bne.n	800728e <__libc_init_array+0x2e>
 8007282:	bd70      	pop	{r4, r5, r6, pc}
 8007284:	f855 3b04 	ldr.w	r3, [r5], #4
 8007288:	4798      	blx	r3
 800728a:	3601      	adds	r6, #1
 800728c:	e7ee      	b.n	800726c <__libc_init_array+0xc>
 800728e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007292:	4798      	blx	r3
 8007294:	3601      	adds	r6, #1
 8007296:	e7f2      	b.n	800727e <__libc_init_array+0x1e>
 8007298:	08008924 	.word	0x08008924
 800729c:	08008924 	.word	0x08008924
 80072a0:	08008924 	.word	0x08008924
 80072a4:	08008928 	.word	0x08008928

080072a8 <memset>:
 80072a8:	4402      	add	r2, r0
 80072aa:	4603      	mov	r3, r0
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d100      	bne.n	80072b2 <memset+0xa>
 80072b0:	4770      	bx	lr
 80072b2:	f803 1b01 	strb.w	r1, [r3], #1
 80072b6:	e7f9      	b.n	80072ac <memset+0x4>

080072b8 <rand>:
 80072b8:	4b16      	ldr	r3, [pc, #88]	; (8007314 <rand+0x5c>)
 80072ba:	b510      	push	{r4, lr}
 80072bc:	681c      	ldr	r4, [r3, #0]
 80072be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072c0:	b9b3      	cbnz	r3, 80072f0 <rand+0x38>
 80072c2:	2018      	movs	r0, #24
 80072c4:	f000 f886 	bl	80073d4 <malloc>
 80072c8:	63a0      	str	r0, [r4, #56]	; 0x38
 80072ca:	b928      	cbnz	r0, 80072d8 <rand+0x20>
 80072cc:	4602      	mov	r2, r0
 80072ce:	4b12      	ldr	r3, [pc, #72]	; (8007318 <rand+0x60>)
 80072d0:	4812      	ldr	r0, [pc, #72]	; (800731c <rand+0x64>)
 80072d2:	214e      	movs	r1, #78	; 0x4e
 80072d4:	f000 f84e 	bl	8007374 <__assert_func>
 80072d8:	4a11      	ldr	r2, [pc, #68]	; (8007320 <rand+0x68>)
 80072da:	4b12      	ldr	r3, [pc, #72]	; (8007324 <rand+0x6c>)
 80072dc:	e9c0 2300 	strd	r2, r3, [r0]
 80072e0:	4b11      	ldr	r3, [pc, #68]	; (8007328 <rand+0x70>)
 80072e2:	6083      	str	r3, [r0, #8]
 80072e4:	230b      	movs	r3, #11
 80072e6:	8183      	strh	r3, [r0, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	2300      	movs	r3, #0
 80072ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80072f0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80072f2:	4a0e      	ldr	r2, [pc, #56]	; (800732c <rand+0x74>)
 80072f4:	6920      	ldr	r0, [r4, #16]
 80072f6:	6963      	ldr	r3, [r4, #20]
 80072f8:	490d      	ldr	r1, [pc, #52]	; (8007330 <rand+0x78>)
 80072fa:	4342      	muls	r2, r0
 80072fc:	fb01 2203 	mla	r2, r1, r3, r2
 8007300:	fba0 0101 	umull	r0, r1, r0, r1
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	eb42 0001 	adc.w	r0, r2, r1
 800730a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800730e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007312:	bd10      	pop	{r4, pc}
 8007314:	20000108 	.word	0x20000108
 8007318:	080087e0 	.word	0x080087e0
 800731c:	080087f7 	.word	0x080087f7
 8007320:	abcd330e 	.word	0xabcd330e
 8007324:	e66d1234 	.word	0xe66d1234
 8007328:	0005deec 	.word	0x0005deec
 800732c:	5851f42d 	.word	0x5851f42d
 8007330:	4c957f2d 	.word	0x4c957f2d

08007334 <siprintf>:
 8007334:	b40e      	push	{r1, r2, r3}
 8007336:	b500      	push	{lr}
 8007338:	b09c      	sub	sp, #112	; 0x70
 800733a:	ab1d      	add	r3, sp, #116	; 0x74
 800733c:	9002      	str	r0, [sp, #8]
 800733e:	9006      	str	r0, [sp, #24]
 8007340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007344:	4809      	ldr	r0, [pc, #36]	; (800736c <siprintf+0x38>)
 8007346:	9107      	str	r1, [sp, #28]
 8007348:	9104      	str	r1, [sp, #16]
 800734a:	4909      	ldr	r1, [pc, #36]	; (8007370 <siprintf+0x3c>)
 800734c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007350:	9105      	str	r1, [sp, #20]
 8007352:	6800      	ldr	r0, [r0, #0]
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	a902      	add	r1, sp, #8
 8007358:	f000 f980 	bl	800765c <_svfiprintf_r>
 800735c:	9b02      	ldr	r3, [sp, #8]
 800735e:	2200      	movs	r2, #0
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	b01c      	add	sp, #112	; 0x70
 8007364:	f85d eb04 	ldr.w	lr, [sp], #4
 8007368:	b003      	add	sp, #12
 800736a:	4770      	bx	lr
 800736c:	20000108 	.word	0x20000108
 8007370:	ffff0208 	.word	0xffff0208

08007374 <__assert_func>:
 8007374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007376:	4614      	mov	r4, r2
 8007378:	461a      	mov	r2, r3
 800737a:	4b09      	ldr	r3, [pc, #36]	; (80073a0 <__assert_func+0x2c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4605      	mov	r5, r0
 8007380:	68d8      	ldr	r0, [r3, #12]
 8007382:	b14c      	cbz	r4, 8007398 <__assert_func+0x24>
 8007384:	4b07      	ldr	r3, [pc, #28]	; (80073a4 <__assert_func+0x30>)
 8007386:	9100      	str	r1, [sp, #0]
 8007388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800738c:	4906      	ldr	r1, [pc, #24]	; (80073a8 <__assert_func+0x34>)
 800738e:	462b      	mov	r3, r5
 8007390:	f000 f80e 	bl	80073b0 <fiprintf>
 8007394:	f000 fe20 	bl	8007fd8 <abort>
 8007398:	4b04      	ldr	r3, [pc, #16]	; (80073ac <__assert_func+0x38>)
 800739a:	461c      	mov	r4, r3
 800739c:	e7f3      	b.n	8007386 <__assert_func+0x12>
 800739e:	bf00      	nop
 80073a0:	20000108 	.word	0x20000108
 80073a4:	08008852 	.word	0x08008852
 80073a8:	0800885f 	.word	0x0800885f
 80073ac:	0800888d 	.word	0x0800888d

080073b0 <fiprintf>:
 80073b0:	b40e      	push	{r1, r2, r3}
 80073b2:	b503      	push	{r0, r1, lr}
 80073b4:	4601      	mov	r1, r0
 80073b6:	ab03      	add	r3, sp, #12
 80073b8:	4805      	ldr	r0, [pc, #20]	; (80073d0 <fiprintf+0x20>)
 80073ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80073be:	6800      	ldr	r0, [r0, #0]
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	f000 fa75 	bl	80078b0 <_vfiprintf_r>
 80073c6:	b002      	add	sp, #8
 80073c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073cc:	b003      	add	sp, #12
 80073ce:	4770      	bx	lr
 80073d0:	20000108 	.word	0x20000108

080073d4 <malloc>:
 80073d4:	4b02      	ldr	r3, [pc, #8]	; (80073e0 <malloc+0xc>)
 80073d6:	4601      	mov	r1, r0
 80073d8:	6818      	ldr	r0, [r3, #0]
 80073da:	f000 b86f 	b.w	80074bc <_malloc_r>
 80073de:	bf00      	nop
 80073e0:	20000108 	.word	0x20000108

080073e4 <_free_r>:
 80073e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073e6:	2900      	cmp	r1, #0
 80073e8:	d044      	beq.n	8007474 <_free_r+0x90>
 80073ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ee:	9001      	str	r0, [sp, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f1a1 0404 	sub.w	r4, r1, #4
 80073f6:	bfb8      	it	lt
 80073f8:	18e4      	addlt	r4, r4, r3
 80073fa:	f001 f83d 	bl	8008478 <__malloc_lock>
 80073fe:	4a1e      	ldr	r2, [pc, #120]	; (8007478 <_free_r+0x94>)
 8007400:	9801      	ldr	r0, [sp, #4]
 8007402:	6813      	ldr	r3, [r2, #0]
 8007404:	b933      	cbnz	r3, 8007414 <_free_r+0x30>
 8007406:	6063      	str	r3, [r4, #4]
 8007408:	6014      	str	r4, [r2, #0]
 800740a:	b003      	add	sp, #12
 800740c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007410:	f001 b838 	b.w	8008484 <__malloc_unlock>
 8007414:	42a3      	cmp	r3, r4
 8007416:	d908      	bls.n	800742a <_free_r+0x46>
 8007418:	6825      	ldr	r5, [r4, #0]
 800741a:	1961      	adds	r1, r4, r5
 800741c:	428b      	cmp	r3, r1
 800741e:	bf01      	itttt	eq
 8007420:	6819      	ldreq	r1, [r3, #0]
 8007422:	685b      	ldreq	r3, [r3, #4]
 8007424:	1949      	addeq	r1, r1, r5
 8007426:	6021      	streq	r1, [r4, #0]
 8007428:	e7ed      	b.n	8007406 <_free_r+0x22>
 800742a:	461a      	mov	r2, r3
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	b10b      	cbz	r3, 8007434 <_free_r+0x50>
 8007430:	42a3      	cmp	r3, r4
 8007432:	d9fa      	bls.n	800742a <_free_r+0x46>
 8007434:	6811      	ldr	r1, [r2, #0]
 8007436:	1855      	adds	r5, r2, r1
 8007438:	42a5      	cmp	r5, r4
 800743a:	d10b      	bne.n	8007454 <_free_r+0x70>
 800743c:	6824      	ldr	r4, [r4, #0]
 800743e:	4421      	add	r1, r4
 8007440:	1854      	adds	r4, r2, r1
 8007442:	42a3      	cmp	r3, r4
 8007444:	6011      	str	r1, [r2, #0]
 8007446:	d1e0      	bne.n	800740a <_free_r+0x26>
 8007448:	681c      	ldr	r4, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	6053      	str	r3, [r2, #4]
 800744e:	4421      	add	r1, r4
 8007450:	6011      	str	r1, [r2, #0]
 8007452:	e7da      	b.n	800740a <_free_r+0x26>
 8007454:	d902      	bls.n	800745c <_free_r+0x78>
 8007456:	230c      	movs	r3, #12
 8007458:	6003      	str	r3, [r0, #0]
 800745a:	e7d6      	b.n	800740a <_free_r+0x26>
 800745c:	6825      	ldr	r5, [r4, #0]
 800745e:	1961      	adds	r1, r4, r5
 8007460:	428b      	cmp	r3, r1
 8007462:	bf04      	itt	eq
 8007464:	6819      	ldreq	r1, [r3, #0]
 8007466:	685b      	ldreq	r3, [r3, #4]
 8007468:	6063      	str	r3, [r4, #4]
 800746a:	bf04      	itt	eq
 800746c:	1949      	addeq	r1, r1, r5
 800746e:	6021      	streq	r1, [r4, #0]
 8007470:	6054      	str	r4, [r2, #4]
 8007472:	e7ca      	b.n	800740a <_free_r+0x26>
 8007474:	b003      	add	sp, #12
 8007476:	bd30      	pop	{r4, r5, pc}
 8007478:	20000708 	.word	0x20000708

0800747c <sbrk_aligned>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	4e0e      	ldr	r6, [pc, #56]	; (80074b8 <sbrk_aligned+0x3c>)
 8007480:	460c      	mov	r4, r1
 8007482:	6831      	ldr	r1, [r6, #0]
 8007484:	4605      	mov	r5, r0
 8007486:	b911      	cbnz	r1, 800748e <sbrk_aligned+0x12>
 8007488:	f000 fcd6 	bl	8007e38 <_sbrk_r>
 800748c:	6030      	str	r0, [r6, #0]
 800748e:	4621      	mov	r1, r4
 8007490:	4628      	mov	r0, r5
 8007492:	f000 fcd1 	bl	8007e38 <_sbrk_r>
 8007496:	1c43      	adds	r3, r0, #1
 8007498:	d00a      	beq.n	80074b0 <sbrk_aligned+0x34>
 800749a:	1cc4      	adds	r4, r0, #3
 800749c:	f024 0403 	bic.w	r4, r4, #3
 80074a0:	42a0      	cmp	r0, r4
 80074a2:	d007      	beq.n	80074b4 <sbrk_aligned+0x38>
 80074a4:	1a21      	subs	r1, r4, r0
 80074a6:	4628      	mov	r0, r5
 80074a8:	f000 fcc6 	bl	8007e38 <_sbrk_r>
 80074ac:	3001      	adds	r0, #1
 80074ae:	d101      	bne.n	80074b4 <sbrk_aligned+0x38>
 80074b0:	f04f 34ff 	mov.w	r4, #4294967295
 80074b4:	4620      	mov	r0, r4
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	2000070c 	.word	0x2000070c

080074bc <_malloc_r>:
 80074bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c0:	1ccd      	adds	r5, r1, #3
 80074c2:	f025 0503 	bic.w	r5, r5, #3
 80074c6:	3508      	adds	r5, #8
 80074c8:	2d0c      	cmp	r5, #12
 80074ca:	bf38      	it	cc
 80074cc:	250c      	movcc	r5, #12
 80074ce:	2d00      	cmp	r5, #0
 80074d0:	4607      	mov	r7, r0
 80074d2:	db01      	blt.n	80074d8 <_malloc_r+0x1c>
 80074d4:	42a9      	cmp	r1, r5
 80074d6:	d905      	bls.n	80074e4 <_malloc_r+0x28>
 80074d8:	230c      	movs	r3, #12
 80074da:	603b      	str	r3, [r7, #0]
 80074dc:	2600      	movs	r6, #0
 80074de:	4630      	mov	r0, r6
 80074e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e4:	4e2e      	ldr	r6, [pc, #184]	; (80075a0 <_malloc_r+0xe4>)
 80074e6:	f000 ffc7 	bl	8008478 <__malloc_lock>
 80074ea:	6833      	ldr	r3, [r6, #0]
 80074ec:	461c      	mov	r4, r3
 80074ee:	bb34      	cbnz	r4, 800753e <_malloc_r+0x82>
 80074f0:	4629      	mov	r1, r5
 80074f2:	4638      	mov	r0, r7
 80074f4:	f7ff ffc2 	bl	800747c <sbrk_aligned>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	4604      	mov	r4, r0
 80074fc:	d14d      	bne.n	800759a <_malloc_r+0xde>
 80074fe:	6834      	ldr	r4, [r6, #0]
 8007500:	4626      	mov	r6, r4
 8007502:	2e00      	cmp	r6, #0
 8007504:	d140      	bne.n	8007588 <_malloc_r+0xcc>
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	4631      	mov	r1, r6
 800750a:	4638      	mov	r0, r7
 800750c:	eb04 0803 	add.w	r8, r4, r3
 8007510:	f000 fc92 	bl	8007e38 <_sbrk_r>
 8007514:	4580      	cmp	r8, r0
 8007516:	d13a      	bne.n	800758e <_malloc_r+0xd2>
 8007518:	6821      	ldr	r1, [r4, #0]
 800751a:	3503      	adds	r5, #3
 800751c:	1a6d      	subs	r5, r5, r1
 800751e:	f025 0503 	bic.w	r5, r5, #3
 8007522:	3508      	adds	r5, #8
 8007524:	2d0c      	cmp	r5, #12
 8007526:	bf38      	it	cc
 8007528:	250c      	movcc	r5, #12
 800752a:	4629      	mov	r1, r5
 800752c:	4638      	mov	r0, r7
 800752e:	f7ff ffa5 	bl	800747c <sbrk_aligned>
 8007532:	3001      	adds	r0, #1
 8007534:	d02b      	beq.n	800758e <_malloc_r+0xd2>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	442b      	add	r3, r5
 800753a:	6023      	str	r3, [r4, #0]
 800753c:	e00e      	b.n	800755c <_malloc_r+0xa0>
 800753e:	6822      	ldr	r2, [r4, #0]
 8007540:	1b52      	subs	r2, r2, r5
 8007542:	d41e      	bmi.n	8007582 <_malloc_r+0xc6>
 8007544:	2a0b      	cmp	r2, #11
 8007546:	d916      	bls.n	8007576 <_malloc_r+0xba>
 8007548:	1961      	adds	r1, r4, r5
 800754a:	42a3      	cmp	r3, r4
 800754c:	6025      	str	r5, [r4, #0]
 800754e:	bf18      	it	ne
 8007550:	6059      	strne	r1, [r3, #4]
 8007552:	6863      	ldr	r3, [r4, #4]
 8007554:	bf08      	it	eq
 8007556:	6031      	streq	r1, [r6, #0]
 8007558:	5162      	str	r2, [r4, r5]
 800755a:	604b      	str	r3, [r1, #4]
 800755c:	4638      	mov	r0, r7
 800755e:	f104 060b 	add.w	r6, r4, #11
 8007562:	f000 ff8f 	bl	8008484 <__malloc_unlock>
 8007566:	f026 0607 	bic.w	r6, r6, #7
 800756a:	1d23      	adds	r3, r4, #4
 800756c:	1af2      	subs	r2, r6, r3
 800756e:	d0b6      	beq.n	80074de <_malloc_r+0x22>
 8007570:	1b9b      	subs	r3, r3, r6
 8007572:	50a3      	str	r3, [r4, r2]
 8007574:	e7b3      	b.n	80074de <_malloc_r+0x22>
 8007576:	6862      	ldr	r2, [r4, #4]
 8007578:	42a3      	cmp	r3, r4
 800757a:	bf0c      	ite	eq
 800757c:	6032      	streq	r2, [r6, #0]
 800757e:	605a      	strne	r2, [r3, #4]
 8007580:	e7ec      	b.n	800755c <_malloc_r+0xa0>
 8007582:	4623      	mov	r3, r4
 8007584:	6864      	ldr	r4, [r4, #4]
 8007586:	e7b2      	b.n	80074ee <_malloc_r+0x32>
 8007588:	4634      	mov	r4, r6
 800758a:	6876      	ldr	r6, [r6, #4]
 800758c:	e7b9      	b.n	8007502 <_malloc_r+0x46>
 800758e:	230c      	movs	r3, #12
 8007590:	603b      	str	r3, [r7, #0]
 8007592:	4638      	mov	r0, r7
 8007594:	f000 ff76 	bl	8008484 <__malloc_unlock>
 8007598:	e7a1      	b.n	80074de <_malloc_r+0x22>
 800759a:	6025      	str	r5, [r4, #0]
 800759c:	e7de      	b.n	800755c <_malloc_r+0xa0>
 800759e:	bf00      	nop
 80075a0:	20000708 	.word	0x20000708

080075a4 <__ssputs_r>:
 80075a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a8:	688e      	ldr	r6, [r1, #8]
 80075aa:	429e      	cmp	r6, r3
 80075ac:	4682      	mov	sl, r0
 80075ae:	460c      	mov	r4, r1
 80075b0:	4690      	mov	r8, r2
 80075b2:	461f      	mov	r7, r3
 80075b4:	d838      	bhi.n	8007628 <__ssputs_r+0x84>
 80075b6:	898a      	ldrh	r2, [r1, #12]
 80075b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075bc:	d032      	beq.n	8007624 <__ssputs_r+0x80>
 80075be:	6825      	ldr	r5, [r4, #0]
 80075c0:	6909      	ldr	r1, [r1, #16]
 80075c2:	eba5 0901 	sub.w	r9, r5, r1
 80075c6:	6965      	ldr	r5, [r4, #20]
 80075c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075d0:	3301      	adds	r3, #1
 80075d2:	444b      	add	r3, r9
 80075d4:	106d      	asrs	r5, r5, #1
 80075d6:	429d      	cmp	r5, r3
 80075d8:	bf38      	it	cc
 80075da:	461d      	movcc	r5, r3
 80075dc:	0553      	lsls	r3, r2, #21
 80075de:	d531      	bpl.n	8007644 <__ssputs_r+0xa0>
 80075e0:	4629      	mov	r1, r5
 80075e2:	f7ff ff6b 	bl	80074bc <_malloc_r>
 80075e6:	4606      	mov	r6, r0
 80075e8:	b950      	cbnz	r0, 8007600 <__ssputs_r+0x5c>
 80075ea:	230c      	movs	r3, #12
 80075ec:	f8ca 3000 	str.w	r3, [sl]
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f6:	81a3      	strh	r3, [r4, #12]
 80075f8:	f04f 30ff 	mov.w	r0, #4294967295
 80075fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007600:	6921      	ldr	r1, [r4, #16]
 8007602:	464a      	mov	r2, r9
 8007604:	f000 ff10 	bl	8008428 <memcpy>
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800760e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007612:	81a3      	strh	r3, [r4, #12]
 8007614:	6126      	str	r6, [r4, #16]
 8007616:	6165      	str	r5, [r4, #20]
 8007618:	444e      	add	r6, r9
 800761a:	eba5 0509 	sub.w	r5, r5, r9
 800761e:	6026      	str	r6, [r4, #0]
 8007620:	60a5      	str	r5, [r4, #8]
 8007622:	463e      	mov	r6, r7
 8007624:	42be      	cmp	r6, r7
 8007626:	d900      	bls.n	800762a <__ssputs_r+0x86>
 8007628:	463e      	mov	r6, r7
 800762a:	6820      	ldr	r0, [r4, #0]
 800762c:	4632      	mov	r2, r6
 800762e:	4641      	mov	r1, r8
 8007630:	f000 ff08 	bl	8008444 <memmove>
 8007634:	68a3      	ldr	r3, [r4, #8]
 8007636:	1b9b      	subs	r3, r3, r6
 8007638:	60a3      	str	r3, [r4, #8]
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	4433      	add	r3, r6
 800763e:	6023      	str	r3, [r4, #0]
 8007640:	2000      	movs	r0, #0
 8007642:	e7db      	b.n	80075fc <__ssputs_r+0x58>
 8007644:	462a      	mov	r2, r5
 8007646:	f000 ff23 	bl	8008490 <_realloc_r>
 800764a:	4606      	mov	r6, r0
 800764c:	2800      	cmp	r0, #0
 800764e:	d1e1      	bne.n	8007614 <__ssputs_r+0x70>
 8007650:	6921      	ldr	r1, [r4, #16]
 8007652:	4650      	mov	r0, sl
 8007654:	f7ff fec6 	bl	80073e4 <_free_r>
 8007658:	e7c7      	b.n	80075ea <__ssputs_r+0x46>
	...

0800765c <_svfiprintf_r>:
 800765c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007660:	4698      	mov	r8, r3
 8007662:	898b      	ldrh	r3, [r1, #12]
 8007664:	061b      	lsls	r3, r3, #24
 8007666:	b09d      	sub	sp, #116	; 0x74
 8007668:	4607      	mov	r7, r0
 800766a:	460d      	mov	r5, r1
 800766c:	4614      	mov	r4, r2
 800766e:	d50e      	bpl.n	800768e <_svfiprintf_r+0x32>
 8007670:	690b      	ldr	r3, [r1, #16]
 8007672:	b963      	cbnz	r3, 800768e <_svfiprintf_r+0x32>
 8007674:	2140      	movs	r1, #64	; 0x40
 8007676:	f7ff ff21 	bl	80074bc <_malloc_r>
 800767a:	6028      	str	r0, [r5, #0]
 800767c:	6128      	str	r0, [r5, #16]
 800767e:	b920      	cbnz	r0, 800768a <_svfiprintf_r+0x2e>
 8007680:	230c      	movs	r3, #12
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	f04f 30ff 	mov.w	r0, #4294967295
 8007688:	e0d1      	b.n	800782e <_svfiprintf_r+0x1d2>
 800768a:	2340      	movs	r3, #64	; 0x40
 800768c:	616b      	str	r3, [r5, #20]
 800768e:	2300      	movs	r3, #0
 8007690:	9309      	str	r3, [sp, #36]	; 0x24
 8007692:	2320      	movs	r3, #32
 8007694:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007698:	f8cd 800c 	str.w	r8, [sp, #12]
 800769c:	2330      	movs	r3, #48	; 0x30
 800769e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007848 <_svfiprintf_r+0x1ec>
 80076a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076a6:	f04f 0901 	mov.w	r9, #1
 80076aa:	4623      	mov	r3, r4
 80076ac:	469a      	mov	sl, r3
 80076ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076b2:	b10a      	cbz	r2, 80076b8 <_svfiprintf_r+0x5c>
 80076b4:	2a25      	cmp	r2, #37	; 0x25
 80076b6:	d1f9      	bne.n	80076ac <_svfiprintf_r+0x50>
 80076b8:	ebba 0b04 	subs.w	fp, sl, r4
 80076bc:	d00b      	beq.n	80076d6 <_svfiprintf_r+0x7a>
 80076be:	465b      	mov	r3, fp
 80076c0:	4622      	mov	r2, r4
 80076c2:	4629      	mov	r1, r5
 80076c4:	4638      	mov	r0, r7
 80076c6:	f7ff ff6d 	bl	80075a4 <__ssputs_r>
 80076ca:	3001      	adds	r0, #1
 80076cc:	f000 80aa 	beq.w	8007824 <_svfiprintf_r+0x1c8>
 80076d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076d2:	445a      	add	r2, fp
 80076d4:	9209      	str	r2, [sp, #36]	; 0x24
 80076d6:	f89a 3000 	ldrb.w	r3, [sl]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 80a2 	beq.w	8007824 <_svfiprintf_r+0x1c8>
 80076e0:	2300      	movs	r3, #0
 80076e2:	f04f 32ff 	mov.w	r2, #4294967295
 80076e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076ea:	f10a 0a01 	add.w	sl, sl, #1
 80076ee:	9304      	str	r3, [sp, #16]
 80076f0:	9307      	str	r3, [sp, #28]
 80076f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076f6:	931a      	str	r3, [sp, #104]	; 0x68
 80076f8:	4654      	mov	r4, sl
 80076fa:	2205      	movs	r2, #5
 80076fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007700:	4851      	ldr	r0, [pc, #324]	; (8007848 <_svfiprintf_r+0x1ec>)
 8007702:	f7f8 fd6d 	bl	80001e0 <memchr>
 8007706:	9a04      	ldr	r2, [sp, #16]
 8007708:	b9d8      	cbnz	r0, 8007742 <_svfiprintf_r+0xe6>
 800770a:	06d0      	lsls	r0, r2, #27
 800770c:	bf44      	itt	mi
 800770e:	2320      	movmi	r3, #32
 8007710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007714:	0711      	lsls	r1, r2, #28
 8007716:	bf44      	itt	mi
 8007718:	232b      	movmi	r3, #43	; 0x2b
 800771a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800771e:	f89a 3000 	ldrb.w	r3, [sl]
 8007722:	2b2a      	cmp	r3, #42	; 0x2a
 8007724:	d015      	beq.n	8007752 <_svfiprintf_r+0xf6>
 8007726:	9a07      	ldr	r2, [sp, #28]
 8007728:	4654      	mov	r4, sl
 800772a:	2000      	movs	r0, #0
 800772c:	f04f 0c0a 	mov.w	ip, #10
 8007730:	4621      	mov	r1, r4
 8007732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007736:	3b30      	subs	r3, #48	; 0x30
 8007738:	2b09      	cmp	r3, #9
 800773a:	d94e      	bls.n	80077da <_svfiprintf_r+0x17e>
 800773c:	b1b0      	cbz	r0, 800776c <_svfiprintf_r+0x110>
 800773e:	9207      	str	r2, [sp, #28]
 8007740:	e014      	b.n	800776c <_svfiprintf_r+0x110>
 8007742:	eba0 0308 	sub.w	r3, r0, r8
 8007746:	fa09 f303 	lsl.w	r3, r9, r3
 800774a:	4313      	orrs	r3, r2
 800774c:	9304      	str	r3, [sp, #16]
 800774e:	46a2      	mov	sl, r4
 8007750:	e7d2      	b.n	80076f8 <_svfiprintf_r+0x9c>
 8007752:	9b03      	ldr	r3, [sp, #12]
 8007754:	1d19      	adds	r1, r3, #4
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	9103      	str	r1, [sp, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	bfbb      	ittet	lt
 800775e:	425b      	neglt	r3, r3
 8007760:	f042 0202 	orrlt.w	r2, r2, #2
 8007764:	9307      	strge	r3, [sp, #28]
 8007766:	9307      	strlt	r3, [sp, #28]
 8007768:	bfb8      	it	lt
 800776a:	9204      	strlt	r2, [sp, #16]
 800776c:	7823      	ldrb	r3, [r4, #0]
 800776e:	2b2e      	cmp	r3, #46	; 0x2e
 8007770:	d10c      	bne.n	800778c <_svfiprintf_r+0x130>
 8007772:	7863      	ldrb	r3, [r4, #1]
 8007774:	2b2a      	cmp	r3, #42	; 0x2a
 8007776:	d135      	bne.n	80077e4 <_svfiprintf_r+0x188>
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	1d1a      	adds	r2, r3, #4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	9203      	str	r2, [sp, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	bfb8      	it	lt
 8007784:	f04f 33ff 	movlt.w	r3, #4294967295
 8007788:	3402      	adds	r4, #2
 800778a:	9305      	str	r3, [sp, #20]
 800778c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007858 <_svfiprintf_r+0x1fc>
 8007790:	7821      	ldrb	r1, [r4, #0]
 8007792:	2203      	movs	r2, #3
 8007794:	4650      	mov	r0, sl
 8007796:	f7f8 fd23 	bl	80001e0 <memchr>
 800779a:	b140      	cbz	r0, 80077ae <_svfiprintf_r+0x152>
 800779c:	2340      	movs	r3, #64	; 0x40
 800779e:	eba0 000a 	sub.w	r0, r0, sl
 80077a2:	fa03 f000 	lsl.w	r0, r3, r0
 80077a6:	9b04      	ldr	r3, [sp, #16]
 80077a8:	4303      	orrs	r3, r0
 80077aa:	3401      	adds	r4, #1
 80077ac:	9304      	str	r3, [sp, #16]
 80077ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b2:	4826      	ldr	r0, [pc, #152]	; (800784c <_svfiprintf_r+0x1f0>)
 80077b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077b8:	2206      	movs	r2, #6
 80077ba:	f7f8 fd11 	bl	80001e0 <memchr>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d038      	beq.n	8007834 <_svfiprintf_r+0x1d8>
 80077c2:	4b23      	ldr	r3, [pc, #140]	; (8007850 <_svfiprintf_r+0x1f4>)
 80077c4:	bb1b      	cbnz	r3, 800780e <_svfiprintf_r+0x1b2>
 80077c6:	9b03      	ldr	r3, [sp, #12]
 80077c8:	3307      	adds	r3, #7
 80077ca:	f023 0307 	bic.w	r3, r3, #7
 80077ce:	3308      	adds	r3, #8
 80077d0:	9303      	str	r3, [sp, #12]
 80077d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d4:	4433      	add	r3, r6
 80077d6:	9309      	str	r3, [sp, #36]	; 0x24
 80077d8:	e767      	b.n	80076aa <_svfiprintf_r+0x4e>
 80077da:	fb0c 3202 	mla	r2, ip, r2, r3
 80077de:	460c      	mov	r4, r1
 80077e0:	2001      	movs	r0, #1
 80077e2:	e7a5      	b.n	8007730 <_svfiprintf_r+0xd4>
 80077e4:	2300      	movs	r3, #0
 80077e6:	3401      	adds	r4, #1
 80077e8:	9305      	str	r3, [sp, #20]
 80077ea:	4619      	mov	r1, r3
 80077ec:	f04f 0c0a 	mov.w	ip, #10
 80077f0:	4620      	mov	r0, r4
 80077f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077f6:	3a30      	subs	r2, #48	; 0x30
 80077f8:	2a09      	cmp	r2, #9
 80077fa:	d903      	bls.n	8007804 <_svfiprintf_r+0x1a8>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0c5      	beq.n	800778c <_svfiprintf_r+0x130>
 8007800:	9105      	str	r1, [sp, #20]
 8007802:	e7c3      	b.n	800778c <_svfiprintf_r+0x130>
 8007804:	fb0c 2101 	mla	r1, ip, r1, r2
 8007808:	4604      	mov	r4, r0
 800780a:	2301      	movs	r3, #1
 800780c:	e7f0      	b.n	80077f0 <_svfiprintf_r+0x194>
 800780e:	ab03      	add	r3, sp, #12
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	462a      	mov	r2, r5
 8007814:	4b0f      	ldr	r3, [pc, #60]	; (8007854 <_svfiprintf_r+0x1f8>)
 8007816:	a904      	add	r1, sp, #16
 8007818:	4638      	mov	r0, r7
 800781a:	f3af 8000 	nop.w
 800781e:	1c42      	adds	r2, r0, #1
 8007820:	4606      	mov	r6, r0
 8007822:	d1d6      	bne.n	80077d2 <_svfiprintf_r+0x176>
 8007824:	89ab      	ldrh	r3, [r5, #12]
 8007826:	065b      	lsls	r3, r3, #25
 8007828:	f53f af2c 	bmi.w	8007684 <_svfiprintf_r+0x28>
 800782c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800782e:	b01d      	add	sp, #116	; 0x74
 8007830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007834:	ab03      	add	r3, sp, #12
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	462a      	mov	r2, r5
 800783a:	4b06      	ldr	r3, [pc, #24]	; (8007854 <_svfiprintf_r+0x1f8>)
 800783c:	a904      	add	r1, sp, #16
 800783e:	4638      	mov	r0, r7
 8007840:	f000 f9d4 	bl	8007bec <_printf_i>
 8007844:	e7eb      	b.n	800781e <_svfiprintf_r+0x1c2>
 8007846:	bf00      	nop
 8007848:	0800888e 	.word	0x0800888e
 800784c:	08008898 	.word	0x08008898
 8007850:	00000000 	.word	0x00000000
 8007854:	080075a5 	.word	0x080075a5
 8007858:	08008894 	.word	0x08008894

0800785c <__sfputc_r>:
 800785c:	6893      	ldr	r3, [r2, #8]
 800785e:	3b01      	subs	r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	b410      	push	{r4}
 8007864:	6093      	str	r3, [r2, #8]
 8007866:	da08      	bge.n	800787a <__sfputc_r+0x1e>
 8007868:	6994      	ldr	r4, [r2, #24]
 800786a:	42a3      	cmp	r3, r4
 800786c:	db01      	blt.n	8007872 <__sfputc_r+0x16>
 800786e:	290a      	cmp	r1, #10
 8007870:	d103      	bne.n	800787a <__sfputc_r+0x1e>
 8007872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007876:	f000 baef 	b.w	8007e58 <__swbuf_r>
 800787a:	6813      	ldr	r3, [r2, #0]
 800787c:	1c58      	adds	r0, r3, #1
 800787e:	6010      	str	r0, [r2, #0]
 8007880:	7019      	strb	r1, [r3, #0]
 8007882:	4608      	mov	r0, r1
 8007884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007888:	4770      	bx	lr

0800788a <__sfputs_r>:
 800788a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788c:	4606      	mov	r6, r0
 800788e:	460f      	mov	r7, r1
 8007890:	4614      	mov	r4, r2
 8007892:	18d5      	adds	r5, r2, r3
 8007894:	42ac      	cmp	r4, r5
 8007896:	d101      	bne.n	800789c <__sfputs_r+0x12>
 8007898:	2000      	movs	r0, #0
 800789a:	e007      	b.n	80078ac <__sfputs_r+0x22>
 800789c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a0:	463a      	mov	r2, r7
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7ff ffda 	bl	800785c <__sfputc_r>
 80078a8:	1c43      	adds	r3, r0, #1
 80078aa:	d1f3      	bne.n	8007894 <__sfputs_r+0xa>
 80078ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078b0 <_vfiprintf_r>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	460d      	mov	r5, r1
 80078b6:	b09d      	sub	sp, #116	; 0x74
 80078b8:	4614      	mov	r4, r2
 80078ba:	4698      	mov	r8, r3
 80078bc:	4606      	mov	r6, r0
 80078be:	b118      	cbz	r0, 80078c8 <_vfiprintf_r+0x18>
 80078c0:	6983      	ldr	r3, [r0, #24]
 80078c2:	b90b      	cbnz	r3, 80078c8 <_vfiprintf_r+0x18>
 80078c4:	f000 fcaa 	bl	800821c <__sinit>
 80078c8:	4b89      	ldr	r3, [pc, #548]	; (8007af0 <_vfiprintf_r+0x240>)
 80078ca:	429d      	cmp	r5, r3
 80078cc:	d11b      	bne.n	8007906 <_vfiprintf_r+0x56>
 80078ce:	6875      	ldr	r5, [r6, #4]
 80078d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078d2:	07d9      	lsls	r1, r3, #31
 80078d4:	d405      	bmi.n	80078e2 <_vfiprintf_r+0x32>
 80078d6:	89ab      	ldrh	r3, [r5, #12]
 80078d8:	059a      	lsls	r2, r3, #22
 80078da:	d402      	bmi.n	80078e2 <_vfiprintf_r+0x32>
 80078dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078de:	f000 fd3b 	bl	8008358 <__retarget_lock_acquire_recursive>
 80078e2:	89ab      	ldrh	r3, [r5, #12]
 80078e4:	071b      	lsls	r3, r3, #28
 80078e6:	d501      	bpl.n	80078ec <_vfiprintf_r+0x3c>
 80078e8:	692b      	ldr	r3, [r5, #16]
 80078ea:	b9eb      	cbnz	r3, 8007928 <_vfiprintf_r+0x78>
 80078ec:	4629      	mov	r1, r5
 80078ee:	4630      	mov	r0, r6
 80078f0:	f000 fb04 	bl	8007efc <__swsetup_r>
 80078f4:	b1c0      	cbz	r0, 8007928 <_vfiprintf_r+0x78>
 80078f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078f8:	07dc      	lsls	r4, r3, #31
 80078fa:	d50e      	bpl.n	800791a <_vfiprintf_r+0x6a>
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	b01d      	add	sp, #116	; 0x74
 8007902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007906:	4b7b      	ldr	r3, [pc, #492]	; (8007af4 <_vfiprintf_r+0x244>)
 8007908:	429d      	cmp	r5, r3
 800790a:	d101      	bne.n	8007910 <_vfiprintf_r+0x60>
 800790c:	68b5      	ldr	r5, [r6, #8]
 800790e:	e7df      	b.n	80078d0 <_vfiprintf_r+0x20>
 8007910:	4b79      	ldr	r3, [pc, #484]	; (8007af8 <_vfiprintf_r+0x248>)
 8007912:	429d      	cmp	r5, r3
 8007914:	bf08      	it	eq
 8007916:	68f5      	ldreq	r5, [r6, #12]
 8007918:	e7da      	b.n	80078d0 <_vfiprintf_r+0x20>
 800791a:	89ab      	ldrh	r3, [r5, #12]
 800791c:	0598      	lsls	r0, r3, #22
 800791e:	d4ed      	bmi.n	80078fc <_vfiprintf_r+0x4c>
 8007920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007922:	f000 fd1a 	bl	800835a <__retarget_lock_release_recursive>
 8007926:	e7e9      	b.n	80078fc <_vfiprintf_r+0x4c>
 8007928:	2300      	movs	r3, #0
 800792a:	9309      	str	r3, [sp, #36]	; 0x24
 800792c:	2320      	movs	r3, #32
 800792e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007932:	f8cd 800c 	str.w	r8, [sp, #12]
 8007936:	2330      	movs	r3, #48	; 0x30
 8007938:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007afc <_vfiprintf_r+0x24c>
 800793c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007940:	f04f 0901 	mov.w	r9, #1
 8007944:	4623      	mov	r3, r4
 8007946:	469a      	mov	sl, r3
 8007948:	f813 2b01 	ldrb.w	r2, [r3], #1
 800794c:	b10a      	cbz	r2, 8007952 <_vfiprintf_r+0xa2>
 800794e:	2a25      	cmp	r2, #37	; 0x25
 8007950:	d1f9      	bne.n	8007946 <_vfiprintf_r+0x96>
 8007952:	ebba 0b04 	subs.w	fp, sl, r4
 8007956:	d00b      	beq.n	8007970 <_vfiprintf_r+0xc0>
 8007958:	465b      	mov	r3, fp
 800795a:	4622      	mov	r2, r4
 800795c:	4629      	mov	r1, r5
 800795e:	4630      	mov	r0, r6
 8007960:	f7ff ff93 	bl	800788a <__sfputs_r>
 8007964:	3001      	adds	r0, #1
 8007966:	f000 80aa 	beq.w	8007abe <_vfiprintf_r+0x20e>
 800796a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800796c:	445a      	add	r2, fp
 800796e:	9209      	str	r2, [sp, #36]	; 0x24
 8007970:	f89a 3000 	ldrb.w	r3, [sl]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 80a2 	beq.w	8007abe <_vfiprintf_r+0x20e>
 800797a:	2300      	movs	r3, #0
 800797c:	f04f 32ff 	mov.w	r2, #4294967295
 8007980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007984:	f10a 0a01 	add.w	sl, sl, #1
 8007988:	9304      	str	r3, [sp, #16]
 800798a:	9307      	str	r3, [sp, #28]
 800798c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007990:	931a      	str	r3, [sp, #104]	; 0x68
 8007992:	4654      	mov	r4, sl
 8007994:	2205      	movs	r2, #5
 8007996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800799a:	4858      	ldr	r0, [pc, #352]	; (8007afc <_vfiprintf_r+0x24c>)
 800799c:	f7f8 fc20 	bl	80001e0 <memchr>
 80079a0:	9a04      	ldr	r2, [sp, #16]
 80079a2:	b9d8      	cbnz	r0, 80079dc <_vfiprintf_r+0x12c>
 80079a4:	06d1      	lsls	r1, r2, #27
 80079a6:	bf44      	itt	mi
 80079a8:	2320      	movmi	r3, #32
 80079aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079ae:	0713      	lsls	r3, r2, #28
 80079b0:	bf44      	itt	mi
 80079b2:	232b      	movmi	r3, #43	; 0x2b
 80079b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079b8:	f89a 3000 	ldrb.w	r3, [sl]
 80079bc:	2b2a      	cmp	r3, #42	; 0x2a
 80079be:	d015      	beq.n	80079ec <_vfiprintf_r+0x13c>
 80079c0:	9a07      	ldr	r2, [sp, #28]
 80079c2:	4654      	mov	r4, sl
 80079c4:	2000      	movs	r0, #0
 80079c6:	f04f 0c0a 	mov.w	ip, #10
 80079ca:	4621      	mov	r1, r4
 80079cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079d0:	3b30      	subs	r3, #48	; 0x30
 80079d2:	2b09      	cmp	r3, #9
 80079d4:	d94e      	bls.n	8007a74 <_vfiprintf_r+0x1c4>
 80079d6:	b1b0      	cbz	r0, 8007a06 <_vfiprintf_r+0x156>
 80079d8:	9207      	str	r2, [sp, #28]
 80079da:	e014      	b.n	8007a06 <_vfiprintf_r+0x156>
 80079dc:	eba0 0308 	sub.w	r3, r0, r8
 80079e0:	fa09 f303 	lsl.w	r3, r9, r3
 80079e4:	4313      	orrs	r3, r2
 80079e6:	9304      	str	r3, [sp, #16]
 80079e8:	46a2      	mov	sl, r4
 80079ea:	e7d2      	b.n	8007992 <_vfiprintf_r+0xe2>
 80079ec:	9b03      	ldr	r3, [sp, #12]
 80079ee:	1d19      	adds	r1, r3, #4
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	9103      	str	r1, [sp, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bfbb      	ittet	lt
 80079f8:	425b      	neglt	r3, r3
 80079fa:	f042 0202 	orrlt.w	r2, r2, #2
 80079fe:	9307      	strge	r3, [sp, #28]
 8007a00:	9307      	strlt	r3, [sp, #28]
 8007a02:	bfb8      	it	lt
 8007a04:	9204      	strlt	r2, [sp, #16]
 8007a06:	7823      	ldrb	r3, [r4, #0]
 8007a08:	2b2e      	cmp	r3, #46	; 0x2e
 8007a0a:	d10c      	bne.n	8007a26 <_vfiprintf_r+0x176>
 8007a0c:	7863      	ldrb	r3, [r4, #1]
 8007a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a10:	d135      	bne.n	8007a7e <_vfiprintf_r+0x1ce>
 8007a12:	9b03      	ldr	r3, [sp, #12]
 8007a14:	1d1a      	adds	r2, r3, #4
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	9203      	str	r2, [sp, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	bfb8      	it	lt
 8007a1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a22:	3402      	adds	r4, #2
 8007a24:	9305      	str	r3, [sp, #20]
 8007a26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b0c <_vfiprintf_r+0x25c>
 8007a2a:	7821      	ldrb	r1, [r4, #0]
 8007a2c:	2203      	movs	r2, #3
 8007a2e:	4650      	mov	r0, sl
 8007a30:	f7f8 fbd6 	bl	80001e0 <memchr>
 8007a34:	b140      	cbz	r0, 8007a48 <_vfiprintf_r+0x198>
 8007a36:	2340      	movs	r3, #64	; 0x40
 8007a38:	eba0 000a 	sub.w	r0, r0, sl
 8007a3c:	fa03 f000 	lsl.w	r0, r3, r0
 8007a40:	9b04      	ldr	r3, [sp, #16]
 8007a42:	4303      	orrs	r3, r0
 8007a44:	3401      	adds	r4, #1
 8007a46:	9304      	str	r3, [sp, #16]
 8007a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a4c:	482c      	ldr	r0, [pc, #176]	; (8007b00 <_vfiprintf_r+0x250>)
 8007a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a52:	2206      	movs	r2, #6
 8007a54:	f7f8 fbc4 	bl	80001e0 <memchr>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d03f      	beq.n	8007adc <_vfiprintf_r+0x22c>
 8007a5c:	4b29      	ldr	r3, [pc, #164]	; (8007b04 <_vfiprintf_r+0x254>)
 8007a5e:	bb1b      	cbnz	r3, 8007aa8 <_vfiprintf_r+0x1f8>
 8007a60:	9b03      	ldr	r3, [sp, #12]
 8007a62:	3307      	adds	r3, #7
 8007a64:	f023 0307 	bic.w	r3, r3, #7
 8007a68:	3308      	adds	r3, #8
 8007a6a:	9303      	str	r3, [sp, #12]
 8007a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a6e:	443b      	add	r3, r7
 8007a70:	9309      	str	r3, [sp, #36]	; 0x24
 8007a72:	e767      	b.n	8007944 <_vfiprintf_r+0x94>
 8007a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a78:	460c      	mov	r4, r1
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	e7a5      	b.n	80079ca <_vfiprintf_r+0x11a>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	3401      	adds	r4, #1
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	4619      	mov	r1, r3
 8007a86:	f04f 0c0a 	mov.w	ip, #10
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a90:	3a30      	subs	r2, #48	; 0x30
 8007a92:	2a09      	cmp	r2, #9
 8007a94:	d903      	bls.n	8007a9e <_vfiprintf_r+0x1ee>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0c5      	beq.n	8007a26 <_vfiprintf_r+0x176>
 8007a9a:	9105      	str	r1, [sp, #20]
 8007a9c:	e7c3      	b.n	8007a26 <_vfiprintf_r+0x176>
 8007a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e7f0      	b.n	8007a8a <_vfiprintf_r+0x1da>
 8007aa8:	ab03      	add	r3, sp, #12
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	462a      	mov	r2, r5
 8007aae:	4b16      	ldr	r3, [pc, #88]	; (8007b08 <_vfiprintf_r+0x258>)
 8007ab0:	a904      	add	r1, sp, #16
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f3af 8000 	nop.w
 8007ab8:	4607      	mov	r7, r0
 8007aba:	1c78      	adds	r0, r7, #1
 8007abc:	d1d6      	bne.n	8007a6c <_vfiprintf_r+0x1bc>
 8007abe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ac0:	07d9      	lsls	r1, r3, #31
 8007ac2:	d405      	bmi.n	8007ad0 <_vfiprintf_r+0x220>
 8007ac4:	89ab      	ldrh	r3, [r5, #12]
 8007ac6:	059a      	lsls	r2, r3, #22
 8007ac8:	d402      	bmi.n	8007ad0 <_vfiprintf_r+0x220>
 8007aca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007acc:	f000 fc45 	bl	800835a <__retarget_lock_release_recursive>
 8007ad0:	89ab      	ldrh	r3, [r5, #12]
 8007ad2:	065b      	lsls	r3, r3, #25
 8007ad4:	f53f af12 	bmi.w	80078fc <_vfiprintf_r+0x4c>
 8007ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ada:	e711      	b.n	8007900 <_vfiprintf_r+0x50>
 8007adc:	ab03      	add	r3, sp, #12
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	462a      	mov	r2, r5
 8007ae2:	4b09      	ldr	r3, [pc, #36]	; (8007b08 <_vfiprintf_r+0x258>)
 8007ae4:	a904      	add	r1, sp, #16
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f000 f880 	bl	8007bec <_printf_i>
 8007aec:	e7e4      	b.n	8007ab8 <_vfiprintf_r+0x208>
 8007aee:	bf00      	nop
 8007af0:	080088e4 	.word	0x080088e4
 8007af4:	08008904 	.word	0x08008904
 8007af8:	080088c4 	.word	0x080088c4
 8007afc:	0800888e 	.word	0x0800888e
 8007b00:	08008898 	.word	0x08008898
 8007b04:	00000000 	.word	0x00000000
 8007b08:	0800788b 	.word	0x0800788b
 8007b0c:	08008894 	.word	0x08008894

08007b10 <_printf_common>:
 8007b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b14:	4616      	mov	r6, r2
 8007b16:	4699      	mov	r9, r3
 8007b18:	688a      	ldr	r2, [r1, #8]
 8007b1a:	690b      	ldr	r3, [r1, #16]
 8007b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b20:	4293      	cmp	r3, r2
 8007b22:	bfb8      	it	lt
 8007b24:	4613      	movlt	r3, r2
 8007b26:	6033      	str	r3, [r6, #0]
 8007b28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	460c      	mov	r4, r1
 8007b30:	b10a      	cbz	r2, 8007b36 <_printf_common+0x26>
 8007b32:	3301      	adds	r3, #1
 8007b34:	6033      	str	r3, [r6, #0]
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	0699      	lsls	r1, r3, #26
 8007b3a:	bf42      	ittt	mi
 8007b3c:	6833      	ldrmi	r3, [r6, #0]
 8007b3e:	3302      	addmi	r3, #2
 8007b40:	6033      	strmi	r3, [r6, #0]
 8007b42:	6825      	ldr	r5, [r4, #0]
 8007b44:	f015 0506 	ands.w	r5, r5, #6
 8007b48:	d106      	bne.n	8007b58 <_printf_common+0x48>
 8007b4a:	f104 0a19 	add.w	sl, r4, #25
 8007b4e:	68e3      	ldr	r3, [r4, #12]
 8007b50:	6832      	ldr	r2, [r6, #0]
 8007b52:	1a9b      	subs	r3, r3, r2
 8007b54:	42ab      	cmp	r3, r5
 8007b56:	dc26      	bgt.n	8007ba6 <_printf_common+0x96>
 8007b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b5c:	1e13      	subs	r3, r2, #0
 8007b5e:	6822      	ldr	r2, [r4, #0]
 8007b60:	bf18      	it	ne
 8007b62:	2301      	movne	r3, #1
 8007b64:	0692      	lsls	r2, r2, #26
 8007b66:	d42b      	bmi.n	8007bc0 <_printf_common+0xb0>
 8007b68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b6c:	4649      	mov	r1, r9
 8007b6e:	4638      	mov	r0, r7
 8007b70:	47c0      	blx	r8
 8007b72:	3001      	adds	r0, #1
 8007b74:	d01e      	beq.n	8007bb4 <_printf_common+0xa4>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	68e5      	ldr	r5, [r4, #12]
 8007b7a:	6832      	ldr	r2, [r6, #0]
 8007b7c:	f003 0306 	and.w	r3, r3, #6
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	bf08      	it	eq
 8007b84:	1aad      	subeq	r5, r5, r2
 8007b86:	68a3      	ldr	r3, [r4, #8]
 8007b88:	6922      	ldr	r2, [r4, #16]
 8007b8a:	bf0c      	ite	eq
 8007b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b90:	2500      	movne	r5, #0
 8007b92:	4293      	cmp	r3, r2
 8007b94:	bfc4      	itt	gt
 8007b96:	1a9b      	subgt	r3, r3, r2
 8007b98:	18ed      	addgt	r5, r5, r3
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	341a      	adds	r4, #26
 8007b9e:	42b5      	cmp	r5, r6
 8007ba0:	d11a      	bne.n	8007bd8 <_printf_common+0xc8>
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	e008      	b.n	8007bb8 <_printf_common+0xa8>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4652      	mov	r2, sl
 8007baa:	4649      	mov	r1, r9
 8007bac:	4638      	mov	r0, r7
 8007bae:	47c0      	blx	r8
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d103      	bne.n	8007bbc <_printf_common+0xac>
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bbc:	3501      	adds	r5, #1
 8007bbe:	e7c6      	b.n	8007b4e <_printf_common+0x3e>
 8007bc0:	18e1      	adds	r1, r4, r3
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	2030      	movs	r0, #48	; 0x30
 8007bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bca:	4422      	add	r2, r4
 8007bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bd4:	3302      	adds	r3, #2
 8007bd6:	e7c7      	b.n	8007b68 <_printf_common+0x58>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	4622      	mov	r2, r4
 8007bdc:	4649      	mov	r1, r9
 8007bde:	4638      	mov	r0, r7
 8007be0:	47c0      	blx	r8
 8007be2:	3001      	adds	r0, #1
 8007be4:	d0e6      	beq.n	8007bb4 <_printf_common+0xa4>
 8007be6:	3601      	adds	r6, #1
 8007be8:	e7d9      	b.n	8007b9e <_printf_common+0x8e>
	...

08007bec <_printf_i>:
 8007bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf0:	7e0f      	ldrb	r7, [r1, #24]
 8007bf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bf4:	2f78      	cmp	r7, #120	; 0x78
 8007bf6:	4691      	mov	r9, r2
 8007bf8:	4680      	mov	r8, r0
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	469a      	mov	sl, r3
 8007bfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c02:	d807      	bhi.n	8007c14 <_printf_i+0x28>
 8007c04:	2f62      	cmp	r7, #98	; 0x62
 8007c06:	d80a      	bhi.n	8007c1e <_printf_i+0x32>
 8007c08:	2f00      	cmp	r7, #0
 8007c0a:	f000 80d8 	beq.w	8007dbe <_printf_i+0x1d2>
 8007c0e:	2f58      	cmp	r7, #88	; 0x58
 8007c10:	f000 80a3 	beq.w	8007d5a <_printf_i+0x16e>
 8007c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c1c:	e03a      	b.n	8007c94 <_printf_i+0xa8>
 8007c1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c22:	2b15      	cmp	r3, #21
 8007c24:	d8f6      	bhi.n	8007c14 <_printf_i+0x28>
 8007c26:	a101      	add	r1, pc, #4	; (adr r1, 8007c2c <_printf_i+0x40>)
 8007c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c2c:	08007c85 	.word	0x08007c85
 8007c30:	08007c99 	.word	0x08007c99
 8007c34:	08007c15 	.word	0x08007c15
 8007c38:	08007c15 	.word	0x08007c15
 8007c3c:	08007c15 	.word	0x08007c15
 8007c40:	08007c15 	.word	0x08007c15
 8007c44:	08007c99 	.word	0x08007c99
 8007c48:	08007c15 	.word	0x08007c15
 8007c4c:	08007c15 	.word	0x08007c15
 8007c50:	08007c15 	.word	0x08007c15
 8007c54:	08007c15 	.word	0x08007c15
 8007c58:	08007da5 	.word	0x08007da5
 8007c5c:	08007cc9 	.word	0x08007cc9
 8007c60:	08007d87 	.word	0x08007d87
 8007c64:	08007c15 	.word	0x08007c15
 8007c68:	08007c15 	.word	0x08007c15
 8007c6c:	08007dc7 	.word	0x08007dc7
 8007c70:	08007c15 	.word	0x08007c15
 8007c74:	08007cc9 	.word	0x08007cc9
 8007c78:	08007c15 	.word	0x08007c15
 8007c7c:	08007c15 	.word	0x08007c15
 8007c80:	08007d8f 	.word	0x08007d8f
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	1d1a      	adds	r2, r3, #4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	602a      	str	r2, [r5, #0]
 8007c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c94:	2301      	movs	r3, #1
 8007c96:	e0a3      	b.n	8007de0 <_printf_i+0x1f4>
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	6829      	ldr	r1, [r5, #0]
 8007c9c:	0606      	lsls	r6, r0, #24
 8007c9e:	f101 0304 	add.w	r3, r1, #4
 8007ca2:	d50a      	bpl.n	8007cba <_printf_i+0xce>
 8007ca4:	680e      	ldr	r6, [r1, #0]
 8007ca6:	602b      	str	r3, [r5, #0]
 8007ca8:	2e00      	cmp	r6, #0
 8007caa:	da03      	bge.n	8007cb4 <_printf_i+0xc8>
 8007cac:	232d      	movs	r3, #45	; 0x2d
 8007cae:	4276      	negs	r6, r6
 8007cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb4:	485e      	ldr	r0, [pc, #376]	; (8007e30 <_printf_i+0x244>)
 8007cb6:	230a      	movs	r3, #10
 8007cb8:	e019      	b.n	8007cee <_printf_i+0x102>
 8007cba:	680e      	ldr	r6, [r1, #0]
 8007cbc:	602b      	str	r3, [r5, #0]
 8007cbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007cc2:	bf18      	it	ne
 8007cc4:	b236      	sxthne	r6, r6
 8007cc6:	e7ef      	b.n	8007ca8 <_printf_i+0xbc>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	6820      	ldr	r0, [r4, #0]
 8007ccc:	1d19      	adds	r1, r3, #4
 8007cce:	6029      	str	r1, [r5, #0]
 8007cd0:	0601      	lsls	r1, r0, #24
 8007cd2:	d501      	bpl.n	8007cd8 <_printf_i+0xec>
 8007cd4:	681e      	ldr	r6, [r3, #0]
 8007cd6:	e002      	b.n	8007cde <_printf_i+0xf2>
 8007cd8:	0646      	lsls	r6, r0, #25
 8007cda:	d5fb      	bpl.n	8007cd4 <_printf_i+0xe8>
 8007cdc:	881e      	ldrh	r6, [r3, #0]
 8007cde:	4854      	ldr	r0, [pc, #336]	; (8007e30 <_printf_i+0x244>)
 8007ce0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ce2:	bf0c      	ite	eq
 8007ce4:	2308      	moveq	r3, #8
 8007ce6:	230a      	movne	r3, #10
 8007ce8:	2100      	movs	r1, #0
 8007cea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cee:	6865      	ldr	r5, [r4, #4]
 8007cf0:	60a5      	str	r5, [r4, #8]
 8007cf2:	2d00      	cmp	r5, #0
 8007cf4:	bfa2      	ittt	ge
 8007cf6:	6821      	ldrge	r1, [r4, #0]
 8007cf8:	f021 0104 	bicge.w	r1, r1, #4
 8007cfc:	6021      	strge	r1, [r4, #0]
 8007cfe:	b90e      	cbnz	r6, 8007d04 <_printf_i+0x118>
 8007d00:	2d00      	cmp	r5, #0
 8007d02:	d04d      	beq.n	8007da0 <_printf_i+0x1b4>
 8007d04:	4615      	mov	r5, r2
 8007d06:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d0a:	fb03 6711 	mls	r7, r3, r1, r6
 8007d0e:	5dc7      	ldrb	r7, [r0, r7]
 8007d10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d14:	4637      	mov	r7, r6
 8007d16:	42bb      	cmp	r3, r7
 8007d18:	460e      	mov	r6, r1
 8007d1a:	d9f4      	bls.n	8007d06 <_printf_i+0x11a>
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d10b      	bne.n	8007d38 <_printf_i+0x14c>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	07de      	lsls	r6, r3, #31
 8007d24:	d508      	bpl.n	8007d38 <_printf_i+0x14c>
 8007d26:	6923      	ldr	r3, [r4, #16]
 8007d28:	6861      	ldr	r1, [r4, #4]
 8007d2a:	4299      	cmp	r1, r3
 8007d2c:	bfde      	ittt	le
 8007d2e:	2330      	movle	r3, #48	; 0x30
 8007d30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d38:	1b52      	subs	r2, r2, r5
 8007d3a:	6122      	str	r2, [r4, #16]
 8007d3c:	f8cd a000 	str.w	sl, [sp]
 8007d40:	464b      	mov	r3, r9
 8007d42:	aa03      	add	r2, sp, #12
 8007d44:	4621      	mov	r1, r4
 8007d46:	4640      	mov	r0, r8
 8007d48:	f7ff fee2 	bl	8007b10 <_printf_common>
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	d14c      	bne.n	8007dea <_printf_i+0x1fe>
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	b004      	add	sp, #16
 8007d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d5a:	4835      	ldr	r0, [pc, #212]	; (8007e30 <_printf_i+0x244>)
 8007d5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d60:	6829      	ldr	r1, [r5, #0]
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d68:	6029      	str	r1, [r5, #0]
 8007d6a:	061d      	lsls	r5, r3, #24
 8007d6c:	d514      	bpl.n	8007d98 <_printf_i+0x1ac>
 8007d6e:	07df      	lsls	r7, r3, #31
 8007d70:	bf44      	itt	mi
 8007d72:	f043 0320 	orrmi.w	r3, r3, #32
 8007d76:	6023      	strmi	r3, [r4, #0]
 8007d78:	b91e      	cbnz	r6, 8007d82 <_printf_i+0x196>
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	f023 0320 	bic.w	r3, r3, #32
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	2310      	movs	r3, #16
 8007d84:	e7b0      	b.n	8007ce8 <_printf_i+0xfc>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	f043 0320 	orr.w	r3, r3, #32
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	2378      	movs	r3, #120	; 0x78
 8007d90:	4828      	ldr	r0, [pc, #160]	; (8007e34 <_printf_i+0x248>)
 8007d92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d96:	e7e3      	b.n	8007d60 <_printf_i+0x174>
 8007d98:	0659      	lsls	r1, r3, #25
 8007d9a:	bf48      	it	mi
 8007d9c:	b2b6      	uxthmi	r6, r6
 8007d9e:	e7e6      	b.n	8007d6e <_printf_i+0x182>
 8007da0:	4615      	mov	r5, r2
 8007da2:	e7bb      	b.n	8007d1c <_printf_i+0x130>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	6826      	ldr	r6, [r4, #0]
 8007da8:	6961      	ldr	r1, [r4, #20]
 8007daa:	1d18      	adds	r0, r3, #4
 8007dac:	6028      	str	r0, [r5, #0]
 8007dae:	0635      	lsls	r5, r6, #24
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	d501      	bpl.n	8007db8 <_printf_i+0x1cc>
 8007db4:	6019      	str	r1, [r3, #0]
 8007db6:	e002      	b.n	8007dbe <_printf_i+0x1d2>
 8007db8:	0670      	lsls	r0, r6, #25
 8007dba:	d5fb      	bpl.n	8007db4 <_printf_i+0x1c8>
 8007dbc:	8019      	strh	r1, [r3, #0]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6123      	str	r3, [r4, #16]
 8007dc2:	4615      	mov	r5, r2
 8007dc4:	e7ba      	b.n	8007d3c <_printf_i+0x150>
 8007dc6:	682b      	ldr	r3, [r5, #0]
 8007dc8:	1d1a      	adds	r2, r3, #4
 8007dca:	602a      	str	r2, [r5, #0]
 8007dcc:	681d      	ldr	r5, [r3, #0]
 8007dce:	6862      	ldr	r2, [r4, #4]
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f7f8 fa04 	bl	80001e0 <memchr>
 8007dd8:	b108      	cbz	r0, 8007dde <_printf_i+0x1f2>
 8007dda:	1b40      	subs	r0, r0, r5
 8007ddc:	6060      	str	r0, [r4, #4]
 8007dde:	6863      	ldr	r3, [r4, #4]
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	2300      	movs	r3, #0
 8007de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de8:	e7a8      	b.n	8007d3c <_printf_i+0x150>
 8007dea:	6923      	ldr	r3, [r4, #16]
 8007dec:	462a      	mov	r2, r5
 8007dee:	4649      	mov	r1, r9
 8007df0:	4640      	mov	r0, r8
 8007df2:	47d0      	blx	sl
 8007df4:	3001      	adds	r0, #1
 8007df6:	d0ab      	beq.n	8007d50 <_printf_i+0x164>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	079b      	lsls	r3, r3, #30
 8007dfc:	d413      	bmi.n	8007e26 <_printf_i+0x23a>
 8007dfe:	68e0      	ldr	r0, [r4, #12]
 8007e00:	9b03      	ldr	r3, [sp, #12]
 8007e02:	4298      	cmp	r0, r3
 8007e04:	bfb8      	it	lt
 8007e06:	4618      	movlt	r0, r3
 8007e08:	e7a4      	b.n	8007d54 <_printf_i+0x168>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	4649      	mov	r1, r9
 8007e10:	4640      	mov	r0, r8
 8007e12:	47d0      	blx	sl
 8007e14:	3001      	adds	r0, #1
 8007e16:	d09b      	beq.n	8007d50 <_printf_i+0x164>
 8007e18:	3501      	adds	r5, #1
 8007e1a:	68e3      	ldr	r3, [r4, #12]
 8007e1c:	9903      	ldr	r1, [sp, #12]
 8007e1e:	1a5b      	subs	r3, r3, r1
 8007e20:	42ab      	cmp	r3, r5
 8007e22:	dcf2      	bgt.n	8007e0a <_printf_i+0x21e>
 8007e24:	e7eb      	b.n	8007dfe <_printf_i+0x212>
 8007e26:	2500      	movs	r5, #0
 8007e28:	f104 0619 	add.w	r6, r4, #25
 8007e2c:	e7f5      	b.n	8007e1a <_printf_i+0x22e>
 8007e2e:	bf00      	nop
 8007e30:	0800889f 	.word	0x0800889f
 8007e34:	080088b0 	.word	0x080088b0

08007e38 <_sbrk_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	4d06      	ldr	r5, [pc, #24]	; (8007e54 <_sbrk_r+0x1c>)
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4604      	mov	r4, r0
 8007e40:	4608      	mov	r0, r1
 8007e42:	602b      	str	r3, [r5, #0]
 8007e44:	f7fa fda8 	bl	8002998 <_sbrk>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_sbrk_r+0x1a>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_sbrk_r+0x1a>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	20000714 	.word	0x20000714

08007e58 <__swbuf_r>:
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	460e      	mov	r6, r1
 8007e5c:	4614      	mov	r4, r2
 8007e5e:	4605      	mov	r5, r0
 8007e60:	b118      	cbz	r0, 8007e6a <__swbuf_r+0x12>
 8007e62:	6983      	ldr	r3, [r0, #24]
 8007e64:	b90b      	cbnz	r3, 8007e6a <__swbuf_r+0x12>
 8007e66:	f000 f9d9 	bl	800821c <__sinit>
 8007e6a:	4b21      	ldr	r3, [pc, #132]	; (8007ef0 <__swbuf_r+0x98>)
 8007e6c:	429c      	cmp	r4, r3
 8007e6e:	d12b      	bne.n	8007ec8 <__swbuf_r+0x70>
 8007e70:	686c      	ldr	r4, [r5, #4]
 8007e72:	69a3      	ldr	r3, [r4, #24]
 8007e74:	60a3      	str	r3, [r4, #8]
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	071a      	lsls	r2, r3, #28
 8007e7a:	d52f      	bpl.n	8007edc <__swbuf_r+0x84>
 8007e7c:	6923      	ldr	r3, [r4, #16]
 8007e7e:	b36b      	cbz	r3, 8007edc <__swbuf_r+0x84>
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	6820      	ldr	r0, [r4, #0]
 8007e84:	1ac0      	subs	r0, r0, r3
 8007e86:	6963      	ldr	r3, [r4, #20]
 8007e88:	b2f6      	uxtb	r6, r6
 8007e8a:	4283      	cmp	r3, r0
 8007e8c:	4637      	mov	r7, r6
 8007e8e:	dc04      	bgt.n	8007e9a <__swbuf_r+0x42>
 8007e90:	4621      	mov	r1, r4
 8007e92:	4628      	mov	r0, r5
 8007e94:	f000 f92e 	bl	80080f4 <_fflush_r>
 8007e98:	bb30      	cbnz	r0, 8007ee8 <__swbuf_r+0x90>
 8007e9a:	68a3      	ldr	r3, [r4, #8]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	60a3      	str	r3, [r4, #8]
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	6022      	str	r2, [r4, #0]
 8007ea6:	701e      	strb	r6, [r3, #0]
 8007ea8:	6963      	ldr	r3, [r4, #20]
 8007eaa:	3001      	adds	r0, #1
 8007eac:	4283      	cmp	r3, r0
 8007eae:	d004      	beq.n	8007eba <__swbuf_r+0x62>
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	07db      	lsls	r3, r3, #31
 8007eb4:	d506      	bpl.n	8007ec4 <__swbuf_r+0x6c>
 8007eb6:	2e0a      	cmp	r6, #10
 8007eb8:	d104      	bne.n	8007ec4 <__swbuf_r+0x6c>
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 f919 	bl	80080f4 <_fflush_r>
 8007ec2:	b988      	cbnz	r0, 8007ee8 <__swbuf_r+0x90>
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec8:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <__swbuf_r+0x9c>)
 8007eca:	429c      	cmp	r4, r3
 8007ecc:	d101      	bne.n	8007ed2 <__swbuf_r+0x7a>
 8007ece:	68ac      	ldr	r4, [r5, #8]
 8007ed0:	e7cf      	b.n	8007e72 <__swbuf_r+0x1a>
 8007ed2:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <__swbuf_r+0xa0>)
 8007ed4:	429c      	cmp	r4, r3
 8007ed6:	bf08      	it	eq
 8007ed8:	68ec      	ldreq	r4, [r5, #12]
 8007eda:	e7ca      	b.n	8007e72 <__swbuf_r+0x1a>
 8007edc:	4621      	mov	r1, r4
 8007ede:	4628      	mov	r0, r5
 8007ee0:	f000 f80c 	bl	8007efc <__swsetup_r>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d0cb      	beq.n	8007e80 <__swbuf_r+0x28>
 8007ee8:	f04f 37ff 	mov.w	r7, #4294967295
 8007eec:	e7ea      	b.n	8007ec4 <__swbuf_r+0x6c>
 8007eee:	bf00      	nop
 8007ef0:	080088e4 	.word	0x080088e4
 8007ef4:	08008904 	.word	0x08008904
 8007ef8:	080088c4 	.word	0x080088c4

08007efc <__swsetup_r>:
 8007efc:	4b32      	ldr	r3, [pc, #200]	; (8007fc8 <__swsetup_r+0xcc>)
 8007efe:	b570      	push	{r4, r5, r6, lr}
 8007f00:	681d      	ldr	r5, [r3, #0]
 8007f02:	4606      	mov	r6, r0
 8007f04:	460c      	mov	r4, r1
 8007f06:	b125      	cbz	r5, 8007f12 <__swsetup_r+0x16>
 8007f08:	69ab      	ldr	r3, [r5, #24]
 8007f0a:	b913      	cbnz	r3, 8007f12 <__swsetup_r+0x16>
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	f000 f985 	bl	800821c <__sinit>
 8007f12:	4b2e      	ldr	r3, [pc, #184]	; (8007fcc <__swsetup_r+0xd0>)
 8007f14:	429c      	cmp	r4, r3
 8007f16:	d10f      	bne.n	8007f38 <__swsetup_r+0x3c>
 8007f18:	686c      	ldr	r4, [r5, #4]
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f20:	0719      	lsls	r1, r3, #28
 8007f22:	d42c      	bmi.n	8007f7e <__swsetup_r+0x82>
 8007f24:	06dd      	lsls	r5, r3, #27
 8007f26:	d411      	bmi.n	8007f4c <__swsetup_r+0x50>
 8007f28:	2309      	movs	r3, #9
 8007f2a:	6033      	str	r3, [r6, #0]
 8007f2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f30:	81a3      	strh	r3, [r4, #12]
 8007f32:	f04f 30ff 	mov.w	r0, #4294967295
 8007f36:	e03e      	b.n	8007fb6 <__swsetup_r+0xba>
 8007f38:	4b25      	ldr	r3, [pc, #148]	; (8007fd0 <__swsetup_r+0xd4>)
 8007f3a:	429c      	cmp	r4, r3
 8007f3c:	d101      	bne.n	8007f42 <__swsetup_r+0x46>
 8007f3e:	68ac      	ldr	r4, [r5, #8]
 8007f40:	e7eb      	b.n	8007f1a <__swsetup_r+0x1e>
 8007f42:	4b24      	ldr	r3, [pc, #144]	; (8007fd4 <__swsetup_r+0xd8>)
 8007f44:	429c      	cmp	r4, r3
 8007f46:	bf08      	it	eq
 8007f48:	68ec      	ldreq	r4, [r5, #12]
 8007f4a:	e7e6      	b.n	8007f1a <__swsetup_r+0x1e>
 8007f4c:	0758      	lsls	r0, r3, #29
 8007f4e:	d512      	bpl.n	8007f76 <__swsetup_r+0x7a>
 8007f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f52:	b141      	cbz	r1, 8007f66 <__swsetup_r+0x6a>
 8007f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f58:	4299      	cmp	r1, r3
 8007f5a:	d002      	beq.n	8007f62 <__swsetup_r+0x66>
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f7ff fa41 	bl	80073e4 <_free_r>
 8007f62:	2300      	movs	r3, #0
 8007f64:	6363      	str	r3, [r4, #52]	; 0x34
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f6c:	81a3      	strh	r3, [r4, #12]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	6063      	str	r3, [r4, #4]
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	f043 0308 	orr.w	r3, r3, #8
 8007f7c:	81a3      	strh	r3, [r4, #12]
 8007f7e:	6923      	ldr	r3, [r4, #16]
 8007f80:	b94b      	cbnz	r3, 8007f96 <__swsetup_r+0x9a>
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f8c:	d003      	beq.n	8007f96 <__swsetup_r+0x9a>
 8007f8e:	4621      	mov	r1, r4
 8007f90:	4630      	mov	r0, r6
 8007f92:	f000 fa09 	bl	80083a8 <__smakebuf_r>
 8007f96:	89a0      	ldrh	r0, [r4, #12]
 8007f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f9c:	f010 0301 	ands.w	r3, r0, #1
 8007fa0:	d00a      	beq.n	8007fb8 <__swsetup_r+0xbc>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60a3      	str	r3, [r4, #8]
 8007fa6:	6963      	ldr	r3, [r4, #20]
 8007fa8:	425b      	negs	r3, r3
 8007faa:	61a3      	str	r3, [r4, #24]
 8007fac:	6923      	ldr	r3, [r4, #16]
 8007fae:	b943      	cbnz	r3, 8007fc2 <__swsetup_r+0xc6>
 8007fb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fb4:	d1ba      	bne.n	8007f2c <__swsetup_r+0x30>
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
 8007fb8:	0781      	lsls	r1, r0, #30
 8007fba:	bf58      	it	pl
 8007fbc:	6963      	ldrpl	r3, [r4, #20]
 8007fbe:	60a3      	str	r3, [r4, #8]
 8007fc0:	e7f4      	b.n	8007fac <__swsetup_r+0xb0>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	e7f7      	b.n	8007fb6 <__swsetup_r+0xba>
 8007fc6:	bf00      	nop
 8007fc8:	20000108 	.word	0x20000108
 8007fcc:	080088e4 	.word	0x080088e4
 8007fd0:	08008904 	.word	0x08008904
 8007fd4:	080088c4 	.word	0x080088c4

08007fd8 <abort>:
 8007fd8:	b508      	push	{r3, lr}
 8007fda:	2006      	movs	r0, #6
 8007fdc:	f000 fab0 	bl	8008540 <raise>
 8007fe0:	2001      	movs	r0, #1
 8007fe2:	f7fa fc61 	bl	80028a8 <_exit>
	...

08007fe8 <__sflush_r>:
 8007fe8:	898a      	ldrh	r2, [r1, #12]
 8007fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fee:	4605      	mov	r5, r0
 8007ff0:	0710      	lsls	r0, r2, #28
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	d458      	bmi.n	80080a8 <__sflush_r+0xc0>
 8007ff6:	684b      	ldr	r3, [r1, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	dc05      	bgt.n	8008008 <__sflush_r+0x20>
 8007ffc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	dc02      	bgt.n	8008008 <__sflush_r+0x20>
 8008002:	2000      	movs	r0, #0
 8008004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800800a:	2e00      	cmp	r6, #0
 800800c:	d0f9      	beq.n	8008002 <__sflush_r+0x1a>
 800800e:	2300      	movs	r3, #0
 8008010:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008014:	682f      	ldr	r7, [r5, #0]
 8008016:	602b      	str	r3, [r5, #0]
 8008018:	d032      	beq.n	8008080 <__sflush_r+0x98>
 800801a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	075a      	lsls	r2, r3, #29
 8008020:	d505      	bpl.n	800802e <__sflush_r+0x46>
 8008022:	6863      	ldr	r3, [r4, #4]
 8008024:	1ac0      	subs	r0, r0, r3
 8008026:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008028:	b10b      	cbz	r3, 800802e <__sflush_r+0x46>
 800802a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800802c:	1ac0      	subs	r0, r0, r3
 800802e:	2300      	movs	r3, #0
 8008030:	4602      	mov	r2, r0
 8008032:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008034:	6a21      	ldr	r1, [r4, #32]
 8008036:	4628      	mov	r0, r5
 8008038:	47b0      	blx	r6
 800803a:	1c43      	adds	r3, r0, #1
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	d106      	bne.n	800804e <__sflush_r+0x66>
 8008040:	6829      	ldr	r1, [r5, #0]
 8008042:	291d      	cmp	r1, #29
 8008044:	d82c      	bhi.n	80080a0 <__sflush_r+0xb8>
 8008046:	4a2a      	ldr	r2, [pc, #168]	; (80080f0 <__sflush_r+0x108>)
 8008048:	40ca      	lsrs	r2, r1
 800804a:	07d6      	lsls	r6, r2, #31
 800804c:	d528      	bpl.n	80080a0 <__sflush_r+0xb8>
 800804e:	2200      	movs	r2, #0
 8008050:	6062      	str	r2, [r4, #4]
 8008052:	04d9      	lsls	r1, r3, #19
 8008054:	6922      	ldr	r2, [r4, #16]
 8008056:	6022      	str	r2, [r4, #0]
 8008058:	d504      	bpl.n	8008064 <__sflush_r+0x7c>
 800805a:	1c42      	adds	r2, r0, #1
 800805c:	d101      	bne.n	8008062 <__sflush_r+0x7a>
 800805e:	682b      	ldr	r3, [r5, #0]
 8008060:	b903      	cbnz	r3, 8008064 <__sflush_r+0x7c>
 8008062:	6560      	str	r0, [r4, #84]	; 0x54
 8008064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008066:	602f      	str	r7, [r5, #0]
 8008068:	2900      	cmp	r1, #0
 800806a:	d0ca      	beq.n	8008002 <__sflush_r+0x1a>
 800806c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008070:	4299      	cmp	r1, r3
 8008072:	d002      	beq.n	800807a <__sflush_r+0x92>
 8008074:	4628      	mov	r0, r5
 8008076:	f7ff f9b5 	bl	80073e4 <_free_r>
 800807a:	2000      	movs	r0, #0
 800807c:	6360      	str	r0, [r4, #52]	; 0x34
 800807e:	e7c1      	b.n	8008004 <__sflush_r+0x1c>
 8008080:	6a21      	ldr	r1, [r4, #32]
 8008082:	2301      	movs	r3, #1
 8008084:	4628      	mov	r0, r5
 8008086:	47b0      	blx	r6
 8008088:	1c41      	adds	r1, r0, #1
 800808a:	d1c7      	bne.n	800801c <__sflush_r+0x34>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0c4      	beq.n	800801c <__sflush_r+0x34>
 8008092:	2b1d      	cmp	r3, #29
 8008094:	d001      	beq.n	800809a <__sflush_r+0xb2>
 8008096:	2b16      	cmp	r3, #22
 8008098:	d101      	bne.n	800809e <__sflush_r+0xb6>
 800809a:	602f      	str	r7, [r5, #0]
 800809c:	e7b1      	b.n	8008002 <__sflush_r+0x1a>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	e7ad      	b.n	8008004 <__sflush_r+0x1c>
 80080a8:	690f      	ldr	r7, [r1, #16]
 80080aa:	2f00      	cmp	r7, #0
 80080ac:	d0a9      	beq.n	8008002 <__sflush_r+0x1a>
 80080ae:	0793      	lsls	r3, r2, #30
 80080b0:	680e      	ldr	r6, [r1, #0]
 80080b2:	bf08      	it	eq
 80080b4:	694b      	ldreq	r3, [r1, #20]
 80080b6:	600f      	str	r7, [r1, #0]
 80080b8:	bf18      	it	ne
 80080ba:	2300      	movne	r3, #0
 80080bc:	eba6 0807 	sub.w	r8, r6, r7
 80080c0:	608b      	str	r3, [r1, #8]
 80080c2:	f1b8 0f00 	cmp.w	r8, #0
 80080c6:	dd9c      	ble.n	8008002 <__sflush_r+0x1a>
 80080c8:	6a21      	ldr	r1, [r4, #32]
 80080ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080cc:	4643      	mov	r3, r8
 80080ce:	463a      	mov	r2, r7
 80080d0:	4628      	mov	r0, r5
 80080d2:	47b0      	blx	r6
 80080d4:	2800      	cmp	r0, #0
 80080d6:	dc06      	bgt.n	80080e6 <__sflush_r+0xfe>
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080de:	81a3      	strh	r3, [r4, #12]
 80080e0:	f04f 30ff 	mov.w	r0, #4294967295
 80080e4:	e78e      	b.n	8008004 <__sflush_r+0x1c>
 80080e6:	4407      	add	r7, r0
 80080e8:	eba8 0800 	sub.w	r8, r8, r0
 80080ec:	e7e9      	b.n	80080c2 <__sflush_r+0xda>
 80080ee:	bf00      	nop
 80080f0:	20400001 	.word	0x20400001

080080f4 <_fflush_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	690b      	ldr	r3, [r1, #16]
 80080f8:	4605      	mov	r5, r0
 80080fa:	460c      	mov	r4, r1
 80080fc:	b913      	cbnz	r3, 8008104 <_fflush_r+0x10>
 80080fe:	2500      	movs	r5, #0
 8008100:	4628      	mov	r0, r5
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	b118      	cbz	r0, 800810e <_fflush_r+0x1a>
 8008106:	6983      	ldr	r3, [r0, #24]
 8008108:	b90b      	cbnz	r3, 800810e <_fflush_r+0x1a>
 800810a:	f000 f887 	bl	800821c <__sinit>
 800810e:	4b14      	ldr	r3, [pc, #80]	; (8008160 <_fflush_r+0x6c>)
 8008110:	429c      	cmp	r4, r3
 8008112:	d11b      	bne.n	800814c <_fflush_r+0x58>
 8008114:	686c      	ldr	r4, [r5, #4]
 8008116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d0ef      	beq.n	80080fe <_fflush_r+0xa>
 800811e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008120:	07d0      	lsls	r0, r2, #31
 8008122:	d404      	bmi.n	800812e <_fflush_r+0x3a>
 8008124:	0599      	lsls	r1, r3, #22
 8008126:	d402      	bmi.n	800812e <_fflush_r+0x3a>
 8008128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800812a:	f000 f915 	bl	8008358 <__retarget_lock_acquire_recursive>
 800812e:	4628      	mov	r0, r5
 8008130:	4621      	mov	r1, r4
 8008132:	f7ff ff59 	bl	8007fe8 <__sflush_r>
 8008136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008138:	07da      	lsls	r2, r3, #31
 800813a:	4605      	mov	r5, r0
 800813c:	d4e0      	bmi.n	8008100 <_fflush_r+0xc>
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	059b      	lsls	r3, r3, #22
 8008142:	d4dd      	bmi.n	8008100 <_fflush_r+0xc>
 8008144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008146:	f000 f908 	bl	800835a <__retarget_lock_release_recursive>
 800814a:	e7d9      	b.n	8008100 <_fflush_r+0xc>
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <_fflush_r+0x70>)
 800814e:	429c      	cmp	r4, r3
 8008150:	d101      	bne.n	8008156 <_fflush_r+0x62>
 8008152:	68ac      	ldr	r4, [r5, #8]
 8008154:	e7df      	b.n	8008116 <_fflush_r+0x22>
 8008156:	4b04      	ldr	r3, [pc, #16]	; (8008168 <_fflush_r+0x74>)
 8008158:	429c      	cmp	r4, r3
 800815a:	bf08      	it	eq
 800815c:	68ec      	ldreq	r4, [r5, #12]
 800815e:	e7da      	b.n	8008116 <_fflush_r+0x22>
 8008160:	080088e4 	.word	0x080088e4
 8008164:	08008904 	.word	0x08008904
 8008168:	080088c4 	.word	0x080088c4

0800816c <std>:
 800816c:	2300      	movs	r3, #0
 800816e:	b510      	push	{r4, lr}
 8008170:	4604      	mov	r4, r0
 8008172:	e9c0 3300 	strd	r3, r3, [r0]
 8008176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800817a:	6083      	str	r3, [r0, #8]
 800817c:	8181      	strh	r1, [r0, #12]
 800817e:	6643      	str	r3, [r0, #100]	; 0x64
 8008180:	81c2      	strh	r2, [r0, #14]
 8008182:	6183      	str	r3, [r0, #24]
 8008184:	4619      	mov	r1, r3
 8008186:	2208      	movs	r2, #8
 8008188:	305c      	adds	r0, #92	; 0x5c
 800818a:	f7ff f88d 	bl	80072a8 <memset>
 800818e:	4b05      	ldr	r3, [pc, #20]	; (80081a4 <std+0x38>)
 8008190:	6263      	str	r3, [r4, #36]	; 0x24
 8008192:	4b05      	ldr	r3, [pc, #20]	; (80081a8 <std+0x3c>)
 8008194:	62a3      	str	r3, [r4, #40]	; 0x28
 8008196:	4b05      	ldr	r3, [pc, #20]	; (80081ac <std+0x40>)
 8008198:	62e3      	str	r3, [r4, #44]	; 0x2c
 800819a:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <std+0x44>)
 800819c:	6224      	str	r4, [r4, #32]
 800819e:	6323      	str	r3, [r4, #48]	; 0x30
 80081a0:	bd10      	pop	{r4, pc}
 80081a2:	bf00      	nop
 80081a4:	08008579 	.word	0x08008579
 80081a8:	0800859b 	.word	0x0800859b
 80081ac:	080085d3 	.word	0x080085d3
 80081b0:	080085f7 	.word	0x080085f7

080081b4 <_cleanup_r>:
 80081b4:	4901      	ldr	r1, [pc, #4]	; (80081bc <_cleanup_r+0x8>)
 80081b6:	f000 b8af 	b.w	8008318 <_fwalk_reent>
 80081ba:	bf00      	nop
 80081bc:	080080f5 	.word	0x080080f5

080081c0 <__sfmoreglue>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	2268      	movs	r2, #104	; 0x68
 80081c4:	1e4d      	subs	r5, r1, #1
 80081c6:	4355      	muls	r5, r2
 80081c8:	460e      	mov	r6, r1
 80081ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081ce:	f7ff f975 	bl	80074bc <_malloc_r>
 80081d2:	4604      	mov	r4, r0
 80081d4:	b140      	cbz	r0, 80081e8 <__sfmoreglue+0x28>
 80081d6:	2100      	movs	r1, #0
 80081d8:	e9c0 1600 	strd	r1, r6, [r0]
 80081dc:	300c      	adds	r0, #12
 80081de:	60a0      	str	r0, [r4, #8]
 80081e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081e4:	f7ff f860 	bl	80072a8 <memset>
 80081e8:	4620      	mov	r0, r4
 80081ea:	bd70      	pop	{r4, r5, r6, pc}

080081ec <__sfp_lock_acquire>:
 80081ec:	4801      	ldr	r0, [pc, #4]	; (80081f4 <__sfp_lock_acquire+0x8>)
 80081ee:	f000 b8b3 	b.w	8008358 <__retarget_lock_acquire_recursive>
 80081f2:	bf00      	nop
 80081f4:	20000711 	.word	0x20000711

080081f8 <__sfp_lock_release>:
 80081f8:	4801      	ldr	r0, [pc, #4]	; (8008200 <__sfp_lock_release+0x8>)
 80081fa:	f000 b8ae 	b.w	800835a <__retarget_lock_release_recursive>
 80081fe:	bf00      	nop
 8008200:	20000711 	.word	0x20000711

08008204 <__sinit_lock_acquire>:
 8008204:	4801      	ldr	r0, [pc, #4]	; (800820c <__sinit_lock_acquire+0x8>)
 8008206:	f000 b8a7 	b.w	8008358 <__retarget_lock_acquire_recursive>
 800820a:	bf00      	nop
 800820c:	20000712 	.word	0x20000712

08008210 <__sinit_lock_release>:
 8008210:	4801      	ldr	r0, [pc, #4]	; (8008218 <__sinit_lock_release+0x8>)
 8008212:	f000 b8a2 	b.w	800835a <__retarget_lock_release_recursive>
 8008216:	bf00      	nop
 8008218:	20000712 	.word	0x20000712

0800821c <__sinit>:
 800821c:	b510      	push	{r4, lr}
 800821e:	4604      	mov	r4, r0
 8008220:	f7ff fff0 	bl	8008204 <__sinit_lock_acquire>
 8008224:	69a3      	ldr	r3, [r4, #24]
 8008226:	b11b      	cbz	r3, 8008230 <__sinit+0x14>
 8008228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800822c:	f7ff bff0 	b.w	8008210 <__sinit_lock_release>
 8008230:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008234:	6523      	str	r3, [r4, #80]	; 0x50
 8008236:	4b13      	ldr	r3, [pc, #76]	; (8008284 <__sinit+0x68>)
 8008238:	4a13      	ldr	r2, [pc, #76]	; (8008288 <__sinit+0x6c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	62a2      	str	r2, [r4, #40]	; 0x28
 800823e:	42a3      	cmp	r3, r4
 8008240:	bf04      	itt	eq
 8008242:	2301      	moveq	r3, #1
 8008244:	61a3      	streq	r3, [r4, #24]
 8008246:	4620      	mov	r0, r4
 8008248:	f000 f820 	bl	800828c <__sfp>
 800824c:	6060      	str	r0, [r4, #4]
 800824e:	4620      	mov	r0, r4
 8008250:	f000 f81c 	bl	800828c <__sfp>
 8008254:	60a0      	str	r0, [r4, #8]
 8008256:	4620      	mov	r0, r4
 8008258:	f000 f818 	bl	800828c <__sfp>
 800825c:	2200      	movs	r2, #0
 800825e:	60e0      	str	r0, [r4, #12]
 8008260:	2104      	movs	r1, #4
 8008262:	6860      	ldr	r0, [r4, #4]
 8008264:	f7ff ff82 	bl	800816c <std>
 8008268:	68a0      	ldr	r0, [r4, #8]
 800826a:	2201      	movs	r2, #1
 800826c:	2109      	movs	r1, #9
 800826e:	f7ff ff7d 	bl	800816c <std>
 8008272:	68e0      	ldr	r0, [r4, #12]
 8008274:	2202      	movs	r2, #2
 8008276:	2112      	movs	r1, #18
 8008278:	f7ff ff78 	bl	800816c <std>
 800827c:	2301      	movs	r3, #1
 800827e:	61a3      	str	r3, [r4, #24]
 8008280:	e7d2      	b.n	8008228 <__sinit+0xc>
 8008282:	bf00      	nop
 8008284:	080087dc 	.word	0x080087dc
 8008288:	080081b5 	.word	0x080081b5

0800828c <__sfp>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	4607      	mov	r7, r0
 8008290:	f7ff ffac 	bl	80081ec <__sfp_lock_acquire>
 8008294:	4b1e      	ldr	r3, [pc, #120]	; (8008310 <__sfp+0x84>)
 8008296:	681e      	ldr	r6, [r3, #0]
 8008298:	69b3      	ldr	r3, [r6, #24]
 800829a:	b913      	cbnz	r3, 80082a2 <__sfp+0x16>
 800829c:	4630      	mov	r0, r6
 800829e:	f7ff ffbd 	bl	800821c <__sinit>
 80082a2:	3648      	adds	r6, #72	; 0x48
 80082a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	d503      	bpl.n	80082b4 <__sfp+0x28>
 80082ac:	6833      	ldr	r3, [r6, #0]
 80082ae:	b30b      	cbz	r3, 80082f4 <__sfp+0x68>
 80082b0:	6836      	ldr	r6, [r6, #0]
 80082b2:	e7f7      	b.n	80082a4 <__sfp+0x18>
 80082b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082b8:	b9d5      	cbnz	r5, 80082f0 <__sfp+0x64>
 80082ba:	4b16      	ldr	r3, [pc, #88]	; (8008314 <__sfp+0x88>)
 80082bc:	60e3      	str	r3, [r4, #12]
 80082be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082c2:	6665      	str	r5, [r4, #100]	; 0x64
 80082c4:	f000 f847 	bl	8008356 <__retarget_lock_init_recursive>
 80082c8:	f7ff ff96 	bl	80081f8 <__sfp_lock_release>
 80082cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082d4:	6025      	str	r5, [r4, #0]
 80082d6:	61a5      	str	r5, [r4, #24]
 80082d8:	2208      	movs	r2, #8
 80082da:	4629      	mov	r1, r5
 80082dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082e0:	f7fe ffe2 	bl	80072a8 <memset>
 80082e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082ec:	4620      	mov	r0, r4
 80082ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f0:	3468      	adds	r4, #104	; 0x68
 80082f2:	e7d9      	b.n	80082a8 <__sfp+0x1c>
 80082f4:	2104      	movs	r1, #4
 80082f6:	4638      	mov	r0, r7
 80082f8:	f7ff ff62 	bl	80081c0 <__sfmoreglue>
 80082fc:	4604      	mov	r4, r0
 80082fe:	6030      	str	r0, [r6, #0]
 8008300:	2800      	cmp	r0, #0
 8008302:	d1d5      	bne.n	80082b0 <__sfp+0x24>
 8008304:	f7ff ff78 	bl	80081f8 <__sfp_lock_release>
 8008308:	230c      	movs	r3, #12
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	e7ee      	b.n	80082ec <__sfp+0x60>
 800830e:	bf00      	nop
 8008310:	080087dc 	.word	0x080087dc
 8008314:	ffff0001 	.word	0xffff0001

08008318 <_fwalk_reent>:
 8008318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800831c:	4606      	mov	r6, r0
 800831e:	4688      	mov	r8, r1
 8008320:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008324:	2700      	movs	r7, #0
 8008326:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800832a:	f1b9 0901 	subs.w	r9, r9, #1
 800832e:	d505      	bpl.n	800833c <_fwalk_reent+0x24>
 8008330:	6824      	ldr	r4, [r4, #0]
 8008332:	2c00      	cmp	r4, #0
 8008334:	d1f7      	bne.n	8008326 <_fwalk_reent+0xe>
 8008336:	4638      	mov	r0, r7
 8008338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800833c:	89ab      	ldrh	r3, [r5, #12]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d907      	bls.n	8008352 <_fwalk_reent+0x3a>
 8008342:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008346:	3301      	adds	r3, #1
 8008348:	d003      	beq.n	8008352 <_fwalk_reent+0x3a>
 800834a:	4629      	mov	r1, r5
 800834c:	4630      	mov	r0, r6
 800834e:	47c0      	blx	r8
 8008350:	4307      	orrs	r7, r0
 8008352:	3568      	adds	r5, #104	; 0x68
 8008354:	e7e9      	b.n	800832a <_fwalk_reent+0x12>

08008356 <__retarget_lock_init_recursive>:
 8008356:	4770      	bx	lr

08008358 <__retarget_lock_acquire_recursive>:
 8008358:	4770      	bx	lr

0800835a <__retarget_lock_release_recursive>:
 800835a:	4770      	bx	lr

0800835c <__swhatbuf_r>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	460e      	mov	r6, r1
 8008360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008364:	2900      	cmp	r1, #0
 8008366:	b096      	sub	sp, #88	; 0x58
 8008368:	4614      	mov	r4, r2
 800836a:	461d      	mov	r5, r3
 800836c:	da08      	bge.n	8008380 <__swhatbuf_r+0x24>
 800836e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	602a      	str	r2, [r5, #0]
 8008376:	061a      	lsls	r2, r3, #24
 8008378:	d410      	bmi.n	800839c <__swhatbuf_r+0x40>
 800837a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800837e:	e00e      	b.n	800839e <__swhatbuf_r+0x42>
 8008380:	466a      	mov	r2, sp
 8008382:	f000 f95f 	bl	8008644 <_fstat_r>
 8008386:	2800      	cmp	r0, #0
 8008388:	dbf1      	blt.n	800836e <__swhatbuf_r+0x12>
 800838a:	9a01      	ldr	r2, [sp, #4]
 800838c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008390:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008394:	425a      	negs	r2, r3
 8008396:	415a      	adcs	r2, r3
 8008398:	602a      	str	r2, [r5, #0]
 800839a:	e7ee      	b.n	800837a <__swhatbuf_r+0x1e>
 800839c:	2340      	movs	r3, #64	; 0x40
 800839e:	2000      	movs	r0, #0
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	b016      	add	sp, #88	; 0x58
 80083a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080083a8 <__smakebuf_r>:
 80083a8:	898b      	ldrh	r3, [r1, #12]
 80083aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083ac:	079d      	lsls	r5, r3, #30
 80083ae:	4606      	mov	r6, r0
 80083b0:	460c      	mov	r4, r1
 80083b2:	d507      	bpl.n	80083c4 <__smakebuf_r+0x1c>
 80083b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	6123      	str	r3, [r4, #16]
 80083bc:	2301      	movs	r3, #1
 80083be:	6163      	str	r3, [r4, #20]
 80083c0:	b002      	add	sp, #8
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	ab01      	add	r3, sp, #4
 80083c6:	466a      	mov	r2, sp
 80083c8:	f7ff ffc8 	bl	800835c <__swhatbuf_r>
 80083cc:	9900      	ldr	r1, [sp, #0]
 80083ce:	4605      	mov	r5, r0
 80083d0:	4630      	mov	r0, r6
 80083d2:	f7ff f873 	bl	80074bc <_malloc_r>
 80083d6:	b948      	cbnz	r0, 80083ec <__smakebuf_r+0x44>
 80083d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083dc:	059a      	lsls	r2, r3, #22
 80083de:	d4ef      	bmi.n	80083c0 <__smakebuf_r+0x18>
 80083e0:	f023 0303 	bic.w	r3, r3, #3
 80083e4:	f043 0302 	orr.w	r3, r3, #2
 80083e8:	81a3      	strh	r3, [r4, #12]
 80083ea:	e7e3      	b.n	80083b4 <__smakebuf_r+0xc>
 80083ec:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <__smakebuf_r+0x7c>)
 80083ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	6020      	str	r0, [r4, #0]
 80083f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f8:	81a3      	strh	r3, [r4, #12]
 80083fa:	9b00      	ldr	r3, [sp, #0]
 80083fc:	6163      	str	r3, [r4, #20]
 80083fe:	9b01      	ldr	r3, [sp, #4]
 8008400:	6120      	str	r0, [r4, #16]
 8008402:	b15b      	cbz	r3, 800841c <__smakebuf_r+0x74>
 8008404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008408:	4630      	mov	r0, r6
 800840a:	f000 f92d 	bl	8008668 <_isatty_r>
 800840e:	b128      	cbz	r0, 800841c <__smakebuf_r+0x74>
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	f023 0303 	bic.w	r3, r3, #3
 8008416:	f043 0301 	orr.w	r3, r3, #1
 800841a:	81a3      	strh	r3, [r4, #12]
 800841c:	89a0      	ldrh	r0, [r4, #12]
 800841e:	4305      	orrs	r5, r0
 8008420:	81a5      	strh	r5, [r4, #12]
 8008422:	e7cd      	b.n	80083c0 <__smakebuf_r+0x18>
 8008424:	080081b5 	.word	0x080081b5

08008428 <memcpy>:
 8008428:	440a      	add	r2, r1
 800842a:	4291      	cmp	r1, r2
 800842c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008430:	d100      	bne.n	8008434 <memcpy+0xc>
 8008432:	4770      	bx	lr
 8008434:	b510      	push	{r4, lr}
 8008436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800843a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800843e:	4291      	cmp	r1, r2
 8008440:	d1f9      	bne.n	8008436 <memcpy+0xe>
 8008442:	bd10      	pop	{r4, pc}

08008444 <memmove>:
 8008444:	4288      	cmp	r0, r1
 8008446:	b510      	push	{r4, lr}
 8008448:	eb01 0402 	add.w	r4, r1, r2
 800844c:	d902      	bls.n	8008454 <memmove+0x10>
 800844e:	4284      	cmp	r4, r0
 8008450:	4623      	mov	r3, r4
 8008452:	d807      	bhi.n	8008464 <memmove+0x20>
 8008454:	1e43      	subs	r3, r0, #1
 8008456:	42a1      	cmp	r1, r4
 8008458:	d008      	beq.n	800846c <memmove+0x28>
 800845a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800845e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008462:	e7f8      	b.n	8008456 <memmove+0x12>
 8008464:	4402      	add	r2, r0
 8008466:	4601      	mov	r1, r0
 8008468:	428a      	cmp	r2, r1
 800846a:	d100      	bne.n	800846e <memmove+0x2a>
 800846c:	bd10      	pop	{r4, pc}
 800846e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008476:	e7f7      	b.n	8008468 <memmove+0x24>

08008478 <__malloc_lock>:
 8008478:	4801      	ldr	r0, [pc, #4]	; (8008480 <__malloc_lock+0x8>)
 800847a:	f7ff bf6d 	b.w	8008358 <__retarget_lock_acquire_recursive>
 800847e:	bf00      	nop
 8008480:	20000710 	.word	0x20000710

08008484 <__malloc_unlock>:
 8008484:	4801      	ldr	r0, [pc, #4]	; (800848c <__malloc_unlock+0x8>)
 8008486:	f7ff bf68 	b.w	800835a <__retarget_lock_release_recursive>
 800848a:	bf00      	nop
 800848c:	20000710 	.word	0x20000710

08008490 <_realloc_r>:
 8008490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008494:	4680      	mov	r8, r0
 8008496:	4614      	mov	r4, r2
 8008498:	460e      	mov	r6, r1
 800849a:	b921      	cbnz	r1, 80084a6 <_realloc_r+0x16>
 800849c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084a0:	4611      	mov	r1, r2
 80084a2:	f7ff b80b 	b.w	80074bc <_malloc_r>
 80084a6:	b92a      	cbnz	r2, 80084b4 <_realloc_r+0x24>
 80084a8:	f7fe ff9c 	bl	80073e4 <_free_r>
 80084ac:	4625      	mov	r5, r4
 80084ae:	4628      	mov	r0, r5
 80084b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084b4:	f000 f8fa 	bl	80086ac <_malloc_usable_size_r>
 80084b8:	4284      	cmp	r4, r0
 80084ba:	4607      	mov	r7, r0
 80084bc:	d802      	bhi.n	80084c4 <_realloc_r+0x34>
 80084be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084c2:	d812      	bhi.n	80084ea <_realloc_r+0x5a>
 80084c4:	4621      	mov	r1, r4
 80084c6:	4640      	mov	r0, r8
 80084c8:	f7fe fff8 	bl	80074bc <_malloc_r>
 80084cc:	4605      	mov	r5, r0
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d0ed      	beq.n	80084ae <_realloc_r+0x1e>
 80084d2:	42bc      	cmp	r4, r7
 80084d4:	4622      	mov	r2, r4
 80084d6:	4631      	mov	r1, r6
 80084d8:	bf28      	it	cs
 80084da:	463a      	movcs	r2, r7
 80084dc:	f7ff ffa4 	bl	8008428 <memcpy>
 80084e0:	4631      	mov	r1, r6
 80084e2:	4640      	mov	r0, r8
 80084e4:	f7fe ff7e 	bl	80073e4 <_free_r>
 80084e8:	e7e1      	b.n	80084ae <_realloc_r+0x1e>
 80084ea:	4635      	mov	r5, r6
 80084ec:	e7df      	b.n	80084ae <_realloc_r+0x1e>

080084ee <_raise_r>:
 80084ee:	291f      	cmp	r1, #31
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	4604      	mov	r4, r0
 80084f4:	460d      	mov	r5, r1
 80084f6:	d904      	bls.n	8008502 <_raise_r+0x14>
 80084f8:	2316      	movs	r3, #22
 80084fa:	6003      	str	r3, [r0, #0]
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	bd38      	pop	{r3, r4, r5, pc}
 8008502:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008504:	b112      	cbz	r2, 800850c <_raise_r+0x1e>
 8008506:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800850a:	b94b      	cbnz	r3, 8008520 <_raise_r+0x32>
 800850c:	4620      	mov	r0, r4
 800850e:	f000 f831 	bl	8008574 <_getpid_r>
 8008512:	462a      	mov	r2, r5
 8008514:	4601      	mov	r1, r0
 8008516:	4620      	mov	r0, r4
 8008518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800851c:	f000 b818 	b.w	8008550 <_kill_r>
 8008520:	2b01      	cmp	r3, #1
 8008522:	d00a      	beq.n	800853a <_raise_r+0x4c>
 8008524:	1c59      	adds	r1, r3, #1
 8008526:	d103      	bne.n	8008530 <_raise_r+0x42>
 8008528:	2316      	movs	r3, #22
 800852a:	6003      	str	r3, [r0, #0]
 800852c:	2001      	movs	r0, #1
 800852e:	e7e7      	b.n	8008500 <_raise_r+0x12>
 8008530:	2400      	movs	r4, #0
 8008532:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008536:	4628      	mov	r0, r5
 8008538:	4798      	blx	r3
 800853a:	2000      	movs	r0, #0
 800853c:	e7e0      	b.n	8008500 <_raise_r+0x12>
	...

08008540 <raise>:
 8008540:	4b02      	ldr	r3, [pc, #8]	; (800854c <raise+0xc>)
 8008542:	4601      	mov	r1, r0
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	f7ff bfd2 	b.w	80084ee <_raise_r>
 800854a:	bf00      	nop
 800854c:	20000108 	.word	0x20000108

08008550 <_kill_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4d07      	ldr	r5, [pc, #28]	; (8008570 <_kill_r+0x20>)
 8008554:	2300      	movs	r3, #0
 8008556:	4604      	mov	r4, r0
 8008558:	4608      	mov	r0, r1
 800855a:	4611      	mov	r1, r2
 800855c:	602b      	str	r3, [r5, #0]
 800855e:	f7fa f993 	bl	8002888 <_kill>
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	d102      	bne.n	800856c <_kill_r+0x1c>
 8008566:	682b      	ldr	r3, [r5, #0]
 8008568:	b103      	cbz	r3, 800856c <_kill_r+0x1c>
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	bd38      	pop	{r3, r4, r5, pc}
 800856e:	bf00      	nop
 8008570:	20000714 	.word	0x20000714

08008574 <_getpid_r>:
 8008574:	f7fa b980 	b.w	8002878 <_getpid>

08008578 <__sread>:
 8008578:	b510      	push	{r4, lr}
 800857a:	460c      	mov	r4, r1
 800857c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008580:	f000 f89c 	bl	80086bc <_read_r>
 8008584:	2800      	cmp	r0, #0
 8008586:	bfab      	itete	ge
 8008588:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800858a:	89a3      	ldrhlt	r3, [r4, #12]
 800858c:	181b      	addge	r3, r3, r0
 800858e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008592:	bfac      	ite	ge
 8008594:	6563      	strge	r3, [r4, #84]	; 0x54
 8008596:	81a3      	strhlt	r3, [r4, #12]
 8008598:	bd10      	pop	{r4, pc}

0800859a <__swrite>:
 800859a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859e:	461f      	mov	r7, r3
 80085a0:	898b      	ldrh	r3, [r1, #12]
 80085a2:	05db      	lsls	r3, r3, #23
 80085a4:	4605      	mov	r5, r0
 80085a6:	460c      	mov	r4, r1
 80085a8:	4616      	mov	r6, r2
 80085aa:	d505      	bpl.n	80085b8 <__swrite+0x1e>
 80085ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b0:	2302      	movs	r3, #2
 80085b2:	2200      	movs	r2, #0
 80085b4:	f000 f868 	bl	8008688 <_lseek_r>
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085c2:	81a3      	strh	r3, [r4, #12]
 80085c4:	4632      	mov	r2, r6
 80085c6:	463b      	mov	r3, r7
 80085c8:	4628      	mov	r0, r5
 80085ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ce:	f000 b817 	b.w	8008600 <_write_r>

080085d2 <__sseek>:
 80085d2:	b510      	push	{r4, lr}
 80085d4:	460c      	mov	r4, r1
 80085d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085da:	f000 f855 	bl	8008688 <_lseek_r>
 80085de:	1c43      	adds	r3, r0, #1
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	bf15      	itete	ne
 80085e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80085e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085ee:	81a3      	strheq	r3, [r4, #12]
 80085f0:	bf18      	it	ne
 80085f2:	81a3      	strhne	r3, [r4, #12]
 80085f4:	bd10      	pop	{r4, pc}

080085f6 <__sclose>:
 80085f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085fa:	f000 b813 	b.w	8008624 <_close_r>
	...

08008600 <_write_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4d07      	ldr	r5, [pc, #28]	; (8008620 <_write_r+0x20>)
 8008604:	4604      	mov	r4, r0
 8008606:	4608      	mov	r0, r1
 8008608:	4611      	mov	r1, r2
 800860a:	2200      	movs	r2, #0
 800860c:	602a      	str	r2, [r5, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	f7fa f971 	bl	80028f6 <_write>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <_write_r+0x1e>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	b103      	cbz	r3, 800861e <_write_r+0x1e>
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	20000714 	.word	0x20000714

08008624 <_close_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4d06      	ldr	r5, [pc, #24]	; (8008640 <_close_r+0x1c>)
 8008628:	2300      	movs	r3, #0
 800862a:	4604      	mov	r4, r0
 800862c:	4608      	mov	r0, r1
 800862e:	602b      	str	r3, [r5, #0]
 8008630:	f7fa f97d 	bl	800292e <_close>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d102      	bne.n	800863e <_close_r+0x1a>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	b103      	cbz	r3, 800863e <_close_r+0x1a>
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	20000714 	.word	0x20000714

08008644 <_fstat_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4d07      	ldr	r5, [pc, #28]	; (8008664 <_fstat_r+0x20>)
 8008648:	2300      	movs	r3, #0
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	4611      	mov	r1, r2
 8008650:	602b      	str	r3, [r5, #0]
 8008652:	f7fa f978 	bl	8002946 <_fstat>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	d102      	bne.n	8008660 <_fstat_r+0x1c>
 800865a:	682b      	ldr	r3, [r5, #0]
 800865c:	b103      	cbz	r3, 8008660 <_fstat_r+0x1c>
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	bd38      	pop	{r3, r4, r5, pc}
 8008662:	bf00      	nop
 8008664:	20000714 	.word	0x20000714

08008668 <_isatty_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4d06      	ldr	r5, [pc, #24]	; (8008684 <_isatty_r+0x1c>)
 800866c:	2300      	movs	r3, #0
 800866e:	4604      	mov	r4, r0
 8008670:	4608      	mov	r0, r1
 8008672:	602b      	str	r3, [r5, #0]
 8008674:	f7fa f977 	bl	8002966 <_isatty>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_isatty_r+0x1a>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b103      	cbz	r3, 8008682 <_isatty_r+0x1a>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	20000714 	.word	0x20000714

08008688 <_lseek_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4d07      	ldr	r5, [pc, #28]	; (80086a8 <_lseek_r+0x20>)
 800868c:	4604      	mov	r4, r0
 800868e:	4608      	mov	r0, r1
 8008690:	4611      	mov	r1, r2
 8008692:	2200      	movs	r2, #0
 8008694:	602a      	str	r2, [r5, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	f7fa f970 	bl	800297c <_lseek>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d102      	bne.n	80086a6 <_lseek_r+0x1e>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	b103      	cbz	r3, 80086a6 <_lseek_r+0x1e>
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	20000714 	.word	0x20000714

080086ac <_malloc_usable_size_r>:
 80086ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086b0:	1f18      	subs	r0, r3, #4
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	bfbc      	itt	lt
 80086b6:	580b      	ldrlt	r3, [r1, r0]
 80086b8:	18c0      	addlt	r0, r0, r3
 80086ba:	4770      	bx	lr

080086bc <_read_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4d07      	ldr	r5, [pc, #28]	; (80086dc <_read_r+0x20>)
 80086c0:	4604      	mov	r4, r0
 80086c2:	4608      	mov	r0, r1
 80086c4:	4611      	mov	r1, r2
 80086c6:	2200      	movs	r2, #0
 80086c8:	602a      	str	r2, [r5, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	f7fa f8f6 	bl	80028bc <_read>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_read_r+0x1e>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_read_r+0x1e>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	20000714 	.word	0x20000714

080086e0 <_init>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	bf00      	nop
 80086e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e6:	bc08      	pop	{r3}
 80086e8:	469e      	mov	lr, r3
 80086ea:	4770      	bx	lr

080086ec <_fini>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	bf00      	nop
 80086f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f2:	bc08      	pop	{r3}
 80086f4:	469e      	mov	lr, r3
 80086f6:	4770      	bx	lr
