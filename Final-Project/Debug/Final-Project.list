
Final-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000945c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009828  08009828  00020174  2**0
                  CONTENTS
  4 .ARM          00000000  08009828  08009828  00020174  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009828  08009828  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009828  08009828  00019828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08009830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020174  2**0
                  CONTENTS
 10 .bss          000006c4  20000174  20000174  00020174  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000838  20000838  00020174  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d247  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003662  00000000  00000000  0003d3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  00040a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001668  00000000  00000000  000421f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021387  00000000  00000000  00043860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d688  00000000  00000000  00064be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5b22  00000000  00000000  0008226f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147d91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fdc  00000000  00000000  00147de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000174 	.word	0x20000174
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095d4 	.word	0x080095d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000178 	.word	0x20000178
 80001cc:	080095d4 	.word	0x080095d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000192 	.word	0x20000192
 800039c:	20000194 	.word	0x20000194
 80003a0:	20000196 	.word	0x20000196
 80003a4:	200001a8 	.word	0x200001a8
 80003a8:	20000198 	.word	0x20000198
 80003ac:	200001ac 	.word	0x200001ac

080003b0 <begin>:
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f003 fb9d 	bl	8003bf0 <HAL_GPIO_Init>
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f003 f9ee 	bl	8003898 <HAL_Delay>
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f003 fd24 	bl	8003f14 <HAL_GPIO_WritePin>
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 fd1c 	bl	8003f14 <HAL_GPIO_WritePin>
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 fd10 	bl	8003f14 <HAL_GPIO_WritePin>
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
 8000506:	2005      	movs	r0, #5
 8000508:	f003 f9c6 	bl	8003898 <HAL_Delay>
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
 8000512:	2005      	movs	r0, #5
 8000514:	f003 f9c0 	bl	8003898 <HAL_Delay>
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
 800051e:	2001      	movs	r0, #1
 8000520:	f003 f9ba 	bl	8003898 <HAL_Delay>
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
 800053c:	2005      	movs	r0, #5
 800053e:	f003 f9ab 	bl	8003898 <HAL_Delay>
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
 8000552:	2001      	movs	r0, #1
 8000554:	f003 f9a0 	bl	8003898 <HAL_Delay>
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
 800057e:	f000 f917 	bl	80007b0 <display>
 8000582:	f000 f8d9 	bl	8000738 <clear>
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200001ac 	.word	0x200001ac
 80005a8:	200001af 	.word	0x200001af
 80005ac:	20000190 	.word	0x20000190
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000192 	.word	0x20000192
 80005b8:	20000194 	.word	0x20000194
 80005bc:	20000196 	.word	0x20000196
 80005c0:	20000198 	.word	0x20000198
 80005c4:	200001a8 	.word	0x200001a8
 80005c8:	200001ad 	.word	0x200001ad
 80005cc:	200001ae 	.word	0x200001ae

080005d0 <enableClock>:
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200001a8 	.word	0x200001a8
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200001b0 	.word	0x200001b0

08000738 <clear>:
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
 8000742:	2002      	movs	r0, #2
 8000744:	f003 f8a8 	bl	8003898 <HAL_Delay>
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001af 	.word	0x200001af
 80007ac:	200001b0 	.word	0x200001b0

080007b0 <display>:
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001ad 	.word	0x200001ad

080007dc <print>:
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	e00c      	b.n	800081a <print+0x3e>
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
 8000826:	bf00      	nop
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
 80008b4:	2301      	movs	r3, #1
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 fb1a 	bl	8003f14 <HAL_GPIO_WritePin>
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 fb0e 	bl	8003f14 <HAL_GPIO_WritePin>
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
 800090c:	e009      	b.n	8000922 <send+0x62>
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001a8 	.word	0x200001a8
 8000930:	20000192 	.word	0x20000192
 8000934:	20000194 	.word	0x20000194
 8000938:	200001ac 	.word	0x200001ac

0800093c <pulseEnable>:
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f003 fae2 	bl	8003f14 <HAL_GPIO_WritePin>
 8000950:	2001      	movs	r0, #1
 8000952:	f002 ffa1 	bl	8003898 <HAL_Delay>
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f003 fad7 	bl	8003f14 <HAL_GPIO_WritePin>
 8000966:	2001      	movs	r0, #1
 8000968:	f002 ff96 	bl	8003898 <HAL_Delay>
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f003 facc 	bl	8003f14 <HAL_GPIO_WritePin>
 800097c:	2001      	movs	r0, #1
 800097e:	f002 ff8b 	bl	8003898 <HAL_Delay>
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001a8 	.word	0x200001a8
 800098c:	20000196 	.word	0x20000196

08000990 <write4bits>:
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f003 faa9 	bl	8003f14 <HAL_GPIO_WritePin>
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200001a8 	.word	0x200001a8
 80009e0:	20000198 	.word	0x20000198

080009e4 <write8bits>:
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f003 fa7f 	bl	8003f14 <HAL_GPIO_WritePin>
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001a8 	.word	0x200001a8
 8000a34:	20000198 	.word	0x20000198

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f002 fec6 	bl	80037cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f83c 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 fa68 	bl	8000f18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a48:	f000 f8a0 	bl	8000b8c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a4c:	f000 f938 	bl	8000cc0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000a50:	f000 fa40 	bl	8000ed4 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8000a54:	f000 f8da 	bl	8000c0c <MX_RTC_Init>
  MX_TIM4_Init();
 8000a58:	f000 f9be 	bl	8000dd8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000a5c:	f000 fa0a 	bl	8000e74 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000a60:	f000 f96c 	bl	8000d3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000a64:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <main+0x78>)
 8000a66:	f005 fcc9 	bl	80063fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a6a:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <main+0x7c>)
 8000a6c:	f005 fcc6 	bl	80063fc <HAL_TIM_Base_Start_IT>

  programInit();
 8000a70:	f000 feb6 	bl	80017e0 <programInit>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <main+0x80>)
 8000a7c:	f003 fa4a 	bl	8003f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a86:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <main+0x80>)
 8000a88:	f003 fa44 	bl	8003f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <main+0x80>)
 8000a94:	f003 fa3e 	bl	8003f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <main+0x80>)
 8000aa0:	f003 fa38 	bl	8003f14 <HAL_GPIO_WritePin>
  uart_rx_enable_it();
 8000aa4:	f002 fb26 	bl	80030f4 <uart_rx_enable_it>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  programLoop();
 8000aa8:	f001 fa30 	bl	8001f0c <programLoop>
  {
 8000aac:	e7fc      	b.n	8000aa8 <main+0x70>
 8000aae:	bf00      	nop
 8000ab0:	200002d8 	.word	0x200002d8
 8000ab4:	2000028c 	.word	0x2000028c
 8000ab8:	48000c00 	.word	0x48000c00

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09e      	sub	sp, #120	; 0x78
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ac6:	2228      	movs	r2, #40	; 0x28
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 fb66 	bl	800819c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	223c      	movs	r2, #60	; 0x3c
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f007 fb58 	bl	800819c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000aec:	230b      	movs	r3, #11
 8000aee:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000af0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afa:	2301      	movs	r3, #1
 8000afc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afe:	2310      	movs	r3, #16
 8000b00:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b02:	2301      	movs	r3, #1
 8000b04:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b06:	2302      	movs	r3, #2
 8000b08:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b10:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b14:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f003 fc3c 	bl	8004398 <HAL_RCC_OscConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b26:	f000 fb07 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b44:	2102      	movs	r1, #2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f004 fc64 	bl	8005414 <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b52:	f000 faf1 	bl	8001138 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <SystemClock_Config+0xcc>)
 8000b58:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b66:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f004 fe86 	bl	8005880 <HAL_RCCEx_PeriphCLKConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b7a:	f000 fadd 	bl	8001138 <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3778      	adds	r7, #120	; 0x78
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	00030021 	.word	0x00030021

08000b8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000b92:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <MX_I2C1_Init+0x78>)
 8000b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000b98:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <MX_I2C1_Init+0x7c>)
 8000b9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc6:	480e      	ldr	r0, [pc, #56]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bc8:	f003 f9ee 	bl	8003fa8 <HAL_I2C_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bd2:	f000 fab1 	bl	8001138 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bda:	f003 fa74 	bl	80040c6 <HAL_I2CEx_ConfigAnalogFilter>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000be4:	f000 faa8 	bl	8001138 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000be8:	2100      	movs	r1, #0
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_I2C1_Init+0x74>)
 8000bec:	f003 fab6 	bl	800415c <HAL_I2CEx_ConfigDigitalFilter>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bf6:	f000 fa9f 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200001b4 	.word	0x200001b4
 8000c04:	40005400 	.word	0x40005400
 8000c08:	2000090e 	.word	0x2000090e

08000c0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c20:	2300      	movs	r3, #0
 8000c22:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <MX_RTC_Init+0xac>)
 8000c26:	4a25      	ldr	r2, [pc, #148]	; (8000cbc <MX_RTC_Init+0xb0>)
 8000c28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <MX_RTC_Init+0xac>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <MX_RTC_Init+0xac>)
 8000c32:	2227      	movs	r2, #39	; 0x27
 8000c34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MX_RTC_Init+0xac>)
 8000c38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c3c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_RTC_Init+0xac>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <MX_RTC_Init+0xac>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_RTC_Init+0xac>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c50:	4819      	ldr	r0, [pc, #100]	; (8000cb8 <MX_RTC_Init+0xac>)
 8000c52:	f004 ffc5 	bl	8005be0 <HAL_RTC_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000c5c:	f000 fa6c 	bl	8001138 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2201      	movs	r2, #1
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480f      	ldr	r0, [pc, #60]	; (8000cb8 <MX_RTC_Init+0xac>)
 8000c7c:	f005 f833 	bl	8005ce6 <HAL_RTC_SetTime>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000c86:	f000 fa57 	bl	8001138 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_RTC_Init+0xac>)
 8000ca2:	f005 f918 	bl	8005ed6 <HAL_RTC_SetDate>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000cac:	f000 fa44 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000208 	.word	0x20000208
 8000cbc:	40002800 	.word	0x40002800

08000cc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <MX_SPI1_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000ccc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cda:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d0e:	2207      	movs	r2, #7
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d20:	f005 fa6a 	bl	80061f8 <HAL_SPI_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 fa05 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000228 	.word	0x20000228
 8000d38:	40013000 	.word	0x40013000

08000d3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_TIM2_Init+0x98>)
 8000d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18000;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_TIM2_Init+0x98>)
 8000d64:	f244 6250 	movw	r2, #18000	; 0x4650
 8000d68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_TIM2_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_TIM2_Init+0x98>)
 8000d72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_TIM2_Init+0x98>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_TIM2_Init+0x98>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d84:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <MX_TIM2_Init+0x98>)
 8000d86:	f005 fae2 	bl	800634e <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d90:	f000 f9d2 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <MX_TIM2_Init+0x98>)
 8000da2:	f005 fcb4 	bl	800670e <HAL_TIM_ConfigClockSource>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000dac:	f000 f9c4 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_TIM2_Init+0x98>)
 8000dbe:	f005 fec1 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000dc8:	f000 f9b6 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000028c 	.word	0x2000028c

08000dd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_TIM4_Init+0x94>)
 8000df8:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <MX_TIM4_Init+0x98>)
 8000dfa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48-1;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_TIM4_Init+0x94>)
 8000dfe:	222f      	movs	r2, #47	; 0x2f
 8000e00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_TIM4_Init+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_TIM4_Init+0x94>)
 8000e0a:	2209      	movs	r2, #9
 8000e0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_TIM4_Init+0x94>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_TIM4_Init+0x94>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e1a:	4814      	ldr	r0, [pc, #80]	; (8000e6c <MX_TIM4_Init+0x94>)
 8000e1c:	f005 fa97 	bl	800634e <HAL_TIM_Base_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e26:	f000 f987 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4619      	mov	r1, r3
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_TIM4_Init+0x94>)
 8000e38:	f005 fc69 	bl	800670e <HAL_TIM_ConfigClockSource>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e42:	f000 f979 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MX_TIM4_Init+0x94>)
 8000e54:	f005 fe76 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e5e:	f000 f96b 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200002d8 	.word	0x200002d8
 8000e70:	40000800 	.word	0x40000800

08000e74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_USART1_UART_Init+0x58>)
 8000e7a:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <MX_USART1_UART_Init+0x5c>)
 8000e7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <MX_USART1_UART_Init+0x58>)
 8000e80:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_USART1_UART_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_USART1_UART_Init+0x58>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_USART1_UART_Init+0x58>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_USART1_UART_Init+0x58>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_USART1_UART_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_USART1_UART_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <MX_USART1_UART_Init+0x58>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_USART1_UART_Init+0x58>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_USART1_UART_Init+0x58>)
 8000eb8:	f005 fee2 	bl	8006c80 <HAL_UART_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ec2:	f000 f939 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000324 	.word	0x20000324
 8000ed0:	40013800 	.word	0x40013800

08000ed4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <MX_USB_PCD_Init+0x3c>)
 8000eda:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <MX_USB_PCD_Init+0x40>)
 8000edc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USB_PCD_Init+0x3c>)
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <MX_USB_PCD_Init+0x3c>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USB_PCD_Init+0x3c>)
 8000eec:	2202      	movs	r2, #2
 8000eee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <MX_USB_PCD_Init+0x3c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USB_PCD_Init+0x3c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_USB_PCD_Init+0x3c>)
 8000efe:	f003 f979 	bl	80041f4 <HAL_PCD_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000f08:	f000 f916 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200003ac 	.word	0x200003ac
 8000f14:	40005c00 	.word	0x40005c00

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2e:	4b7d      	ldr	r3, [pc, #500]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a7c      	ldr	r2, [pc, #496]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f38:	6153      	str	r3, [r2, #20]
 8000f3a:	4b7a      	ldr	r3, [pc, #488]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	4b77      	ldr	r3, [pc, #476]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a76      	ldr	r2, [pc, #472]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b74      	ldr	r3, [pc, #464]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f5e:	4b71      	ldr	r3, [pc, #452]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a70      	ldr	r2, [pc, #448]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b6e      	ldr	r3, [pc, #440]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b6b      	ldr	r3, [pc, #428]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	4a6a      	ldr	r2, [pc, #424]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	6153      	str	r3, [r2, #20]
 8000f82:	4b68      	ldr	r3, [pc, #416]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b65      	ldr	r3, [pc, #404]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a64      	ldr	r2, [pc, #400]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	6153      	str	r3, [r2, #20]
 8000f9a:	4b62      	ldr	r3, [pc, #392]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa6:	4b5f      	ldr	r3, [pc, #380]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a5e      	ldr	r2, [pc, #376]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b5c      	ldr	r3, [pc, #368]	; (8001124 <MX_GPIO_Init+0x20c>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000fc4:	4858      	ldr	r0, [pc, #352]	; (8001128 <MX_GPIO_Init+0x210>)
 8000fc6:	f002 ffa5 	bl	8003f14 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2110      	movs	r1, #16
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd2:	f002 ff9f 	bl	8003f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2150      	movs	r1, #80	; 0x50
 8000fda:	4854      	ldr	r0, [pc, #336]	; (800112c <MX_GPIO_Init+0x214>)
 8000fdc:	f002 ff9a 	bl	8003f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f242 0105 	movw	r1, #8197	; 0x2005
 8000fe6:	4852      	ldr	r0, [pc, #328]	; (8001130 <MX_GPIO_Init+0x218>)
 8000fe8:	f002 ff94 	bl	8003f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 413e 	mov.w	r1, #48640	; 0xbe00
 8000ff2:	4850      	ldr	r0, [pc, #320]	; (8001134 <MX_GPIO_Init+0x21c>)
 8000ff4:	f002 ff8e 	bl	8003f14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000ff8:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000ffc:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4845      	ldr	r0, [pc, #276]	; (8001128 <MX_GPIO_Init+0x210>)
 8001012:	f002 fded 	bl	8003bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8001016:	2320      	movs	r3, #32
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800101a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	483f      	ldr	r0, [pc, #252]	; (8001128 <MX_GPIO_Init+0x210>)
 800102c:	f002 fde0 	bl	8003bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001030:	2301      	movs	r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f002 fdd3 	bl	8003bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800104a:	2310      	movs	r3, #16
 800104c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f002 fdc4 	bl	8003bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001068:	2350      	movs	r3, #80	; 0x50
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	482b      	ldr	r0, [pc, #172]	; (800112c <MX_GPIO_Init+0x214>)
 8001080:	f002 fdb6 	bl	8003bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 8001084:	f242 0305 	movw	r3, #8197	; 0x2005
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4824      	ldr	r0, [pc, #144]	; (8001130 <MX_GPIO_Init+0x218>)
 800109e:	f002 fda7 	bl	8003bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80010a2:	f44f 433e 	mov.w	r3, #48640	; 0xbe00
 80010a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	481e      	ldr	r0, [pc, #120]	; (8001134 <MX_GPIO_Init+0x21c>)
 80010bc:	f002 fd98 	bl	8003bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80010c0:	230f      	movs	r3, #15
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ca:	2302      	movs	r3, #2
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4817      	ldr	r0, [pc, #92]	; (8001134 <MX_GPIO_Init+0x21c>)
 80010d6:	f002 fd8b 	bl	8003bf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 80010da:	2201      	movs	r2, #1
 80010dc:	2100      	movs	r1, #0
 80010de:	2006      	movs	r0, #6
 80010e0:	f002 fcd9 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010e4:	2006      	movs	r0, #6
 80010e6:	f002 fcf2 	bl	8003ace <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 1);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2100      	movs	r1, #0
 80010ee:	2007      	movs	r0, #7
 80010f0:	f002 fcd1 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010f4:	2007      	movs	r0, #7
 80010f6:	f002 fcea 	bl	8003ace <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2100      	movs	r1, #0
 80010fe:	2008      	movs	r0, #8
 8001100:	f002 fcc9 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001104:	2008      	movs	r0, #8
 8001106:	f002 fce2 	bl	8003ace <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 800110a:	2201      	movs	r2, #1
 800110c:	2100      	movs	r1, #0
 800110e:	2009      	movs	r0, #9
 8001110:	f002 fcc1 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001114:	2009      	movs	r0, #9
 8001116:	f002 fcda 	bl	8003ace <HAL_NVIC_EnableIRQ>

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	; 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	48001000 	.word	0x48001000
 800112c:	48000800 	.word	0x48000800
 8001130:	48000400 	.word	0x48000400
 8001134:	48000c00 	.word	0x48000c00

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <set_start_time>:
extern RTC_HandleTypeDef hrtc;

RTC_TimeTypeDef mytime ;
RTC_DateTypeDef mydate ;

void set_start_time(int hour, int minute, int second){
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]

	RTC_TimeTypeDef start_t ;

	start_t.Hours = 20;
 8001150:	2314      	movs	r3, #20
 8001152:	753b      	strb	r3, [r7, #20]
	start_t.Minutes = 20;
 8001154:	2314      	movs	r3, #20
 8001156:	757b      	strb	r3, [r7, #21]
	start_t.Seconds = 20;
 8001158:	2314      	movs	r3, #20
 800115a:	75bb      	strb	r3, [r7, #22]

    HAL_RTC_SetTime(&hrtc, &start_t, RTC_FORMAT_BIN);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <set_start_time+0x30>)
 8001166:	f004 fdbe 	bl	8005ce6 <HAL_RTC_SetTime>
}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000208 	.word	0x20000208

08001178 <set_start_day>:

void set_start_day(int year, int month, int day){
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef start_t ;

	start_t.Year = 2024;
 8001184:	23e8      	movs	r3, #232	; 0xe8
 8001186:	75fb      	strb	r3, [r7, #23]
	start_t.Month = 3;
 8001188:	2303      	movs	r3, #3
 800118a:	757b      	strb	r3, [r7, #21]
	start_t.Date = 20;
 800118c:	2314      	movs	r3, #20
 800118e:	75bb      	strb	r3, [r7, #22]

    HAL_RTC_SetDate(&hrtc, &start_t, RTC_FORMAT_BIN);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	4619      	mov	r1, r3
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <set_start_day+0x30>)
 800119a:	f004 fe9c 	bl	8005ed6 <HAL_RTC_SetDate>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000208 	.word	0x20000208

080011ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
  if (last_gpio_exti + 70 > HAL_GetTick()) // Simple button debouncing
 80011b6:	4bb3      	ldr	r3, [pc, #716]	; (8001484 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f103 0446 	add.w	r4, r3, #70	; 0x46
 80011be:	f002 fb5f 	bl	8003880 <HAL_GetTick>
 80011c2:	4603      	mov	r3, r0
 80011c4:	429c      	cmp	r4, r3
 80011c6:	f200 81b3 	bhi.w	8001530 <HAL_GPIO_EXTI_Callback+0x384>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 80011ca:	f002 fb59 	bl	8003880 <HAL_GetTick>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4aac      	ldr	r2, [pc, #688]	; (8001484 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80011d2:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 80011d4:	23ff      	movs	r3, #255	; 0xff
 80011d6:	73fb      	strb	r3, [r7, #15]
  int8_t column_number = -1;
 80011d8:	23ff      	movs	r3, #255	; 0xff
 80011da:	73bb      	strb	r3, [r7, #14]
  {
    // blue_button_pressed = 1;
    // return;
  }

  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 80011dc:	2300      	movs	r3, #0
 80011de:	737b      	strb	r3, [r7, #13]
 80011e0:	e00b      	b.n	80011fa <HAL_GPIO_EXTI_Callback+0x4e>
  {
    if (GPIO_Pin == Row_pins[row])
 80011e2:	7b7b      	ldrb	r3, [r7, #13]
 80011e4:	4aa8      	ldr	r2, [pc, #672]	; (8001488 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80011e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ea:	88fa      	ldrh	r2, [r7, #6]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d101      	bne.n	80011f4 <HAL_GPIO_EXTI_Callback+0x48>
    {
      row_number = row;
 80011f0:	7b7b      	ldrb	r3, [r7, #13]
 80011f2:	73fb      	strb	r3, [r7, #15]
  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 80011f4:	7b7b      	ldrb	r3, [r7, #13]
 80011f6:	3301      	adds	r3, #1
 80011f8:	737b      	strb	r3, [r7, #13]
 80011fa:	7b7b      	ldrb	r3, [r7, #13]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d9f0      	bls.n	80011e2 <HAL_GPIO_EXTI_Callback+0x36>
    }
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8001200:	4ba2      	ldr	r3, [pc, #648]	; (800148c <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001206:	2200      	movs	r2, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f002 fe83 	bl	8003f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 800120e:	4b9f      	ldr	r3, [pc, #636]	; (800148c <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001214:	2200      	movs	r2, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fe7c 	bl	8003f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 800121c:	4b9b      	ldr	r3, [pc, #620]	; (800148c <HAL_GPIO_EXTI_Callback+0x2e0>)
 800121e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001222:	2200      	movs	r2, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f002 fe75 	bl	8003f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 800122a:	4b98      	ldr	r3, [pc, #608]	; (800148c <HAL_GPIO_EXTI_Callback+0x2e0>)
 800122c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001230:	2200      	movs	r2, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f002 fe6e 	bl	8003f14 <HAL_GPIO_WritePin>

  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8001238:	2300      	movs	r3, #0
 800123a:	733b      	strb	r3, [r7, #12]
 800123c:	e02d      	b.n	800129a <HAL_GPIO_EXTI_Callback+0xee>
  {
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 800123e:	7b3b      	ldrb	r3, [r7, #12]
 8001240:	4a93      	ldr	r2, [pc, #588]	; (8001490 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001242:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001246:	7b3b      	ldrb	r3, [r7, #12]
 8001248:	4a92      	ldr	r2, [pc, #584]	; (8001494 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800124a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800124e:	2201      	movs	r2, #1
 8001250:	4619      	mov	r1, r3
 8001252:	f002 fe5f 	bl	8003f14 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number]))
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4a8f      	ldr	r2, [pc, #572]	; (8001498 <HAL_GPIO_EXTI_Callback+0x2ec>)
 800125c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001264:	4988      	ldr	r1, [pc, #544]	; (8001488 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001266:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800126a:	4619      	mov	r1, r3
 800126c:	4610      	mov	r0, r2
 800126e:	f002 fe39 	bl	8003ee4 <HAL_GPIO_ReadPin>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_GPIO_EXTI_Callback+0xd0>
    {
      column_number = col;
 8001278:	7b3b      	ldrb	r3, [r7, #12]
 800127a:	73bb      	strb	r3, [r7, #14]
    }
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 800127c:	7b3b      	ldrb	r3, [r7, #12]
 800127e:	4a84      	ldr	r2, [pc, #528]	; (8001490 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001280:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001284:	7b3b      	ldrb	r3, [r7, #12]
 8001286:	4a83      	ldr	r2, [pc, #524]	; (8001494 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	f002 fe40 	bl	8003f14 <HAL_GPIO_WritePin>
  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8001294:	7b3b      	ldrb	r3, [r7, #12]
 8001296:	3301      	adds	r3, #1
 8001298:	733b      	strb	r3, [r7, #12]
 800129a:	7b3b      	ldrb	r3, [r7, #12]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d9ce      	bls.n	800123e <HAL_GPIO_EXTI_Callback+0x92>
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 80012a0:	4b7a      	ldr	r3, [pc, #488]	; (800148c <HAL_GPIO_EXTI_Callback+0x2e0>)
 80012a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a6:	2201      	movs	r2, #1
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fe33 	bl	8003f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 80012ae:	4b77      	ldr	r3, [pc, #476]	; (800148c <HAL_GPIO_EXTI_Callback+0x2e0>)
 80012b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b4:	2201      	movs	r2, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 fe2c 	bl	8003f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 80012bc:	4b73      	ldr	r3, [pc, #460]	; (800148c <HAL_GPIO_EXTI_Callback+0x2e0>)
 80012be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c2:	2201      	movs	r2, #1
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 fe25 	bl	8003f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 80012ca:	4b70      	ldr	r3, [pc, #448]	; (800148c <HAL_GPIO_EXTI_Callback+0x2e0>)
 80012cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d0:	2201      	movs	r2, #1
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 fe1e 	bl	8003f14 <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 80012d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	f000 8128 	beq.w	8001534 <HAL_GPIO_EXTI_Callback+0x388>
 80012e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	f000 8122 	beq.w	8001534 <HAL_GPIO_EXTI_Callback+0x388>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
 80012f8:	4413      	add	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	3301      	adds	r3, #1
 80012fe:	72fb      	strb	r3, [r7, #11]
  switch (button_number){
 8001300:	7afb      	ldrb	r3, [r7, #11]
 8001302:	3b01      	subs	r3, #1
 8001304:	2b0f      	cmp	r3, #15
 8001306:	f200 8117 	bhi.w	8001538 <HAL_GPIO_EXTI_Callback+0x38c>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <HAL_GPIO_EXTI_Callback+0x164>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	08001351 	.word	0x08001351
 8001314:	08001365 	.word	0x08001365
 8001318:	08001379 	.word	0x08001379
 800131c:	08001387 	.word	0x08001387
 8001320:	08001395 	.word	0x08001395
 8001324:	080013a9 	.word	0x080013a9
 8001328:	080013b7 	.word	0x080013b7
 800132c:	080013c5 	.word	0x080013c5
 8001330:	080013d3 	.word	0x080013d3
 8001334:	080013ff 	.word	0x080013ff
 8001338:	0800142b 	.word	0x0800142b
 800133c:	08001439 	.word	0x08001439
 8001340:	0800144d 	.word	0x0800144d
 8001344:	080014ad 	.word	0x080014ad
 8001348:	08001509 	.word	0x08001509
 800134c:	0800151d 	.word	0x0800151d
  case 1: //move	//1
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001356:	4851      	ldr	r0, [pc, #324]	; (800149c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001358:	f002 fddc 	bl	8003f14 <HAL_GPIO_WritePin>
	move(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f001 fc2f 	bl	8002bc0 <move>

    break;
 8001362:	e0f2      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
  case 2: //boom 	//2
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800136a:	484c      	ldr	r0, [pc, #304]	; (800149c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800136c:	f002 fdd2 	bl	8003f14 <HAL_GPIO_WritePin>
	boom(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f000 fe45 	bl	8002000 <boom>
    break;
 8001376:	e0e8      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
  case 3:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137e:	4847      	ldr	r0, [pc, #284]	; (800149c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001380:	f002 fdc8 	bl	8003f14 <HAL_GPIO_WritePin>
    break;
 8001384:	e0e1      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
  case 4:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138c:	4843      	ldr	r0, [pc, #268]	; (800149c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800138e:	f002 fdc1 	bl	8003f14 <HAL_GPIO_WritePin>
    break;
 8001392:	e0da      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
  case 5: //dir	 	//4
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800139a:	4840      	ldr	r0, [pc, #256]	; (800149c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800139c:	f002 fdba 	bl	8003f14 <HAL_GPIO_WritePin>
	 change_dir(1);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f000 fde3 	bl	8001f6c <change_dir>
    break;
 80013a6:	e0d0      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
  case 6:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ae:	483b      	ldr	r0, [pc, #236]	; (800149c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80013b0:	f002 fdb0 	bl	8003f14 <HAL_GPIO_WritePin>
    break;
 80013b4:	e0c9      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
  case 7:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013bc:	4837      	ldr	r0, [pc, #220]	; (800149c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80013be:	f002 fda9 	bl	8003f14 <HAL_GPIO_WritePin>
    break;
 80013c2:	e0c2      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
  case 8:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ca:	4834      	ldr	r0, [pc, #208]	; (800149c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80013cc:	f002 fda2 	bl	8003f14 <HAL_GPIO_WritePin>
    break;
 80013d0:	e0bb      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
  case 9: // menu curser up
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d8:	4830      	ldr	r0, [pc, #192]	; (800149c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80013da:	f002 fd9b 	bl	8003f14 <HAL_GPIO_WritePin>
		if(pageflag==1){
 80013de:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	f040 80aa 	bne.w	800153c <HAL_GPIO_EXTI_Callback+0x390>
			if (menu_curser_r > 1){
 80013e8:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	f340 80a5 	ble.w	800153c <HAL_GPIO_EXTI_Callback+0x390>
				menu_curser_r -= 1;
 80013f2:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	4a2a      	ldr	r2, [pc, #168]	; (80014a4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80013fa:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 80013fc:	e09e      	b.n	800153c <HAL_GPIO_EXTI_Callback+0x390>
  case 10: // menu cursor down
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001404:	4825      	ldr	r0, [pc, #148]	; (800149c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001406:	f002 fd85 	bl	8003f14 <HAL_GPIO_WritePin>
		if(pageflag==1){
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	f040 8096 	bne.w	8001540 <HAL_GPIO_EXTI_Callback+0x394>
			if (menu_curser_r  < 3){
 8001414:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b02      	cmp	r3, #2
 800141a:	f300 8091 	bgt.w	8001540 <HAL_GPIO_EXTI_Callback+0x394>
				menu_curser_r +=1;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001426:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 8001428:	e08a      	b.n	8001540 <HAL_GPIO_EXTI_Callback+0x394>
  case 11:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001430:	481a      	ldr	r0, [pc, #104]	; (800149c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001432:	f002 fd6f 	bl	8003f14 <HAL_GPIO_WritePin>
    break;
 8001436:	e088      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
  case 12: //Dir	//C
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143e:	4817      	ldr	r0, [pc, #92]	; (800149c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001440:	f002 fd68 	bl	8003f14 <HAL_GPIO_WritePin>
		change_dir(2);
 8001444:	2002      	movs	r0, #2
 8001446:	f000 fd91 	bl	8001f6c <change_dir>
    break;
 800144a:	e07e      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
  case 13: //goto menu
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 800144c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001450:	4812      	ldr	r0, [pc, #72]	; (800149c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001452:	f002 fd77 	bl	8003f44 <HAL_GPIO_TogglePin>
		if(pageflag == 0 || pageflag == 3 || pageflag == 4 || pageflag == 2){
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <HAL_GPIO_EXTI_Callback+0x2ca>
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_EXTI_Callback+0x2ca>
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b04      	cmp	r3, #4
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_EXTI_Callback+0x2ca>
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d166      	bne.n	8001544 <HAL_GPIO_EXTI_Callback+0x398>
			change_page = 1;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
			pageflag = 1;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]
		}
    break;
 8001482:	e05f      	b.n	8001544 <HAL_GPIO_EXTI_Callback+0x398>
 8001484:	200006a0 	.word	0x200006a0
 8001488:	08009688 	.word	0x08009688
 800148c:	48000c00 	.word	0x48000c00
 8001490:	08009690 	.word	0x08009690
 8001494:	080096a0 	.word	0x080096a0
 8001498:	08009678 	.word	0x08009678
 800149c:	48001000 	.word	0x48001000
 80014a0:	20000698 	.word	0x20000698
 80014a4:	20000004 	.word	0x20000004
 80014a8:	200006a4 	.word	0x200006a4
  case 14: // select in menu
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b2:	4827      	ldr	r0, [pc, #156]	; (8001550 <HAL_GPIO_EXTI_Callback+0x3a4>)
 80014b4:	f002 fd2e 	bl	8003f14 <HAL_GPIO_WritePin>
		if(pageflag == 1){
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_GPIO_EXTI_Callback+0x3a8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d143      	bne.n	8001548 <HAL_GPIO_EXTI_Callback+0x39c>
			if(menu_curser_r == 1){
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_GPIO_EXTI_Callback+0x3ac>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d109      	bne.n	80014dc <HAL_GPIO_EXTI_Callback+0x330>
				pageflag = 2;
 80014c8:	4b22      	ldr	r3, [pc, #136]	; (8001554 <HAL_GPIO_EXTI_Callback+0x3a8>)
 80014ca:	2202      	movs	r2, #2
 80014cc:	601a      	str	r2, [r3, #0]
				change_page = 1;
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <HAL_GPIO_EXTI_Callback+0x3b0>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
				game_started = 1;
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_GPIO_EXTI_Callback+0x3b4>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]
				change_page = 1;

			}
		}

    break;
 80014da:	e035      	b.n	8001548 <HAL_GPIO_EXTI_Callback+0x39c>
			else if(menu_curser_r == 2){
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_GPIO_EXTI_Callback+0x3ac>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d106      	bne.n	80014f2 <HAL_GPIO_EXTI_Callback+0x346>
				pageflag = 3;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_GPIO_EXTI_Callback+0x3a8>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	601a      	str	r2, [r3, #0]
				change_page = 1;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <HAL_GPIO_EXTI_Callback+0x3b0>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
    break;
 80014f0:	e02a      	b.n	8001548 <HAL_GPIO_EXTI_Callback+0x39c>
			else if(menu_curser_r == 3){
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_GPIO_EXTI_Callback+0x3ac>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d126      	bne.n	8001548 <HAL_GPIO_EXTI_Callback+0x39c>
				pageflag = 4;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_GPIO_EXTI_Callback+0x3a8>)
 80014fc:	2204      	movs	r2, #4
 80014fe:	601a      	str	r2, [r3, #0]
				change_page = 1;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_GPIO_EXTI_Callback+0x3b0>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]
    break;
 8001506:	e01f      	b.n	8001548 <HAL_GPIO_EXTI_Callback+0x39c>
  case 15: //Boom	//#
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150e:	4810      	ldr	r0, [pc, #64]	; (8001550 <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001510:	f002 fd00 	bl	8003f14 <HAL_GPIO_WritePin>
		boom(2);
 8001514:	2002      	movs	r0, #2
 8001516:	f000 fd73 	bl	8002000 <boom>
    break;
 800151a:	e016      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
  case 16: //move	//D
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001524:	f002 fcf6 	bl	8003f14 <HAL_GPIO_WritePin>
		move(2);
 8001528:	2002      	movs	r0, #2
 800152a:	f001 fb49 	bl	8002bc0 <move>
    break;
 800152e:	e00c      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
    return;
 8001530:	bf00      	nop
 8001532:	e00a      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
    return; // Reject invalid scan
 8001534:	bf00      	nop
 8001536:	e008      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>

  default:
    break;
 8001538:	bf00      	nop
 800153a:	e006      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
    break;
 800153c:	bf00      	nop
 800153e:	e004      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
    break;
 8001540:	bf00      	nop
 8001542:	e002      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
    break;
 8001544:	bf00      	nop
 8001546:	e000      	b.n	800154a <HAL_GPIO_EXTI_Callback+0x39e>
    break;
 8001548:	bf00      	nop
  }
}
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}
 8001550:	48001000 	.word	0x48001000
 8001554:	20000698 	.word	0x20000698
 8001558:	20000004 	.word	0x20000004
 800155c:	200006a4 	.word	0x200006a4
 8001560:	2000069c 	.word	0x2000069c

08001564 <seven_segment_display_decimal>:
	.digits={0, 0, 0, 0},
	.number = 0};



void seven_segment_display_decimal(uint32_t n) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    if (n < 10) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b09      	cmp	r3, #9
 8001570:	d832      	bhi.n	80015d8 <seven_segment_display_decimal+0x74>
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin, (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <seven_segment_display_decimal+0x7c>)
 8001574:	6a18      	ldr	r0, [r3, #32]
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <seven_segment_display_decimal+0x7c>)
 8001578:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	b2db      	uxtb	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	f002 fcc5 	bl	8003f14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin, (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <seven_segment_display_decimal+0x7c>)
 800158c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <seven_segment_display_decimal+0x7c>)
 8001590:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	f002 fcb8 	bl	8003f14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin, (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <seven_segment_display_decimal+0x7c>)
 80015a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <seven_segment_display_decimal+0x7c>)
 80015aa:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	f002 fcab 	bl	8003f14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin, (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <seven_segment_display_decimal+0x7c>)
 80015c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <seven_segment_display_decimal+0x7c>)
 80015c4:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	461a      	mov	r2, r3
 80015d4:	f002 fc9e 	bl	8003f14 <HAL_GPIO_WritePin>
    }
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200000b0 	.word	0x200000b0

080015e4 <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i)
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	e00f      	b.n	8001610 <seven_segment_deactivate_digits+0x2c>
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin, GPIO_PIN_SET);
 80015f0:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <seven_segment_deactivate_digits+0x3c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80015f8:	4a09      	ldr	r2, [pc, #36]	; (8001620 <seven_segment_deactivate_digits+0x3c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4413      	add	r3, r2
 8001600:	889b      	ldrh	r3, [r3, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	4619      	mov	r1, r3
 8001606:	f002 fc85 	bl	8003f14 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; ++i)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3301      	adds	r3, #1
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b03      	cmp	r3, #3
 8001614:	ddec      	ble.n	80015f0 <seven_segment_deactivate_digits+0xc>
}
 8001616:	bf00      	nop
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200000b0 	.word	0x200000b0

08001624 <seven_segment_activate_digit>:

int last_time_on = 0;
void seven_segment_activate_digit(uint32_t d) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    if (d < 4) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d80c      	bhi.n	800164c <seven_segment_activate_digit+0x28>
    	HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <seven_segment_activate_digit+0x30>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800163a:	4a06      	ldr	r2, [pc, #24]	; (8001654 <seven_segment_activate_digit+0x30>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4413      	add	r3, r2
 8001642:	889b      	ldrh	r3, [r3, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	4619      	mov	r1, r3
 8001648:	f002 fc64 	bl	8003f14 <HAL_GPIO_WritePin>
//		}
//		else if (d != state){
//			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
//		}
    }
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200000b0 	.word	0x200000b0

08001658 <seven_segment_set_num>:

void seven_segment_set_num(int num[4]) {
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i <= 3; ++i) {
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	e00d      	b.n	8001682 <seven_segment_set_num+0x2a>
		seven_segment.digits[i] = num[i];
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	4a09      	ldr	r2, [pc, #36]	; (8001698 <seven_segment_set_num+0x40>)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3310      	adds	r3, #16
 8001678:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i <= 3; ++i) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3301      	adds	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d9ee      	bls.n	8001666 <seven_segment_set_num+0xe>
	}
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	200000b0 	.word	0x200000b0

0800169c <seven_segment_refresh>:

void seven_segment_refresh(void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
    static uint32_t state_tmp = 0;
    static uint32_t last_time_tmp = 0;
    if (HAL_GetTick() - last_time_tmp > 5) {
 80016a0:	f002 f8ee 	bl	8003880 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <seven_segment_refresh+0x50>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d91b      	bls.n	80016e8 <seven_segment_refresh+0x4c>
        seven_segment_deactivate_digits();
 80016b0:	f7ff ff98 	bl	80015e4 <seven_segment_deactivate_digits>
        seven_segment_activate_digit(state_tmp);
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <seven_segment_refresh+0x54>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ffb3 	bl	8001624 <seven_segment_activate_digit>
        seven_segment_display_decimal(seven_segment.digits[state_tmp]);
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <seven_segment_refresh+0x54>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <seven_segment_refresh+0x58>)
 80016c4:	3310      	adds	r3, #16
 80016c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff4a 	bl	8001564 <seven_segment_display_decimal>
        state_tmp = (state_tmp + 1) % 4;
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <seven_segment_refresh+0x54>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <seven_segment_refresh+0x54>)
 80016dc:	6013      	str	r3, [r2, #0]
        last_time_tmp = HAL_GetTick();
 80016de:	f002 f8cf 	bl	8003880 <HAL_GetTick>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a01      	ldr	r2, [pc, #4]	; (80016ec <seven_segment_refresh+0x50>)
 80016e6:	6013      	str	r3, [r2, #0]
    }
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000818 	.word	0x20000818
 80016f0:	2000081c 	.word	0x2000081c
 80016f4:	200000b0 	.word	0x200000b0

080016f8 <setNumber>:


void setNumber(int number){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	int a = 0, b = 0, c = 0, d = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
	if (number <= 9999 && number >= 0){
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f242 720f 	movw	r2, #9999	; 0x270f
 8001716:	4293      	cmp	r3, r2
 8001718:	dc5b      	bgt.n	80017d2 <setNumber+0xda>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db58      	blt.n	80017d2 <setNumber+0xda>
		a = number % 10;
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <setNumber+0xe4>)
 8001724:	fb83 1302 	smull	r1, r3, r3, r2
 8001728:	1099      	asrs	r1, r3, #2
 800172a:	17d3      	asrs	r3, r2, #31
 800172c:	1ac9      	subs	r1, r1, r3
 800172e:	460b      	mov	r3, r1
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	440b      	add	r3, r1
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
		number /= 10;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a27      	ldr	r2, [pc, #156]	; (80017dc <setNumber+0xe4>)
 800173e:	fb82 1203 	smull	r1, r2, r2, r3
 8001742:	1092      	asrs	r2, r2, #2
 8001744:	17db      	asrs	r3, r3, #31
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	607b      	str	r3, [r7, #4]
		b = number % 10;
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4b23      	ldr	r3, [pc, #140]	; (80017dc <setNumber+0xe4>)
 800174e:	fb83 1302 	smull	r1, r3, r3, r2
 8001752:	1099      	asrs	r1, r3, #2
 8001754:	17d3      	asrs	r3, r2, #31
 8001756:	1ac9      	subs	r1, r1, r3
 8001758:	460b      	mov	r3, r1
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	623b      	str	r3, [r7, #32]
		number /= 10;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <setNumber+0xe4>)
 8001768:	fb82 1203 	smull	r1, r2, r2, r3
 800176c:	1092      	asrs	r2, r2, #2
 800176e:	17db      	asrs	r3, r3, #31
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	607b      	str	r3, [r7, #4]
		c = number % 10;
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <setNumber+0xe4>)
 8001778:	fb83 1302 	smull	r1, r3, r3, r2
 800177c:	1099      	asrs	r1, r3, #2
 800177e:	17d3      	asrs	r3, r2, #31
 8001780:	1ac9      	subs	r1, r1, r3
 8001782:	460b      	mov	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	61fb      	str	r3, [r7, #28]
		number /= 10;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <setNumber+0xe4>)
 8001792:	fb82 1203 	smull	r1, r2, r2, r3
 8001796:	1092      	asrs	r2, r2, #2
 8001798:	17db      	asrs	r3, r3, #31
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	607b      	str	r3, [r7, #4]
		d = number % 10;
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <setNumber+0xe4>)
 80017a2:	fb83 1302 	smull	r1, r3, r3, r2
 80017a6:	1099      	asrs	r1, r3, #2
 80017a8:	17d3      	asrs	r3, r2, #31
 80017aa:	1ac9      	subs	r1, r1, r3
 80017ac:	460b      	mov	r3, r1
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	61bb      	str	r3, [r7, #24]
//		int numbers2[4]={d,c,b,a};
		int numbers2[4]={a,b,c,d};
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	617b      	str	r3, [r7, #20]
		seven_segment_set_num(numbers2);
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff43 	bl	8001658 <seven_segment_set_num>
	}

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	66666667 	.word	0x66666667

080017e0 <programInit>:
	int active;
};

struct bullet bul[10];

void programInit() {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af04      	add	r7, sp, #16
	LiquidCrystal(GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_7);
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	9303      	str	r3, [sp, #12]
 80017ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	2308      	movs	r3, #8
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2304      	movs	r3, #4
 80017fc:	2202      	movs	r2, #2
 80017fe:	2101      	movs	r1, #1
 8001800:	4842      	ldr	r0, [pc, #264]	; (800190c <programInit+0x12c>)
 8001802:	f7fe fd3d 	bl	8000280 <LiquidCrystal>
	begin(20, 4);
 8001806:	2104      	movs	r1, #4
 8001808:	2014      	movs	r0, #20
 800180a:	f7fe fdd1 	bl	80003b0 <begin>
//	int n = sprintf(data, "Salammmmm");
//	setCursor(5, 1);
	//	print(data);


	set_start_time(20, 20, 20);
 800180e:	2214      	movs	r2, #20
 8001810:	2114      	movs	r1, #20
 8001812:	2014      	movs	r0, #20
 8001814:	f7ff fc96 	bl	8001144 <set_start_time>
	set_start_day(2024,2,3);
 8001818:	2203      	movs	r2, #3
 800181a:	2102      	movs	r1, #2
 800181c:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
 8001820:	f7ff fcaa 	bl	8001178 <set_start_day>
	createChar(num_tank_right, tank_right);
 8001824:	4b3a      	ldr	r3, [pc, #232]	; (8001910 <programInit+0x130>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	493a      	ldr	r1, [pc, #232]	; (8001914 <programInit+0x134>)
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f801 	bl	8000832 <createChar>
	createChar(num_tank_up, tank_up);
 8001830:	4b39      	ldr	r3, [pc, #228]	; (8001918 <programInit+0x138>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4939      	ldr	r1, [pc, #228]	; (800191c <programInit+0x13c>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fffb 	bl	8000832 <createChar>
	createChar(num_tank_down, tank_down);
 800183c:	4b38      	ldr	r3, [pc, #224]	; (8001920 <programInit+0x140>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4938      	ldr	r1, [pc, #224]	; (8001924 <programInit+0x144>)
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fff5 	bl	8000832 <createChar>
	createChar(num_tank_left, tank_left);
 8001848:	4b37      	ldr	r3, [pc, #220]	; (8001928 <programInit+0x148>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4937      	ldr	r1, [pc, #220]	; (800192c <programInit+0x14c>)
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe ffef 	bl	8000832 <createChar>
	createChar(num_extra_bullet, extra_bullet);
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <programInit+0x150>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4936      	ldr	r1, [pc, #216]	; (8001934 <programInit+0x154>)
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe ffe9 	bl	8000832 <createChar>
	createChar(num_chance, chance);
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <programInit+0x158>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4935      	ldr	r1, [pc, #212]	; (800193c <programInit+0x15c>)
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe ffe3 	bl	8000832 <createChar>
	createChar(num_health, health);
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <programInit+0x160>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4934      	ldr	r1, [pc, #208]	; (8001944 <programInit+0x164>)
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe ffdd 	bl	8000832 <createChar>
	createChar(num_arrow, arrow);
 8001878:	4b33      	ldr	r3, [pc, #204]	; (8001948 <programInit+0x168>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4933      	ldr	r1, [pc, #204]	; (800194c <programInit+0x16c>)
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe ffd7 	bl	8000832 <createChar>
//	starter();
	pageflag=0;
 8001884:	4b32      	ldr	r3, [pc, #200]	; (8001950 <programInit+0x170>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	e035      	b.n	80018fc <programInit+0x11c>
		bul[i].active=0;
 8001890:	4930      	ldr	r1, [pc, #192]	; (8001954 <programInit+0x174>)
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	3310      	adds	r3, #16
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
		bul[i].direction=1;
 80018a4:	492b      	ldr	r1, [pc, #172]	; (8001954 <programInit+0x174>)
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	330c      	adds	r3, #12
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
		bul[i].player_id=1;
 80018b8:	4926      	ldr	r1, [pc, #152]	; (8001954 <programInit+0x174>)
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
		bul[i].position_x=-1;
 80018ca:	4922      	ldr	r1, [pc, #136]	; (8001954 <programInit+0x174>)
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	3304      	adds	r3, #4
 80018da:	f04f 32ff 	mov.w	r2, #4294967295
 80018de:	601a      	str	r2, [r3, #0]
		bul[i].position_y=-1;
 80018e0:	491c      	ldr	r1, [pc, #112]	; (8001954 <programInit+0x174>)
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	3308      	adds	r3, #8
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++){
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3301      	adds	r3, #1
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b09      	cmp	r3, #9
 8001900:	ddc6      	ble.n	8001890 <programInit+0xb0>

	}
//	init_board();


}
 8001902:	bf00      	nop
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	48000800 	.word	0x48000800
 8001910:	20000090 	.word	0x20000090
 8001914:	20000028 	.word	0x20000028
 8001918:	2000008c 	.word	0x2000008c
 800191c:	20000018 	.word	0x20000018
 8001920:	20000094 	.word	0x20000094
 8001924:	20000038 	.word	0x20000038
 8001928:	20000088 	.word	0x20000088
 800192c:	20000020 	.word	0x20000020
 8001930:	20000098 	.word	0x20000098
 8001934:	20000008 	.word	0x20000008
 8001938:	2000009c 	.word	0x2000009c
 800193c:	20000010 	.word	0x20000010
 8001940:	200000a0 	.word	0x200000a0
 8001944:	20000030 	.word	0x20000030
 8001948:	200000a4 	.word	0x200000a4
 800194c:	20000040 	.word	0x20000040
 8001950:	20000698 	.word	0x20000698
 8001954:	20000710 	.word	0x20000710

08001958 <starter>:

void starter(){
 8001958:	b580      	push	{r7, lr}
 800195a:	b09a      	sub	sp, #104	; 0x68
 800195c:	af00      	add	r7, sp, #0
	setCursor(0, 2);
 800195e:	2102      	movs	r1, #2
 8001960:	2000      	movs	r0, #0
 8001962:	f7fe fef3 	bl	800074c <setCursor>
	write(num_tank_right, tank_right);
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <starter+0xa8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4926      	ldr	r1, [pc, #152]	; (8001a04 <starter+0xac>)
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe ff97 	bl	80008a0 <write>

	setCursor(1, 1);
 8001972:	2101      	movs	r1, #1
 8001974:	2001      	movs	r0, #1
 8001976:	f7fe fee9 	bl	800074c <setCursor>
	print("#");
 800197a:	4823      	ldr	r0, [pc, #140]	; (8001a08 <starter+0xb0>)
 800197c:	f7fe ff2e 	bl	80007dc <print>

	setCursor(1, 2);
 8001980:	2102      	movs	r1, #2
 8001982:	2001      	movs	r0, #1
 8001984:	f7fe fee2 	bl	800074c <setCursor>
	print("#");
 8001988:	481f      	ldr	r0, [pc, #124]	; (8001a08 <starter+0xb0>)
 800198a:	f7fe ff27 	bl	80007dc <print>

	char data[100];
	int n = sprintf(data, "TANK BATTLE");
 800198e:	463b      	mov	r3, r7
 8001990:	491e      	ldr	r1, [pc, #120]	; (8001a0c <starter+0xb4>)
 8001992:	4618      	mov	r0, r3
 8001994:	f006 fc48 	bl	8008228 <siprintf>
 8001998:	6678      	str	r0, [r7, #100]	; 0x64
	setCursor(4, 1);
 800199a:	2101      	movs	r1, #1
 800199c:	2004      	movs	r0, #4
 800199e:	f7fe fed5 	bl	800074c <setCursor>
	print(data);
 80019a2:	463b      	mov	r3, r7
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe ff19 	bl	80007dc <print>
	setCursor(4, 2);
 80019aa:	2102      	movs	r1, #2
 80019ac:	2004      	movs	r0, #4
 80019ae:	f7fe fecd 	bl	800074c <setCursor>
	n = sprintf(data, "===========");
 80019b2:	463b      	mov	r3, r7
 80019b4:	4916      	ldr	r1, [pc, #88]	; (8001a10 <starter+0xb8>)
 80019b6:	4618      	mov	r0, r3
 80019b8:	f006 fc36 	bl	8008228 <siprintf>
 80019bc:	6678      	str	r0, [r7, #100]	; 0x64
	print(data);
 80019be:	463b      	mov	r3, r7
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe ff0b 	bl	80007dc <print>

	setCursor(18, 1);
 80019c6:	2101      	movs	r1, #1
 80019c8:	2012      	movs	r0, #18
 80019ca:	f7fe febf 	bl	800074c <setCursor>
	print("#");
 80019ce:	480e      	ldr	r0, [pc, #56]	; (8001a08 <starter+0xb0>)
 80019d0:	f7fe ff04 	bl	80007dc <print>
	setCursor(18, 2);
 80019d4:	2102      	movs	r1, #2
 80019d6:	2012      	movs	r0, #18
 80019d8:	f7fe feb8 	bl	800074c <setCursor>
	print("#");
 80019dc:	480a      	ldr	r0, [pc, #40]	; (8001a08 <starter+0xb0>)
 80019de:	f7fe fefd 	bl	80007dc <print>

	setCursor(19, 1);
 80019e2:	2101      	movs	r1, #1
 80019e4:	2013      	movs	r0, #19
 80019e6:	f7fe feb1 	bl	800074c <setCursor>
	write(num_tank_left, tank_left);
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <starter+0xbc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	490a      	ldr	r1, [pc, #40]	; (8001a18 <starter+0xc0>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe ff55 	bl	80008a0 <write>

}
 80019f6:	bf00      	nop
 80019f8:	3768      	adds	r7, #104	; 0x68
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000090 	.word	0x20000090
 8001a04:	20000028 	.word	0x20000028
 8001a08:	080095ec 	.word	0x080095ec
 8001a0c:	080095f0 	.word	0x080095f0
 8001a10:	080095fc 	.word	0x080095fc
 8001a14:	20000088 	.word	0x20000088
 8001a18:	20000020 	.word	0x20000020

08001a1c <init_board>:

void init_board(){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
	//i == soton, j ==> radif

    for (int i = 0; i < 20; i++) {
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	e017      	b.n	8001a58 <init_board+0x3c>
        for (int j = 0; j < 4; j++) {
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	e00e      	b.n	8001a4c <init_board+0x30>
        	setCursor(i, j);
 8001a2e:	6a39      	ldr	r1, [r7, #32]
 8001a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a32:	f7fe fe8b 	bl	800074c <setCursor>
        	lcd[i][j] = 0;
 8001a36:	4a6f      	ldr	r2, [pc, #444]	; (8001bf4 <init_board+0x1d8>)
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	441a      	add	r2, r3
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	4413      	add	r3, r2
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	623b      	str	r3, [r7, #32]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	dded      	ble.n	8001a2e <init_board+0x12>
    for (int i = 0; i < 20; i++) {
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	3301      	adds	r3, #1
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	2b13      	cmp	r3, #19
 8001a5c:	dde4      	ble.n	8001a28 <init_board+0xc>
//    		print(" ");

        }
    }

	lcd[1][1] = num_wall;
 8001a5e:	4b66      	ldr	r3, [pc, #408]	; (8001bf8 <init_board+0x1dc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <init_board+0x1d8>)
 8001a66:	715a      	strb	r2, [r3, #5]
	lcd[1][2] = num_wall;
 8001a68:	4b63      	ldr	r3, [pc, #396]	; (8001bf8 <init_board+0x1dc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <init_board+0x1d8>)
 8001a70:	719a      	strb	r2, [r3, #6]
	lcd[18][1] = num_wall;
 8001a72:	4b61      	ldr	r3, [pc, #388]	; (8001bf8 <init_board+0x1dc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b5e      	ldr	r3, [pc, #376]	; (8001bf4 <init_board+0x1d8>)
 8001a7a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	lcd[18][2] = num_wall;
 8001a7e:	4b5e      	ldr	r3, [pc, #376]	; (8001bf8 <init_board+0x1dc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b5b      	ldr	r3, [pc, #364]	; (8001bf4 <init_board+0x1d8>)
 8001a86:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	lcd[0][1] = num_tank_right;
 8001a8a:	4b5c      	ldr	r3, [pc, #368]	; (8001bfc <init_board+0x1e0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	4b58      	ldr	r3, [pc, #352]	; (8001bf4 <init_board+0x1d8>)
 8001a92:	705a      	strb	r2, [r3, #1]
	lcd[19][2] = num_tank_left;
 8001a94:	4b5a      	ldr	r3, [pc, #360]	; (8001c00 <init_board+0x1e4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b56      	ldr	r3, [pc, #344]	; (8001bf4 <init_board+0x1d8>)
 8001a9c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	int element_counter = 2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 8001aa4:	e030      	b.n	8001b08 <init_board+0xec>
		int col = rand() % 24;
 8001aa6:	f006 fb81 	bl	80081ac <rand>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b55      	ldr	r3, [pc, #340]	; (8001c04 <init_board+0x1e8>)
 8001aae:	fb83 1302 	smull	r1, r3, r3, r2
 8001ab2:	1099      	asrs	r1, r3, #2
 8001ab4:	17d3      	asrs	r3, r2, #31
 8001ab6:	1ac9      	subs	r1, r1, r3
 8001ab8:	460b      	mov	r3, r1
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	440b      	add	r3, r1
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	60bb      	str	r3, [r7, #8]
		int row = rand() % 4;
 8001ac4:	f006 fb72 	bl	80081ac <rand>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	425a      	negs	r2, r3
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	f002 0203 	and.w	r2, r2, #3
 8001ad4:	bf58      	it	pl
 8001ad6:	4253      	negpl	r3, r2
 8001ad8:	607b      	str	r3, [r7, #4]
		if(lcd[col][row] == 0){
 8001ada:	4a46      	ldr	r2, [pc, #280]	; (8001bf4 <init_board+0x1d8>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	441a      	add	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10d      	bne.n	8001b08 <init_board+0xec>
			lcd[col][row] = num_extra_bullet;
 8001aec:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <init_board+0x1ec>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	b2d9      	uxtb	r1, r3
 8001af2:	4a40      	ldr	r2, [pc, #256]	; (8001bf4 <init_board+0x1d8>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	441a      	add	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	460a      	mov	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //extra_bullet
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	dccb      	bgt.n	8001aa6 <init_board+0x8a>
		}
	}

	element_counter = 2;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 8001b12:	e030      	b.n	8001b76 <init_board+0x15a>
		int col = rand() % 24;
 8001b14:	f006 fb4a 	bl	80081ac <rand>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <init_board+0x1e8>)
 8001b1c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b20:	1099      	asrs	r1, r3, #2
 8001b22:	17d3      	asrs	r3, r2, #31
 8001b24:	1ac9      	subs	r1, r1, r3
 8001b26:	460b      	mov	r3, r1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	440b      	add	r3, r1
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	613b      	str	r3, [r7, #16]
		int row = rand() % 4;
 8001b32:	f006 fb3b 	bl	80081ac <rand>
 8001b36:	4603      	mov	r3, r0
 8001b38:	425a      	negs	r2, r3
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	f002 0203 	and.w	r2, r2, #3
 8001b42:	bf58      	it	pl
 8001b44:	4253      	negpl	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
		if(lcd[col][row] == 0){
 8001b48:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <init_board+0x1d8>)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	441a      	add	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10d      	bne.n	8001b76 <init_board+0x15a>
			lcd[col][row] = num_health;
 8001b5a:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <init_board+0x1f0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b2d9      	uxtb	r1, r3
 8001b60:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <init_board+0x1d8>)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	441a      	add	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //health
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	dccb      	bgt.n	8001b14 <init_board+0xf8>
		}
	}

	element_counter = 2;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 8001b80:	e030      	b.n	8001be4 <init_board+0x1c8>
		int col = rand() % 24;
 8001b82:	f006 fb13 	bl	80081ac <rand>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <init_board+0x1e8>)
 8001b8a:	fb83 1302 	smull	r1, r3, r3, r2
 8001b8e:	1099      	asrs	r1, r3, #2
 8001b90:	17d3      	asrs	r3, r2, #31
 8001b92:	1ac9      	subs	r1, r1, r3
 8001b94:	460b      	mov	r3, r1
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	440b      	add	r3, r1
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	61bb      	str	r3, [r7, #24]
		int row = rand() % 4;
 8001ba0:	f006 fb04 	bl	80081ac <rand>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	425a      	negs	r2, r3
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	f002 0203 	and.w	r2, r2, #3
 8001bb0:	bf58      	it	pl
 8001bb2:	4253      	negpl	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]
		if(lcd[col][row] == 0){
 8001bb6:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <init_board+0x1d8>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	441a      	add	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10d      	bne.n	8001be4 <init_board+0x1c8>
			lcd[col][row] = num_obstacle;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <init_board+0x1f4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	b2d9      	uxtb	r1, r3
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <init_board+0x1d8>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	441a      	add	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	4413      	add	r3, r2
 8001bda:	460a      	mov	r2, r1
 8001bdc:	701a      	strb	r2, [r3, #0]
			element_counter--;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
	while(element_counter > 0){ //obstacle
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	dccb      	bgt.n	8001b82 <init_board+0x166>
		}
	}

}
 8001bea:	bf00      	nop
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	; 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200006c0 	.word	0x200006c0
 8001bf8:	200000a8 	.word	0x200000a8
 8001bfc:	20000090 	.word	0x20000090
 8001c00:	20000088 	.word	0x20000088
 8001c04:	2aaaaaab 	.word	0x2aaaaaab
 8001c08:	20000098 	.word	0x20000098
 8001c0c:	200000a0 	.word	0x200000a0
 8001c10:	200000ac 	.word	0x200000ac

08001c14 <update_lcd>:
// D11 -> C3
// D12 -> C9
// D13 -> C8
// D14 -> C7

void update_lcd(){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
	if (game_started==1){
 8001c1a:	4b55      	ldr	r3, [pc, #340]	; (8001d70 <update_lcd+0x15c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d109      	bne.n	8001c36 <update_lcd+0x22>
		clear();
 8001c22:	f7fe fd89 	bl	8000738 <clear>
		init_board();
 8001c26:	f7ff fef9 	bl	8001a1c <init_board>
		change_page = 0;
 8001c2a:	4b52      	ldr	r3, [pc, #328]	; (8001d74 <update_lcd+0x160>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
		game_started = 0;
 8001c30:	4b4f      	ldr	r3, [pc, #316]	; (8001d70 <update_lcd+0x15c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
	}

	if(pageflag==0){
 8001c36:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <update_lcd+0x164>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <update_lcd+0x2e>
		starter();
 8001c3e:	f7ff fe8b 	bl	8001958 <starter>
	}


	if(pageflag==2){
 8001c42:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <update_lcd+0x164>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d166      	bne.n	8001d18 <update_lcd+0x104>
		for (int i = 0; i < 20; i++) {
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	e05f      	b.n	8001d10 <update_lcd+0xfc>
			for (int j = 0; j < 4; j++) {
 8001c50:	2300      	movs	r3, #0
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	e056      	b.n	8001d04 <update_lcd+0xf0>
				setCursor(i, j);
 8001c56:	6839      	ldr	r1, [r7, #0]
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7fe fd77 	bl	800074c <setCursor>
				if(lcd[i][j] != 9 && lcd[i][j] != 10 && lcd[i][j] != 0)
 8001c5e:	4a47      	ldr	r2, [pc, #284]	; (8001d7c <update_lcd+0x168>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	441a      	add	r2, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	4413      	add	r3, r2
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b09      	cmp	r3, #9
 8001c6e:	d01c      	beq.n	8001caa <update_lcd+0x96>
 8001c70:	4a42      	ldr	r2, [pc, #264]	; (8001d7c <update_lcd+0x168>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	441a      	add	r2, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b0a      	cmp	r3, #10
 8001c80:	d013      	beq.n	8001caa <update_lcd+0x96>
 8001c82:	4a3e      	ldr	r2, [pc, #248]	; (8001d7c <update_lcd+0x168>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	441a      	add	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00a      	beq.n	8001caa <update_lcd+0x96>
					write(lcd[i][j]);
 8001c94:	4a39      	ldr	r2, [pc, #228]	; (8001d7c <update_lcd+0x168>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	441a      	add	r2, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fdfc 	bl	80008a0 <write>
 8001ca8:	e029      	b.n	8001cfe <update_lcd+0xea>
				else if (lcd[i][j] == 9)
 8001caa:	4a34      	ldr	r2, [pc, #208]	; (8001d7c <update_lcd+0x168>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	441a      	add	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b09      	cmp	r3, #9
 8001cba:	d103      	bne.n	8001cc4 <update_lcd+0xb0>
					print("#");
 8001cbc:	4830      	ldr	r0, [pc, #192]	; (8001d80 <update_lcd+0x16c>)
 8001cbe:	f7fe fd8d 	bl	80007dc <print>
 8001cc2:	e01c      	b.n	8001cfe <update_lcd+0xea>
				else if (lcd[i][j] == 10)
 8001cc4:	4a2d      	ldr	r2, [pc, #180]	; (8001d7c <update_lcd+0x168>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	441a      	add	r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b0a      	cmp	r3, #10
 8001cd4:	d103      	bne.n	8001cde <update_lcd+0xca>
					print("I");
 8001cd6:	482b      	ldr	r0, [pc, #172]	; (8001d84 <update_lcd+0x170>)
 8001cd8:	f7fe fd80 	bl	80007dc <print>
 8001cdc:	e00f      	b.n	8001cfe <update_lcd+0xea>
				else if (lcd[i][j] == 0)
 8001cde:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <update_lcd+0x168>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	441a      	add	r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d103      	bne.n	8001cf8 <update_lcd+0xe4>
					print(" ");
 8001cf0:	4825      	ldr	r0, [pc, #148]	; (8001d88 <update_lcd+0x174>)
 8001cf2:	f7fe fd73 	bl	80007dc <print>
 8001cf6:	e002      	b.n	8001cfe <update_lcd+0xea>
				else
					print("U");
 8001cf8:	4824      	ldr	r0, [pc, #144]	; (8001d8c <update_lcd+0x178>)
 8001cfa:	f7fe fd6f 	bl	80007dc <print>
			for (int j = 0; j < 4; j++) {
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	dda5      	ble.n	8001c56 <update_lcd+0x42>
		for (int i = 0; i < 20; i++) {
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b13      	cmp	r3, #19
 8001d14:	dd9c      	ble.n	8001c50 <update_lcd+0x3c>
	}
	else if (pageflag==4){
		about_page();
	}

}
 8001d16:	e027      	b.n	8001d68 <update_lcd+0x154>
	else if (change_page==1){
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <update_lcd+0x160>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <update_lcd+0x118>
		clear();
 8001d20:	f7fe fd0a 	bl	8000738 <clear>
		change_page = 0;
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <update_lcd+0x160>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
}
 8001d2a:	e01d      	b.n	8001d68 <update_lcd+0x154>
	else if (change_page==1){
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <update_lcd+0x160>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <update_lcd+0x12c>
		clear();
 8001d34:	f7fe fd00 	bl	8000738 <clear>
		change_page = 0;
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <update_lcd+0x160>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
}
 8001d3e:	e013      	b.n	8001d68 <update_lcd+0x154>
	else if (pageflag==1){
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <update_lcd+0x164>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d102      	bne.n	8001d4e <update_lcd+0x13a>
		menu();
 8001d48:	f000 f88c 	bl	8001e64 <menu>
}
 8001d4c:	e00c      	b.n	8001d68 <update_lcd+0x154>
	else if (pageflag==3){
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <update_lcd+0x164>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d102      	bne.n	8001d5c <update_lcd+0x148>
		setting_page();
 8001d56:	f000 f877 	bl	8001e48 <setting_page>
}
 8001d5a:	e005      	b.n	8001d68 <update_lcd+0x154>
	else if (pageflag==4){
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <update_lcd+0x164>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d101      	bne.n	8001d68 <update_lcd+0x154>
		about_page();
 8001d64:	f000 f814 	bl	8001d90 <about_page>
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000069c 	.word	0x2000069c
 8001d74:	200006a4 	.word	0x200006a4
 8001d78:	20000698 	.word	0x20000698
 8001d7c:	200006c0 	.word	0x200006c0
 8001d80:	080095ec 	.word	0x080095ec
 8001d84:	08009608 	.word	0x08009608
 8001d88:	0800960c 	.word	0x0800960c
 8001d8c:	08009610 	.word	0x08009610

08001d90 <about_page>:
void about_page(){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b0b4      	sub	sp, #208	; 0xd0
 8001d94:	af02      	add	r7, sp, #8
	setCursor(6, 1);
 8001d96:	2101      	movs	r1, #1
 8001d98:	2006      	movs	r0, #6
 8001d9a:	f7fe fcd7 	bl	800074c <setCursor>
	print("POURIA");
 8001d9e:	4822      	ldr	r0, [pc, #136]	; (8001e28 <about_page+0x98>)
 8001da0:	f7fe fd1c 	bl	80007dc <print>
	setCursor(8, 2);
 8001da4:	2102      	movs	r1, #2
 8001da6:	2008      	movs	r0, #8
 8001da8:	f7fe fcd0 	bl	800074c <setCursor>
	print("ALI");
 8001dac:	481f      	ldr	r0, [pc, #124]	; (8001e2c <about_page+0x9c>)
 8001dae:	f7fe fd15 	bl	80007dc <print>
	char timeStr[100];
	char dateStr[100];

	setCursor(5, 3);
 8001db2:	2103      	movs	r1, #3
 8001db4:	2005      	movs	r0, #5
 8001db6:	f7fe fcc9 	bl	800074c <setCursor>
	print("          ");
 8001dba:	481d      	ldr	r0, [pc, #116]	; (8001e30 <about_page+0xa0>)
 8001dbc:	f7fe fd0e 	bl	80007dc <print>
	HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	491c      	ldr	r1, [pc, #112]	; (8001e34 <about_page+0xa4>)
 8001dc4:	481c      	ldr	r0, [pc, #112]	; (8001e38 <about_page+0xa8>)
 8001dc6:	f004 f828 	bl	8005e1a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	4919      	ldr	r1, [pc, #100]	; (8001e34 <about_page+0xa4>)
 8001dce:	481a      	ldr	r0, [pc, #104]	; (8001e38 <about_page+0xa8>)
 8001dd0:	f004 f905 	bl	8005fde <HAL_RTC_GetDate>

	sprintf(timeStr, "%02d:%02d:%02d", mytime.Hours, mytime.Minutes, mytime.Seconds);
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <about_page+0xa4>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <about_page+0xa4>)
 8001ddc:	785b      	ldrb	r3, [r3, #1]
 8001dde:	4619      	mov	r1, r3
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <about_page+0xa4>)
 8001de2:	789b      	ldrb	r3, [r3, #2]
 8001de4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	460b      	mov	r3, r1
 8001dec:	4913      	ldr	r1, [pc, #76]	; (8001e3c <about_page+0xac>)
 8001dee:	f006 fa1b 	bl	8008228 <siprintf>
	sprintf(dateStr, "%04d:%02d:%02d", mydate.Year, mydate.Month, mydate.Date);
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <about_page+0xb0>)
 8001df4:	78db      	ldrb	r3, [r3, #3]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <about_page+0xb0>)
 8001dfa:	785b      	ldrb	r3, [r3, #1]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <about_page+0xb0>)
 8001e00:	789b      	ldrb	r3, [r3, #2]
 8001e02:	4638      	mov	r0, r7
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	460b      	mov	r3, r1
 8001e08:	490e      	ldr	r1, [pc, #56]	; (8001e44 <about_page+0xb4>)
 8001e0a:	f006 fa0d 	bl	8008228 <siprintf>

	setCursor(5, 3);
 8001e0e:	2103      	movs	r1, #3
 8001e10:	2005      	movs	r0, #5
 8001e12:	f7fe fc9b 	bl	800074c <setCursor>
	print(timeStr);
 8001e16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fcde 	bl	80007dc <print>

}
 8001e20:	bf00      	nop
 8001e22:	37c8      	adds	r7, #200	; 0xc8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	08009614 	.word	0x08009614
 8001e2c:	0800961c 	.word	0x0800961c
 8001e30:	08009620 	.word	0x08009620
 8001e34:	200006a8 	.word	0x200006a8
 8001e38:	20000208 	.word	0x20000208
 8001e3c:	0800962c 	.word	0x0800962c
 8001e40:	200006bc 	.word	0x200006bc
 8001e44:	0800963c 	.word	0x0800963c

08001e48 <setting_page>:

void setting_page(){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	setCursor(6, 1);
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	2006      	movs	r0, #6
 8001e50:	f7fe fc7c 	bl	800074c <setCursor>
	print("KHALI");
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <setting_page+0x18>)
 8001e56:	f7fe fcc1 	bl	80007dc <print>

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	0800964c 	.word	0x0800964c

08001e64 <menu>:
//			pageflag = 1;
//
//		}
//}

void menu(){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0

	setCursor(1, 0);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f7fe fc6e 	bl	800074c <setCursor>
	print("MENU:");
 8001e70:	481f      	ldr	r0, [pc, #124]	; (8001ef0 <menu+0x8c>)
 8001e72:	f7fe fcb3 	bl	80007dc <print>
	setCursor(1, 1);
 8001e76:	2101      	movs	r1, #1
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7fe fc67 	bl	800074c <setCursor>
	print("PLAY");
 8001e7e:	481d      	ldr	r0, [pc, #116]	; (8001ef4 <menu+0x90>)
 8001e80:	f7fe fcac 	bl	80007dc <print>
	setCursor(1, 2);
 8001e84:	2102      	movs	r1, #2
 8001e86:	2001      	movs	r0, #1
 8001e88:	f7fe fc60 	bl	800074c <setCursor>
	print("SETTING");
 8001e8c:	481a      	ldr	r0, [pc, #104]	; (8001ef8 <menu+0x94>)
 8001e8e:	f7fe fca5 	bl	80007dc <print>
	setCursor(1, 3);
 8001e92:	2103      	movs	r1, #3
 8001e94:	2001      	movs	r0, #1
 8001e96:	f7fe fc59 	bl	800074c <setCursor>
	print("ABOUT");
 8001e9a:	4818      	ldr	r0, [pc, #96]	; (8001efc <menu+0x98>)
 8001e9c:	f7fe fc9e 	bl	80007dc <print>
	setCursor(0, 0);
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7fe fc52 	bl	800074c <setCursor>
	print(" ");
 8001ea8:	4815      	ldr	r0, [pc, #84]	; (8001f00 <menu+0x9c>)
 8001eaa:	f7fe fc97 	bl	80007dc <print>
	setCursor(0, 1);
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7fe fc4b 	bl	800074c <setCursor>
	print(" ");
 8001eb6:	4812      	ldr	r0, [pc, #72]	; (8001f00 <menu+0x9c>)
 8001eb8:	f7fe fc90 	bl	80007dc <print>
	setCursor(0, 2);
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7fe fc44 	bl	800074c <setCursor>
	print(" ");
 8001ec4:	480e      	ldr	r0, [pc, #56]	; (8001f00 <menu+0x9c>)
 8001ec6:	f7fe fc89 	bl	80007dc <print>
	setCursor(0, 3);
 8001eca:	2103      	movs	r1, #3
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7fe fc3d 	bl	800074c <setCursor>
	print(" ");
 8001ed2:	480b      	ldr	r0, [pc, #44]	; (8001f00 <menu+0x9c>)
 8001ed4:	f7fe fc82 	bl	80007dc <print>
	setCursor(0, menu_curser_r);
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <menu+0xa0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7fe fc34 	bl	800074c <setCursor>
	print(">");
 8001ee4:	4808      	ldr	r0, [pc, #32]	; (8001f08 <menu+0xa4>)
 8001ee6:	f7fe fc79 	bl	80007dc <print>

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	08009654 	.word	0x08009654
 8001ef4:	0800965c 	.word	0x0800965c
 8001ef8:	08009664 	.word	0x08009664
 8001efc:	0800966c 	.word	0x0800966c
 8001f00:	0800960c 	.word	0x0800960c
 8001f04:	20000004 	.word	0x20000004
 8001f08:	08009674 	.word	0x08009674

08001f0c <programLoop>:

void programLoop() {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
//    seven_segment_refresh();

    update_lcd();
 8001f10:	f7ff fe80 	bl	8001c14 <update_lcd>
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d110      	bne.n	8001f4c <HAL_TIM_PeriodElapsedCallback+0x34>
//		update_lcd();
		seven_segment_refresh();
 8001f2a:	f7ff fbb7 	bl	800169c <seven_segment_refresh>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8001f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f32:	480d      	ldr	r0, [pc, #52]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f34:	f002 f806 	bl	8003f44 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	480a      	ldr	r0, [pc, #40]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f3e:	f002 f801 	bl	8003f44 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8001f42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f46:	4808      	ldr	r0, [pc, #32]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f48:	f001 fffc 	bl	8003f44 <HAL_GPIO_TogglePin>

	}
	if(htim->Instance == TIM2){
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d101      	bne.n	8001f5a <HAL_TIM_PeriodElapsedCallback+0x42>
		test_shelik();
 8001f56:	f000 f943 	bl	80021e0 <test_shelik>
	}

}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40000800 	.word	0x40000800
 8001f68:	48001000 	.word	0x48001000

08001f6c <change_dir>:


void change_dir(int player){
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	if (player == 1){
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d119      	bne.n	8001fae <change_dir+0x42>
		int new_dir = player1.direction + 1;
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <change_dir+0x88>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
		if(new_dir == 5){
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b05      	cmp	r3, #5
 8001f86:	d101      	bne.n	8001f8c <change_dir+0x20>
			new_dir = 1;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
		}
		player1.direction = new_dir;
 8001f8c:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <change_dir+0x88>)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	60d3      	str	r3, [r2, #12]
		lcd[player1.position_x][player1.position_y] = player1.direction;
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <change_dir+0x88>)
 8001f94:	68d9      	ldr	r1, [r3, #12]
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <change_dir+0x88>)
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <change_dir+0x88>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	b2c8      	uxtb	r0, r1
 8001fa0:	4915      	ldr	r1, [pc, #84]	; (8001ff8 <change_dir+0x8c>)
 8001fa2:	0092      	lsls	r2, r2, #2
 8001fa4:	440a      	add	r2, r1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4602      	mov	r2, r0
 8001faa:	701a      	strb	r2, [r3, #0]
		}
		player2.direction = new_dir;
		lcd[player2.position_x][player2.position_y] = player2.direction;

	}
}
 8001fac:	e01b      	b.n	8001fe6 <change_dir+0x7a>
	}else if (player == 2){
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d118      	bne.n	8001fe6 <change_dir+0x7a>
		int new_dir = player2.direction + 1;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <change_dir+0x90>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
		if(new_dir == 5){
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d101      	bne.n	8001fc6 <change_dir+0x5a>
			new_dir = 1;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
		player2.direction = new_dir;
 8001fc6:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <change_dir+0x90>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
		lcd[player2.position_x][player2.position_y] = player2.direction;
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <change_dir+0x90>)
 8001fce:	68d9      	ldr	r1, [r3, #12]
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <change_dir+0x90>)
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <change_dir+0x90>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	b2c8      	uxtb	r0, r1
 8001fda:	4907      	ldr	r1, [pc, #28]	; (8001ff8 <change_dir+0x8c>)
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	440a      	add	r2, r1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	701a      	strb	r2, [r3, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000048 	.word	0x20000048
 8001ff8:	200006c0 	.word	0x200006c0
 8001ffc:	20000068 	.word	0x20000068

08002000 <boom>:

void boom(int player){
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0); //Temp
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800200e:	4844      	ldr	r0, [pc, #272]	; (8002120 <boom+0x120>)
 8002010:	f001 ff80 	bl	8003f14 <HAL_GPIO_WritePin>
	int i;
	for(i = 0; i<10;i++){
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e00d      	b.n	8002036 <boom+0x36>
		if(bul[i].active==0)
 800201a:	4942      	ldr	r1, [pc, #264]	; (8002124 <boom+0x124>)
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3310      	adds	r3, #16
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <boom+0x3e>
	for(i = 0; i<10;i++){
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3301      	adds	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b09      	cmp	r3, #9
 800203a:	ddee      	ble.n	800201a <boom+0x1a>
 800203c:	e000      	b.n	8002040 <boom+0x40>
			break;
 800203e:	bf00      	nop
	}
	bul[i].active = 1;
 8002040:	4938      	ldr	r1, [pc, #224]	; (8002124 <boom+0x124>)
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	3310      	adds	r3, #16
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
	if (player == 1){
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d12f      	bne.n	80020ba <boom+0xba>
		bul[i].direction=player1.direction;
 800205a:	4b33      	ldr	r3, [pc, #204]	; (8002128 <boom+0x128>)
 800205c:	68d9      	ldr	r1, [r3, #12]
 800205e:	4831      	ldr	r0, [pc, #196]	; (8002124 <boom+0x124>)
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4403      	add	r3, r0
 800206c:	330c      	adds	r3, #12
 800206e:	6019      	str	r1, [r3, #0]
		bul[i].position_x=player1.position_x;
 8002070:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <boom+0x128>)
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	482b      	ldr	r0, [pc, #172]	; (8002124 <boom+0x124>)
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4403      	add	r3, r0
 8002082:	3304      	adds	r3, #4
 8002084:	6019      	str	r1, [r3, #0]
		bul[i].position_y=player1.position_y;
 8002086:	4b28      	ldr	r3, [pc, #160]	; (8002128 <boom+0x128>)
 8002088:	6899      	ldr	r1, [r3, #8]
 800208a:	4826      	ldr	r0, [pc, #152]	; (8002124 <boom+0x124>)
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4403      	add	r3, r0
 8002098:	3308      	adds	r3, #8
 800209a:	6019      	str	r1, [r3, #0]
		bul[i].player_id=1;
 800209c:	4921      	ldr	r1, [pc, #132]	; (8002124 <boom+0x124>)
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
		player1.arrow--;
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <boom+0x128>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <boom+0x128>)
 80020b6:	6193      	str	r3, [r2, #24]
		player2.arrow--;

	}
//entesab be array

}
 80020b8:	e02e      	b.n	8002118 <boom+0x118>
		bul[i].direction=player2.direction;
 80020ba:	4b1c      	ldr	r3, [pc, #112]	; (800212c <boom+0x12c>)
 80020bc:	68d9      	ldr	r1, [r3, #12]
 80020be:	4819      	ldr	r0, [pc, #100]	; (8002124 <boom+0x124>)
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4403      	add	r3, r0
 80020cc:	330c      	adds	r3, #12
 80020ce:	6019      	str	r1, [r3, #0]
		bul[i].position_x=player2.position_x;
 80020d0:	4b16      	ldr	r3, [pc, #88]	; (800212c <boom+0x12c>)
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	4813      	ldr	r0, [pc, #76]	; (8002124 <boom+0x124>)
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4403      	add	r3, r0
 80020e2:	3304      	adds	r3, #4
 80020e4:	6019      	str	r1, [r3, #0]
		bul[i].position_y=player2.position_y;
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <boom+0x12c>)
 80020e8:	6899      	ldr	r1, [r3, #8]
 80020ea:	480e      	ldr	r0, [pc, #56]	; (8002124 <boom+0x124>)
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4403      	add	r3, r0
 80020f8:	3308      	adds	r3, #8
 80020fa:	6019      	str	r1, [r3, #0]
		bul[i].player_id=2;
 80020fc:	4909      	ldr	r1, [pc, #36]	; (8002124 <boom+0x124>)
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	2202      	movs	r2, #2
 800210c:	601a      	str	r2, [r3, #0]
		player2.arrow--;
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <boom+0x12c>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	3b01      	subs	r3, #1
 8002114:	4a05      	ldr	r2, [pc, #20]	; (800212c <boom+0x12c>)
 8002116:	6193      	str	r3, [r2, #24]
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	48001000 	.word	0x48001000
 8002124:	20000710 	.word	0x20000710
 8002128:	20000048 	.word	0x20000048
 800212c:	20000068 	.word	0x20000068

08002130 <collect>:

int sev_result = 0;
void collect(uint8_t pos, int player){
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
	if (pos == num_extra_bullet){
 800213c:	79fa      	ldrb	r2, [r7, #7]
 800213e:	4b23      	ldr	r3, [pc, #140]	; (80021cc <collect+0x9c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d10e      	bne.n	8002164 <collect+0x34>
		if (player == 1)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <collect+0x28>
			player1.arrow+=1;
 800214c:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <collect+0xa0>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	3301      	adds	r3, #1
 8002152:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <collect+0xa0>)
 8002154:	6193      	str	r3, [r2, #24]
 8002156:	e018      	b.n	800218a <collect+0x5a>
		else
			player2.arrow+=1;
 8002158:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <collect+0xa4>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	3301      	adds	r3, #1
 800215e:	4a1d      	ldr	r2, [pc, #116]	; (80021d4 <collect+0xa4>)
 8002160:	6193      	str	r3, [r2, #24]
 8002162:	e012      	b.n	800218a <collect+0x5a>
	}else if (pos == num_health){
 8002164:	79fa      	ldrb	r2, [r7, #7]
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <collect+0xa8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d10d      	bne.n	800218a <collect+0x5a>
		if (player == 1)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d105      	bne.n	8002180 <collect+0x50>
			player1.health+=1;
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <collect+0xa0>)
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <collect+0xa0>)
 800217c:	6153      	str	r3, [r2, #20]
 800217e:	e004      	b.n	800218a <collect+0x5a>
		else
			player2.health+=1;
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <collect+0xa4>)
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <collect+0xa4>)
 8002188:	6153      	str	r3, [r2, #20]
//	uint8_t c = player1.arrow;
//	uint8_t d = player1.health;
//	int results[4] = {d,c,b,a};
//	seven_segment_set_num(results);

	sev_result = player2.arrow * 1000 + player2.health * 100 + player1.arrow * 10 + player1.health;
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <collect+0xa4>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002192:	fb03 f202 	mul.w	r2, r3, r2
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <collect+0xa4>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	2164      	movs	r1, #100	; 0x64
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	18d1      	adds	r1, r2, r3
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <collect+0xa0>)
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	18ca      	adds	r2, r1, r3
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <collect+0xa0>)
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	4413      	add	r3, r2
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <collect+0xac>)
 80021b8:	6013      	str	r3, [r2, #0]
	setNumber(sev_result);
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <collect+0xac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fa9a 	bl	80016f8 <setNumber>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000098 	.word	0x20000098
 80021d0:	20000048 	.word	0x20000048
 80021d4:	20000068 	.word	0x20000068
 80021d8:	200000a0 	.word	0x200000a0
 80021dc:	200007d8 	.word	0x200007d8

080021e0 <test_shelik>:

void test_shelik(){
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b08b      	sub	sp, #44	; 0x2c
 80021e4:	af00      	add	r7, sp, #0
	for(int i = 0; i<10;i++){
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	f000 bcc1 	b.w	8002b70 <test_shelik+0x990>
		if(bul[i].active==1){
 80021ee:	4992      	ldr	r1, [pc, #584]	; (8002438 <test_shelik+0x258>)
 80021f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	3310      	adds	r3, #16
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	f040 84b2 	bne.w	8002b6a <test_shelik+0x98a>
			//4 -> down
			//check direction
			// check next
			// update position and show
			//active =0
			if(bul[i].direction == 1){
 8002206:	498c      	ldr	r1, [pc, #560]	; (8002438 <test_shelik+0x258>)
 8002208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	330c      	adds	r3, #12
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b01      	cmp	r3, #1
 800221a:	f040 8123 	bne.w	8002464 <test_shelik+0x284>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 800221e:	4986      	ldr	r1, [pc, #536]	; (8002438 <test_shelik+0x258>)
 8002220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	3304      	adds	r3, #4
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	4881      	ldr	r0, [pc, #516]	; (8002438 <test_shelik+0x258>)
 8002232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4403      	add	r3, r0
 800223e:	3308      	adds	r3, #8
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	487e      	ldr	r0, [pc, #504]	; (800243c <test_shelik+0x25c>)
 8002244:	008a      	lsls	r2, r1, #2
 8002246:	4402      	add	r2, r0
 8002248:	4413      	add	r3, r2
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b7c      	ldr	r3, [pc, #496]	; (8002440 <test_shelik+0x260>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d117      	bne.n	8002286 <test_shelik+0xa6>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 8002256:	4978      	ldr	r1, [pc, #480]	; (8002438 <test_shelik+0x258>)
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	3304      	adds	r3, #4
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	4873      	ldr	r0, [pc, #460]	; (8002438 <test_shelik+0x258>)
 800226a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4403      	add	r3, r0
 8002276:	3308      	adds	r3, #8
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4870      	ldr	r0, [pc, #448]	; (800243c <test_shelik+0x25c>)
 800227c:	008a      	lsls	r2, r1, #2
 800227e:	4402      	add	r2, r0
 8002280:	4413      	add	r3, r2
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
				}
				int new_x = bul[i].position_x - 1;
 8002286:	496c      	ldr	r1, [pc, #432]	; (8002438 <test_shelik+0x258>)
 8002288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	3304      	adds	r3, #4
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3b01      	subs	r3, #1
 800229a:	60bb      	str	r3, [r7, #8]

				if(new_x >= 0){
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db27      	blt.n	80022f2 <test_shelik+0x112>
					bul[i].position_x = new_x;
 80022a2:	4965      	ldr	r1, [pc, #404]	; (8002438 <test_shelik+0x258>)
 80022a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3304      	adds	r3, #4
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 80022b6:	4960      	ldr	r1, [pc, #384]	; (8002438 <test_shelik+0x258>)
 80022b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	3304      	adds	r3, #4
 80022c6:	6819      	ldr	r1, [r3, #0]
 80022c8:	485b      	ldr	r0, [pc, #364]	; (8002438 <test_shelik+0x258>)
 80022ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4403      	add	r3, r0
 80022d6:	3308      	adds	r3, #8
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4858      	ldr	r0, [pc, #352]	; (800243c <test_shelik+0x25c>)
 80022dc:	008a      	lsls	r2, r1, #2
 80022de:	4402      	add	r2, r0
 80022e0:	4413      	add	r3, r2
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	607b      	str	r3, [r7, #4]
				if(next_element == num_obstacle){
 80022e6:	4b57      	ldr	r3, [pc, #348]	; (8002444 <test_shelik+0x264>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d129      	bne.n	8002344 <test_shelik+0x164>
 80022f0:	e00b      	b.n	800230a <test_shelik+0x12a>
					bul[i].active = 0;
 80022f2:	4951      	ldr	r1, [pc, #324]	; (8002438 <test_shelik+0x258>)
 80022f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3310      	adds	r3, #16
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
					continue;
 8002306:	f000 bc30 	b.w	8002b6a <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 800230a:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <test_shelik+0x260>)
 800230c:	681c      	ldr	r4, [r3, #0]
 800230e:	494a      	ldr	r1, [pc, #296]	; (8002438 <test_shelik+0x258>)
 8002310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3304      	adds	r3, #4
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	4845      	ldr	r0, [pc, #276]	; (8002438 <test_shelik+0x258>)
 8002322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4403      	add	r3, r0
 800232e:	3308      	adds	r3, #8
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b2e4      	uxtb	r4, r4
 8002334:	4841      	ldr	r0, [pc, #260]	; (800243c <test_shelik+0x25c>)
 8002336:	008a      	lsls	r2, r1, #2
 8002338:	4402      	add	r2, r0
 800233a:	4413      	add	r3, r2
 800233c:	4622      	mov	r2, r4
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	f000 bc13 	b.w	8002b6a <test_shelik+0x98a>
				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 8002344:	4b40      	ldr	r3, [pc, #256]	; (8002448 <test_shelik+0x268>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	d00e      	beq.n	800236c <test_shelik+0x18c>
 800234e:	4b3f      	ldr	r3, [pc, #252]	; (800244c <test_shelik+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	d009      	beq.n	800236c <test_shelik+0x18c>
 8002358:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <test_shelik+0x270>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	d004      	beq.n	800236c <test_shelik+0x18c>
 8002362:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <test_shelik+0x274>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	d135      	bne.n	80023d8 <test_shelik+0x1f8>
					if(bul[i].player_id == 1){
 800236c:	4932      	ldr	r1, [pc, #200]	; (8002438 <test_shelik+0x258>)
 800236e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d110      	bne.n	80023a2 <test_shelik+0x1c2>
						player2.health--;
 8002380:	4b35      	ldr	r3, [pc, #212]	; (8002458 <test_shelik+0x278>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	3b01      	subs	r3, #1
 8002386:	4a34      	ldr	r2, [pc, #208]	; (8002458 <test_shelik+0x278>)
 8002388:	6153      	str	r3, [r2, #20]
						if(player2.health==0){
 800238a:	4b33      	ldr	r3, [pc, #204]	; (8002458 <test_shelik+0x278>)
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <test_shelik+0x1b6>
								endgame();
 8002392:	f000 fc0d 	bl	8002bb0 <endgame>
							}
						player1.points++;
 8002396:	4b31      	ldr	r3, [pc, #196]	; (800245c <test_shelik+0x27c>)
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	3301      	adds	r3, #1
 800239c:	4a2f      	ldr	r2, [pc, #188]	; (800245c <test_shelik+0x27c>)
 800239e:	6113      	str	r3, [r2, #16]
 80023a0:	e00f      	b.n	80023c2 <test_shelik+0x1e2>
					}
					else{
						player1.health--;
 80023a2:	4b2e      	ldr	r3, [pc, #184]	; (800245c <test_shelik+0x27c>)
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	4a2c      	ldr	r2, [pc, #176]	; (800245c <test_shelik+0x27c>)
 80023aa:	6153      	str	r3, [r2, #20]
						if(player1.health==0){
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <test_shelik+0x27c>)
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <test_shelik+0x1d8>
							endgame();
 80023b4:	f000 fbfc 	bl	8002bb0 <endgame>
						}
						player2.points++;
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <test_shelik+0x278>)
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	3301      	adds	r3, #1
 80023be:	4a26      	ldr	r2, [pc, #152]	; (8002458 <test_shelik+0x278>)
 80023c0:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 80023c2:	491d      	ldr	r1, [pc, #116]	; (8002438 <test_shelik+0x258>)
 80023c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	3310      	adds	r3, #16
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
					continue;
 80023d6:	e3c8      	b.n	8002b6a <test_shelik+0x98a>
				}
				else if(next_element == num_wall){
 80023d8:	4b21      	ldr	r3, [pc, #132]	; (8002460 <test_shelik+0x280>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d10a      	bne.n	80023f8 <test_shelik+0x218>
					bul[i].active = 0;
 80023e2:	4915      	ldr	r1, [pc, #84]	; (8002438 <test_shelik+0x258>)
 80023e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3310      	adds	r3, #16
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
					continue;
 80023f6:	e3b8      	b.n	8002b6a <test_shelik+0x98a>
				}
				else if(next_element == 0){
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 83b5 	bne.w	8002b6a <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <test_shelik+0x260>)
 8002402:	681c      	ldr	r4, [r3, #0]
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <test_shelik+0x258>)
 8002406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	3304      	adds	r3, #4
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	4808      	ldr	r0, [pc, #32]	; (8002438 <test_shelik+0x258>)
 8002418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4403      	add	r3, r0
 8002424:	3308      	adds	r3, #8
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b2e4      	uxtb	r4, r4
 800242a:	4804      	ldr	r0, [pc, #16]	; (800243c <test_shelik+0x25c>)
 800242c:	008a      	lsls	r2, r1, #2
 800242e:	4402      	add	r2, r0
 8002430:	4413      	add	r3, r2
 8002432:	4622      	mov	r2, r4
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	e398      	b.n	8002b6a <test_shelik+0x98a>
 8002438:	20000710 	.word	0x20000710
 800243c:	200006c0 	.word	0x200006c0
 8002440:	200000a4 	.word	0x200000a4
 8002444:	200000ac 	.word	0x200000ac
 8002448:	20000094 	.word	0x20000094
 800244c:	20000088 	.word	0x20000088
 8002450:	20000090 	.word	0x20000090
 8002454:	2000008c 	.word	0x2000008c
 8002458:	20000068 	.word	0x20000068
 800245c:	20000048 	.word	0x20000048
 8002460:	200000a8 	.word	0x200000a8
			}




			else if(bul[i].direction == 2){
 8002464:	49a0      	ldr	r1, [pc, #640]	; (80026e8 <test_shelik+0x508>)
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	330c      	adds	r3, #12
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b02      	cmp	r3, #2
 8002478:	f040 814c 	bne.w	8002714 <test_shelik+0x534>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 800247c:	499a      	ldr	r1, [pc, #616]	; (80026e8 <test_shelik+0x508>)
 800247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	3304      	adds	r3, #4
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	4896      	ldr	r0, [pc, #600]	; (80026e8 <test_shelik+0x508>)
 8002490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4403      	add	r3, r0
 800249c:	3308      	adds	r3, #8
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4892      	ldr	r0, [pc, #584]	; (80026ec <test_shelik+0x50c>)
 80024a2:	008a      	lsls	r2, r1, #2
 80024a4:	4402      	add	r2, r0
 80024a6:	4413      	add	r3, r2
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b90      	ldr	r3, [pc, #576]	; (80026f0 <test_shelik+0x510>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d117      	bne.n	80024e4 <test_shelik+0x304>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 80024b4:	498c      	ldr	r1, [pc, #560]	; (80026e8 <test_shelik+0x508>)
 80024b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3304      	adds	r3, #4
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	4888      	ldr	r0, [pc, #544]	; (80026e8 <test_shelik+0x508>)
 80024c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4403      	add	r3, r0
 80024d4:	3308      	adds	r3, #8
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4884      	ldr	r0, [pc, #528]	; (80026ec <test_shelik+0x50c>)
 80024da:	008a      	lsls	r2, r1, #2
 80024dc:	4402      	add	r2, r0
 80024de:	4413      	add	r3, r2
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
				}

				int new_y = bul[i].position_y - 1;
 80024e4:	4980      	ldr	r1, [pc, #512]	; (80026e8 <test_shelik+0x508>)
 80024e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	3308      	adds	r3, #8
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	613b      	str	r3, [r7, #16]
				if(new_y >= 0){
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	db27      	blt.n	8002550 <test_shelik+0x370>
					bul[i].position_y = new_y;
 8002500:	4979      	ldr	r1, [pc, #484]	; (80026e8 <test_shelik+0x508>)
 8002502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	3308      	adds	r3, #8
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 8002514:	4974      	ldr	r1, [pc, #464]	; (80026e8 <test_shelik+0x508>)
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	3304      	adds	r3, #4
 8002524:	6819      	ldr	r1, [r3, #0]
 8002526:	4870      	ldr	r0, [pc, #448]	; (80026e8 <test_shelik+0x508>)
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4403      	add	r3, r0
 8002534:	3308      	adds	r3, #8
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	486c      	ldr	r0, [pc, #432]	; (80026ec <test_shelik+0x50c>)
 800253a:	008a      	lsls	r2, r1, #2
 800253c:	4402      	add	r2, r0
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]
				if(next_element == num_obstacle){
 8002544:	4b6b      	ldr	r3, [pc, #428]	; (80026f4 <test_shelik+0x514>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	429a      	cmp	r2, r3
 800254c:	d127      	bne.n	800259e <test_shelik+0x3be>
 800254e:	e00a      	b.n	8002566 <test_shelik+0x386>
					bul[i].active = 0;
 8002550:	4965      	ldr	r1, [pc, #404]	; (80026e8 <test_shelik+0x508>)
 8002552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3310      	adds	r3, #16
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
					continue;
 8002564:	e301      	b.n	8002b6a <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002566:	4b62      	ldr	r3, [pc, #392]	; (80026f0 <test_shelik+0x510>)
 8002568:	681c      	ldr	r4, [r3, #0]
 800256a:	495f      	ldr	r1, [pc, #380]	; (80026e8 <test_shelik+0x508>)
 800256c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3304      	adds	r3, #4
 800257a:	6819      	ldr	r1, [r3, #0]
 800257c:	485a      	ldr	r0, [pc, #360]	; (80026e8 <test_shelik+0x508>)
 800257e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4403      	add	r3, r0
 800258a:	3308      	adds	r3, #8
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b2e4      	uxtb	r4, r4
 8002590:	4856      	ldr	r0, [pc, #344]	; (80026ec <test_shelik+0x50c>)
 8002592:	008a      	lsls	r2, r1, #2
 8002594:	4402      	add	r2, r0
 8002596:	4413      	add	r3, r2
 8002598:	4622      	mov	r2, r4
 800259a:	701a      	strb	r2, [r3, #0]
 800259c:	e06b      	b.n	8002676 <test_shelik+0x496>
				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 800259e:	4b56      	ldr	r3, [pc, #344]	; (80026f8 <test_shelik+0x518>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d00e      	beq.n	80025c6 <test_shelik+0x3e6>
 80025a8:	4b54      	ldr	r3, [pc, #336]	; (80026fc <test_shelik+0x51c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d009      	beq.n	80025c6 <test_shelik+0x3e6>
 80025b2:	4b53      	ldr	r3, [pc, #332]	; (8002700 <test_shelik+0x520>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d004      	beq.n	80025c6 <test_shelik+0x3e6>
 80025bc:	4b51      	ldr	r3, [pc, #324]	; (8002704 <test_shelik+0x524>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d129      	bne.n	800261a <test_shelik+0x43a>
					if(bul[i].player_id == 1){
 80025c6:	4948      	ldr	r1, [pc, #288]	; (80026e8 <test_shelik+0x508>)
 80025c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d10a      	bne.n	80025f0 <test_shelik+0x410>
						player2.health--;
 80025da:	4b4b      	ldr	r3, [pc, #300]	; (8002708 <test_shelik+0x528>)
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	3b01      	subs	r3, #1
 80025e0:	4a49      	ldr	r2, [pc, #292]	; (8002708 <test_shelik+0x528>)
 80025e2:	6153      	str	r3, [r2, #20]
						player1.points++;
 80025e4:	4b49      	ldr	r3, [pc, #292]	; (800270c <test_shelik+0x52c>)
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	3301      	adds	r3, #1
 80025ea:	4a48      	ldr	r2, [pc, #288]	; (800270c <test_shelik+0x52c>)
 80025ec:	6113      	str	r3, [r2, #16]
 80025ee:	e009      	b.n	8002604 <test_shelik+0x424>
					}
					else{
						player1.health--;
 80025f0:	4b46      	ldr	r3, [pc, #280]	; (800270c <test_shelik+0x52c>)
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	4a45      	ldr	r2, [pc, #276]	; (800270c <test_shelik+0x52c>)
 80025f8:	6153      	str	r3, [r2, #20]
						player2.points++;
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <test_shelik+0x528>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	3301      	adds	r3, #1
 8002600:	4a41      	ldr	r2, [pc, #260]	; (8002708 <test_shelik+0x528>)
 8002602:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002604:	4938      	ldr	r1, [pc, #224]	; (80026e8 <test_shelik+0x508>)
 8002606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3310      	adds	r3, #16
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
					continue;
 8002618:	e2a7      	b.n	8002b6a <test_shelik+0x98a>
				}
				else if(next_element == num_wall){
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <test_shelik+0x530>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	429a      	cmp	r2, r3
 8002622:	d10a      	bne.n	800263a <test_shelik+0x45a>
					bul[i].active = 0;
 8002624:	4930      	ldr	r1, [pc, #192]	; (80026e8 <test_shelik+0x508>)
 8002626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	3310      	adds	r3, #16
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
					continue;
 8002638:	e297      	b.n	8002b6a <test_shelik+0x98a>
				}
				else if(next_element == 0){
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d11a      	bne.n	8002676 <test_shelik+0x496>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <test_shelik+0x510>)
 8002642:	681c      	ldr	r4, [r3, #0]
 8002644:	4928      	ldr	r1, [pc, #160]	; (80026e8 <test_shelik+0x508>)
 8002646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	3304      	adds	r3, #4
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	4824      	ldr	r0, [pc, #144]	; (80026e8 <test_shelik+0x508>)
 8002658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4403      	add	r3, r0
 8002664:	3308      	adds	r3, #8
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	b2e4      	uxtb	r4, r4
 800266a:	4820      	ldr	r0, [pc, #128]	; (80026ec <test_shelik+0x50c>)
 800266c:	008a      	lsls	r2, r1, #2
 800266e:	4402      	add	r2, r0
 8002670:	4413      	add	r3, r2
 8002672:	4622      	mov	r2, r4
 8002674:	701a      	strb	r2, [r3, #0]

				}
				if(lcd[bul[i].position_x][bul[i].position_y+1] == num_arrow){
 8002676:	491c      	ldr	r1, [pc, #112]	; (80026e8 <test_shelik+0x508>)
 8002678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	3304      	adds	r3, #4
 8002686:	6819      	ldr	r1, [r3, #0]
 8002688:	4817      	ldr	r0, [pc, #92]	; (80026e8 <test_shelik+0x508>)
 800268a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4403      	add	r3, r0
 8002696:	3308      	adds	r3, #8
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	4813      	ldr	r0, [pc, #76]	; (80026ec <test_shelik+0x50c>)
 800269e:	008a      	lsls	r2, r1, #2
 80026a0:	4402      	add	r2, r0
 80026a2:	4413      	add	r3, r2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <test_shelik+0x510>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	f040 825c 	bne.w	8002b6a <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y+1] = 0;
 80026b2:	490d      	ldr	r1, [pc, #52]	; (80026e8 <test_shelik+0x508>)
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3304      	adds	r3, #4
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	4808      	ldr	r0, [pc, #32]	; (80026e8 <test_shelik+0x508>)
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4403      	add	r3, r0
 80026d2:	3308      	adds	r3, #8
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	4804      	ldr	r0, [pc, #16]	; (80026ec <test_shelik+0x50c>)
 80026da:	008a      	lsls	r2, r1, #2
 80026dc:	4402      	add	r2, r0
 80026de:	4413      	add	r3, r2
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e241      	b.n	8002b6a <test_shelik+0x98a>
 80026e6:	bf00      	nop
 80026e8:	20000710 	.word	0x20000710
 80026ec:	200006c0 	.word	0x200006c0
 80026f0:	200000a4 	.word	0x200000a4
 80026f4:	200000ac 	.word	0x200000ac
 80026f8:	20000094 	.word	0x20000094
 80026fc:	20000088 	.word	0x20000088
 8002700:	20000090 	.word	0x20000090
 8002704:	2000008c 	.word	0x2000008c
 8002708:	20000068 	.word	0x20000068
 800270c:	20000048 	.word	0x20000048
 8002710:	200000a8 	.word	0x200000a8
			}




			else if(bul[i].direction == 3){
 8002714:	4985      	ldr	r1, [pc, #532]	; (800292c <test_shelik+0x74c>)
 8002716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	330c      	adds	r3, #12
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b03      	cmp	r3, #3
 8002728:	f040 8116 	bne.w	8002958 <test_shelik+0x778>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 800272c:	497f      	ldr	r1, [pc, #508]	; (800292c <test_shelik+0x74c>)
 800272e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3304      	adds	r3, #4
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	487b      	ldr	r0, [pc, #492]	; (800292c <test_shelik+0x74c>)
 8002740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4403      	add	r3, r0
 800274c:	3308      	adds	r3, #8
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4877      	ldr	r0, [pc, #476]	; (8002930 <test_shelik+0x750>)
 8002752:	008a      	lsls	r2, r1, #2
 8002754:	4402      	add	r2, r0
 8002756:	4413      	add	r3, r2
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	4b75      	ldr	r3, [pc, #468]	; (8002934 <test_shelik+0x754>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d117      	bne.n	8002794 <test_shelik+0x5b4>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 8002764:	4971      	ldr	r1, [pc, #452]	; (800292c <test_shelik+0x74c>)
 8002766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3304      	adds	r3, #4
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	486d      	ldr	r0, [pc, #436]	; (800292c <test_shelik+0x74c>)
 8002778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4403      	add	r3, r0
 8002784:	3308      	adds	r3, #8
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4869      	ldr	r0, [pc, #420]	; (8002930 <test_shelik+0x750>)
 800278a:	008a      	lsls	r2, r1, #2
 800278c:	4402      	add	r2, r0
 800278e:	4413      	add	r3, r2
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
				}
				int new_x = bul[i].position_x + 1;
 8002794:	4965      	ldr	r1, [pc, #404]	; (800292c <test_shelik+0x74c>)
 8002796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	3304      	adds	r3, #4
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	61bb      	str	r3, [r7, #24]
				if(new_x < 24){
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b17      	cmp	r3, #23
 80027ae:	dc27      	bgt.n	8002800 <test_shelik+0x620>
					bul[i].position_x = new_x;
 80027b0:	495e      	ldr	r1, [pc, #376]	; (800292c <test_shelik+0x74c>)
 80027b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	3304      	adds	r3, #4
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 80027c4:	4959      	ldr	r1, [pc, #356]	; (800292c <test_shelik+0x74c>)
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	3304      	adds	r3, #4
 80027d4:	6819      	ldr	r1, [r3, #0]
 80027d6:	4855      	ldr	r0, [pc, #340]	; (800292c <test_shelik+0x74c>)
 80027d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4403      	add	r3, r0
 80027e4:	3308      	adds	r3, #8
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4851      	ldr	r0, [pc, #324]	; (8002930 <test_shelik+0x750>)
 80027ea:	008a      	lsls	r2, r1, #2
 80027ec:	4402      	add	r2, r0
 80027ee:	4413      	add	r3, r2
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	617b      	str	r3, [r7, #20]
				if(next_element == num_obstacle){
 80027f4:	4b50      	ldr	r3, [pc, #320]	; (8002938 <test_shelik+0x758>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d127      	bne.n	800284e <test_shelik+0x66e>
 80027fe:	e00a      	b.n	8002816 <test_shelik+0x636>
					bul[i].active = 0;
 8002800:	494a      	ldr	r1, [pc, #296]	; (800292c <test_shelik+0x74c>)
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	3310      	adds	r3, #16
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
					continue;
 8002814:	e1a9      	b.n	8002b6a <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <test_shelik+0x754>)
 8002818:	681c      	ldr	r4, [r3, #0]
 800281a:	4944      	ldr	r1, [pc, #272]	; (800292c <test_shelik+0x74c>)
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3304      	adds	r3, #4
 800282a:	6819      	ldr	r1, [r3, #0]
 800282c:	483f      	ldr	r0, [pc, #252]	; (800292c <test_shelik+0x74c>)
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4403      	add	r3, r0
 800283a:	3308      	adds	r3, #8
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b2e4      	uxtb	r4, r4
 8002840:	483b      	ldr	r0, [pc, #236]	; (8002930 <test_shelik+0x750>)
 8002842:	008a      	lsls	r2, r1, #2
 8002844:	4402      	add	r2, r0
 8002846:	4413      	add	r3, r2
 8002848:	4622      	mov	r2, r4
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e18d      	b.n	8002b6a <test_shelik+0x98a>
				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 800284e:	4b3b      	ldr	r3, [pc, #236]	; (800293c <test_shelik+0x75c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	d00e      	beq.n	8002876 <test_shelik+0x696>
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <test_shelik+0x760>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	429a      	cmp	r2, r3
 8002860:	d009      	beq.n	8002876 <test_shelik+0x696>
 8002862:	4b38      	ldr	r3, [pc, #224]	; (8002944 <test_shelik+0x764>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	429a      	cmp	r2, r3
 800286a:	d004      	beq.n	8002876 <test_shelik+0x696>
 800286c:	4b36      	ldr	r3, [pc, #216]	; (8002948 <test_shelik+0x768>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	429a      	cmp	r2, r3
 8002874:	d129      	bne.n	80028ca <test_shelik+0x6ea>
					if(bul[i].player_id == 1){
 8002876:	492d      	ldr	r1, [pc, #180]	; (800292c <test_shelik+0x74c>)
 8002878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d10a      	bne.n	80028a0 <test_shelik+0x6c0>
						player2.health--;
 800288a:	4b30      	ldr	r3, [pc, #192]	; (800294c <test_shelik+0x76c>)
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	3b01      	subs	r3, #1
 8002890:	4a2e      	ldr	r2, [pc, #184]	; (800294c <test_shelik+0x76c>)
 8002892:	6153      	str	r3, [r2, #20]
						player1.points++;
 8002894:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <test_shelik+0x770>)
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	3301      	adds	r3, #1
 800289a:	4a2d      	ldr	r2, [pc, #180]	; (8002950 <test_shelik+0x770>)
 800289c:	6113      	str	r3, [r2, #16]
 800289e:	e009      	b.n	80028b4 <test_shelik+0x6d4>
					}
					else{
						player1.health--;
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <test_shelik+0x770>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	4a2a      	ldr	r2, [pc, #168]	; (8002950 <test_shelik+0x770>)
 80028a8:	6153      	str	r3, [r2, #20]
						player2.points++;
 80028aa:	4b28      	ldr	r3, [pc, #160]	; (800294c <test_shelik+0x76c>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	3301      	adds	r3, #1
 80028b0:	4a26      	ldr	r2, [pc, #152]	; (800294c <test_shelik+0x76c>)
 80028b2:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 80028b4:	491d      	ldr	r1, [pc, #116]	; (800292c <test_shelik+0x74c>)
 80028b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3310      	adds	r3, #16
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
					continue;
 80028c8:	e14f      	b.n	8002b6a <test_shelik+0x98a>
				}
				else if(next_element == num_wall){
 80028ca:	4b22      	ldr	r3, [pc, #136]	; (8002954 <test_shelik+0x774>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d10a      	bne.n	80028ea <test_shelik+0x70a>
					bul[i].active = 0;
 80028d4:	4915      	ldr	r1, [pc, #84]	; (800292c <test_shelik+0x74c>)
 80028d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	3310      	adds	r3, #16
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
					continue;
 80028e8:	e13f      	b.n	8002b6a <test_shelik+0x98a>
				}
				else if(next_element == 0){
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f040 813c 	bne.w	8002b6a <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <test_shelik+0x754>)
 80028f4:	681c      	ldr	r4, [r3, #0]
 80028f6:	490d      	ldr	r1, [pc, #52]	; (800292c <test_shelik+0x74c>)
 80028f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3304      	adds	r3, #4
 8002906:	6819      	ldr	r1, [r3, #0]
 8002908:	4808      	ldr	r0, [pc, #32]	; (800292c <test_shelik+0x74c>)
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4403      	add	r3, r0
 8002916:	3308      	adds	r3, #8
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	b2e4      	uxtb	r4, r4
 800291c:	4804      	ldr	r0, [pc, #16]	; (8002930 <test_shelik+0x750>)
 800291e:	008a      	lsls	r2, r1, #2
 8002920:	4402      	add	r2, r0
 8002922:	4413      	add	r3, r2
 8002924:	4622      	mov	r2, r4
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	e11f      	b.n	8002b6a <test_shelik+0x98a>
 800292a:	bf00      	nop
 800292c:	20000710 	.word	0x20000710
 8002930:	200006c0 	.word	0x200006c0
 8002934:	200000a4 	.word	0x200000a4
 8002938:	200000ac 	.word	0x200000ac
 800293c:	20000094 	.word	0x20000094
 8002940:	20000088 	.word	0x20000088
 8002944:	20000090 	.word	0x20000090
 8002948:	2000008c 	.word	0x2000008c
 800294c:	20000068 	.word	0x20000068
 8002950:	20000048 	.word	0x20000048
 8002954:	200000a8 	.word	0x200000a8
			}




			else if(bul[i].direction == 4){
 8002958:	498a      	ldr	r1, [pc, #552]	; (8002b84 <test_shelik+0x9a4>)
 800295a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	330c      	adds	r3, #12
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b04      	cmp	r3, #4
 800296c:	f040 80fd 	bne.w	8002b6a <test_shelik+0x98a>
				if(lcd[bul[i].position_x][bul[i].position_y] == num_arrow){
 8002970:	4984      	ldr	r1, [pc, #528]	; (8002b84 <test_shelik+0x9a4>)
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	3304      	adds	r3, #4
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	4880      	ldr	r0, [pc, #512]	; (8002b84 <test_shelik+0x9a4>)
 8002984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4403      	add	r3, r0
 8002990:	3308      	adds	r3, #8
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	487c      	ldr	r0, [pc, #496]	; (8002b88 <test_shelik+0x9a8>)
 8002996:	008a      	lsls	r2, r1, #2
 8002998:	4402      	add	r2, r0
 800299a:	4413      	add	r3, r2
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	4b7a      	ldr	r3, [pc, #488]	; (8002b8c <test_shelik+0x9ac>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d117      	bne.n	80029d8 <test_shelik+0x7f8>
					lcd[bul[i].position_x][bul[i].position_y] = 0;
 80029a8:	4976      	ldr	r1, [pc, #472]	; (8002b84 <test_shelik+0x9a4>)
 80029aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3304      	adds	r3, #4
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	4872      	ldr	r0, [pc, #456]	; (8002b84 <test_shelik+0x9a4>)
 80029bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4403      	add	r3, r0
 80029c8:	3308      	adds	r3, #8
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	486e      	ldr	r0, [pc, #440]	; (8002b88 <test_shelik+0x9a8>)
 80029ce:	008a      	lsls	r2, r1, #2
 80029d0:	4402      	add	r2, r0
 80029d2:	4413      	add	r3, r2
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
				}
				int new_y = bul[i].position_y + 1;
 80029d8:	496a      	ldr	r1, [pc, #424]	; (8002b84 <test_shelik+0x9a4>)
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3308      	adds	r3, #8
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	623b      	str	r3, [r7, #32]
				if(new_y < 4){
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	dc27      	bgt.n	8002a44 <test_shelik+0x864>
					bul[i].position_y = new_y;
 80029f4:	4963      	ldr	r1, [pc, #396]	; (8002b84 <test_shelik+0x9a4>)
 80029f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	3308      	adds	r3, #8
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	601a      	str	r2, [r3, #0]
				}
				else{
					bul[i].active = 0;
					continue;
				}
				int next_element = lcd[bul[i].position_x][bul[i].position_y];
 8002a08:	495e      	ldr	r1, [pc, #376]	; (8002b84 <test_shelik+0x9a4>)
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	3304      	adds	r3, #4
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	485a      	ldr	r0, [pc, #360]	; (8002b84 <test_shelik+0x9a4>)
 8002a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4403      	add	r3, r0
 8002a28:	3308      	adds	r3, #8
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4856      	ldr	r0, [pc, #344]	; (8002b88 <test_shelik+0x9a8>)
 8002a2e:	008a      	lsls	r2, r1, #2
 8002a30:	4402      	add	r2, r0
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	61fb      	str	r3, [r7, #28]
				if(next_element == num_obstacle){
 8002a38:	4b55      	ldr	r3, [pc, #340]	; (8002b90 <test_shelik+0x9b0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d127      	bne.n	8002a92 <test_shelik+0x8b2>
 8002a42:	e00a      	b.n	8002a5a <test_shelik+0x87a>
					bul[i].active = 0;
 8002a44:	494f      	ldr	r1, [pc, #316]	; (8002b84 <test_shelik+0x9a4>)
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3310      	adds	r3, #16
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
					continue;
 8002a58:	e087      	b.n	8002b6a <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002a5a:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <test_shelik+0x9ac>)
 8002a5c:	681c      	ldr	r4, [r3, #0]
 8002a5e:	4949      	ldr	r1, [pc, #292]	; (8002b84 <test_shelik+0x9a4>)
 8002a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	6819      	ldr	r1, [r3, #0]
 8002a70:	4844      	ldr	r0, [pc, #272]	; (8002b84 <test_shelik+0x9a4>)
 8002a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4403      	add	r3, r0
 8002a7e:	3308      	adds	r3, #8
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	b2e4      	uxtb	r4, r4
 8002a84:	4840      	ldr	r0, [pc, #256]	; (8002b88 <test_shelik+0x9a8>)
 8002a86:	008a      	lsls	r2, r1, #2
 8002a88:	4402      	add	r2, r0
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4622      	mov	r2, r4
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e06b      	b.n	8002b6a <test_shelik+0x98a>

				}
				else if(next_element == num_tank_down || next_element == num_tank_left || next_element == num_tank_right || next_element == num_tank_up){
 8002a92:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <test_shelik+0x9b4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d00e      	beq.n	8002aba <test_shelik+0x8da>
 8002a9c:	4b3e      	ldr	r3, [pc, #248]	; (8002b98 <test_shelik+0x9b8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d009      	beq.n	8002aba <test_shelik+0x8da>
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <test_shelik+0x9bc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d004      	beq.n	8002aba <test_shelik+0x8da>
 8002ab0:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <test_shelik+0x9c0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d129      	bne.n	8002b0e <test_shelik+0x92e>
					if(bul[i].player_id == 1){
 8002aba:	4932      	ldr	r1, [pc, #200]	; (8002b84 <test_shelik+0x9a4>)
 8002abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10a      	bne.n	8002ae4 <test_shelik+0x904>
						player2.health--;
 8002ace:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <test_shelik+0x9c4>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	4a33      	ldr	r2, [pc, #204]	; (8002ba4 <test_shelik+0x9c4>)
 8002ad6:	6153      	str	r3, [r2, #20]
						player1.points++;
 8002ad8:	4b33      	ldr	r3, [pc, #204]	; (8002ba8 <test_shelik+0x9c8>)
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	3301      	adds	r3, #1
 8002ade:	4a32      	ldr	r2, [pc, #200]	; (8002ba8 <test_shelik+0x9c8>)
 8002ae0:	6113      	str	r3, [r2, #16]
 8002ae2:	e009      	b.n	8002af8 <test_shelik+0x918>
					}
					else{
						player1.health--;
 8002ae4:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <test_shelik+0x9c8>)
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	4a2f      	ldr	r2, [pc, #188]	; (8002ba8 <test_shelik+0x9c8>)
 8002aec:	6153      	str	r3, [r2, #20]
						player2.points++;
 8002aee:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <test_shelik+0x9c4>)
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	3301      	adds	r3, #1
 8002af4:	4a2b      	ldr	r2, [pc, #172]	; (8002ba4 <test_shelik+0x9c4>)
 8002af6:	6113      	str	r3, [r2, #16]
					}
					bul[i].active = 0;
 8002af8:	4922      	ldr	r1, [pc, #136]	; (8002b84 <test_shelik+0x9a4>)
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	3310      	adds	r3, #16
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
					continue;
 8002b0c:	e02d      	b.n	8002b6a <test_shelik+0x98a>
				}

				else if(next_element == num_wall){
 8002b0e:	4b27      	ldr	r3, [pc, #156]	; (8002bac <test_shelik+0x9cc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d10a      	bne.n	8002b2e <test_shelik+0x94e>
					bul[i].active = 0;
 8002b18:	491a      	ldr	r1, [pc, #104]	; (8002b84 <test_shelik+0x9a4>)
 8002b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3310      	adds	r3, #16
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
					continue;
 8002b2c:	e01d      	b.n	8002b6a <test_shelik+0x98a>
				}
				else if(next_element == 0){
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d11a      	bne.n	8002b6a <test_shelik+0x98a>
					lcd[bul[i].position_x][bul[i].position_y] = num_arrow;
 8002b34:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <test_shelik+0x9ac>)
 8002b36:	681c      	ldr	r4, [r3, #0]
 8002b38:	4912      	ldr	r1, [pc, #72]	; (8002b84 <test_shelik+0x9a4>)
 8002b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3304      	adds	r3, #4
 8002b48:	6819      	ldr	r1, [r3, #0]
 8002b4a:	480e      	ldr	r0, [pc, #56]	; (8002b84 <test_shelik+0x9a4>)
 8002b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4403      	add	r3, r0
 8002b58:	3308      	adds	r3, #8
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	b2e4      	uxtb	r4, r4
 8002b5e:	480a      	ldr	r0, [pc, #40]	; (8002b88 <test_shelik+0x9a8>)
 8002b60:	008a      	lsls	r2, r1, #2
 8002b62:	4402      	add	r2, r0
 8002b64:	4413      	add	r3, r2
 8002b66:	4622      	mov	r2, r4
 8002b68:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<10;i++){
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	2b09      	cmp	r3, #9
 8002b74:	f77f ab3b 	ble.w	80021ee <test_shelik+0xe>


			}
		}
	}
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	372c      	adds	r7, #44	; 0x2c
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000710 	.word	0x20000710
 8002b88:	200006c0 	.word	0x200006c0
 8002b8c:	200000a4 	.word	0x200000a4
 8002b90:	200000ac 	.word	0x200000ac
 8002b94:	20000094 	.word	0x20000094
 8002b98:	20000088 	.word	0x20000088
 8002b9c:	20000090 	.word	0x20000090
 8002ba0:	2000008c 	.word	0x2000008c
 8002ba4:	20000068 	.word	0x20000068
 8002ba8:	20000048 	.word	0x20000048
 8002bac:	200000a8 	.word	0x200000a8

08002bb0 <endgame>:
void endgame(){
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
	if(player1.points > player2.points){

	}
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <move>:


void move(int player){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b094      	sub	sp, #80	; 0x50
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	int dir;

	if (player == 1){
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	f040 8148 	bne.w	8002e60 <move+0x2a0>
		dir = player1.direction;
 8002bd0:	4b9f      	ldr	r3, [pc, #636]	; (8002e50 <move+0x290>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 8002bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d14b      	bne.n	8002c74 <move+0xb4>
			int curr_col = player1.position_x;
 8002bdc:	4b9c      	ldr	r3, [pc, #624]	; (8002e50 <move+0x290>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]
			int curr_row = player1.position_y;
 8002be2:	4b9b      	ldr	r3, [pc, #620]	; (8002e50 <move+0x290>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	60fb      	str	r3, [r7, #12]
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f340 8275 	ble.w	80030da <move+0x51a>
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	4a97      	ldr	r2, [pc, #604]	; (8002e54 <move+0x294>)
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	441a      	add	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b95      	ldr	r3, [pc, #596]	; (8002e58 <move+0x298>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	f000 8267 	beq.w	80030da <move+0x51a>
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	4a90      	ldr	r2, [pc, #576]	; (8002e54 <move+0x294>)
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	441a      	add	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4413      	add	r3, r2
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b8f      	ldr	r3, [pc, #572]	; (8002e5c <move+0x29c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	f000 8259 	beq.w	80030da <move+0x51a>
				collect(lcd[curr_col - 1][curr_row], 1); //TODO add prizes
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	4a89      	ldr	r2, [pc, #548]	; (8002e54 <move+0x294>)
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	441a      	add	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4413      	add	r3, r2
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fa78 	bl	8002130 <collect>
				lcd[curr_col][curr_row] = 0;
 8002c40:	4a84      	ldr	r2, [pc, #528]	; (8002e54 <move+0x294>)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	441a      	add	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player1.direction;
 8002c50:	4b7f      	ldr	r3, [pc, #508]	; (8002e50 <move+0x290>)
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b2d1      	uxtb	r1, r2
 8002c5a:	4a7e      	ldr	r2, [pc, #504]	; (8002e54 <move+0x294>)
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	441a      	add	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	460a      	mov	r2, r1
 8002c66:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x - 1;
 8002c68:	4b79      	ldr	r3, [pc, #484]	; (8002e50 <move+0x290>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	4a78      	ldr	r2, [pc, #480]	; (8002e50 <move+0x290>)
 8002c70:	6053      	str	r3, [r2, #4]
				lcd[curr_col][curr_row + 1] = player2.direction;
				player2.position_y = player2.position_y + 1;
			}
		}
	}
}
 8002c72:	e232      	b.n	80030da <move+0x51a>
		}else if (dir == 2){
 8002c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d14b      	bne.n	8002d12 <move+0x152>
			int curr_col = player1.position_x;
 8002c7a:	4b75      	ldr	r3, [pc, #468]	; (8002e50 <move+0x290>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	61bb      	str	r3, [r7, #24]
			int curr_row = player1.position_y;
 8002c80:	4b73      	ldr	r3, [pc, #460]	; (8002e50 <move+0x290>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	617b      	str	r3, [r7, #20]
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f340 8226 	ble.w	80030da <move+0x51a>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	4970      	ldr	r1, [pc, #448]	; (8002e54 <move+0x294>)
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	0092      	lsls	r2, r2, #2
 8002c98:	440a      	add	r2, r1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <move+0x298>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f000 8218 	beq.w	80030da <move+0x51a>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	4969      	ldr	r1, [pc, #420]	; (8002e54 <move+0x294>)
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	440a      	add	r2, r1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b67      	ldr	r3, [pc, #412]	; (8002e5c <move+0x29c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	f000 820a 	beq.w	80030da <move+0x51a>
				collect(lcd[curr_col][curr_row - 1], 1); //TODO add prizes
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	4962      	ldr	r1, [pc, #392]	; (8002e54 <move+0x294>)
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	0092      	lsls	r2, r2, #2
 8002cd0:	440a      	add	r2, r1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fa29 	bl	8002130 <collect>
				lcd[curr_col][curr_row] = 0;
 8002cde:	4a5d      	ldr	r2, [pc, #372]	; (8002e54 <move+0x294>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	4413      	add	r3, r2
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player1.direction;
 8002cee:	4b58      	ldr	r3, [pc, #352]	; (8002e50 <move+0x290>)
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b2d0      	uxtb	r0, r2
 8002cf8:	4956      	ldr	r1, [pc, #344]	; (8002e54 <move+0x294>)
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	0092      	lsls	r2, r2, #2
 8002cfe:	440a      	add	r2, r1
 8002d00:	4413      	add	r3, r2
 8002d02:	4602      	mov	r2, r0
 8002d04:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y - 1;
 8002d06:	4b52      	ldr	r3, [pc, #328]	; (8002e50 <move+0x290>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	4a50      	ldr	r2, [pc, #320]	; (8002e50 <move+0x290>)
 8002d0e:	6093      	str	r3, [r2, #8]
}
 8002d10:	e1e3      	b.n	80030da <move+0x51a>
		}else if (dir == 3){
 8002d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d14b      	bne.n	8002db0 <move+0x1f0>
			int curr_col = player1.position_x;
 8002d18:	4b4d      	ldr	r3, [pc, #308]	; (8002e50 <move+0x290>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	623b      	str	r3, [r7, #32]
			int curr_row = player1.position_y;
 8002d1e:	4b4c      	ldr	r3, [pc, #304]	; (8002e50 <move+0x290>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	61fb      	str	r3, [r7, #28]
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	2b12      	cmp	r3, #18
 8002d28:	f300 81d7 	bgt.w	80030da <move+0x51a>
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	4a48      	ldr	r2, [pc, #288]	; (8002e54 <move+0x294>)
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	441a      	add	r2, r3
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b46      	ldr	r3, [pc, #280]	; (8002e58 <move+0x298>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	f000 81c9 	beq.w	80030da <move+0x51a>
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	4a41      	ldr	r2, [pc, #260]	; (8002e54 <move+0x294>)
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	441a      	add	r2, r3
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b40      	ldr	r3, [pc, #256]	; (8002e5c <move+0x29c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	f000 81bb 	beq.w	80030da <move+0x51a>
				collect(lcd[curr_col + 1][curr_row], 1); //TODO add prizes
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	3301      	adds	r3, #1
 8002d68:	4a3a      	ldr	r2, [pc, #232]	; (8002e54 <move+0x294>)
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	441a      	add	r2, r3
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	4413      	add	r3, r2
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f9da 	bl	8002130 <collect>
				lcd[curr_col][curr_row] = 0;
 8002d7c:	4a35      	ldr	r2, [pc, #212]	; (8002e54 <move+0x294>)
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	441a      	add	r2, r3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	4413      	add	r3, r2
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player1.direction;
 8002d8c:	4b30      	ldr	r3, [pc, #192]	; (8002e50 <move+0x290>)
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	3301      	adds	r3, #1
 8002d94:	b2d1      	uxtb	r1, r2
 8002d96:	4a2f      	ldr	r2, [pc, #188]	; (8002e54 <move+0x294>)
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	441a      	add	r2, r3
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	460a      	mov	r2, r1
 8002da2:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x + 1;
 8002da4:	4b2a      	ldr	r3, [pc, #168]	; (8002e50 <move+0x290>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	3301      	adds	r3, #1
 8002daa:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <move+0x290>)
 8002dac:	6053      	str	r3, [r2, #4]
}
 8002dae:	e194      	b.n	80030da <move+0x51a>
		}else if (dir == 4){
 8002db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	f040 8191 	bne.w	80030da <move+0x51a>
			int curr_col = player1.position_x;
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <move+0x290>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
			int curr_row = player1.position_y;
 8002dbe:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <move+0x290>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	f300 8187 	bgt.w	80030da <move+0x51a>
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	3301      	adds	r3, #1
 8002dd0:	4920      	ldr	r1, [pc, #128]	; (8002e54 <move+0x294>)
 8002dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dd4:	0092      	lsls	r2, r2, #2
 8002dd6:	440a      	add	r2, r1
 8002dd8:	4413      	add	r3, r2
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <move+0x298>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	f000 8179 	beq.w	80030da <move+0x51a>
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	3301      	adds	r3, #1
 8002dec:	4919      	ldr	r1, [pc, #100]	; (8002e54 <move+0x294>)
 8002dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002df0:	0092      	lsls	r2, r2, #2
 8002df2:	440a      	add	r2, r1
 8002df4:	4413      	add	r3, r2
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <move+0x29c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	f000 816b 	beq.w	80030da <move+0x51a>
				collect(lcd[curr_col][curr_row + 1], 1); //TODO add prizes
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	3301      	adds	r3, #1
 8002e08:	4912      	ldr	r1, [pc, #72]	; (8002e54 <move+0x294>)
 8002e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e0c:	0092      	lsls	r2, r2, #2
 8002e0e:	440a      	add	r2, r1
 8002e10:	4413      	add	r3, r2
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff f98a 	bl	8002130 <collect>
				lcd[curr_col][curr_row] = 0;
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	; (8002e54 <move+0x294>)
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	441a      	add	r2, r3
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	4413      	add	r3, r2
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player1.direction;
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <move+0x290>)
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	3301      	adds	r3, #1
 8002e34:	b2d0      	uxtb	r0, r2
 8002e36:	4907      	ldr	r1, [pc, #28]	; (8002e54 <move+0x294>)
 8002e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e3a:	0092      	lsls	r2, r2, #2
 8002e3c:	440a      	add	r2, r1
 8002e3e:	4413      	add	r3, r2
 8002e40:	4602      	mov	r2, r0
 8002e42:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y + 1;
 8002e44:	4b02      	ldr	r3, [pc, #8]	; (8002e50 <move+0x290>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	4a01      	ldr	r2, [pc, #4]	; (8002e50 <move+0x290>)
 8002e4c:	6093      	str	r3, [r2, #8]
}
 8002e4e:	e144      	b.n	80030da <move+0x51a>
 8002e50:	20000048 	.word	0x20000048
 8002e54:	200006c0 	.word	0x200006c0
 8002e58:	200000ac 	.word	0x200000ac
 8002e5c:	200000a8 	.word	0x200000a8
	}else if (player == 2){
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	f040 8139 	bne.w	80030da <move+0x51a>
		dir = player2.direction;
 8002e68:	4b9e      	ldr	r3, [pc, #632]	; (80030e4 <move+0x524>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 8002e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d14b      	bne.n	8002f0c <move+0x34c>
			int curr_col = player2.position_x;
 8002e74:	4b9b      	ldr	r3, [pc, #620]	; (80030e4 <move+0x524>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	633b      	str	r3, [r7, #48]	; 0x30
			int curr_row = player2.position_y;
 8002e7a:	4b9a      	ldr	r3, [pc, #616]	; (80030e4 <move+0x524>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f340 8129 	ble.w	80030da <move+0x51a>
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	4a96      	ldr	r2, [pc, #600]	; (80030e8 <move+0x528>)
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	441a      	add	r2, r3
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	4413      	add	r3, r2
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b94      	ldr	r3, [pc, #592]	; (80030ec <move+0x52c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	f000 811b 	beq.w	80030da <move+0x51a>
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	4a8f      	ldr	r2, [pc, #572]	; (80030e8 <move+0x528>)
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	441a      	add	r2, r3
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	4413      	add	r3, r2
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b8e      	ldr	r3, [pc, #568]	; (80030f0 <move+0x530>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	f000 810d 	beq.w	80030da <move+0x51a>
				collect(lcd[curr_col - 1][curr_row], 2); //TODO add prizes
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	4a88      	ldr	r2, [pc, #544]	; (80030e8 <move+0x528>)
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	441a      	add	r2, r3
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	4413      	add	r3, r2
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f92c 	bl	8002130 <collect>
				lcd[curr_col][curr_row] = 0;
 8002ed8:	4a83      	ldr	r2, [pc, #524]	; (80030e8 <move+0x528>)
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	441a      	add	r2, r3
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	4413      	add	r3, r2
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player2.direction;
 8002ee8:	4b7e      	ldr	r3, [pc, #504]	; (80030e4 <move+0x524>)
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b2d1      	uxtb	r1, r2
 8002ef2:	4a7d      	ldr	r2, [pc, #500]	; (80030e8 <move+0x528>)
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	441a      	add	r2, r3
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	4413      	add	r3, r2
 8002efc:	460a      	mov	r2, r1
 8002efe:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x - 1;
 8002f00:	4b78      	ldr	r3, [pc, #480]	; (80030e4 <move+0x524>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	4a77      	ldr	r2, [pc, #476]	; (80030e4 <move+0x524>)
 8002f08:	6053      	str	r3, [r2, #4]
}
 8002f0a:	e0e6      	b.n	80030da <move+0x51a>
		}else if (dir == 2){
 8002f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d14b      	bne.n	8002faa <move+0x3ea>
			int curr_col = player2.position_x;
 8002f12:	4b74      	ldr	r3, [pc, #464]	; (80030e4 <move+0x524>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	63bb      	str	r3, [r7, #56]	; 0x38
			int curr_row = player2.position_y;
 8002f18:	4b72      	ldr	r3, [pc, #456]	; (80030e4 <move+0x524>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 8002f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f340 80da 	ble.w	80030da <move+0x51a>
 8002f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	496f      	ldr	r1, [pc, #444]	; (80030e8 <move+0x528>)
 8002f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f2e:	0092      	lsls	r2, r2, #2
 8002f30:	440a      	add	r2, r1
 8002f32:	4413      	add	r3, r2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <move+0x52c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	f000 80cc 	beq.w	80030da <move+0x51a>
 8002f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f44:	3b01      	subs	r3, #1
 8002f46:	4968      	ldr	r1, [pc, #416]	; (80030e8 <move+0x528>)
 8002f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	440a      	add	r2, r1
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	4b66      	ldr	r3, [pc, #408]	; (80030f0 <move+0x530>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	f000 80be 	beq.w	80030da <move+0x51a>
				collect(lcd[curr_col][curr_row - 1], 2); //TODO add prizes
 8002f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f60:	3b01      	subs	r3, #1
 8002f62:	4961      	ldr	r1, [pc, #388]	; (80030e8 <move+0x528>)
 8002f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f66:	0092      	lsls	r2, r2, #2
 8002f68:	440a      	add	r2, r1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2102      	movs	r1, #2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff f8dd 	bl	8002130 <collect>
				lcd[curr_col][curr_row] = 0;
 8002f76:	4a5c      	ldr	r2, [pc, #368]	; (80030e8 <move+0x528>)
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	441a      	add	r2, r3
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f80:	4413      	add	r3, r2
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player2.direction;
 8002f86:	4b57      	ldr	r3, [pc, #348]	; (80030e4 <move+0x524>)
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b2d0      	uxtb	r0, r2
 8002f90:	4955      	ldr	r1, [pc, #340]	; (80030e8 <move+0x528>)
 8002f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f94:	0092      	lsls	r2, r2, #2
 8002f96:	440a      	add	r2, r1
 8002f98:	4413      	add	r3, r2
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y - 1;
 8002f9e:	4b51      	ldr	r3, [pc, #324]	; (80030e4 <move+0x524>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	4a4f      	ldr	r2, [pc, #316]	; (80030e4 <move+0x524>)
 8002fa6:	6093      	str	r3, [r2, #8]
}
 8002fa8:	e097      	b.n	80030da <move+0x51a>
		}else if (dir == 3){
 8002faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d149      	bne.n	8003044 <move+0x484>
			int curr_col = player2.position_x;
 8002fb0:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <move+0x524>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	643b      	str	r3, [r7, #64]	; 0x40
			int curr_row = player2.position_y;
 8002fb6:	4b4b      	ldr	r3, [pc, #300]	; (80030e4 <move+0x524>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 8002fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fbe:	2b12      	cmp	r3, #18
 8002fc0:	f300 808b 	bgt.w	80030da <move+0x51a>
 8002fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	4a47      	ldr	r2, [pc, #284]	; (80030e8 <move+0x528>)
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	441a      	add	r2, r3
 8002fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd0:	4413      	add	r3, r2
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b45      	ldr	r3, [pc, #276]	; (80030ec <move+0x52c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d07d      	beq.n	80030da <move+0x51a>
 8002fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	4a41      	ldr	r2, [pc, #260]	; (80030e8 <move+0x528>)
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	441a      	add	r2, r3
 8002fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fea:	4413      	add	r3, r2
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <move+0x530>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d070      	beq.n	80030da <move+0x51a>
				collect(lcd[curr_col + 1][curr_row], 2); //TODO add prizes
 8002ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	4a3a      	ldr	r2, [pc, #232]	; (80030e8 <move+0x528>)
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003004:	4413      	add	r3, r2
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2102      	movs	r1, #2
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff f890 	bl	8002130 <collect>
				lcd[curr_col][curr_row] = 0;
 8003010:	4a35      	ldr	r2, [pc, #212]	; (80030e8 <move+0x528>)
 8003012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	441a      	add	r2, r3
 8003018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301a:	4413      	add	r3, r2
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player2.direction;
 8003020:	4b30      	ldr	r3, [pc, #192]	; (80030e4 <move+0x524>)
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003026:	3301      	adds	r3, #1
 8003028:	b2d1      	uxtb	r1, r2
 800302a:	4a2f      	ldr	r2, [pc, #188]	; (80030e8 <move+0x528>)
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	441a      	add	r2, r3
 8003030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003032:	4413      	add	r3, r2
 8003034:	460a      	mov	r2, r1
 8003036:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x + 1;
 8003038:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <move+0x524>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	3301      	adds	r3, #1
 800303e:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <move+0x524>)
 8003040:	6053      	str	r3, [r2, #4]
}
 8003042:	e04a      	b.n	80030da <move+0x51a>
		}else if (dir == 4){
 8003044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003046:	2b04      	cmp	r3, #4
 8003048:	d147      	bne.n	80030da <move+0x51a>
			int curr_col = player2.position_x;
 800304a:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <move+0x524>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	64bb      	str	r3, [r7, #72]	; 0x48
			int curr_row = player2.position_y;
 8003050:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <move+0x524>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	647b      	str	r3, [r7, #68]	; 0x44
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 8003056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003058:	2b02      	cmp	r3, #2
 800305a:	dc3e      	bgt.n	80030da <move+0x51a>
 800305c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305e:	3301      	adds	r3, #1
 8003060:	4921      	ldr	r1, [pc, #132]	; (80030e8 <move+0x528>)
 8003062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	440a      	add	r2, r1
 8003068:	4413      	add	r3, r2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b1f      	ldr	r3, [pc, #124]	; (80030ec <move+0x52c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d031      	beq.n	80030da <move+0x51a>
 8003076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003078:	3301      	adds	r3, #1
 800307a:	491b      	ldr	r1, [pc, #108]	; (80030e8 <move+0x528>)
 800307c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	440a      	add	r2, r1
 8003082:	4413      	add	r3, r2
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <move+0x530>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d024      	beq.n	80030da <move+0x51a>
				collect(lcd[curr_col][curr_row + 1], 2); //TODO add prizes
 8003090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003092:	3301      	adds	r3, #1
 8003094:	4914      	ldr	r1, [pc, #80]	; (80030e8 <move+0x528>)
 8003096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	440a      	add	r2, r1
 800309c:	4413      	add	r3, r2
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2102      	movs	r1, #2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff f844 	bl	8002130 <collect>
				lcd[curr_col][curr_row] = 0;
 80030a8:	4a0f      	ldr	r2, [pc, #60]	; (80030e8 <move+0x528>)
 80030aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	441a      	add	r2, r3
 80030b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b2:	4413      	add	r3, r2
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player2.direction;
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <move+0x524>)
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030be:	3301      	adds	r3, #1
 80030c0:	b2d0      	uxtb	r0, r2
 80030c2:	4909      	ldr	r1, [pc, #36]	; (80030e8 <move+0x528>)
 80030c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030c6:	0092      	lsls	r2, r2, #2
 80030c8:	440a      	add	r2, r1
 80030ca:	4413      	add	r3, r2
 80030cc:	4602      	mov	r2, r0
 80030ce:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y + 1;
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <move+0x524>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	3301      	adds	r3, #1
 80030d6:	4a03      	ldr	r2, [pc, #12]	; (80030e4 <move+0x524>)
 80030d8:	6093      	str	r3, [r2, #8]
}
 80030da:	bf00      	nop
 80030dc:	3750      	adds	r7, #80	; 0x50
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000068 	.word	0x20000068
 80030e8:	200006c0 	.word	0x200006c0
 80030ec:	200000ac 	.word	0x200000ac
 80030f0:	200000a8 	.word	0x200000a8

080030f4 <uart_rx_enable_it>:
char character;
char input[50];
int  index_arr = 0;
extern UART_HandleTypeDef huart1;

void uart_rx_enable_it(void) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &character, 1);
 80030f8:	2201      	movs	r2, #1
 80030fa:	4903      	ldr	r1, [pc, #12]	; (8003108 <uart_rx_enable_it+0x14>)
 80030fc:	4803      	ldr	r0, [pc, #12]	; (800310c <uart_rx_enable_it+0x18>)
 80030fe:	f003 fe0d 	bl	8006d1c <HAL_UART_Receive_IT>
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	200007dc 	.word	0x200007dc
 800310c:	20000324 	.word	0x20000324

08003110 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003110:	b580      	push	{r7, lr}
 8003112:	b09c      	sub	sp, #112	; 0x70
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	char data[100];

    if (huart->Instance == USART1){
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a13      	ldr	r2, [pc, #76]	; (800316c <HAL_UART_RxCpltCallback+0x5c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d11f      	bne.n	8003162 <HAL_UART_RxCpltCallback+0x52>
    	if(character != 10){
 8003122:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_UART_RxCpltCallback+0x60>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b0a      	cmp	r3, #10
 8003128:	d009      	beq.n	800313e <HAL_UART_RxCpltCallback+0x2e>
    		input[index_arr++] = character;
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_UART_RxCpltCallback+0x64>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	4910      	ldr	r1, [pc, #64]	; (8003174 <HAL_UART_RxCpltCallback+0x64>)
 8003132:	600a      	str	r2, [r1, #0]
 8003134:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <HAL_UART_RxCpltCallback+0x60>)
 8003136:	7811      	ldrb	r1, [r2, #0]
 8003138:	4a0f      	ldr	r2, [pc, #60]	; (8003178 <HAL_UART_RxCpltCallback+0x68>)
 800313a:	54d1      	strb	r1, [r2, r3]
 800313c:	e00f      	b.n	800315e <HAL_UART_RxCpltCallback+0x4e>
    	}else{
			input[index_arr++] = '\0';
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_UART_RxCpltCallback+0x64>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	490b      	ldr	r1, [pc, #44]	; (8003174 <HAL_UART_RxCpltCallback+0x64>)
 8003146:	600a      	str	r2, [r1, #0]
 8003148:	4a0b      	ldr	r2, [pc, #44]	; (8003178 <HAL_UART_RxCpltCallback+0x68>)
 800314a:	2100      	movs	r1, #0
 800314c:	54d1      	strb	r1, [r2, r3]
			index_arr = 0;
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_UART_RxCpltCallback+0x64>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
			int value;
			HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8003154:	2200      	movs	r2, #0
 8003156:	4909      	ldr	r1, [pc, #36]	; (800317c <HAL_UART_RxCpltCallback+0x6c>)
 8003158:	4809      	ldr	r0, [pc, #36]	; (8003180 <HAL_UART_RxCpltCallback+0x70>)
 800315a:	f002 fe5e 	bl	8005e1a <HAL_RTC_GetTime>
//			sprintf(timeStr, "%02d:%02d:%02d", mytime.Hours, mytime.Minutes, mytime.Seconds);
		}
		uart_rx_enable_it();
 800315e:	f7ff ffc9 	bl	80030f4 <uart_rx_enable_it>
    }
}
 8003162:	bf00      	nop
 8003164:	3770      	adds	r7, #112	; 0x70
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40013800 	.word	0x40013800
 8003170:	200007dc 	.word	0x200007dc
 8003174:	20000814 	.word	0x20000814
 8003178:	200007e0 	.word	0x200007e0
 800317c:	200006a8 	.word	0x200006a8
 8003180:	20000208 	.word	0x20000208

08003184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <HAL_MspInit+0x44>)
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <HAL_MspInit+0x44>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6193      	str	r3, [r2, #24]
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_MspInit+0x44>)
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_MspInit+0x44>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <HAL_MspInit+0x44>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	61d3      	str	r3, [r2, #28]
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_MspInit+0x44>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031ba:	2007      	movs	r0, #7
 80031bc:	f000 fc60 	bl	8003a80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000

080031cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d4:	f107 0314 	add.w	r3, r7, #20
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a17      	ldr	r2, [pc, #92]	; (8003248 <HAL_I2C_MspInit+0x7c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d127      	bne.n	800323e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ee:	4b17      	ldr	r3, [pc, #92]	; (800324c <HAL_I2C_MspInit+0x80>)
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	4a16      	ldr	r2, [pc, #88]	; (800324c <HAL_I2C_MspInit+0x80>)
 80031f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f8:	6153      	str	r3, [r2, #20]
 80031fa:	4b14      	ldr	r3, [pc, #80]	; (800324c <HAL_I2C_MspInit+0x80>)
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8003206:	23c0      	movs	r3, #192	; 0xc0
 8003208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800320a:	2312      	movs	r3, #18
 800320c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800320e:	2301      	movs	r3, #1
 8003210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003212:	2303      	movs	r3, #3
 8003214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003216:	2304      	movs	r3, #4
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800321a:	f107 0314 	add.w	r3, r7, #20
 800321e:	4619      	mov	r1, r3
 8003220:	480b      	ldr	r0, [pc, #44]	; (8003250 <HAL_I2C_MspInit+0x84>)
 8003222:	f000 fce5 	bl	8003bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_I2C_MspInit+0x80>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <HAL_I2C_MspInit+0x80>)
 800322c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003230:	61d3      	str	r3, [r2, #28]
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_I2C_MspInit+0x80>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800323e:	bf00      	nop
 8003240:	3728      	adds	r7, #40	; 0x28
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40005400 	.word	0x40005400
 800324c:	40021000 	.word	0x40021000
 8003250:	48000400 	.word	0x48000400

08003254 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <HAL_RTC_MspInit+0x44>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d111      	bne.n	800328a <HAL_RTC_MspInit+0x36>
 8003266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800326a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003274:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <HAL_RTC_MspInit+0x48>)
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	461a      	mov	r2, r3
 8003286:	2301      	movs	r3, #1
 8003288:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40002800 	.word	0x40002800
 800329c:	10908100 	.word	0x10908100

080032a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a17      	ldr	r2, [pc, #92]	; (800331c <HAL_SPI_MspInit+0x7c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d128      	bne.n	8003314 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032c2:	4b17      	ldr	r3, [pc, #92]	; (8003320 <HAL_SPI_MspInit+0x80>)
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	4a16      	ldr	r2, [pc, #88]	; (8003320 <HAL_SPI_MspInit+0x80>)
 80032c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032cc:	6193      	str	r3, [r2, #24]
 80032ce:	4b14      	ldr	r3, [pc, #80]	; (8003320 <HAL_SPI_MspInit+0x80>)
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <HAL_SPI_MspInit+0x80>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4a10      	ldr	r2, [pc, #64]	; (8003320 <HAL_SPI_MspInit+0x80>)
 80032e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e4:	6153      	str	r3, [r2, #20]
 80032e6:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <HAL_SPI_MspInit+0x80>)
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80032f2:	23e0      	movs	r3, #224	; 0xe0
 80032f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f6:	2302      	movs	r3, #2
 80032f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032fe:	2303      	movs	r3, #3
 8003300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003302:	2305      	movs	r3, #5
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003306:	f107 0314 	add.w	r3, r7, #20
 800330a:	4619      	mov	r1, r3
 800330c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003310:	f000 fc6e 	bl	8003bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003314:	bf00      	nop
 8003316:	3728      	adds	r7, #40	; 0x28
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40013000 	.word	0x40013000
 8003320:	40021000 	.word	0x40021000

08003324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003334:	d114      	bne.n	8003360 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003336:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_TIM_Base_MspInit+0x78>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	4a18      	ldr	r2, [pc, #96]	; (800339c <HAL_TIM_Base_MspInit+0x78>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	61d3      	str	r3, [r2, #28]
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <HAL_TIM_Base_MspInit+0x78>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800334e:	2200      	movs	r2, #0
 8003350:	2100      	movs	r1, #0
 8003352:	201c      	movs	r0, #28
 8003354:	f000 fb9f 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003358:	201c      	movs	r0, #28
 800335a:	f000 fbb8 	bl	8003ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800335e:	e018      	b.n	8003392 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0e      	ldr	r2, [pc, #56]	; (80033a0 <HAL_TIM_Base_MspInit+0x7c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d113      	bne.n	8003392 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <HAL_TIM_Base_MspInit+0x78>)
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	4a0b      	ldr	r2, [pc, #44]	; (800339c <HAL_TIM_Base_MspInit+0x78>)
 8003370:	f043 0304 	orr.w	r3, r3, #4
 8003374:	61d3      	str	r3, [r2, #28]
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_TIM_Base_MspInit+0x78>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 2);
 8003382:	2202      	movs	r2, #2
 8003384:	2100      	movs	r1, #0
 8003386:	201e      	movs	r0, #30
 8003388:	f000 fb85 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800338c:	201e      	movs	r0, #30
 800338e:	f000 fb9e 	bl	8003ace <HAL_NVIC_EnableIRQ>
}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
 80033a0:	40000800 	.word	0x40000800

080033a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2a      	ldr	r2, [pc, #168]	; (800346c <HAL_UART_MspInit+0xc8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d14d      	bne.n	8003462 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033c6:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <HAL_UART_MspInit+0xcc>)
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	4a29      	ldr	r2, [pc, #164]	; (8003470 <HAL_UART_MspInit+0xcc>)
 80033cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d0:	6193      	str	r3, [r2, #24]
 80033d2:	4b27      	ldr	r3, [pc, #156]	; (8003470 <HAL_UART_MspInit+0xcc>)
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_UART_MspInit+0xcc>)
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4a23      	ldr	r2, [pc, #140]	; (8003470 <HAL_UART_MspInit+0xcc>)
 80033e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033e8:	6153      	str	r3, [r2, #20]
 80033ea:	4b21      	ldr	r3, [pc, #132]	; (8003470 <HAL_UART_MspInit+0xcc>)
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_UART_MspInit+0xcc>)
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <HAL_UART_MspInit+0xcc>)
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	6153      	str	r3, [r2, #20]
 8003402:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <HAL_UART_MspInit+0xcc>)
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC5     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800340e:	2320      	movs	r3, #32
 8003410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800341a:	2303      	movs	r3, #3
 800341c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800341e:	2307      	movs	r3, #7
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003422:	f107 0314 	add.w	r3, r7, #20
 8003426:	4619      	mov	r1, r3
 8003428:	4812      	ldr	r0, [pc, #72]	; (8003474 <HAL_UART_MspInit+0xd0>)
 800342a:	f000 fbe1 	bl	8003bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800342e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800343c:	2303      	movs	r3, #3
 800343e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003440:	2307      	movs	r3, #7
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4619      	mov	r1, r3
 800344a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800344e:	f000 fbcf 	bl	8003bf0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	2100      	movs	r1, #0
 8003456:	2025      	movs	r0, #37	; 0x25
 8003458:	f000 fb1d 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800345c:	2025      	movs	r0, #37	; 0x25
 800345e:	f000 fb36 	bl	8003ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003462:	bf00      	nop
 8003464:	3728      	adds	r7, #40	; 0x28
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40013800 	.word	0x40013800
 8003470:	40021000 	.word	0x40021000
 8003474:	48000800 	.word	0x48000800

08003478 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <HAL_PCD_MspInit+0x80>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d129      	bne.n	80034ee <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349a:	4b18      	ldr	r3, [pc, #96]	; (80034fc <HAL_PCD_MspInit+0x84>)
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	4a17      	ldr	r2, [pc, #92]	; (80034fc <HAL_PCD_MspInit+0x84>)
 80034a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a4:	6153      	str	r3, [r2, #20]
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <HAL_PCD_MspInit+0x84>)
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80034b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80034b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034c0:	2303      	movs	r3, #3
 80034c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80034c4:	230e      	movs	r3, #14
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	4619      	mov	r1, r3
 80034ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d2:	f000 fb8d 	bl	8003bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_PCD_MspInit+0x84>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4a08      	ldr	r2, [pc, #32]	; (80034fc <HAL_PCD_MspInit+0x84>)
 80034dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034e0:	61d3      	str	r3, [r2, #28]
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_PCD_MspInit+0x84>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80034ee:	bf00      	nop
 80034f0:	3728      	adds	r7, #40	; 0x28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40005c00 	.word	0x40005c00
 80034fc:	40021000 	.word	0x40021000

08003500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003504:	e7fe      	b.n	8003504 <NMI_Handler+0x4>

08003506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800350a:	e7fe      	b.n	800350a <HardFault_Handler+0x4>

0800350c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003510:	e7fe      	b.n	8003510 <MemManage_Handler+0x4>

08003512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003512:	b480      	push	{r7}
 8003514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003516:	e7fe      	b.n	8003516 <BusFault_Handler+0x4>

08003518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800351c:	e7fe      	b.n	800351c <UsageFault_Handler+0x4>

0800351e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800354c:	f000 f984 	bl	8003858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003550:	bf00      	nop
 8003552:	bd80      	pop	{r7, pc}

08003554 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003558:	2001      	movs	r0, #1
 800355a:	f000 fd0d 	bl	8003f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}

08003562 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003566:	2002      	movs	r0, #2
 8003568:	f000 fd06 	bl	8003f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800356c:	bf00      	nop
 800356e:	bd80      	pop	{r7, pc}

08003570 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003574:	2004      	movs	r0, #4
 8003576:	f000 fcff 	bl	8003f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}

0800357e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003582:	2008      	movs	r0, #8
 8003584:	f000 fcf8 	bl	8003f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003588:	bf00      	nop
 800358a:	bd80      	pop	{r7, pc}

0800358c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003590:	4802      	ldr	r0, [pc, #8]	; (800359c <TIM2_IRQHandler+0x10>)
 8003592:	f002 ff9d 	bl	80064d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	2000028c 	.word	0x2000028c

080035a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <TIM4_IRQHandler+0x10>)
 80035a6:	f002 ff93 	bl	80064d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200002d8 	.word	0x200002d8

080035b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035b8:	4802      	ldr	r0, [pc, #8]	; (80035c4 <USART1_IRQHandler+0x10>)
 80035ba:	f003 fbf3 	bl	8006da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000324 	.word	0x20000324

080035c8 <_getpid>:
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	2301      	movs	r3, #1
 80035ce:	4618      	mov	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <_kill>:
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
 80035e2:	f004 fdb1 	bl	8008148 <__errno>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2216      	movs	r2, #22
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <_exit>:
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	f04f 31ff 	mov.w	r1, #4294967295
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ffe7 	bl	80035d8 <_kill>
 800360a:	e7fe      	b.n	800360a <_exit+0x12>

0800360c <_read>:
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e00a      	b.n	8003634 <_read+0x28>
 800361e:	f3af 8000 	nop.w
 8003622:	4601      	mov	r1, r0
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	60ba      	str	r2, [r7, #8]
 800362a:	b2ca      	uxtb	r2, r1
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	3301      	adds	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	dbf0      	blt.n	800361e <_read+0x12>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <_write>:
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e009      	b.n	800366c <_write+0x26>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	60ba      	str	r2, [r7, #8]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f3af 8000 	nop.w
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	3301      	adds	r3, #1
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	dbf1      	blt.n	8003658 <_write+0x12>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <_close>:
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	f04f 33ff 	mov.w	r3, #4294967295
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <_fstat>:
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	2300      	movs	r3, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <_isatty>:
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	2301      	movs	r3, #1
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <_lseek>:
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	2300      	movs	r3, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <_sbrk>:
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <_sbrk+0x5c>)
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <_sbrk+0x60>)
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <_sbrk+0x64>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <_sbrk+0x22>
 8003704:	4b11      	ldr	r3, [pc, #68]	; (800374c <_sbrk+0x64>)
 8003706:	4a12      	ldr	r2, [pc, #72]	; (8003750 <_sbrk+0x68>)
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <_sbrk+0x64>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	429a      	cmp	r2, r3
 8003716:	d207      	bcs.n	8003728 <_sbrk+0x40>
 8003718:	f004 fd16 	bl	8008148 <__errno>
 800371c:	4603      	mov	r3, r0
 800371e:	220c      	movs	r2, #12
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	e009      	b.n	800373c <_sbrk+0x54>
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <_sbrk+0x64>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <_sbrk+0x64>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	4a05      	ldr	r2, [pc, #20]	; (800374c <_sbrk+0x64>)
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	2000a000 	.word	0x2000a000
 8003748:	00000400 	.word	0x00000400
 800374c:	20000820 	.word	0x20000820
 8003750:	20000838 	.word	0x20000838

08003754 <SystemInit>:
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <SystemInit+0x20>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375e:	4a05      	ldr	r2, [pc, #20]	; (8003774 <SystemInit+0x20>)
 8003760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <Reset_Handler>:
 8003778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037b0 <LoopForever+0x2>
 800377c:	f7ff ffea 	bl	8003754 <SystemInit>
 8003780:	480c      	ldr	r0, [pc, #48]	; (80037b4 <LoopForever+0x6>)
 8003782:	490d      	ldr	r1, [pc, #52]	; (80037b8 <LoopForever+0xa>)
 8003784:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <LoopForever+0xe>)
 8003786:	2300      	movs	r3, #0
 8003788:	e002      	b.n	8003790 <LoopCopyDataInit>

0800378a <CopyDataInit>:
 800378a:	58d4      	ldr	r4, [r2, r3]
 800378c:	50c4      	str	r4, [r0, r3]
 800378e:	3304      	adds	r3, #4

08003790 <LoopCopyDataInit>:
 8003790:	18c4      	adds	r4, r0, r3
 8003792:	428c      	cmp	r4, r1
 8003794:	d3f9      	bcc.n	800378a <CopyDataInit>
 8003796:	4a0a      	ldr	r2, [pc, #40]	; (80037c0 <LoopForever+0x12>)
 8003798:	4c0a      	ldr	r4, [pc, #40]	; (80037c4 <LoopForever+0x16>)
 800379a:	2300      	movs	r3, #0
 800379c:	e001      	b.n	80037a2 <LoopFillZerobss>

0800379e <FillZerobss>:
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	3204      	adds	r2, #4

080037a2 <LoopFillZerobss>:
 80037a2:	42a2      	cmp	r2, r4
 80037a4:	d3fb      	bcc.n	800379e <FillZerobss>
 80037a6:	f004 fcd5 	bl	8008154 <__libc_init_array>
 80037aa:	f7fd f945 	bl	8000a38 <main>

080037ae <LoopForever>:
 80037ae:	e7fe      	b.n	80037ae <LoopForever>
 80037b0:	2000a000 	.word	0x2000a000
 80037b4:	20000000 	.word	0x20000000
 80037b8:	20000174 	.word	0x20000174
 80037bc:	08009830 	.word	0x08009830
 80037c0:	20000174 	.word	0x20000174
 80037c4:	20000838 	.word	0x20000838

080037c8 <ADC1_2_IRQHandler>:
 80037c8:	e7fe      	b.n	80037c8 <ADC1_2_IRQHandler>
	...

080037cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <HAL_Init+0x28>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a07      	ldr	r2, [pc, #28]	; (80037f4 <HAL_Init+0x28>)
 80037d6:	f043 0310 	orr.w	r3, r3, #16
 80037da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037dc:	2003      	movs	r0, #3
 80037de:	f000 f94f 	bl	8003a80 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037e2:	2000      	movs	r0, #0
 80037e4:	f000 f808 	bl	80037f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037e8:	f7ff fccc 	bl	8003184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40022000 	.word	0x40022000

080037f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003800:	4b12      	ldr	r3, [pc, #72]	; (800384c <HAL_InitTick+0x54>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_InitTick+0x58>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	4619      	mov	r1, r3
 800380a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800380e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003812:	fbb2 f3f3 	udiv	r3, r2, r3
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f967 	bl	8003aea <HAL_SYSTICK_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e00e      	b.n	8003844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b0f      	cmp	r3, #15
 800382a:	d80a      	bhi.n	8003842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800382c:	2200      	movs	r2, #0
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	f04f 30ff 	mov.w	r0, #4294967295
 8003834:	f000 f92f 	bl	8003a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003838:	4a06      	ldr	r2, [pc, #24]	; (8003854 <HAL_InitTick+0x5c>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	e000      	b.n	8003844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
}
 8003844:	4618      	mov	r0, r3
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20000104 	.word	0x20000104
 8003850:	2000010c 	.word	0x2000010c
 8003854:	20000108 	.word	0x20000108

08003858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_IncTick+0x20>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_IncTick+0x24>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4413      	add	r3, r2
 8003868:	4a04      	ldr	r2, [pc, #16]	; (800387c <HAL_IncTick+0x24>)
 800386a:	6013      	str	r3, [r2, #0]
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	2000010c 	.word	0x2000010c
 800387c:	20000824 	.word	0x20000824

08003880 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return uwTick;  
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_GetTick+0x14>)
 8003886:	681b      	ldr	r3, [r3, #0]
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000824 	.word	0x20000824

08003898 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038a0:	f7ff ffee 	bl	8003880 <HAL_GetTick>
 80038a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d005      	beq.n	80038be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_Delay+0x44>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80038be:	bf00      	nop
 80038c0:	f7ff ffde 	bl	8003880 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d8f7      	bhi.n	80038c0 <HAL_Delay+0x28>
  {
  }
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	2000010c 	.word	0x2000010c

080038e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038fc:	4013      	ands	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800390c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003912:	4a04      	ldr	r2, [pc, #16]	; (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	60d3      	str	r3, [r2, #12]
}
 8003918:	bf00      	nop
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800392c:	4b04      	ldr	r3, [pc, #16]	; (8003940 <__NVIC_GetPriorityGrouping+0x18>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	f003 0307 	and.w	r3, r3, #7
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	2b00      	cmp	r3, #0
 8003954:	db0b      	blt.n	800396e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	f003 021f 	and.w	r2, r3, #31
 800395c:	4907      	ldr	r1, [pc, #28]	; (800397c <__NVIC_EnableIRQ+0x38>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2001      	movs	r0, #1
 8003966:	fa00 f202 	lsl.w	r2, r0, r2
 800396a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	e000e100 	.word	0xe000e100

08003980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	2b00      	cmp	r3, #0
 8003992:	db0a      	blt.n	80039aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	490c      	ldr	r1, [pc, #48]	; (80039cc <__NVIC_SetPriority+0x4c>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	440b      	add	r3, r1
 80039a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a8:	e00a      	b.n	80039c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4908      	ldr	r1, [pc, #32]	; (80039d0 <__NVIC_SetPriority+0x50>)
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	3b04      	subs	r3, #4
 80039b8:	0112      	lsls	r2, r2, #4
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	440b      	add	r3, r1
 80039be:	761a      	strb	r2, [r3, #24]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000e100 	.word	0xe000e100
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f1c3 0307 	rsb	r3, r3, #7
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	bf28      	it	cs
 80039f2:	2304      	movcs	r3, #4
 80039f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3304      	adds	r3, #4
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d902      	bls.n	8003a04 <NVIC_EncodePriority+0x30>
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3b03      	subs	r3, #3
 8003a02:	e000      	b.n	8003a06 <NVIC_EncodePriority+0x32>
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	401a      	ands	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	43d9      	mvns	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	4313      	orrs	r3, r2
         );
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a4c:	d301      	bcc.n	8003a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e00f      	b.n	8003a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <SysTick_Config+0x40>)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a5a:	210f      	movs	r1, #15
 8003a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a60:	f7ff ff8e 	bl	8003980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <SysTick_Config+0x40>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6a:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <SysTick_Config+0x40>)
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	e000e010 	.word	0xe000e010

08003a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ff29 	bl	80038e0 <__NVIC_SetPriorityGrouping>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa8:	f7ff ff3e 	bl	8003928 <__NVIC_GetPriorityGrouping>
 8003aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	6978      	ldr	r0, [r7, #20]
 8003ab4:	f7ff ff8e 	bl	80039d4 <NVIC_EncodePriority>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff5d 	bl	8003980 <__NVIC_SetPriority>
}
 8003ac6:	bf00      	nop
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ff31 	bl	8003944 <__NVIC_EnableIRQ>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ffa2 	bl	8003a3c <SysTick_Config>
 8003af8:	4603      	mov	r3, r0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d008      	beq.n	8003b26 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2204      	movs	r2, #4
 8003b18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e020      	b.n	8003b68 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 020e 	bic.w	r2, r2, #14
 8003b34:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	2101      	movs	r1, #1
 8003b50:	fa01 f202 	lsl.w	r2, r1, r2
 8003b54:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d005      	beq.n	8003b96 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	e027      	b.n	8003be6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 020e 	bic.w	r2, r2, #14
 8003ba4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4798      	blx	r3
    } 
  }
  return status;
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bfe:	e154      	b.n	8003eaa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2101      	movs	r1, #1
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8146 	beq.w	8003ea4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d005      	beq.n	8003c30 <HAL_GPIO_Init+0x40>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d130      	bne.n	8003c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c66:	2201      	movs	r2, #1
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0201 	and.w	r2, r3, #1
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d017      	beq.n	8003cce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	2203      	movs	r2, #3
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d123      	bne.n	8003d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	08da      	lsrs	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3208      	adds	r2, #8
 8003ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	220f      	movs	r2, #15
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	08da      	lsrs	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3208      	adds	r2, #8
 8003d1c:	6939      	ldr	r1, [r7, #16]
 8003d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f003 0203 	and.w	r2, r3, #3
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 80a0 	beq.w	8003ea4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d64:	4b58      	ldr	r3, [pc, #352]	; (8003ec8 <HAL_GPIO_Init+0x2d8>)
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	4a57      	ldr	r2, [pc, #348]	; (8003ec8 <HAL_GPIO_Init+0x2d8>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6193      	str	r3, [r2, #24]
 8003d70:	4b55      	ldr	r3, [pc, #340]	; (8003ec8 <HAL_GPIO_Init+0x2d8>)
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d7c:	4a53      	ldr	r2, [pc, #332]	; (8003ecc <HAL_GPIO_Init+0x2dc>)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	089b      	lsrs	r3, r3, #2
 8003d82:	3302      	adds	r3, #2
 8003d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	220f      	movs	r2, #15
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003da6:	d019      	beq.n	8003ddc <HAL_GPIO_Init+0x1ec>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a49      	ldr	r2, [pc, #292]	; (8003ed0 <HAL_GPIO_Init+0x2e0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d013      	beq.n	8003dd8 <HAL_GPIO_Init+0x1e8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a48      	ldr	r2, [pc, #288]	; (8003ed4 <HAL_GPIO_Init+0x2e4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00d      	beq.n	8003dd4 <HAL_GPIO_Init+0x1e4>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a47      	ldr	r2, [pc, #284]	; (8003ed8 <HAL_GPIO_Init+0x2e8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <HAL_GPIO_Init+0x1e0>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a46      	ldr	r2, [pc, #280]	; (8003edc <HAL_GPIO_Init+0x2ec>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <HAL_GPIO_Init+0x1dc>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	e008      	b.n	8003dde <HAL_GPIO_Init+0x1ee>
 8003dcc:	2305      	movs	r3, #5
 8003dce:	e006      	b.n	8003dde <HAL_GPIO_Init+0x1ee>
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e004      	b.n	8003dde <HAL_GPIO_Init+0x1ee>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e002      	b.n	8003dde <HAL_GPIO_Init+0x1ee>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <HAL_GPIO_Init+0x1ee>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	f002 0203 	and.w	r2, r2, #3
 8003de4:	0092      	lsls	r2, r2, #2
 8003de6:	4093      	lsls	r3, r2
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dee:	4937      	ldr	r1, [pc, #220]	; (8003ecc <HAL_GPIO_Init+0x2dc>)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	3302      	adds	r3, #2
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dfc:	4b38      	ldr	r3, [pc, #224]	; (8003ee0 <HAL_GPIO_Init+0x2f0>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e20:	4a2f      	ldr	r2, [pc, #188]	; (8003ee0 <HAL_GPIO_Init+0x2f0>)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e26:	4b2e      	ldr	r3, [pc, #184]	; (8003ee0 <HAL_GPIO_Init+0x2f0>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e4a:	4a25      	ldr	r2, [pc, #148]	; (8003ee0 <HAL_GPIO_Init+0x2f0>)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e50:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <HAL_GPIO_Init+0x2f0>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e74:	4a1a      	ldr	r2, [pc, #104]	; (8003ee0 <HAL_GPIO_Init+0x2f0>)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e7a:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <HAL_GPIO_Init+0x2f0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e9e:	4a10      	ldr	r2, [pc, #64]	; (8003ee0 <HAL_GPIO_Init+0x2f0>)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f47f aea3 	bne.w	8003c00 <HAL_GPIO_Init+0x10>
  }
}
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	48000400 	.word	0x48000400
 8003ed4:	48000800 	.word	0x48000800
 8003ed8:	48000c00 	.word	0x48000c00
 8003edc:	48001000 	.word	0x48001000
 8003ee0:	40010400 	.word	0x40010400

08003ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	887b      	ldrh	r3, [r7, #2]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
 8003f00:	e001      	b.n	8003f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	807b      	strh	r3, [r7, #2]
 8003f20:	4613      	mov	r3, r2
 8003f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f24:	787b      	ldrb	r3, [r7, #1]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f2a:	887a      	ldrh	r2, [r7, #2]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f30:	e002      	b.n	8003f38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f32:	887a      	ldrh	r2, [r7, #2]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f56:	887a      	ldrh	r2, [r7, #2]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	041a      	lsls	r2, r3, #16
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	43d9      	mvns	r1, r3
 8003f62:	887b      	ldrh	r3, [r7, #2]
 8003f64:	400b      	ands	r3, r1
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	619a      	str	r2, [r3, #24]
}
 8003f6c:	bf00      	nop
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f82:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d006      	beq.n	8003f9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f8e:	4a05      	ldr	r2, [pc, #20]	; (8003fa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd f908 	bl	80011ac <HAL_GPIO_EXTI_Callback>
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e081      	b.n	80040be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff f8fc 	bl	80031cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2224      	movs	r2, #36	; 0x24
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0201 	bic.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ff8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004008:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d107      	bne.n	8004022 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800401e:	609a      	str	r2, [r3, #8]
 8004020:	e006      	b.n	8004030 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800402e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d104      	bne.n	8004042 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004040:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004054:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004064:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69d9      	ldr	r1, [r3, #28]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1a      	ldr	r2, [r3, #32]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d138      	bne.n	800414e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e032      	b.n	8004150 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2224      	movs	r2, #36	; 0x24
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004118:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0201 	orr.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e000      	b.n	8004150 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800414e:	2302      	movs	r3, #2
  }
}
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b20      	cmp	r3, #32
 8004170:	d139      	bne.n	80041e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800417c:	2302      	movs	r3, #2
 800417e:	e033      	b.n	80041e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2224      	movs	r2, #36	; 0x24
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0201 	bic.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	e000      	b.n	80041e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041e6:	2302      	movs	r3, #2
  }
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f6:	b08b      	sub	sp, #44	; 0x2c
 80041f8:	af06      	add	r7, sp, #24
 80041fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e0c4      	b.n	8004390 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff f92c 	bl	8003478 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2203      	movs	r2, #3
 8004224:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f003 ff4f 	bl	80080d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
 8004236:	e040      	b.n	80042ba <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	440b      	add	r3, r1
 8004248:	3301      	adds	r3, #1
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	440b      	add	r3, r1
 800425e:	7bfa      	ldrb	r2, [r7, #15]
 8004260:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	440b      	add	r3, r1
 8004272:	3303      	adds	r3, #3
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	440b      	add	r3, r1
 8004286:	3338      	adds	r3, #56	; 0x38
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800428c:	7bfa      	ldrb	r2, [r7, #15]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	440b      	add	r3, r1
 800429a:	333c      	adds	r3, #60	; 0x3c
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042a0:	7bfa      	ldrb	r2, [r7, #15]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	440b      	add	r3, r1
 80042ae:	3340      	adds	r3, #64	; 0x40
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	3301      	adds	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
 80042ba:	7bfa      	ldrb	r2, [r7, #15]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d3b9      	bcc.n	8004238 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042c4:	2300      	movs	r3, #0
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	e044      	b.n	8004354 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	440b      	add	r3, r1
 80042d8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	440b      	add	r3, r1
 80042ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	440b      	add	r3, r1
 8004304:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	440b      	add	r3, r1
 800431a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	440b      	add	r3, r1
 8004330:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	440b      	add	r3, r1
 8004346:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	3301      	adds	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	429a      	cmp	r2, r3
 800435c:	d3b5      	bcc.n	80042ca <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	687e      	ldr	r6, [r7, #4]
 8004366:	466d      	mov	r5, sp
 8004368:	f106 0410 	add.w	r4, r6, #16
 800436c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800436e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	602b      	str	r3, [r5, #0]
 8004374:	1d33      	adds	r3, r6, #4
 8004376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004378:	6838      	ldr	r0, [r7, #0]
 800437a:	f003 fec4 	bl	8008106 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800439e:	af00      	add	r7, sp, #0
 80043a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d102      	bne.n	80043be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f001 b823 	b.w	8005404 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 817d 	beq.w	80046ce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80043d4:	4bbc      	ldr	r3, [pc, #752]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 030c 	and.w	r3, r3, #12
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d00c      	beq.n	80043fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043e0:	4bb9      	ldr	r3, [pc, #740]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d15c      	bne.n	80044a6 <HAL_RCC_OscConfig+0x10e>
 80043ec:	4bb6      	ldr	r3, [pc, #728]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f8:	d155      	bne.n	80044a6 <HAL_RCC_OscConfig+0x10e>
 80043fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004402:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004406:	fa93 f3a3 	rbit	r3, r3
 800440a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800440e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004412:	fab3 f383 	clz	r3, r3
 8004416:	b2db      	uxtb	r3, r3
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b01      	cmp	r3, #1
 8004424:	d102      	bne.n	800442c <HAL_RCC_OscConfig+0x94>
 8004426:	4ba8      	ldr	r3, [pc, #672]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	e015      	b.n	8004458 <HAL_RCC_OscConfig+0xc0>
 800442c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004430:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004434:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004438:	fa93 f3a3 	rbit	r3, r3
 800443c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004444:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004448:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800444c:	fa93 f3a3 	rbit	r3, r3
 8004450:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004454:	4b9c      	ldr	r3, [pc, #624]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800445c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004460:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004464:	fa92 f2a2 	rbit	r2, r2
 8004468:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800446c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004470:	fab2 f282 	clz	r2, r2
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	f042 0220 	orr.w	r2, r2, #32
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	f002 021f 	and.w	r2, r2, #31
 8004480:	2101      	movs	r1, #1
 8004482:	fa01 f202 	lsl.w	r2, r1, r2
 8004486:	4013      	ands	r3, r2
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 811f 	beq.w	80046cc <HAL_RCC_OscConfig+0x334>
 800448e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f040 8116 	bne.w	80046cc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f000 bfaf 	b.w	8005404 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b6:	d106      	bne.n	80044c6 <HAL_RCC_OscConfig+0x12e>
 80044b8:	4b83      	ldr	r3, [pc, #524]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a82      	ldr	r2, [pc, #520]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80044be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	e036      	b.n	8004534 <HAL_RCC_OscConfig+0x19c>
 80044c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x158>
 80044d6:	4b7c      	ldr	r3, [pc, #496]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a7b      	ldr	r2, [pc, #492]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80044dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4b79      	ldr	r3, [pc, #484]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a78      	ldr	r2, [pc, #480]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80044e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	e021      	b.n	8004534 <HAL_RCC_OscConfig+0x19c>
 80044f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004500:	d10c      	bne.n	800451c <HAL_RCC_OscConfig+0x184>
 8004502:	4b71      	ldr	r3, [pc, #452]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a70      	ldr	r2, [pc, #448]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b6e      	ldr	r3, [pc, #440]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a6d      	ldr	r2, [pc, #436]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e00b      	b.n	8004534 <HAL_RCC_OscConfig+0x19c>
 800451c:	4b6a      	ldr	r3, [pc, #424]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a69      	ldr	r2, [pc, #420]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4b67      	ldr	r3, [pc, #412]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a66      	ldr	r2, [pc, #408]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800452e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004532:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004534:	4b64      	ldr	r3, [pc, #400]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	f023 020f 	bic.w	r2, r3, #15
 800453c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004540:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	495f      	ldr	r1, [pc, #380]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800454a:	4313      	orrs	r3, r2
 800454c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800454e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004552:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d059      	beq.n	8004612 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455e:	f7ff f98f 	bl	8003880 <HAL_GetTick>
 8004562:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004566:	e00a      	b.n	800457e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004568:	f7ff f98a 	bl	8003880 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b64      	cmp	r3, #100	; 0x64
 8004576:	d902      	bls.n	800457e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	f000 bf43 	b.w	8005404 <HAL_RCC_OscConfig+0x106c>
 800457e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004582:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800458a:	fa93 f3a3 	rbit	r3, r3
 800458e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004592:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d102      	bne.n	80045b0 <HAL_RCC_OscConfig+0x218>
 80045aa:	4b47      	ldr	r3, [pc, #284]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	e015      	b.n	80045dc <HAL_RCC_OscConfig+0x244>
 80045b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045b4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80045bc:	fa93 f3a3 	rbit	r3, r3
 80045c0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80045c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045c8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80045cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80045d8:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045e0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80045e4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80045e8:	fa92 f2a2 	rbit	r2, r2
 80045ec:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80045f0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80045f4:	fab2 f282 	clz	r2, r2
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	f042 0220 	orr.w	r2, r2, #32
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	f002 021f 	and.w	r2, r2, #31
 8004604:	2101      	movs	r1, #1
 8004606:	fa01 f202 	lsl.w	r2, r1, r2
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ab      	beq.n	8004568 <HAL_RCC_OscConfig+0x1d0>
 8004610:	e05d      	b.n	80046ce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004612:	f7ff f935 	bl	8003880 <HAL_GetTick>
 8004616:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800461c:	f7ff f930 	bl	8003880 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b64      	cmp	r3, #100	; 0x64
 800462a:	d902      	bls.n	8004632 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	f000 bee9 	b.w	8005404 <HAL_RCC_OscConfig+0x106c>
 8004632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004636:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800463e:	fa93 f3a3 	rbit	r3, r3
 8004642:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004646:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	fab3 f383 	clz	r3, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d102      	bne.n	8004664 <HAL_RCC_OscConfig+0x2cc>
 800465e:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	e015      	b.n	8004690 <HAL_RCC_OscConfig+0x2f8>
 8004664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004668:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004670:	fa93 f3a3 	rbit	r3, r3
 8004674:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800467c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004680:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004684:	fa93 f3a3 	rbit	r3, r3
 8004688:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800468c:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004694:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004698:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800469c:	fa92 f2a2 	rbit	r2, r2
 80046a0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80046a4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80046a8:	fab2 f282 	clz	r2, r2
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	f042 0220 	orr.w	r2, r2, #32
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	f002 021f 	and.w	r2, r2, #31
 80046b8:	2101      	movs	r1, #1
 80046ba:	fa01 f202 	lsl.w	r2, r1, r2
 80046be:	4013      	ands	r3, r2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ab      	bne.n	800461c <HAL_RCC_OscConfig+0x284>
 80046c4:	e003      	b.n	80046ce <HAL_RCC_OscConfig+0x336>
 80046c6:	bf00      	nop
 80046c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 817d 	beq.w	80049de <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80046e4:	4ba6      	ldr	r3, [pc, #664]	; (8004980 <HAL_RCC_OscConfig+0x5e8>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00b      	beq.n	8004708 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80046f0:	4ba3      	ldr	r3, [pc, #652]	; (8004980 <HAL_RCC_OscConfig+0x5e8>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d172      	bne.n	80047e2 <HAL_RCC_OscConfig+0x44a>
 80046fc:	4ba0      	ldr	r3, [pc, #640]	; (8004980 <HAL_RCC_OscConfig+0x5e8>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d16c      	bne.n	80047e2 <HAL_RCC_OscConfig+0x44a>
 8004708:	2302      	movs	r3, #2
 800470a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800471a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471e:	fab3 f383 	clz	r3, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b01      	cmp	r3, #1
 8004730:	d102      	bne.n	8004738 <HAL_RCC_OscConfig+0x3a0>
 8004732:	4b93      	ldr	r3, [pc, #588]	; (8004980 <HAL_RCC_OscConfig+0x5e8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	e013      	b.n	8004760 <HAL_RCC_OscConfig+0x3c8>
 8004738:	2302      	movs	r3, #2
 800473a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800474a:	2302      	movs	r3, #2
 800474c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004750:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800475c:	4b88      	ldr	r3, [pc, #544]	; (8004980 <HAL_RCC_OscConfig+0x5e8>)
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	2202      	movs	r2, #2
 8004762:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004766:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800476a:	fa92 f2a2 	rbit	r2, r2
 800476e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004772:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004776:	fab2 f282 	clz	r2, r2
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	f042 0220 	orr.w	r2, r2, #32
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	f002 021f 	and.w	r2, r2, #31
 8004786:	2101      	movs	r1, #1
 8004788:	fa01 f202 	lsl.w	r2, r1, r2
 800478c:	4013      	ands	r3, r2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HAL_RCC_OscConfig+0x410>
 8004792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d002      	beq.n	80047a8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f000 be2e 	b.w	8005404 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a8:	4b75      	ldr	r3, [pc, #468]	; (8004980 <HAL_RCC_OscConfig+0x5e8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	21f8      	movs	r1, #248	; 0xf8
 80047be:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80047c6:	fa91 f1a1 	rbit	r1, r1
 80047ca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80047ce:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80047d2:	fab1 f181 	clz	r1, r1
 80047d6:	b2c9      	uxtb	r1, r1
 80047d8:	408b      	lsls	r3, r1
 80047da:	4969      	ldr	r1, [pc, #420]	; (8004980 <HAL_RCC_OscConfig+0x5e8>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e0:	e0fd      	b.n	80049de <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8088 	beq.w	8004904 <HAL_RCC_OscConfig+0x56c>
 80047f4:	2301      	movs	r3, #1
 80047f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80047fe:	fa93 f3a3 	rbit	r3, r3
 8004802:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004806:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800480a:	fab3 f383 	clz	r3, r3
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004814:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	461a      	mov	r2, r3
 800481c:	2301      	movs	r3, #1
 800481e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7ff f82e 	bl	8003880 <HAL_GetTick>
 8004824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004828:	e00a      	b.n	8004840 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800482a:	f7ff f829 	bl	8003880 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d902      	bls.n	8004840 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	f000 bde2 	b.w	8005404 <HAL_RCC_OscConfig+0x106c>
 8004840:	2302      	movs	r3, #2
 8004842:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800484a:	fa93 f3a3 	rbit	r3, r3
 800484e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004852:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004856:	fab3 f383 	clz	r3, r3
 800485a:	b2db      	uxtb	r3, r3
 800485c:	095b      	lsrs	r3, r3, #5
 800485e:	b2db      	uxtb	r3, r3
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b01      	cmp	r3, #1
 8004868:	d102      	bne.n	8004870 <HAL_RCC_OscConfig+0x4d8>
 800486a:	4b45      	ldr	r3, [pc, #276]	; (8004980 <HAL_RCC_OscConfig+0x5e8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	e013      	b.n	8004898 <HAL_RCC_OscConfig+0x500>
 8004870:	2302      	movs	r3, #2
 8004872:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800487a:	fa93 f3a3 	rbit	r3, r3
 800487e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004882:	2302      	movs	r3, #2
 8004884:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004888:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004894:	4b3a      	ldr	r3, [pc, #232]	; (8004980 <HAL_RCC_OscConfig+0x5e8>)
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	2202      	movs	r2, #2
 800489a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800489e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80048a2:	fa92 f2a2 	rbit	r2, r2
 80048a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80048aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80048ae:	fab2 f282 	clz	r2, r2
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	f042 0220 	orr.w	r2, r2, #32
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	f002 021f 	and.w	r2, r2, #31
 80048be:	2101      	movs	r1, #1
 80048c0:	fa01 f202 	lsl.w	r2, r1, r2
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0af      	beq.n	800482a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ca:	4b2d      	ldr	r3, [pc, #180]	; (8004980 <HAL_RCC_OscConfig+0x5e8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	21f8      	movs	r1, #248	; 0xf8
 80048e0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80048e8:	fa91 f1a1 	rbit	r1, r1
 80048ec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80048f0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80048f4:	fab1 f181 	clz	r1, r1
 80048f8:	b2c9      	uxtb	r1, r1
 80048fa:	408b      	lsls	r3, r1
 80048fc:	4920      	ldr	r1, [pc, #128]	; (8004980 <HAL_RCC_OscConfig+0x5e8>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
 8004902:	e06c      	b.n	80049de <HAL_RCC_OscConfig+0x646>
 8004904:	2301      	movs	r3, #1
 8004906:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800490e:	fa93 f3a3 	rbit	r3, r3
 8004912:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004916:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800491a:	fab3 f383 	clz	r3, r3
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004924:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	461a      	mov	r2, r3
 800492c:	2300      	movs	r3, #0
 800492e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7fe ffa6 	bl	8003880 <HAL_GetTick>
 8004934:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004938:	e00a      	b.n	8004950 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800493a:	f7fe ffa1 	bl	8003880 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d902      	bls.n	8004950 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	f000 bd5a 	b.w	8005404 <HAL_RCC_OscConfig+0x106c>
 8004950:	2302      	movs	r3, #2
 8004952:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800495a:	fa93 f3a3 	rbit	r3, r3
 800495e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	d104      	bne.n	8004984 <HAL_RCC_OscConfig+0x5ec>
 800497a:	4b01      	ldr	r3, [pc, #4]	; (8004980 <HAL_RCC_OscConfig+0x5e8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	e015      	b.n	80049ac <HAL_RCC_OscConfig+0x614>
 8004980:	40021000 	.word	0x40021000
 8004984:	2302      	movs	r3, #2
 8004986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800498e:	fa93 f3a3 	rbit	r3, r3
 8004992:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004996:	2302      	movs	r3, #2
 8004998:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800499c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80049a0:	fa93 f3a3 	rbit	r3, r3
 80049a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049a8:	4bc8      	ldr	r3, [pc, #800]	; (8004ccc <HAL_RCC_OscConfig+0x934>)
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	2202      	movs	r2, #2
 80049ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80049b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80049b6:	fa92 f2a2 	rbit	r2, r2
 80049ba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80049be:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80049c2:	fab2 f282 	clz	r2, r2
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	f042 0220 	orr.w	r2, r2, #32
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	f002 021f 	and.w	r2, r2, #31
 80049d2:	2101      	movs	r1, #1
 80049d4:	fa01 f202 	lsl.w	r2, r1, r2
 80049d8:	4013      	ands	r3, r2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1ad      	bne.n	800493a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 8110 	beq.w	8004c14 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d079      	beq.n	8004af8 <HAL_RCC_OscConfig+0x760>
 8004a04:	2301      	movs	r3, #1
 8004a06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a0e:	fa93 f3a3 	rbit	r3, r3
 8004a12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	4bab      	ldr	r3, [pc, #684]	; (8004cd0 <HAL_RCC_OscConfig+0x938>)
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2e:	f7fe ff27 	bl	8003880 <HAL_GetTick>
 8004a32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a38:	f7fe ff22 	bl	8003880 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d902      	bls.n	8004a4e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	f000 bcdb 	b.w	8005404 <HAL_RCC_OscConfig+0x106c>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a58:	fa93 f3a3 	rbit	r3, r3
 8004a5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a68:	2202      	movs	r2, #2
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	fa93 f2a3 	rbit	r2, r3
 8004a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	fa93 f2a3 	rbit	r2, r3
 8004a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004aa6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa8:	4b88      	ldr	r3, [pc, #544]	; (8004ccc <HAL_RCC_OscConfig+0x934>)
 8004aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	6019      	str	r1, [r3, #0]
 8004ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	fa93 f1a3 	rbit	r1, r3
 8004ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ace:	6019      	str	r1, [r3, #0]
  return result;
 8004ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	fab3 f383 	clz	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	2101      	movs	r1, #1
 8004aec:	fa01 f303 	lsl.w	r3, r1, r3
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0a0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x6a0>
 8004af6:	e08d      	b.n	8004c14 <HAL_RCC_OscConfig+0x87c>
 8004af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	fa93 f2a3 	rbit	r2, r3
 8004b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b1a:	601a      	str	r2, [r3, #0]
  return result;
 8004b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b20:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b24:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b26:	fab3 f383 	clz	r3, r3
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b68      	ldr	r3, [pc, #416]	; (8004cd0 <HAL_RCC_OscConfig+0x938>)
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	461a      	mov	r2, r3
 8004b36:	2300      	movs	r3, #0
 8004b38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3a:	f7fe fea1 	bl	8003880 <HAL_GetTick>
 8004b3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b44:	f7fe fe9c 	bl	8003880 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d902      	bls.n	8004b5a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	f000 bc55 	b.w	8005404 <HAL_RCC_OscConfig+0x106c>
 8004b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b62:	2202      	movs	r2, #2
 8004b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	fa93 f2a3 	rbit	r2, r3
 8004b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b78:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b86:	2202      	movs	r2, #2
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	fa93 f2a3 	rbit	r2, r3
 8004b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004baa:	2202      	movs	r2, #2
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	fa93 f2a3 	rbit	r2, r3
 8004bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004bc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc6:	4b41      	ldr	r3, [pc, #260]	; (8004ccc <HAL_RCC_OscConfig+0x934>)
 8004bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004bd2:	2102      	movs	r1, #2
 8004bd4:	6019      	str	r1, [r3, #0]
 8004bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bda:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	fa93 f1a3 	rbit	r1, r3
 8004be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004bec:	6019      	str	r1, [r3, #0]
  return result;
 8004bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	fab3 f383 	clz	r3, r3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	2101      	movs	r1, #1
 8004c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d197      	bne.n	8004b44 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 81a1 	beq.w	8004f6c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c30:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <HAL_RCC_OscConfig+0x934>)
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d116      	bne.n	8004c6a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c3c:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <HAL_RCC_OscConfig+0x934>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	4a22      	ldr	r2, [pc, #136]	; (8004ccc <HAL_RCC_OscConfig+0x934>)
 8004c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c46:	61d3      	str	r3, [r2, #28]
 8004c48:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <HAL_RCC_OscConfig+0x934>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c54:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004c62:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004c64:	2301      	movs	r3, #1
 8004c66:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6a:	4b1a      	ldr	r3, [pc, #104]	; (8004cd4 <HAL_RCC_OscConfig+0x93c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d11a      	bne.n	8004cac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c76:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <HAL_RCC_OscConfig+0x93c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <HAL_RCC_OscConfig+0x93c>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c82:	f7fe fdfd 	bl	8003880 <HAL_GetTick>
 8004c86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8a:	e009      	b.n	8004ca0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8c:	f7fe fdf8 	bl	8003880 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b64      	cmp	r3, #100	; 0x64
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e3b1      	b.n	8005404 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <HAL_RCC_OscConfig+0x93c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0ef      	beq.n	8004c8c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d10d      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x940>
 8004cbc:	4b03      	ldr	r3, [pc, #12]	; (8004ccc <HAL_RCC_OscConfig+0x934>)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	4a02      	ldr	r2, [pc, #8]	; (8004ccc <HAL_RCC_OscConfig+0x934>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6213      	str	r3, [r2, #32]
 8004cc8:	e03c      	b.n	8004d44 <HAL_RCC_OscConfig+0x9ac>
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	10908120 	.word	0x10908120
 8004cd4:	40007000 	.word	0x40007000
 8004cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10c      	bne.n	8004d02 <HAL_RCC_OscConfig+0x96a>
 8004ce8:	4bc1      	ldr	r3, [pc, #772]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	4ac0      	ldr	r2, [pc, #768]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	6213      	str	r3, [r2, #32]
 8004cf4:	4bbe      	ldr	r3, [pc, #760]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	4abd      	ldr	r2, [pc, #756]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004cfa:	f023 0304 	bic.w	r3, r3, #4
 8004cfe:	6213      	str	r3, [r2, #32]
 8004d00:	e020      	b.n	8004d44 <HAL_RCC_OscConfig+0x9ac>
 8004d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCC_OscConfig+0x994>
 8004d12:	4bb7      	ldr	r3, [pc, #732]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	4ab6      	ldr	r2, [pc, #728]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004d18:	f043 0304 	orr.w	r3, r3, #4
 8004d1c:	6213      	str	r3, [r2, #32]
 8004d1e:	4bb4      	ldr	r3, [pc, #720]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	4ab3      	ldr	r2, [pc, #716]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004d24:	f043 0301 	orr.w	r3, r3, #1
 8004d28:	6213      	str	r3, [r2, #32]
 8004d2a:	e00b      	b.n	8004d44 <HAL_RCC_OscConfig+0x9ac>
 8004d2c:	4bb0      	ldr	r3, [pc, #704]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	4aaf      	ldr	r2, [pc, #700]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	6213      	str	r3, [r2, #32]
 8004d38:	4bad      	ldr	r3, [pc, #692]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	4aac      	ldr	r2, [pc, #688]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004d3e:	f023 0304 	bic.w	r3, r3, #4
 8004d42:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 8081 	beq.w	8004e58 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d56:	f7fe fd93 	bl	8003880 <HAL_GetTick>
 8004d5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5e:	e00b      	b.n	8004d78 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d60:	f7fe fd8e 	bl	8003880 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e345      	b.n	8005404 <HAL_RCC_OscConfig+0x106c>
 8004d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004d80:	2202      	movs	r2, #2
 8004d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d88:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	fa93 f2a3 	rbit	r2, r3
 8004d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004da4:	2202      	movs	r2, #2
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	fa93 f2a3 	rbit	r2, r3
 8004db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004dbe:	601a      	str	r2, [r3, #0]
  return result;
 8004dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004dc8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dca:	fab3 f383 	clz	r3, r3
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f043 0302 	orr.w	r3, r3, #2
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d102      	bne.n	8004de4 <HAL_RCC_OscConfig+0xa4c>
 8004dde:	4b84      	ldr	r3, [pc, #528]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	e013      	b.n	8004e0c <HAL_RCC_OscConfig+0xa74>
 8004de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004dec:	2202      	movs	r2, #2
 8004dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	fa93 f2a3 	rbit	r2, r3
 8004dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e02:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	4b79      	ldr	r3, [pc, #484]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e10:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004e14:	2102      	movs	r1, #2
 8004e16:	6011      	str	r1, [r2, #0]
 8004e18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e1c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	fa92 f1a2 	rbit	r1, r2
 8004e26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e2a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e2e:	6011      	str	r1, [r2, #0]
  return result;
 8004e30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e34:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	fab2 f282 	clz	r2, r2
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	f002 021f 	and.w	r2, r2, #31
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d084      	beq.n	8004d60 <HAL_RCC_OscConfig+0x9c8>
 8004e56:	e07f      	b.n	8004f58 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e58:	f7fe fd12 	bl	8003880 <HAL_GetTick>
 8004e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e60:	e00b      	b.n	8004e7a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e62:	f7fe fd0d 	bl	8003880 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e2c4      	b.n	8005404 <HAL_RCC_OscConfig+0x106c>
 8004e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004e82:	2202      	movs	r2, #2
 8004e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	fa93 f2a3 	rbit	r2, r3
 8004e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	fa93 f2a3 	rbit	r2, r3
 8004eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ebc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004ec0:	601a      	str	r2, [r3, #0]
  return result;
 8004ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004eca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ecc:	fab3 f383 	clz	r3, r3
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f043 0302 	orr.w	r3, r3, #2
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d102      	bne.n	8004ee6 <HAL_RCC_OscConfig+0xb4e>
 8004ee0:	4b43      	ldr	r3, [pc, #268]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	e013      	b.n	8004f0e <HAL_RCC_OscConfig+0xb76>
 8004ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004eee:	2202      	movs	r2, #2
 8004ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	fa93 f2a3 	rbit	r2, r3
 8004f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f04:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	4b39      	ldr	r3, [pc, #228]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004f16:	2102      	movs	r1, #2
 8004f18:	6011      	str	r1, [r2, #0]
 8004f1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f1e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	fa92 f1a2 	rbit	r1, r2
 8004f28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f2c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f30:	6011      	str	r1, [r2, #0]
  return result;
 8004f32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f36:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	fab2 f282 	clz	r2, r2
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	f002 021f 	and.w	r2, r2, #31
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d184      	bne.n	8004e62 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f58:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d105      	bne.n	8004f6c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f60:	4b23      	ldr	r3, [pc, #140]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	4a22      	ldr	r2, [pc, #136]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8242 	beq.w	8005402 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ff0 <HAL_RCC_OscConfig+0xc58>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	f000 8213 	beq.w	80053b2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	f040 8162 	bne.w	8005262 <HAL_RCC_OscConfig+0xeca>
 8004f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004fa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	fa93 f2a3 	rbit	r2, r3
 8004fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004fc2:	601a      	str	r2, [r3, #0]
  return result;
 8004fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004fcc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fce:	fab3 f383 	clz	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7fe fc4c 	bl	8003880 <HAL_GetTick>
 8004fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fec:	e00c      	b.n	8005008 <HAL_RCC_OscConfig+0xc70>
 8004fee:	bf00      	nop
 8004ff0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff4:	f7fe fc44 	bl	8003880 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e1fd      	b.n	8005404 <HAL_RCC_OscConfig+0x106c>
 8005008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005010:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800501a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	fa93 f2a3 	rbit	r2, r3
 8005024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005028:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800502c:	601a      	str	r2, [r3, #0]
  return result;
 800502e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005032:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005036:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005038:	fab3 f383 	clz	r3, r3
 800503c:	b2db      	uxtb	r3, r3
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	b2db      	uxtb	r3, r3
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	d102      	bne.n	8005052 <HAL_RCC_OscConfig+0xcba>
 800504c:	4bb0      	ldr	r3, [pc, #704]	; (8005310 <HAL_RCC_OscConfig+0xf78>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	e027      	b.n	80050a2 <HAL_RCC_OscConfig+0xd0a>
 8005052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005056:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800505a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800505e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005064:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	fa93 f2a3 	rbit	r2, r3
 800506e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005072:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	fa93 f2a3 	rbit	r2, r3
 8005094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005098:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	4b9c      	ldr	r3, [pc, #624]	; (8005310 <HAL_RCC_OscConfig+0xf78>)
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050a6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80050aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050ae:	6011      	str	r1, [r2, #0]
 80050b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050b4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	fa92 f1a2 	rbit	r1, r2
 80050be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050c2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80050c6:	6011      	str	r1, [r2, #0]
  return result;
 80050c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050cc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	fab2 f282 	clz	r2, r2
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	f042 0220 	orr.w	r2, r2, #32
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	f002 021f 	and.w	r2, r2, #31
 80050e2:	2101      	movs	r1, #1
 80050e4:	fa01 f202 	lsl.w	r2, r1, r2
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d182      	bne.n	8004ff4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050ee:	4b88      	ldr	r3, [pc, #544]	; (8005310 <HAL_RCC_OscConfig+0xf78>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	430b      	orrs	r3, r1
 8005110:	497f      	ldr	r1, [pc, #508]	; (8005310 <HAL_RCC_OscConfig+0xf78>)
 8005112:	4313      	orrs	r3, r2
 8005114:	604b      	str	r3, [r1, #4]
 8005116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800511e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005128:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	fa93 f2a3 	rbit	r2, r3
 8005132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005136:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800513a:	601a      	str	r2, [r3, #0]
  return result;
 800513c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005140:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005144:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005146:	fab3 f383 	clz	r3, r3
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005150:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	461a      	mov	r2, r3
 8005158:	2301      	movs	r3, #1
 800515a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515c:	f7fe fb90 	bl	8003880 <HAL_GetTick>
 8005160:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005164:	e009      	b.n	800517a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005166:	f7fe fb8b 	bl	8003880 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e144      	b.n	8005404 <HAL_RCC_OscConfig+0x106c>
 800517a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	fa93 f2a3 	rbit	r2, r3
 8005196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800519a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800519e:	601a      	str	r2, [r3, #0]
  return result;
 80051a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80051a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051aa:	fab3 f383 	clz	r3, r3
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d102      	bne.n	80051c4 <HAL_RCC_OscConfig+0xe2c>
 80051be:	4b54      	ldr	r3, [pc, #336]	; (8005310 <HAL_RCC_OscConfig+0xf78>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	e027      	b.n	8005214 <HAL_RCC_OscConfig+0xe7c>
 80051c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80051cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	fa93 f2a3 	rbit	r2, r3
 80051e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80051f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	fa93 f2a3 	rbit	r2, r3
 8005206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	4b3f      	ldr	r3, [pc, #252]	; (8005310 <HAL_RCC_OscConfig+0xf78>)
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005218:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800521c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005220:	6011      	str	r1, [r2, #0]
 8005222:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005226:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	fa92 f1a2 	rbit	r1, r2
 8005230:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005234:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005238:	6011      	str	r1, [r2, #0]
  return result;
 800523a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800523e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	fab2 f282 	clz	r2, r2
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	f042 0220 	orr.w	r2, r2, #32
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	f002 021f 	and.w	r2, r2, #31
 8005254:	2101      	movs	r1, #1
 8005256:	fa01 f202 	lsl.w	r2, r1, r2
 800525a:	4013      	ands	r3, r2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d082      	beq.n	8005166 <HAL_RCC_OscConfig+0xdce>
 8005260:	e0cf      	b.n	8005402 <HAL_RCC_OscConfig+0x106a>
 8005262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005266:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800526a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800526e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005274:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	fa93 f2a3 	rbit	r2, r3
 800527e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005282:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005286:	601a      	str	r2, [r3, #0]
  return result;
 8005288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005290:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005292:	fab3 f383 	clz	r3, r3
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800529c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	461a      	mov	r2, r3
 80052a4:	2300      	movs	r3, #0
 80052a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a8:	f7fe faea 	bl	8003880 <HAL_GetTick>
 80052ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052b0:	e009      	b.n	80052c6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b2:	f7fe fae5 	bl	8003880 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e09e      	b.n	8005404 <HAL_RCC_OscConfig+0x106c>
 80052c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80052ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	fa93 f2a3 	rbit	r2, r3
 80052e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052ea:	601a      	str	r2, [r3, #0]
  return result;
 80052ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052f6:	fab3 f383 	clz	r3, r3
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	d104      	bne.n	8005314 <HAL_RCC_OscConfig+0xf7c>
 800530a:	4b01      	ldr	r3, [pc, #4]	; (8005310 <HAL_RCC_OscConfig+0xf78>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	e029      	b.n	8005364 <HAL_RCC_OscConfig+0xfcc>
 8005310:	40021000 	.word	0x40021000
 8005314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005318:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800531c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005326:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	fa93 f2a3 	rbit	r2, r3
 8005330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005334:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800533e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005342:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	fa93 f2a3 	rbit	r2, r3
 8005356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	4b2b      	ldr	r3, [pc, #172]	; (8005410 <HAL_RCC_OscConfig+0x1078>)
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005368:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800536c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005370:	6011      	str	r1, [r2, #0]
 8005372:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005376:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	fa92 f1a2 	rbit	r1, r2
 8005380:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005384:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005388:	6011      	str	r1, [r2, #0]
  return result;
 800538a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800538e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	fab2 f282 	clz	r2, r2
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	f042 0220 	orr.w	r2, r2, #32
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	f002 021f 	and.w	r2, r2, #31
 80053a4:	2101      	movs	r1, #1
 80053a6:	fa01 f202 	lsl.w	r2, r1, r2
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d180      	bne.n	80052b2 <HAL_RCC_OscConfig+0xf1a>
 80053b0:	e027      	b.n	8005402 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e01e      	b.n	8005404 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053c6:	4b12      	ldr	r3, [pc, #72]	; (8005410 <HAL_RCC_OscConfig+0x1078>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80053d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80053d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d10b      	bne.n	80053fe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80053e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80053ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80053ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d001      	beq.n	8005402 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000

08005414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b09e      	sub	sp, #120	; 0x78
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e162      	b.n	80056f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800542c:	4b90      	ldr	r3, [pc, #576]	; (8005670 <HAL_RCC_ClockConfig+0x25c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d910      	bls.n	800545c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543a:	4b8d      	ldr	r3, [pc, #564]	; (8005670 <HAL_RCC_ClockConfig+0x25c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 0207 	bic.w	r2, r3, #7
 8005442:	498b      	ldr	r1, [pc, #556]	; (8005670 <HAL_RCC_ClockConfig+0x25c>)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	4313      	orrs	r3, r2
 8005448:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544a:	4b89      	ldr	r3, [pc, #548]	; (8005670 <HAL_RCC_ClockConfig+0x25c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d001      	beq.n	800545c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e14a      	b.n	80056f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005468:	4b82      	ldr	r3, [pc, #520]	; (8005674 <HAL_RCC_ClockConfig+0x260>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	497f      	ldr	r1, [pc, #508]	; (8005674 <HAL_RCC_ClockConfig+0x260>)
 8005476:	4313      	orrs	r3, r2
 8005478:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 80dc 	beq.w	8005640 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d13c      	bne.n	800550a <HAL_RCC_ClockConfig+0xf6>
 8005490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005494:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005498:	fa93 f3a3 	rbit	r3, r3
 800549c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800549e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a0:	fab3 f383 	clz	r3, r3
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d102      	bne.n	80054ba <HAL_RCC_ClockConfig+0xa6>
 80054b4:	4b6f      	ldr	r3, [pc, #444]	; (8005674 <HAL_RCC_ClockConfig+0x260>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	e00f      	b.n	80054da <HAL_RCC_ClockConfig+0xc6>
 80054ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054c2:	fa93 f3a3 	rbit	r3, r3
 80054c6:	667b      	str	r3, [r7, #100]	; 0x64
 80054c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054cc:	663b      	str	r3, [r7, #96]	; 0x60
 80054ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054d0:	fa93 f3a3 	rbit	r3, r3
 80054d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054d6:	4b67      	ldr	r3, [pc, #412]	; (8005674 <HAL_RCC_ClockConfig+0x260>)
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054de:	65ba      	str	r2, [r7, #88]	; 0x58
 80054e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054e2:	fa92 f2a2 	rbit	r2, r2
 80054e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80054e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054ea:	fab2 f282 	clz	r2, r2
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	f042 0220 	orr.w	r2, r2, #32
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	f002 021f 	and.w	r2, r2, #31
 80054fa:	2101      	movs	r1, #1
 80054fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005500:	4013      	ands	r3, r2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d17b      	bne.n	80055fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e0f3      	b.n	80056f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d13c      	bne.n	800558c <HAL_RCC_ClockConfig+0x178>
 8005512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005516:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800551a:	fa93 f3a3 	rbit	r3, r3
 800551e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005522:	fab3 f383 	clz	r3, r3
 8005526:	b2db      	uxtb	r3, r3
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	d102      	bne.n	800553c <HAL_RCC_ClockConfig+0x128>
 8005536:	4b4f      	ldr	r3, [pc, #316]	; (8005674 <HAL_RCC_ClockConfig+0x260>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	e00f      	b.n	800555c <HAL_RCC_ClockConfig+0x148>
 800553c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005540:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005544:	fa93 f3a3 	rbit	r3, r3
 8005548:	647b      	str	r3, [r7, #68]	; 0x44
 800554a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800554e:	643b      	str	r3, [r7, #64]	; 0x40
 8005550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005552:	fa93 f3a3 	rbit	r3, r3
 8005556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005558:	4b46      	ldr	r3, [pc, #280]	; (8005674 <HAL_RCC_ClockConfig+0x260>)
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005560:	63ba      	str	r2, [r7, #56]	; 0x38
 8005562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005564:	fa92 f2a2 	rbit	r2, r2
 8005568:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800556a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800556c:	fab2 f282 	clz	r2, r2
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	f042 0220 	orr.w	r2, r2, #32
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	f002 021f 	and.w	r2, r2, #31
 800557c:	2101      	movs	r1, #1
 800557e:	fa01 f202 	lsl.w	r2, r1, r2
 8005582:	4013      	ands	r3, r2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d13a      	bne.n	80055fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0b2      	b.n	80056f2 <HAL_RCC_ClockConfig+0x2de>
 800558c:	2302      	movs	r3, #2
 800558e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	fa93 f3a3 	rbit	r3, r3
 8005596:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800559a:	fab3 f383 	clz	r3, r3
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	f043 0301 	orr.w	r3, r3, #1
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d102      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x1a0>
 80055ae:	4b31      	ldr	r3, [pc, #196]	; (8005674 <HAL_RCC_ClockConfig+0x260>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	e00d      	b.n	80055d0 <HAL_RCC_ClockConfig+0x1bc>
 80055b4:	2302      	movs	r3, #2
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	fa93 f3a3 	rbit	r3, r3
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
 80055c0:	2302      	movs	r3, #2
 80055c2:	623b      	str	r3, [r7, #32]
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	fa93 f3a3 	rbit	r3, r3
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	4b29      	ldr	r3, [pc, #164]	; (8005674 <HAL_RCC_ClockConfig+0x260>)
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	2202      	movs	r2, #2
 80055d2:	61ba      	str	r2, [r7, #24]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	fa92 f2a2 	rbit	r2, r2
 80055da:	617a      	str	r2, [r7, #20]
  return result;
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	fab2 f282 	clz	r2, r2
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	f042 0220 	orr.w	r2, r2, #32
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	f002 021f 	and.w	r2, r2, #31
 80055ee:	2101      	movs	r1, #1
 80055f0:	fa01 f202 	lsl.w	r2, r1, r2
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e079      	b.n	80056f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055fe:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <HAL_RCC_ClockConfig+0x260>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f023 0203 	bic.w	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	491a      	ldr	r1, [pc, #104]	; (8005674 <HAL_RCC_ClockConfig+0x260>)
 800560c:	4313      	orrs	r3, r2
 800560e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005610:	f7fe f936 	bl	8003880 <HAL_GetTick>
 8005614:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005616:	e00a      	b.n	800562e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005618:	f7fe f932 	bl	8003880 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f241 3288 	movw	r2, #5000	; 0x1388
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e061      	b.n	80056f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562e:	4b11      	ldr	r3, [pc, #68]	; (8005674 <HAL_RCC_ClockConfig+0x260>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f003 020c 	and.w	r2, r3, #12
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	429a      	cmp	r2, r3
 800563e:	d1eb      	bne.n	8005618 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_RCC_ClockConfig+0x25c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d214      	bcs.n	8005678 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564e:	4b08      	ldr	r3, [pc, #32]	; (8005670 <HAL_RCC_ClockConfig+0x25c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f023 0207 	bic.w	r2, r3, #7
 8005656:	4906      	ldr	r1, [pc, #24]	; (8005670 <HAL_RCC_ClockConfig+0x25c>)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	4313      	orrs	r3, r2
 800565c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800565e:	4b04      	ldr	r3, [pc, #16]	; (8005670 <HAL_RCC_ClockConfig+0x25c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d005      	beq.n	8005678 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e040      	b.n	80056f2 <HAL_RCC_ClockConfig+0x2de>
 8005670:	40022000 	.word	0x40022000
 8005674:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <HAL_RCC_ClockConfig+0x2e8>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	491a      	ldr	r1, [pc, #104]	; (80056fc <HAL_RCC_ClockConfig+0x2e8>)
 8005692:	4313      	orrs	r3, r2
 8005694:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056a2:	4b16      	ldr	r3, [pc, #88]	; (80056fc <HAL_RCC_ClockConfig+0x2e8>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	4912      	ldr	r1, [pc, #72]	; (80056fc <HAL_RCC_ClockConfig+0x2e8>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056b6:	f000 f829 	bl	800570c <HAL_RCC_GetSysClockFreq>
 80056ba:	4601      	mov	r1, r0
 80056bc:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <HAL_RCC_ClockConfig+0x2e8>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056c4:	22f0      	movs	r2, #240	; 0xf0
 80056c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	fa92 f2a2 	rbit	r2, r2
 80056ce:	60fa      	str	r2, [r7, #12]
  return result;
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	fab2 f282 	clz	r2, r2
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	40d3      	lsrs	r3, r2
 80056da:	4a09      	ldr	r2, [pc, #36]	; (8005700 <HAL_RCC_ClockConfig+0x2ec>)
 80056dc:	5cd3      	ldrb	r3, [r2, r3]
 80056de:	fa21 f303 	lsr.w	r3, r1, r3
 80056e2:	4a08      	ldr	r2, [pc, #32]	; (8005704 <HAL_RCC_ClockConfig+0x2f0>)
 80056e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80056e6:	4b08      	ldr	r3, [pc, #32]	; (8005708 <HAL_RCC_ClockConfig+0x2f4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe f884 	bl	80037f8 <HAL_InitTick>
  
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3778      	adds	r7, #120	; 0x78
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40021000 	.word	0x40021000
 8005700:	080096a8 	.word	0x080096a8
 8005704:	20000104 	.word	0x20000104
 8005708:	20000108 	.word	0x20000108

0800570c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800570c:	b480      	push	{r7}
 800570e:	b08b      	sub	sp, #44	; 0x2c
 8005710:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	2300      	movs	r3, #0
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005726:	4b29      	ldr	r3, [pc, #164]	; (80057cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f003 030c 	and.w	r3, r3, #12
 8005732:	2b04      	cmp	r3, #4
 8005734:	d002      	beq.n	800573c <HAL_RCC_GetSysClockFreq+0x30>
 8005736:	2b08      	cmp	r3, #8
 8005738:	d003      	beq.n	8005742 <HAL_RCC_GetSysClockFreq+0x36>
 800573a:	e03c      	b.n	80057b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800573c:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800573e:	623b      	str	r3, [r7, #32]
      break;
 8005740:	e03c      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005748:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800574c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	fa92 f2a2 	rbit	r2, r2
 8005754:	607a      	str	r2, [r7, #4]
  return result;
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	fab2 f282 	clz	r2, r2
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	40d3      	lsrs	r3, r2
 8005760:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005762:	5cd3      	ldrb	r3, [r2, r3]
 8005764:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005766:	4b19      	ldr	r3, [pc, #100]	; (80057cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	220f      	movs	r2, #15
 8005770:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	fa92 f2a2 	rbit	r2, r2
 8005778:	60fa      	str	r2, [r7, #12]
  return result;
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	fab2 f282 	clz	r2, r2
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	40d3      	lsrs	r3, r2
 8005784:	4a14      	ldr	r2, [pc, #80]	; (80057d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005786:	5cd3      	ldrb	r3, [r2, r3]
 8005788:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005794:	4a0e      	ldr	r2, [pc, #56]	; (80057d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	fbb2 f2f3 	udiv	r2, r2, r3
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	fb02 f303 	mul.w	r3, r2, r3
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
 80057a4:	e004      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	4a0c      	ldr	r2, [pc, #48]	; (80057dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80057aa:	fb02 f303 	mul.w	r3, r2, r3
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	623b      	str	r3, [r7, #32]
      break;
 80057b4:	e002      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057b6:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057b8:	623b      	str	r3, [r7, #32]
      break;
 80057ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057bc:	6a3b      	ldr	r3, [r7, #32]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	372c      	adds	r7, #44	; 0x2c
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40021000 	.word	0x40021000
 80057d0:	007a1200 	.word	0x007a1200
 80057d4:	080096c0 	.word	0x080096c0
 80057d8:	080096d0 	.word	0x080096d0
 80057dc:	003d0900 	.word	0x003d0900

080057e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057e4:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057e6:	681b      	ldr	r3, [r3, #0]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000104 	.word	0x20000104

080057f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80057fe:	f7ff ffef 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8005802:	4601      	mov	r1, r0
 8005804:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800580c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005810:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	fa92 f2a2 	rbit	r2, r2
 8005818:	603a      	str	r2, [r7, #0]
  return result;
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	fab2 f282 	clz	r2, r2
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	40d3      	lsrs	r3, r2
 8005824:	4a04      	ldr	r2, [pc, #16]	; (8005838 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005826:	5cd3      	ldrb	r3, [r2, r3]
 8005828:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40021000 	.word	0x40021000
 8005838:	080096b8 	.word	0x080096b8

0800583c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005842:	f7ff ffcd 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8005846:	4601      	mov	r1, r0
 8005848:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005850:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005854:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	fa92 f2a2 	rbit	r2, r2
 800585c:	603a      	str	r2, [r7, #0]
  return result;
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	fab2 f282 	clz	r2, r2
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	40d3      	lsrs	r3, r2
 8005868:	4a04      	ldr	r2, [pc, #16]	; (800587c <HAL_RCC_GetPCLK2Freq+0x40>)
 800586a:	5cd3      	ldrb	r3, [r2, r3]
 800586c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40021000 	.word	0x40021000
 800587c:	080096b8 	.word	0x080096b8

08005880 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b092      	sub	sp, #72	; 0x48
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005890:	2300      	movs	r3, #0
 8005892:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80d4 	beq.w	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058a4:	4b4e      	ldr	r3, [pc, #312]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10e      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b0:	4b4b      	ldr	r3, [pc, #300]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	4a4a      	ldr	r2, [pc, #296]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ba:	61d3      	str	r3, [r2, #28]
 80058bc:	4b48      	ldr	r3, [pc, #288]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c8:	2301      	movs	r3, #1
 80058ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ce:	4b45      	ldr	r3, [pc, #276]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d118      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058da:	4b42      	ldr	r3, [pc, #264]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a41      	ldr	r2, [pc, #260]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058e6:	f7fd ffcb 	bl	8003880 <HAL_GetTick>
 80058ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ec:	e008      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ee:	f7fd ffc7 	bl	8003880 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b64      	cmp	r3, #100	; 0x64
 80058fa:	d901      	bls.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e169      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005900:	4b38      	ldr	r3, [pc, #224]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0f0      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800590c:	4b34      	ldr	r3, [pc, #208]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8084 	beq.w	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005928:	429a      	cmp	r2, r3
 800592a:	d07c      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800592c:	4b2c      	ldr	r3, [pc, #176]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800593a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	fa93 f3a3 	rbit	r3, r3
 8005942:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005946:	fab3 f383 	clz	r3, r3
 800594a:	b2db      	uxtb	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	4b26      	ldr	r3, [pc, #152]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	461a      	mov	r2, r3
 8005956:	2301      	movs	r3, #1
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800595e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	fa93 f3a3 	rbit	r3, r3
 8005966:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800596a:	fab3 f383 	clz	r3, r3
 800596e:	b2db      	uxtb	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	461a      	mov	r2, r3
 800597a:	2300      	movs	r3, #0
 800597c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800597e:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005982:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d04b      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800598e:	f7fd ff77 	bl	8003880 <HAL_GetTick>
 8005992:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005994:	e00a      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005996:	f7fd ff73 	bl	8003880 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d901      	bls.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e113      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80059ac:	2302      	movs	r3, #2
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	fa93 f3a3 	rbit	r3, r3
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
 80059b8:	2302      	movs	r3, #2
 80059ba:	623b      	str	r3, [r7, #32]
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	fa93 f3a3 	rbit	r3, r3
 80059c2:	61fb      	str	r3, [r7, #28]
  return result;
 80059c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c6:	fab3 f383 	clz	r3, r3
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f043 0302 	orr.w	r3, r3, #2
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d108      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80059da:	4b01      	ldr	r3, [pc, #4]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	e00d      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80059e0:	40021000 	.word	0x40021000
 80059e4:	40007000 	.word	0x40007000
 80059e8:	10908100 	.word	0x10908100
 80059ec:	2302      	movs	r3, #2
 80059ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	fa93 f3a3 	rbit	r3, r3
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	4b78      	ldr	r3, [pc, #480]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	2202      	movs	r2, #2
 80059fe:	613a      	str	r2, [r7, #16]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	fa92 f2a2 	rbit	r2, r2
 8005a06:	60fa      	str	r2, [r7, #12]
  return result;
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	fab2 f282 	clz	r2, r2
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	f002 021f 	and.w	r2, r2, #31
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0b7      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005a26:	4b6d      	ldr	r3, [pc, #436]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	496a      	ldr	r1, [pc, #424]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d105      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a40:	4b66      	ldr	r3, [pc, #408]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	4a65      	ldr	r2, [pc, #404]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a58:	4b60      	ldr	r3, [pc, #384]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	f023 0203 	bic.w	r2, r3, #3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	495d      	ldr	r1, [pc, #372]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a76:	4b59      	ldr	r3, [pc, #356]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	4956      	ldr	r1, [pc, #344]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a94:	4b51      	ldr	r3, [pc, #324]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	494e      	ldr	r1, [pc, #312]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d008      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ab2:	4b4a      	ldr	r3, [pc, #296]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	f023 0210 	bic.w	r2, r3, #16
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	4947      	ldr	r1, [pc, #284]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005ad0:	4b42      	ldr	r3, [pc, #264]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	493f      	ldr	r1, [pc, #252]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d008      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005aee:	4b3b      	ldr	r3, [pc, #236]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	f023 0220 	bic.w	r2, r3, #32
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	4938      	ldr	r1, [pc, #224]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d008      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b0c:	4b33      	ldr	r3, [pc, #204]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	4930      	ldr	r1, [pc, #192]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b2a:	4b2c      	ldr	r3, [pc, #176]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	4929      	ldr	r1, [pc, #164]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b48:	4b24      	ldr	r3, [pc, #144]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	4921      	ldr	r1, [pc, #132]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d008      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b66:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	491a      	ldr	r1, [pc, #104]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005b84:	4b15      	ldr	r3, [pc, #84]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	4912      	ldr	r1, [pc, #72]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005ba2:	4b0e      	ldr	r3, [pc, #56]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	490b      	ldr	r1, [pc, #44]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bcc:	4903      	ldr	r1, [pc, #12]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3748      	adds	r7, #72	; 0x48
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40021000 	.word	0x40021000

08005be0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e073      	b.n	8005cde <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	7f5b      	ldrb	r3, [r3, #29]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d105      	bne.n	8005c0c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fd fb24 	bl	8003254 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	2b10      	cmp	r3, #16
 8005c1e:	d055      	beq.n	8005ccc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	22ca      	movs	r2, #202	; 0xca
 8005c26:	625a      	str	r2, [r3, #36]	; 0x24
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2253      	movs	r2, #83	; 0x53
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fa49 	bl	80060c8 <RTC_EnterInitMode>
 8005c36:	4603      	mov	r3, r0
 8005c38:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d12c      	bne.n	8005c9a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6812      	ldr	r2, [r2, #0]
 8005c4a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c52:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6899      	ldr	r1, [r3, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	68d2      	ldr	r2, [r2, #12]
 8005c7a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6919      	ldr	r1, [r3, #16]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	041a      	lsls	r2, r3, #16
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fa50 	bl	8006136 <RTC_ExitInitMode>
 8005c96:	4603      	mov	r3, r0
 8005c98:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d110      	bne.n	8005cc2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cae:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	22ff      	movs	r2, #255	; 0xff
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24
 8005cca:	e001      	b.n	8005cd0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ce6:	b590      	push	{r4, r7, lr}
 8005ce8:	b087      	sub	sp, #28
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	7f1b      	ldrb	r3, [r3, #28]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_RTC_SetTime+0x1c>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e087      	b.n	8005e12 <HAL_RTC_SetTime+0x12c>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d126      	bne.n	8005d62 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d102      	bne.n	8005d28 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2200      	movs	r2, #0
 8005d26:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fa27 	bl	8006180 <RTC_ByteToBcd2>
 8005d32:	4603      	mov	r3, r0
 8005d34:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fa20 	bl	8006180 <RTC_ByteToBcd2>
 8005d40:	4603      	mov	r3, r0
 8005d42:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d44:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	789b      	ldrb	r3, [r3, #2]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fa18 	bl	8006180 <RTC_ByteToBcd2>
 8005d50:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d52:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	78db      	ldrb	r3, [r3, #3]
 8005d5a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	e018      	b.n	8005d94 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2200      	movs	r2, #0
 8005d74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	785b      	ldrb	r3, [r3, #1]
 8005d80:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d82:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d88:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	78db      	ldrb	r3, [r3, #3]
 8005d8e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	22ca      	movs	r2, #202	; 0xca
 8005d9a:	625a      	str	r2, [r3, #36]	; 0x24
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2253      	movs	r2, #83	; 0x53
 8005da2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f98f 	bl	80060c8 <RTC_EnterInitMode>
 8005daa:	4603      	mov	r3, r0
 8005dac:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005dae:	7cfb      	ldrb	r3, [r7, #19]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d120      	bne.n	8005df6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005dbe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005dc2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005dd2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6899      	ldr	r1, [r3, #8]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f9a2 	bl	8006136 <RTC_ExitInitMode>
 8005df2:	4603      	mov	r3, r0
 8005df4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005df6:	7cfb      	ldrb	r3, [r7, #19]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	22ff      	movs	r2, #255	; 0xff
 8005e08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	771a      	strb	r2, [r3, #28]

  return status;
 8005e10:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd90      	pop	{r4, r7, pc}

08005e1a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005e4c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005e50:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	0c1b      	lsrs	r3, r3, #16
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	0a1b      	lsrs	r3, r3, #8
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	0d9b      	lsrs	r3, r3, #22
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d11a      	bne.n	8005ecc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 f98e 	bl	80061bc <RTC_Bcd2ToByte>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 f985 	bl	80061bc <RTC_Bcd2ToByte>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	789b      	ldrb	r3, [r3, #2]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 f97c 	bl	80061bc <RTC_Bcd2ToByte>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ed6:	b590      	push	{r4, r7, lr}
 8005ed8:	b087      	sub	sp, #28
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	7f1b      	ldrb	r3, [r3, #28]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_RTC_SetDate+0x1c>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e071      	b.n	8005fd6 <HAL_RTC_SetDate+0x100>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2202      	movs	r2, #2
 8005efc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10e      	bne.n	8005f22 <HAL_RTC_SetDate+0x4c>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	f023 0310 	bic.w	r3, r3, #16
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	330a      	adds	r3, #10
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d11c      	bne.n	8005f62 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	78db      	ldrb	r3, [r3, #3]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 f927 	bl	8006180 <RTC_ByteToBcd2>
 8005f32:	4603      	mov	r3, r0
 8005f34:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f920 	bl	8006180 <RTC_ByteToBcd2>
 8005f40:	4603      	mov	r3, r0
 8005f42:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f44:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	789b      	ldrb	r3, [r3, #2]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 f918 	bl	8006180 <RTC_ByteToBcd2>
 8005f50:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f52:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	e00e      	b.n	8005f80 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	78db      	ldrb	r3, [r3, #3]
 8005f66:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	785b      	ldrb	r3, [r3, #1]
 8005f6c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f6e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f74:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	22ca      	movs	r2, #202	; 0xca
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2253      	movs	r2, #83	; 0x53
 8005f8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f899 	bl	80060c8 <RTC_EnterInitMode>
 8005f96:	4603      	mov	r3, r0
 8005f98:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005f9a:	7cfb      	ldrb	r3, [r7, #19]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10c      	bne.n	8005fba <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005faa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fae:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f8c0 	bl	8006136 <RTC_ExitInitMode>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005fba:	7cfb      	ldrb	r3, [r7, #19]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d102      	bne.n	8005fc6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	22ff      	movs	r2, #255	; 0xff
 8005fcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	771a      	strb	r2, [r3, #28]

  return status;
 8005fd4:	7cfb      	ldrb	r3, [r7, #19]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd90      	pop	{r4, r7, pc}

08005fde <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ff8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	0c1b      	lsrs	r3, r3, #16
 8006002:	b2da      	uxtb	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	0a1b      	lsrs	r3, r3, #8
 800600c:	b2db      	uxtb	r3, r3
 800600e:	f003 031f 	and.w	r3, r3, #31
 8006012:	b2da      	uxtb	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006020:	b2da      	uxtb	r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	0b5b      	lsrs	r3, r3, #13
 800602a:	b2db      	uxtb	r3, r3
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	b2da      	uxtb	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d11a      	bne.n	8006072 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	78db      	ldrb	r3, [r3, #3]
 8006040:	4618      	mov	r0, r3
 8006042:	f000 f8bb 	bl	80061bc <RTC_Bcd2ToByte>
 8006046:	4603      	mov	r3, r0
 8006048:	461a      	mov	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 f8b2 	bl	80061bc <RTC_Bcd2ToByte>
 8006058:	4603      	mov	r3, r0
 800605a:	461a      	mov	r2, r3
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	789b      	ldrb	r3, [r3, #2]
 8006064:	4618      	mov	r0, r3
 8006066:	f000 f8a9 	bl	80061bc <RTC_Bcd2ToByte>
 800606a:	4603      	mov	r3, r0
 800606c:	461a      	mov	r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a0d      	ldr	r2, [pc, #52]	; (80060c4 <HAL_RTC_WaitForSynchro+0x48>)
 800608e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006090:	f7fd fbf6 	bl	8003880 <HAL_GetTick>
 8006094:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006096:	e009      	b.n	80060ac <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006098:	f7fd fbf2 	bl	8003880 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060a6:	d901      	bls.n	80060ac <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e007      	b.n	80060bc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0ee      	beq.n	8006098 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	0001ff5f 	.word	0x0001ff5f

080060c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d122      	bne.n	800612c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060f6:	f7fd fbc3 	bl	8003880 <HAL_GetTick>
 80060fa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80060fc:	e00c      	b.n	8006118 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060fe:	f7fd fbbf 	bl	8003880 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800610c:	d904      	bls.n	8006118 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2204      	movs	r2, #4
 8006112:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d102      	bne.n	800612c <RTC_EnterInitMode+0x64>
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d1e8      	bne.n	80060fe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800612c:	7bfb      	ldrb	r3, [r7, #15]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006150:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff ff8b 	bl	800607c <HAL_RTC_WaitForSynchro>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d004      	beq.n	8006176 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2204      	movs	r2, #4
 8006170:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006176:	7bfb      	ldrb	r3, [r7, #15]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800618e:	e005      	b.n	800619c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3301      	adds	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006196:	79fb      	ldrb	r3, [r7, #7]
 8006198:	3b0a      	subs	r3, #10
 800619a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	2b09      	cmp	r3, #9
 80061a0:	d8f6      	bhi.n	8006190 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	b2db      	uxtb	r3, r3
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	091b      	lsrs	r3, r3, #4
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	4413      	add	r3, r2
 80061ea:	b2db      	uxtb	r3, r3
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e09d      	b.n	8006346 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	d108      	bne.n	8006224 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800621a:	d009      	beq.n	8006230 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	61da      	str	r2, [r3, #28]
 8006222:	e005      	b.n	8006230 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fd f828 	bl	80032a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006266:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006270:	d902      	bls.n	8006278 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	e002      	b.n	800627e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800627c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006286:	d007      	beq.n	8006298 <HAL_SPI_Init+0xa0>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006290:	d002      	beq.n	8006298 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062da:	ea42 0103 	orr.w	r1, r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	0c1b      	lsrs	r3, r3, #16
 80062f4:	f003 0204 	and.w	r2, r3, #4
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	f003 0310 	and.w	r3, r3, #16
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006314:	ea42 0103 	orr.w	r1, r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006334:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e049      	b.n	80063f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d106      	bne.n	800637a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7fc ffd5 	bl	8003324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2202      	movs	r2, #2
 800637e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3304      	adds	r3, #4
 800638a:	4619      	mov	r1, r3
 800638c:	4610      	mov	r0, r2
 800638e:	f000 faaf 	bl	80068f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	d001      	beq.n	8006414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e04a      	b.n	80064aa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a21      	ldr	r2, [pc, #132]	; (80064b8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d018      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x6c>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643e:	d013      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x6c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1d      	ldr	r2, [pc, #116]	; (80064bc <HAL_TIM_Base_Start_IT+0xc0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00e      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x6c>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a1c      	ldr	r2, [pc, #112]	; (80064c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d009      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x6c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d004      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x6c>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a19      	ldr	r2, [pc, #100]	; (80064c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d115      	bne.n	8006494 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	4b17      	ldr	r3, [pc, #92]	; (80064cc <HAL_TIM_Base_Start_IT+0xd0>)
 8006470:	4013      	ands	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b06      	cmp	r3, #6
 8006478:	d015      	beq.n	80064a6 <HAL_TIM_Base_Start_IT+0xaa>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006480:	d011      	beq.n	80064a6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0201 	orr.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006492:	e008      	b.n	80064a6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0201 	orr.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	e000      	b.n	80064a8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40012c00 	.word	0x40012c00
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40013400 	.word	0x40013400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	00010007 	.word	0x00010007

080064d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d122      	bne.n	800652c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d11b      	bne.n	800652c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0202 	mvn.w	r2, #2
 80064fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f9ce 	bl	80068b4 <HAL_TIM_IC_CaptureCallback>
 8006518:	e005      	b.n	8006526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f9c0 	bl	80068a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f9d1 	bl	80068c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b04      	cmp	r3, #4
 8006538:	d122      	bne.n	8006580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b04      	cmp	r3, #4
 8006546:	d11b      	bne.n	8006580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0204 	mvn.w	r2, #4
 8006550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f9a4 	bl	80068b4 <HAL_TIM_IC_CaptureCallback>
 800656c:	e005      	b.n	800657a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f996 	bl	80068a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f9a7 	bl	80068c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b08      	cmp	r3, #8
 800658c:	d122      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b08      	cmp	r3, #8
 800659a:	d11b      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f06f 0208 	mvn.w	r2, #8
 80065a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2204      	movs	r2, #4
 80065aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f97a 	bl	80068b4 <HAL_TIM_IC_CaptureCallback>
 80065c0:	e005      	b.n	80065ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f96c 	bl	80068a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f97d 	bl	80068c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d122      	bne.n	8006628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d11b      	bne.n	8006628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0210 	mvn.w	r2, #16
 80065f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2208      	movs	r2, #8
 80065fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f950 	bl	80068b4 <HAL_TIM_IC_CaptureCallback>
 8006614:	e005      	b.n	8006622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f942 	bl	80068a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f953 	bl	80068c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b01      	cmp	r3, #1
 8006634:	d10e      	bne.n	8006654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	d107      	bne.n	8006654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0201 	mvn.w	r2, #1
 800664c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fb fc62 	bl	8001f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665e:	2b80      	cmp	r3, #128	; 0x80
 8006660:	d10e      	bne.n	8006680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666c:	2b80      	cmp	r3, #128	; 0x80
 800666e:	d107      	bne.n	8006680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 faec 	bl	8006c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668e:	d10e      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d107      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fadf 	bl	8006c6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b40      	cmp	r3, #64	; 0x40
 80066ba:	d10e      	bne.n	80066da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d107      	bne.n	80066da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f901 	bl	80068dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d10e      	bne.n	8006706 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d107      	bne.n	8006706 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f06f 0220 	mvn.w	r2, #32
 80066fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fa9f 	bl	8006c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_TIM_ConfigClockSource+0x1c>
 8006726:	2302      	movs	r3, #2
 8006728:	e0b6      	b.n	8006898 <HAL_TIM_ConfigClockSource+0x18a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2202      	movs	r2, #2
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006748:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800674c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006754:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006766:	d03e      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0xd8>
 8006768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676c:	f200 8087 	bhi.w	800687e <HAL_TIM_ConfigClockSource+0x170>
 8006770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006774:	f000 8086 	beq.w	8006884 <HAL_TIM_ConfigClockSource+0x176>
 8006778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677c:	d87f      	bhi.n	800687e <HAL_TIM_ConfigClockSource+0x170>
 800677e:	2b70      	cmp	r3, #112	; 0x70
 8006780:	d01a      	beq.n	80067b8 <HAL_TIM_ConfigClockSource+0xaa>
 8006782:	2b70      	cmp	r3, #112	; 0x70
 8006784:	d87b      	bhi.n	800687e <HAL_TIM_ConfigClockSource+0x170>
 8006786:	2b60      	cmp	r3, #96	; 0x60
 8006788:	d050      	beq.n	800682c <HAL_TIM_ConfigClockSource+0x11e>
 800678a:	2b60      	cmp	r3, #96	; 0x60
 800678c:	d877      	bhi.n	800687e <HAL_TIM_ConfigClockSource+0x170>
 800678e:	2b50      	cmp	r3, #80	; 0x50
 8006790:	d03c      	beq.n	800680c <HAL_TIM_ConfigClockSource+0xfe>
 8006792:	2b50      	cmp	r3, #80	; 0x50
 8006794:	d873      	bhi.n	800687e <HAL_TIM_ConfigClockSource+0x170>
 8006796:	2b40      	cmp	r3, #64	; 0x40
 8006798:	d058      	beq.n	800684c <HAL_TIM_ConfigClockSource+0x13e>
 800679a:	2b40      	cmp	r3, #64	; 0x40
 800679c:	d86f      	bhi.n	800687e <HAL_TIM_ConfigClockSource+0x170>
 800679e:	2b30      	cmp	r3, #48	; 0x30
 80067a0:	d064      	beq.n	800686c <HAL_TIM_ConfigClockSource+0x15e>
 80067a2:	2b30      	cmp	r3, #48	; 0x30
 80067a4:	d86b      	bhi.n	800687e <HAL_TIM_ConfigClockSource+0x170>
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	d060      	beq.n	800686c <HAL_TIM_ConfigClockSource+0x15e>
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	d867      	bhi.n	800687e <HAL_TIM_ConfigClockSource+0x170>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d05c      	beq.n	800686c <HAL_TIM_ConfigClockSource+0x15e>
 80067b2:	2b10      	cmp	r3, #16
 80067b4:	d05a      	beq.n	800686c <HAL_TIM_ConfigClockSource+0x15e>
 80067b6:	e062      	b.n	800687e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	6899      	ldr	r1, [r3, #8]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f000 f99c 	bl	8006b04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	609a      	str	r2, [r3, #8]
      break;
 80067e4:	e04f      	b.n	8006886 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	6899      	ldr	r1, [r3, #8]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f000 f985 	bl	8006b04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006808:	609a      	str	r2, [r3, #8]
      break;
 800680a:	e03c      	b.n	8006886 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6818      	ldr	r0, [r3, #0]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	6859      	ldr	r1, [r3, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	461a      	mov	r2, r3
 800681a:	f000 f8f9 	bl	8006a10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2150      	movs	r1, #80	; 0x50
 8006824:	4618      	mov	r0, r3
 8006826:	f000 f952 	bl	8006ace <TIM_ITRx_SetConfig>
      break;
 800682a:	e02c      	b.n	8006886 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6818      	ldr	r0, [r3, #0]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	6859      	ldr	r1, [r3, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	461a      	mov	r2, r3
 800683a:	f000 f918 	bl	8006a6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2160      	movs	r1, #96	; 0x60
 8006844:	4618      	mov	r0, r3
 8006846:	f000 f942 	bl	8006ace <TIM_ITRx_SetConfig>
      break;
 800684a:	e01c      	b.n	8006886 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	6859      	ldr	r1, [r3, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	461a      	mov	r2, r3
 800685a:	f000 f8d9 	bl	8006a10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2140      	movs	r1, #64	; 0x40
 8006864:	4618      	mov	r0, r3
 8006866:	f000 f932 	bl	8006ace <TIM_ITRx_SetConfig>
      break;
 800686a:	e00c      	b.n	8006886 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f000 f929 	bl	8006ace <TIM_ITRx_SetConfig>
      break;
 800687c:	e003      	b.n	8006886 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	73fb      	strb	r3, [r7, #15]
      break;
 8006882:	e000      	b.n	8006886 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006884:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a3c      	ldr	r2, [pc, #240]	; (80069f4 <TIM_Base_SetConfig+0x104>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00f      	beq.n	8006928 <TIM_Base_SetConfig+0x38>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690e:	d00b      	beq.n	8006928 <TIM_Base_SetConfig+0x38>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a39      	ldr	r2, [pc, #228]	; (80069f8 <TIM_Base_SetConfig+0x108>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d007      	beq.n	8006928 <TIM_Base_SetConfig+0x38>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a38      	ldr	r2, [pc, #224]	; (80069fc <TIM_Base_SetConfig+0x10c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_Base_SetConfig+0x38>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a37      	ldr	r2, [pc, #220]	; (8006a00 <TIM_Base_SetConfig+0x110>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d108      	bne.n	800693a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a2d      	ldr	r2, [pc, #180]	; (80069f4 <TIM_Base_SetConfig+0x104>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d01b      	beq.n	800697a <TIM_Base_SetConfig+0x8a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006948:	d017      	beq.n	800697a <TIM_Base_SetConfig+0x8a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a2a      	ldr	r2, [pc, #168]	; (80069f8 <TIM_Base_SetConfig+0x108>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <TIM_Base_SetConfig+0x8a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a29      	ldr	r2, [pc, #164]	; (80069fc <TIM_Base_SetConfig+0x10c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00f      	beq.n	800697a <TIM_Base_SetConfig+0x8a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a28      	ldr	r2, [pc, #160]	; (8006a00 <TIM_Base_SetConfig+0x110>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00b      	beq.n	800697a <TIM_Base_SetConfig+0x8a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a27      	ldr	r2, [pc, #156]	; (8006a04 <TIM_Base_SetConfig+0x114>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d007      	beq.n	800697a <TIM_Base_SetConfig+0x8a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a26      	ldr	r2, [pc, #152]	; (8006a08 <TIM_Base_SetConfig+0x118>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d003      	beq.n	800697a <TIM_Base_SetConfig+0x8a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a25      	ldr	r2, [pc, #148]	; (8006a0c <TIM_Base_SetConfig+0x11c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d108      	bne.n	800698c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a10      	ldr	r2, [pc, #64]	; (80069f4 <TIM_Base_SetConfig+0x104>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00f      	beq.n	80069d8 <TIM_Base_SetConfig+0xe8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a11      	ldr	r2, [pc, #68]	; (8006a00 <TIM_Base_SetConfig+0x110>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00b      	beq.n	80069d8 <TIM_Base_SetConfig+0xe8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <TIM_Base_SetConfig+0x114>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d007      	beq.n	80069d8 <TIM_Base_SetConfig+0xe8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a0f      	ldr	r2, [pc, #60]	; (8006a08 <TIM_Base_SetConfig+0x118>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d003      	beq.n	80069d8 <TIM_Base_SetConfig+0xe8>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a0e      	ldr	r2, [pc, #56]	; (8006a0c <TIM_Base_SetConfig+0x11c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d103      	bne.n	80069e0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	615a      	str	r2, [r3, #20]
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40012c00 	.word	0x40012c00
 80069f8:	40000400 	.word	0x40000400
 80069fc:	40000800 	.word	0x40000800
 8006a00:	40013400 	.word	0x40013400
 8006a04:	40014000 	.word	0x40014000
 8006a08:	40014400 	.word	0x40014400
 8006a0c:	40014800 	.word	0x40014800

08006a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f023 0201 	bic.w	r2, r3, #1
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f023 030a 	bic.w	r3, r3, #10
 8006a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	621a      	str	r2, [r3, #32]
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b087      	sub	sp, #28
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f023 0210 	bic.w	r2, r3, #16
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	031b      	lsls	r3, r3, #12
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	621a      	str	r2, [r3, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b085      	sub	sp, #20
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f043 0307 	orr.w	r3, r3, #7
 8006af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	609a      	str	r2, [r3, #8]
}
 8006af8:	bf00      	nop
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	021a      	lsls	r2, r3, #8
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	431a      	orrs	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	609a      	str	r2, [r3, #8]
}
 8006b38:	bf00      	nop
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e063      	b.n	8006c24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a2b      	ldr	r2, [pc, #172]	; (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d004      	beq.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a2a      	ldr	r2, [pc, #168]	; (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d108      	bne.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a1b      	ldr	r2, [pc, #108]	; (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d018      	beq.n	8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bce:	d013      	beq.n	8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00e      	beq.n	8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a17      	ldr	r2, [pc, #92]	; (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d009      	beq.n	8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a12      	ldr	r2, [pc, #72]	; (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d004      	beq.n	8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a13      	ldr	r2, [pc, #76]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d10c      	bne.n	8006c12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	40012c00 	.word	0x40012c00
 8006c34:	40013400 	.word	0x40013400
 8006c38:	40000400 	.word	0x40000400
 8006c3c:	40000800 	.word	0x40000800
 8006c40:	40014000 	.word	0x40014000

08006c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e040      	b.n	8006d14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fc fb7e 	bl	80033a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2224      	movs	r2, #36	; 0x24
 8006cac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0201 	bic.w	r2, r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fb76 	bl	80073b0 <UART_SetConfig>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e022      	b.n	8006d14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fd3e 	bl	8007758 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689a      	ldr	r2, [r3, #8]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fdc5 	bl	800789c <UART_CheckIdleState>
 8006d12:	4603      	mov	r3, r0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08a      	sub	sp, #40	; 0x28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	4613      	mov	r3, r2
 8006d28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d132      	bne.n	8006d9a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_UART_Receive_IT+0x24>
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e02b      	b.n	8006d9c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d018      	beq.n	8006d8a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	613b      	str	r3, [r7, #16]
   return(result);
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	623b      	str	r3, [r7, #32]
 8006d78:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	69f9      	ldr	r1, [r7, #28]
 8006d7c:	6a3a      	ldr	r2, [r7, #32]
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e6      	bne.n	8006d58 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d8a:	88fb      	ldrh	r3, [r7, #6]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 fe93 	bl	8007abc <UART_Start_Receive_IT>
 8006d96:	4603      	mov	r3, r0
 8006d98:	e000      	b.n	8006d9c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006d9a:	2302      	movs	r3, #2
  }
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3728      	adds	r7, #40	; 0x28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b0ba      	sub	sp, #232	; 0xe8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006dca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006dce:	f640 030f 	movw	r3, #2063	; 0x80f
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006dd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d115      	bne.n	8006e0c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de4:	f003 0320 	and.w	r3, r3, #32
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00f      	beq.n	8006e0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d009      	beq.n	8006e0c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 82ab 	beq.w	8007358 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
      }
      return;
 8006e0a:	e2a5      	b.n	8007358 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 8117 	beq.w	8007044 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e26:	4b85      	ldr	r3, [pc, #532]	; (800703c <HAL_UART_IRQHandler+0x298>)
 8006e28:	4013      	ands	r3, r2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 810a 	beq.w	8007044 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d011      	beq.n	8006e60 <HAL_UART_IRQHandler+0xbc>
 8006e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e56:	f043 0201 	orr.w	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d011      	beq.n	8006e90 <HAL_UART_IRQHandler+0xec>
 8006e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00b      	beq.n	8006e90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e86:	f043 0204 	orr.w	r2, r3, #4
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d011      	beq.n	8006ec0 <HAL_UART_IRQHandler+0x11c>
 8006e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00b      	beq.n	8006ec0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2204      	movs	r2, #4
 8006eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb6:	f043 0202 	orr.w	r2, r3, #2
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d017      	beq.n	8006efc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ed0:	f003 0320 	and.w	r3, r3, #32
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d105      	bne.n	8006ee4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006edc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2208      	movs	r2, #8
 8006eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef2:	f043 0208 	orr.w	r2, r3, #8
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d012      	beq.n	8006f2e <HAL_UART_IRQHandler+0x18a>
 8006f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00c      	beq.n	8006f2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f24:	f043 0220 	orr.w	r2, r3, #32
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 8211 	beq.w	800735c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00d      	beq.n	8006f62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d007      	beq.n	8006f62 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	d005      	beq.n	8006f86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d04f      	beq.n	8007026 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fe4c 	bl	8007c24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	d141      	bne.n	800701e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1d9      	bne.n	8006f9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d013      	beq.n	8007016 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ff2:	4a13      	ldr	r2, [pc, #76]	; (8007040 <HAL_UART_IRQHandler+0x29c>)
 8006ff4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fc fdba 	bl	8003b74 <HAL_DMA_Abort_IT>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d017      	beq.n	8007036 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800700a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007010:	4610      	mov	r0, r2
 8007012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007014:	e00f      	b.n	8007036 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f9b4 	bl	8007384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800701c:	e00b      	b.n	8007036 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f9b0 	bl	8007384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007024:	e007      	b.n	8007036 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f9ac 	bl	8007384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007034:	e192      	b.n	800735c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007036:	bf00      	nop
    return;
 8007038:	e190      	b.n	800735c <HAL_UART_IRQHandler+0x5b8>
 800703a:	bf00      	nop
 800703c:	04000120 	.word	0x04000120
 8007040:	08007ced 	.word	0x08007ced

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007048:	2b01      	cmp	r3, #1
 800704a:	f040 814b 	bne.w	80072e4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800704e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007052:	f003 0310 	and.w	r3, r3, #16
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 8144 	beq.w	80072e4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800705c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007060:	f003 0310 	and.w	r3, r3, #16
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 813d 	beq.w	80072e4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2210      	movs	r2, #16
 8007070:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707c:	2b40      	cmp	r3, #64	; 0x40
 800707e:	f040 80b5 	bne.w	80071ec <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800708e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 8164 	beq.w	8007360 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800709e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070a2:	429a      	cmp	r2, r3
 80070a4:	f080 815c 	bcs.w	8007360 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	f000 8086 	beq.w	80071ca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007100:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1da      	bne.n	80070be <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3308      	adds	r3, #8
 800710e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800711a:	f023 0301 	bic.w	r3, r3, #1
 800711e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3308      	adds	r3, #8
 8007128:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800712c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007130:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007134:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800713e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e1      	bne.n	8007108 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3308      	adds	r3, #8
 800714a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800715a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3308      	adds	r3, #8
 8007164:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007168:	66fa      	str	r2, [r7, #108]	; 0x6c
 800716a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800716e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007176:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e3      	bne.n	8007144 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007192:	e853 3f00 	ldrex	r3, [r3]
 8007196:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800719a:	f023 0310 	bic.w	r3, r3, #16
 800719e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80071ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071b4:	e841 2300 	strex	r3, r2, [r1]
 80071b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e4      	bne.n	800718a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fc fc9c 	bl	8003b02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2202      	movs	r2, #2
 80071ce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071dc:	b29b      	uxth	r3, r3
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f8d7 	bl	8007398 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071ea:	e0b9      	b.n	8007360 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007206:	b29b      	uxth	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 80ab 	beq.w	8007364 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800720e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 80a6 	beq.w	8007364 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	e853 3f00 	ldrex	r3, [r3]
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800722c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	461a      	mov	r2, r3
 8007236:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800723a:	647b      	str	r3, [r7, #68]	; 0x44
 800723c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e4      	bne.n	8007218 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3308      	adds	r3, #8
 8007254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	623b      	str	r3, [r7, #32]
   return(result);
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3308      	adds	r3, #8
 800726e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007272:	633a      	str	r2, [r7, #48]	; 0x30
 8007274:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e3      	bne.n	800724e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	e853 3f00 	ldrex	r3, [r3]
 80072a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0310 	bic.w	r3, r3, #16
 80072ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072bc:	61fb      	str	r3, [r7, #28]
 80072be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	69b9      	ldr	r1, [r7, #24]
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	617b      	str	r3, [r7, #20]
   return(result);
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e4      	bne.n	800729a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f85b 	bl	8007398 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072e2:	e03f      	b.n	8007364 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00e      	beq.n	800730e <HAL_UART_IRQHandler+0x56a>
 80072f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d008      	beq.n	800730e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007304:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fed8 	bl	80080bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800730c:	e02d      	b.n	800736a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800730e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00e      	beq.n	8007338 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800731a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800731e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007322:	2b00      	cmp	r3, #0
 8007324:	d008      	beq.n	8007338 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800732a:	2b00      	cmp	r3, #0
 800732c:	d01c      	beq.n	8007368 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4798      	blx	r3
    }
    return;
 8007336:	e017      	b.n	8007368 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d012      	beq.n	800736a <HAL_UART_IRQHandler+0x5c6>
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00c      	beq.n	800736a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fce1 	bl	8007d18 <UART_EndTransmit_IT>
    return;
 8007356:	e008      	b.n	800736a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007358:	bf00      	nop
 800735a:	e006      	b.n	800736a <HAL_UART_IRQHandler+0x5c6>
    return;
 800735c:	bf00      	nop
 800735e:	e004      	b.n	800736a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007360:	bf00      	nop
 8007362:	e002      	b.n	800736a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007364:	bf00      	nop
 8007366:	e000      	b.n	800736a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007368:	bf00      	nop
  }

}
 800736a:	37e8      	adds	r7, #232	; 0xe8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80073de:	f023 030c 	bic.w	r3, r3, #12
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6812      	ldr	r2, [r2, #0]
 80073e6:	6979      	ldr	r1, [r7, #20]
 80073e8:	430b      	orrs	r3, r1
 80073ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	430a      	orrs	r2, r1
 8007424:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4aa7      	ldr	r2, [pc, #668]	; (80076c8 <UART_SetConfig+0x318>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d120      	bne.n	8007472 <UART_SetConfig+0xc2>
 8007430:	4ba6      	ldr	r3, [pc, #664]	; (80076cc <UART_SetConfig+0x31c>)
 8007432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007434:	f003 0303 	and.w	r3, r3, #3
 8007438:	2b03      	cmp	r3, #3
 800743a:	d817      	bhi.n	800746c <UART_SetConfig+0xbc>
 800743c:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <UART_SetConfig+0x94>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	08007455 	.word	0x08007455
 8007448:	08007461 	.word	0x08007461
 800744c:	08007467 	.word	0x08007467
 8007450:	0800745b 	.word	0x0800745b
 8007454:	2301      	movs	r3, #1
 8007456:	77fb      	strb	r3, [r7, #31]
 8007458:	e0b5      	b.n	80075c6 <UART_SetConfig+0x216>
 800745a:	2302      	movs	r3, #2
 800745c:	77fb      	strb	r3, [r7, #31]
 800745e:	e0b2      	b.n	80075c6 <UART_SetConfig+0x216>
 8007460:	2304      	movs	r3, #4
 8007462:	77fb      	strb	r3, [r7, #31]
 8007464:	e0af      	b.n	80075c6 <UART_SetConfig+0x216>
 8007466:	2308      	movs	r3, #8
 8007468:	77fb      	strb	r3, [r7, #31]
 800746a:	e0ac      	b.n	80075c6 <UART_SetConfig+0x216>
 800746c:	2310      	movs	r3, #16
 800746e:	77fb      	strb	r3, [r7, #31]
 8007470:	e0a9      	b.n	80075c6 <UART_SetConfig+0x216>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a96      	ldr	r2, [pc, #600]	; (80076d0 <UART_SetConfig+0x320>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d124      	bne.n	80074c6 <UART_SetConfig+0x116>
 800747c:	4b93      	ldr	r3, [pc, #588]	; (80076cc <UART_SetConfig+0x31c>)
 800747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007484:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007488:	d011      	beq.n	80074ae <UART_SetConfig+0xfe>
 800748a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800748e:	d817      	bhi.n	80074c0 <UART_SetConfig+0x110>
 8007490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007494:	d011      	beq.n	80074ba <UART_SetConfig+0x10a>
 8007496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800749a:	d811      	bhi.n	80074c0 <UART_SetConfig+0x110>
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <UART_SetConfig+0xf8>
 80074a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a4:	d006      	beq.n	80074b4 <UART_SetConfig+0x104>
 80074a6:	e00b      	b.n	80074c0 <UART_SetConfig+0x110>
 80074a8:	2300      	movs	r3, #0
 80074aa:	77fb      	strb	r3, [r7, #31]
 80074ac:	e08b      	b.n	80075c6 <UART_SetConfig+0x216>
 80074ae:	2302      	movs	r3, #2
 80074b0:	77fb      	strb	r3, [r7, #31]
 80074b2:	e088      	b.n	80075c6 <UART_SetConfig+0x216>
 80074b4:	2304      	movs	r3, #4
 80074b6:	77fb      	strb	r3, [r7, #31]
 80074b8:	e085      	b.n	80075c6 <UART_SetConfig+0x216>
 80074ba:	2308      	movs	r3, #8
 80074bc:	77fb      	strb	r3, [r7, #31]
 80074be:	e082      	b.n	80075c6 <UART_SetConfig+0x216>
 80074c0:	2310      	movs	r3, #16
 80074c2:	77fb      	strb	r3, [r7, #31]
 80074c4:	e07f      	b.n	80075c6 <UART_SetConfig+0x216>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a82      	ldr	r2, [pc, #520]	; (80076d4 <UART_SetConfig+0x324>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d124      	bne.n	800751a <UART_SetConfig+0x16a>
 80074d0:	4b7e      	ldr	r3, [pc, #504]	; (80076cc <UART_SetConfig+0x31c>)
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80074d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80074dc:	d011      	beq.n	8007502 <UART_SetConfig+0x152>
 80074de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80074e2:	d817      	bhi.n	8007514 <UART_SetConfig+0x164>
 80074e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074e8:	d011      	beq.n	800750e <UART_SetConfig+0x15e>
 80074ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074ee:	d811      	bhi.n	8007514 <UART_SetConfig+0x164>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <UART_SetConfig+0x14c>
 80074f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074f8:	d006      	beq.n	8007508 <UART_SetConfig+0x158>
 80074fa:	e00b      	b.n	8007514 <UART_SetConfig+0x164>
 80074fc:	2300      	movs	r3, #0
 80074fe:	77fb      	strb	r3, [r7, #31]
 8007500:	e061      	b.n	80075c6 <UART_SetConfig+0x216>
 8007502:	2302      	movs	r3, #2
 8007504:	77fb      	strb	r3, [r7, #31]
 8007506:	e05e      	b.n	80075c6 <UART_SetConfig+0x216>
 8007508:	2304      	movs	r3, #4
 800750a:	77fb      	strb	r3, [r7, #31]
 800750c:	e05b      	b.n	80075c6 <UART_SetConfig+0x216>
 800750e:	2308      	movs	r3, #8
 8007510:	77fb      	strb	r3, [r7, #31]
 8007512:	e058      	b.n	80075c6 <UART_SetConfig+0x216>
 8007514:	2310      	movs	r3, #16
 8007516:	77fb      	strb	r3, [r7, #31]
 8007518:	e055      	b.n	80075c6 <UART_SetConfig+0x216>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a6e      	ldr	r2, [pc, #440]	; (80076d8 <UART_SetConfig+0x328>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d124      	bne.n	800756e <UART_SetConfig+0x1be>
 8007524:	4b69      	ldr	r3, [pc, #420]	; (80076cc <UART_SetConfig+0x31c>)
 8007526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007528:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800752c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007530:	d011      	beq.n	8007556 <UART_SetConfig+0x1a6>
 8007532:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007536:	d817      	bhi.n	8007568 <UART_SetConfig+0x1b8>
 8007538:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800753c:	d011      	beq.n	8007562 <UART_SetConfig+0x1b2>
 800753e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007542:	d811      	bhi.n	8007568 <UART_SetConfig+0x1b8>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <UART_SetConfig+0x1a0>
 8007548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800754c:	d006      	beq.n	800755c <UART_SetConfig+0x1ac>
 800754e:	e00b      	b.n	8007568 <UART_SetConfig+0x1b8>
 8007550:	2300      	movs	r3, #0
 8007552:	77fb      	strb	r3, [r7, #31]
 8007554:	e037      	b.n	80075c6 <UART_SetConfig+0x216>
 8007556:	2302      	movs	r3, #2
 8007558:	77fb      	strb	r3, [r7, #31]
 800755a:	e034      	b.n	80075c6 <UART_SetConfig+0x216>
 800755c:	2304      	movs	r3, #4
 800755e:	77fb      	strb	r3, [r7, #31]
 8007560:	e031      	b.n	80075c6 <UART_SetConfig+0x216>
 8007562:	2308      	movs	r3, #8
 8007564:	77fb      	strb	r3, [r7, #31]
 8007566:	e02e      	b.n	80075c6 <UART_SetConfig+0x216>
 8007568:	2310      	movs	r3, #16
 800756a:	77fb      	strb	r3, [r7, #31]
 800756c:	e02b      	b.n	80075c6 <UART_SetConfig+0x216>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a5a      	ldr	r2, [pc, #360]	; (80076dc <UART_SetConfig+0x32c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d124      	bne.n	80075c2 <UART_SetConfig+0x212>
 8007578:	4b54      	ldr	r3, [pc, #336]	; (80076cc <UART_SetConfig+0x31c>)
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007580:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007584:	d011      	beq.n	80075aa <UART_SetConfig+0x1fa>
 8007586:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800758a:	d817      	bhi.n	80075bc <UART_SetConfig+0x20c>
 800758c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007590:	d011      	beq.n	80075b6 <UART_SetConfig+0x206>
 8007592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007596:	d811      	bhi.n	80075bc <UART_SetConfig+0x20c>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <UART_SetConfig+0x1f4>
 800759c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075a0:	d006      	beq.n	80075b0 <UART_SetConfig+0x200>
 80075a2:	e00b      	b.n	80075bc <UART_SetConfig+0x20c>
 80075a4:	2300      	movs	r3, #0
 80075a6:	77fb      	strb	r3, [r7, #31]
 80075a8:	e00d      	b.n	80075c6 <UART_SetConfig+0x216>
 80075aa:	2302      	movs	r3, #2
 80075ac:	77fb      	strb	r3, [r7, #31]
 80075ae:	e00a      	b.n	80075c6 <UART_SetConfig+0x216>
 80075b0:	2304      	movs	r3, #4
 80075b2:	77fb      	strb	r3, [r7, #31]
 80075b4:	e007      	b.n	80075c6 <UART_SetConfig+0x216>
 80075b6:	2308      	movs	r3, #8
 80075b8:	77fb      	strb	r3, [r7, #31]
 80075ba:	e004      	b.n	80075c6 <UART_SetConfig+0x216>
 80075bc:	2310      	movs	r3, #16
 80075be:	77fb      	strb	r3, [r7, #31]
 80075c0:	e001      	b.n	80075c6 <UART_SetConfig+0x216>
 80075c2:	2310      	movs	r3, #16
 80075c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ce:	d15b      	bne.n	8007688 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80075d0:	7ffb      	ldrb	r3, [r7, #31]
 80075d2:	2b08      	cmp	r3, #8
 80075d4:	d827      	bhi.n	8007626 <UART_SetConfig+0x276>
 80075d6:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <UART_SetConfig+0x22c>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	08007601 	.word	0x08007601
 80075e0:	08007609 	.word	0x08007609
 80075e4:	08007611 	.word	0x08007611
 80075e8:	08007627 	.word	0x08007627
 80075ec:	08007617 	.word	0x08007617
 80075f0:	08007627 	.word	0x08007627
 80075f4:	08007627 	.word	0x08007627
 80075f8:	08007627 	.word	0x08007627
 80075fc:	0800761f 	.word	0x0800761f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007600:	f7fe f8fa 	bl	80057f8 <HAL_RCC_GetPCLK1Freq>
 8007604:	61b8      	str	r0, [r7, #24]
        break;
 8007606:	e013      	b.n	8007630 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007608:	f7fe f918 	bl	800583c <HAL_RCC_GetPCLK2Freq>
 800760c:	61b8      	str	r0, [r7, #24]
        break;
 800760e:	e00f      	b.n	8007630 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007610:	4b33      	ldr	r3, [pc, #204]	; (80076e0 <UART_SetConfig+0x330>)
 8007612:	61bb      	str	r3, [r7, #24]
        break;
 8007614:	e00c      	b.n	8007630 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007616:	f7fe f879 	bl	800570c <HAL_RCC_GetSysClockFreq>
 800761a:	61b8      	str	r0, [r7, #24]
        break;
 800761c:	e008      	b.n	8007630 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800761e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007622:	61bb      	str	r3, [r7, #24]
        break;
 8007624:	e004      	b.n	8007630 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	77bb      	strb	r3, [r7, #30]
        break;
 800762e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 8082 	beq.w	800773c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	005a      	lsls	r2, r3, #1
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	085b      	lsrs	r3, r3, #1
 8007642:	441a      	add	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	fbb2 f3f3 	udiv	r3, r2, r3
 800764c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	2b0f      	cmp	r3, #15
 8007652:	d916      	bls.n	8007682 <UART_SetConfig+0x2d2>
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765a:	d212      	bcs.n	8007682 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	b29b      	uxth	r3, r3
 8007660:	f023 030f 	bic.w	r3, r3, #15
 8007664:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	085b      	lsrs	r3, r3, #1
 800766a:	b29b      	uxth	r3, r3
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	b29a      	uxth	r2, r3
 8007672:	89fb      	ldrh	r3, [r7, #14]
 8007674:	4313      	orrs	r3, r2
 8007676:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	89fa      	ldrh	r2, [r7, #14]
 800767e:	60da      	str	r2, [r3, #12]
 8007680:	e05c      	b.n	800773c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	77bb      	strb	r3, [r7, #30]
 8007686:	e059      	b.n	800773c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007688:	7ffb      	ldrb	r3, [r7, #31]
 800768a:	2b08      	cmp	r3, #8
 800768c:	d835      	bhi.n	80076fa <UART_SetConfig+0x34a>
 800768e:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <UART_SetConfig+0x2e4>)
 8007690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007694:	080076b9 	.word	0x080076b9
 8007698:	080076c1 	.word	0x080076c1
 800769c:	080076e5 	.word	0x080076e5
 80076a0:	080076fb 	.word	0x080076fb
 80076a4:	080076eb 	.word	0x080076eb
 80076a8:	080076fb 	.word	0x080076fb
 80076ac:	080076fb 	.word	0x080076fb
 80076b0:	080076fb 	.word	0x080076fb
 80076b4:	080076f3 	.word	0x080076f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b8:	f7fe f89e 	bl	80057f8 <HAL_RCC_GetPCLK1Freq>
 80076bc:	61b8      	str	r0, [r7, #24]
        break;
 80076be:	e021      	b.n	8007704 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076c0:	f7fe f8bc 	bl	800583c <HAL_RCC_GetPCLK2Freq>
 80076c4:	61b8      	str	r0, [r7, #24]
        break;
 80076c6:	e01d      	b.n	8007704 <UART_SetConfig+0x354>
 80076c8:	40013800 	.word	0x40013800
 80076cc:	40021000 	.word	0x40021000
 80076d0:	40004400 	.word	0x40004400
 80076d4:	40004800 	.word	0x40004800
 80076d8:	40004c00 	.word	0x40004c00
 80076dc:	40005000 	.word	0x40005000
 80076e0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076e4:	4b1b      	ldr	r3, [pc, #108]	; (8007754 <UART_SetConfig+0x3a4>)
 80076e6:	61bb      	str	r3, [r7, #24]
        break;
 80076e8:	e00c      	b.n	8007704 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ea:	f7fe f80f 	bl	800570c <HAL_RCC_GetSysClockFreq>
 80076ee:	61b8      	str	r0, [r7, #24]
        break;
 80076f0:	e008      	b.n	8007704 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076f6:	61bb      	str	r3, [r7, #24]
        break;
 80076f8:	e004      	b.n	8007704 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	77bb      	strb	r3, [r7, #30]
        break;
 8007702:	bf00      	nop
    }

    if (pclk != 0U)
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d018      	beq.n	800773c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	085a      	lsrs	r2, r3, #1
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	441a      	add	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	fbb2 f3f3 	udiv	r3, r2, r3
 800771c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2b0f      	cmp	r3, #15
 8007722:	d909      	bls.n	8007738 <UART_SetConfig+0x388>
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800772a:	d205      	bcs.n	8007738 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	b29a      	uxth	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60da      	str	r2, [r3, #12]
 8007736:	e001      	b.n	800773c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007748:	7fbb      	ldrb	r3, [r7, #30]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3720      	adds	r7, #32
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	007a1200 	.word	0x007a1200

08007758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00a      	beq.n	8007782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00a      	beq.n	80077c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	f003 0308 	and.w	r3, r3, #8
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	f003 0310 	and.w	r3, r3, #16
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00a      	beq.n	800780a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00a      	beq.n	800782c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01a      	beq.n	800786e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007856:	d10a      	bne.n	800786e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	605a      	str	r2, [r3, #4]
  }
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b098      	sub	sp, #96	; 0x60
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078ac:	f7fb ffe8 	bl	8003880 <HAL_GetTick>
 80078b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d12e      	bne.n	800791e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078c8:	2200      	movs	r2, #0
 80078ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f88c 	bl	80079ec <UART_WaitOnFlagUntilTimeout>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d021      	beq.n	800791e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ee:	653b      	str	r3, [r7, #80]	; 0x50
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f8:	647b      	str	r3, [r7, #68]	; 0x44
 80078fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e6      	bne.n	80078da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2220      	movs	r2, #32
 8007910:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e062      	b.n	80079e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b04      	cmp	r3, #4
 800792a:	d149      	bne.n	80079c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800792c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007934:	2200      	movs	r2, #0
 8007936:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f856 	bl	80079ec <UART_WaitOnFlagUntilTimeout>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d03c      	beq.n	80079c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	623b      	str	r3, [r7, #32]
   return(result);
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800795a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007964:	633b      	str	r3, [r7, #48]	; 0x30
 8007966:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800796a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e6      	bne.n	8007946 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3308      	adds	r3, #8
 800797e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	60fb      	str	r3, [r7, #12]
   return(result);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0301 	bic.w	r3, r3, #1
 800798e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3308      	adds	r3, #8
 8007996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007998:	61fa      	str	r2, [r7, #28]
 800799a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	69b9      	ldr	r1, [r7, #24]
 800799e:	69fa      	ldr	r2, [r7, #28]
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	617b      	str	r3, [r7, #20]
   return(result);
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e5      	bne.n	8007978 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e011      	b.n	80079e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2220      	movs	r2, #32
 80079c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3758      	adds	r7, #88	; 0x58
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	603b      	str	r3, [r7, #0]
 80079f8:	4613      	mov	r3, r2
 80079fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079fc:	e049      	b.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a04:	d045      	beq.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a06:	f7fb ff3b 	bl	8003880 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d302      	bcc.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e048      	b.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0304 	and.w	r3, r3, #4
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d031      	beq.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69db      	ldr	r3, [r3, #28]
 8007a34:	f003 0308 	and.w	r3, r3, #8
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d110      	bne.n	8007a5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2208      	movs	r2, #8
 8007a42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 f8ed 	bl	8007c24 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2208      	movs	r2, #8
 8007a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e029      	b.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a6c:	d111      	bne.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f8d3 	bl	8007c24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e00f      	b.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69da      	ldr	r2, [r3, #28]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	bf0c      	ite	eq
 8007aa2:	2301      	moveq	r3, #1
 8007aa4:	2300      	movne	r3, #0
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d0a6      	beq.n	80079fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b097      	sub	sp, #92	; 0x5c
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	88fa      	ldrh	r2, [r7, #6]
 8007ad4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	88fa      	ldrh	r2, [r7, #6]
 8007adc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aee:	d10e      	bne.n	8007b0e <UART_Start_Receive_IT+0x52>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d105      	bne.n	8007b04 <UART_Start_Receive_IT+0x48>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007afe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b02:	e01a      	b.n	8007b3a <UART_Start_Receive_IT+0x7e>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	22ff      	movs	r2, #255	; 0xff
 8007b08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b0c:	e015      	b.n	8007b3a <UART_Start_Receive_IT+0x7e>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10d      	bne.n	8007b32 <UART_Start_Receive_IT+0x76>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d104      	bne.n	8007b28 <UART_Start_Receive_IT+0x6c>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	22ff      	movs	r2, #255	; 0xff
 8007b22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b26:	e008      	b.n	8007b3a <UART_Start_Receive_IT+0x7e>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	227f      	movs	r2, #127	; 0x7f
 8007b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b30:	e003      	b.n	8007b3a <UART_Start_Receive_IT+0x7e>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2222      	movs	r2, #34	; 0x22
 8007b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3308      	adds	r3, #8
 8007b50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	f043 0301 	orr.w	r3, r3, #1
 8007b60:	657b      	str	r3, [r7, #84]	; 0x54
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3308      	adds	r3, #8
 8007b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e5      	bne.n	8007b4a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b86:	d107      	bne.n	8007b98 <UART_Start_Receive_IT+0xdc>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d103      	bne.n	8007b98 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4a22      	ldr	r2, [pc, #136]	; (8007c1c <UART_Start_Receive_IT+0x160>)
 8007b94:	669a      	str	r2, [r3, #104]	; 0x68
 8007b96:	e002      	b.n	8007b9e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4a21      	ldr	r2, [pc, #132]	; (8007c20 <UART_Start_Receive_IT+0x164>)
 8007b9c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d019      	beq.n	8007bda <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e6      	bne.n	8007ba6 <UART_Start_Receive_IT+0xea>
 8007bd8:	e018      	b.n	8007c0c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	613b      	str	r3, [r7, #16]
   return(result);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f043 0320 	orr.w	r3, r3, #32
 8007bee:	653b      	str	r3, [r7, #80]	; 0x50
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf8:	623b      	str	r3, [r7, #32]
 8007bfa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	69f9      	ldr	r1, [r7, #28]
 8007bfe:	6a3a      	ldr	r2, [r7, #32]
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e6      	bne.n	8007bda <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	375c      	adds	r7, #92	; 0x5c
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	08007f15 	.word	0x08007f15
 8007c20:	08007d6d 	.word	0x08007d6d

08007c24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b095      	sub	sp, #84	; 0x54
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c4a:	643b      	str	r3, [r7, #64]	; 0x40
 8007c4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c52:	e841 2300 	strex	r3, r2, [r1]
 8007c56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1e6      	bne.n	8007c2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3308      	adds	r3, #8
 8007c64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	e853 3f00 	ldrex	r3, [r3]
 8007c6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	f023 0301 	bic.w	r3, r3, #1
 8007c74:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3308      	adds	r3, #8
 8007c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c86:	e841 2300 	strex	r3, r2, [r1]
 8007c8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1e5      	bne.n	8007c5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d118      	bne.n	8007ccc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	f023 0310 	bic.w	r3, r3, #16
 8007cae:	647b      	str	r3, [r7, #68]	; 0x44
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb8:	61bb      	str	r3, [r7, #24]
 8007cba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	6979      	ldr	r1, [r7, #20]
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	e841 2300 	strex	r3, r2, [r1]
 8007cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e6      	bne.n	8007c9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ce0:	bf00      	nop
 8007ce2:	3754      	adds	r7, #84	; 0x54
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7ff fb3a 	bl	8007384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d10:	bf00      	nop
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b088      	sub	sp, #32
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d34:	61fb      	str	r3, [r7, #28]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	61bb      	str	r3, [r7, #24]
 8007d40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	6979      	ldr	r1, [r7, #20]
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e6      	bne.n	8007d20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff fb06 	bl	8007370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d64:	bf00      	nop
 8007d66:	3720      	adds	r7, #32
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b09c      	sub	sp, #112	; 0x70
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d7a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d84:	2b22      	cmp	r3, #34	; 0x22
 8007d86:	f040 80b9 	bne.w	8007efc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d98:	b2d9      	uxtb	r1, r3
 8007d9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da4:	400a      	ands	r2, r1
 8007da6:	b2d2      	uxtb	r2, r2
 8007da8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f040 809c 	bne.w	8007f0c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007de4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007de8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007df2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007df4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007df8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e6      	bne.n	8007dd4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e18:	f023 0301 	bic.w	r3, r3, #1
 8007e1c:	667b      	str	r3, [r7, #100]	; 0x64
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3308      	adds	r3, #8
 8007e24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e26:	647a      	str	r2, [r7, #68]	; 0x44
 8007e28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e5      	bne.n	8007e06 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d018      	beq.n	8007e8e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	623b      	str	r3, [r7, #32]
   return(result);
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e70:	663b      	str	r3, [r7, #96]	; 0x60
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e6      	bne.n	8007e5c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d12e      	bne.n	8007ef4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f023 0310 	bic.w	r3, r3, #16
 8007eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	69b9      	ldr	r1, [r7, #24]
 8007ec0:	69fa      	ldr	r2, [r7, #28]
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e6      	bne.n	8007e9c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	f003 0310 	and.w	r3, r3, #16
 8007ed8:	2b10      	cmp	r3, #16
 8007eda:	d103      	bne.n	8007ee4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2210      	movs	r2, #16
 8007ee2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7ff fa53 	bl	8007398 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ef2:	e00b      	b.n	8007f0c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7fb f90b 	bl	8003110 <HAL_UART_RxCpltCallback>
}
 8007efa:	e007      	b.n	8007f0c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	699a      	ldr	r2, [r3, #24]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0208 	orr.w	r2, r2, #8
 8007f0a:	619a      	str	r2, [r3, #24]
}
 8007f0c:	bf00      	nop
 8007f0e:	3770      	adds	r7, #112	; 0x70
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b09c      	sub	sp, #112	; 0x70
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f2c:	2b22      	cmp	r3, #34	; 0x22
 8007f2e:	f040 80b9 	bne.w	80080a4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f40:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007f46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f56:	1c9a      	adds	r2, r3, #2
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f040 809c 	bne.w	80080b4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f90:	667b      	str	r3, [r7, #100]	; 0x64
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f9a:	657b      	str	r3, [r7, #84]	; 0x54
 8007f9c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007fa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e6      	bne.n	8007f7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3308      	adds	r3, #8
 8007fcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fce:	643a      	str	r2, [r7, #64]	; 0x40
 8007fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e5      	bne.n	8007fae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d018      	beq.n	8008036 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	61fb      	str	r3, [r7, #28]
   return(result);
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008018:	65fb      	str	r3, [r7, #92]	; 0x5c
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008024:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e6      	bne.n	8008004 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803a:	2b01      	cmp	r3, #1
 800803c:	d12e      	bne.n	800809c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	60bb      	str	r3, [r7, #8]
   return(result);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f023 0310 	bic.w	r3, r3, #16
 8008058:	65bb      	str	r3, [r7, #88]	; 0x58
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008062:	61bb      	str	r3, [r7, #24]
 8008064:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	6979      	ldr	r1, [r7, #20]
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	613b      	str	r3, [r7, #16]
   return(result);
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e6      	bne.n	8008044 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b10      	cmp	r3, #16
 8008082:	d103      	bne.n	800808c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2210      	movs	r2, #16
 800808a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff f97f 	bl	8007398 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800809a:	e00b      	b.n	80080b4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7fb f837 	bl	8003110 <HAL_UART_RxCpltCallback>
}
 80080a2:	e007      	b.n	80080b4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	699a      	ldr	r2, [r3, #24]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f042 0208 	orr.w	r2, r2, #8
 80080b2:	619a      	str	r2, [r3, #24]
}
 80080b4:	bf00      	nop
 80080b6:	3770      	adds	r7, #112	; 0x70
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80080dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	43db      	mvns	r3, r3
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	4013      	ands	r3, r2
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008106:	b084      	sub	sp, #16
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	f107 0014 	add.w	r0, r7, #20
 8008114:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	b004      	add	sp, #16
 8008146:	4770      	bx	lr

08008148 <__errno>:
 8008148:	4b01      	ldr	r3, [pc, #4]	; (8008150 <__errno+0x8>)
 800814a:	6818      	ldr	r0, [r3, #0]
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	20000110 	.word	0x20000110

08008154 <__libc_init_array>:
 8008154:	b570      	push	{r4, r5, r6, lr}
 8008156:	4d0d      	ldr	r5, [pc, #52]	; (800818c <__libc_init_array+0x38>)
 8008158:	4c0d      	ldr	r4, [pc, #52]	; (8008190 <__libc_init_array+0x3c>)
 800815a:	1b64      	subs	r4, r4, r5
 800815c:	10a4      	asrs	r4, r4, #2
 800815e:	2600      	movs	r6, #0
 8008160:	42a6      	cmp	r6, r4
 8008162:	d109      	bne.n	8008178 <__libc_init_array+0x24>
 8008164:	4d0b      	ldr	r5, [pc, #44]	; (8008194 <__libc_init_array+0x40>)
 8008166:	4c0c      	ldr	r4, [pc, #48]	; (8008198 <__libc_init_array+0x44>)
 8008168:	f001 fa34 	bl	80095d4 <_init>
 800816c:	1b64      	subs	r4, r4, r5
 800816e:	10a4      	asrs	r4, r4, #2
 8008170:	2600      	movs	r6, #0
 8008172:	42a6      	cmp	r6, r4
 8008174:	d105      	bne.n	8008182 <__libc_init_array+0x2e>
 8008176:	bd70      	pop	{r4, r5, r6, pc}
 8008178:	f855 3b04 	ldr.w	r3, [r5], #4
 800817c:	4798      	blx	r3
 800817e:	3601      	adds	r6, #1
 8008180:	e7ee      	b.n	8008160 <__libc_init_array+0xc>
 8008182:	f855 3b04 	ldr.w	r3, [r5], #4
 8008186:	4798      	blx	r3
 8008188:	3601      	adds	r6, #1
 800818a:	e7f2      	b.n	8008172 <__libc_init_array+0x1e>
 800818c:	08009828 	.word	0x08009828
 8008190:	08009828 	.word	0x08009828
 8008194:	08009828 	.word	0x08009828
 8008198:	0800982c 	.word	0x0800982c

0800819c <memset>:
 800819c:	4402      	add	r2, r0
 800819e:	4603      	mov	r3, r0
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d100      	bne.n	80081a6 <memset+0xa>
 80081a4:	4770      	bx	lr
 80081a6:	f803 1b01 	strb.w	r1, [r3], #1
 80081aa:	e7f9      	b.n	80081a0 <memset+0x4>

080081ac <rand>:
 80081ac:	4b16      	ldr	r3, [pc, #88]	; (8008208 <rand+0x5c>)
 80081ae:	b510      	push	{r4, lr}
 80081b0:	681c      	ldr	r4, [r3, #0]
 80081b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081b4:	b9b3      	cbnz	r3, 80081e4 <rand+0x38>
 80081b6:	2018      	movs	r0, #24
 80081b8:	f000 f886 	bl	80082c8 <malloc>
 80081bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80081be:	b928      	cbnz	r0, 80081cc <rand+0x20>
 80081c0:	4602      	mov	r2, r0
 80081c2:	4b12      	ldr	r3, [pc, #72]	; (800820c <rand+0x60>)
 80081c4:	4812      	ldr	r0, [pc, #72]	; (8008210 <rand+0x64>)
 80081c6:	214e      	movs	r1, #78	; 0x4e
 80081c8:	f000 f84e 	bl	8008268 <__assert_func>
 80081cc:	4a11      	ldr	r2, [pc, #68]	; (8008214 <rand+0x68>)
 80081ce:	4b12      	ldr	r3, [pc, #72]	; (8008218 <rand+0x6c>)
 80081d0:	e9c0 2300 	strd	r2, r3, [r0]
 80081d4:	4b11      	ldr	r3, [pc, #68]	; (800821c <rand+0x70>)
 80081d6:	6083      	str	r3, [r0, #8]
 80081d8:	230b      	movs	r3, #11
 80081da:	8183      	strh	r3, [r0, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	2300      	movs	r3, #0
 80081e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80081e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80081e6:	4a0e      	ldr	r2, [pc, #56]	; (8008220 <rand+0x74>)
 80081e8:	6920      	ldr	r0, [r4, #16]
 80081ea:	6963      	ldr	r3, [r4, #20]
 80081ec:	490d      	ldr	r1, [pc, #52]	; (8008224 <rand+0x78>)
 80081ee:	4342      	muls	r2, r0
 80081f0:	fb01 2203 	mla	r2, r1, r3, r2
 80081f4:	fba0 0101 	umull	r0, r1, r0, r1
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	eb42 0001 	adc.w	r0, r2, r1
 80081fe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8008202:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008206:	bd10      	pop	{r4, pc}
 8008208:	20000110 	.word	0x20000110
 800820c:	080096e4 	.word	0x080096e4
 8008210:	080096fb 	.word	0x080096fb
 8008214:	abcd330e 	.word	0xabcd330e
 8008218:	e66d1234 	.word	0xe66d1234
 800821c:	0005deec 	.word	0x0005deec
 8008220:	5851f42d 	.word	0x5851f42d
 8008224:	4c957f2d 	.word	0x4c957f2d

08008228 <siprintf>:
 8008228:	b40e      	push	{r1, r2, r3}
 800822a:	b500      	push	{lr}
 800822c:	b09c      	sub	sp, #112	; 0x70
 800822e:	ab1d      	add	r3, sp, #116	; 0x74
 8008230:	9002      	str	r0, [sp, #8]
 8008232:	9006      	str	r0, [sp, #24]
 8008234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008238:	4809      	ldr	r0, [pc, #36]	; (8008260 <siprintf+0x38>)
 800823a:	9107      	str	r1, [sp, #28]
 800823c:	9104      	str	r1, [sp, #16]
 800823e:	4909      	ldr	r1, [pc, #36]	; (8008264 <siprintf+0x3c>)
 8008240:	f853 2b04 	ldr.w	r2, [r3], #4
 8008244:	9105      	str	r1, [sp, #20]
 8008246:	6800      	ldr	r0, [r0, #0]
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	a902      	add	r1, sp, #8
 800824c:	f000 f980 	bl	8008550 <_svfiprintf_r>
 8008250:	9b02      	ldr	r3, [sp, #8]
 8008252:	2200      	movs	r2, #0
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	b01c      	add	sp, #112	; 0x70
 8008258:	f85d eb04 	ldr.w	lr, [sp], #4
 800825c:	b003      	add	sp, #12
 800825e:	4770      	bx	lr
 8008260:	20000110 	.word	0x20000110
 8008264:	ffff0208 	.word	0xffff0208

08008268 <__assert_func>:
 8008268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800826a:	4614      	mov	r4, r2
 800826c:	461a      	mov	r2, r3
 800826e:	4b09      	ldr	r3, [pc, #36]	; (8008294 <__assert_func+0x2c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4605      	mov	r5, r0
 8008274:	68d8      	ldr	r0, [r3, #12]
 8008276:	b14c      	cbz	r4, 800828c <__assert_func+0x24>
 8008278:	4b07      	ldr	r3, [pc, #28]	; (8008298 <__assert_func+0x30>)
 800827a:	9100      	str	r1, [sp, #0]
 800827c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008280:	4906      	ldr	r1, [pc, #24]	; (800829c <__assert_func+0x34>)
 8008282:	462b      	mov	r3, r5
 8008284:	f000 f80e 	bl	80082a4 <fiprintf>
 8008288:	f000 fe20 	bl	8008ecc <abort>
 800828c:	4b04      	ldr	r3, [pc, #16]	; (80082a0 <__assert_func+0x38>)
 800828e:	461c      	mov	r4, r3
 8008290:	e7f3      	b.n	800827a <__assert_func+0x12>
 8008292:	bf00      	nop
 8008294:	20000110 	.word	0x20000110
 8008298:	08009756 	.word	0x08009756
 800829c:	08009763 	.word	0x08009763
 80082a0:	08009791 	.word	0x08009791

080082a4 <fiprintf>:
 80082a4:	b40e      	push	{r1, r2, r3}
 80082a6:	b503      	push	{r0, r1, lr}
 80082a8:	4601      	mov	r1, r0
 80082aa:	ab03      	add	r3, sp, #12
 80082ac:	4805      	ldr	r0, [pc, #20]	; (80082c4 <fiprintf+0x20>)
 80082ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80082b2:	6800      	ldr	r0, [r0, #0]
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	f000 fa75 	bl	80087a4 <_vfiprintf_r>
 80082ba:	b002      	add	sp, #8
 80082bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80082c0:	b003      	add	sp, #12
 80082c2:	4770      	bx	lr
 80082c4:	20000110 	.word	0x20000110

080082c8 <malloc>:
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <malloc+0xc>)
 80082ca:	4601      	mov	r1, r0
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	f000 b86f 	b.w	80083b0 <_malloc_r>
 80082d2:	bf00      	nop
 80082d4:	20000110 	.word	0x20000110

080082d8 <_free_r>:
 80082d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082da:	2900      	cmp	r1, #0
 80082dc:	d044      	beq.n	8008368 <_free_r+0x90>
 80082de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e2:	9001      	str	r0, [sp, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f1a1 0404 	sub.w	r4, r1, #4
 80082ea:	bfb8      	it	lt
 80082ec:	18e4      	addlt	r4, r4, r3
 80082ee:	f001 f83d 	bl	800936c <__malloc_lock>
 80082f2:	4a1e      	ldr	r2, [pc, #120]	; (800836c <_free_r+0x94>)
 80082f4:	9801      	ldr	r0, [sp, #4]
 80082f6:	6813      	ldr	r3, [r2, #0]
 80082f8:	b933      	cbnz	r3, 8008308 <_free_r+0x30>
 80082fa:	6063      	str	r3, [r4, #4]
 80082fc:	6014      	str	r4, [r2, #0]
 80082fe:	b003      	add	sp, #12
 8008300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008304:	f001 b838 	b.w	8009378 <__malloc_unlock>
 8008308:	42a3      	cmp	r3, r4
 800830a:	d908      	bls.n	800831e <_free_r+0x46>
 800830c:	6825      	ldr	r5, [r4, #0]
 800830e:	1961      	adds	r1, r4, r5
 8008310:	428b      	cmp	r3, r1
 8008312:	bf01      	itttt	eq
 8008314:	6819      	ldreq	r1, [r3, #0]
 8008316:	685b      	ldreq	r3, [r3, #4]
 8008318:	1949      	addeq	r1, r1, r5
 800831a:	6021      	streq	r1, [r4, #0]
 800831c:	e7ed      	b.n	80082fa <_free_r+0x22>
 800831e:	461a      	mov	r2, r3
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	b10b      	cbz	r3, 8008328 <_free_r+0x50>
 8008324:	42a3      	cmp	r3, r4
 8008326:	d9fa      	bls.n	800831e <_free_r+0x46>
 8008328:	6811      	ldr	r1, [r2, #0]
 800832a:	1855      	adds	r5, r2, r1
 800832c:	42a5      	cmp	r5, r4
 800832e:	d10b      	bne.n	8008348 <_free_r+0x70>
 8008330:	6824      	ldr	r4, [r4, #0]
 8008332:	4421      	add	r1, r4
 8008334:	1854      	adds	r4, r2, r1
 8008336:	42a3      	cmp	r3, r4
 8008338:	6011      	str	r1, [r2, #0]
 800833a:	d1e0      	bne.n	80082fe <_free_r+0x26>
 800833c:	681c      	ldr	r4, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	6053      	str	r3, [r2, #4]
 8008342:	4421      	add	r1, r4
 8008344:	6011      	str	r1, [r2, #0]
 8008346:	e7da      	b.n	80082fe <_free_r+0x26>
 8008348:	d902      	bls.n	8008350 <_free_r+0x78>
 800834a:	230c      	movs	r3, #12
 800834c:	6003      	str	r3, [r0, #0]
 800834e:	e7d6      	b.n	80082fe <_free_r+0x26>
 8008350:	6825      	ldr	r5, [r4, #0]
 8008352:	1961      	adds	r1, r4, r5
 8008354:	428b      	cmp	r3, r1
 8008356:	bf04      	itt	eq
 8008358:	6819      	ldreq	r1, [r3, #0]
 800835a:	685b      	ldreq	r3, [r3, #4]
 800835c:	6063      	str	r3, [r4, #4]
 800835e:	bf04      	itt	eq
 8008360:	1949      	addeq	r1, r1, r5
 8008362:	6021      	streq	r1, [r4, #0]
 8008364:	6054      	str	r4, [r2, #4]
 8008366:	e7ca      	b.n	80082fe <_free_r+0x26>
 8008368:	b003      	add	sp, #12
 800836a:	bd30      	pop	{r4, r5, pc}
 800836c:	20000828 	.word	0x20000828

08008370 <sbrk_aligned>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	4e0e      	ldr	r6, [pc, #56]	; (80083ac <sbrk_aligned+0x3c>)
 8008374:	460c      	mov	r4, r1
 8008376:	6831      	ldr	r1, [r6, #0]
 8008378:	4605      	mov	r5, r0
 800837a:	b911      	cbnz	r1, 8008382 <sbrk_aligned+0x12>
 800837c:	f000 fcd6 	bl	8008d2c <_sbrk_r>
 8008380:	6030      	str	r0, [r6, #0]
 8008382:	4621      	mov	r1, r4
 8008384:	4628      	mov	r0, r5
 8008386:	f000 fcd1 	bl	8008d2c <_sbrk_r>
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	d00a      	beq.n	80083a4 <sbrk_aligned+0x34>
 800838e:	1cc4      	adds	r4, r0, #3
 8008390:	f024 0403 	bic.w	r4, r4, #3
 8008394:	42a0      	cmp	r0, r4
 8008396:	d007      	beq.n	80083a8 <sbrk_aligned+0x38>
 8008398:	1a21      	subs	r1, r4, r0
 800839a:	4628      	mov	r0, r5
 800839c:	f000 fcc6 	bl	8008d2c <_sbrk_r>
 80083a0:	3001      	adds	r0, #1
 80083a2:	d101      	bne.n	80083a8 <sbrk_aligned+0x38>
 80083a4:	f04f 34ff 	mov.w	r4, #4294967295
 80083a8:	4620      	mov	r0, r4
 80083aa:	bd70      	pop	{r4, r5, r6, pc}
 80083ac:	2000082c 	.word	0x2000082c

080083b0 <_malloc_r>:
 80083b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b4:	1ccd      	adds	r5, r1, #3
 80083b6:	f025 0503 	bic.w	r5, r5, #3
 80083ba:	3508      	adds	r5, #8
 80083bc:	2d0c      	cmp	r5, #12
 80083be:	bf38      	it	cc
 80083c0:	250c      	movcc	r5, #12
 80083c2:	2d00      	cmp	r5, #0
 80083c4:	4607      	mov	r7, r0
 80083c6:	db01      	blt.n	80083cc <_malloc_r+0x1c>
 80083c8:	42a9      	cmp	r1, r5
 80083ca:	d905      	bls.n	80083d8 <_malloc_r+0x28>
 80083cc:	230c      	movs	r3, #12
 80083ce:	603b      	str	r3, [r7, #0]
 80083d0:	2600      	movs	r6, #0
 80083d2:	4630      	mov	r0, r6
 80083d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083d8:	4e2e      	ldr	r6, [pc, #184]	; (8008494 <_malloc_r+0xe4>)
 80083da:	f000 ffc7 	bl	800936c <__malloc_lock>
 80083de:	6833      	ldr	r3, [r6, #0]
 80083e0:	461c      	mov	r4, r3
 80083e2:	bb34      	cbnz	r4, 8008432 <_malloc_r+0x82>
 80083e4:	4629      	mov	r1, r5
 80083e6:	4638      	mov	r0, r7
 80083e8:	f7ff ffc2 	bl	8008370 <sbrk_aligned>
 80083ec:	1c43      	adds	r3, r0, #1
 80083ee:	4604      	mov	r4, r0
 80083f0:	d14d      	bne.n	800848e <_malloc_r+0xde>
 80083f2:	6834      	ldr	r4, [r6, #0]
 80083f4:	4626      	mov	r6, r4
 80083f6:	2e00      	cmp	r6, #0
 80083f8:	d140      	bne.n	800847c <_malloc_r+0xcc>
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	4631      	mov	r1, r6
 80083fe:	4638      	mov	r0, r7
 8008400:	eb04 0803 	add.w	r8, r4, r3
 8008404:	f000 fc92 	bl	8008d2c <_sbrk_r>
 8008408:	4580      	cmp	r8, r0
 800840a:	d13a      	bne.n	8008482 <_malloc_r+0xd2>
 800840c:	6821      	ldr	r1, [r4, #0]
 800840e:	3503      	adds	r5, #3
 8008410:	1a6d      	subs	r5, r5, r1
 8008412:	f025 0503 	bic.w	r5, r5, #3
 8008416:	3508      	adds	r5, #8
 8008418:	2d0c      	cmp	r5, #12
 800841a:	bf38      	it	cc
 800841c:	250c      	movcc	r5, #12
 800841e:	4629      	mov	r1, r5
 8008420:	4638      	mov	r0, r7
 8008422:	f7ff ffa5 	bl	8008370 <sbrk_aligned>
 8008426:	3001      	adds	r0, #1
 8008428:	d02b      	beq.n	8008482 <_malloc_r+0xd2>
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	442b      	add	r3, r5
 800842e:	6023      	str	r3, [r4, #0]
 8008430:	e00e      	b.n	8008450 <_malloc_r+0xa0>
 8008432:	6822      	ldr	r2, [r4, #0]
 8008434:	1b52      	subs	r2, r2, r5
 8008436:	d41e      	bmi.n	8008476 <_malloc_r+0xc6>
 8008438:	2a0b      	cmp	r2, #11
 800843a:	d916      	bls.n	800846a <_malloc_r+0xba>
 800843c:	1961      	adds	r1, r4, r5
 800843e:	42a3      	cmp	r3, r4
 8008440:	6025      	str	r5, [r4, #0]
 8008442:	bf18      	it	ne
 8008444:	6059      	strne	r1, [r3, #4]
 8008446:	6863      	ldr	r3, [r4, #4]
 8008448:	bf08      	it	eq
 800844a:	6031      	streq	r1, [r6, #0]
 800844c:	5162      	str	r2, [r4, r5]
 800844e:	604b      	str	r3, [r1, #4]
 8008450:	4638      	mov	r0, r7
 8008452:	f104 060b 	add.w	r6, r4, #11
 8008456:	f000 ff8f 	bl	8009378 <__malloc_unlock>
 800845a:	f026 0607 	bic.w	r6, r6, #7
 800845e:	1d23      	adds	r3, r4, #4
 8008460:	1af2      	subs	r2, r6, r3
 8008462:	d0b6      	beq.n	80083d2 <_malloc_r+0x22>
 8008464:	1b9b      	subs	r3, r3, r6
 8008466:	50a3      	str	r3, [r4, r2]
 8008468:	e7b3      	b.n	80083d2 <_malloc_r+0x22>
 800846a:	6862      	ldr	r2, [r4, #4]
 800846c:	42a3      	cmp	r3, r4
 800846e:	bf0c      	ite	eq
 8008470:	6032      	streq	r2, [r6, #0]
 8008472:	605a      	strne	r2, [r3, #4]
 8008474:	e7ec      	b.n	8008450 <_malloc_r+0xa0>
 8008476:	4623      	mov	r3, r4
 8008478:	6864      	ldr	r4, [r4, #4]
 800847a:	e7b2      	b.n	80083e2 <_malloc_r+0x32>
 800847c:	4634      	mov	r4, r6
 800847e:	6876      	ldr	r6, [r6, #4]
 8008480:	e7b9      	b.n	80083f6 <_malloc_r+0x46>
 8008482:	230c      	movs	r3, #12
 8008484:	603b      	str	r3, [r7, #0]
 8008486:	4638      	mov	r0, r7
 8008488:	f000 ff76 	bl	8009378 <__malloc_unlock>
 800848c:	e7a1      	b.n	80083d2 <_malloc_r+0x22>
 800848e:	6025      	str	r5, [r4, #0]
 8008490:	e7de      	b.n	8008450 <_malloc_r+0xa0>
 8008492:	bf00      	nop
 8008494:	20000828 	.word	0x20000828

08008498 <__ssputs_r>:
 8008498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800849c:	688e      	ldr	r6, [r1, #8]
 800849e:	429e      	cmp	r6, r3
 80084a0:	4682      	mov	sl, r0
 80084a2:	460c      	mov	r4, r1
 80084a4:	4690      	mov	r8, r2
 80084a6:	461f      	mov	r7, r3
 80084a8:	d838      	bhi.n	800851c <__ssputs_r+0x84>
 80084aa:	898a      	ldrh	r2, [r1, #12]
 80084ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084b0:	d032      	beq.n	8008518 <__ssputs_r+0x80>
 80084b2:	6825      	ldr	r5, [r4, #0]
 80084b4:	6909      	ldr	r1, [r1, #16]
 80084b6:	eba5 0901 	sub.w	r9, r5, r1
 80084ba:	6965      	ldr	r5, [r4, #20]
 80084bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084c4:	3301      	adds	r3, #1
 80084c6:	444b      	add	r3, r9
 80084c8:	106d      	asrs	r5, r5, #1
 80084ca:	429d      	cmp	r5, r3
 80084cc:	bf38      	it	cc
 80084ce:	461d      	movcc	r5, r3
 80084d0:	0553      	lsls	r3, r2, #21
 80084d2:	d531      	bpl.n	8008538 <__ssputs_r+0xa0>
 80084d4:	4629      	mov	r1, r5
 80084d6:	f7ff ff6b 	bl	80083b0 <_malloc_r>
 80084da:	4606      	mov	r6, r0
 80084dc:	b950      	cbnz	r0, 80084f4 <__ssputs_r+0x5c>
 80084de:	230c      	movs	r3, #12
 80084e0:	f8ca 3000 	str.w	r3, [sl]
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ea:	81a3      	strh	r3, [r4, #12]
 80084ec:	f04f 30ff 	mov.w	r0, #4294967295
 80084f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f4:	6921      	ldr	r1, [r4, #16]
 80084f6:	464a      	mov	r2, r9
 80084f8:	f000 ff10 	bl	800931c <memcpy>
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008506:	81a3      	strh	r3, [r4, #12]
 8008508:	6126      	str	r6, [r4, #16]
 800850a:	6165      	str	r5, [r4, #20]
 800850c:	444e      	add	r6, r9
 800850e:	eba5 0509 	sub.w	r5, r5, r9
 8008512:	6026      	str	r6, [r4, #0]
 8008514:	60a5      	str	r5, [r4, #8]
 8008516:	463e      	mov	r6, r7
 8008518:	42be      	cmp	r6, r7
 800851a:	d900      	bls.n	800851e <__ssputs_r+0x86>
 800851c:	463e      	mov	r6, r7
 800851e:	6820      	ldr	r0, [r4, #0]
 8008520:	4632      	mov	r2, r6
 8008522:	4641      	mov	r1, r8
 8008524:	f000 ff08 	bl	8009338 <memmove>
 8008528:	68a3      	ldr	r3, [r4, #8]
 800852a:	1b9b      	subs	r3, r3, r6
 800852c:	60a3      	str	r3, [r4, #8]
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	4433      	add	r3, r6
 8008532:	6023      	str	r3, [r4, #0]
 8008534:	2000      	movs	r0, #0
 8008536:	e7db      	b.n	80084f0 <__ssputs_r+0x58>
 8008538:	462a      	mov	r2, r5
 800853a:	f000 ff23 	bl	8009384 <_realloc_r>
 800853e:	4606      	mov	r6, r0
 8008540:	2800      	cmp	r0, #0
 8008542:	d1e1      	bne.n	8008508 <__ssputs_r+0x70>
 8008544:	6921      	ldr	r1, [r4, #16]
 8008546:	4650      	mov	r0, sl
 8008548:	f7ff fec6 	bl	80082d8 <_free_r>
 800854c:	e7c7      	b.n	80084de <__ssputs_r+0x46>
	...

08008550 <_svfiprintf_r>:
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	4698      	mov	r8, r3
 8008556:	898b      	ldrh	r3, [r1, #12]
 8008558:	061b      	lsls	r3, r3, #24
 800855a:	b09d      	sub	sp, #116	; 0x74
 800855c:	4607      	mov	r7, r0
 800855e:	460d      	mov	r5, r1
 8008560:	4614      	mov	r4, r2
 8008562:	d50e      	bpl.n	8008582 <_svfiprintf_r+0x32>
 8008564:	690b      	ldr	r3, [r1, #16]
 8008566:	b963      	cbnz	r3, 8008582 <_svfiprintf_r+0x32>
 8008568:	2140      	movs	r1, #64	; 0x40
 800856a:	f7ff ff21 	bl	80083b0 <_malloc_r>
 800856e:	6028      	str	r0, [r5, #0]
 8008570:	6128      	str	r0, [r5, #16]
 8008572:	b920      	cbnz	r0, 800857e <_svfiprintf_r+0x2e>
 8008574:	230c      	movs	r3, #12
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	f04f 30ff 	mov.w	r0, #4294967295
 800857c:	e0d1      	b.n	8008722 <_svfiprintf_r+0x1d2>
 800857e:	2340      	movs	r3, #64	; 0x40
 8008580:	616b      	str	r3, [r5, #20]
 8008582:	2300      	movs	r3, #0
 8008584:	9309      	str	r3, [sp, #36]	; 0x24
 8008586:	2320      	movs	r3, #32
 8008588:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800858c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008590:	2330      	movs	r3, #48	; 0x30
 8008592:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800873c <_svfiprintf_r+0x1ec>
 8008596:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800859a:	f04f 0901 	mov.w	r9, #1
 800859e:	4623      	mov	r3, r4
 80085a0:	469a      	mov	sl, r3
 80085a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085a6:	b10a      	cbz	r2, 80085ac <_svfiprintf_r+0x5c>
 80085a8:	2a25      	cmp	r2, #37	; 0x25
 80085aa:	d1f9      	bne.n	80085a0 <_svfiprintf_r+0x50>
 80085ac:	ebba 0b04 	subs.w	fp, sl, r4
 80085b0:	d00b      	beq.n	80085ca <_svfiprintf_r+0x7a>
 80085b2:	465b      	mov	r3, fp
 80085b4:	4622      	mov	r2, r4
 80085b6:	4629      	mov	r1, r5
 80085b8:	4638      	mov	r0, r7
 80085ba:	f7ff ff6d 	bl	8008498 <__ssputs_r>
 80085be:	3001      	adds	r0, #1
 80085c0:	f000 80aa 	beq.w	8008718 <_svfiprintf_r+0x1c8>
 80085c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085c6:	445a      	add	r2, fp
 80085c8:	9209      	str	r2, [sp, #36]	; 0x24
 80085ca:	f89a 3000 	ldrb.w	r3, [sl]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f000 80a2 	beq.w	8008718 <_svfiprintf_r+0x1c8>
 80085d4:	2300      	movs	r3, #0
 80085d6:	f04f 32ff 	mov.w	r2, #4294967295
 80085da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085de:	f10a 0a01 	add.w	sl, sl, #1
 80085e2:	9304      	str	r3, [sp, #16]
 80085e4:	9307      	str	r3, [sp, #28]
 80085e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085ea:	931a      	str	r3, [sp, #104]	; 0x68
 80085ec:	4654      	mov	r4, sl
 80085ee:	2205      	movs	r2, #5
 80085f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f4:	4851      	ldr	r0, [pc, #324]	; (800873c <_svfiprintf_r+0x1ec>)
 80085f6:	f7f7 fdf3 	bl	80001e0 <memchr>
 80085fa:	9a04      	ldr	r2, [sp, #16]
 80085fc:	b9d8      	cbnz	r0, 8008636 <_svfiprintf_r+0xe6>
 80085fe:	06d0      	lsls	r0, r2, #27
 8008600:	bf44      	itt	mi
 8008602:	2320      	movmi	r3, #32
 8008604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008608:	0711      	lsls	r1, r2, #28
 800860a:	bf44      	itt	mi
 800860c:	232b      	movmi	r3, #43	; 0x2b
 800860e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008612:	f89a 3000 	ldrb.w	r3, [sl]
 8008616:	2b2a      	cmp	r3, #42	; 0x2a
 8008618:	d015      	beq.n	8008646 <_svfiprintf_r+0xf6>
 800861a:	9a07      	ldr	r2, [sp, #28]
 800861c:	4654      	mov	r4, sl
 800861e:	2000      	movs	r0, #0
 8008620:	f04f 0c0a 	mov.w	ip, #10
 8008624:	4621      	mov	r1, r4
 8008626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800862a:	3b30      	subs	r3, #48	; 0x30
 800862c:	2b09      	cmp	r3, #9
 800862e:	d94e      	bls.n	80086ce <_svfiprintf_r+0x17e>
 8008630:	b1b0      	cbz	r0, 8008660 <_svfiprintf_r+0x110>
 8008632:	9207      	str	r2, [sp, #28]
 8008634:	e014      	b.n	8008660 <_svfiprintf_r+0x110>
 8008636:	eba0 0308 	sub.w	r3, r0, r8
 800863a:	fa09 f303 	lsl.w	r3, r9, r3
 800863e:	4313      	orrs	r3, r2
 8008640:	9304      	str	r3, [sp, #16]
 8008642:	46a2      	mov	sl, r4
 8008644:	e7d2      	b.n	80085ec <_svfiprintf_r+0x9c>
 8008646:	9b03      	ldr	r3, [sp, #12]
 8008648:	1d19      	adds	r1, r3, #4
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	9103      	str	r1, [sp, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	bfbb      	ittet	lt
 8008652:	425b      	neglt	r3, r3
 8008654:	f042 0202 	orrlt.w	r2, r2, #2
 8008658:	9307      	strge	r3, [sp, #28]
 800865a:	9307      	strlt	r3, [sp, #28]
 800865c:	bfb8      	it	lt
 800865e:	9204      	strlt	r2, [sp, #16]
 8008660:	7823      	ldrb	r3, [r4, #0]
 8008662:	2b2e      	cmp	r3, #46	; 0x2e
 8008664:	d10c      	bne.n	8008680 <_svfiprintf_r+0x130>
 8008666:	7863      	ldrb	r3, [r4, #1]
 8008668:	2b2a      	cmp	r3, #42	; 0x2a
 800866a:	d135      	bne.n	80086d8 <_svfiprintf_r+0x188>
 800866c:	9b03      	ldr	r3, [sp, #12]
 800866e:	1d1a      	adds	r2, r3, #4
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	9203      	str	r2, [sp, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	bfb8      	it	lt
 8008678:	f04f 33ff 	movlt.w	r3, #4294967295
 800867c:	3402      	adds	r4, #2
 800867e:	9305      	str	r3, [sp, #20]
 8008680:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800874c <_svfiprintf_r+0x1fc>
 8008684:	7821      	ldrb	r1, [r4, #0]
 8008686:	2203      	movs	r2, #3
 8008688:	4650      	mov	r0, sl
 800868a:	f7f7 fda9 	bl	80001e0 <memchr>
 800868e:	b140      	cbz	r0, 80086a2 <_svfiprintf_r+0x152>
 8008690:	2340      	movs	r3, #64	; 0x40
 8008692:	eba0 000a 	sub.w	r0, r0, sl
 8008696:	fa03 f000 	lsl.w	r0, r3, r0
 800869a:	9b04      	ldr	r3, [sp, #16]
 800869c:	4303      	orrs	r3, r0
 800869e:	3401      	adds	r4, #1
 80086a0:	9304      	str	r3, [sp, #16]
 80086a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a6:	4826      	ldr	r0, [pc, #152]	; (8008740 <_svfiprintf_r+0x1f0>)
 80086a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086ac:	2206      	movs	r2, #6
 80086ae:	f7f7 fd97 	bl	80001e0 <memchr>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d038      	beq.n	8008728 <_svfiprintf_r+0x1d8>
 80086b6:	4b23      	ldr	r3, [pc, #140]	; (8008744 <_svfiprintf_r+0x1f4>)
 80086b8:	bb1b      	cbnz	r3, 8008702 <_svfiprintf_r+0x1b2>
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	3307      	adds	r3, #7
 80086be:	f023 0307 	bic.w	r3, r3, #7
 80086c2:	3308      	adds	r3, #8
 80086c4:	9303      	str	r3, [sp, #12]
 80086c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c8:	4433      	add	r3, r6
 80086ca:	9309      	str	r3, [sp, #36]	; 0x24
 80086cc:	e767      	b.n	800859e <_svfiprintf_r+0x4e>
 80086ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80086d2:	460c      	mov	r4, r1
 80086d4:	2001      	movs	r0, #1
 80086d6:	e7a5      	b.n	8008624 <_svfiprintf_r+0xd4>
 80086d8:	2300      	movs	r3, #0
 80086da:	3401      	adds	r4, #1
 80086dc:	9305      	str	r3, [sp, #20]
 80086de:	4619      	mov	r1, r3
 80086e0:	f04f 0c0a 	mov.w	ip, #10
 80086e4:	4620      	mov	r0, r4
 80086e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ea:	3a30      	subs	r2, #48	; 0x30
 80086ec:	2a09      	cmp	r2, #9
 80086ee:	d903      	bls.n	80086f8 <_svfiprintf_r+0x1a8>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d0c5      	beq.n	8008680 <_svfiprintf_r+0x130>
 80086f4:	9105      	str	r1, [sp, #20]
 80086f6:	e7c3      	b.n	8008680 <_svfiprintf_r+0x130>
 80086f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086fc:	4604      	mov	r4, r0
 80086fe:	2301      	movs	r3, #1
 8008700:	e7f0      	b.n	80086e4 <_svfiprintf_r+0x194>
 8008702:	ab03      	add	r3, sp, #12
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	462a      	mov	r2, r5
 8008708:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <_svfiprintf_r+0x1f8>)
 800870a:	a904      	add	r1, sp, #16
 800870c:	4638      	mov	r0, r7
 800870e:	f3af 8000 	nop.w
 8008712:	1c42      	adds	r2, r0, #1
 8008714:	4606      	mov	r6, r0
 8008716:	d1d6      	bne.n	80086c6 <_svfiprintf_r+0x176>
 8008718:	89ab      	ldrh	r3, [r5, #12]
 800871a:	065b      	lsls	r3, r3, #25
 800871c:	f53f af2c 	bmi.w	8008578 <_svfiprintf_r+0x28>
 8008720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008722:	b01d      	add	sp, #116	; 0x74
 8008724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008728:	ab03      	add	r3, sp, #12
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	462a      	mov	r2, r5
 800872e:	4b06      	ldr	r3, [pc, #24]	; (8008748 <_svfiprintf_r+0x1f8>)
 8008730:	a904      	add	r1, sp, #16
 8008732:	4638      	mov	r0, r7
 8008734:	f000 f9d4 	bl	8008ae0 <_printf_i>
 8008738:	e7eb      	b.n	8008712 <_svfiprintf_r+0x1c2>
 800873a:	bf00      	nop
 800873c:	08009792 	.word	0x08009792
 8008740:	0800979c 	.word	0x0800979c
 8008744:	00000000 	.word	0x00000000
 8008748:	08008499 	.word	0x08008499
 800874c:	08009798 	.word	0x08009798

08008750 <__sfputc_r>:
 8008750:	6893      	ldr	r3, [r2, #8]
 8008752:	3b01      	subs	r3, #1
 8008754:	2b00      	cmp	r3, #0
 8008756:	b410      	push	{r4}
 8008758:	6093      	str	r3, [r2, #8]
 800875a:	da08      	bge.n	800876e <__sfputc_r+0x1e>
 800875c:	6994      	ldr	r4, [r2, #24]
 800875e:	42a3      	cmp	r3, r4
 8008760:	db01      	blt.n	8008766 <__sfputc_r+0x16>
 8008762:	290a      	cmp	r1, #10
 8008764:	d103      	bne.n	800876e <__sfputc_r+0x1e>
 8008766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800876a:	f000 baef 	b.w	8008d4c <__swbuf_r>
 800876e:	6813      	ldr	r3, [r2, #0]
 8008770:	1c58      	adds	r0, r3, #1
 8008772:	6010      	str	r0, [r2, #0]
 8008774:	7019      	strb	r1, [r3, #0]
 8008776:	4608      	mov	r0, r1
 8008778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800877c:	4770      	bx	lr

0800877e <__sfputs_r>:
 800877e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008780:	4606      	mov	r6, r0
 8008782:	460f      	mov	r7, r1
 8008784:	4614      	mov	r4, r2
 8008786:	18d5      	adds	r5, r2, r3
 8008788:	42ac      	cmp	r4, r5
 800878a:	d101      	bne.n	8008790 <__sfputs_r+0x12>
 800878c:	2000      	movs	r0, #0
 800878e:	e007      	b.n	80087a0 <__sfputs_r+0x22>
 8008790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008794:	463a      	mov	r2, r7
 8008796:	4630      	mov	r0, r6
 8008798:	f7ff ffda 	bl	8008750 <__sfputc_r>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d1f3      	bne.n	8008788 <__sfputs_r+0xa>
 80087a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087a4 <_vfiprintf_r>:
 80087a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a8:	460d      	mov	r5, r1
 80087aa:	b09d      	sub	sp, #116	; 0x74
 80087ac:	4614      	mov	r4, r2
 80087ae:	4698      	mov	r8, r3
 80087b0:	4606      	mov	r6, r0
 80087b2:	b118      	cbz	r0, 80087bc <_vfiprintf_r+0x18>
 80087b4:	6983      	ldr	r3, [r0, #24]
 80087b6:	b90b      	cbnz	r3, 80087bc <_vfiprintf_r+0x18>
 80087b8:	f000 fcaa 	bl	8009110 <__sinit>
 80087bc:	4b89      	ldr	r3, [pc, #548]	; (80089e4 <_vfiprintf_r+0x240>)
 80087be:	429d      	cmp	r5, r3
 80087c0:	d11b      	bne.n	80087fa <_vfiprintf_r+0x56>
 80087c2:	6875      	ldr	r5, [r6, #4]
 80087c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087c6:	07d9      	lsls	r1, r3, #31
 80087c8:	d405      	bmi.n	80087d6 <_vfiprintf_r+0x32>
 80087ca:	89ab      	ldrh	r3, [r5, #12]
 80087cc:	059a      	lsls	r2, r3, #22
 80087ce:	d402      	bmi.n	80087d6 <_vfiprintf_r+0x32>
 80087d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087d2:	f000 fd3b 	bl	800924c <__retarget_lock_acquire_recursive>
 80087d6:	89ab      	ldrh	r3, [r5, #12]
 80087d8:	071b      	lsls	r3, r3, #28
 80087da:	d501      	bpl.n	80087e0 <_vfiprintf_r+0x3c>
 80087dc:	692b      	ldr	r3, [r5, #16]
 80087de:	b9eb      	cbnz	r3, 800881c <_vfiprintf_r+0x78>
 80087e0:	4629      	mov	r1, r5
 80087e2:	4630      	mov	r0, r6
 80087e4:	f000 fb04 	bl	8008df0 <__swsetup_r>
 80087e8:	b1c0      	cbz	r0, 800881c <_vfiprintf_r+0x78>
 80087ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ec:	07dc      	lsls	r4, r3, #31
 80087ee:	d50e      	bpl.n	800880e <_vfiprintf_r+0x6a>
 80087f0:	f04f 30ff 	mov.w	r0, #4294967295
 80087f4:	b01d      	add	sp, #116	; 0x74
 80087f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fa:	4b7b      	ldr	r3, [pc, #492]	; (80089e8 <_vfiprintf_r+0x244>)
 80087fc:	429d      	cmp	r5, r3
 80087fe:	d101      	bne.n	8008804 <_vfiprintf_r+0x60>
 8008800:	68b5      	ldr	r5, [r6, #8]
 8008802:	e7df      	b.n	80087c4 <_vfiprintf_r+0x20>
 8008804:	4b79      	ldr	r3, [pc, #484]	; (80089ec <_vfiprintf_r+0x248>)
 8008806:	429d      	cmp	r5, r3
 8008808:	bf08      	it	eq
 800880a:	68f5      	ldreq	r5, [r6, #12]
 800880c:	e7da      	b.n	80087c4 <_vfiprintf_r+0x20>
 800880e:	89ab      	ldrh	r3, [r5, #12]
 8008810:	0598      	lsls	r0, r3, #22
 8008812:	d4ed      	bmi.n	80087f0 <_vfiprintf_r+0x4c>
 8008814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008816:	f000 fd1a 	bl	800924e <__retarget_lock_release_recursive>
 800881a:	e7e9      	b.n	80087f0 <_vfiprintf_r+0x4c>
 800881c:	2300      	movs	r3, #0
 800881e:	9309      	str	r3, [sp, #36]	; 0x24
 8008820:	2320      	movs	r3, #32
 8008822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008826:	f8cd 800c 	str.w	r8, [sp, #12]
 800882a:	2330      	movs	r3, #48	; 0x30
 800882c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089f0 <_vfiprintf_r+0x24c>
 8008830:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008834:	f04f 0901 	mov.w	r9, #1
 8008838:	4623      	mov	r3, r4
 800883a:	469a      	mov	sl, r3
 800883c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008840:	b10a      	cbz	r2, 8008846 <_vfiprintf_r+0xa2>
 8008842:	2a25      	cmp	r2, #37	; 0x25
 8008844:	d1f9      	bne.n	800883a <_vfiprintf_r+0x96>
 8008846:	ebba 0b04 	subs.w	fp, sl, r4
 800884a:	d00b      	beq.n	8008864 <_vfiprintf_r+0xc0>
 800884c:	465b      	mov	r3, fp
 800884e:	4622      	mov	r2, r4
 8008850:	4629      	mov	r1, r5
 8008852:	4630      	mov	r0, r6
 8008854:	f7ff ff93 	bl	800877e <__sfputs_r>
 8008858:	3001      	adds	r0, #1
 800885a:	f000 80aa 	beq.w	80089b2 <_vfiprintf_r+0x20e>
 800885e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008860:	445a      	add	r2, fp
 8008862:	9209      	str	r2, [sp, #36]	; 0x24
 8008864:	f89a 3000 	ldrb.w	r3, [sl]
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 80a2 	beq.w	80089b2 <_vfiprintf_r+0x20e>
 800886e:	2300      	movs	r3, #0
 8008870:	f04f 32ff 	mov.w	r2, #4294967295
 8008874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008878:	f10a 0a01 	add.w	sl, sl, #1
 800887c:	9304      	str	r3, [sp, #16]
 800887e:	9307      	str	r3, [sp, #28]
 8008880:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008884:	931a      	str	r3, [sp, #104]	; 0x68
 8008886:	4654      	mov	r4, sl
 8008888:	2205      	movs	r2, #5
 800888a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800888e:	4858      	ldr	r0, [pc, #352]	; (80089f0 <_vfiprintf_r+0x24c>)
 8008890:	f7f7 fca6 	bl	80001e0 <memchr>
 8008894:	9a04      	ldr	r2, [sp, #16]
 8008896:	b9d8      	cbnz	r0, 80088d0 <_vfiprintf_r+0x12c>
 8008898:	06d1      	lsls	r1, r2, #27
 800889a:	bf44      	itt	mi
 800889c:	2320      	movmi	r3, #32
 800889e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088a2:	0713      	lsls	r3, r2, #28
 80088a4:	bf44      	itt	mi
 80088a6:	232b      	movmi	r3, #43	; 0x2b
 80088a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ac:	f89a 3000 	ldrb.w	r3, [sl]
 80088b0:	2b2a      	cmp	r3, #42	; 0x2a
 80088b2:	d015      	beq.n	80088e0 <_vfiprintf_r+0x13c>
 80088b4:	9a07      	ldr	r2, [sp, #28]
 80088b6:	4654      	mov	r4, sl
 80088b8:	2000      	movs	r0, #0
 80088ba:	f04f 0c0a 	mov.w	ip, #10
 80088be:	4621      	mov	r1, r4
 80088c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088c4:	3b30      	subs	r3, #48	; 0x30
 80088c6:	2b09      	cmp	r3, #9
 80088c8:	d94e      	bls.n	8008968 <_vfiprintf_r+0x1c4>
 80088ca:	b1b0      	cbz	r0, 80088fa <_vfiprintf_r+0x156>
 80088cc:	9207      	str	r2, [sp, #28]
 80088ce:	e014      	b.n	80088fa <_vfiprintf_r+0x156>
 80088d0:	eba0 0308 	sub.w	r3, r0, r8
 80088d4:	fa09 f303 	lsl.w	r3, r9, r3
 80088d8:	4313      	orrs	r3, r2
 80088da:	9304      	str	r3, [sp, #16]
 80088dc:	46a2      	mov	sl, r4
 80088de:	e7d2      	b.n	8008886 <_vfiprintf_r+0xe2>
 80088e0:	9b03      	ldr	r3, [sp, #12]
 80088e2:	1d19      	adds	r1, r3, #4
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	9103      	str	r1, [sp, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bfbb      	ittet	lt
 80088ec:	425b      	neglt	r3, r3
 80088ee:	f042 0202 	orrlt.w	r2, r2, #2
 80088f2:	9307      	strge	r3, [sp, #28]
 80088f4:	9307      	strlt	r3, [sp, #28]
 80088f6:	bfb8      	it	lt
 80088f8:	9204      	strlt	r2, [sp, #16]
 80088fa:	7823      	ldrb	r3, [r4, #0]
 80088fc:	2b2e      	cmp	r3, #46	; 0x2e
 80088fe:	d10c      	bne.n	800891a <_vfiprintf_r+0x176>
 8008900:	7863      	ldrb	r3, [r4, #1]
 8008902:	2b2a      	cmp	r3, #42	; 0x2a
 8008904:	d135      	bne.n	8008972 <_vfiprintf_r+0x1ce>
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	1d1a      	adds	r2, r3, #4
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	9203      	str	r2, [sp, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	bfb8      	it	lt
 8008912:	f04f 33ff 	movlt.w	r3, #4294967295
 8008916:	3402      	adds	r4, #2
 8008918:	9305      	str	r3, [sp, #20]
 800891a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a00 <_vfiprintf_r+0x25c>
 800891e:	7821      	ldrb	r1, [r4, #0]
 8008920:	2203      	movs	r2, #3
 8008922:	4650      	mov	r0, sl
 8008924:	f7f7 fc5c 	bl	80001e0 <memchr>
 8008928:	b140      	cbz	r0, 800893c <_vfiprintf_r+0x198>
 800892a:	2340      	movs	r3, #64	; 0x40
 800892c:	eba0 000a 	sub.w	r0, r0, sl
 8008930:	fa03 f000 	lsl.w	r0, r3, r0
 8008934:	9b04      	ldr	r3, [sp, #16]
 8008936:	4303      	orrs	r3, r0
 8008938:	3401      	adds	r4, #1
 800893a:	9304      	str	r3, [sp, #16]
 800893c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008940:	482c      	ldr	r0, [pc, #176]	; (80089f4 <_vfiprintf_r+0x250>)
 8008942:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008946:	2206      	movs	r2, #6
 8008948:	f7f7 fc4a 	bl	80001e0 <memchr>
 800894c:	2800      	cmp	r0, #0
 800894e:	d03f      	beq.n	80089d0 <_vfiprintf_r+0x22c>
 8008950:	4b29      	ldr	r3, [pc, #164]	; (80089f8 <_vfiprintf_r+0x254>)
 8008952:	bb1b      	cbnz	r3, 800899c <_vfiprintf_r+0x1f8>
 8008954:	9b03      	ldr	r3, [sp, #12]
 8008956:	3307      	adds	r3, #7
 8008958:	f023 0307 	bic.w	r3, r3, #7
 800895c:	3308      	adds	r3, #8
 800895e:	9303      	str	r3, [sp, #12]
 8008960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008962:	443b      	add	r3, r7
 8008964:	9309      	str	r3, [sp, #36]	; 0x24
 8008966:	e767      	b.n	8008838 <_vfiprintf_r+0x94>
 8008968:	fb0c 3202 	mla	r2, ip, r2, r3
 800896c:	460c      	mov	r4, r1
 800896e:	2001      	movs	r0, #1
 8008970:	e7a5      	b.n	80088be <_vfiprintf_r+0x11a>
 8008972:	2300      	movs	r3, #0
 8008974:	3401      	adds	r4, #1
 8008976:	9305      	str	r3, [sp, #20]
 8008978:	4619      	mov	r1, r3
 800897a:	f04f 0c0a 	mov.w	ip, #10
 800897e:	4620      	mov	r0, r4
 8008980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008984:	3a30      	subs	r2, #48	; 0x30
 8008986:	2a09      	cmp	r2, #9
 8008988:	d903      	bls.n	8008992 <_vfiprintf_r+0x1ee>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d0c5      	beq.n	800891a <_vfiprintf_r+0x176>
 800898e:	9105      	str	r1, [sp, #20]
 8008990:	e7c3      	b.n	800891a <_vfiprintf_r+0x176>
 8008992:	fb0c 2101 	mla	r1, ip, r1, r2
 8008996:	4604      	mov	r4, r0
 8008998:	2301      	movs	r3, #1
 800899a:	e7f0      	b.n	800897e <_vfiprintf_r+0x1da>
 800899c:	ab03      	add	r3, sp, #12
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	462a      	mov	r2, r5
 80089a2:	4b16      	ldr	r3, [pc, #88]	; (80089fc <_vfiprintf_r+0x258>)
 80089a4:	a904      	add	r1, sp, #16
 80089a6:	4630      	mov	r0, r6
 80089a8:	f3af 8000 	nop.w
 80089ac:	4607      	mov	r7, r0
 80089ae:	1c78      	adds	r0, r7, #1
 80089b0:	d1d6      	bne.n	8008960 <_vfiprintf_r+0x1bc>
 80089b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089b4:	07d9      	lsls	r1, r3, #31
 80089b6:	d405      	bmi.n	80089c4 <_vfiprintf_r+0x220>
 80089b8:	89ab      	ldrh	r3, [r5, #12]
 80089ba:	059a      	lsls	r2, r3, #22
 80089bc:	d402      	bmi.n	80089c4 <_vfiprintf_r+0x220>
 80089be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089c0:	f000 fc45 	bl	800924e <__retarget_lock_release_recursive>
 80089c4:	89ab      	ldrh	r3, [r5, #12]
 80089c6:	065b      	lsls	r3, r3, #25
 80089c8:	f53f af12 	bmi.w	80087f0 <_vfiprintf_r+0x4c>
 80089cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ce:	e711      	b.n	80087f4 <_vfiprintf_r+0x50>
 80089d0:	ab03      	add	r3, sp, #12
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	462a      	mov	r2, r5
 80089d6:	4b09      	ldr	r3, [pc, #36]	; (80089fc <_vfiprintf_r+0x258>)
 80089d8:	a904      	add	r1, sp, #16
 80089da:	4630      	mov	r0, r6
 80089dc:	f000 f880 	bl	8008ae0 <_printf_i>
 80089e0:	e7e4      	b.n	80089ac <_vfiprintf_r+0x208>
 80089e2:	bf00      	nop
 80089e4:	080097e8 	.word	0x080097e8
 80089e8:	08009808 	.word	0x08009808
 80089ec:	080097c8 	.word	0x080097c8
 80089f0:	08009792 	.word	0x08009792
 80089f4:	0800979c 	.word	0x0800979c
 80089f8:	00000000 	.word	0x00000000
 80089fc:	0800877f 	.word	0x0800877f
 8008a00:	08009798 	.word	0x08009798

08008a04 <_printf_common>:
 8008a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a08:	4616      	mov	r6, r2
 8008a0a:	4699      	mov	r9, r3
 8008a0c:	688a      	ldr	r2, [r1, #8]
 8008a0e:	690b      	ldr	r3, [r1, #16]
 8008a10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a14:	4293      	cmp	r3, r2
 8008a16:	bfb8      	it	lt
 8008a18:	4613      	movlt	r3, r2
 8008a1a:	6033      	str	r3, [r6, #0]
 8008a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a20:	4607      	mov	r7, r0
 8008a22:	460c      	mov	r4, r1
 8008a24:	b10a      	cbz	r2, 8008a2a <_printf_common+0x26>
 8008a26:	3301      	adds	r3, #1
 8008a28:	6033      	str	r3, [r6, #0]
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	0699      	lsls	r1, r3, #26
 8008a2e:	bf42      	ittt	mi
 8008a30:	6833      	ldrmi	r3, [r6, #0]
 8008a32:	3302      	addmi	r3, #2
 8008a34:	6033      	strmi	r3, [r6, #0]
 8008a36:	6825      	ldr	r5, [r4, #0]
 8008a38:	f015 0506 	ands.w	r5, r5, #6
 8008a3c:	d106      	bne.n	8008a4c <_printf_common+0x48>
 8008a3e:	f104 0a19 	add.w	sl, r4, #25
 8008a42:	68e3      	ldr	r3, [r4, #12]
 8008a44:	6832      	ldr	r2, [r6, #0]
 8008a46:	1a9b      	subs	r3, r3, r2
 8008a48:	42ab      	cmp	r3, r5
 8008a4a:	dc26      	bgt.n	8008a9a <_printf_common+0x96>
 8008a4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a50:	1e13      	subs	r3, r2, #0
 8008a52:	6822      	ldr	r2, [r4, #0]
 8008a54:	bf18      	it	ne
 8008a56:	2301      	movne	r3, #1
 8008a58:	0692      	lsls	r2, r2, #26
 8008a5a:	d42b      	bmi.n	8008ab4 <_printf_common+0xb0>
 8008a5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a60:	4649      	mov	r1, r9
 8008a62:	4638      	mov	r0, r7
 8008a64:	47c0      	blx	r8
 8008a66:	3001      	adds	r0, #1
 8008a68:	d01e      	beq.n	8008aa8 <_printf_common+0xa4>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	68e5      	ldr	r5, [r4, #12]
 8008a6e:	6832      	ldr	r2, [r6, #0]
 8008a70:	f003 0306 	and.w	r3, r3, #6
 8008a74:	2b04      	cmp	r3, #4
 8008a76:	bf08      	it	eq
 8008a78:	1aad      	subeq	r5, r5, r2
 8008a7a:	68a3      	ldr	r3, [r4, #8]
 8008a7c:	6922      	ldr	r2, [r4, #16]
 8008a7e:	bf0c      	ite	eq
 8008a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a84:	2500      	movne	r5, #0
 8008a86:	4293      	cmp	r3, r2
 8008a88:	bfc4      	itt	gt
 8008a8a:	1a9b      	subgt	r3, r3, r2
 8008a8c:	18ed      	addgt	r5, r5, r3
 8008a8e:	2600      	movs	r6, #0
 8008a90:	341a      	adds	r4, #26
 8008a92:	42b5      	cmp	r5, r6
 8008a94:	d11a      	bne.n	8008acc <_printf_common+0xc8>
 8008a96:	2000      	movs	r0, #0
 8008a98:	e008      	b.n	8008aac <_printf_common+0xa8>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4652      	mov	r2, sl
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	47c0      	blx	r8
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d103      	bne.n	8008ab0 <_printf_common+0xac>
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab0:	3501      	adds	r5, #1
 8008ab2:	e7c6      	b.n	8008a42 <_printf_common+0x3e>
 8008ab4:	18e1      	adds	r1, r4, r3
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	2030      	movs	r0, #48	; 0x30
 8008aba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008abe:	4422      	add	r2, r4
 8008ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ac4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ac8:	3302      	adds	r3, #2
 8008aca:	e7c7      	b.n	8008a5c <_printf_common+0x58>
 8008acc:	2301      	movs	r3, #1
 8008ace:	4622      	mov	r2, r4
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	47c0      	blx	r8
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	d0e6      	beq.n	8008aa8 <_printf_common+0xa4>
 8008ada:	3601      	adds	r6, #1
 8008adc:	e7d9      	b.n	8008a92 <_printf_common+0x8e>
	...

08008ae0 <_printf_i>:
 8008ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	7e0f      	ldrb	r7, [r1, #24]
 8008ae6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ae8:	2f78      	cmp	r7, #120	; 0x78
 8008aea:	4691      	mov	r9, r2
 8008aec:	4680      	mov	r8, r0
 8008aee:	460c      	mov	r4, r1
 8008af0:	469a      	mov	sl, r3
 8008af2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008af6:	d807      	bhi.n	8008b08 <_printf_i+0x28>
 8008af8:	2f62      	cmp	r7, #98	; 0x62
 8008afa:	d80a      	bhi.n	8008b12 <_printf_i+0x32>
 8008afc:	2f00      	cmp	r7, #0
 8008afe:	f000 80d8 	beq.w	8008cb2 <_printf_i+0x1d2>
 8008b02:	2f58      	cmp	r7, #88	; 0x58
 8008b04:	f000 80a3 	beq.w	8008c4e <_printf_i+0x16e>
 8008b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b10:	e03a      	b.n	8008b88 <_printf_i+0xa8>
 8008b12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b16:	2b15      	cmp	r3, #21
 8008b18:	d8f6      	bhi.n	8008b08 <_printf_i+0x28>
 8008b1a:	a101      	add	r1, pc, #4	; (adr r1, 8008b20 <_printf_i+0x40>)
 8008b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b20:	08008b79 	.word	0x08008b79
 8008b24:	08008b8d 	.word	0x08008b8d
 8008b28:	08008b09 	.word	0x08008b09
 8008b2c:	08008b09 	.word	0x08008b09
 8008b30:	08008b09 	.word	0x08008b09
 8008b34:	08008b09 	.word	0x08008b09
 8008b38:	08008b8d 	.word	0x08008b8d
 8008b3c:	08008b09 	.word	0x08008b09
 8008b40:	08008b09 	.word	0x08008b09
 8008b44:	08008b09 	.word	0x08008b09
 8008b48:	08008b09 	.word	0x08008b09
 8008b4c:	08008c99 	.word	0x08008c99
 8008b50:	08008bbd 	.word	0x08008bbd
 8008b54:	08008c7b 	.word	0x08008c7b
 8008b58:	08008b09 	.word	0x08008b09
 8008b5c:	08008b09 	.word	0x08008b09
 8008b60:	08008cbb 	.word	0x08008cbb
 8008b64:	08008b09 	.word	0x08008b09
 8008b68:	08008bbd 	.word	0x08008bbd
 8008b6c:	08008b09 	.word	0x08008b09
 8008b70:	08008b09 	.word	0x08008b09
 8008b74:	08008c83 	.word	0x08008c83
 8008b78:	682b      	ldr	r3, [r5, #0]
 8008b7a:	1d1a      	adds	r2, r3, #4
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	602a      	str	r2, [r5, #0]
 8008b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e0a3      	b.n	8008cd4 <_printf_i+0x1f4>
 8008b8c:	6820      	ldr	r0, [r4, #0]
 8008b8e:	6829      	ldr	r1, [r5, #0]
 8008b90:	0606      	lsls	r6, r0, #24
 8008b92:	f101 0304 	add.w	r3, r1, #4
 8008b96:	d50a      	bpl.n	8008bae <_printf_i+0xce>
 8008b98:	680e      	ldr	r6, [r1, #0]
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	2e00      	cmp	r6, #0
 8008b9e:	da03      	bge.n	8008ba8 <_printf_i+0xc8>
 8008ba0:	232d      	movs	r3, #45	; 0x2d
 8008ba2:	4276      	negs	r6, r6
 8008ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ba8:	485e      	ldr	r0, [pc, #376]	; (8008d24 <_printf_i+0x244>)
 8008baa:	230a      	movs	r3, #10
 8008bac:	e019      	b.n	8008be2 <_printf_i+0x102>
 8008bae:	680e      	ldr	r6, [r1, #0]
 8008bb0:	602b      	str	r3, [r5, #0]
 8008bb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bb6:	bf18      	it	ne
 8008bb8:	b236      	sxthne	r6, r6
 8008bba:	e7ef      	b.n	8008b9c <_printf_i+0xbc>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	6820      	ldr	r0, [r4, #0]
 8008bc0:	1d19      	adds	r1, r3, #4
 8008bc2:	6029      	str	r1, [r5, #0]
 8008bc4:	0601      	lsls	r1, r0, #24
 8008bc6:	d501      	bpl.n	8008bcc <_printf_i+0xec>
 8008bc8:	681e      	ldr	r6, [r3, #0]
 8008bca:	e002      	b.n	8008bd2 <_printf_i+0xf2>
 8008bcc:	0646      	lsls	r6, r0, #25
 8008bce:	d5fb      	bpl.n	8008bc8 <_printf_i+0xe8>
 8008bd0:	881e      	ldrh	r6, [r3, #0]
 8008bd2:	4854      	ldr	r0, [pc, #336]	; (8008d24 <_printf_i+0x244>)
 8008bd4:	2f6f      	cmp	r7, #111	; 0x6f
 8008bd6:	bf0c      	ite	eq
 8008bd8:	2308      	moveq	r3, #8
 8008bda:	230a      	movne	r3, #10
 8008bdc:	2100      	movs	r1, #0
 8008bde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008be2:	6865      	ldr	r5, [r4, #4]
 8008be4:	60a5      	str	r5, [r4, #8]
 8008be6:	2d00      	cmp	r5, #0
 8008be8:	bfa2      	ittt	ge
 8008bea:	6821      	ldrge	r1, [r4, #0]
 8008bec:	f021 0104 	bicge.w	r1, r1, #4
 8008bf0:	6021      	strge	r1, [r4, #0]
 8008bf2:	b90e      	cbnz	r6, 8008bf8 <_printf_i+0x118>
 8008bf4:	2d00      	cmp	r5, #0
 8008bf6:	d04d      	beq.n	8008c94 <_printf_i+0x1b4>
 8008bf8:	4615      	mov	r5, r2
 8008bfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bfe:	fb03 6711 	mls	r7, r3, r1, r6
 8008c02:	5dc7      	ldrb	r7, [r0, r7]
 8008c04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c08:	4637      	mov	r7, r6
 8008c0a:	42bb      	cmp	r3, r7
 8008c0c:	460e      	mov	r6, r1
 8008c0e:	d9f4      	bls.n	8008bfa <_printf_i+0x11a>
 8008c10:	2b08      	cmp	r3, #8
 8008c12:	d10b      	bne.n	8008c2c <_printf_i+0x14c>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	07de      	lsls	r6, r3, #31
 8008c18:	d508      	bpl.n	8008c2c <_printf_i+0x14c>
 8008c1a:	6923      	ldr	r3, [r4, #16]
 8008c1c:	6861      	ldr	r1, [r4, #4]
 8008c1e:	4299      	cmp	r1, r3
 8008c20:	bfde      	ittt	le
 8008c22:	2330      	movle	r3, #48	; 0x30
 8008c24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c2c:	1b52      	subs	r2, r2, r5
 8008c2e:	6122      	str	r2, [r4, #16]
 8008c30:	f8cd a000 	str.w	sl, [sp]
 8008c34:	464b      	mov	r3, r9
 8008c36:	aa03      	add	r2, sp, #12
 8008c38:	4621      	mov	r1, r4
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	f7ff fee2 	bl	8008a04 <_printf_common>
 8008c40:	3001      	adds	r0, #1
 8008c42:	d14c      	bne.n	8008cde <_printf_i+0x1fe>
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	b004      	add	sp, #16
 8008c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4e:	4835      	ldr	r0, [pc, #212]	; (8008d24 <_printf_i+0x244>)
 8008c50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c54:	6829      	ldr	r1, [r5, #0]
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c5c:	6029      	str	r1, [r5, #0]
 8008c5e:	061d      	lsls	r5, r3, #24
 8008c60:	d514      	bpl.n	8008c8c <_printf_i+0x1ac>
 8008c62:	07df      	lsls	r7, r3, #31
 8008c64:	bf44      	itt	mi
 8008c66:	f043 0320 	orrmi.w	r3, r3, #32
 8008c6a:	6023      	strmi	r3, [r4, #0]
 8008c6c:	b91e      	cbnz	r6, 8008c76 <_printf_i+0x196>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	f023 0320 	bic.w	r3, r3, #32
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	2310      	movs	r3, #16
 8008c78:	e7b0      	b.n	8008bdc <_printf_i+0xfc>
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	f043 0320 	orr.w	r3, r3, #32
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	2378      	movs	r3, #120	; 0x78
 8008c84:	4828      	ldr	r0, [pc, #160]	; (8008d28 <_printf_i+0x248>)
 8008c86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c8a:	e7e3      	b.n	8008c54 <_printf_i+0x174>
 8008c8c:	0659      	lsls	r1, r3, #25
 8008c8e:	bf48      	it	mi
 8008c90:	b2b6      	uxthmi	r6, r6
 8008c92:	e7e6      	b.n	8008c62 <_printf_i+0x182>
 8008c94:	4615      	mov	r5, r2
 8008c96:	e7bb      	b.n	8008c10 <_printf_i+0x130>
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	6826      	ldr	r6, [r4, #0]
 8008c9c:	6961      	ldr	r1, [r4, #20]
 8008c9e:	1d18      	adds	r0, r3, #4
 8008ca0:	6028      	str	r0, [r5, #0]
 8008ca2:	0635      	lsls	r5, r6, #24
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	d501      	bpl.n	8008cac <_printf_i+0x1cc>
 8008ca8:	6019      	str	r1, [r3, #0]
 8008caa:	e002      	b.n	8008cb2 <_printf_i+0x1d2>
 8008cac:	0670      	lsls	r0, r6, #25
 8008cae:	d5fb      	bpl.n	8008ca8 <_printf_i+0x1c8>
 8008cb0:	8019      	strh	r1, [r3, #0]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	6123      	str	r3, [r4, #16]
 8008cb6:	4615      	mov	r5, r2
 8008cb8:	e7ba      	b.n	8008c30 <_printf_i+0x150>
 8008cba:	682b      	ldr	r3, [r5, #0]
 8008cbc:	1d1a      	adds	r2, r3, #4
 8008cbe:	602a      	str	r2, [r5, #0]
 8008cc0:	681d      	ldr	r5, [r3, #0]
 8008cc2:	6862      	ldr	r2, [r4, #4]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f7f7 fa8a 	bl	80001e0 <memchr>
 8008ccc:	b108      	cbz	r0, 8008cd2 <_printf_i+0x1f2>
 8008cce:	1b40      	subs	r0, r0, r5
 8008cd0:	6060      	str	r0, [r4, #4]
 8008cd2:	6863      	ldr	r3, [r4, #4]
 8008cd4:	6123      	str	r3, [r4, #16]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cdc:	e7a8      	b.n	8008c30 <_printf_i+0x150>
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	462a      	mov	r2, r5
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	47d0      	blx	sl
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d0ab      	beq.n	8008c44 <_printf_i+0x164>
 8008cec:	6823      	ldr	r3, [r4, #0]
 8008cee:	079b      	lsls	r3, r3, #30
 8008cf0:	d413      	bmi.n	8008d1a <_printf_i+0x23a>
 8008cf2:	68e0      	ldr	r0, [r4, #12]
 8008cf4:	9b03      	ldr	r3, [sp, #12]
 8008cf6:	4298      	cmp	r0, r3
 8008cf8:	bfb8      	it	lt
 8008cfa:	4618      	movlt	r0, r3
 8008cfc:	e7a4      	b.n	8008c48 <_printf_i+0x168>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	4632      	mov	r2, r6
 8008d02:	4649      	mov	r1, r9
 8008d04:	4640      	mov	r0, r8
 8008d06:	47d0      	blx	sl
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d09b      	beq.n	8008c44 <_printf_i+0x164>
 8008d0c:	3501      	adds	r5, #1
 8008d0e:	68e3      	ldr	r3, [r4, #12]
 8008d10:	9903      	ldr	r1, [sp, #12]
 8008d12:	1a5b      	subs	r3, r3, r1
 8008d14:	42ab      	cmp	r3, r5
 8008d16:	dcf2      	bgt.n	8008cfe <_printf_i+0x21e>
 8008d18:	e7eb      	b.n	8008cf2 <_printf_i+0x212>
 8008d1a:	2500      	movs	r5, #0
 8008d1c:	f104 0619 	add.w	r6, r4, #25
 8008d20:	e7f5      	b.n	8008d0e <_printf_i+0x22e>
 8008d22:	bf00      	nop
 8008d24:	080097a3 	.word	0x080097a3
 8008d28:	080097b4 	.word	0x080097b4

08008d2c <_sbrk_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4d06      	ldr	r5, [pc, #24]	; (8008d48 <_sbrk_r+0x1c>)
 8008d30:	2300      	movs	r3, #0
 8008d32:	4604      	mov	r4, r0
 8008d34:	4608      	mov	r0, r1
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	f7fa fcd6 	bl	80036e8 <_sbrk>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_sbrk_r+0x1a>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_sbrk_r+0x1a>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	20000834 	.word	0x20000834

08008d4c <__swbuf_r>:
 8008d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4e:	460e      	mov	r6, r1
 8008d50:	4614      	mov	r4, r2
 8008d52:	4605      	mov	r5, r0
 8008d54:	b118      	cbz	r0, 8008d5e <__swbuf_r+0x12>
 8008d56:	6983      	ldr	r3, [r0, #24]
 8008d58:	b90b      	cbnz	r3, 8008d5e <__swbuf_r+0x12>
 8008d5a:	f000 f9d9 	bl	8009110 <__sinit>
 8008d5e:	4b21      	ldr	r3, [pc, #132]	; (8008de4 <__swbuf_r+0x98>)
 8008d60:	429c      	cmp	r4, r3
 8008d62:	d12b      	bne.n	8008dbc <__swbuf_r+0x70>
 8008d64:	686c      	ldr	r4, [r5, #4]
 8008d66:	69a3      	ldr	r3, [r4, #24]
 8008d68:	60a3      	str	r3, [r4, #8]
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	071a      	lsls	r2, r3, #28
 8008d6e:	d52f      	bpl.n	8008dd0 <__swbuf_r+0x84>
 8008d70:	6923      	ldr	r3, [r4, #16]
 8008d72:	b36b      	cbz	r3, 8008dd0 <__swbuf_r+0x84>
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	6820      	ldr	r0, [r4, #0]
 8008d78:	1ac0      	subs	r0, r0, r3
 8008d7a:	6963      	ldr	r3, [r4, #20]
 8008d7c:	b2f6      	uxtb	r6, r6
 8008d7e:	4283      	cmp	r3, r0
 8008d80:	4637      	mov	r7, r6
 8008d82:	dc04      	bgt.n	8008d8e <__swbuf_r+0x42>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4628      	mov	r0, r5
 8008d88:	f000 f92e 	bl	8008fe8 <_fflush_r>
 8008d8c:	bb30      	cbnz	r0, 8008ddc <__swbuf_r+0x90>
 8008d8e:	68a3      	ldr	r3, [r4, #8]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	60a3      	str	r3, [r4, #8]
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	6022      	str	r2, [r4, #0]
 8008d9a:	701e      	strb	r6, [r3, #0]
 8008d9c:	6963      	ldr	r3, [r4, #20]
 8008d9e:	3001      	adds	r0, #1
 8008da0:	4283      	cmp	r3, r0
 8008da2:	d004      	beq.n	8008dae <__swbuf_r+0x62>
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	07db      	lsls	r3, r3, #31
 8008da8:	d506      	bpl.n	8008db8 <__swbuf_r+0x6c>
 8008daa:	2e0a      	cmp	r6, #10
 8008dac:	d104      	bne.n	8008db8 <__swbuf_r+0x6c>
 8008dae:	4621      	mov	r1, r4
 8008db0:	4628      	mov	r0, r5
 8008db2:	f000 f919 	bl	8008fe8 <_fflush_r>
 8008db6:	b988      	cbnz	r0, 8008ddc <__swbuf_r+0x90>
 8008db8:	4638      	mov	r0, r7
 8008dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <__swbuf_r+0x9c>)
 8008dbe:	429c      	cmp	r4, r3
 8008dc0:	d101      	bne.n	8008dc6 <__swbuf_r+0x7a>
 8008dc2:	68ac      	ldr	r4, [r5, #8]
 8008dc4:	e7cf      	b.n	8008d66 <__swbuf_r+0x1a>
 8008dc6:	4b09      	ldr	r3, [pc, #36]	; (8008dec <__swbuf_r+0xa0>)
 8008dc8:	429c      	cmp	r4, r3
 8008dca:	bf08      	it	eq
 8008dcc:	68ec      	ldreq	r4, [r5, #12]
 8008dce:	e7ca      	b.n	8008d66 <__swbuf_r+0x1a>
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f000 f80c 	bl	8008df0 <__swsetup_r>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d0cb      	beq.n	8008d74 <__swbuf_r+0x28>
 8008ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8008de0:	e7ea      	b.n	8008db8 <__swbuf_r+0x6c>
 8008de2:	bf00      	nop
 8008de4:	080097e8 	.word	0x080097e8
 8008de8:	08009808 	.word	0x08009808
 8008dec:	080097c8 	.word	0x080097c8

08008df0 <__swsetup_r>:
 8008df0:	4b32      	ldr	r3, [pc, #200]	; (8008ebc <__swsetup_r+0xcc>)
 8008df2:	b570      	push	{r4, r5, r6, lr}
 8008df4:	681d      	ldr	r5, [r3, #0]
 8008df6:	4606      	mov	r6, r0
 8008df8:	460c      	mov	r4, r1
 8008dfa:	b125      	cbz	r5, 8008e06 <__swsetup_r+0x16>
 8008dfc:	69ab      	ldr	r3, [r5, #24]
 8008dfe:	b913      	cbnz	r3, 8008e06 <__swsetup_r+0x16>
 8008e00:	4628      	mov	r0, r5
 8008e02:	f000 f985 	bl	8009110 <__sinit>
 8008e06:	4b2e      	ldr	r3, [pc, #184]	; (8008ec0 <__swsetup_r+0xd0>)
 8008e08:	429c      	cmp	r4, r3
 8008e0a:	d10f      	bne.n	8008e2c <__swsetup_r+0x3c>
 8008e0c:	686c      	ldr	r4, [r5, #4]
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e14:	0719      	lsls	r1, r3, #28
 8008e16:	d42c      	bmi.n	8008e72 <__swsetup_r+0x82>
 8008e18:	06dd      	lsls	r5, r3, #27
 8008e1a:	d411      	bmi.n	8008e40 <__swsetup_r+0x50>
 8008e1c:	2309      	movs	r3, #9
 8008e1e:	6033      	str	r3, [r6, #0]
 8008e20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e24:	81a3      	strh	r3, [r4, #12]
 8008e26:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2a:	e03e      	b.n	8008eaa <__swsetup_r+0xba>
 8008e2c:	4b25      	ldr	r3, [pc, #148]	; (8008ec4 <__swsetup_r+0xd4>)
 8008e2e:	429c      	cmp	r4, r3
 8008e30:	d101      	bne.n	8008e36 <__swsetup_r+0x46>
 8008e32:	68ac      	ldr	r4, [r5, #8]
 8008e34:	e7eb      	b.n	8008e0e <__swsetup_r+0x1e>
 8008e36:	4b24      	ldr	r3, [pc, #144]	; (8008ec8 <__swsetup_r+0xd8>)
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	bf08      	it	eq
 8008e3c:	68ec      	ldreq	r4, [r5, #12]
 8008e3e:	e7e6      	b.n	8008e0e <__swsetup_r+0x1e>
 8008e40:	0758      	lsls	r0, r3, #29
 8008e42:	d512      	bpl.n	8008e6a <__swsetup_r+0x7a>
 8008e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e46:	b141      	cbz	r1, 8008e5a <__swsetup_r+0x6a>
 8008e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	d002      	beq.n	8008e56 <__swsetup_r+0x66>
 8008e50:	4630      	mov	r0, r6
 8008e52:	f7ff fa41 	bl	80082d8 <_free_r>
 8008e56:	2300      	movs	r3, #0
 8008e58:	6363      	str	r3, [r4, #52]	; 0x34
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e60:	81a3      	strh	r3, [r4, #12]
 8008e62:	2300      	movs	r3, #0
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	6923      	ldr	r3, [r4, #16]
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	f043 0308 	orr.w	r3, r3, #8
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	6923      	ldr	r3, [r4, #16]
 8008e74:	b94b      	cbnz	r3, 8008e8a <__swsetup_r+0x9a>
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e80:	d003      	beq.n	8008e8a <__swsetup_r+0x9a>
 8008e82:	4621      	mov	r1, r4
 8008e84:	4630      	mov	r0, r6
 8008e86:	f000 fa09 	bl	800929c <__smakebuf_r>
 8008e8a:	89a0      	ldrh	r0, [r4, #12]
 8008e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e90:	f010 0301 	ands.w	r3, r0, #1
 8008e94:	d00a      	beq.n	8008eac <__swsetup_r+0xbc>
 8008e96:	2300      	movs	r3, #0
 8008e98:	60a3      	str	r3, [r4, #8]
 8008e9a:	6963      	ldr	r3, [r4, #20]
 8008e9c:	425b      	negs	r3, r3
 8008e9e:	61a3      	str	r3, [r4, #24]
 8008ea0:	6923      	ldr	r3, [r4, #16]
 8008ea2:	b943      	cbnz	r3, 8008eb6 <__swsetup_r+0xc6>
 8008ea4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ea8:	d1ba      	bne.n	8008e20 <__swsetup_r+0x30>
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	0781      	lsls	r1, r0, #30
 8008eae:	bf58      	it	pl
 8008eb0:	6963      	ldrpl	r3, [r4, #20]
 8008eb2:	60a3      	str	r3, [r4, #8]
 8008eb4:	e7f4      	b.n	8008ea0 <__swsetup_r+0xb0>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	e7f7      	b.n	8008eaa <__swsetup_r+0xba>
 8008eba:	bf00      	nop
 8008ebc:	20000110 	.word	0x20000110
 8008ec0:	080097e8 	.word	0x080097e8
 8008ec4:	08009808 	.word	0x08009808
 8008ec8:	080097c8 	.word	0x080097c8

08008ecc <abort>:
 8008ecc:	b508      	push	{r3, lr}
 8008ece:	2006      	movs	r0, #6
 8008ed0:	f000 fab0 	bl	8009434 <raise>
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	f7fa fb8f 	bl	80035f8 <_exit>
	...

08008edc <__sflush_r>:
 8008edc:	898a      	ldrh	r2, [r1, #12]
 8008ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	0710      	lsls	r0, r2, #28
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	d458      	bmi.n	8008f9c <__sflush_r+0xc0>
 8008eea:	684b      	ldr	r3, [r1, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	dc05      	bgt.n	8008efc <__sflush_r+0x20>
 8008ef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	dc02      	bgt.n	8008efc <__sflush_r+0x20>
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008efe:	2e00      	cmp	r6, #0
 8008f00:	d0f9      	beq.n	8008ef6 <__sflush_r+0x1a>
 8008f02:	2300      	movs	r3, #0
 8008f04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f08:	682f      	ldr	r7, [r5, #0]
 8008f0a:	602b      	str	r3, [r5, #0]
 8008f0c:	d032      	beq.n	8008f74 <__sflush_r+0x98>
 8008f0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f10:	89a3      	ldrh	r3, [r4, #12]
 8008f12:	075a      	lsls	r2, r3, #29
 8008f14:	d505      	bpl.n	8008f22 <__sflush_r+0x46>
 8008f16:	6863      	ldr	r3, [r4, #4]
 8008f18:	1ac0      	subs	r0, r0, r3
 8008f1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f1c:	b10b      	cbz	r3, 8008f22 <__sflush_r+0x46>
 8008f1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f20:	1ac0      	subs	r0, r0, r3
 8008f22:	2300      	movs	r3, #0
 8008f24:	4602      	mov	r2, r0
 8008f26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f28:	6a21      	ldr	r1, [r4, #32]
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	47b0      	blx	r6
 8008f2e:	1c43      	adds	r3, r0, #1
 8008f30:	89a3      	ldrh	r3, [r4, #12]
 8008f32:	d106      	bne.n	8008f42 <__sflush_r+0x66>
 8008f34:	6829      	ldr	r1, [r5, #0]
 8008f36:	291d      	cmp	r1, #29
 8008f38:	d82c      	bhi.n	8008f94 <__sflush_r+0xb8>
 8008f3a:	4a2a      	ldr	r2, [pc, #168]	; (8008fe4 <__sflush_r+0x108>)
 8008f3c:	40ca      	lsrs	r2, r1
 8008f3e:	07d6      	lsls	r6, r2, #31
 8008f40:	d528      	bpl.n	8008f94 <__sflush_r+0xb8>
 8008f42:	2200      	movs	r2, #0
 8008f44:	6062      	str	r2, [r4, #4]
 8008f46:	04d9      	lsls	r1, r3, #19
 8008f48:	6922      	ldr	r2, [r4, #16]
 8008f4a:	6022      	str	r2, [r4, #0]
 8008f4c:	d504      	bpl.n	8008f58 <__sflush_r+0x7c>
 8008f4e:	1c42      	adds	r2, r0, #1
 8008f50:	d101      	bne.n	8008f56 <__sflush_r+0x7a>
 8008f52:	682b      	ldr	r3, [r5, #0]
 8008f54:	b903      	cbnz	r3, 8008f58 <__sflush_r+0x7c>
 8008f56:	6560      	str	r0, [r4, #84]	; 0x54
 8008f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f5a:	602f      	str	r7, [r5, #0]
 8008f5c:	2900      	cmp	r1, #0
 8008f5e:	d0ca      	beq.n	8008ef6 <__sflush_r+0x1a>
 8008f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f64:	4299      	cmp	r1, r3
 8008f66:	d002      	beq.n	8008f6e <__sflush_r+0x92>
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f7ff f9b5 	bl	80082d8 <_free_r>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	6360      	str	r0, [r4, #52]	; 0x34
 8008f72:	e7c1      	b.n	8008ef8 <__sflush_r+0x1c>
 8008f74:	6a21      	ldr	r1, [r4, #32]
 8008f76:	2301      	movs	r3, #1
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b0      	blx	r6
 8008f7c:	1c41      	adds	r1, r0, #1
 8008f7e:	d1c7      	bne.n	8008f10 <__sflush_r+0x34>
 8008f80:	682b      	ldr	r3, [r5, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0c4      	beq.n	8008f10 <__sflush_r+0x34>
 8008f86:	2b1d      	cmp	r3, #29
 8008f88:	d001      	beq.n	8008f8e <__sflush_r+0xb2>
 8008f8a:	2b16      	cmp	r3, #22
 8008f8c:	d101      	bne.n	8008f92 <__sflush_r+0xb6>
 8008f8e:	602f      	str	r7, [r5, #0]
 8008f90:	e7b1      	b.n	8008ef6 <__sflush_r+0x1a>
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f98:	81a3      	strh	r3, [r4, #12]
 8008f9a:	e7ad      	b.n	8008ef8 <__sflush_r+0x1c>
 8008f9c:	690f      	ldr	r7, [r1, #16]
 8008f9e:	2f00      	cmp	r7, #0
 8008fa0:	d0a9      	beq.n	8008ef6 <__sflush_r+0x1a>
 8008fa2:	0793      	lsls	r3, r2, #30
 8008fa4:	680e      	ldr	r6, [r1, #0]
 8008fa6:	bf08      	it	eq
 8008fa8:	694b      	ldreq	r3, [r1, #20]
 8008faa:	600f      	str	r7, [r1, #0]
 8008fac:	bf18      	it	ne
 8008fae:	2300      	movne	r3, #0
 8008fb0:	eba6 0807 	sub.w	r8, r6, r7
 8008fb4:	608b      	str	r3, [r1, #8]
 8008fb6:	f1b8 0f00 	cmp.w	r8, #0
 8008fba:	dd9c      	ble.n	8008ef6 <__sflush_r+0x1a>
 8008fbc:	6a21      	ldr	r1, [r4, #32]
 8008fbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fc0:	4643      	mov	r3, r8
 8008fc2:	463a      	mov	r2, r7
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b0      	blx	r6
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	dc06      	bgt.n	8008fda <__sflush_r+0xfe>
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fd2:	81a3      	strh	r3, [r4, #12]
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	e78e      	b.n	8008ef8 <__sflush_r+0x1c>
 8008fda:	4407      	add	r7, r0
 8008fdc:	eba8 0800 	sub.w	r8, r8, r0
 8008fe0:	e7e9      	b.n	8008fb6 <__sflush_r+0xda>
 8008fe2:	bf00      	nop
 8008fe4:	20400001 	.word	0x20400001

08008fe8 <_fflush_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	690b      	ldr	r3, [r1, #16]
 8008fec:	4605      	mov	r5, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	b913      	cbnz	r3, 8008ff8 <_fflush_r+0x10>
 8008ff2:	2500      	movs	r5, #0
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	bd38      	pop	{r3, r4, r5, pc}
 8008ff8:	b118      	cbz	r0, 8009002 <_fflush_r+0x1a>
 8008ffa:	6983      	ldr	r3, [r0, #24]
 8008ffc:	b90b      	cbnz	r3, 8009002 <_fflush_r+0x1a>
 8008ffe:	f000 f887 	bl	8009110 <__sinit>
 8009002:	4b14      	ldr	r3, [pc, #80]	; (8009054 <_fflush_r+0x6c>)
 8009004:	429c      	cmp	r4, r3
 8009006:	d11b      	bne.n	8009040 <_fflush_r+0x58>
 8009008:	686c      	ldr	r4, [r5, #4]
 800900a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d0ef      	beq.n	8008ff2 <_fflush_r+0xa>
 8009012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009014:	07d0      	lsls	r0, r2, #31
 8009016:	d404      	bmi.n	8009022 <_fflush_r+0x3a>
 8009018:	0599      	lsls	r1, r3, #22
 800901a:	d402      	bmi.n	8009022 <_fflush_r+0x3a>
 800901c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800901e:	f000 f915 	bl	800924c <__retarget_lock_acquire_recursive>
 8009022:	4628      	mov	r0, r5
 8009024:	4621      	mov	r1, r4
 8009026:	f7ff ff59 	bl	8008edc <__sflush_r>
 800902a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800902c:	07da      	lsls	r2, r3, #31
 800902e:	4605      	mov	r5, r0
 8009030:	d4e0      	bmi.n	8008ff4 <_fflush_r+0xc>
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	059b      	lsls	r3, r3, #22
 8009036:	d4dd      	bmi.n	8008ff4 <_fflush_r+0xc>
 8009038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800903a:	f000 f908 	bl	800924e <__retarget_lock_release_recursive>
 800903e:	e7d9      	b.n	8008ff4 <_fflush_r+0xc>
 8009040:	4b05      	ldr	r3, [pc, #20]	; (8009058 <_fflush_r+0x70>)
 8009042:	429c      	cmp	r4, r3
 8009044:	d101      	bne.n	800904a <_fflush_r+0x62>
 8009046:	68ac      	ldr	r4, [r5, #8]
 8009048:	e7df      	b.n	800900a <_fflush_r+0x22>
 800904a:	4b04      	ldr	r3, [pc, #16]	; (800905c <_fflush_r+0x74>)
 800904c:	429c      	cmp	r4, r3
 800904e:	bf08      	it	eq
 8009050:	68ec      	ldreq	r4, [r5, #12]
 8009052:	e7da      	b.n	800900a <_fflush_r+0x22>
 8009054:	080097e8 	.word	0x080097e8
 8009058:	08009808 	.word	0x08009808
 800905c:	080097c8 	.word	0x080097c8

08009060 <std>:
 8009060:	2300      	movs	r3, #0
 8009062:	b510      	push	{r4, lr}
 8009064:	4604      	mov	r4, r0
 8009066:	e9c0 3300 	strd	r3, r3, [r0]
 800906a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800906e:	6083      	str	r3, [r0, #8]
 8009070:	8181      	strh	r1, [r0, #12]
 8009072:	6643      	str	r3, [r0, #100]	; 0x64
 8009074:	81c2      	strh	r2, [r0, #14]
 8009076:	6183      	str	r3, [r0, #24]
 8009078:	4619      	mov	r1, r3
 800907a:	2208      	movs	r2, #8
 800907c:	305c      	adds	r0, #92	; 0x5c
 800907e:	f7ff f88d 	bl	800819c <memset>
 8009082:	4b05      	ldr	r3, [pc, #20]	; (8009098 <std+0x38>)
 8009084:	6263      	str	r3, [r4, #36]	; 0x24
 8009086:	4b05      	ldr	r3, [pc, #20]	; (800909c <std+0x3c>)
 8009088:	62a3      	str	r3, [r4, #40]	; 0x28
 800908a:	4b05      	ldr	r3, [pc, #20]	; (80090a0 <std+0x40>)
 800908c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800908e:	4b05      	ldr	r3, [pc, #20]	; (80090a4 <std+0x44>)
 8009090:	6224      	str	r4, [r4, #32]
 8009092:	6323      	str	r3, [r4, #48]	; 0x30
 8009094:	bd10      	pop	{r4, pc}
 8009096:	bf00      	nop
 8009098:	0800946d 	.word	0x0800946d
 800909c:	0800948f 	.word	0x0800948f
 80090a0:	080094c7 	.word	0x080094c7
 80090a4:	080094eb 	.word	0x080094eb

080090a8 <_cleanup_r>:
 80090a8:	4901      	ldr	r1, [pc, #4]	; (80090b0 <_cleanup_r+0x8>)
 80090aa:	f000 b8af 	b.w	800920c <_fwalk_reent>
 80090ae:	bf00      	nop
 80090b0:	08008fe9 	.word	0x08008fe9

080090b4 <__sfmoreglue>:
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	2268      	movs	r2, #104	; 0x68
 80090b8:	1e4d      	subs	r5, r1, #1
 80090ba:	4355      	muls	r5, r2
 80090bc:	460e      	mov	r6, r1
 80090be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090c2:	f7ff f975 	bl	80083b0 <_malloc_r>
 80090c6:	4604      	mov	r4, r0
 80090c8:	b140      	cbz	r0, 80090dc <__sfmoreglue+0x28>
 80090ca:	2100      	movs	r1, #0
 80090cc:	e9c0 1600 	strd	r1, r6, [r0]
 80090d0:	300c      	adds	r0, #12
 80090d2:	60a0      	str	r0, [r4, #8]
 80090d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090d8:	f7ff f860 	bl	800819c <memset>
 80090dc:	4620      	mov	r0, r4
 80090de:	bd70      	pop	{r4, r5, r6, pc}

080090e0 <__sfp_lock_acquire>:
 80090e0:	4801      	ldr	r0, [pc, #4]	; (80090e8 <__sfp_lock_acquire+0x8>)
 80090e2:	f000 b8b3 	b.w	800924c <__retarget_lock_acquire_recursive>
 80090e6:	bf00      	nop
 80090e8:	20000831 	.word	0x20000831

080090ec <__sfp_lock_release>:
 80090ec:	4801      	ldr	r0, [pc, #4]	; (80090f4 <__sfp_lock_release+0x8>)
 80090ee:	f000 b8ae 	b.w	800924e <__retarget_lock_release_recursive>
 80090f2:	bf00      	nop
 80090f4:	20000831 	.word	0x20000831

080090f8 <__sinit_lock_acquire>:
 80090f8:	4801      	ldr	r0, [pc, #4]	; (8009100 <__sinit_lock_acquire+0x8>)
 80090fa:	f000 b8a7 	b.w	800924c <__retarget_lock_acquire_recursive>
 80090fe:	bf00      	nop
 8009100:	20000832 	.word	0x20000832

08009104 <__sinit_lock_release>:
 8009104:	4801      	ldr	r0, [pc, #4]	; (800910c <__sinit_lock_release+0x8>)
 8009106:	f000 b8a2 	b.w	800924e <__retarget_lock_release_recursive>
 800910a:	bf00      	nop
 800910c:	20000832 	.word	0x20000832

08009110 <__sinit>:
 8009110:	b510      	push	{r4, lr}
 8009112:	4604      	mov	r4, r0
 8009114:	f7ff fff0 	bl	80090f8 <__sinit_lock_acquire>
 8009118:	69a3      	ldr	r3, [r4, #24]
 800911a:	b11b      	cbz	r3, 8009124 <__sinit+0x14>
 800911c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009120:	f7ff bff0 	b.w	8009104 <__sinit_lock_release>
 8009124:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009128:	6523      	str	r3, [r4, #80]	; 0x50
 800912a:	4b13      	ldr	r3, [pc, #76]	; (8009178 <__sinit+0x68>)
 800912c:	4a13      	ldr	r2, [pc, #76]	; (800917c <__sinit+0x6c>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	62a2      	str	r2, [r4, #40]	; 0x28
 8009132:	42a3      	cmp	r3, r4
 8009134:	bf04      	itt	eq
 8009136:	2301      	moveq	r3, #1
 8009138:	61a3      	streq	r3, [r4, #24]
 800913a:	4620      	mov	r0, r4
 800913c:	f000 f820 	bl	8009180 <__sfp>
 8009140:	6060      	str	r0, [r4, #4]
 8009142:	4620      	mov	r0, r4
 8009144:	f000 f81c 	bl	8009180 <__sfp>
 8009148:	60a0      	str	r0, [r4, #8]
 800914a:	4620      	mov	r0, r4
 800914c:	f000 f818 	bl	8009180 <__sfp>
 8009150:	2200      	movs	r2, #0
 8009152:	60e0      	str	r0, [r4, #12]
 8009154:	2104      	movs	r1, #4
 8009156:	6860      	ldr	r0, [r4, #4]
 8009158:	f7ff ff82 	bl	8009060 <std>
 800915c:	68a0      	ldr	r0, [r4, #8]
 800915e:	2201      	movs	r2, #1
 8009160:	2109      	movs	r1, #9
 8009162:	f7ff ff7d 	bl	8009060 <std>
 8009166:	68e0      	ldr	r0, [r4, #12]
 8009168:	2202      	movs	r2, #2
 800916a:	2112      	movs	r1, #18
 800916c:	f7ff ff78 	bl	8009060 <std>
 8009170:	2301      	movs	r3, #1
 8009172:	61a3      	str	r3, [r4, #24]
 8009174:	e7d2      	b.n	800911c <__sinit+0xc>
 8009176:	bf00      	nop
 8009178:	080096e0 	.word	0x080096e0
 800917c:	080090a9 	.word	0x080090a9

08009180 <__sfp>:
 8009180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009182:	4607      	mov	r7, r0
 8009184:	f7ff ffac 	bl	80090e0 <__sfp_lock_acquire>
 8009188:	4b1e      	ldr	r3, [pc, #120]	; (8009204 <__sfp+0x84>)
 800918a:	681e      	ldr	r6, [r3, #0]
 800918c:	69b3      	ldr	r3, [r6, #24]
 800918e:	b913      	cbnz	r3, 8009196 <__sfp+0x16>
 8009190:	4630      	mov	r0, r6
 8009192:	f7ff ffbd 	bl	8009110 <__sinit>
 8009196:	3648      	adds	r6, #72	; 0x48
 8009198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800919c:	3b01      	subs	r3, #1
 800919e:	d503      	bpl.n	80091a8 <__sfp+0x28>
 80091a0:	6833      	ldr	r3, [r6, #0]
 80091a2:	b30b      	cbz	r3, 80091e8 <__sfp+0x68>
 80091a4:	6836      	ldr	r6, [r6, #0]
 80091a6:	e7f7      	b.n	8009198 <__sfp+0x18>
 80091a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091ac:	b9d5      	cbnz	r5, 80091e4 <__sfp+0x64>
 80091ae:	4b16      	ldr	r3, [pc, #88]	; (8009208 <__sfp+0x88>)
 80091b0:	60e3      	str	r3, [r4, #12]
 80091b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091b6:	6665      	str	r5, [r4, #100]	; 0x64
 80091b8:	f000 f847 	bl	800924a <__retarget_lock_init_recursive>
 80091bc:	f7ff ff96 	bl	80090ec <__sfp_lock_release>
 80091c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091c8:	6025      	str	r5, [r4, #0]
 80091ca:	61a5      	str	r5, [r4, #24]
 80091cc:	2208      	movs	r2, #8
 80091ce:	4629      	mov	r1, r5
 80091d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091d4:	f7fe ffe2 	bl	800819c <memset>
 80091d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80091e0:	4620      	mov	r0, r4
 80091e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091e4:	3468      	adds	r4, #104	; 0x68
 80091e6:	e7d9      	b.n	800919c <__sfp+0x1c>
 80091e8:	2104      	movs	r1, #4
 80091ea:	4638      	mov	r0, r7
 80091ec:	f7ff ff62 	bl	80090b4 <__sfmoreglue>
 80091f0:	4604      	mov	r4, r0
 80091f2:	6030      	str	r0, [r6, #0]
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d1d5      	bne.n	80091a4 <__sfp+0x24>
 80091f8:	f7ff ff78 	bl	80090ec <__sfp_lock_release>
 80091fc:	230c      	movs	r3, #12
 80091fe:	603b      	str	r3, [r7, #0]
 8009200:	e7ee      	b.n	80091e0 <__sfp+0x60>
 8009202:	bf00      	nop
 8009204:	080096e0 	.word	0x080096e0
 8009208:	ffff0001 	.word	0xffff0001

0800920c <_fwalk_reent>:
 800920c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009210:	4606      	mov	r6, r0
 8009212:	4688      	mov	r8, r1
 8009214:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009218:	2700      	movs	r7, #0
 800921a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800921e:	f1b9 0901 	subs.w	r9, r9, #1
 8009222:	d505      	bpl.n	8009230 <_fwalk_reent+0x24>
 8009224:	6824      	ldr	r4, [r4, #0]
 8009226:	2c00      	cmp	r4, #0
 8009228:	d1f7      	bne.n	800921a <_fwalk_reent+0xe>
 800922a:	4638      	mov	r0, r7
 800922c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009230:	89ab      	ldrh	r3, [r5, #12]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d907      	bls.n	8009246 <_fwalk_reent+0x3a>
 8009236:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800923a:	3301      	adds	r3, #1
 800923c:	d003      	beq.n	8009246 <_fwalk_reent+0x3a>
 800923e:	4629      	mov	r1, r5
 8009240:	4630      	mov	r0, r6
 8009242:	47c0      	blx	r8
 8009244:	4307      	orrs	r7, r0
 8009246:	3568      	adds	r5, #104	; 0x68
 8009248:	e7e9      	b.n	800921e <_fwalk_reent+0x12>

0800924a <__retarget_lock_init_recursive>:
 800924a:	4770      	bx	lr

0800924c <__retarget_lock_acquire_recursive>:
 800924c:	4770      	bx	lr

0800924e <__retarget_lock_release_recursive>:
 800924e:	4770      	bx	lr

08009250 <__swhatbuf_r>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	460e      	mov	r6, r1
 8009254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009258:	2900      	cmp	r1, #0
 800925a:	b096      	sub	sp, #88	; 0x58
 800925c:	4614      	mov	r4, r2
 800925e:	461d      	mov	r5, r3
 8009260:	da08      	bge.n	8009274 <__swhatbuf_r+0x24>
 8009262:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	602a      	str	r2, [r5, #0]
 800926a:	061a      	lsls	r2, r3, #24
 800926c:	d410      	bmi.n	8009290 <__swhatbuf_r+0x40>
 800926e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009272:	e00e      	b.n	8009292 <__swhatbuf_r+0x42>
 8009274:	466a      	mov	r2, sp
 8009276:	f000 f95f 	bl	8009538 <_fstat_r>
 800927a:	2800      	cmp	r0, #0
 800927c:	dbf1      	blt.n	8009262 <__swhatbuf_r+0x12>
 800927e:	9a01      	ldr	r2, [sp, #4]
 8009280:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009284:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009288:	425a      	negs	r2, r3
 800928a:	415a      	adcs	r2, r3
 800928c:	602a      	str	r2, [r5, #0]
 800928e:	e7ee      	b.n	800926e <__swhatbuf_r+0x1e>
 8009290:	2340      	movs	r3, #64	; 0x40
 8009292:	2000      	movs	r0, #0
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	b016      	add	sp, #88	; 0x58
 8009298:	bd70      	pop	{r4, r5, r6, pc}
	...

0800929c <__smakebuf_r>:
 800929c:	898b      	ldrh	r3, [r1, #12]
 800929e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092a0:	079d      	lsls	r5, r3, #30
 80092a2:	4606      	mov	r6, r0
 80092a4:	460c      	mov	r4, r1
 80092a6:	d507      	bpl.n	80092b8 <__smakebuf_r+0x1c>
 80092a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	6123      	str	r3, [r4, #16]
 80092b0:	2301      	movs	r3, #1
 80092b2:	6163      	str	r3, [r4, #20]
 80092b4:	b002      	add	sp, #8
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	ab01      	add	r3, sp, #4
 80092ba:	466a      	mov	r2, sp
 80092bc:	f7ff ffc8 	bl	8009250 <__swhatbuf_r>
 80092c0:	9900      	ldr	r1, [sp, #0]
 80092c2:	4605      	mov	r5, r0
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7ff f873 	bl	80083b0 <_malloc_r>
 80092ca:	b948      	cbnz	r0, 80092e0 <__smakebuf_r+0x44>
 80092cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d0:	059a      	lsls	r2, r3, #22
 80092d2:	d4ef      	bmi.n	80092b4 <__smakebuf_r+0x18>
 80092d4:	f023 0303 	bic.w	r3, r3, #3
 80092d8:	f043 0302 	orr.w	r3, r3, #2
 80092dc:	81a3      	strh	r3, [r4, #12]
 80092de:	e7e3      	b.n	80092a8 <__smakebuf_r+0xc>
 80092e0:	4b0d      	ldr	r3, [pc, #52]	; (8009318 <__smakebuf_r+0x7c>)
 80092e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	6020      	str	r0, [r4, #0]
 80092e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ec:	81a3      	strh	r3, [r4, #12]
 80092ee:	9b00      	ldr	r3, [sp, #0]
 80092f0:	6163      	str	r3, [r4, #20]
 80092f2:	9b01      	ldr	r3, [sp, #4]
 80092f4:	6120      	str	r0, [r4, #16]
 80092f6:	b15b      	cbz	r3, 8009310 <__smakebuf_r+0x74>
 80092f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092fc:	4630      	mov	r0, r6
 80092fe:	f000 f92d 	bl	800955c <_isatty_r>
 8009302:	b128      	cbz	r0, 8009310 <__smakebuf_r+0x74>
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	f023 0303 	bic.w	r3, r3, #3
 800930a:	f043 0301 	orr.w	r3, r3, #1
 800930e:	81a3      	strh	r3, [r4, #12]
 8009310:	89a0      	ldrh	r0, [r4, #12]
 8009312:	4305      	orrs	r5, r0
 8009314:	81a5      	strh	r5, [r4, #12]
 8009316:	e7cd      	b.n	80092b4 <__smakebuf_r+0x18>
 8009318:	080090a9 	.word	0x080090a9

0800931c <memcpy>:
 800931c:	440a      	add	r2, r1
 800931e:	4291      	cmp	r1, r2
 8009320:	f100 33ff 	add.w	r3, r0, #4294967295
 8009324:	d100      	bne.n	8009328 <memcpy+0xc>
 8009326:	4770      	bx	lr
 8009328:	b510      	push	{r4, lr}
 800932a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800932e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009332:	4291      	cmp	r1, r2
 8009334:	d1f9      	bne.n	800932a <memcpy+0xe>
 8009336:	bd10      	pop	{r4, pc}

08009338 <memmove>:
 8009338:	4288      	cmp	r0, r1
 800933a:	b510      	push	{r4, lr}
 800933c:	eb01 0402 	add.w	r4, r1, r2
 8009340:	d902      	bls.n	8009348 <memmove+0x10>
 8009342:	4284      	cmp	r4, r0
 8009344:	4623      	mov	r3, r4
 8009346:	d807      	bhi.n	8009358 <memmove+0x20>
 8009348:	1e43      	subs	r3, r0, #1
 800934a:	42a1      	cmp	r1, r4
 800934c:	d008      	beq.n	8009360 <memmove+0x28>
 800934e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009356:	e7f8      	b.n	800934a <memmove+0x12>
 8009358:	4402      	add	r2, r0
 800935a:	4601      	mov	r1, r0
 800935c:	428a      	cmp	r2, r1
 800935e:	d100      	bne.n	8009362 <memmove+0x2a>
 8009360:	bd10      	pop	{r4, pc}
 8009362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800936a:	e7f7      	b.n	800935c <memmove+0x24>

0800936c <__malloc_lock>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__malloc_lock+0x8>)
 800936e:	f7ff bf6d 	b.w	800924c <__retarget_lock_acquire_recursive>
 8009372:	bf00      	nop
 8009374:	20000830 	.word	0x20000830

08009378 <__malloc_unlock>:
 8009378:	4801      	ldr	r0, [pc, #4]	; (8009380 <__malloc_unlock+0x8>)
 800937a:	f7ff bf68 	b.w	800924e <__retarget_lock_release_recursive>
 800937e:	bf00      	nop
 8009380:	20000830 	.word	0x20000830

08009384 <_realloc_r>:
 8009384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009388:	4680      	mov	r8, r0
 800938a:	4614      	mov	r4, r2
 800938c:	460e      	mov	r6, r1
 800938e:	b921      	cbnz	r1, 800939a <_realloc_r+0x16>
 8009390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009394:	4611      	mov	r1, r2
 8009396:	f7ff b80b 	b.w	80083b0 <_malloc_r>
 800939a:	b92a      	cbnz	r2, 80093a8 <_realloc_r+0x24>
 800939c:	f7fe ff9c 	bl	80082d8 <_free_r>
 80093a0:	4625      	mov	r5, r4
 80093a2:	4628      	mov	r0, r5
 80093a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a8:	f000 f8fa 	bl	80095a0 <_malloc_usable_size_r>
 80093ac:	4284      	cmp	r4, r0
 80093ae:	4607      	mov	r7, r0
 80093b0:	d802      	bhi.n	80093b8 <_realloc_r+0x34>
 80093b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093b6:	d812      	bhi.n	80093de <_realloc_r+0x5a>
 80093b8:	4621      	mov	r1, r4
 80093ba:	4640      	mov	r0, r8
 80093bc:	f7fe fff8 	bl	80083b0 <_malloc_r>
 80093c0:	4605      	mov	r5, r0
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d0ed      	beq.n	80093a2 <_realloc_r+0x1e>
 80093c6:	42bc      	cmp	r4, r7
 80093c8:	4622      	mov	r2, r4
 80093ca:	4631      	mov	r1, r6
 80093cc:	bf28      	it	cs
 80093ce:	463a      	movcs	r2, r7
 80093d0:	f7ff ffa4 	bl	800931c <memcpy>
 80093d4:	4631      	mov	r1, r6
 80093d6:	4640      	mov	r0, r8
 80093d8:	f7fe ff7e 	bl	80082d8 <_free_r>
 80093dc:	e7e1      	b.n	80093a2 <_realloc_r+0x1e>
 80093de:	4635      	mov	r5, r6
 80093e0:	e7df      	b.n	80093a2 <_realloc_r+0x1e>

080093e2 <_raise_r>:
 80093e2:	291f      	cmp	r1, #31
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4604      	mov	r4, r0
 80093e8:	460d      	mov	r5, r1
 80093ea:	d904      	bls.n	80093f6 <_raise_r+0x14>
 80093ec:	2316      	movs	r3, #22
 80093ee:	6003      	str	r3, [r0, #0]
 80093f0:	f04f 30ff 	mov.w	r0, #4294967295
 80093f4:	bd38      	pop	{r3, r4, r5, pc}
 80093f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093f8:	b112      	cbz	r2, 8009400 <_raise_r+0x1e>
 80093fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093fe:	b94b      	cbnz	r3, 8009414 <_raise_r+0x32>
 8009400:	4620      	mov	r0, r4
 8009402:	f000 f831 	bl	8009468 <_getpid_r>
 8009406:	462a      	mov	r2, r5
 8009408:	4601      	mov	r1, r0
 800940a:	4620      	mov	r0, r4
 800940c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009410:	f000 b818 	b.w	8009444 <_kill_r>
 8009414:	2b01      	cmp	r3, #1
 8009416:	d00a      	beq.n	800942e <_raise_r+0x4c>
 8009418:	1c59      	adds	r1, r3, #1
 800941a:	d103      	bne.n	8009424 <_raise_r+0x42>
 800941c:	2316      	movs	r3, #22
 800941e:	6003      	str	r3, [r0, #0]
 8009420:	2001      	movs	r0, #1
 8009422:	e7e7      	b.n	80093f4 <_raise_r+0x12>
 8009424:	2400      	movs	r4, #0
 8009426:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800942a:	4628      	mov	r0, r5
 800942c:	4798      	blx	r3
 800942e:	2000      	movs	r0, #0
 8009430:	e7e0      	b.n	80093f4 <_raise_r+0x12>
	...

08009434 <raise>:
 8009434:	4b02      	ldr	r3, [pc, #8]	; (8009440 <raise+0xc>)
 8009436:	4601      	mov	r1, r0
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	f7ff bfd2 	b.w	80093e2 <_raise_r>
 800943e:	bf00      	nop
 8009440:	20000110 	.word	0x20000110

08009444 <_kill_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d07      	ldr	r5, [pc, #28]	; (8009464 <_kill_r+0x20>)
 8009448:	2300      	movs	r3, #0
 800944a:	4604      	mov	r4, r0
 800944c:	4608      	mov	r0, r1
 800944e:	4611      	mov	r1, r2
 8009450:	602b      	str	r3, [r5, #0]
 8009452:	f7fa f8c1 	bl	80035d8 <_kill>
 8009456:	1c43      	adds	r3, r0, #1
 8009458:	d102      	bne.n	8009460 <_kill_r+0x1c>
 800945a:	682b      	ldr	r3, [r5, #0]
 800945c:	b103      	cbz	r3, 8009460 <_kill_r+0x1c>
 800945e:	6023      	str	r3, [r4, #0]
 8009460:	bd38      	pop	{r3, r4, r5, pc}
 8009462:	bf00      	nop
 8009464:	20000834 	.word	0x20000834

08009468 <_getpid_r>:
 8009468:	f7fa b8ae 	b.w	80035c8 <_getpid>

0800946c <__sread>:
 800946c:	b510      	push	{r4, lr}
 800946e:	460c      	mov	r4, r1
 8009470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009474:	f000 f89c 	bl	80095b0 <_read_r>
 8009478:	2800      	cmp	r0, #0
 800947a:	bfab      	itete	ge
 800947c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800947e:	89a3      	ldrhlt	r3, [r4, #12]
 8009480:	181b      	addge	r3, r3, r0
 8009482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009486:	bfac      	ite	ge
 8009488:	6563      	strge	r3, [r4, #84]	; 0x54
 800948a:	81a3      	strhlt	r3, [r4, #12]
 800948c:	bd10      	pop	{r4, pc}

0800948e <__swrite>:
 800948e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009492:	461f      	mov	r7, r3
 8009494:	898b      	ldrh	r3, [r1, #12]
 8009496:	05db      	lsls	r3, r3, #23
 8009498:	4605      	mov	r5, r0
 800949a:	460c      	mov	r4, r1
 800949c:	4616      	mov	r6, r2
 800949e:	d505      	bpl.n	80094ac <__swrite+0x1e>
 80094a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a4:	2302      	movs	r3, #2
 80094a6:	2200      	movs	r2, #0
 80094a8:	f000 f868 	bl	800957c <_lseek_r>
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	4632      	mov	r2, r6
 80094ba:	463b      	mov	r3, r7
 80094bc:	4628      	mov	r0, r5
 80094be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094c2:	f000 b817 	b.w	80094f4 <_write_r>

080094c6 <__sseek>:
 80094c6:	b510      	push	{r4, lr}
 80094c8:	460c      	mov	r4, r1
 80094ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ce:	f000 f855 	bl	800957c <_lseek_r>
 80094d2:	1c43      	adds	r3, r0, #1
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	bf15      	itete	ne
 80094d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80094da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094e2:	81a3      	strheq	r3, [r4, #12]
 80094e4:	bf18      	it	ne
 80094e6:	81a3      	strhne	r3, [r4, #12]
 80094e8:	bd10      	pop	{r4, pc}

080094ea <__sclose>:
 80094ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ee:	f000 b813 	b.w	8009518 <_close_r>
	...

080094f4 <_write_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4d07      	ldr	r5, [pc, #28]	; (8009514 <_write_r+0x20>)
 80094f8:	4604      	mov	r4, r0
 80094fa:	4608      	mov	r0, r1
 80094fc:	4611      	mov	r1, r2
 80094fe:	2200      	movs	r2, #0
 8009500:	602a      	str	r2, [r5, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	f7fa f89f 	bl	8003646 <_write>
 8009508:	1c43      	adds	r3, r0, #1
 800950a:	d102      	bne.n	8009512 <_write_r+0x1e>
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	b103      	cbz	r3, 8009512 <_write_r+0x1e>
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	20000834 	.word	0x20000834

08009518 <_close_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4d06      	ldr	r5, [pc, #24]	; (8009534 <_close_r+0x1c>)
 800951c:	2300      	movs	r3, #0
 800951e:	4604      	mov	r4, r0
 8009520:	4608      	mov	r0, r1
 8009522:	602b      	str	r3, [r5, #0]
 8009524:	f7fa f8ab 	bl	800367e <_close>
 8009528:	1c43      	adds	r3, r0, #1
 800952a:	d102      	bne.n	8009532 <_close_r+0x1a>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	b103      	cbz	r3, 8009532 <_close_r+0x1a>
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	bd38      	pop	{r3, r4, r5, pc}
 8009534:	20000834 	.word	0x20000834

08009538 <_fstat_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4d07      	ldr	r5, [pc, #28]	; (8009558 <_fstat_r+0x20>)
 800953c:	2300      	movs	r3, #0
 800953e:	4604      	mov	r4, r0
 8009540:	4608      	mov	r0, r1
 8009542:	4611      	mov	r1, r2
 8009544:	602b      	str	r3, [r5, #0]
 8009546:	f7fa f8a6 	bl	8003696 <_fstat>
 800954a:	1c43      	adds	r3, r0, #1
 800954c:	d102      	bne.n	8009554 <_fstat_r+0x1c>
 800954e:	682b      	ldr	r3, [r5, #0]
 8009550:	b103      	cbz	r3, 8009554 <_fstat_r+0x1c>
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	bd38      	pop	{r3, r4, r5, pc}
 8009556:	bf00      	nop
 8009558:	20000834 	.word	0x20000834

0800955c <_isatty_r>:
 800955c:	b538      	push	{r3, r4, r5, lr}
 800955e:	4d06      	ldr	r5, [pc, #24]	; (8009578 <_isatty_r+0x1c>)
 8009560:	2300      	movs	r3, #0
 8009562:	4604      	mov	r4, r0
 8009564:	4608      	mov	r0, r1
 8009566:	602b      	str	r3, [r5, #0]
 8009568:	f7fa f8a5 	bl	80036b6 <_isatty>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_isatty_r+0x1a>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_isatty_r+0x1a>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	20000834 	.word	0x20000834

0800957c <_lseek_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d07      	ldr	r5, [pc, #28]	; (800959c <_lseek_r+0x20>)
 8009580:	4604      	mov	r4, r0
 8009582:	4608      	mov	r0, r1
 8009584:	4611      	mov	r1, r2
 8009586:	2200      	movs	r2, #0
 8009588:	602a      	str	r2, [r5, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f7fa f89e 	bl	80036cc <_lseek>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_lseek_r+0x1e>
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	b103      	cbz	r3, 800959a <_lseek_r+0x1e>
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	20000834 	.word	0x20000834

080095a0 <_malloc_usable_size_r>:
 80095a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095a4:	1f18      	subs	r0, r3, #4
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	bfbc      	itt	lt
 80095aa:	580b      	ldrlt	r3, [r1, r0]
 80095ac:	18c0      	addlt	r0, r0, r3
 80095ae:	4770      	bx	lr

080095b0 <_read_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4d07      	ldr	r5, [pc, #28]	; (80095d0 <_read_r+0x20>)
 80095b4:	4604      	mov	r4, r0
 80095b6:	4608      	mov	r0, r1
 80095b8:	4611      	mov	r1, r2
 80095ba:	2200      	movs	r2, #0
 80095bc:	602a      	str	r2, [r5, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	f7fa f824 	bl	800360c <_read>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d102      	bne.n	80095ce <_read_r+0x1e>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	b103      	cbz	r3, 80095ce <_read_r+0x1e>
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	bd38      	pop	{r3, r4, r5, pc}
 80095d0:	20000834 	.word	0x20000834

080095d4 <_init>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr

080095e0 <_fini>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	bf00      	nop
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr
