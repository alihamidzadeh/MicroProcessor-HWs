
Final-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005424  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080055b4  080055b4  000155b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005700  08005700  00020118  2**0
                  CONTENTS
  4 .ARM          00000000  08005700  08005700  00020118  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005700  08005700  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08005708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020118  2**0
                  CONTENTS
 10 .bss          000004a4  20000118  20000118  00020118  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005bc  200005bc  00020118  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c9e  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a47  00000000  00000000  00034de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00037830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001150  00000000  00000000  00038aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef2b  00000000  00000000  00039bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016344  00000000  00000000  00058b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9895  00000000  00000000  0006ee5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001286f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005338  00000000  00000000  00128744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000118 	.word	0x20000118
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800559c 	.word	0x0800559c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	0800559c 	.word	0x0800559c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000136 	.word	0x20000136
 800039c:	20000138 	.word	0x20000138
 80003a0:	2000013a 	.word	0x2000013a
 80003a4:	2000014c 	.word	0x2000014c
 80003a8:	2000013c 	.word	0x2000013c
 80003ac:	20000150 	.word	0x20000150

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 ff15 	bl	80022e0 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f001 fddc 	bl	8002074 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 f89c 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 f894 	bl	8002604 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 f888 	bl	8002604 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f001 fdb4 	bl	8002074 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f001 fdae 	bl	8002074 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f001 fda8 	bl	8002074 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f001 fd99 	bl	8002074 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f001 fd8e 	bl	8002074 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000150 	.word	0x20000150
 80005a8:	20000153 	.word	0x20000153
 80005ac:	20000134 	.word	0x20000134
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000136 	.word	0x20000136
 80005b8:	20000138 	.word	0x20000138
 80005bc:	2000013a 	.word	0x2000013a
 80005c0:	2000013c 	.word	0x2000013c
 80005c4:	2000014c 	.word	0x2000014c
 80005c8:	20000151 	.word	0x20000151
 80005cc:	20000152 	.word	0x20000152

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	2000014c 	.word	0x2000014c
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000154 	.word	0x20000154

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f001 fc96 	bl	8002074 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000153 	.word	0x20000153
 80007ac:	20000154 	.word	0x20000154

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000151 	.word	0x20000151

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fe92 	bl	8002604 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fe86 	bl	8002604 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000014c 	.word	0x2000014c
 8000930:	20000136 	.word	0x20000136
 8000934:	20000138 	.word	0x20000138
 8000938:	20000150 	.word	0x20000150

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fe5a 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f001 fb8f 	bl	8002074 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fe4f 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f001 fb84 	bl	8002074 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f001 fe44 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f001 fb79 	bl	8002074 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000014c 	.word	0x2000014c
 800098c:	2000013a 	.word	0x2000013a

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f001 fe21 	bl	8002604 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000014c 	.word	0x2000014c
 80009e0:	2000013c 	.word	0x2000013c

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f001 fdf7 	bl	8002604 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000014c 	.word	0x2000014c
 8000a34:	2000013c 	.word	0x2000013c

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f001 fab4 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f82a 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 f978 	bl	8000d38 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a48:	f000 f888 	bl	8000b5c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a4c:	f000 f8c6 	bl	8000bdc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000a50:	f000 f950 	bl	8000cf4 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000a54:	f000 f900 	bl	8000c58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  programInit();
 8000a58:	f000 fc1a 	bl	8001290 <programInit>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a62:	480c      	ldr	r0, [pc, #48]	; (8000a94 <main+0x5c>)
 8000a64:	f001 fdce 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <main+0x5c>)
 8000a70:	f001 fdc8 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <main+0x5c>)
 8000a7c:	f001 fdc2 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a86:	4803      	ldr	r0, [pc, #12]	; (8000a94 <main+0x5c>)
 8000a88:	f001 fdbc 	bl	8002604 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  programLoop();
	  update_lcd();
 8000a8c:	f000 fcd0 	bl	8001430 <update_lcd>
  {
 8000a90:	e7fc      	b.n	8000a8c <main+0x54>
 8000a92:	bf00      	nop
 8000a94:	48000c00 	.word	0x48000c00

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b09e      	sub	sp, #120	; 0x78
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000aa2:	2228      	movs	r2, #40	; 0x28
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 f902 	bl	8004cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	223c      	movs	r2, #60	; 0x3c
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f004 f8f4 	bl	8004cb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000acc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ad0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ada:	2310      	movs	r3, #16
 8000adc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ae8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aec:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 ffc8 	bl	8002a88 <HAL_RCC_OscConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000afe:	f000 fa2b 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b02:	230f      	movs	r3, #15
 8000b04:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b06:	2302      	movs	r3, #2
 8000b08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fff0 	bl	8003b04 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b2a:	f000 fa15 	bl	8000f58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <SystemClock_Config+0xc0>)
 8000b30:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 f9c6 	bl	8003ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b4a:	f000 fa05 	bl	8000f58 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3778      	adds	r7, #120	; 0x78
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	00020020 	.word	0x00020020

08000b5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b62:	4a1c      	ldr	r2, [pc, #112]	; (8000bd4 <MX_I2C1_Init+0x78>)
 8000b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b68:	4a1b      	ldr	r2, [pc, #108]	; (8000bd8 <MX_I2C1_Init+0x7c>)
 8000b6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b96:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b98:	f001 fd7e 	bl	8002698 <HAL_I2C_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ba2:	f000 f9d9 	bl	8000f58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000baa:	f001 fe04 	bl	80027b6 <HAL_I2CEx_ConfigAnalogFilter>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bb4:	f000 f9d0 	bl	8000f58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000bbc:	f001 fe46 	bl	800284c <HAL_I2CEx_ConfigDigitalFilter>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bc6:	f000 f9c7 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000158 	.word	0x20000158
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	2000090e 	.word	0x2000090e

08000bdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <MX_SPI1_Init+0x78>)
 8000be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000be8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000bf6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c12:	2208      	movs	r2, #8
 8000c14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c2a:	2207      	movs	r2, #7
 8000c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c36:	2208      	movs	r2, #8
 8000c38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c3c:	f003 faf8 	bl	8004230 <HAL_SPI_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c46:	f000 f987 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200001ac 	.word	0x200001ac
 8000c54:	40013000 	.word	0x40013000

08000c58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800-1;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000c80:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000c84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000c8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca0:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000ca2:	f003 fb70 	bl	8004386 <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000cac:	f000 f954 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000cbe:	f003 fcd8 	bl	8004672 <HAL_TIM_ConfigClockSource>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000cc8:	f000 f946 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000cda:	f003 fee5 	bl	8004aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ce4:	f000 f938 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000210 	.word	0x20000210

08000cf4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <MX_USB_PCD_Init+0x3c>)
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <MX_USB_PCD_Init+0x40>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_USB_PCD_Init+0x3c>)
 8000d00:	2208      	movs	r2, #8
 8000d02:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <MX_USB_PCD_Init+0x3c>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_USB_PCD_Init+0x3c>)
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MX_USB_PCD_Init+0x3c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_USB_PCD_Init+0x3c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_USB_PCD_Init+0x3c>)
 8000d1e:	f001 fde1 	bl	80028e4 <HAL_PCD_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000d28:	f000 f916 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2000025c 	.word	0x2000025c
 8000d34:	40005c00 	.word	0x40005c00

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4e:	4b7d      	ldr	r3, [pc, #500]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a7c      	ldr	r2, [pc, #496]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d58:	6153      	str	r3, [r2, #20]
 8000d5a:	4b7a      	ldr	r3, [pc, #488]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d62:	61bb      	str	r3, [r7, #24]
 8000d64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	4b77      	ldr	r3, [pc, #476]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	4a76      	ldr	r2, [pc, #472]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d70:	6153      	str	r3, [r2, #20]
 8000d72:	4b74      	ldr	r3, [pc, #464]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d7e:	4b71      	ldr	r3, [pc, #452]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	4a70      	ldr	r2, [pc, #448]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000d84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d88:	6153      	str	r3, [r2, #20]
 8000d8a:	4b6e      	ldr	r3, [pc, #440]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b6b      	ldr	r3, [pc, #428]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a6a      	ldr	r2, [pc, #424]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	6153      	str	r3, [r2, #20]
 8000da2:	4b68      	ldr	r3, [pc, #416]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b65      	ldr	r3, [pc, #404]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	4a64      	ldr	r2, [pc, #400]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db8:	6153      	str	r3, [r2, #20]
 8000dba:	4b62      	ldr	r3, [pc, #392]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc6:	4b5f      	ldr	r3, [pc, #380]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	4a5e      	ldr	r2, [pc, #376]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000dcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000dd0:	6153      	str	r3, [r2, #20]
 8000dd2:	4b5c      	ldr	r3, [pc, #368]	; (8000f44 <MX_GPIO_Init+0x20c>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000dde:	2200      	movs	r2, #0
 8000de0:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000de4:	4858      	ldr	r0, [pc, #352]	; (8000f48 <MX_GPIO_Init+0x210>)
 8000de6:	f001 fc0d 	bl	8002604 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2110      	movs	r1, #16
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f001 fc07 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2150      	movs	r1, #80	; 0x50
 8000dfa:	4854      	ldr	r0, [pc, #336]	; (8000f4c <MX_GPIO_Init+0x214>)
 8000dfc:	f001 fc02 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f242 0105 	movw	r1, #8197	; 0x2005
 8000e06:	4852      	ldr	r0, [pc, #328]	; (8000f50 <MX_GPIO_Init+0x218>)
 8000e08:	f001 fbfc 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 413e 	mov.w	r1, #48640	; 0xbe00
 8000e12:	4850      	ldr	r0, [pc, #320]	; (8000f54 <MX_GPIO_Init+0x21c>)
 8000e14:	f001 fbf6 	bl	8002604 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000e18:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000e1c:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4845      	ldr	r0, [pc, #276]	; (8000f48 <MX_GPIO_Init+0x210>)
 8000e32:	f001 fa55 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8000e36:	2320      	movs	r3, #32
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e3a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	483f      	ldr	r0, [pc, #252]	; (8000f48 <MX_GPIO_Init+0x210>)
 8000e4c:	f001 fa48 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e66:	f001 fa3b 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f001 fa2c 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000e88:	2350      	movs	r3, #80	; 0x50
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	482b      	ldr	r0, [pc, #172]	; (8000f4c <MX_GPIO_Init+0x214>)
 8000ea0:	f001 fa1e 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 8000ea4:	f242 0305 	movw	r3, #8197	; 0x2005
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4824      	ldr	r0, [pc, #144]	; (8000f50 <MX_GPIO_Init+0x218>)
 8000ebe:	f001 fa0f 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000ec2:	f44f 433e 	mov.w	r3, #48640	; 0xbe00
 8000ec6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	481e      	ldr	r0, [pc, #120]	; (8000f54 <MX_GPIO_Init+0x21c>)
 8000edc:	f001 fa00 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eea:	2302      	movs	r3, #2
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4817      	ldr	r0, [pc, #92]	; (8000f54 <MX_GPIO_Init+0x21c>)
 8000ef6:	f001 f9f3 	bl	80022e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2100      	movs	r1, #0
 8000efe:	2006      	movs	r0, #6
 8000f00:	f001 f9b7 	bl	8002272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f04:	2006      	movs	r0, #6
 8000f06:	f001 f9d0 	bl	80022aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2007      	movs	r0, #7
 8000f10:	f001 f9af 	bl	8002272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f14:	2007      	movs	r0, #7
 8000f16:	f001 f9c8 	bl	80022aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 1);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2008      	movs	r0, #8
 8000f20:	f001 f9a7 	bl	8002272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000f24:	2008      	movs	r0, #8
 8000f26:	f001 f9c0 	bl	80022aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2009      	movs	r0, #9
 8000f30:	f001 f99f 	bl	8002272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f34:	2009      	movs	r0, #9
 8000f36:	f001 f9b8 	bl	80022aa <HAL_NVIC_EnableIRQ>

}
 8000f3a:	bf00      	nop
 8000f3c:	3730      	adds	r7, #48	; 0x30
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	48001000 	.word	0x48001000
 8000f4c:	48000800 	.word	0x48000800
 8000f50:	48000400 	.word	0x48000400
 8000f54:	48000c00 	.word	0x48000c00

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <HAL_GPIO_EXTI_Callback>:
volatile uint32_t last_gpio_exti;

int starter_to_main = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
  if (last_gpio_exti + 70 > HAL_GetTick()) // Simple button debouncing
 8000f6e:	4bbe      	ldr	r3, [pc, #760]	; (8001268 <HAL_GPIO_EXTI_Callback+0x304>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f103 0446 	add.w	r4, r3, #70	; 0x46
 8000f76:	f001 f871 	bl	800205c <HAL_GetTick>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	429c      	cmp	r4, r3
 8000f7e:	f200 8165 	bhi.w	800124c <HAL_GPIO_EXTI_Callback+0x2e8>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 8000f82:	f001 f86b 	bl	800205c <HAL_GetTick>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4ab7      	ldr	r2, [pc, #732]	; (8001268 <HAL_GPIO_EXTI_Callback+0x304>)
 8000f8a:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 8000f8c:	23ff      	movs	r3, #255	; 0xff
 8000f8e:	73fb      	strb	r3, [r7, #15]
  int8_t column_number = -1;
 8000f90:	23ff      	movs	r3, #255	; 0xff
 8000f92:	73bb      	strb	r3, [r7, #14]
  {
    // blue_button_pressed = 1;
    // return;
  }

  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000f94:	2300      	movs	r3, #0
 8000f96:	737b      	strb	r3, [r7, #13]
 8000f98:	e00b      	b.n	8000fb2 <HAL_GPIO_EXTI_Callback+0x4e>
  {
    if (GPIO_Pin == Row_pins[row])
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	4ab3      	ldr	r2, [pc, #716]	; (800126c <HAL_GPIO_EXTI_Callback+0x308>)
 8000f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa2:	88fa      	ldrh	r2, [r7, #6]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d101      	bne.n	8000fac <HAL_GPIO_EXTI_Callback+0x48>
    {
      row_number = row;
 8000fa8:	7b7b      	ldrb	r3, [r7, #13]
 8000faa:	73fb      	strb	r3, [r7, #15]
  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000fac:	7b7b      	ldrb	r3, [r7, #13]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	737b      	strb	r3, [r7, #13]
 8000fb2:	7b7b      	ldrb	r3, [r7, #13]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d9f0      	bls.n	8000f9a <HAL_GPIO_EXTI_Callback+0x36>
    }
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8000fb8:	4bad      	ldr	r3, [pc, #692]	; (8001270 <HAL_GPIO_EXTI_Callback+0x30c>)
 8000fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 fb1f 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8000fc6:	4baa      	ldr	r3, [pc, #680]	; (8001270 <HAL_GPIO_EXTI_Callback+0x30c>)
 8000fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fb18 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8000fd4:	4ba6      	ldr	r3, [pc, #664]	; (8001270 <HAL_GPIO_EXTI_Callback+0x30c>)
 8000fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f001 fb11 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000fe2:	4ba3      	ldr	r3, [pc, #652]	; (8001270 <HAL_GPIO_EXTI_Callback+0x30c>)
 8000fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fb0a 	bl	8002604 <HAL_GPIO_WritePin>

  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	733b      	strb	r3, [r7, #12]
 8000ff4:	e02d      	b.n	8001052 <HAL_GPIO_EXTI_Callback+0xee>
  {
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8000ff6:	7b3b      	ldrb	r3, [r7, #12]
 8000ff8:	4a9e      	ldr	r2, [pc, #632]	; (8001274 <HAL_GPIO_EXTI_Callback+0x310>)
 8000ffa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ffe:	7b3b      	ldrb	r3, [r7, #12]
 8001000:	4a9d      	ldr	r2, [pc, #628]	; (8001278 <HAL_GPIO_EXTI_Callback+0x314>)
 8001002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001006:	2201      	movs	r2, #1
 8001008:	4619      	mov	r1, r3
 800100a:	f001 fafb 	bl	8002604 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number]))
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4a9a      	ldr	r2, [pc, #616]	; (800127c <HAL_GPIO_EXTI_Callback+0x318>)
 8001014:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101c:	4993      	ldr	r1, [pc, #588]	; (800126c <HAL_GPIO_EXTI_Callback+0x308>)
 800101e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001022:	4619      	mov	r1, r3
 8001024:	4610      	mov	r0, r2
 8001026:	f001 fad5 	bl	80025d4 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_GPIO_EXTI_Callback+0xd0>
    {
      column_number = col;
 8001030:	7b3b      	ldrb	r3, [r7, #12]
 8001032:	73bb      	strb	r3, [r7, #14]
    }
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	4a8f      	ldr	r2, [pc, #572]	; (8001274 <HAL_GPIO_EXTI_Callback+0x310>)
 8001038:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800103c:	7b3b      	ldrb	r3, [r7, #12]
 800103e:	4a8e      	ldr	r2, [pc, #568]	; (8001278 <HAL_GPIO_EXTI_Callback+0x314>)
 8001040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	f001 fadc 	bl	8002604 <HAL_GPIO_WritePin>
  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 800104c:	7b3b      	ldrb	r3, [r7, #12]
 800104e:	3301      	adds	r3, #1
 8001050:	733b      	strb	r3, [r7, #12]
 8001052:	7b3b      	ldrb	r3, [r7, #12]
 8001054:	2b03      	cmp	r3, #3
 8001056:	d9ce      	bls.n	8000ff6 <HAL_GPIO_EXTI_Callback+0x92>
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8001058:	4b85      	ldr	r3, [pc, #532]	; (8001270 <HAL_GPIO_EXTI_Callback+0x30c>)
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	2201      	movs	r2, #1
 8001060:	4618      	mov	r0, r3
 8001062:	f001 facf 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8001066:	4b82      	ldr	r3, [pc, #520]	; (8001270 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001068:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800106c:	2201      	movs	r2, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fac8 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8001074:	4b7e      	ldr	r3, [pc, #504]	; (8001270 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001076:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107a:	2201      	movs	r2, #1
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fac1 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8001082:	4b7b      	ldr	r3, [pc, #492]	; (8001270 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001088:	2201      	movs	r2, #1
 800108a:	4618      	mov	r0, r3
 800108c:	f001 faba 	bl	8002604 <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 8001090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	f000 80da 	beq.w	8001250 <HAL_GPIO_EXTI_Callback+0x2ec>
 800109c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	f000 80d4 	beq.w	8001250 <HAL_GPIO_EXTI_Callback+0x2ec>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	4413      	add	r3, r2
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3301      	adds	r3, #1
 80010b6:	72fb      	strb	r3, [r7, #11]
  switch (button_number){
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	f200 80c9 	bhi.w	8001254 <HAL_GPIO_EXTI_Callback+0x2f0>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <HAL_GPIO_EXTI_Callback+0x164>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	08001109 	.word	0x08001109
 80010cc:	0800111d 	.word	0x0800111d
 80010d0:	08001131 	.word	0x08001131
 80010d4:	0800113f 	.word	0x0800113f
 80010d8:	0800114d 	.word	0x0800114d
 80010dc:	08001161 	.word	0x08001161
 80010e0:	0800116f 	.word	0x0800116f
 80010e4:	0800117d 	.word	0x0800117d
 80010e8:	0800118b 	.word	0x0800118b
 80010ec:	080011b3 	.word	0x080011b3
 80010f0:	080011db 	.word	0x080011db
 80010f4:	080011e9 	.word	0x080011e9
 80010f8:	080011fd 	.word	0x080011fd
 80010fc:	08001217 	.word	0x08001217
 8001100:	08001225 	.word	0x08001225
 8001104:	08001239 	.word	0x08001239
  case 1: //move	//1
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800110e:	485c      	ldr	r0, [pc, #368]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001110:	f001 fa78 	bl	8002604 <HAL_GPIO_WritePin>
	move(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f000 fb39 	bl	800178c <move>

    break;
 800111a:	e0a2      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
  case 2: //boom 	//2
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001122:	4857      	ldr	r0, [pc, #348]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001124:	f001 fa6e 	bl	8002604 <HAL_GPIO_WritePin>
	boom(1);
 8001128:	2001      	movs	r0, #1
 800112a:	f000 fb1f 	bl	800176c <boom>
    break;
 800112e:	e098      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
  case 3:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001136:	4852      	ldr	r0, [pc, #328]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001138:	f001 fa64 	bl	8002604 <HAL_GPIO_WritePin>
    break;
 800113c:	e091      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
  case 4:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001144:	484e      	ldr	r0, [pc, #312]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001146:	f001 fa5d 	bl	8002604 <HAL_GPIO_WritePin>
    break;
 800114a:	e08a      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
  case 5: //dir	 	//4
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001152:	484b      	ldr	r0, [pc, #300]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001154:	f001 fa56 	bl	8002604 <HAL_GPIO_WritePin>
	 change_dir(1);
 8001158:	2001      	movs	r0, #1
 800115a:	f000 fabd 	bl	80016d8 <change_dir>
    break;
 800115e:	e080      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
  case 6:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001166:	4846      	ldr	r0, [pc, #280]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001168:	f001 fa4c 	bl	8002604 <HAL_GPIO_WritePin>
    break;
 800116c:	e079      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
  case 7:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001174:	4842      	ldr	r0, [pc, #264]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001176:	f001 fa45 	bl	8002604 <HAL_GPIO_WritePin>
    break;
 800117a:	e072      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
  case 8:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001182:	483f      	ldr	r0, [pc, #252]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001184:	f001 fa3e 	bl	8002604 <HAL_GPIO_WritePin>
    break;
 8001188:	e06b      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
  case 9: // menu curser up
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001190:	483b      	ldr	r0, [pc, #236]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001192:	f001 fa37 	bl	8002604 <HAL_GPIO_WritePin>
		if(pageflag==1){
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <HAL_GPIO_EXTI_Callback+0x320>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d15c      	bne.n	8001258 <HAL_GPIO_EXTI_Callback+0x2f4>
			if (menu_curser_r > 1){
 800119e:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <HAL_GPIO_EXTI_Callback+0x324>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	dd58      	ble.n	8001258 <HAL_GPIO_EXTI_Callback+0x2f4>
				menu_curser_r -= 1;
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <HAL_GPIO_EXTI_Callback+0x324>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	4a36      	ldr	r2, [pc, #216]	; (8001288 <HAL_GPIO_EXTI_Callback+0x324>)
 80011ae:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 80011b0:	e052      	b.n	8001258 <HAL_GPIO_EXTI_Callback+0x2f4>
  case 10: // menu cursor down
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b8:	4831      	ldr	r0, [pc, #196]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 80011ba:	f001 fa23 	bl	8002604 <HAL_GPIO_WritePin>
		if(pageflag==1){
 80011be:	4b31      	ldr	r3, [pc, #196]	; (8001284 <HAL_GPIO_EXTI_Callback+0x320>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d14a      	bne.n	800125c <HAL_GPIO_EXTI_Callback+0x2f8>
			if (menu_curser_r  < 3){
 80011c6:	4b30      	ldr	r3, [pc, #192]	; (8001288 <HAL_GPIO_EXTI_Callback+0x324>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	dc46      	bgt.n	800125c <HAL_GPIO_EXTI_Callback+0x2f8>
				menu_curser_r +=1;
 80011ce:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <HAL_GPIO_EXTI_Callback+0x324>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	4a2c      	ldr	r2, [pc, #176]	; (8001288 <HAL_GPIO_EXTI_Callback+0x324>)
 80011d6:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 80011d8:	e040      	b.n	800125c <HAL_GPIO_EXTI_Callback+0x2f8>
  case 11:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e0:	4827      	ldr	r0, [pc, #156]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 80011e2:	f001 fa0f 	bl	8002604 <HAL_GPIO_WritePin>
    break;
 80011e6:	e03c      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
  case 12: //Dir	//C
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ee:	4824      	ldr	r0, [pc, #144]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 80011f0:	f001 fa08 	bl	8002604 <HAL_GPIO_WritePin>
		change_dir(2);
 80011f4:	2002      	movs	r0, #2
 80011f6:	f000 fa6f 	bl	80016d8 <change_dir>
    break;
 80011fa:	e032      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
  case 13: //goto menu
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 80011fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001200:	481f      	ldr	r0, [pc, #124]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001202:	f001 fa17 	bl	8002634 <HAL_GPIO_TogglePin>
		if(pageflag == 0){
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <HAL_GPIO_EXTI_Callback+0x320>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d128      	bne.n	8001260 <HAL_GPIO_EXTI_Callback+0x2fc>
			starter_to_main = 1;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <HAL_GPIO_EXTI_Callback+0x328>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
		}
    break;
 8001214:	e024      	b.n	8001260 <HAL_GPIO_EXTI_Callback+0x2fc>
  case 14:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121c:	4818      	ldr	r0, [pc, #96]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 800121e:	f001 f9f1 	bl	8002604 <HAL_GPIO_WritePin>
    break;
 8001222:	e01e      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
  case 15: //Boom	//#
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122a:	4815      	ldr	r0, [pc, #84]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 800122c:	f001 f9ea 	bl	8002604 <HAL_GPIO_WritePin>
		boom(2);
 8001230:	2002      	movs	r0, #2
 8001232:	f000 fa9b 	bl	800176c <boom>
    break;
 8001236:	e014      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
  case 16: //move	//D
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123e:	4810      	ldr	r0, [pc, #64]	; (8001280 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001240:	f001 f9e0 	bl	8002604 <HAL_GPIO_WritePin>
		move(2);
 8001244:	2002      	movs	r0, #2
 8001246:	f000 faa1 	bl	800178c <move>
    break;
 800124a:	e00a      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
    return;
 800124c:	bf00      	nop
 800124e:	e008      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
    return; // Reject invalid scan
 8001250:	bf00      	nop
 8001252:	e006      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>

  default:
    break;
 8001254:	bf00      	nop
 8001256:	e004      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
    break;
 8001258:	bf00      	nop
 800125a:	e002      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
    break;
 800125c:	bf00      	nop
 800125e:	e000      	b.n	8001262 <HAL_GPIO_EXTI_Callback+0x2fe>
    break;
 8001260:	bf00      	nop
  }
}
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	2000054c 	.word	0x2000054c
 800126c:	0800561c 	.word	0x0800561c
 8001270:	48000c00 	.word	0x48000c00
 8001274:	08005624 	.word	0x08005624
 8001278:	08005634 	.word	0x08005634
 800127c:	0800560c 	.word	0x0800560c
 8001280:	48001000 	.word	0x48001000
 8001284:	20000548 	.word	0x20000548
 8001288:	20000004 	.word	0x20000004
 800128c:	20000550 	.word	0x20000550

08001290 <programInit>:

}



void programInit() {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af04      	add	r7, sp, #16
	LiquidCrystal(GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_7);
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	9303      	str	r3, [sp, #12]
 800129a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	2308      	movs	r3, #8
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2304      	movs	r3, #4
 80012ac:	2202      	movs	r2, #2
 80012ae:	2101      	movs	r1, #1
 80012b0:	481d      	ldr	r0, [pc, #116]	; (8001328 <programInit+0x98>)
 80012b2:	f7fe ffe5 	bl	8000280 <LiquidCrystal>
	begin(20, 4);
 80012b6:	2104      	movs	r1, #4
 80012b8:	2014      	movs	r0, #20
 80012ba:	f7ff f879 	bl	80003b0 <begin>
//	setCursor(5, 1);
	//	print(data);



	createChar(num_tank_right, tank_right);
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <programInit+0x9c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	491b      	ldr	r1, [pc, #108]	; (8001330 <programInit+0xa0>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fab4 	bl	8000832 <createChar>
	createChar(num_tank_up, tank_up);
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <programInit+0xa4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	491a      	ldr	r1, [pc, #104]	; (8001338 <programInit+0xa8>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff faae 	bl	8000832 <createChar>
	createChar(num_tank_down, tank_down);
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <programInit+0xac>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4919      	ldr	r1, [pc, #100]	; (8001340 <programInit+0xb0>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff faa8 	bl	8000832 <createChar>
	createChar(num_tank_left, tank_left);
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <programInit+0xb4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4918      	ldr	r1, [pc, #96]	; (8001348 <programInit+0xb8>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff faa2 	bl	8000832 <createChar>
	createChar(num_extra_bullet, extra_bullet);
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <programInit+0xbc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4917      	ldr	r1, [pc, #92]	; (8001350 <programInit+0xc0>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fa9c 	bl	8000832 <createChar>
	createChar(num_chance, chance);
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <programInit+0xc4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4916      	ldr	r1, [pc, #88]	; (8001358 <programInit+0xc8>)
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fa96 	bl	8000832 <createChar>
	createChar(num_health, health);
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <programInit+0xcc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4915      	ldr	r1, [pc, #84]	; (8001360 <programInit+0xd0>)
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fa90 	bl	8000832 <createChar>
	createChar(num_arrow, arrow);
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <programInit+0xd4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4914      	ldr	r1, [pc, #80]	; (8001368 <programInit+0xd8>)
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fa8a 	bl	8000832 <createChar>
	starter();
 800131e:	f000 f825 	bl	800136c <starter>

//	init_board();

//	update_board();

}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	48000800 	.word	0x48000800
 800132c:	20000088 	.word	0x20000088
 8001330:	20000028 	.word	0x20000028
 8001334:	20000084 	.word	0x20000084
 8001338:	20000018 	.word	0x20000018
 800133c:	2000008c 	.word	0x2000008c
 8001340:	20000038 	.word	0x20000038
 8001344:	20000080 	.word	0x20000080
 8001348:	20000020 	.word	0x20000020
 800134c:	20000090 	.word	0x20000090
 8001350:	20000008 	.word	0x20000008
 8001354:	20000094 	.word	0x20000094
 8001358:	20000010 	.word	0x20000010
 800135c:	20000098 	.word	0x20000098
 8001360:	20000030 	.word	0x20000030
 8001364:	2000009c 	.word	0x2000009c
 8001368:	20000040 	.word	0x20000040

0800136c <starter>:

void starter(){
 800136c:	b580      	push	{r7, lr}
 800136e:	b09a      	sub	sp, #104	; 0x68
 8001370:	af00      	add	r7, sp, #0
	setCursor(0, 2);
 8001372:	2102      	movs	r1, #2
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff f9e9 	bl	800074c <setCursor>
	write(num_tank_right, tank_right);
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <starter+0xa8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4926      	ldr	r1, [pc, #152]	; (8001418 <starter+0xac>)
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fa8d 	bl	80008a0 <write>

	setCursor(1, 1);
 8001386:	2101      	movs	r1, #1
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff f9df 	bl	800074c <setCursor>
	print("#");
 800138e:	4823      	ldr	r0, [pc, #140]	; (800141c <starter+0xb0>)
 8001390:	f7ff fa24 	bl	80007dc <print>

	setCursor(1, 2);
 8001394:	2102      	movs	r1, #2
 8001396:	2001      	movs	r0, #1
 8001398:	f7ff f9d8 	bl	800074c <setCursor>
	print("#");
 800139c:	481f      	ldr	r0, [pc, #124]	; (800141c <starter+0xb0>)
 800139e:	f7ff fa1d 	bl	80007dc <print>

	char data[100];
	int n = sprintf(data, "TANK BATTLE");
 80013a2:	463b      	mov	r3, r7
 80013a4:	491e      	ldr	r1, [pc, #120]	; (8001420 <starter+0xb4>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 fc8a 	bl	8004cc0 <siprintf>
 80013ac:	6678      	str	r0, [r7, #100]	; 0x64
	setCursor(4, 1);
 80013ae:	2101      	movs	r1, #1
 80013b0:	2004      	movs	r0, #4
 80013b2:	f7ff f9cb 	bl	800074c <setCursor>
	print(data);
 80013b6:	463b      	mov	r3, r7
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fa0f 	bl	80007dc <print>
	setCursor(4, 2);
 80013be:	2102      	movs	r1, #2
 80013c0:	2004      	movs	r0, #4
 80013c2:	f7ff f9c3 	bl	800074c <setCursor>
	n = sprintf(data, "===========");
 80013c6:	463b      	mov	r3, r7
 80013c8:	4916      	ldr	r1, [pc, #88]	; (8001424 <starter+0xb8>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fc78 	bl	8004cc0 <siprintf>
 80013d0:	6678      	str	r0, [r7, #100]	; 0x64
	print(data);
 80013d2:	463b      	mov	r3, r7
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fa01 	bl	80007dc <print>

	setCursor(18, 1);
 80013da:	2101      	movs	r1, #1
 80013dc:	2012      	movs	r0, #18
 80013de:	f7ff f9b5 	bl	800074c <setCursor>
	print("#");
 80013e2:	480e      	ldr	r0, [pc, #56]	; (800141c <starter+0xb0>)
 80013e4:	f7ff f9fa 	bl	80007dc <print>
	setCursor(18, 2);
 80013e8:	2102      	movs	r1, #2
 80013ea:	2012      	movs	r0, #18
 80013ec:	f7ff f9ae 	bl	800074c <setCursor>
	print("#");
 80013f0:	480a      	ldr	r0, [pc, #40]	; (800141c <starter+0xb0>)
 80013f2:	f7ff f9f3 	bl	80007dc <print>

	setCursor(19, 1);
 80013f6:	2101      	movs	r1, #1
 80013f8:	2013      	movs	r0, #19
 80013fa:	f7ff f9a7 	bl	800074c <setCursor>
	write(num_tank_left, tank_left);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <starter+0xbc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	490a      	ldr	r1, [pc, #40]	; (800142c <starter+0xc0>)
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fa4b 	bl	80008a0 <write>

}
 800140a:	bf00      	nop
 800140c:	3768      	adds	r7, #104	; 0x68
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000088 	.word	0x20000088
 8001418:	20000028 	.word	0x20000028
 800141c:	080055b4 	.word	0x080055b4
 8001420:	080055b8 	.word	0x080055b8
 8001424:	080055c4 	.word	0x080055c4
 8001428:	20000080 	.word	0x20000080
 800142c:	20000020 	.word	0x20000020

08001430 <update_lcd>:
// D11 -> C3
// D12 -> C9
// D13 -> C8
// D14 -> C7

void update_lcd(){
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	if(pageflag==2){
 8001436:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <update_lcd+0x104>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d166      	bne.n	800150c <update_lcd+0xdc>
		for (int i = 0; i < 20; i++) {
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	e05f      	b.n	8001504 <update_lcd+0xd4>
			for (int j = 0; j < 4; j++) {
 8001444:	2300      	movs	r3, #0
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	e056      	b.n	80014f8 <update_lcd+0xc8>
				setCursor(i, j);
 800144a:	6839      	ldr	r1, [r7, #0]
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff f97d 	bl	800074c <setCursor>
				if(lcd[i][j] != 9 && lcd[i][j] != 10 && lcd[i][j] != 0){
 8001452:	4a39      	ldr	r2, [pc, #228]	; (8001538 <update_lcd+0x108>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	441a      	add	r2, r3
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b09      	cmp	r3, #9
 8001462:	d01c      	beq.n	800149e <update_lcd+0x6e>
 8001464:	4a34      	ldr	r2, [pc, #208]	; (8001538 <update_lcd+0x108>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	441a      	add	r2, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b0a      	cmp	r3, #10
 8001474:	d013      	beq.n	800149e <update_lcd+0x6e>
 8001476:	4a30      	ldr	r2, [pc, #192]	; (8001538 <update_lcd+0x108>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	441a      	add	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00a      	beq.n	800149e <update_lcd+0x6e>
					write(lcd[i][j]);
 8001488:	4a2b      	ldr	r2, [pc, #172]	; (8001538 <update_lcd+0x108>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	441a      	add	r2, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	4413      	add	r3, r2
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fa02 	bl	80008a0 <write>
				if(lcd[i][j] != 9 && lcd[i][j] != 10 && lcd[i][j] != 0){
 800149c:	e029      	b.n	80014f2 <update_lcd+0xc2>
				}
				else if (lcd[i][j] == 9 ){
 800149e:	4a26      	ldr	r2, [pc, #152]	; (8001538 <update_lcd+0x108>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	441a      	add	r2, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	4413      	add	r3, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b09      	cmp	r3, #9
 80014ae:	d103      	bne.n	80014b8 <update_lcd+0x88>
					print("#");
 80014b0:	4822      	ldr	r0, [pc, #136]	; (800153c <update_lcd+0x10c>)
 80014b2:	f7ff f993 	bl	80007dc <print>
 80014b6:	e01c      	b.n	80014f2 <update_lcd+0xc2>
				}
				else if (lcd[i][j] == 10 ){
 80014b8:	4a1f      	ldr	r2, [pc, #124]	; (8001538 <update_lcd+0x108>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	441a      	add	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b0a      	cmp	r3, #10
 80014c8:	d103      	bne.n	80014d2 <update_lcd+0xa2>
					print("I");
 80014ca:	481d      	ldr	r0, [pc, #116]	; (8001540 <update_lcd+0x110>)
 80014cc:	f7ff f986 	bl	80007dc <print>
 80014d0:	e00f      	b.n	80014f2 <update_lcd+0xc2>
				}
				else if (lcd[i][j] == 0){
 80014d2:	4a19      	ldr	r2, [pc, #100]	; (8001538 <update_lcd+0x108>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	441a      	add	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d103      	bne.n	80014ec <update_lcd+0xbc>
					print(" ");
 80014e4:	4817      	ldr	r0, [pc, #92]	; (8001544 <update_lcd+0x114>)
 80014e6:	f7ff f979 	bl	80007dc <print>
 80014ea:	e002      	b.n	80014f2 <update_lcd+0xc2>

				}
				else{
					print("U");
 80014ec:	4816      	ldr	r0, [pc, #88]	; (8001548 <update_lcd+0x118>)
 80014ee:	f7ff f975 	bl	80007dc <print>
			for (int j = 0; j < 4; j++) {
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	dda5      	ble.n	800144a <update_lcd+0x1a>
		for (int i = 0; i < 20; i++) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3301      	adds	r3, #1
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b13      	cmp	r3, #19
 8001508:	dd9c      	ble.n	8001444 <update_lcd+0x14>
	}
	else if (pageflag==1){
		menu();

	}
}
 800150a:	e00e      	b.n	800152a <update_lcd+0xfa>
	else if (starter_to_main==1){
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <update_lcd+0x11c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d104      	bne.n	800151e <update_lcd+0xee>
		remove_starter();
 8001514:	f000 f81c 	bl	8001550 <remove_starter>
		menu();
 8001518:	f000 f87a 	bl	8001610 <menu>
}
 800151c:	e005      	b.n	800152a <update_lcd+0xfa>
	else if (pageflag==1){
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <update_lcd+0x104>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <update_lcd+0xfa>
		menu();
 8001526:	f000 f873 	bl	8001610 <menu>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000548 	.word	0x20000548
 8001538:	20000554 	.word	0x20000554
 800153c:	080055b4 	.word	0x080055b4
 8001540:	080055d0 	.word	0x080055d0
 8001544:	080055d4 	.word	0x080055d4
 8001548:	080055d8 	.word	0x080055d8
 800154c:	20000550 	.word	0x20000550

08001550 <remove_starter>:
void remove_starter(){
 8001550:	b580      	push	{r7, lr}
 8001552:	b09a      	sub	sp, #104	; 0x68
 8001554:	af00      	add	r7, sp, #0
	if (starter_to_main == 1){
 8001556:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <remove_starter+0xb0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d14b      	bne.n	80015f6 <remove_starter+0xa6>
			setCursor(0, 2);
 800155e:	2102      	movs	r1, #2
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff f8f3 	bl	800074c <setCursor>
			print(" ");
 8001566:	4827      	ldr	r0, [pc, #156]	; (8001604 <remove_starter+0xb4>)
 8001568:	f7ff f938 	bl	80007dc <print>

			setCursor(1, 1);
 800156c:	2101      	movs	r1, #1
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff f8ec 	bl	800074c <setCursor>
			print(" ");
 8001574:	4823      	ldr	r0, [pc, #140]	; (8001604 <remove_starter+0xb4>)
 8001576:	f7ff f931 	bl	80007dc <print>

			setCursor(1, 2);
 800157a:	2102      	movs	r1, #2
 800157c:	2001      	movs	r0, #1
 800157e:	f7ff f8e5 	bl	800074c <setCursor>
			print(" ");
 8001582:	4820      	ldr	r0, [pc, #128]	; (8001604 <remove_starter+0xb4>)
 8001584:	f7ff f92a 	bl	80007dc <print>

			char data[100];
			int n = sprintf(data, "           ");
 8001588:	463b      	mov	r3, r7
 800158a:	491f      	ldr	r1, [pc, #124]	; (8001608 <remove_starter+0xb8>)
 800158c:	4618      	mov	r0, r3
 800158e:	f003 fb97 	bl	8004cc0 <siprintf>
 8001592:	6678      	str	r0, [r7, #100]	; 0x64
			setCursor(4, 1);
 8001594:	2101      	movs	r1, #1
 8001596:	2004      	movs	r0, #4
 8001598:	f7ff f8d8 	bl	800074c <setCursor>
			print(data);
 800159c:	463b      	mov	r3, r7
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff f91c 	bl	80007dc <print>
			setCursor(4, 2);
 80015a4:	2102      	movs	r1, #2
 80015a6:	2004      	movs	r0, #4
 80015a8:	f7ff f8d0 	bl	800074c <setCursor>
			n = sprintf(data, "           ");
 80015ac:	463b      	mov	r3, r7
 80015ae:	4916      	ldr	r1, [pc, #88]	; (8001608 <remove_starter+0xb8>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fb85 	bl	8004cc0 <siprintf>
 80015b6:	6678      	str	r0, [r7, #100]	; 0x64
			print(data);
 80015b8:	463b      	mov	r3, r7
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f90e 	bl	80007dc <print>

			setCursor(18, 1);
 80015c0:	2101      	movs	r1, #1
 80015c2:	2012      	movs	r0, #18
 80015c4:	f7ff f8c2 	bl	800074c <setCursor>
			print(" ");
 80015c8:	480e      	ldr	r0, [pc, #56]	; (8001604 <remove_starter+0xb4>)
 80015ca:	f7ff f907 	bl	80007dc <print>
			setCursor(18, 2);
 80015ce:	2102      	movs	r1, #2
 80015d0:	2012      	movs	r0, #18
 80015d2:	f7ff f8bb 	bl	800074c <setCursor>
			print(" ");
 80015d6:	480b      	ldr	r0, [pc, #44]	; (8001604 <remove_starter+0xb4>)
 80015d8:	f7ff f900 	bl	80007dc <print>

			setCursor(19, 1);
 80015dc:	2101      	movs	r1, #1
 80015de:	2013      	movs	r0, #19
 80015e0:	f7ff f8b4 	bl	800074c <setCursor>
			print(" ");
 80015e4:	4807      	ldr	r0, [pc, #28]	; (8001604 <remove_starter+0xb4>)
 80015e6:	f7ff f8f9 	bl	80007dc <print>
			starter_to_main = 0;
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <remove_starter+0xb0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
			pageflag = 1;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <remove_starter+0xbc>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

		}
}
 80015f6:	bf00      	nop
 80015f8:	3768      	adds	r7, #104	; 0x68
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000550 	.word	0x20000550
 8001604:	080055d4 	.word	0x080055d4
 8001608:	080055dc 	.word	0x080055dc
 800160c:	20000548 	.word	0x20000548

08001610 <menu>:
void menu(){
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

	setCursor(1, 0);
 8001614:	2100      	movs	r1, #0
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff f898 	bl	800074c <setCursor>
	print("MENU:");
 800161c:	481f      	ldr	r0, [pc, #124]	; (800169c <menu+0x8c>)
 800161e:	f7ff f8dd 	bl	80007dc <print>
	setCursor(1, 1);
 8001622:	2101      	movs	r1, #1
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff f891 	bl	800074c <setCursor>
	print("PLAY");
 800162a:	481d      	ldr	r0, [pc, #116]	; (80016a0 <menu+0x90>)
 800162c:	f7ff f8d6 	bl	80007dc <print>
	setCursor(1, 2);
 8001630:	2102      	movs	r1, #2
 8001632:	2001      	movs	r0, #1
 8001634:	f7ff f88a 	bl	800074c <setCursor>
	print("SETTING");
 8001638:	481a      	ldr	r0, [pc, #104]	; (80016a4 <menu+0x94>)
 800163a:	f7ff f8cf 	bl	80007dc <print>
	setCursor(1, 3);
 800163e:	2103      	movs	r1, #3
 8001640:	2001      	movs	r0, #1
 8001642:	f7ff f883 	bl	800074c <setCursor>
	print("ABOUT");
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <menu+0x98>)
 8001648:	f7ff f8c8 	bl	80007dc <print>
	setCursor(0, 0);
 800164c:	2100      	movs	r1, #0
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff f87c 	bl	800074c <setCursor>
	print(" ");
 8001654:	4815      	ldr	r0, [pc, #84]	; (80016ac <menu+0x9c>)
 8001656:	f7ff f8c1 	bl	80007dc <print>
	setCursor(0, 1);
 800165a:	2101      	movs	r1, #1
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff f875 	bl	800074c <setCursor>
	print(" ");
 8001662:	4812      	ldr	r0, [pc, #72]	; (80016ac <menu+0x9c>)
 8001664:	f7ff f8ba 	bl	80007dc <print>
	setCursor(0, 2);
 8001668:	2102      	movs	r1, #2
 800166a:	2000      	movs	r0, #0
 800166c:	f7ff f86e 	bl	800074c <setCursor>
	print(" ");
 8001670:	480e      	ldr	r0, [pc, #56]	; (80016ac <menu+0x9c>)
 8001672:	f7ff f8b3 	bl	80007dc <print>
	setCursor(0, 3);
 8001676:	2103      	movs	r1, #3
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff f867 	bl	800074c <setCursor>
	print(" ");
 800167e:	480b      	ldr	r0, [pc, #44]	; (80016ac <menu+0x9c>)
 8001680:	f7ff f8ac 	bl	80007dc <print>
	setCursor(0, menu_curser_r);
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <menu+0xa0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff f85e 	bl	800074c <setCursor>
	print(">");
 8001690:	4808      	ldr	r0, [pc, #32]	; (80016b4 <menu+0xa4>)
 8001692:	f7ff f8a3 	bl	80007dc <print>

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	080055e8 	.word	0x080055e8
 80016a0:	080055f0 	.word	0x080055f0
 80016a4:	080055f8 	.word	0x080055f8
 80016a8:	08005600 	.word	0x08005600
 80016ac:	080055d4 	.word	0x080055d4
 80016b0:	20000004 	.word	0x20000004
 80016b4:	08005608 	.word	0x08005608

080016b8 <HAL_TIM_PeriodElapsedCallback>:
void programLoop() {
    seven_segment_refresh();
    setNumber(1234);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c8:	d101      	bne.n	80016ce <HAL_TIM_PeriodElapsedCallback+0x16>
		update_lcd();
 80016ca:	f7ff feb1 	bl	8001430 <update_lcd>
	}

}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <change_dir>:


void change_dir(int player){
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	if (player == 1){
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d119      	bne.n	800171a <change_dir+0x42>
		int new_dir = player1.direction + 1;
 80016e6:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <change_dir+0x88>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	3301      	adds	r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
		if(new_dir == 5){
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d101      	bne.n	80016f8 <change_dir+0x20>
			new_dir = 1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
		}
		player1.direction = new_dir;
 80016f8:	4a19      	ldr	r2, [pc, #100]	; (8001760 <change_dir+0x88>)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	60d3      	str	r3, [r2, #12]
		lcd[player1.position_x][player1.position_y] = player1.direction;
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <change_dir+0x88>)
 8001700:	68d9      	ldr	r1, [r3, #12]
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <change_dir+0x88>)
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <change_dir+0x88>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	b2c8      	uxtb	r0, r1
 800170c:	4915      	ldr	r1, [pc, #84]	; (8001764 <change_dir+0x8c>)
 800170e:	0092      	lsls	r2, r2, #2
 8001710:	440a      	add	r2, r1
 8001712:	4413      	add	r3, r2
 8001714:	4602      	mov	r2, r0
 8001716:	701a      	strb	r2, [r3, #0]
		}
		player2.direction = new_dir;
		lcd[player2.position_x][player2.position_y] = player2.direction;

	}
}
 8001718:	e01b      	b.n	8001752 <change_dir+0x7a>
	}else if (player == 2){
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d118      	bne.n	8001752 <change_dir+0x7a>
		int new_dir = player2.direction + 1;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <change_dir+0x90>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	3301      	adds	r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
		if(new_dir == 5){
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b05      	cmp	r3, #5
 800172c:	d101      	bne.n	8001732 <change_dir+0x5a>
			new_dir = 1;
 800172e:	2301      	movs	r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
		player2.direction = new_dir;
 8001732:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <change_dir+0x90>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
		lcd[player2.position_x][player2.position_y] = player2.direction;
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <change_dir+0x90>)
 800173a:	68d9      	ldr	r1, [r3, #12]
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <change_dir+0x90>)
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <change_dir+0x90>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	b2c8      	uxtb	r0, r1
 8001746:	4907      	ldr	r1, [pc, #28]	; (8001764 <change_dir+0x8c>)
 8001748:	0092      	lsls	r2, r2, #2
 800174a:	440a      	add	r2, r1
 800174c:	4413      	add	r3, r2
 800174e:	4602      	mov	r2, r0
 8001750:	701a      	strb	r2, [r3, #0]
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000048 	.word	0x20000048
 8001764:	20000554 	.word	0x20000554
 8001768:	20000064 	.word	0x20000064

0800176c <boom>:

void boom(int player){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0); //Temp
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 7100 	mov.w	r1, #512	; 0x200
 800177a:	4803      	ldr	r0, [pc, #12]	; (8001788 <boom+0x1c>)
 800177c:	f000 ff42 	bl	8002604 <HAL_GPIO_WritePin>
	//TODO

}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	48001000 	.word	0x48001000

0800178c <move>:

void move(int player){
 800178c:	b480      	push	{r7}
 800178e:	b095      	sub	sp, #84	; 0x54
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	int dir;

	if (player == 1){
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b01      	cmp	r3, #1
 8001798:	f040 8118 	bne.w	80019cc <move+0x240>
		dir = player1.direction;
 800179c:	4b87      	ldr	r3, [pc, #540]	; (80019bc <move+0x230>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 80017a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d13f      	bne.n	8001828 <move+0x9c>
			int curr_col = player1.position_x;
 80017a8:	4b84      	ldr	r3, [pc, #528]	; (80019bc <move+0x230>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	613b      	str	r3, [r7, #16]
			int curr_row = player1.position_y;
 80017ae:	4b83      	ldr	r3, [pc, #524]	; (80019bc <move+0x230>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	60fb      	str	r3, [r7, #12]
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f340 8214 	ble.w	8001be4 <move+0x458>
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	3b01      	subs	r3, #1
 80017c0:	4a7f      	ldr	r2, [pc, #508]	; (80019c0 <move+0x234>)
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	441a      	add	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4413      	add	r3, r2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b7d      	ldr	r3, [pc, #500]	; (80019c4 <move+0x238>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	f000 8206 	beq.w	8001be4 <move+0x458>
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	3b01      	subs	r3, #1
 80017dc:	4a78      	ldr	r2, [pc, #480]	; (80019c0 <move+0x234>)
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	441a      	add	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4413      	add	r3, r2
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b77      	ldr	r3, [pc, #476]	; (80019c8 <move+0x23c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	f000 81f8 	beq.w	8001be4 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 80017f4:	4a72      	ldr	r2, [pc, #456]	; (80019c0 <move+0x234>)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	441a      	add	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player1.direction;
 8001804:	4b6d      	ldr	r3, [pc, #436]	; (80019bc <move+0x230>)
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	3b01      	subs	r3, #1
 800180c:	b2d1      	uxtb	r1, r2
 800180e:	4a6c      	ldr	r2, [pc, #432]	; (80019c0 <move+0x234>)
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	441a      	add	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	460a      	mov	r2, r1
 800181a:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x - 1;
 800181c:	4b67      	ldr	r3, [pc, #412]	; (80019bc <move+0x230>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	3b01      	subs	r3, #1
 8001822:	4a66      	ldr	r2, [pc, #408]	; (80019bc <move+0x230>)
 8001824:	6053      	str	r3, [r2, #4]
			}
		}
	}


}
 8001826:	e1dd      	b.n	8001be4 <move+0x458>
		}else if (dir == 2){
 8001828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800182a:	2b02      	cmp	r3, #2
 800182c:	d13f      	bne.n	80018ae <move+0x122>
			int curr_col = player1.position_x;
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <move+0x230>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61bb      	str	r3, [r7, #24]
			int curr_row = player1.position_y;
 8001834:	4b61      	ldr	r3, [pc, #388]	; (80019bc <move+0x230>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	617b      	str	r3, [r7, #20]
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f340 81d1 	ble.w	8001be4 <move+0x458>
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3b01      	subs	r3, #1
 8001846:	495e      	ldr	r1, [pc, #376]	; (80019c0 <move+0x234>)
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	0092      	lsls	r2, r2, #2
 800184c:	440a      	add	r2, r1
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	4b5b      	ldr	r3, [pc, #364]	; (80019c4 <move+0x238>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	f000 81c3 	beq.w	8001be4 <move+0x458>
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3b01      	subs	r3, #1
 8001862:	4957      	ldr	r1, [pc, #348]	; (80019c0 <move+0x234>)
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	0092      	lsls	r2, r2, #2
 8001868:	440a      	add	r2, r1
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	4b55      	ldr	r3, [pc, #340]	; (80019c8 <move+0x23c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	f000 81b5 	beq.w	8001be4 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 800187a:	4a51      	ldr	r2, [pc, #324]	; (80019c0 <move+0x234>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	441a      	add	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	4413      	add	r3, r2
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player1.direction;
 800188a:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <move+0x230>)
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3b01      	subs	r3, #1
 8001892:	b2d0      	uxtb	r0, r2
 8001894:	494a      	ldr	r1, [pc, #296]	; (80019c0 <move+0x234>)
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	440a      	add	r2, r1
 800189c:	4413      	add	r3, r2
 800189e:	4602      	mov	r2, r0
 80018a0:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y - 1;
 80018a2:	4b46      	ldr	r3, [pc, #280]	; (80019bc <move+0x230>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	4a44      	ldr	r2, [pc, #272]	; (80019bc <move+0x230>)
 80018aa:	6093      	str	r3, [r2, #8]
}
 80018ac:	e19a      	b.n	8001be4 <move+0x458>
		}else if (dir == 3){
 80018ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d13f      	bne.n	8001934 <move+0x1a8>
			int curr_col = player1.position_x;
 80018b4:	4b41      	ldr	r3, [pc, #260]	; (80019bc <move+0x230>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	623b      	str	r3, [r7, #32]
			int curr_row = player1.position_y;
 80018ba:	4b40      	ldr	r3, [pc, #256]	; (80019bc <move+0x230>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61fb      	str	r3, [r7, #28]
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	2b12      	cmp	r3, #18
 80018c4:	f300 818e 	bgt.w	8001be4 <move+0x458>
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	3301      	adds	r3, #1
 80018cc:	4a3c      	ldr	r2, [pc, #240]	; (80019c0 <move+0x234>)
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	441a      	add	r2, r3
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	4413      	add	r3, r2
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <move+0x238>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	f000 8180 	beq.w	8001be4 <move+0x458>
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	3301      	adds	r3, #1
 80018e8:	4a35      	ldr	r2, [pc, #212]	; (80019c0 <move+0x234>)
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	441a      	add	r2, r3
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <move+0x23c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	f000 8172 	beq.w	8001be4 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 8001900:	4a2f      	ldr	r2, [pc, #188]	; (80019c0 <move+0x234>)
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	441a      	add	r2, r3
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	4413      	add	r3, r2
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player1.direction;
 8001910:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <move+0x230>)
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	3301      	adds	r3, #1
 8001918:	b2d1      	uxtb	r1, r2
 800191a:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <move+0x234>)
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	441a      	add	r2, r3
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	4413      	add	r3, r2
 8001924:	460a      	mov	r2, r1
 8001926:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x + 1;
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <move+0x230>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	3301      	adds	r3, #1
 800192e:	4a23      	ldr	r2, [pc, #140]	; (80019bc <move+0x230>)
 8001930:	6053      	str	r3, [r2, #4]
}
 8001932:	e157      	b.n	8001be4 <move+0x458>
		}else if (dir == 4){
 8001934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001936:	2b04      	cmp	r3, #4
 8001938:	f040 8154 	bne.w	8001be4 <move+0x458>
			int curr_col = player1.position_x;
 800193c:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <move+0x230>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
			int curr_row = player1.position_y;
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <move+0x230>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	2b02      	cmp	r3, #2
 800194c:	f300 814a 	bgt.w	8001be4 <move+0x458>
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	3301      	adds	r3, #1
 8001954:	491a      	ldr	r1, [pc, #104]	; (80019c0 <move+0x234>)
 8001956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	440a      	add	r2, r1
 800195c:	4413      	add	r3, r2
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <move+0x238>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	f000 813c 	beq.w	8001be4 <move+0x458>
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	3301      	adds	r3, #1
 8001970:	4913      	ldr	r1, [pc, #76]	; (80019c0 <move+0x234>)
 8001972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001974:	0092      	lsls	r2, r2, #2
 8001976:	440a      	add	r2, r1
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <move+0x23c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	f000 812e 	beq.w	8001be4 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <move+0x234>)
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	441a      	add	r2, r3
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	4413      	add	r3, r2
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player1.direction;
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <move+0x230>)
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	3301      	adds	r3, #1
 80019a0:	b2d0      	uxtb	r0, r2
 80019a2:	4907      	ldr	r1, [pc, #28]	; (80019c0 <move+0x234>)
 80019a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	440a      	add	r2, r1
 80019aa:	4413      	add	r3, r2
 80019ac:	4602      	mov	r2, r0
 80019ae:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y + 1;
 80019b0:	4b02      	ldr	r3, [pc, #8]	; (80019bc <move+0x230>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	3301      	adds	r3, #1
 80019b6:	4a01      	ldr	r2, [pc, #4]	; (80019bc <move+0x230>)
 80019b8:	6093      	str	r3, [r2, #8]
}
 80019ba:	e113      	b.n	8001be4 <move+0x458>
 80019bc:	20000048 	.word	0x20000048
 80019c0:	20000554 	.word	0x20000554
 80019c4:	200000a4 	.word	0x200000a4
 80019c8:	200000a0 	.word	0x200000a0
	}else if (player == 2){
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	f040 8108 	bne.w	8001be4 <move+0x458>
		dir = player2.direction;
 80019d4:	4b86      	ldr	r3, [pc, #536]	; (8001bf0 <move+0x464>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 80019da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d13f      	bne.n	8001a60 <move+0x2d4>
			int curr_col = player2.position_x;
 80019e0:	4b83      	ldr	r3, [pc, #524]	; (8001bf0 <move+0x464>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
			int curr_row = player2.position_y;
 80019e6:	4b82      	ldr	r3, [pc, #520]	; (8001bf0 <move+0x464>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 80019ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f340 80f8 	ble.w	8001be4 <move+0x458>
 80019f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f6:	3b01      	subs	r3, #1
 80019f8:	4a7e      	ldr	r2, [pc, #504]	; (8001bf4 <move+0x468>)
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	441a      	add	r2, r3
 80019fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a00:	4413      	add	r3, r2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b7c      	ldr	r3, [pc, #496]	; (8001bf8 <move+0x46c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	f000 80ea 	beq.w	8001be4 <move+0x458>
 8001a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a12:	3b01      	subs	r3, #1
 8001a14:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <move+0x468>)
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	441a      	add	r2, r3
 8001a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1c:	4413      	add	r3, r2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <move+0x470>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	f000 80dc 	beq.w	8001be4 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 8001a2c:	4a71      	ldr	r2, [pc, #452]	; (8001bf4 <move+0x468>)
 8001a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	441a      	add	r2, r3
 8001a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a36:	4413      	add	r3, r2
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player2.direction;
 8001a3c:	4b6c      	ldr	r3, [pc, #432]	; (8001bf0 <move+0x464>)
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b2d1      	uxtb	r1, r2
 8001a46:	4a6b      	ldr	r2, [pc, #428]	; (8001bf4 <move+0x468>)
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	441a      	add	r2, r3
 8001a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4e:	4413      	add	r3, r2
 8001a50:	460a      	mov	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x - 1;
 8001a54:	4b66      	ldr	r3, [pc, #408]	; (8001bf0 <move+0x464>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	4a65      	ldr	r2, [pc, #404]	; (8001bf0 <move+0x464>)
 8001a5c:	6053      	str	r3, [r2, #4]
}
 8001a5e:	e0c1      	b.n	8001be4 <move+0x458>
		}else if (dir == 2){
 8001a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d13f      	bne.n	8001ae6 <move+0x35a>
			int curr_col = player2.position_x;
 8001a66:	4b62      	ldr	r3, [pc, #392]	; (8001bf0 <move+0x464>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	63bb      	str	r3, [r7, #56]	; 0x38
			int curr_row = player2.position_y;
 8001a6c:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <move+0x464>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 8001a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f340 80b5 	ble.w	8001be4 <move+0x458>
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	495d      	ldr	r1, [pc, #372]	; (8001bf4 <move+0x468>)
 8001a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	440a      	add	r2, r1
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b5a      	ldr	r3, [pc, #360]	; (8001bf8 <move+0x46c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f000 80a7 	beq.w	8001be4 <move+0x458>
 8001a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	4956      	ldr	r1, [pc, #344]	; (8001bf4 <move+0x468>)
 8001a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	440a      	add	r2, r1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b54      	ldr	r3, [pc, #336]	; (8001bfc <move+0x470>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f000 8099 	beq.w	8001be4 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 8001ab2:	4a50      	ldr	r2, [pc, #320]	; (8001bf4 <move+0x468>)
 8001ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	441a      	add	r2, r3
 8001aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abc:	4413      	add	r3, r2
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player2.direction;
 8001ac2:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <move+0x464>)
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b2d0      	uxtb	r0, r2
 8001acc:	4949      	ldr	r1, [pc, #292]	; (8001bf4 <move+0x468>)
 8001ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ad0:	0092      	lsls	r2, r2, #2
 8001ad2:	440a      	add	r2, r1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y - 1;
 8001ada:	4b45      	ldr	r3, [pc, #276]	; (8001bf0 <move+0x464>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	4a43      	ldr	r2, [pc, #268]	; (8001bf0 <move+0x464>)
 8001ae2:	6093      	str	r3, [r2, #8]
}
 8001ae4:	e07e      	b.n	8001be4 <move+0x458>
		}else if (dir == 3){
 8001ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d13c      	bne.n	8001b66 <move+0x3da>
			int curr_col = player2.position_x;
 8001aec:	4b40      	ldr	r3, [pc, #256]	; (8001bf0 <move+0x464>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	643b      	str	r3, [r7, #64]	; 0x40
			int curr_row = player2.position_y;
 8001af2:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <move+0x464>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 8001af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001afa:	2b12      	cmp	r3, #18
 8001afc:	dc72      	bgt.n	8001be4 <move+0x458>
 8001afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b00:	3301      	adds	r3, #1
 8001b02:	4a3c      	ldr	r2, [pc, #240]	; (8001bf4 <move+0x468>)
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	441a      	add	r2, r3
 8001b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <move+0x46c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d065      	beq.n	8001be4 <move+0x458>
 8001b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	4a35      	ldr	r2, [pc, #212]	; (8001bf4 <move+0x468>)
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	441a      	add	r2, r3
 8001b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <move+0x470>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d058      	beq.n	8001be4 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 8001b32:	4a30      	ldr	r2, [pc, #192]	; (8001bf4 <move+0x468>)
 8001b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	441a      	add	r2, r3
 8001b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player2.direction;
 8001b42:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <move+0x464>)
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b48:	3301      	adds	r3, #1
 8001b4a:	b2d1      	uxtb	r1, r2
 8001b4c:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <move+0x468>)
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	441a      	add	r2, r3
 8001b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b54:	4413      	add	r3, r2
 8001b56:	460a      	mov	r2, r1
 8001b58:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x + 1;
 8001b5a:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <move+0x464>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <move+0x464>)
 8001b62:	6053      	str	r3, [r2, #4]
}
 8001b64:	e03e      	b.n	8001be4 <move+0x458>
		}else if (dir == 4){
 8001b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d13b      	bne.n	8001be4 <move+0x458>
			int curr_col = player2.position_x;
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <move+0x464>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	64bb      	str	r3, [r7, #72]	; 0x48
			int curr_row = player2.position_y;
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <move+0x464>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 8001b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	dc32      	bgt.n	8001be4 <move+0x458>
 8001b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b80:	3301      	adds	r3, #1
 8001b82:	491c      	ldr	r1, [pc, #112]	; (8001bf4 <move+0x468>)
 8001b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b86:	0092      	lsls	r2, r2, #2
 8001b88:	440a      	add	r2, r1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <move+0x46c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d025      	beq.n	8001be4 <move+0x458>
 8001b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4915      	ldr	r1, [pc, #84]	; (8001bf4 <move+0x468>)
 8001b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ba0:	0092      	lsls	r2, r2, #2
 8001ba2:	440a      	add	r2, r1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <move+0x470>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d018      	beq.n	8001be4 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <move+0x468>)
 8001bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	441a      	add	r2, r3
 8001bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bbc:	4413      	add	r3, r2
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player2.direction;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <move+0x464>)
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc8:	3301      	adds	r3, #1
 8001bca:	b2d0      	uxtb	r0, r2
 8001bcc:	4909      	ldr	r1, [pc, #36]	; (8001bf4 <move+0x468>)
 8001bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001bd0:	0092      	lsls	r2, r2, #2
 8001bd2:	440a      	add	r2, r1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y + 1;
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <move+0x464>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	3301      	adds	r3, #1
 8001be0:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <move+0x464>)
 8001be2:	6093      	str	r3, [r2, #8]
}
 8001be4:	bf00      	nop
 8001be6:	3754      	adds	r7, #84	; 0x54
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	20000064 	.word	0x20000064
 8001bf4:	20000554 	.word	0x20000554
 8001bf8:	200000a4 	.word	0x200000a4
 8001bfc:	200000a0 	.word	0x200000a0

08001c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_MspInit+0x44>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <HAL_MspInit+0x44>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6193      	str	r3, [r2, #24]
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_MspInit+0x44>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_MspInit+0x44>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <HAL_MspInit+0x44>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_MspInit+0x44>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c36:	2007      	movs	r0, #7
 8001c38:	f000 fb10 	bl	800225c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_I2C_MspInit+0x7c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d127      	bne.n	8001cba <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_I2C_MspInit+0x80>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_I2C_MspInit+0x80>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c74:	6153      	str	r3, [r2, #20]
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_I2C_MspInit+0x80>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001c82:	23c0      	movs	r3, #192	; 0xc0
 8001c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c86:	2312      	movs	r3, #18
 8001c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c92:	2304      	movs	r3, #4
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480b      	ldr	r0, [pc, #44]	; (8001ccc <HAL_I2C_MspInit+0x84>)
 8001c9e:	f000 fb1f 	bl	80022e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_I2C_MspInit+0x80>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <HAL_I2C_MspInit+0x80>)
 8001ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_I2C_MspInit+0x80>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40005400 	.word	0x40005400
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	48000400 	.word	0x48000400

08001cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <HAL_SPI_MspInit+0x7c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d128      	bne.n	8001d44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_SPI_MspInit+0x80>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	4a16      	ldr	r2, [pc, #88]	; (8001d50 <HAL_SPI_MspInit+0x80>)
 8001cf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cfc:	6193      	str	r3, [r2, #24]
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_SPI_MspInit+0x80>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_SPI_MspInit+0x80>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <HAL_SPI_MspInit+0x80>)
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d14:	6153      	str	r3, [r2, #20]
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_SPI_MspInit+0x80>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001d22:	23e0      	movs	r3, #224	; 0xe0
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d32:	2305      	movs	r3, #5
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d40:	f000 face 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d44:	bf00      	nop
 8001d46:	3728      	adds	r7, #40	; 0x28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40013000 	.word	0x40013000
 8001d50:	40021000 	.word	0x40021000

08001d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d64:	d113      	bne.n	8001d8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_TIM_Base_MspInit+0x44>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <HAL_TIM_Base_MspInit+0x44>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	61d3      	str	r3, [r2, #28]
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_TIM_Base_MspInit+0x44>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	201c      	movs	r0, #28
 8001d84:	f000 fa75 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d88:	201c      	movs	r0, #28
 8001d8a:	f000 fa8e 	bl	80022aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000

08001d9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <HAL_PCD_MspInit+0x80>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d129      	bne.n	8001e12 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HAL_PCD_MspInit+0x84>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <HAL_PCD_MspInit+0x84>)
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc8:	6153      	str	r3, [r2, #20]
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_PCD_MspInit+0x84>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001dd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001de8:	230e      	movs	r3, #14
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df6:	f000 fa73 	bl	80022e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_PCD_MspInit+0x84>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_PCD_MspInit+0x84>)
 8001e00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_PCD_MspInit+0x84>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40005c00 	.word	0x40005c00
 8001e20:	40021000 	.word	0x40021000

08001e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <NMI_Handler+0x4>

08001e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler+0x4>

08001e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e70:	f000 f8e0 	bl	8002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f000 fbf3 	bl	8002668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	f000 fbec 	bl	8002668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e98:	2004      	movs	r0, #4
 8001e9a:	f000 fbe5 	bl	8002668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001ea6:	2008      	movs	r0, #8
 8001ea8:	f000 fbde 	bl	8002668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <TIM2_IRQHandler+0x10>)
 8001eb6:	f002 fabd 	bl	8004434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000210 	.word	0x20000210

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f002 feb2 	bl	8004c5c <__errno>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	220c      	movs	r2, #12
 8001efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000a000 	.word	0x2000a000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	200005a4 	.word	0x200005a4
 8001f2c:	200005c0 	.word	0x200005c0

08001f30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <SystemInit+0x20>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <SystemInit+0x20>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f8c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f58:	f7ff ffea 	bl	8001f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
   ldr r0, =_sdata
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f5e:	490d      	ldr	r1, [pc, #52]	; (8001f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f60:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <LoopForever+0xe>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f64:	e002      	b.n	8001f6c <LoopCopyDataInit>

08001f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6a:	3304      	adds	r3, #4

08001f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f70:	d3f9      	bcc.n	8001f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f74:	4c0a      	ldr	r4, [pc, #40]	; (8001fa0 <LoopForever+0x16>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f78:	e001      	b.n	8001f7e <LoopFillZerobss>

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f7c:	3204      	adds	r2, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f82:	f002 fe71 	bl	8004c68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f86:	f7fe fd57 	bl	8000a38 <main>

08001f8a <LoopForever>:

LoopForever:
    b LoopForever
 8001f8a:	e7fe      	b.n	8001f8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f8c:	2000a000 	.word	0x2000a000
   ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8001f98:	08005708 	.word	0x08005708
  ldr r2, =_sbss
 8001f9c:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001fa0:	200005bc 	.word	0x200005bc

08001fa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC1_2_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_Init+0x28>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <HAL_Init+0x28>)
 8001fb2:	f043 0310 	orr.w	r3, r3, #16
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f000 f94f 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f808 	bl	8001fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc4:	f7ff fe1c 	bl	8001c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40022000 	.word	0x40022000

08001fd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_InitTick+0x54>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x58>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f967 	bl	80022c6 <HAL_SYSTICK_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00e      	b.n	8002020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d80a      	bhi.n	800201e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f000 f92f 	bl	8002272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002014:	4a06      	ldr	r2, [pc, #24]	; (8002030 <HAL_InitTick+0x5c>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	200000a8 	.word	0x200000a8
 800202c:	200000b0 	.word	0x200000b0
 8002030:	200000ac 	.word	0x200000ac

08002034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_IncTick+0x20>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x24>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	4a04      	ldr	r2, [pc, #16]	; (8002058 <HAL_IncTick+0x24>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	200000b0 	.word	0x200000b0
 8002058:	200005a8 	.word	0x200005a8

0800205c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_GetTick+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	200005a8 	.word	0x200005a8

08002074 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff ffee 	bl	800205c <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d005      	beq.n	800209a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_Delay+0x44>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800209a:	bf00      	nop
 800209c:	f7ff ffde 	bl	800205c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d8f7      	bhi.n	800209c <HAL_Delay+0x28>
  {
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200000b0 	.word	0x200000b0

080020bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d8:	4013      	ands	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <__NVIC_GetPriorityGrouping+0x18>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0307 	and.w	r3, r3, #7
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	db0b      	blt.n	800214a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	4907      	ldr	r1, [pc, #28]	; (8002158 <__NVIC_EnableIRQ+0x38>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2001      	movs	r0, #1
 8002142:	fa00 f202 	lsl.w	r2, r0, r2
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002228:	d301      	bcc.n	800222e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222a:	2301      	movs	r3, #1
 800222c:	e00f      	b.n	800224e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <SysTick_Config+0x40>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002236:	210f      	movs	r1, #15
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f7ff ff8e 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <SysTick_Config+0x40>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <SysTick_Config+0x40>)
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff29 	bl	80020bc <__NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002284:	f7ff ff3e 	bl	8002104 <__NVIC_GetPriorityGrouping>
 8002288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff ff8e 	bl	80021b0 <NVIC_EncodePriority>
 8002294:	4602      	mov	r2, r0
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff5d 	bl	800215c <__NVIC_SetPriority>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff31 	bl	8002120 <__NVIC_EnableIRQ>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffa2 	bl	8002218 <SysTick_Config>
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ee:	e154      	b.n	800259a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2101      	movs	r1, #1
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	4013      	ands	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8146 	beq.w	8002594 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d005      	beq.n	8002320 <HAL_GPIO_Init+0x40>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d130      	bne.n	8002382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002356:	2201      	movs	r2, #1
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 0201 	and.w	r2, r3, #1
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b03      	cmp	r3, #3
 800238c:	d017      	beq.n	80023be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	2203      	movs	r2, #3
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d123      	bne.n	8002412 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	08da      	lsrs	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3208      	adds	r2, #8
 80023d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	08da      	lsrs	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3208      	adds	r2, #8
 800240c:	6939      	ldr	r1, [r7, #16]
 800240e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0203 	and.w	r2, r3, #3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80a0 	beq.w	8002594 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002454:	4b58      	ldr	r3, [pc, #352]	; (80025b8 <HAL_GPIO_Init+0x2d8>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4a57      	ldr	r2, [pc, #348]	; (80025b8 <HAL_GPIO_Init+0x2d8>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6193      	str	r3, [r2, #24]
 8002460:	4b55      	ldr	r3, [pc, #340]	; (80025b8 <HAL_GPIO_Init+0x2d8>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800246c:	4a53      	ldr	r2, [pc, #332]	; (80025bc <HAL_GPIO_Init+0x2dc>)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	220f      	movs	r2, #15
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002496:	d019      	beq.n	80024cc <HAL_GPIO_Init+0x1ec>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a49      	ldr	r2, [pc, #292]	; (80025c0 <HAL_GPIO_Init+0x2e0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d013      	beq.n	80024c8 <HAL_GPIO_Init+0x1e8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a48      	ldr	r2, [pc, #288]	; (80025c4 <HAL_GPIO_Init+0x2e4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00d      	beq.n	80024c4 <HAL_GPIO_Init+0x1e4>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a47      	ldr	r2, [pc, #284]	; (80025c8 <HAL_GPIO_Init+0x2e8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d007      	beq.n	80024c0 <HAL_GPIO_Init+0x1e0>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a46      	ldr	r2, [pc, #280]	; (80025cc <HAL_GPIO_Init+0x2ec>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d101      	bne.n	80024bc <HAL_GPIO_Init+0x1dc>
 80024b8:	2304      	movs	r3, #4
 80024ba:	e008      	b.n	80024ce <HAL_GPIO_Init+0x1ee>
 80024bc:	2305      	movs	r3, #5
 80024be:	e006      	b.n	80024ce <HAL_GPIO_Init+0x1ee>
 80024c0:	2303      	movs	r3, #3
 80024c2:	e004      	b.n	80024ce <HAL_GPIO_Init+0x1ee>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e002      	b.n	80024ce <HAL_GPIO_Init+0x1ee>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_GPIO_Init+0x1ee>
 80024cc:	2300      	movs	r3, #0
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	f002 0203 	and.w	r2, r2, #3
 80024d4:	0092      	lsls	r2, r2, #2
 80024d6:	4093      	lsls	r3, r2
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024de:	4937      	ldr	r1, [pc, #220]	; (80025bc <HAL_GPIO_Init+0x2dc>)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	089b      	lsrs	r3, r3, #2
 80024e4:	3302      	adds	r3, #2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ec:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <HAL_GPIO_Init+0x2f0>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002510:	4a2f      	ldr	r2, [pc, #188]	; (80025d0 <HAL_GPIO_Init+0x2f0>)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_GPIO_Init+0x2f0>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43db      	mvns	r3, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800253a:	4a25      	ldr	r2, [pc, #148]	; (80025d0 <HAL_GPIO_Init+0x2f0>)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002540:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <HAL_GPIO_Init+0x2f0>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002564:	4a1a      	ldr	r2, [pc, #104]	; (80025d0 <HAL_GPIO_Init+0x2f0>)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_GPIO_Init+0x2f0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	43db      	mvns	r3, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800258e:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <HAL_GPIO_Init+0x2f0>)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3301      	adds	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f47f aea3 	bne.w	80022f0 <HAL_GPIO_Init+0x10>
  }
}
 80025aa:	bf00      	nop
 80025ac:	bf00      	nop
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40010000 	.word	0x40010000
 80025c0:	48000400 	.word	0x48000400
 80025c4:	48000800 	.word	0x48000800
 80025c8:	48000c00 	.word	0x48000c00
 80025cc:	48001000 	.word	0x48001000
 80025d0:	40010400 	.word	0x40010400

080025d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	887b      	ldrh	r3, [r7, #2]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e001      	b.n	80025f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002614:	787b      	ldrb	r3, [r7, #1]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800261a:	887a      	ldrh	r2, [r7, #2]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002620:	e002      	b.n	8002628 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4013      	ands	r3, r2
 800264c:	041a      	lsls	r2, r3, #16
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	43d9      	mvns	r1, r3
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	400b      	ands	r3, r1
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	619a      	str	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fc6c 	bl	8000f64 <HAL_GPIO_EXTI_Callback>
  }
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40010400 	.word	0x40010400

08002698 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e081      	b.n	80027ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff fac2 	bl	8001c48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2224      	movs	r2, #36	; 0x24
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	e006      	b.n	8002720 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800271e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d104      	bne.n	8002732 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002730:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002744:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002754:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69d9      	ldr	r1, [r3, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1a      	ldr	r2, [r3, #32]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d138      	bne.n	800283e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e032      	b.n	8002840 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2224      	movs	r2, #36	; 0x24
 80027e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0201 	bic.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002808:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
  }
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b20      	cmp	r3, #32
 8002860:	d139      	bne.n	80028d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800286c:	2302      	movs	r3, #2
 800286e:	e033      	b.n	80028d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2224      	movs	r2, #36	; 0x24
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800289e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
  }
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e6:	b08b      	sub	sp, #44	; 0x2c
 80028e8:	af06      	add	r7, sp, #24
 80028ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0c4      	b.n	8002a80 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fa46 	bl	8001d9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2203      	movs	r2, #3
 8002914:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f002 f961 	bl	8004be4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	e040      	b.n	80029aa <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	3301      	adds	r3, #1
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	3303      	adds	r3, #3
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	3338      	adds	r3, #56	; 0x38
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	333c      	adds	r3, #60	; 0x3c
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	440b      	add	r3, r1
 800299e:	3340      	adds	r3, #64	; 0x40
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	3301      	adds	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d3b9      	bcc.n	8002928 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	e044      	b.n	8002a44 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	440b      	add	r3, r1
 8002a20:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	3301      	adds	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d3b5      	bcc.n	80029ba <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	687e      	ldr	r6, [r7, #4]
 8002a56:	466d      	mov	r5, sp
 8002a58:	f106 0410 	add.w	r4, r6, #16
 8002a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	602b      	str	r3, [r5, #0]
 8002a64:	1d33      	adds	r3, r6, #4
 8002a66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a68:	6838      	ldr	r0, [r7, #0]
 8002a6a:	f002 f8d6 	bl	8004c1a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a98:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d102      	bne.n	8002aae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f001 b823 	b.w	8003af4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 817d 	beq.w	8002dbe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ac4:	4bbc      	ldr	r3, [pc, #752]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d00c      	beq.n	8002aea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ad0:	4bb9      	ldr	r3, [pc, #740]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d15c      	bne.n	8002b96 <HAL_RCC_OscConfig+0x10e>
 8002adc:	4bb6      	ldr	r3, [pc, #728]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae8:	d155      	bne.n	8002b96 <HAL_RCC_OscConfig+0x10e>
 8002aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002afe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d102      	bne.n	8002b1c <HAL_RCC_OscConfig+0x94>
 8002b16:	4ba8      	ldr	r3, [pc, #672]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	e015      	b.n	8002b48 <HAL_RCC_OscConfig+0xc0>
 8002b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b20:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b34:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b38:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002b44:	4b9c      	ldr	r3, [pc, #624]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b4c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002b50:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b54:	fa92 f2a2 	rbit	r2, r2
 8002b58:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002b5c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002b60:	fab2 f282 	clz	r2, r2
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	f042 0220 	orr.w	r2, r2, #32
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f002 021f 	and.w	r2, r2, #31
 8002b70:	2101      	movs	r1, #1
 8002b72:	fa01 f202 	lsl.w	r2, r1, r2
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 811f 	beq.w	8002dbc <HAL_RCC_OscConfig+0x334>
 8002b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 8116 	bne.w	8002dbc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f000 bfaf 	b.w	8003af4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x12e>
 8002ba8:	4b83      	ldr	r3, [pc, #524]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a82      	ldr	r2, [pc, #520]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	e036      	b.n	8002c24 <HAL_RCC_OscConfig+0x19c>
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x158>
 8002bc6:	4b7c      	ldr	r3, [pc, #496]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a7b      	ldr	r2, [pc, #492]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4b79      	ldr	r3, [pc, #484]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a78      	ldr	r2, [pc, #480]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e021      	b.n	8002c24 <HAL_RCC_OscConfig+0x19c>
 8002be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x184>
 8002bf2:	4b71      	ldr	r3, [pc, #452]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a70      	ldr	r2, [pc, #448]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b6e      	ldr	r3, [pc, #440]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6d      	ldr	r2, [pc, #436]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0x19c>
 8002c0c:	4b6a      	ldr	r3, [pc, #424]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a69      	ldr	r2, [pc, #420]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b67      	ldr	r3, [pc, #412]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a66      	ldr	r2, [pc, #408]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c22:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c24:	4b64      	ldr	r3, [pc, #400]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	f023 020f 	bic.w	r2, r3, #15
 8002c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	495f      	ldr	r1, [pc, #380]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d059      	beq.n	8002d02 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4e:	f7ff fa05 	bl	800205c <HAL_GetTick>
 8002c52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c58:	f7ff fa00 	bl	800205c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b64      	cmp	r3, #100	; 0x64
 8002c66:	d902      	bls.n	8002c6e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	f000 bf43 	b.w	8003af4 <HAL_RCC_OscConfig+0x106c>
 8002c6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c72:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002c82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	fab3 f383 	clz	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d102      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x218>
 8002c9a:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	e015      	b.n	8002ccc <HAL_RCC_OscConfig+0x244>
 8002ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002cbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002cc8:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cd0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002cd4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002cd8:	fa92 f2a2 	rbit	r2, r2
 8002cdc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ce0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ce4:	fab2 f282 	clz	r2, r2
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f042 0220 	orr.w	r2, r2, #32
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f002 021f 	and.w	r2, r2, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ab      	beq.n	8002c58 <HAL_RCC_OscConfig+0x1d0>
 8002d00:	e05d      	b.n	8002dbe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7ff f9ab 	bl	800205c <HAL_GetTick>
 8002d06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7ff f9a6 	bl	800205c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b64      	cmp	r3, #100	; 0x64
 8002d1a:	d902      	bls.n	8002d22 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	f000 bee9 	b.w	8003af4 <HAL_RCC_OscConfig+0x106c>
 8002d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d26:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_RCC_OscConfig+0x2cc>
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	e015      	b.n	8002d80 <HAL_RCC_OscConfig+0x2f8>
 8002d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d58:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d70:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_RCC_OscConfig+0x330>)
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d84:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002d88:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d8c:	fa92 f2a2 	rbit	r2, r2
 8002d90:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002d94:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d98:	fab2 f282 	clz	r2, r2
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	f042 0220 	orr.w	r2, r2, #32
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	f002 021f 	and.w	r2, r2, #31
 8002da8:	2101      	movs	r1, #1
 8002daa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1ab      	bne.n	8002d0c <HAL_RCC_OscConfig+0x284>
 8002db4:	e003      	b.n	8002dbe <HAL_RCC_OscConfig+0x336>
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 817d 	beq.w	80030ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002dd4:	4ba6      	ldr	r3, [pc, #664]	; (8003070 <HAL_RCC_OscConfig+0x5e8>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00b      	beq.n	8002df8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002de0:	4ba3      	ldr	r3, [pc, #652]	; (8003070 <HAL_RCC_OscConfig+0x5e8>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d172      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x44a>
 8002dec:	4ba0      	ldr	r3, [pc, #640]	; (8003070 <HAL_RCC_OscConfig+0x5e8>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d16c      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x44a>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d102      	bne.n	8002e28 <HAL_RCC_OscConfig+0x3a0>
 8002e22:	4b93      	ldr	r3, [pc, #588]	; (8003070 <HAL_RCC_OscConfig+0x5e8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	e013      	b.n	8002e50 <HAL_RCC_OscConfig+0x3c8>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e40:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002e4c:	4b88      	ldr	r3, [pc, #544]	; (8003070 <HAL_RCC_OscConfig+0x5e8>)
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	2202      	movs	r2, #2
 8002e52:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002e56:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e5a:	fa92 f2a2 	rbit	r2, r2
 8002e5e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002e62:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002e66:	fab2 f282 	clz	r2, r2
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	f042 0220 	orr.w	r2, r2, #32
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	f002 021f 	and.w	r2, r2, #31
 8002e76:	2101      	movs	r1, #1
 8002e78:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCC_OscConfig+0x410>
 8002e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f000 be2e 	b.w	8003af4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b75      	ldr	r3, [pc, #468]	; (8003070 <HAL_RCC_OscConfig+0x5e8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	21f8      	movs	r1, #248	; 0xf8
 8002eae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002eb6:	fa91 f1a1 	rbit	r1, r1
 8002eba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ebe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ec2:	fab1 f181 	clz	r1, r1
 8002ec6:	b2c9      	uxtb	r1, r1
 8002ec8:	408b      	lsls	r3, r1
 8002eca:	4969      	ldr	r1, [pc, #420]	; (8003070 <HAL_RCC_OscConfig+0x5e8>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed0:	e0fd      	b.n	80030ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8088 	beq.w	8002ff4 <HAL_RCC_OscConfig+0x56c>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002ef6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7ff f8a4 	bl	800205c <HAL_GetTick>
 8002f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1a:	f7ff f89f 	bl	800205c <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d902      	bls.n	8002f30 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	f000 bde2 	b.w	8003af4 <HAL_RCC_OscConfig+0x106c>
 8002f30:	2302      	movs	r3, #2
 8002f32:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f42:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d102      	bne.n	8002f60 <HAL_RCC_OscConfig+0x4d8>
 8002f5a:	4b45      	ldr	r3, [pc, #276]	; (8003070 <HAL_RCC_OscConfig+0x5e8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	e013      	b.n	8002f88 <HAL_RCC_OscConfig+0x500>
 8002f60:	2302      	movs	r3, #2
 8002f62:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f72:	2302      	movs	r3, #2
 8002f74:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f78:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f84:	4b3a      	ldr	r3, [pc, #232]	; (8003070 <HAL_RCC_OscConfig+0x5e8>)
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	2202      	movs	r2, #2
 8002f8a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f8e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f92:	fa92 f2a2 	rbit	r2, r2
 8002f96:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002f9a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f9e:	fab2 f282 	clz	r2, r2
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	f042 0220 	orr.w	r2, r2, #32
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	f002 021f 	and.w	r2, r2, #31
 8002fae:	2101      	movs	r1, #1
 8002fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0af      	beq.n	8002f1a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fba:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <HAL_RCC_OscConfig+0x5e8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	21f8      	movs	r1, #248	; 0xf8
 8002fd0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002fd8:	fa91 f1a1 	rbit	r1, r1
 8002fdc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002fe0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002fe4:	fab1 f181 	clz	r1, r1
 8002fe8:	b2c9      	uxtb	r1, r1
 8002fea:	408b      	lsls	r3, r1
 8002fec:	4920      	ldr	r1, [pc, #128]	; (8003070 <HAL_RCC_OscConfig+0x5e8>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
 8002ff2:	e06c      	b.n	80030ce <HAL_RCC_OscConfig+0x646>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003006:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003014:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	461a      	mov	r2, r3
 800301c:	2300      	movs	r3, #0
 800301e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7ff f81c 	bl	800205c <HAL_GetTick>
 8003024:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302a:	f7ff f817 	bl	800205c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d902      	bls.n	8003040 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	f000 bd5a 	b.w	8003af4 <HAL_RCC_OscConfig+0x106c>
 8003040:	2302      	movs	r3, #2
 8003042:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d104      	bne.n	8003074 <HAL_RCC_OscConfig+0x5ec>
 800306a:	4b01      	ldr	r3, [pc, #4]	; (8003070 <HAL_RCC_OscConfig+0x5e8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	e015      	b.n	800309c <HAL_RCC_OscConfig+0x614>
 8003070:	40021000 	.word	0x40021000
 8003074:	2302      	movs	r3, #2
 8003076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003086:	2302      	movs	r3, #2
 8003088:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800308c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003098:	4bc8      	ldr	r3, [pc, #800]	; (80033bc <HAL_RCC_OscConfig+0x934>)
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	2202      	movs	r2, #2
 800309e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80030a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030a6:	fa92 f2a2 	rbit	r2, r2
 80030aa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80030ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80030b2:	fab2 f282 	clz	r2, r2
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	f042 0220 	orr.w	r2, r2, #32
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	f002 021f 	and.w	r2, r2, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f202 	lsl.w	r2, r1, r2
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ad      	bne.n	800302a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8110 	beq.w	8003304 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d079      	beq.n	80031e8 <HAL_RCC_OscConfig+0x760>
 80030f4:	2301      	movs	r3, #1
 80030f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030fe:	fa93 f3a3 	rbit	r3, r3
 8003102:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	4bab      	ldr	r3, [pc, #684]	; (80033c0 <HAL_RCC_OscConfig+0x938>)
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	461a      	mov	r2, r3
 800311a:	2301      	movs	r3, #1
 800311c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311e:	f7fe ff9d 	bl	800205c <HAL_GetTick>
 8003122:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003128:	f7fe ff98 	bl	800205c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d902      	bls.n	800313e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	f000 bcdb 	b.w	8003af4 <HAL_RCC_OscConfig+0x106c>
 800313e:	2302      	movs	r3, #2
 8003140:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003158:	2202      	movs	r2, #2
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003160:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	fa93 f2a3 	rbit	r2, r3
 800316a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800317c:	2202      	movs	r2, #2
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	fa93 f2a3 	rbit	r2, r3
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003196:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003198:	4b88      	ldr	r3, [pc, #544]	; (80033bc <HAL_RCC_OscConfig+0x934>)
 800319a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80031a4:	2102      	movs	r1, #2
 80031a6:	6019      	str	r1, [r3, #0]
 80031a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	fa93 f1a3 	rbit	r1, r3
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031be:	6019      	str	r1, [r3, #0]
  return result;
 80031c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	fab3 f383 	clz	r3, r3
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2101      	movs	r1, #1
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0a0      	beq.n	8003128 <HAL_RCC_OscConfig+0x6a0>
 80031e6:	e08d      	b.n	8003304 <HAL_RCC_OscConfig+0x87c>
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031f0:	2201      	movs	r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	fa93 f2a3 	rbit	r2, r3
 8003202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003206:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800320a:	601a      	str	r2, [r3, #0]
  return result;
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003214:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	4b68      	ldr	r3, [pc, #416]	; (80033c0 <HAL_RCC_OscConfig+0x938>)
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	461a      	mov	r2, r3
 8003226:	2300      	movs	r3, #0
 8003228:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322a:	f7fe ff17 	bl	800205c <HAL_GetTick>
 800322e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003232:	e00a      	b.n	800324a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003234:	f7fe ff12 	bl	800205c <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d902      	bls.n	800324a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	f000 bc55 	b.w	8003af4 <HAL_RCC_OscConfig+0x106c>
 800324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003252:	2202      	movs	r2, #2
 8003254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	fa93 f2a3 	rbit	r2, r3
 8003264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003268:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003272:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003276:	2202      	movs	r2, #2
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f2a3 	rbit	r2, r3
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800329a:	2202      	movs	r2, #2
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	fa93 f2a3 	rbit	r2, r3
 80032ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b6:	4b41      	ldr	r3, [pc, #260]	; (80033bc <HAL_RCC_OscConfig+0x934>)
 80032b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032c2:	2102      	movs	r1, #2
 80032c4:	6019      	str	r1, [r3, #0]
 80032c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	fa93 f1a3 	rbit	r1, r3
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032dc:	6019      	str	r1, [r3, #0]
  return result;
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2101      	movs	r1, #1
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d197      	bne.n	8003234 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 81a1 	beq.w	800365c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003320:	4b26      	ldr	r3, [pc, #152]	; (80033bc <HAL_RCC_OscConfig+0x934>)
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d116      	bne.n	800335a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332c:	4b23      	ldr	r3, [pc, #140]	; (80033bc <HAL_RCC_OscConfig+0x934>)
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	4a22      	ldr	r2, [pc, #136]	; (80033bc <HAL_RCC_OscConfig+0x934>)
 8003332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003336:	61d3      	str	r3, [r2, #28]
 8003338:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_RCC_OscConfig+0x934>)
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003352:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_RCC_OscConfig+0x93c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d11a      	bne.n	800339c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003366:	4b17      	ldr	r3, [pc, #92]	; (80033c4 <HAL_RCC_OscConfig+0x93c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a16      	ldr	r2, [pc, #88]	; (80033c4 <HAL_RCC_OscConfig+0x93c>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003370:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003372:	f7fe fe73 	bl	800205c <HAL_GetTick>
 8003376:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337a:	e009      	b.n	8003390 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337c:	f7fe fe6e 	bl	800205c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b64      	cmp	r3, #100	; 0x64
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e3b1      	b.n	8003af4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_RCC_OscConfig+0x93c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ef      	beq.n	800337c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800339c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10d      	bne.n	80033c8 <HAL_RCC_OscConfig+0x940>
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_RCC_OscConfig+0x934>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4a02      	ldr	r2, [pc, #8]	; (80033bc <HAL_RCC_OscConfig+0x934>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6213      	str	r3, [r2, #32]
 80033b8:	e03c      	b.n	8003434 <HAL_RCC_OscConfig+0x9ac>
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	10908120 	.word	0x10908120
 80033c4:	40007000 	.word	0x40007000
 80033c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCC_OscConfig+0x96a>
 80033d8:	4bc1      	ldr	r3, [pc, #772]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4ac0      	ldr	r2, [pc, #768]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	4bbe      	ldr	r3, [pc, #760]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4abd      	ldr	r2, [pc, #756]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 80033ea:	f023 0304 	bic.w	r3, r3, #4
 80033ee:	6213      	str	r3, [r2, #32]
 80033f0:	e020      	b.n	8003434 <HAL_RCC_OscConfig+0x9ac>
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x994>
 8003402:	4bb7      	ldr	r3, [pc, #732]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4ab6      	ldr	r2, [pc, #728]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	6213      	str	r3, [r2, #32]
 800340e:	4bb4      	ldr	r3, [pc, #720]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	4ab3      	ldr	r2, [pc, #716]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6213      	str	r3, [r2, #32]
 800341a:	e00b      	b.n	8003434 <HAL_RCC_OscConfig+0x9ac>
 800341c:	4bb0      	ldr	r3, [pc, #704]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4aaf      	ldr	r2, [pc, #700]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	6213      	str	r3, [r2, #32]
 8003428:	4bad      	ldr	r3, [pc, #692]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	4aac      	ldr	r2, [pc, #688]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 800342e:	f023 0304 	bic.w	r3, r3, #4
 8003432:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003438:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8081 	beq.w	8003548 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003446:	f7fe fe09 	bl	800205c <HAL_GetTick>
 800344a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003450:	f7fe fe04 	bl	800205c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003460:	4293      	cmp	r3, r2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e345      	b.n	8003af4 <HAL_RCC_OscConfig+0x106c>
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003470:	2202      	movs	r2, #2
 8003472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003478:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	fa93 f2a3 	rbit	r2, r3
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003490:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003494:	2202      	movs	r2, #2
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	fa93 f2a3 	rbit	r2, r3
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034ae:	601a      	str	r2, [r3, #0]
  return result;
 80034b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d102      	bne.n	80034d4 <HAL_RCC_OscConfig+0xa4c>
 80034ce:	4b84      	ldr	r3, [pc, #528]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	e013      	b.n	80034fc <HAL_RCC_OscConfig+0xa74>
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034dc:	2202      	movs	r2, #2
 80034de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	fa93 f2a3 	rbit	r2, r3
 80034ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	4b79      	ldr	r3, [pc, #484]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003500:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003504:	2102      	movs	r1, #2
 8003506:	6011      	str	r1, [r2, #0]
 8003508:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800350c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	fa92 f1a2 	rbit	r1, r2
 8003516:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800351a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800351e:	6011      	str	r1, [r2, #0]
  return result;
 8003520:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003524:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	fab2 f282 	clz	r2, r2
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	f002 021f 	and.w	r2, r2, #31
 800353a:	2101      	movs	r1, #1
 800353c:	fa01 f202 	lsl.w	r2, r1, r2
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d084      	beq.n	8003450 <HAL_RCC_OscConfig+0x9c8>
 8003546:	e07f      	b.n	8003648 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003548:	f7fe fd88 	bl	800205c <HAL_GetTick>
 800354c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003550:	e00b      	b.n	800356a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7fe fd83 	bl	800205c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e2c4      	b.n	8003af4 <HAL_RCC_OscConfig+0x106c>
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003572:	2202      	movs	r2, #2
 8003574:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	fa93 f2a3 	rbit	r2, r3
 8003584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003588:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003596:	2202      	movs	r2, #2
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	fa93 f2a3 	rbit	r2, r3
 80035a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035b0:	601a      	str	r2, [r3, #0]
  return result;
 80035b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f043 0302 	orr.w	r3, r3, #2
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d102      	bne.n	80035d6 <HAL_RCC_OscConfig+0xb4e>
 80035d0:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	e013      	b.n	80035fe <HAL_RCC_OscConfig+0xb76>
 80035d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035de:	2202      	movs	r2, #2
 80035e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	fa93 f2a3 	rbit	r2, r3
 80035f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003602:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003606:	2102      	movs	r1, #2
 8003608:	6011      	str	r1, [r2, #0]
 800360a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800360e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	fa92 f1a2 	rbit	r1, r2
 8003618:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800361c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003620:	6011      	str	r1, [r2, #0]
  return result;
 8003622:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003626:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	fab2 f282 	clz	r2, r2
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	f002 021f 	and.w	r2, r2, #31
 800363c:	2101      	movs	r1, #1
 800363e:	fa01 f202 	lsl.w	r2, r1, r2
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d184      	bne.n	8003552 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003648:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800364c:	2b01      	cmp	r3, #1
 800364e:	d105      	bne.n	800365c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003650:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	4a22      	ldr	r2, [pc, #136]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 8003656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800365a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8242 	beq.w	8003af2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800366e:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <HAL_RCC_OscConfig+0xc58>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b08      	cmp	r3, #8
 8003678:	f000 8213 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	2b02      	cmp	r3, #2
 800368a:	f040 8162 	bne.w	8003952 <HAL_RCC_OscConfig+0xeca>
 800368e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003692:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003696:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800369a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	fa93 f2a3 	rbit	r2, r3
 80036aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036b2:	601a      	str	r2, [r3, #0]
  return result;
 80036b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	461a      	mov	r2, r3
 80036d0:	2300      	movs	r3, #0
 80036d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fe fcc2 	bl	800205c <HAL_GetTick>
 80036d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036dc:	e00c      	b.n	80036f8 <HAL_RCC_OscConfig+0xc70>
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fe fcba 	bl	800205c <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e1fd      	b.n	8003af4 <HAL_RCC_OscConfig+0x106c>
 80036f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003700:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	fa93 f2a3 	rbit	r2, r3
 8003714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003718:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800371c:	601a      	str	r2, [r3, #0]
  return result;
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003726:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003728:	fab3 f383 	clz	r3, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d102      	bne.n	8003742 <HAL_RCC_OscConfig+0xcba>
 800373c:	4bb0      	ldr	r3, [pc, #704]	; (8003a00 <HAL_RCC_OscConfig+0xf78>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	e027      	b.n	8003792 <HAL_RCC_OscConfig+0xd0a>
 8003742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003746:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800374a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800374e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	fa93 f2a3 	rbit	r2, r3
 800375e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003762:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003770:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	fa93 f2a3 	rbit	r2, r3
 8003784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003788:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	4b9c      	ldr	r3, [pc, #624]	; (8003a00 <HAL_RCC_OscConfig+0xf78>)
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003796:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800379a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800379e:	6011      	str	r1, [r2, #0]
 80037a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	fa92 f1a2 	rbit	r1, r2
 80037ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037b2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037b6:	6011      	str	r1, [r2, #0]
  return result;
 80037b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037bc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	fab2 f282 	clz	r2, r2
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	f042 0220 	orr.w	r2, r2, #32
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	f002 021f 	and.w	r2, r2, #31
 80037d2:	2101      	movs	r1, #1
 80037d4:	fa01 f202 	lsl.w	r2, r1, r2
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d182      	bne.n	80036e4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037de:	4b88      	ldr	r3, [pc, #544]	; (8003a00 <HAL_RCC_OscConfig+0xf78>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	430b      	orrs	r3, r1
 8003800:	497f      	ldr	r1, [pc, #508]	; (8003a00 <HAL_RCC_OscConfig+0xf78>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
 8003806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800380e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003818:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	fa93 f2a3 	rbit	r2, r3
 8003822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003826:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800382a:	601a      	str	r2, [r3, #0]
  return result;
 800382c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003830:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003834:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003840:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	461a      	mov	r2, r3
 8003848:	2301      	movs	r3, #1
 800384a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe fc06 	bl	800205c <HAL_GetTick>
 8003850:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003854:	e009      	b.n	800386a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003856:	f7fe fc01 	bl	800205c <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e144      	b.n	8003af4 <HAL_RCC_OscConfig+0x106c>
 800386a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003872:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	fa93 f2a3 	rbit	r2, r3
 8003886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800388e:	601a      	str	r2, [r3, #0]
  return result;
 8003890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003894:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003898:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d102      	bne.n	80038b4 <HAL_RCC_OscConfig+0xe2c>
 80038ae:	4b54      	ldr	r3, [pc, #336]	; (8003a00 <HAL_RCC_OscConfig+0xf78>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	e027      	b.n	8003904 <HAL_RCC_OscConfig+0xe7c>
 80038b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	fa93 f2a3 	rbit	r2, r3
 80038d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038de:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	fa93 f2a3 	rbit	r2, r3
 80038f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	4b3f      	ldr	r3, [pc, #252]	; (8003a00 <HAL_RCC_OscConfig+0xf78>)
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003908:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800390c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003910:	6011      	str	r1, [r2, #0]
 8003912:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003916:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	fa92 f1a2 	rbit	r1, r2
 8003920:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003924:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003928:	6011      	str	r1, [r2, #0]
  return result;
 800392a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800392e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	fab2 f282 	clz	r2, r2
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	f042 0220 	orr.w	r2, r2, #32
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	f002 021f 	and.w	r2, r2, #31
 8003944:	2101      	movs	r1, #1
 8003946:	fa01 f202 	lsl.w	r2, r1, r2
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d082      	beq.n	8003856 <HAL_RCC_OscConfig+0xdce>
 8003950:	e0cf      	b.n	8003af2 <HAL_RCC_OscConfig+0x106a>
 8003952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003956:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800395a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800395e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003964:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	fa93 f2a3 	rbit	r2, r3
 800396e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003972:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003976:	601a      	str	r2, [r3, #0]
  return result;
 8003978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003980:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800398c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	461a      	mov	r2, r3
 8003994:	2300      	movs	r3, #0
 8003996:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe fb60 	bl	800205c <HAL_GetTick>
 800399c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a0:	e009      	b.n	80039b6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a2:	f7fe fb5b 	bl	800205c <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e09e      	b.n	8003af4 <HAL_RCC_OscConfig+0x106c>
 80039b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	fa93 f2a3 	rbit	r2, r3
 80039d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039da:	601a      	str	r2, [r3, #0]
  return result;
 80039dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e6:	fab3 f383 	clz	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d104      	bne.n	8003a04 <HAL_RCC_OscConfig+0xf7c>
 80039fa:	4b01      	ldr	r3, [pc, #4]	; (8003a00 <HAL_RCC_OscConfig+0xf78>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	e029      	b.n	8003a54 <HAL_RCC_OscConfig+0xfcc>
 8003a00:	40021000 	.word	0x40021000
 8003a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a08:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a16:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	fa93 f2a3 	rbit	r2, r3
 8003a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a24:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	fa93 f2a3 	rbit	r2, r3
 8003a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	4b2b      	ldr	r3, [pc, #172]	; (8003b00 <HAL_RCC_OscConfig+0x1078>)
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a58:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a60:	6011      	str	r1, [r2, #0]
 8003a62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a66:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	fa92 f1a2 	rbit	r1, r2
 8003a70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a74:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a78:	6011      	str	r1, [r2, #0]
  return result;
 8003a7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a7e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	fab2 f282 	clz	r2, r2
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	f042 0220 	orr.w	r2, r2, #32
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	f002 021f 	and.w	r2, r2, #31
 8003a94:	2101      	movs	r1, #1
 8003a96:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d180      	bne.n	80039a2 <HAL_RCC_OscConfig+0xf1a>
 8003aa0:	e027      	b.n	8003af2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e01e      	b.n	8003af4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ab6:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <HAL_RCC_OscConfig+0x1078>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003abe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ac2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d10b      	bne.n	8003aee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ad6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ada:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d001      	beq.n	8003af2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000

08003b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b09e      	sub	sp, #120	; 0x78
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e162      	b.n	8003de2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b90      	ldr	r3, [pc, #576]	; (8003d60 <HAL_RCC_ClockConfig+0x25c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d910      	bls.n	8003b4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b8d      	ldr	r3, [pc, #564]	; (8003d60 <HAL_RCC_ClockConfig+0x25c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 0207 	bic.w	r2, r3, #7
 8003b32:	498b      	ldr	r1, [pc, #556]	; (8003d60 <HAL_RCC_ClockConfig+0x25c>)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b89      	ldr	r3, [pc, #548]	; (8003d60 <HAL_RCC_ClockConfig+0x25c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e14a      	b.n	8003de2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b58:	4b82      	ldr	r3, [pc, #520]	; (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	497f      	ldr	r1, [pc, #508]	; (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 80dc 	beq.w	8003d30 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d13c      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xf6>
 8003b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b88:	fa93 f3a3 	rbit	r3, r3
 8003b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b90:	fab3 f383 	clz	r3, r3
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d102      	bne.n	8003baa <HAL_RCC_ClockConfig+0xa6>
 8003ba4:	4b6f      	ldr	r3, [pc, #444]	; (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	e00f      	b.n	8003bca <HAL_RCC_ClockConfig+0xc6>
 8003baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	667b      	str	r3, [r7, #100]	; 0x64
 8003bb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bc6:	4b67      	ldr	r3, [pc, #412]	; (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bce:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bd2:	fa92 f2a2 	rbit	r2, r2
 8003bd6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003bd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bda:	fab2 f282 	clz	r2, r2
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	f042 0220 	orr.w	r2, r2, #32
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f002 021f 	and.w	r2, r2, #31
 8003bea:	2101      	movs	r1, #1
 8003bec:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d17b      	bne.n	8003cee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e0f3      	b.n	8003de2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d13c      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x178>
 8003c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d102      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x128>
 8003c26:	4b4f      	ldr	r3, [pc, #316]	; (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	e00f      	b.n	8003c4c <HAL_RCC_ClockConfig+0x148>
 8003c2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	647b      	str	r3, [r7, #68]	; 0x44
 8003c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c48:	4b46      	ldr	r3, [pc, #280]	; (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c50:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c54:	fa92 f2a2 	rbit	r2, r2
 8003c58:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c5c:	fab2 f282 	clz	r2, r2
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	f042 0220 	orr.w	r2, r2, #32
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	f002 021f 	and.w	r2, r2, #31
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d13a      	bne.n	8003cee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0b2      	b.n	8003de2 <HAL_RCC_ClockConfig+0x2de>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	fa93 f3a3 	rbit	r3, r3
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8a:	fab3 f383 	clz	r3, r3
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d102      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x1a0>
 8003c9e:	4b31      	ldr	r3, [pc, #196]	; (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	e00d      	b.n	8003cc0 <HAL_RCC_ClockConfig+0x1bc>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	623b      	str	r3, [r7, #32]
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	4b29      	ldr	r3, [pc, #164]	; (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	61ba      	str	r2, [r7, #24]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	fa92 f2a2 	rbit	r2, r2
 8003cca:	617a      	str	r2, [r7, #20]
  return result;
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	fab2 f282 	clz	r2, r2
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	f042 0220 	orr.w	r2, r2, #32
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	f002 021f 	and.w	r2, r2, #31
 8003cde:	2101      	movs	r1, #1
 8003ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e079      	b.n	8003de2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cee:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f023 0203 	bic.w	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	491a      	ldr	r1, [pc, #104]	; (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d00:	f7fe f9ac 	bl	800205c <HAL_GetTick>
 8003d04:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d08:	f7fe f9a8 	bl	800205c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e061      	b.n	8003de2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_RCC_ClockConfig+0x260>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 020c 	and.w	r2, r3, #12
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d1eb      	bne.n	8003d08 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <HAL_RCC_ClockConfig+0x25c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d214      	bcs.n	8003d68 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <HAL_RCC_ClockConfig+0x25c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 0207 	bic.w	r2, r3, #7
 8003d46:	4906      	ldr	r1, [pc, #24]	; (8003d60 <HAL_RCC_ClockConfig+0x25c>)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <HAL_RCC_ClockConfig+0x25c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e040      	b.n	8003de2 <HAL_RCC_ClockConfig+0x2de>
 8003d60:	40022000 	.word	0x40022000
 8003d64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <HAL_RCC_ClockConfig+0x2e8>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	491a      	ldr	r1, [pc, #104]	; (8003dec <HAL_RCC_ClockConfig+0x2e8>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d92:	4b16      	ldr	r3, [pc, #88]	; (8003dec <HAL_RCC_ClockConfig+0x2e8>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4912      	ldr	r1, [pc, #72]	; (8003dec <HAL_RCC_ClockConfig+0x2e8>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003da6:	f000 f829 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003daa:	4601      	mov	r1, r0
 8003dac:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <HAL_RCC_ClockConfig+0x2e8>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db4:	22f0      	movs	r2, #240	; 0xf0
 8003db6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	fa92 f2a2 	rbit	r2, r2
 8003dbe:	60fa      	str	r2, [r7, #12]
  return result;
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	fab2 f282 	clz	r2, r2
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	40d3      	lsrs	r3, r2
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <HAL_RCC_ClockConfig+0x2ec>)
 8003dcc:	5cd3      	ldrb	r3, [r2, r3]
 8003dce:	fa21 f303 	lsr.w	r3, r1, r3
 8003dd2:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <HAL_RCC_ClockConfig+0x2f0>)
 8003dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003dd6:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_RCC_ClockConfig+0x2f4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe f8fa 	bl	8001fd4 <HAL_InitTick>
  
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3778      	adds	r7, #120	; 0x78
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40021000 	.word	0x40021000
 8003df0:	0800563c 	.word	0x0800563c
 8003df4:	200000a8 	.word	0x200000a8
 8003df8:	200000ac 	.word	0x200000ac

08003dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b08b      	sub	sp, #44	; 0x2c
 8003e00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e16:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d002      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x30>
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0x36>
 8003e2a:	e03c      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e2c:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e2e:	623b      	str	r3, [r7, #32]
      break;
 8003e30:	e03c      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e38:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e3c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	fa92 f2a2 	rbit	r2, r2
 8003e44:	607a      	str	r2, [r7, #4]
  return result;
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	fab2 f282 	clz	r2, r2
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	40d3      	lsrs	r3, r2
 8003e50:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e56:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	220f      	movs	r2, #15
 8003e60:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	fa92 f2a2 	rbit	r2, r2
 8003e68:	60fa      	str	r2, [r7, #12]
  return result;
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	fab2 f282 	clz	r2, r2
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	40d3      	lsrs	r3, r2
 8003e74:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e76:	5cd3      	ldrb	r3, [r2, r3]
 8003e78:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e84:	4a0e      	ldr	r2, [pc, #56]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
 8003e94:	e004      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	4a0c      	ldr	r2, [pc, #48]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	623b      	str	r3, [r7, #32]
      break;
 8003ea4:	e002      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ea8:	623b      	str	r3, [r7, #32]
      break;
 8003eaa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eac:	6a3b      	ldr	r3, [r7, #32]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	372c      	adds	r7, #44	; 0x2c
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	007a1200 	.word	0x007a1200
 8003ec4:	0800564c 	.word	0x0800564c
 8003ec8:	0800565c 	.word	0x0800565c
 8003ecc:	003d0900 	.word	0x003d0900

08003ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b092      	sub	sp, #72	; 0x48
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80d4 	beq.w	800409c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef4:	4b4e      	ldr	r3, [pc, #312]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10e      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f00:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	4a4a      	ldr	r2, [pc, #296]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	61d3      	str	r3, [r2, #28]
 8003f0c:	4b48      	ldr	r3, [pc, #288]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1e:	4b45      	ldr	r3, [pc, #276]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d118      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f2a:	4b42      	ldr	r3, [pc, #264]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a41      	ldr	r2, [pc, #260]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f36:	f7fe f891 	bl	800205c <HAL_GetTick>
 8003f3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3c:	e008      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3e:	f7fe f88d 	bl	800205c <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b64      	cmp	r3, #100	; 0x64
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e169      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f50:	4b38      	ldr	r3, [pc, #224]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f5c:	4b34      	ldr	r3, [pc, #208]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8084 	beq.w	8004076 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d07c      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f7c:	4b2c      	ldr	r3, [pc, #176]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b26      	ldr	r3, [pc, #152]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb2:	fa93 f3a3 	rbit	r3, r3
 8003fb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fba:	fab3 f383 	clz	r3, r3
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fce:	4a18      	ldr	r2, [pc, #96]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d04b      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fde:	f7fe f83d 	bl	800205c <HAL_GetTick>
 8003fe2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe4:	e00a      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe6:	f7fe f839 	bl	800205c <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e113      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
 8004008:	2302      	movs	r3, #2
 800400a:	623b      	str	r3, [r7, #32]
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	fa93 f3a3 	rbit	r3, r3
 8004012:	61fb      	str	r3, [r7, #28]
  return result;
 8004014:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004016:	fab3 f383 	clz	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f043 0302 	orr.w	r3, r3, #2
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d108      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800402a:	4b01      	ldr	r3, [pc, #4]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	e00d      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004030:	40021000 	.word	0x40021000
 8004034:	40007000 	.word	0x40007000
 8004038:	10908100 	.word	0x10908100
 800403c:	2302      	movs	r3, #2
 800403e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	fa93 f3a3 	rbit	r3, r3
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	4b78      	ldr	r3, [pc, #480]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	2202      	movs	r2, #2
 800404e:	613a      	str	r2, [r7, #16]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	fa92 f2a2 	rbit	r2, r2
 8004056:	60fa      	str	r2, [r7, #12]
  return result;
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	fab2 f282 	clz	r2, r2
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	f002 021f 	and.w	r2, r2, #31
 800406a:	2101      	movs	r1, #1
 800406c:	fa01 f202 	lsl.w	r2, r1, r2
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0b7      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004076:	4b6d      	ldr	r3, [pc, #436]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	496a      	ldr	r1, [pc, #424]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004084:	4313      	orrs	r3, r2
 8004086:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004088:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800408c:	2b01      	cmp	r3, #1
 800408e:	d105      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004090:	4b66      	ldr	r3, [pc, #408]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4a65      	ldr	r2, [pc, #404]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040a8:	4b60      	ldr	r3, [pc, #384]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	f023 0203 	bic.w	r2, r3, #3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	495d      	ldr	r1, [pc, #372]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040c6:	4b59      	ldr	r3, [pc, #356]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	4956      	ldr	r1, [pc, #344]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040e4:	4b51      	ldr	r3, [pc, #324]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	494e      	ldr	r1, [pc, #312]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004102:	4b4a      	ldr	r3, [pc, #296]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	f023 0210 	bic.w	r2, r3, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	4947      	ldr	r1, [pc, #284]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004110:	4313      	orrs	r3, r2
 8004112:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004120:	4b42      	ldr	r3, [pc, #264]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	493f      	ldr	r1, [pc, #252]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800413e:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f023 0220 	bic.w	r2, r3, #32
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	4938      	ldr	r1, [pc, #224]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800414c:	4313      	orrs	r3, r2
 800414e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800415c:	4b33      	ldr	r3, [pc, #204]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	4930      	ldr	r1, [pc, #192]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800416a:	4313      	orrs	r3, r2
 800416c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800417a:	4b2c      	ldr	r3, [pc, #176]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	4929      	ldr	r1, [pc, #164]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004188:	4313      	orrs	r3, r2
 800418a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004198:	4b24      	ldr	r3, [pc, #144]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	4921      	ldr	r1, [pc, #132]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	491a      	ldr	r1, [pc, #104]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80041d4:	4b15      	ldr	r3, [pc, #84]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	4912      	ldr	r1, [pc, #72]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	490b      	ldr	r1, [pc, #44]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004200:	4313      	orrs	r3, r2
 8004202:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421c:	4903      	ldr	r1, [pc, #12]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800421e:	4313      	orrs	r3, r2
 8004220:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3748      	adds	r7, #72	; 0x48
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000

08004230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e09d      	b.n	800437e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	2b00      	cmp	r3, #0
 8004248:	d108      	bne.n	800425c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004252:	d009      	beq.n	8004268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	61da      	str	r2, [r3, #28]
 800425a:	e005      	b.n	8004268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd fd24 	bl	8001cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042a8:	d902      	bls.n	80042b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e002      	b.n	80042b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042be:	d007      	beq.n	80042d0 <HAL_SPI_Init+0xa0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042c8:	d002      	beq.n	80042d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004312:	ea42 0103 	orr.w	r1, r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	f003 0204 	and.w	r2, r3, #4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800434c:	ea42 0103 	orr.w	r1, r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69da      	ldr	r2, [r3, #28]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800436c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e049      	b.n	800442c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7fd fcd1 	bl	8001d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3304      	adds	r3, #4
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f000 fa45 	bl	8004854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b02      	cmp	r3, #2
 8004448:	d122      	bne.n	8004490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b02      	cmp	r3, #2
 8004456:	d11b      	bne.n	8004490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0202 	mvn.w	r2, #2
 8004460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f9ce 	bl	8004818 <HAL_TIM_IC_CaptureCallback>
 800447c:	e005      	b.n	800448a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f9c0 	bl	8004804 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f9d1 	bl	800482c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b04      	cmp	r3, #4
 800449c:	d122      	bne.n	80044e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d11b      	bne.n	80044e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0204 	mvn.w	r2, #4
 80044b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f9a4 	bl	8004818 <HAL_TIM_IC_CaptureCallback>
 80044d0:	e005      	b.n	80044de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f996 	bl	8004804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f9a7 	bl	800482c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d122      	bne.n	8004538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d11b      	bne.n	8004538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0208 	mvn.w	r2, #8
 8004508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2204      	movs	r2, #4
 800450e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f97a 	bl	8004818 <HAL_TIM_IC_CaptureCallback>
 8004524:	e005      	b.n	8004532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f96c 	bl	8004804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f97d 	bl	800482c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b10      	cmp	r3, #16
 8004544:	d122      	bne.n	800458c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b10      	cmp	r3, #16
 8004552:	d11b      	bne.n	800458c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 0210 	mvn.w	r2, #16
 800455c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2208      	movs	r2, #8
 8004562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f950 	bl	8004818 <HAL_TIM_IC_CaptureCallback>
 8004578:	e005      	b.n	8004586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f942 	bl	8004804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f953 	bl	800482c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b01      	cmp	r3, #1
 8004598:	d10e      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d107      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0201 	mvn.w	r2, #1
 80045b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd f880 	bl	80016b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d10e      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d0:	2b80      	cmp	r3, #128	; 0x80
 80045d2:	d107      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 faec 	bl	8004bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f2:	d10e      	bne.n	8004612 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fe:	2b80      	cmp	r3, #128	; 0x80
 8004600:	d107      	bne.n	8004612 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800460a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fadf 	bl	8004bd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d10e      	bne.n	800463e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d107      	bne.n	800463e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f901 	bl	8004840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b20      	cmp	r3, #32
 800464a:	d10e      	bne.n	800466a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b20      	cmp	r3, #32
 8004658:	d107      	bne.n	800466a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f06f 0220 	mvn.w	r2, #32
 8004662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fa9f 	bl	8004ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_TIM_ConfigClockSource+0x1c>
 800468a:	2302      	movs	r3, #2
 800468c:	e0b6      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x18a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2202      	movs	r2, #2
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ca:	d03e      	beq.n	800474a <HAL_TIM_ConfigClockSource+0xd8>
 80046cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d0:	f200 8087 	bhi.w	80047e2 <HAL_TIM_ConfigClockSource+0x170>
 80046d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d8:	f000 8086 	beq.w	80047e8 <HAL_TIM_ConfigClockSource+0x176>
 80046dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e0:	d87f      	bhi.n	80047e2 <HAL_TIM_ConfigClockSource+0x170>
 80046e2:	2b70      	cmp	r3, #112	; 0x70
 80046e4:	d01a      	beq.n	800471c <HAL_TIM_ConfigClockSource+0xaa>
 80046e6:	2b70      	cmp	r3, #112	; 0x70
 80046e8:	d87b      	bhi.n	80047e2 <HAL_TIM_ConfigClockSource+0x170>
 80046ea:	2b60      	cmp	r3, #96	; 0x60
 80046ec:	d050      	beq.n	8004790 <HAL_TIM_ConfigClockSource+0x11e>
 80046ee:	2b60      	cmp	r3, #96	; 0x60
 80046f0:	d877      	bhi.n	80047e2 <HAL_TIM_ConfigClockSource+0x170>
 80046f2:	2b50      	cmp	r3, #80	; 0x50
 80046f4:	d03c      	beq.n	8004770 <HAL_TIM_ConfigClockSource+0xfe>
 80046f6:	2b50      	cmp	r3, #80	; 0x50
 80046f8:	d873      	bhi.n	80047e2 <HAL_TIM_ConfigClockSource+0x170>
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d058      	beq.n	80047b0 <HAL_TIM_ConfigClockSource+0x13e>
 80046fe:	2b40      	cmp	r3, #64	; 0x40
 8004700:	d86f      	bhi.n	80047e2 <HAL_TIM_ConfigClockSource+0x170>
 8004702:	2b30      	cmp	r3, #48	; 0x30
 8004704:	d064      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0x15e>
 8004706:	2b30      	cmp	r3, #48	; 0x30
 8004708:	d86b      	bhi.n	80047e2 <HAL_TIM_ConfigClockSource+0x170>
 800470a:	2b20      	cmp	r3, #32
 800470c:	d060      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0x15e>
 800470e:	2b20      	cmp	r3, #32
 8004710:	d867      	bhi.n	80047e2 <HAL_TIM_ConfigClockSource+0x170>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d05c      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0x15e>
 8004716:	2b10      	cmp	r3, #16
 8004718:	d05a      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0x15e>
 800471a:	e062      	b.n	80047e2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	6899      	ldr	r1, [r3, #8]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f000 f99c 	bl	8004a68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800473e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	609a      	str	r2, [r3, #8]
      break;
 8004748:	e04f      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6899      	ldr	r1, [r3, #8]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f000 f985 	bl	8004a68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800476c:	609a      	str	r2, [r3, #8]
      break;
 800476e:	e03c      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	461a      	mov	r2, r3
 800477e:	f000 f8f9 	bl	8004974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2150      	movs	r1, #80	; 0x50
 8004788:	4618      	mov	r0, r3
 800478a:	f000 f952 	bl	8004a32 <TIM_ITRx_SetConfig>
      break;
 800478e:	e02c      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	461a      	mov	r2, r3
 800479e:	f000 f918 	bl	80049d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2160      	movs	r1, #96	; 0x60
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 f942 	bl	8004a32 <TIM_ITRx_SetConfig>
      break;
 80047ae:	e01c      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6859      	ldr	r1, [r3, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	461a      	mov	r2, r3
 80047be:	f000 f8d9 	bl	8004974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2140      	movs	r1, #64	; 0x40
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f932 	bl	8004a32 <TIM_ITRx_SetConfig>
      break;
 80047ce:	e00c      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f000 f929 	bl	8004a32 <TIM_ITRx_SetConfig>
      break;
 80047e0:	e003      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
      break;
 80047e6:	e000      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x178>
      break;
 80047e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a3c      	ldr	r2, [pc, #240]	; (8004958 <TIM_Base_SetConfig+0x104>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00f      	beq.n	800488c <TIM_Base_SetConfig+0x38>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0x38>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a39      	ldr	r2, [pc, #228]	; (800495c <TIM_Base_SetConfig+0x108>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0x38>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a38      	ldr	r2, [pc, #224]	; (8004960 <TIM_Base_SetConfig+0x10c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0x38>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a37      	ldr	r2, [pc, #220]	; (8004964 <TIM_Base_SetConfig+0x110>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d108      	bne.n	800489e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2d      	ldr	r2, [pc, #180]	; (8004958 <TIM_Base_SetConfig+0x104>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01b      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d017      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2a      	ldr	r2, [pc, #168]	; (800495c <TIM_Base_SetConfig+0x108>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a29      	ldr	r2, [pc, #164]	; (8004960 <TIM_Base_SetConfig+0x10c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00f      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a28      	ldr	r2, [pc, #160]	; (8004964 <TIM_Base_SetConfig+0x110>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00b      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a27      	ldr	r2, [pc, #156]	; (8004968 <TIM_Base_SetConfig+0x114>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a26      	ldr	r2, [pc, #152]	; (800496c <TIM_Base_SetConfig+0x118>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a25      	ldr	r2, [pc, #148]	; (8004970 <TIM_Base_SetConfig+0x11c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d108      	bne.n	80048f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a10      	ldr	r2, [pc, #64]	; (8004958 <TIM_Base_SetConfig+0x104>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00f      	beq.n	800493c <TIM_Base_SetConfig+0xe8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a11      	ldr	r2, [pc, #68]	; (8004964 <TIM_Base_SetConfig+0x110>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00b      	beq.n	800493c <TIM_Base_SetConfig+0xe8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a10      	ldr	r2, [pc, #64]	; (8004968 <TIM_Base_SetConfig+0x114>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d007      	beq.n	800493c <TIM_Base_SetConfig+0xe8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a0f      	ldr	r2, [pc, #60]	; (800496c <TIM_Base_SetConfig+0x118>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d003      	beq.n	800493c <TIM_Base_SetConfig+0xe8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a0e      	ldr	r2, [pc, #56]	; (8004970 <TIM_Base_SetConfig+0x11c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d103      	bne.n	8004944 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	615a      	str	r2, [r3, #20]
}
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800
 8004964:	40013400 	.word	0x40013400
 8004968:	40014000 	.word	0x40014000
 800496c:	40014400 	.word	0x40014400
 8004970:	40014800 	.word	0x40014800

08004974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f023 0201 	bic.w	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800499e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f023 030a 	bic.w	r3, r3, #10
 80049b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b087      	sub	sp, #28
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f023 0210 	bic.w	r2, r3, #16
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	031b      	lsls	r3, r3, #12
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	621a      	str	r2, [r3, #32]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b085      	sub	sp, #20
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f043 0307 	orr.w	r3, r3, #7
 8004a54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	609a      	str	r2, [r3, #8]
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	021a      	lsls	r2, r3, #8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	609a      	str	r2, [r3, #8]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e063      	b.n	8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a2b      	ldr	r2, [pc, #172]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a2a      	ldr	r2, [pc, #168]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d108      	bne.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004afa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1b      	ldr	r2, [pc, #108]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d018      	beq.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b32:	d013      	beq.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00e      	beq.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d009      	beq.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a12      	ldr	r2, [pc, #72]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d10c      	bne.n	8004b76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40013400 	.word	0x40013400
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800
 8004ba4:	40014000 	.word	0x40014000

08004ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004bf0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	4013      	ands	r3, r2
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	f107 0014 	add.w	r0, r7, #20
 8004c28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	b004      	add	sp, #16
 8004c5a:	4770      	bx	lr

08004c5c <__errno>:
 8004c5c:	4b01      	ldr	r3, [pc, #4]	; (8004c64 <__errno+0x8>)
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	200000b4 	.word	0x200000b4

08004c68 <__libc_init_array>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	4d0d      	ldr	r5, [pc, #52]	; (8004ca0 <__libc_init_array+0x38>)
 8004c6c:	4c0d      	ldr	r4, [pc, #52]	; (8004ca4 <__libc_init_array+0x3c>)
 8004c6e:	1b64      	subs	r4, r4, r5
 8004c70:	10a4      	asrs	r4, r4, #2
 8004c72:	2600      	movs	r6, #0
 8004c74:	42a6      	cmp	r6, r4
 8004c76:	d109      	bne.n	8004c8c <__libc_init_array+0x24>
 8004c78:	4d0b      	ldr	r5, [pc, #44]	; (8004ca8 <__libc_init_array+0x40>)
 8004c7a:	4c0c      	ldr	r4, [pc, #48]	; (8004cac <__libc_init_array+0x44>)
 8004c7c:	f000 fc8e 	bl	800559c <_init>
 8004c80:	1b64      	subs	r4, r4, r5
 8004c82:	10a4      	asrs	r4, r4, #2
 8004c84:	2600      	movs	r6, #0
 8004c86:	42a6      	cmp	r6, r4
 8004c88:	d105      	bne.n	8004c96 <__libc_init_array+0x2e>
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c90:	4798      	blx	r3
 8004c92:	3601      	adds	r6, #1
 8004c94:	e7ee      	b.n	8004c74 <__libc_init_array+0xc>
 8004c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9a:	4798      	blx	r3
 8004c9c:	3601      	adds	r6, #1
 8004c9e:	e7f2      	b.n	8004c86 <__libc_init_array+0x1e>
 8004ca0:	08005700 	.word	0x08005700
 8004ca4:	08005700 	.word	0x08005700
 8004ca8:	08005700 	.word	0x08005700
 8004cac:	08005704 	.word	0x08005704

08004cb0 <memset>:
 8004cb0:	4402      	add	r2, r0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d100      	bne.n	8004cba <memset+0xa>
 8004cb8:	4770      	bx	lr
 8004cba:	f803 1b01 	strb.w	r1, [r3], #1
 8004cbe:	e7f9      	b.n	8004cb4 <memset+0x4>

08004cc0 <siprintf>:
 8004cc0:	b40e      	push	{r1, r2, r3}
 8004cc2:	b500      	push	{lr}
 8004cc4:	b09c      	sub	sp, #112	; 0x70
 8004cc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004cc8:	9002      	str	r0, [sp, #8]
 8004cca:	9006      	str	r0, [sp, #24]
 8004ccc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cd0:	4809      	ldr	r0, [pc, #36]	; (8004cf8 <siprintf+0x38>)
 8004cd2:	9107      	str	r1, [sp, #28]
 8004cd4:	9104      	str	r1, [sp, #16]
 8004cd6:	4909      	ldr	r1, [pc, #36]	; (8004cfc <siprintf+0x3c>)
 8004cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cdc:	9105      	str	r1, [sp, #20]
 8004cde:	6800      	ldr	r0, [r0, #0]
 8004ce0:	9301      	str	r3, [sp, #4]
 8004ce2:	a902      	add	r1, sp, #8
 8004ce4:	f000 f948 	bl	8004f78 <_svfiprintf_r>
 8004ce8:	9b02      	ldr	r3, [sp, #8]
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	b01c      	add	sp, #112	; 0x70
 8004cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cf4:	b003      	add	sp, #12
 8004cf6:	4770      	bx	lr
 8004cf8:	200000b4 	.word	0x200000b4
 8004cfc:	ffff0208 	.word	0xffff0208

08004d00 <_free_r>:
 8004d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d02:	2900      	cmp	r1, #0
 8004d04:	d044      	beq.n	8004d90 <_free_r+0x90>
 8004d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d0a:	9001      	str	r0, [sp, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d12:	bfb8      	it	lt
 8004d14:	18e4      	addlt	r4, r4, r3
 8004d16:	f000 fbfd 	bl	8005514 <__malloc_lock>
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	; (8004d94 <_free_r+0x94>)
 8004d1c:	9801      	ldr	r0, [sp, #4]
 8004d1e:	6813      	ldr	r3, [r2, #0]
 8004d20:	b933      	cbnz	r3, 8004d30 <_free_r+0x30>
 8004d22:	6063      	str	r3, [r4, #4]
 8004d24:	6014      	str	r4, [r2, #0]
 8004d26:	b003      	add	sp, #12
 8004d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d2c:	f000 bbf8 	b.w	8005520 <__malloc_unlock>
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	d908      	bls.n	8004d46 <_free_r+0x46>
 8004d34:	6825      	ldr	r5, [r4, #0]
 8004d36:	1961      	adds	r1, r4, r5
 8004d38:	428b      	cmp	r3, r1
 8004d3a:	bf01      	itttt	eq
 8004d3c:	6819      	ldreq	r1, [r3, #0]
 8004d3e:	685b      	ldreq	r3, [r3, #4]
 8004d40:	1949      	addeq	r1, r1, r5
 8004d42:	6021      	streq	r1, [r4, #0]
 8004d44:	e7ed      	b.n	8004d22 <_free_r+0x22>
 8004d46:	461a      	mov	r2, r3
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	b10b      	cbz	r3, 8004d50 <_free_r+0x50>
 8004d4c:	42a3      	cmp	r3, r4
 8004d4e:	d9fa      	bls.n	8004d46 <_free_r+0x46>
 8004d50:	6811      	ldr	r1, [r2, #0]
 8004d52:	1855      	adds	r5, r2, r1
 8004d54:	42a5      	cmp	r5, r4
 8004d56:	d10b      	bne.n	8004d70 <_free_r+0x70>
 8004d58:	6824      	ldr	r4, [r4, #0]
 8004d5a:	4421      	add	r1, r4
 8004d5c:	1854      	adds	r4, r2, r1
 8004d5e:	42a3      	cmp	r3, r4
 8004d60:	6011      	str	r1, [r2, #0]
 8004d62:	d1e0      	bne.n	8004d26 <_free_r+0x26>
 8004d64:	681c      	ldr	r4, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	6053      	str	r3, [r2, #4]
 8004d6a:	4421      	add	r1, r4
 8004d6c:	6011      	str	r1, [r2, #0]
 8004d6e:	e7da      	b.n	8004d26 <_free_r+0x26>
 8004d70:	d902      	bls.n	8004d78 <_free_r+0x78>
 8004d72:	230c      	movs	r3, #12
 8004d74:	6003      	str	r3, [r0, #0]
 8004d76:	e7d6      	b.n	8004d26 <_free_r+0x26>
 8004d78:	6825      	ldr	r5, [r4, #0]
 8004d7a:	1961      	adds	r1, r4, r5
 8004d7c:	428b      	cmp	r3, r1
 8004d7e:	bf04      	itt	eq
 8004d80:	6819      	ldreq	r1, [r3, #0]
 8004d82:	685b      	ldreq	r3, [r3, #4]
 8004d84:	6063      	str	r3, [r4, #4]
 8004d86:	bf04      	itt	eq
 8004d88:	1949      	addeq	r1, r1, r5
 8004d8a:	6021      	streq	r1, [r4, #0]
 8004d8c:	6054      	str	r4, [r2, #4]
 8004d8e:	e7ca      	b.n	8004d26 <_free_r+0x26>
 8004d90:	b003      	add	sp, #12
 8004d92:	bd30      	pop	{r4, r5, pc}
 8004d94:	200005ac 	.word	0x200005ac

08004d98 <sbrk_aligned>:
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	4e0e      	ldr	r6, [pc, #56]	; (8004dd4 <sbrk_aligned+0x3c>)
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	6831      	ldr	r1, [r6, #0]
 8004da0:	4605      	mov	r5, r0
 8004da2:	b911      	cbnz	r1, 8004daa <sbrk_aligned+0x12>
 8004da4:	f000 fb7c 	bl	80054a0 <_sbrk_r>
 8004da8:	6030      	str	r0, [r6, #0]
 8004daa:	4621      	mov	r1, r4
 8004dac:	4628      	mov	r0, r5
 8004dae:	f000 fb77 	bl	80054a0 <_sbrk_r>
 8004db2:	1c43      	adds	r3, r0, #1
 8004db4:	d00a      	beq.n	8004dcc <sbrk_aligned+0x34>
 8004db6:	1cc4      	adds	r4, r0, #3
 8004db8:	f024 0403 	bic.w	r4, r4, #3
 8004dbc:	42a0      	cmp	r0, r4
 8004dbe:	d007      	beq.n	8004dd0 <sbrk_aligned+0x38>
 8004dc0:	1a21      	subs	r1, r4, r0
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f000 fb6c 	bl	80054a0 <_sbrk_r>
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d101      	bne.n	8004dd0 <sbrk_aligned+0x38>
 8004dcc:	f04f 34ff 	mov.w	r4, #4294967295
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	200005b0 	.word	0x200005b0

08004dd8 <_malloc_r>:
 8004dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ddc:	1ccd      	adds	r5, r1, #3
 8004dde:	f025 0503 	bic.w	r5, r5, #3
 8004de2:	3508      	adds	r5, #8
 8004de4:	2d0c      	cmp	r5, #12
 8004de6:	bf38      	it	cc
 8004de8:	250c      	movcc	r5, #12
 8004dea:	2d00      	cmp	r5, #0
 8004dec:	4607      	mov	r7, r0
 8004dee:	db01      	blt.n	8004df4 <_malloc_r+0x1c>
 8004df0:	42a9      	cmp	r1, r5
 8004df2:	d905      	bls.n	8004e00 <_malloc_r+0x28>
 8004df4:	230c      	movs	r3, #12
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	2600      	movs	r6, #0
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e00:	4e2e      	ldr	r6, [pc, #184]	; (8004ebc <_malloc_r+0xe4>)
 8004e02:	f000 fb87 	bl	8005514 <__malloc_lock>
 8004e06:	6833      	ldr	r3, [r6, #0]
 8004e08:	461c      	mov	r4, r3
 8004e0a:	bb34      	cbnz	r4, 8004e5a <_malloc_r+0x82>
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	4638      	mov	r0, r7
 8004e10:	f7ff ffc2 	bl	8004d98 <sbrk_aligned>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	4604      	mov	r4, r0
 8004e18:	d14d      	bne.n	8004eb6 <_malloc_r+0xde>
 8004e1a:	6834      	ldr	r4, [r6, #0]
 8004e1c:	4626      	mov	r6, r4
 8004e1e:	2e00      	cmp	r6, #0
 8004e20:	d140      	bne.n	8004ea4 <_malloc_r+0xcc>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	4631      	mov	r1, r6
 8004e26:	4638      	mov	r0, r7
 8004e28:	eb04 0803 	add.w	r8, r4, r3
 8004e2c:	f000 fb38 	bl	80054a0 <_sbrk_r>
 8004e30:	4580      	cmp	r8, r0
 8004e32:	d13a      	bne.n	8004eaa <_malloc_r+0xd2>
 8004e34:	6821      	ldr	r1, [r4, #0]
 8004e36:	3503      	adds	r5, #3
 8004e38:	1a6d      	subs	r5, r5, r1
 8004e3a:	f025 0503 	bic.w	r5, r5, #3
 8004e3e:	3508      	adds	r5, #8
 8004e40:	2d0c      	cmp	r5, #12
 8004e42:	bf38      	it	cc
 8004e44:	250c      	movcc	r5, #12
 8004e46:	4629      	mov	r1, r5
 8004e48:	4638      	mov	r0, r7
 8004e4a:	f7ff ffa5 	bl	8004d98 <sbrk_aligned>
 8004e4e:	3001      	adds	r0, #1
 8004e50:	d02b      	beq.n	8004eaa <_malloc_r+0xd2>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	442b      	add	r3, r5
 8004e56:	6023      	str	r3, [r4, #0]
 8004e58:	e00e      	b.n	8004e78 <_malloc_r+0xa0>
 8004e5a:	6822      	ldr	r2, [r4, #0]
 8004e5c:	1b52      	subs	r2, r2, r5
 8004e5e:	d41e      	bmi.n	8004e9e <_malloc_r+0xc6>
 8004e60:	2a0b      	cmp	r2, #11
 8004e62:	d916      	bls.n	8004e92 <_malloc_r+0xba>
 8004e64:	1961      	adds	r1, r4, r5
 8004e66:	42a3      	cmp	r3, r4
 8004e68:	6025      	str	r5, [r4, #0]
 8004e6a:	bf18      	it	ne
 8004e6c:	6059      	strne	r1, [r3, #4]
 8004e6e:	6863      	ldr	r3, [r4, #4]
 8004e70:	bf08      	it	eq
 8004e72:	6031      	streq	r1, [r6, #0]
 8004e74:	5162      	str	r2, [r4, r5]
 8004e76:	604b      	str	r3, [r1, #4]
 8004e78:	4638      	mov	r0, r7
 8004e7a:	f104 060b 	add.w	r6, r4, #11
 8004e7e:	f000 fb4f 	bl	8005520 <__malloc_unlock>
 8004e82:	f026 0607 	bic.w	r6, r6, #7
 8004e86:	1d23      	adds	r3, r4, #4
 8004e88:	1af2      	subs	r2, r6, r3
 8004e8a:	d0b6      	beq.n	8004dfa <_malloc_r+0x22>
 8004e8c:	1b9b      	subs	r3, r3, r6
 8004e8e:	50a3      	str	r3, [r4, r2]
 8004e90:	e7b3      	b.n	8004dfa <_malloc_r+0x22>
 8004e92:	6862      	ldr	r2, [r4, #4]
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	bf0c      	ite	eq
 8004e98:	6032      	streq	r2, [r6, #0]
 8004e9a:	605a      	strne	r2, [r3, #4]
 8004e9c:	e7ec      	b.n	8004e78 <_malloc_r+0xa0>
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	6864      	ldr	r4, [r4, #4]
 8004ea2:	e7b2      	b.n	8004e0a <_malloc_r+0x32>
 8004ea4:	4634      	mov	r4, r6
 8004ea6:	6876      	ldr	r6, [r6, #4]
 8004ea8:	e7b9      	b.n	8004e1e <_malloc_r+0x46>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	4638      	mov	r0, r7
 8004eb0:	f000 fb36 	bl	8005520 <__malloc_unlock>
 8004eb4:	e7a1      	b.n	8004dfa <_malloc_r+0x22>
 8004eb6:	6025      	str	r5, [r4, #0]
 8004eb8:	e7de      	b.n	8004e78 <_malloc_r+0xa0>
 8004eba:	bf00      	nop
 8004ebc:	200005ac 	.word	0x200005ac

08004ec0 <__ssputs_r>:
 8004ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec4:	688e      	ldr	r6, [r1, #8]
 8004ec6:	429e      	cmp	r6, r3
 8004ec8:	4682      	mov	sl, r0
 8004eca:	460c      	mov	r4, r1
 8004ecc:	4690      	mov	r8, r2
 8004ece:	461f      	mov	r7, r3
 8004ed0:	d838      	bhi.n	8004f44 <__ssputs_r+0x84>
 8004ed2:	898a      	ldrh	r2, [r1, #12]
 8004ed4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ed8:	d032      	beq.n	8004f40 <__ssputs_r+0x80>
 8004eda:	6825      	ldr	r5, [r4, #0]
 8004edc:	6909      	ldr	r1, [r1, #16]
 8004ede:	eba5 0901 	sub.w	r9, r5, r1
 8004ee2:	6965      	ldr	r5, [r4, #20]
 8004ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ee8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004eec:	3301      	adds	r3, #1
 8004eee:	444b      	add	r3, r9
 8004ef0:	106d      	asrs	r5, r5, #1
 8004ef2:	429d      	cmp	r5, r3
 8004ef4:	bf38      	it	cc
 8004ef6:	461d      	movcc	r5, r3
 8004ef8:	0553      	lsls	r3, r2, #21
 8004efa:	d531      	bpl.n	8004f60 <__ssputs_r+0xa0>
 8004efc:	4629      	mov	r1, r5
 8004efe:	f7ff ff6b 	bl	8004dd8 <_malloc_r>
 8004f02:	4606      	mov	r6, r0
 8004f04:	b950      	cbnz	r0, 8004f1c <__ssputs_r+0x5c>
 8004f06:	230c      	movs	r3, #12
 8004f08:	f8ca 3000 	str.w	r3, [sl]
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1c:	6921      	ldr	r1, [r4, #16]
 8004f1e:	464a      	mov	r2, r9
 8004f20:	f000 fad0 	bl	80054c4 <memcpy>
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2e:	81a3      	strh	r3, [r4, #12]
 8004f30:	6126      	str	r6, [r4, #16]
 8004f32:	6165      	str	r5, [r4, #20]
 8004f34:	444e      	add	r6, r9
 8004f36:	eba5 0509 	sub.w	r5, r5, r9
 8004f3a:	6026      	str	r6, [r4, #0]
 8004f3c:	60a5      	str	r5, [r4, #8]
 8004f3e:	463e      	mov	r6, r7
 8004f40:	42be      	cmp	r6, r7
 8004f42:	d900      	bls.n	8004f46 <__ssputs_r+0x86>
 8004f44:	463e      	mov	r6, r7
 8004f46:	6820      	ldr	r0, [r4, #0]
 8004f48:	4632      	mov	r2, r6
 8004f4a:	4641      	mov	r1, r8
 8004f4c:	f000 fac8 	bl	80054e0 <memmove>
 8004f50:	68a3      	ldr	r3, [r4, #8]
 8004f52:	1b9b      	subs	r3, r3, r6
 8004f54:	60a3      	str	r3, [r4, #8]
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	4433      	add	r3, r6
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	e7db      	b.n	8004f18 <__ssputs_r+0x58>
 8004f60:	462a      	mov	r2, r5
 8004f62:	f000 fae3 	bl	800552c <_realloc_r>
 8004f66:	4606      	mov	r6, r0
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d1e1      	bne.n	8004f30 <__ssputs_r+0x70>
 8004f6c:	6921      	ldr	r1, [r4, #16]
 8004f6e:	4650      	mov	r0, sl
 8004f70:	f7ff fec6 	bl	8004d00 <_free_r>
 8004f74:	e7c7      	b.n	8004f06 <__ssputs_r+0x46>
	...

08004f78 <_svfiprintf_r>:
 8004f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7c:	4698      	mov	r8, r3
 8004f7e:	898b      	ldrh	r3, [r1, #12]
 8004f80:	061b      	lsls	r3, r3, #24
 8004f82:	b09d      	sub	sp, #116	; 0x74
 8004f84:	4607      	mov	r7, r0
 8004f86:	460d      	mov	r5, r1
 8004f88:	4614      	mov	r4, r2
 8004f8a:	d50e      	bpl.n	8004faa <_svfiprintf_r+0x32>
 8004f8c:	690b      	ldr	r3, [r1, #16]
 8004f8e:	b963      	cbnz	r3, 8004faa <_svfiprintf_r+0x32>
 8004f90:	2140      	movs	r1, #64	; 0x40
 8004f92:	f7ff ff21 	bl	8004dd8 <_malloc_r>
 8004f96:	6028      	str	r0, [r5, #0]
 8004f98:	6128      	str	r0, [r5, #16]
 8004f9a:	b920      	cbnz	r0, 8004fa6 <_svfiprintf_r+0x2e>
 8004f9c:	230c      	movs	r3, #12
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa4:	e0d1      	b.n	800514a <_svfiprintf_r+0x1d2>
 8004fa6:	2340      	movs	r3, #64	; 0x40
 8004fa8:	616b      	str	r3, [r5, #20]
 8004faa:	2300      	movs	r3, #0
 8004fac:	9309      	str	r3, [sp, #36]	; 0x24
 8004fae:	2320      	movs	r3, #32
 8004fb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fb8:	2330      	movs	r3, #48	; 0x30
 8004fba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005164 <_svfiprintf_r+0x1ec>
 8004fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fc2:	f04f 0901 	mov.w	r9, #1
 8004fc6:	4623      	mov	r3, r4
 8004fc8:	469a      	mov	sl, r3
 8004fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fce:	b10a      	cbz	r2, 8004fd4 <_svfiprintf_r+0x5c>
 8004fd0:	2a25      	cmp	r2, #37	; 0x25
 8004fd2:	d1f9      	bne.n	8004fc8 <_svfiprintf_r+0x50>
 8004fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8004fd8:	d00b      	beq.n	8004ff2 <_svfiprintf_r+0x7a>
 8004fda:	465b      	mov	r3, fp
 8004fdc:	4622      	mov	r2, r4
 8004fde:	4629      	mov	r1, r5
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	f7ff ff6d 	bl	8004ec0 <__ssputs_r>
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	f000 80aa 	beq.w	8005140 <_svfiprintf_r+0x1c8>
 8004fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fee:	445a      	add	r2, fp
 8004ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 80a2 	beq.w	8005140 <_svfiprintf_r+0x1c8>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8005002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005006:	f10a 0a01 	add.w	sl, sl, #1
 800500a:	9304      	str	r3, [sp, #16]
 800500c:	9307      	str	r3, [sp, #28]
 800500e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005012:	931a      	str	r3, [sp, #104]	; 0x68
 8005014:	4654      	mov	r4, sl
 8005016:	2205      	movs	r2, #5
 8005018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800501c:	4851      	ldr	r0, [pc, #324]	; (8005164 <_svfiprintf_r+0x1ec>)
 800501e:	f7fb f8df 	bl	80001e0 <memchr>
 8005022:	9a04      	ldr	r2, [sp, #16]
 8005024:	b9d8      	cbnz	r0, 800505e <_svfiprintf_r+0xe6>
 8005026:	06d0      	lsls	r0, r2, #27
 8005028:	bf44      	itt	mi
 800502a:	2320      	movmi	r3, #32
 800502c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005030:	0711      	lsls	r1, r2, #28
 8005032:	bf44      	itt	mi
 8005034:	232b      	movmi	r3, #43	; 0x2b
 8005036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800503a:	f89a 3000 	ldrb.w	r3, [sl]
 800503e:	2b2a      	cmp	r3, #42	; 0x2a
 8005040:	d015      	beq.n	800506e <_svfiprintf_r+0xf6>
 8005042:	9a07      	ldr	r2, [sp, #28]
 8005044:	4654      	mov	r4, sl
 8005046:	2000      	movs	r0, #0
 8005048:	f04f 0c0a 	mov.w	ip, #10
 800504c:	4621      	mov	r1, r4
 800504e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005052:	3b30      	subs	r3, #48	; 0x30
 8005054:	2b09      	cmp	r3, #9
 8005056:	d94e      	bls.n	80050f6 <_svfiprintf_r+0x17e>
 8005058:	b1b0      	cbz	r0, 8005088 <_svfiprintf_r+0x110>
 800505a:	9207      	str	r2, [sp, #28]
 800505c:	e014      	b.n	8005088 <_svfiprintf_r+0x110>
 800505e:	eba0 0308 	sub.w	r3, r0, r8
 8005062:	fa09 f303 	lsl.w	r3, r9, r3
 8005066:	4313      	orrs	r3, r2
 8005068:	9304      	str	r3, [sp, #16]
 800506a:	46a2      	mov	sl, r4
 800506c:	e7d2      	b.n	8005014 <_svfiprintf_r+0x9c>
 800506e:	9b03      	ldr	r3, [sp, #12]
 8005070:	1d19      	adds	r1, r3, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	9103      	str	r1, [sp, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	bfbb      	ittet	lt
 800507a:	425b      	neglt	r3, r3
 800507c:	f042 0202 	orrlt.w	r2, r2, #2
 8005080:	9307      	strge	r3, [sp, #28]
 8005082:	9307      	strlt	r3, [sp, #28]
 8005084:	bfb8      	it	lt
 8005086:	9204      	strlt	r2, [sp, #16]
 8005088:	7823      	ldrb	r3, [r4, #0]
 800508a:	2b2e      	cmp	r3, #46	; 0x2e
 800508c:	d10c      	bne.n	80050a8 <_svfiprintf_r+0x130>
 800508e:	7863      	ldrb	r3, [r4, #1]
 8005090:	2b2a      	cmp	r3, #42	; 0x2a
 8005092:	d135      	bne.n	8005100 <_svfiprintf_r+0x188>
 8005094:	9b03      	ldr	r3, [sp, #12]
 8005096:	1d1a      	adds	r2, r3, #4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	9203      	str	r2, [sp, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	bfb8      	it	lt
 80050a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80050a4:	3402      	adds	r4, #2
 80050a6:	9305      	str	r3, [sp, #20]
 80050a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005174 <_svfiprintf_r+0x1fc>
 80050ac:	7821      	ldrb	r1, [r4, #0]
 80050ae:	2203      	movs	r2, #3
 80050b0:	4650      	mov	r0, sl
 80050b2:	f7fb f895 	bl	80001e0 <memchr>
 80050b6:	b140      	cbz	r0, 80050ca <_svfiprintf_r+0x152>
 80050b8:	2340      	movs	r3, #64	; 0x40
 80050ba:	eba0 000a 	sub.w	r0, r0, sl
 80050be:	fa03 f000 	lsl.w	r0, r3, r0
 80050c2:	9b04      	ldr	r3, [sp, #16]
 80050c4:	4303      	orrs	r3, r0
 80050c6:	3401      	adds	r4, #1
 80050c8:	9304      	str	r3, [sp, #16]
 80050ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ce:	4826      	ldr	r0, [pc, #152]	; (8005168 <_svfiprintf_r+0x1f0>)
 80050d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050d4:	2206      	movs	r2, #6
 80050d6:	f7fb f883 	bl	80001e0 <memchr>
 80050da:	2800      	cmp	r0, #0
 80050dc:	d038      	beq.n	8005150 <_svfiprintf_r+0x1d8>
 80050de:	4b23      	ldr	r3, [pc, #140]	; (800516c <_svfiprintf_r+0x1f4>)
 80050e0:	bb1b      	cbnz	r3, 800512a <_svfiprintf_r+0x1b2>
 80050e2:	9b03      	ldr	r3, [sp, #12]
 80050e4:	3307      	adds	r3, #7
 80050e6:	f023 0307 	bic.w	r3, r3, #7
 80050ea:	3308      	adds	r3, #8
 80050ec:	9303      	str	r3, [sp, #12]
 80050ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f0:	4433      	add	r3, r6
 80050f2:	9309      	str	r3, [sp, #36]	; 0x24
 80050f4:	e767      	b.n	8004fc6 <_svfiprintf_r+0x4e>
 80050f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80050fa:	460c      	mov	r4, r1
 80050fc:	2001      	movs	r0, #1
 80050fe:	e7a5      	b.n	800504c <_svfiprintf_r+0xd4>
 8005100:	2300      	movs	r3, #0
 8005102:	3401      	adds	r4, #1
 8005104:	9305      	str	r3, [sp, #20]
 8005106:	4619      	mov	r1, r3
 8005108:	f04f 0c0a 	mov.w	ip, #10
 800510c:	4620      	mov	r0, r4
 800510e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005112:	3a30      	subs	r2, #48	; 0x30
 8005114:	2a09      	cmp	r2, #9
 8005116:	d903      	bls.n	8005120 <_svfiprintf_r+0x1a8>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0c5      	beq.n	80050a8 <_svfiprintf_r+0x130>
 800511c:	9105      	str	r1, [sp, #20]
 800511e:	e7c3      	b.n	80050a8 <_svfiprintf_r+0x130>
 8005120:	fb0c 2101 	mla	r1, ip, r1, r2
 8005124:	4604      	mov	r4, r0
 8005126:	2301      	movs	r3, #1
 8005128:	e7f0      	b.n	800510c <_svfiprintf_r+0x194>
 800512a:	ab03      	add	r3, sp, #12
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	462a      	mov	r2, r5
 8005130:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <_svfiprintf_r+0x1f8>)
 8005132:	a904      	add	r1, sp, #16
 8005134:	4638      	mov	r0, r7
 8005136:	f3af 8000 	nop.w
 800513a:	1c42      	adds	r2, r0, #1
 800513c:	4606      	mov	r6, r0
 800513e:	d1d6      	bne.n	80050ee <_svfiprintf_r+0x176>
 8005140:	89ab      	ldrh	r3, [r5, #12]
 8005142:	065b      	lsls	r3, r3, #25
 8005144:	f53f af2c 	bmi.w	8004fa0 <_svfiprintf_r+0x28>
 8005148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800514a:	b01d      	add	sp, #116	; 0x74
 800514c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005150:	ab03      	add	r3, sp, #12
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	462a      	mov	r2, r5
 8005156:	4b06      	ldr	r3, [pc, #24]	; (8005170 <_svfiprintf_r+0x1f8>)
 8005158:	a904      	add	r1, sp, #16
 800515a:	4638      	mov	r0, r7
 800515c:	f000 f87a 	bl	8005254 <_printf_i>
 8005160:	e7eb      	b.n	800513a <_svfiprintf_r+0x1c2>
 8005162:	bf00      	nop
 8005164:	0800566c 	.word	0x0800566c
 8005168:	08005676 	.word	0x08005676
 800516c:	00000000 	.word	0x00000000
 8005170:	08004ec1 	.word	0x08004ec1
 8005174:	08005672 	.word	0x08005672

08005178 <_printf_common>:
 8005178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800517c:	4616      	mov	r6, r2
 800517e:	4699      	mov	r9, r3
 8005180:	688a      	ldr	r2, [r1, #8]
 8005182:	690b      	ldr	r3, [r1, #16]
 8005184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005188:	4293      	cmp	r3, r2
 800518a:	bfb8      	it	lt
 800518c:	4613      	movlt	r3, r2
 800518e:	6033      	str	r3, [r6, #0]
 8005190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005194:	4607      	mov	r7, r0
 8005196:	460c      	mov	r4, r1
 8005198:	b10a      	cbz	r2, 800519e <_printf_common+0x26>
 800519a:	3301      	adds	r3, #1
 800519c:	6033      	str	r3, [r6, #0]
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	0699      	lsls	r1, r3, #26
 80051a2:	bf42      	ittt	mi
 80051a4:	6833      	ldrmi	r3, [r6, #0]
 80051a6:	3302      	addmi	r3, #2
 80051a8:	6033      	strmi	r3, [r6, #0]
 80051aa:	6825      	ldr	r5, [r4, #0]
 80051ac:	f015 0506 	ands.w	r5, r5, #6
 80051b0:	d106      	bne.n	80051c0 <_printf_common+0x48>
 80051b2:	f104 0a19 	add.w	sl, r4, #25
 80051b6:	68e3      	ldr	r3, [r4, #12]
 80051b8:	6832      	ldr	r2, [r6, #0]
 80051ba:	1a9b      	subs	r3, r3, r2
 80051bc:	42ab      	cmp	r3, r5
 80051be:	dc26      	bgt.n	800520e <_printf_common+0x96>
 80051c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051c4:	1e13      	subs	r3, r2, #0
 80051c6:	6822      	ldr	r2, [r4, #0]
 80051c8:	bf18      	it	ne
 80051ca:	2301      	movne	r3, #1
 80051cc:	0692      	lsls	r2, r2, #26
 80051ce:	d42b      	bmi.n	8005228 <_printf_common+0xb0>
 80051d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051d4:	4649      	mov	r1, r9
 80051d6:	4638      	mov	r0, r7
 80051d8:	47c0      	blx	r8
 80051da:	3001      	adds	r0, #1
 80051dc:	d01e      	beq.n	800521c <_printf_common+0xa4>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	68e5      	ldr	r5, [r4, #12]
 80051e2:	6832      	ldr	r2, [r6, #0]
 80051e4:	f003 0306 	and.w	r3, r3, #6
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	bf08      	it	eq
 80051ec:	1aad      	subeq	r5, r5, r2
 80051ee:	68a3      	ldr	r3, [r4, #8]
 80051f0:	6922      	ldr	r2, [r4, #16]
 80051f2:	bf0c      	ite	eq
 80051f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051f8:	2500      	movne	r5, #0
 80051fa:	4293      	cmp	r3, r2
 80051fc:	bfc4      	itt	gt
 80051fe:	1a9b      	subgt	r3, r3, r2
 8005200:	18ed      	addgt	r5, r5, r3
 8005202:	2600      	movs	r6, #0
 8005204:	341a      	adds	r4, #26
 8005206:	42b5      	cmp	r5, r6
 8005208:	d11a      	bne.n	8005240 <_printf_common+0xc8>
 800520a:	2000      	movs	r0, #0
 800520c:	e008      	b.n	8005220 <_printf_common+0xa8>
 800520e:	2301      	movs	r3, #1
 8005210:	4652      	mov	r2, sl
 8005212:	4649      	mov	r1, r9
 8005214:	4638      	mov	r0, r7
 8005216:	47c0      	blx	r8
 8005218:	3001      	adds	r0, #1
 800521a:	d103      	bne.n	8005224 <_printf_common+0xac>
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
 8005220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005224:	3501      	adds	r5, #1
 8005226:	e7c6      	b.n	80051b6 <_printf_common+0x3e>
 8005228:	18e1      	adds	r1, r4, r3
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	2030      	movs	r0, #48	; 0x30
 800522e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005232:	4422      	add	r2, r4
 8005234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800523c:	3302      	adds	r3, #2
 800523e:	e7c7      	b.n	80051d0 <_printf_common+0x58>
 8005240:	2301      	movs	r3, #1
 8005242:	4622      	mov	r2, r4
 8005244:	4649      	mov	r1, r9
 8005246:	4638      	mov	r0, r7
 8005248:	47c0      	blx	r8
 800524a:	3001      	adds	r0, #1
 800524c:	d0e6      	beq.n	800521c <_printf_common+0xa4>
 800524e:	3601      	adds	r6, #1
 8005250:	e7d9      	b.n	8005206 <_printf_common+0x8e>
	...

08005254 <_printf_i>:
 8005254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005258:	7e0f      	ldrb	r7, [r1, #24]
 800525a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800525c:	2f78      	cmp	r7, #120	; 0x78
 800525e:	4691      	mov	r9, r2
 8005260:	4680      	mov	r8, r0
 8005262:	460c      	mov	r4, r1
 8005264:	469a      	mov	sl, r3
 8005266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800526a:	d807      	bhi.n	800527c <_printf_i+0x28>
 800526c:	2f62      	cmp	r7, #98	; 0x62
 800526e:	d80a      	bhi.n	8005286 <_printf_i+0x32>
 8005270:	2f00      	cmp	r7, #0
 8005272:	f000 80d8 	beq.w	8005426 <_printf_i+0x1d2>
 8005276:	2f58      	cmp	r7, #88	; 0x58
 8005278:	f000 80a3 	beq.w	80053c2 <_printf_i+0x16e>
 800527c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005284:	e03a      	b.n	80052fc <_printf_i+0xa8>
 8005286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800528a:	2b15      	cmp	r3, #21
 800528c:	d8f6      	bhi.n	800527c <_printf_i+0x28>
 800528e:	a101      	add	r1, pc, #4	; (adr r1, 8005294 <_printf_i+0x40>)
 8005290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005294:	080052ed 	.word	0x080052ed
 8005298:	08005301 	.word	0x08005301
 800529c:	0800527d 	.word	0x0800527d
 80052a0:	0800527d 	.word	0x0800527d
 80052a4:	0800527d 	.word	0x0800527d
 80052a8:	0800527d 	.word	0x0800527d
 80052ac:	08005301 	.word	0x08005301
 80052b0:	0800527d 	.word	0x0800527d
 80052b4:	0800527d 	.word	0x0800527d
 80052b8:	0800527d 	.word	0x0800527d
 80052bc:	0800527d 	.word	0x0800527d
 80052c0:	0800540d 	.word	0x0800540d
 80052c4:	08005331 	.word	0x08005331
 80052c8:	080053ef 	.word	0x080053ef
 80052cc:	0800527d 	.word	0x0800527d
 80052d0:	0800527d 	.word	0x0800527d
 80052d4:	0800542f 	.word	0x0800542f
 80052d8:	0800527d 	.word	0x0800527d
 80052dc:	08005331 	.word	0x08005331
 80052e0:	0800527d 	.word	0x0800527d
 80052e4:	0800527d 	.word	0x0800527d
 80052e8:	080053f7 	.word	0x080053f7
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	1d1a      	adds	r2, r3, #4
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	602a      	str	r2, [r5, #0]
 80052f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0a3      	b.n	8005448 <_printf_i+0x1f4>
 8005300:	6820      	ldr	r0, [r4, #0]
 8005302:	6829      	ldr	r1, [r5, #0]
 8005304:	0606      	lsls	r6, r0, #24
 8005306:	f101 0304 	add.w	r3, r1, #4
 800530a:	d50a      	bpl.n	8005322 <_printf_i+0xce>
 800530c:	680e      	ldr	r6, [r1, #0]
 800530e:	602b      	str	r3, [r5, #0]
 8005310:	2e00      	cmp	r6, #0
 8005312:	da03      	bge.n	800531c <_printf_i+0xc8>
 8005314:	232d      	movs	r3, #45	; 0x2d
 8005316:	4276      	negs	r6, r6
 8005318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800531c:	485e      	ldr	r0, [pc, #376]	; (8005498 <_printf_i+0x244>)
 800531e:	230a      	movs	r3, #10
 8005320:	e019      	b.n	8005356 <_printf_i+0x102>
 8005322:	680e      	ldr	r6, [r1, #0]
 8005324:	602b      	str	r3, [r5, #0]
 8005326:	f010 0f40 	tst.w	r0, #64	; 0x40
 800532a:	bf18      	it	ne
 800532c:	b236      	sxthne	r6, r6
 800532e:	e7ef      	b.n	8005310 <_printf_i+0xbc>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	6820      	ldr	r0, [r4, #0]
 8005334:	1d19      	adds	r1, r3, #4
 8005336:	6029      	str	r1, [r5, #0]
 8005338:	0601      	lsls	r1, r0, #24
 800533a:	d501      	bpl.n	8005340 <_printf_i+0xec>
 800533c:	681e      	ldr	r6, [r3, #0]
 800533e:	e002      	b.n	8005346 <_printf_i+0xf2>
 8005340:	0646      	lsls	r6, r0, #25
 8005342:	d5fb      	bpl.n	800533c <_printf_i+0xe8>
 8005344:	881e      	ldrh	r6, [r3, #0]
 8005346:	4854      	ldr	r0, [pc, #336]	; (8005498 <_printf_i+0x244>)
 8005348:	2f6f      	cmp	r7, #111	; 0x6f
 800534a:	bf0c      	ite	eq
 800534c:	2308      	moveq	r3, #8
 800534e:	230a      	movne	r3, #10
 8005350:	2100      	movs	r1, #0
 8005352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005356:	6865      	ldr	r5, [r4, #4]
 8005358:	60a5      	str	r5, [r4, #8]
 800535a:	2d00      	cmp	r5, #0
 800535c:	bfa2      	ittt	ge
 800535e:	6821      	ldrge	r1, [r4, #0]
 8005360:	f021 0104 	bicge.w	r1, r1, #4
 8005364:	6021      	strge	r1, [r4, #0]
 8005366:	b90e      	cbnz	r6, 800536c <_printf_i+0x118>
 8005368:	2d00      	cmp	r5, #0
 800536a:	d04d      	beq.n	8005408 <_printf_i+0x1b4>
 800536c:	4615      	mov	r5, r2
 800536e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005372:	fb03 6711 	mls	r7, r3, r1, r6
 8005376:	5dc7      	ldrb	r7, [r0, r7]
 8005378:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800537c:	4637      	mov	r7, r6
 800537e:	42bb      	cmp	r3, r7
 8005380:	460e      	mov	r6, r1
 8005382:	d9f4      	bls.n	800536e <_printf_i+0x11a>
 8005384:	2b08      	cmp	r3, #8
 8005386:	d10b      	bne.n	80053a0 <_printf_i+0x14c>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	07de      	lsls	r6, r3, #31
 800538c:	d508      	bpl.n	80053a0 <_printf_i+0x14c>
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	6861      	ldr	r1, [r4, #4]
 8005392:	4299      	cmp	r1, r3
 8005394:	bfde      	ittt	le
 8005396:	2330      	movle	r3, #48	; 0x30
 8005398:	f805 3c01 	strble.w	r3, [r5, #-1]
 800539c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053a0:	1b52      	subs	r2, r2, r5
 80053a2:	6122      	str	r2, [r4, #16]
 80053a4:	f8cd a000 	str.w	sl, [sp]
 80053a8:	464b      	mov	r3, r9
 80053aa:	aa03      	add	r2, sp, #12
 80053ac:	4621      	mov	r1, r4
 80053ae:	4640      	mov	r0, r8
 80053b0:	f7ff fee2 	bl	8005178 <_printf_common>
 80053b4:	3001      	adds	r0, #1
 80053b6:	d14c      	bne.n	8005452 <_printf_i+0x1fe>
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295
 80053bc:	b004      	add	sp, #16
 80053be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c2:	4835      	ldr	r0, [pc, #212]	; (8005498 <_printf_i+0x244>)
 80053c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053c8:	6829      	ldr	r1, [r5, #0]
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80053d0:	6029      	str	r1, [r5, #0]
 80053d2:	061d      	lsls	r5, r3, #24
 80053d4:	d514      	bpl.n	8005400 <_printf_i+0x1ac>
 80053d6:	07df      	lsls	r7, r3, #31
 80053d8:	bf44      	itt	mi
 80053da:	f043 0320 	orrmi.w	r3, r3, #32
 80053de:	6023      	strmi	r3, [r4, #0]
 80053e0:	b91e      	cbnz	r6, 80053ea <_printf_i+0x196>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	f023 0320 	bic.w	r3, r3, #32
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	2310      	movs	r3, #16
 80053ec:	e7b0      	b.n	8005350 <_printf_i+0xfc>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	f043 0320 	orr.w	r3, r3, #32
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	2378      	movs	r3, #120	; 0x78
 80053f8:	4828      	ldr	r0, [pc, #160]	; (800549c <_printf_i+0x248>)
 80053fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053fe:	e7e3      	b.n	80053c8 <_printf_i+0x174>
 8005400:	0659      	lsls	r1, r3, #25
 8005402:	bf48      	it	mi
 8005404:	b2b6      	uxthmi	r6, r6
 8005406:	e7e6      	b.n	80053d6 <_printf_i+0x182>
 8005408:	4615      	mov	r5, r2
 800540a:	e7bb      	b.n	8005384 <_printf_i+0x130>
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	6826      	ldr	r6, [r4, #0]
 8005410:	6961      	ldr	r1, [r4, #20]
 8005412:	1d18      	adds	r0, r3, #4
 8005414:	6028      	str	r0, [r5, #0]
 8005416:	0635      	lsls	r5, r6, #24
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	d501      	bpl.n	8005420 <_printf_i+0x1cc>
 800541c:	6019      	str	r1, [r3, #0]
 800541e:	e002      	b.n	8005426 <_printf_i+0x1d2>
 8005420:	0670      	lsls	r0, r6, #25
 8005422:	d5fb      	bpl.n	800541c <_printf_i+0x1c8>
 8005424:	8019      	strh	r1, [r3, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	6123      	str	r3, [r4, #16]
 800542a:	4615      	mov	r5, r2
 800542c:	e7ba      	b.n	80053a4 <_printf_i+0x150>
 800542e:	682b      	ldr	r3, [r5, #0]
 8005430:	1d1a      	adds	r2, r3, #4
 8005432:	602a      	str	r2, [r5, #0]
 8005434:	681d      	ldr	r5, [r3, #0]
 8005436:	6862      	ldr	r2, [r4, #4]
 8005438:	2100      	movs	r1, #0
 800543a:	4628      	mov	r0, r5
 800543c:	f7fa fed0 	bl	80001e0 <memchr>
 8005440:	b108      	cbz	r0, 8005446 <_printf_i+0x1f2>
 8005442:	1b40      	subs	r0, r0, r5
 8005444:	6060      	str	r0, [r4, #4]
 8005446:	6863      	ldr	r3, [r4, #4]
 8005448:	6123      	str	r3, [r4, #16]
 800544a:	2300      	movs	r3, #0
 800544c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005450:	e7a8      	b.n	80053a4 <_printf_i+0x150>
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	462a      	mov	r2, r5
 8005456:	4649      	mov	r1, r9
 8005458:	4640      	mov	r0, r8
 800545a:	47d0      	blx	sl
 800545c:	3001      	adds	r0, #1
 800545e:	d0ab      	beq.n	80053b8 <_printf_i+0x164>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	079b      	lsls	r3, r3, #30
 8005464:	d413      	bmi.n	800548e <_printf_i+0x23a>
 8005466:	68e0      	ldr	r0, [r4, #12]
 8005468:	9b03      	ldr	r3, [sp, #12]
 800546a:	4298      	cmp	r0, r3
 800546c:	bfb8      	it	lt
 800546e:	4618      	movlt	r0, r3
 8005470:	e7a4      	b.n	80053bc <_printf_i+0x168>
 8005472:	2301      	movs	r3, #1
 8005474:	4632      	mov	r2, r6
 8005476:	4649      	mov	r1, r9
 8005478:	4640      	mov	r0, r8
 800547a:	47d0      	blx	sl
 800547c:	3001      	adds	r0, #1
 800547e:	d09b      	beq.n	80053b8 <_printf_i+0x164>
 8005480:	3501      	adds	r5, #1
 8005482:	68e3      	ldr	r3, [r4, #12]
 8005484:	9903      	ldr	r1, [sp, #12]
 8005486:	1a5b      	subs	r3, r3, r1
 8005488:	42ab      	cmp	r3, r5
 800548a:	dcf2      	bgt.n	8005472 <_printf_i+0x21e>
 800548c:	e7eb      	b.n	8005466 <_printf_i+0x212>
 800548e:	2500      	movs	r5, #0
 8005490:	f104 0619 	add.w	r6, r4, #25
 8005494:	e7f5      	b.n	8005482 <_printf_i+0x22e>
 8005496:	bf00      	nop
 8005498:	0800567d 	.word	0x0800567d
 800549c:	0800568e 	.word	0x0800568e

080054a0 <_sbrk_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4d06      	ldr	r5, [pc, #24]	; (80054bc <_sbrk_r+0x1c>)
 80054a4:	2300      	movs	r3, #0
 80054a6:	4604      	mov	r4, r0
 80054a8:	4608      	mov	r0, r1
 80054aa:	602b      	str	r3, [r5, #0]
 80054ac:	f7fc fd0a 	bl	8001ec4 <_sbrk>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_sbrk_r+0x1a>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_sbrk_r+0x1a>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	200005b8 	.word	0x200005b8

080054c0 <__retarget_lock_acquire_recursive>:
 80054c0:	4770      	bx	lr

080054c2 <__retarget_lock_release_recursive>:
 80054c2:	4770      	bx	lr

080054c4 <memcpy>:
 80054c4:	440a      	add	r2, r1
 80054c6:	4291      	cmp	r1, r2
 80054c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054cc:	d100      	bne.n	80054d0 <memcpy+0xc>
 80054ce:	4770      	bx	lr
 80054d0:	b510      	push	{r4, lr}
 80054d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054da:	4291      	cmp	r1, r2
 80054dc:	d1f9      	bne.n	80054d2 <memcpy+0xe>
 80054de:	bd10      	pop	{r4, pc}

080054e0 <memmove>:
 80054e0:	4288      	cmp	r0, r1
 80054e2:	b510      	push	{r4, lr}
 80054e4:	eb01 0402 	add.w	r4, r1, r2
 80054e8:	d902      	bls.n	80054f0 <memmove+0x10>
 80054ea:	4284      	cmp	r4, r0
 80054ec:	4623      	mov	r3, r4
 80054ee:	d807      	bhi.n	8005500 <memmove+0x20>
 80054f0:	1e43      	subs	r3, r0, #1
 80054f2:	42a1      	cmp	r1, r4
 80054f4:	d008      	beq.n	8005508 <memmove+0x28>
 80054f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054fe:	e7f8      	b.n	80054f2 <memmove+0x12>
 8005500:	4402      	add	r2, r0
 8005502:	4601      	mov	r1, r0
 8005504:	428a      	cmp	r2, r1
 8005506:	d100      	bne.n	800550a <memmove+0x2a>
 8005508:	bd10      	pop	{r4, pc}
 800550a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800550e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005512:	e7f7      	b.n	8005504 <memmove+0x24>

08005514 <__malloc_lock>:
 8005514:	4801      	ldr	r0, [pc, #4]	; (800551c <__malloc_lock+0x8>)
 8005516:	f7ff bfd3 	b.w	80054c0 <__retarget_lock_acquire_recursive>
 800551a:	bf00      	nop
 800551c:	200005b4 	.word	0x200005b4

08005520 <__malloc_unlock>:
 8005520:	4801      	ldr	r0, [pc, #4]	; (8005528 <__malloc_unlock+0x8>)
 8005522:	f7ff bfce 	b.w	80054c2 <__retarget_lock_release_recursive>
 8005526:	bf00      	nop
 8005528:	200005b4 	.word	0x200005b4

0800552c <_realloc_r>:
 800552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005530:	4680      	mov	r8, r0
 8005532:	4614      	mov	r4, r2
 8005534:	460e      	mov	r6, r1
 8005536:	b921      	cbnz	r1, 8005542 <_realloc_r+0x16>
 8005538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800553c:	4611      	mov	r1, r2
 800553e:	f7ff bc4b 	b.w	8004dd8 <_malloc_r>
 8005542:	b92a      	cbnz	r2, 8005550 <_realloc_r+0x24>
 8005544:	f7ff fbdc 	bl	8004d00 <_free_r>
 8005548:	4625      	mov	r5, r4
 800554a:	4628      	mov	r0, r5
 800554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005550:	f000 f81b 	bl	800558a <_malloc_usable_size_r>
 8005554:	4284      	cmp	r4, r0
 8005556:	4607      	mov	r7, r0
 8005558:	d802      	bhi.n	8005560 <_realloc_r+0x34>
 800555a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800555e:	d812      	bhi.n	8005586 <_realloc_r+0x5a>
 8005560:	4621      	mov	r1, r4
 8005562:	4640      	mov	r0, r8
 8005564:	f7ff fc38 	bl	8004dd8 <_malloc_r>
 8005568:	4605      	mov	r5, r0
 800556a:	2800      	cmp	r0, #0
 800556c:	d0ed      	beq.n	800554a <_realloc_r+0x1e>
 800556e:	42bc      	cmp	r4, r7
 8005570:	4622      	mov	r2, r4
 8005572:	4631      	mov	r1, r6
 8005574:	bf28      	it	cs
 8005576:	463a      	movcs	r2, r7
 8005578:	f7ff ffa4 	bl	80054c4 <memcpy>
 800557c:	4631      	mov	r1, r6
 800557e:	4640      	mov	r0, r8
 8005580:	f7ff fbbe 	bl	8004d00 <_free_r>
 8005584:	e7e1      	b.n	800554a <_realloc_r+0x1e>
 8005586:	4635      	mov	r5, r6
 8005588:	e7df      	b.n	800554a <_realloc_r+0x1e>

0800558a <_malloc_usable_size_r>:
 800558a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800558e:	1f18      	subs	r0, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	bfbc      	itt	lt
 8005594:	580b      	ldrlt	r3, [r1, r0]
 8005596:	18c0      	addlt	r0, r0, r3
 8005598:	4770      	bx	lr
	...

0800559c <_init>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr

080055a8 <_fini>:
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	bf00      	nop
 80055ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ae:	bc08      	pop	{r3}
 80055b0:	469e      	mov	lr, r3
 80055b2:	4770      	bx	lr
