
Final-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006640  08006640  00016640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066a8  080066a8  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  080066a8  080066a8  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066a8  080066a8  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066ac  080066ac  000166ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080066b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          0000058c  200000b4  200000b4  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000640  20000640  000200b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c4bd  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a0  00000000  00000000  0003c5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0003f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001590  00000000  00000000  00040ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000205fa  00000000  00000000  00042588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c06a  00000000  00000000  00062b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4265  00000000  00000000  0007ebec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142e51  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060c4  00000000  00000000  00142ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b4 	.word	0x200000b4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006628 	.word	0x08006628

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b8 	.word	0x200000b8
 80001c4:	08006628 	.word	0x08006628

080001c8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08e      	sub	sp, #56	; 0x38
 80001cc:	af0a      	add	r7, sp, #40	; 0x28
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	4608      	mov	r0, r1
 80001d2:	4611      	mov	r1, r2
 80001d4:	461a      	mov	r2, r3
 80001d6:	4603      	mov	r3, r0
 80001d8:	817b      	strh	r3, [r7, #10]
 80001da:	460b      	mov	r3, r1
 80001dc:	813b      	strh	r3, [r7, #8]
 80001de:	4613      	mov	r3, r2
 80001e0:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80001e2:	4b1d      	ldr	r3, [pc, #116]	; (8000258 <LiquidCrystal+0x90>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d019      	beq.n	800021e <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80001ea:	8939      	ldrh	r1, [r7, #8]
 80001ec:	897a      	ldrh	r2, [r7, #10]
 80001ee:	2300      	movs	r3, #0
 80001f0:	9308      	str	r3, [sp, #32]
 80001f2:	2300      	movs	r3, #0
 80001f4:	9307      	str	r3, [sp, #28]
 80001f6:	2300      	movs	r3, #0
 80001f8:	9306      	str	r3, [sp, #24]
 80001fa:	2300      	movs	r3, #0
 80001fc:	9305      	str	r3, [sp, #20]
 80001fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000200:	9304      	str	r3, [sp, #16]
 8000202:	8c3b      	ldrh	r3, [r7, #32]
 8000204:	9303      	str	r3, [sp, #12]
 8000206:	8bbb      	ldrh	r3, [r7, #28]
 8000208:	9302      	str	r3, [sp, #8]
 800020a:	8b3b      	ldrh	r3, [r7, #24]
 800020c:	9301      	str	r3, [sp, #4]
 800020e:	88fb      	ldrh	r3, [r7, #6]
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	460b      	mov	r3, r1
 8000214:	68f9      	ldr	r1, [r7, #12]
 8000216:	2001      	movs	r0, #1
 8000218:	f000 f820 	bl	800025c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 800021c:	e018      	b.n	8000250 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800021e:	8939      	ldrh	r1, [r7, #8]
 8000220:	897a      	ldrh	r2, [r7, #10]
 8000222:	2300      	movs	r3, #0
 8000224:	9308      	str	r3, [sp, #32]
 8000226:	2300      	movs	r3, #0
 8000228:	9307      	str	r3, [sp, #28]
 800022a:	2300      	movs	r3, #0
 800022c:	9306      	str	r3, [sp, #24]
 800022e:	2300      	movs	r3, #0
 8000230:	9305      	str	r3, [sp, #20]
 8000232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000234:	9304      	str	r3, [sp, #16]
 8000236:	8c3b      	ldrh	r3, [r7, #32]
 8000238:	9303      	str	r3, [sp, #12]
 800023a:	8bbb      	ldrh	r3, [r7, #28]
 800023c:	9302      	str	r3, [sp, #8]
 800023e:	8b3b      	ldrh	r3, [r7, #24]
 8000240:	9301      	str	r3, [sp, #4]
 8000242:	88fb      	ldrh	r3, [r7, #6]
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	460b      	mov	r3, r1
 8000248:	68f9      	ldr	r1, [r7, #12]
 800024a:	2000      	movs	r0, #0
 800024c:	f000 f806 	bl	800025c <init>
}
 8000250:	bf00      	nop
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000000 	.word	0x20000000

0800025c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	60b9      	str	r1, [r7, #8]
 8000264:	4611      	mov	r1, r2
 8000266:	461a      	mov	r2, r3
 8000268:	4603      	mov	r3, r0
 800026a:	73fb      	strb	r3, [r7, #15]
 800026c:	460b      	mov	r3, r1
 800026e:	81bb      	strh	r3, [r7, #12]
 8000270:	4613      	mov	r3, r2
 8000272:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000274:	4a1a      	ldr	r2, [pc, #104]	; (80002e0 <init+0x84>)
 8000276:	89bb      	ldrh	r3, [r7, #12]
 8000278:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 800027a:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <init+0x88>)
 800027c:	88fb      	ldrh	r3, [r7, #6]
 800027e:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000280:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <init+0x8c>)
 8000282:	8b3b      	ldrh	r3, [r7, #24]
 8000284:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000286:	4a19      	ldr	r2, [pc, #100]	; (80002ec <init+0x90>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 800028c:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <init+0x94>)
 800028e:	8bbb      	ldrh	r3, [r7, #28]
 8000290:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000292:	4a17      	ldr	r2, [pc, #92]	; (80002f0 <init+0x94>)
 8000294:	8c3b      	ldrh	r3, [r7, #32]
 8000296:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000298:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <init+0x94>)
 800029a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800029c:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 800029e:	4a14      	ldr	r2, [pc, #80]	; (80002f0 <init+0x94>)
 80002a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80002a2:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 80002a4:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <init+0x94>)
 80002a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80002a8:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 80002aa:	4a11      	ldr	r2, [pc, #68]	; (80002f0 <init+0x94>)
 80002ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80002ae:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 80002b0:	4a0f      	ldr	r2, [pc, #60]	; (80002f0 <init+0x94>)
 80002b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80002b4:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 80002b6:	4a0e      	ldr	r2, [pc, #56]	; (80002f0 <init+0x94>)
 80002b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80002ba:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d003      	beq.n	80002ca <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <init+0x98>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	701a      	strb	r2, [r3, #0]
 80002c8:	e002      	b.n	80002d0 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <init+0x98>)
 80002cc:	2210      	movs	r2, #16
 80002ce:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 80002d0:	2102      	movs	r1, #2
 80002d2:	2010      	movs	r0, #16
 80002d4:	f000 f810 	bl	80002f8 <begin>
}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	200000d2 	.word	0x200000d2
 80002e4:	200000d4 	.word	0x200000d4
 80002e8:	200000d6 	.word	0x200000d6
 80002ec:	200000e8 	.word	0x200000e8
 80002f0:	200000d8 	.word	0x200000d8
 80002f4:	200000ec 	.word	0x200000ec

080002f8 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b088      	sub	sp, #32
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	460a      	mov	r2, r1
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	4613      	mov	r3, r2
 8000306:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d906      	bls.n	800031c <begin+0x24>
    _displayfunction |= LCD_2LINE;
 800030e:	4b77      	ldr	r3, [pc, #476]	; (80004ec <begin+0x1f4>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4b74      	ldr	r3, [pc, #464]	; (80004ec <begin+0x1f4>)
 800031a:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 800031c:	4a74      	ldr	r2, [pc, #464]	; (80004f0 <begin+0x1f8>)
 800031e:	79bb      	ldrb	r3, [r7, #6]
 8000320:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000322:	79fa      	ldrb	r2, [r7, #7]
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	3340      	adds	r3, #64	; 0x40
 8000328:	2140      	movs	r1, #64	; 0x40
 800032a:	2000      	movs	r0, #0
 800032c:	f000 f988 	bl	8000640 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000330:	4b70      	ldr	r3, [pc, #448]	; (80004f4 <begin+0x1fc>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d009      	beq.n	800034c <begin+0x54>
 8000338:	79bb      	ldrb	r3, [r7, #6]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d106      	bne.n	800034c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 800033e:	4b6b      	ldr	r3, [pc, #428]	; (80004ec <begin+0x1f4>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	f043 0304 	orr.w	r3, r3, #4
 8000346:	b2da      	uxtb	r2, r3
 8000348:	4b68      	ldr	r3, [pc, #416]	; (80004ec <begin+0x1f4>)
 800034a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 800034c:	f000 f8e4 	bl	8000518 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000350:	2303      	movs	r3, #3
 8000352:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000354:	2301      	movs	r3, #1
 8000356:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000358:	4b67      	ldr	r3, [pc, #412]	; (80004f8 <begin+0x200>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d01b      	beq.n	8000398 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000360:	4b66      	ldr	r3, [pc, #408]	; (80004fc <begin+0x204>)
 8000362:	881a      	ldrh	r2, [r3, #0]
 8000364:	4b66      	ldr	r3, [pc, #408]	; (8000500 <begin+0x208>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	4313      	orrs	r3, r2
 800036a:	b29a      	uxth	r2, r3
 800036c:	4b65      	ldr	r3, [pc, #404]	; (8000504 <begin+0x20c>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	4313      	orrs	r3, r2
 8000372:	b29a      	uxth	r2, r3
 8000374:	4b64      	ldr	r3, [pc, #400]	; (8000508 <begin+0x210>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	4313      	orrs	r3, r2
 800037a:	b29a      	uxth	r2, r3
 800037c:	4b62      	ldr	r3, [pc, #392]	; (8000508 <begin+0x210>)
 800037e:	885b      	ldrh	r3, [r3, #2]
 8000380:	4313      	orrs	r3, r2
 8000382:	b29a      	uxth	r2, r3
 8000384:	4b60      	ldr	r3, [pc, #384]	; (8000508 <begin+0x210>)
 8000386:	889b      	ldrh	r3, [r3, #4]
 8000388:	4313      	orrs	r3, r2
 800038a:	b29a      	uxth	r2, r3
 800038c:	4b5e      	ldr	r3, [pc, #376]	; (8000508 <begin+0x210>)
 800038e:	88db      	ldrh	r3, [r3, #6]
 8000390:	4313      	orrs	r3, r2
 8000392:	b29b      	uxth	r3, r3
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	e02a      	b.n	80003ee <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000398:	4b58      	ldr	r3, [pc, #352]	; (80004fc <begin+0x204>)
 800039a:	881a      	ldrh	r2, [r3, #0]
 800039c:	4b58      	ldr	r3, [pc, #352]	; (8000500 <begin+0x208>)
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b57      	ldr	r3, [pc, #348]	; (8000504 <begin+0x20c>)
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	4313      	orrs	r3, r2
 80003aa:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003ac:	4b56      	ldr	r3, [pc, #344]	; (8000508 <begin+0x210>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003b0:	4313      	orrs	r3, r2
 80003b2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003b4:	4b54      	ldr	r3, [pc, #336]	; (8000508 <begin+0x210>)
 80003b6:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003b8:	4313      	orrs	r3, r2
 80003ba:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003bc:	4b52      	ldr	r3, [pc, #328]	; (8000508 <begin+0x210>)
 80003be:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003c0:	4313      	orrs	r3, r2
 80003c2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003c4:	4b50      	ldr	r3, [pc, #320]	; (8000508 <begin+0x210>)
 80003c6:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003c8:	4313      	orrs	r3, r2
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	4b4e      	ldr	r3, [pc, #312]	; (8000508 <begin+0x210>)
 80003ce:	891b      	ldrh	r3, [r3, #8]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b29a      	uxth	r2, r3
 80003d4:	4b4c      	ldr	r3, [pc, #304]	; (8000508 <begin+0x210>)
 80003d6:	895b      	ldrh	r3, [r3, #10]
 80003d8:	4313      	orrs	r3, r2
 80003da:	b29a      	uxth	r2, r3
 80003dc:	4b4a      	ldr	r3, [pc, #296]	; (8000508 <begin+0x210>)
 80003de:	899b      	ldrh	r3, [r3, #12]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	4b48      	ldr	r3, [pc, #288]	; (8000508 <begin+0x210>)
 80003e6:	89db      	ldrh	r3, [r3, #14]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003ec:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80003ee:	4b47      	ldr	r3, [pc, #284]	; (800050c <begin+0x214>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f107 020c 	add.w	r2, r7, #12
 80003f6:	4611      	mov	r1, r2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 ff0f 	bl	800221c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80003fe:	2032      	movs	r0, #50	; 0x32
 8000400:	f001 fd60 	bl	8001ec4 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000404:	4b41      	ldr	r3, [pc, #260]	; (800050c <begin+0x214>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a3c      	ldr	r2, [pc, #240]	; (80004fc <begin+0x204>)
 800040a:	8811      	ldrh	r1, [r2, #0]
 800040c:	2200      	movs	r2, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f002 f896 	bl	8002540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000414:	4b3d      	ldr	r3, [pc, #244]	; (800050c <begin+0x214>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a3a      	ldr	r2, [pc, #232]	; (8000504 <begin+0x20c>)
 800041a:	8811      	ldrh	r1, [r2, #0]
 800041c:	2200      	movs	r2, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f002 f88e 	bl	8002540 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8000424:	4b36      	ldr	r3, [pc, #216]	; (8000500 <begin+0x208>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	2bff      	cmp	r3, #255	; 0xff
 800042a:	d007      	beq.n	800043c <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 800042c:	4b37      	ldr	r3, [pc, #220]	; (800050c <begin+0x214>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a33      	ldr	r2, [pc, #204]	; (8000500 <begin+0x208>)
 8000432:	8811      	ldrh	r1, [r2, #0]
 8000434:	2200      	movs	r2, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f002 f882 	bl	8002540 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 800043c:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <begin+0x1f4>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	2b00      	cmp	r3, #0
 8000446:	d115      	bne.n	8000474 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000448:	2003      	movs	r0, #3
 800044a:	f000 f9e7 	bl	800081c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800044e:	2005      	movs	r0, #5
 8000450:	f001 fd38 	bl	8001ec4 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000454:	2003      	movs	r0, #3
 8000456:	f000 f9e1 	bl	800081c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800045a:	2005      	movs	r0, #5
 800045c:	f001 fd32 	bl	8001ec4 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000460:	2003      	movs	r0, #3
 8000462:	f000 f9db 	bl	800081c <write4bits>
    HAL_Delay(1);
 8000466:	2001      	movs	r0, #1
 8000468:	f001 fd2c 	bl	8001ec4 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 800046c:	2002      	movs	r0, #2
 800046e:	f000 f9d5 	bl	800081c <write4bits>
 8000472:	e01d      	b.n	80004b0 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000474:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <begin+0x1f4>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	f043 0320 	orr.w	r3, r3, #32
 800047c:	b2db      	uxtb	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f000 f947 	bl	8000712 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000484:	2005      	movs	r0, #5
 8000486:	f001 fd1d 	bl	8001ec4 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <begin+0x1f4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	b2db      	uxtb	r3, r3
 8000494:	4618      	mov	r0, r3
 8000496:	f000 f93c 	bl	8000712 <command>
    HAL_Delay(1);
 800049a:	2001      	movs	r0, #1
 800049c:	f001 fd12 	bl	8001ec4 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <begin+0x1f4>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	f043 0320 	orr.w	r3, r3, #32
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f931 	bl	8000712 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 80004b0:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <begin+0x1f4>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	f043 0320 	orr.w	r3, r3, #32
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f929 	bl	8000712 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <begin+0x218>)
 80004c2:	2204      	movs	r2, #4
 80004c4:	701a      	strb	r2, [r3, #0]
  display();
 80004c6:	f000 f8e5 	bl	8000694 <display>

  // clear it off
  clear();
 80004ca:	f000 f8d9 	bl	8000680 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <begin+0x21c>)
 80004d0:	2202      	movs	r2, #2
 80004d2:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <begin+0x21c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 f917 	bl	8000712 <command>

}
 80004e4:	bf00      	nop
 80004e6:	3720      	adds	r7, #32
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200000ec 	.word	0x200000ec
 80004f0:	200000ef 	.word	0x200000ef
 80004f4:	200000d0 	.word	0x200000d0
 80004f8:	20000000 	.word	0x20000000
 80004fc:	200000d2 	.word	0x200000d2
 8000500:	200000d4 	.word	0x200000d4
 8000504:	200000d6 	.word	0x200000d6
 8000508:	200000d8 	.word	0x200000d8
 800050c:	200000e8 	.word	0x200000e8
 8000510:	200000ed 	.word	0x200000ed
 8000514:	200000ee 	.word	0x200000ee

08000518 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8000518:	b480      	push	{r7}
 800051a:	b089      	sub	sp, #36	; 0x24
 800051c:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 800051e:	4b41      	ldr	r3, [pc, #260]	; (8000624 <enableClock+0x10c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000526:	d10c      	bne.n	8000542 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <enableClock+0x110>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	4a3e      	ldr	r2, [pc, #248]	; (8000628 <enableClock+0x110>)
 800052e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000532:	6153      	str	r3, [r2, #20]
 8000534:	4b3c      	ldr	r3, [pc, #240]	; (8000628 <enableClock+0x110>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800053c:	61fb      	str	r3, [r7, #28]
 800053e:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000540:	e06a      	b.n	8000618 <enableClock+0x100>
  else if(_port == GPIOB)
 8000542:	4b38      	ldr	r3, [pc, #224]	; (8000624 <enableClock+0x10c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a39      	ldr	r2, [pc, #228]	; (800062c <enableClock+0x114>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d10c      	bne.n	8000566 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800054c:	4b36      	ldr	r3, [pc, #216]	; (8000628 <enableClock+0x110>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a35      	ldr	r2, [pc, #212]	; (8000628 <enableClock+0x110>)
 8000552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000556:	6153      	str	r3, [r2, #20]
 8000558:	4b33      	ldr	r3, [pc, #204]	; (8000628 <enableClock+0x110>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000560:	61bb      	str	r3, [r7, #24]
 8000562:	69bb      	ldr	r3, [r7, #24]
}
 8000564:	e058      	b.n	8000618 <enableClock+0x100>
  else if(_port == GPIOB)
 8000566:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <enableClock+0x10c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a30      	ldr	r2, [pc, #192]	; (800062c <enableClock+0x114>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d10c      	bne.n	800058a <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000570:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <enableClock+0x110>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a2c      	ldr	r2, [pc, #176]	; (8000628 <enableClock+0x110>)
 8000576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800057a:	6153      	str	r3, [r2, #20]
 800057c:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <enableClock+0x110>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	697b      	ldr	r3, [r7, #20]
}
 8000588:	e046      	b.n	8000618 <enableClock+0x100>
	else if(_port == GPIOC)
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <enableClock+0x10c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a28      	ldr	r2, [pc, #160]	; (8000630 <enableClock+0x118>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d10c      	bne.n	80005ae <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000594:	4b24      	ldr	r3, [pc, #144]	; (8000628 <enableClock+0x110>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a23      	ldr	r2, [pc, #140]	; (8000628 <enableClock+0x110>)
 800059a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800059e:	6153      	str	r3, [r2, #20]
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <enableClock+0x110>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	693b      	ldr	r3, [r7, #16]
}
 80005ac:	e034      	b.n	8000618 <enableClock+0x100>
	else if(_port == GPIOD)
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <enableClock+0x10c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a20      	ldr	r2, [pc, #128]	; (8000634 <enableClock+0x11c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d10c      	bne.n	80005d2 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <enableClock+0x110>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <enableClock+0x110>)
 80005be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c2:	6153      	str	r3, [r2, #20]
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <enableClock+0x110>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
}
 80005d0:	e022      	b.n	8000618 <enableClock+0x100>
	else if(_port == GPIOE)
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <enableClock+0x10c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <enableClock+0x120>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d10c      	bne.n	80005f6 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <enableClock+0x110>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a11      	ldr	r2, [pc, #68]	; (8000628 <enableClock+0x110>)
 80005e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005e6:	6153      	str	r3, [r2, #20]
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <enableClock+0x110>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
}
 80005f4:	e010      	b.n	8000618 <enableClock+0x100>
	else if(_port == GPIOF)
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <enableClock+0x10c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a10      	ldr	r2, [pc, #64]	; (800063c <enableClock+0x124>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d10b      	bne.n	8000618 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <enableClock+0x110>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a08      	ldr	r2, [pc, #32]	; (8000628 <enableClock+0x110>)
 8000606:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800060a:	6153      	str	r3, [r2, #20]
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <enableClock+0x110>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
}
 8000618:	bf00      	nop
 800061a:	3724      	adds	r7, #36	; 0x24
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	200000e8 	.word	0x200000e8
 8000628:	40021000 	.word	0x40021000
 800062c:	48000400 	.word	0x48000400
 8000630:	48000800 	.word	0x48000800
 8000634:	48000c00 	.word	0x48000c00
 8000638:	48001000 	.word	0x48001000
 800063c:	48001400 	.word	0x48001400

08000640 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <setRowOffsets+0x3c>)
 8000654:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <setRowOffsets+0x3c>)
 800065c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <setRowOffsets+0x3c>)
 8000664:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <setRowOffsets+0x3c>)
 800066c:	70da      	strb	r2, [r3, #3]
}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	200000f0 	.word	0x200000f0

08000680 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000684:	2001      	movs	r0, #1
 8000686:	f000 f844 	bl	8000712 <command>
  HAL_Delay(2);  // this command takes a long time!
 800068a:	2002      	movs	r0, #2
 800068c:	f001 fc1a 	bl	8001ec4 <HAL_Delay>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}

08000694 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <display+0x28>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <display+0x28>)
 80006a4:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <display+0x28>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	f043 0308 	orr.w	r3, r3, #8
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f82e 	bl	8000712 <command>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200000ed 	.word	0x200000ed

080006c0 <createChar>:
  return n;
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f815 	bl	8000712 <command>
  for (int i=0; i<8; i++) {
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	e009      	b.n	8000702 <createChar+0x42>
    write(charmap[i]);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f819 	bl	800072e <write>
  for (int i=0; i<8; i++) {
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3301      	adds	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2b07      	cmp	r3, #7
 8000706:	ddf2      	ble.n	80006ee <createChar+0x2e>
  }
}
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	4603      	mov	r3, r0
 800071a:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f000 f813 	bl	800074c <send>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <write>:

inline size_t write(uint8_t value) {
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2101      	movs	r1, #1
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f805 	bl	800074c <send>
  return 1; // assume sucess
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <send+0x6c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a16      	ldr	r2, [pc, #88]	; (80007bc <send+0x70>)
 8000762:	8811      	ldrh	r1, [r2, #0]
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	4618      	mov	r0, r3
 8000768:	f001 feea 	bl	8002540 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <send+0x74>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	2bff      	cmp	r3, #255	; 0xff
 8000772:	d007      	beq.n	8000784 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <send+0x6c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <send+0x74>)
 800077a:	8811      	ldrh	r1, [r2, #0]
 800077c:	2200      	movs	r2, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fede 	bl	8002540 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <send+0x78>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f003 0310 	and.w	r3, r3, #16
 800078c:	2b00      	cmp	r3, #0
 800078e:	d004      	beq.n	800079a <send+0x4e>
    write8bits(value); 
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f86c 	bl	8000870 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000798:	e009      	b.n	80007ae <send+0x62>
    write4bits(value>>4);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	091b      	lsrs	r3, r3, #4
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f83b 	bl	800081c <write4bits>
    write4bits(value);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f837 	bl	800081c <write4bits>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000e8 	.word	0x200000e8
 80007bc:	200000d2 	.word	0x200000d2
 80007c0:	200000d4 	.word	0x200000d4
 80007c4:	200000ec 	.word	0x200000ec

080007c8 <pulseEnable>:

void pulseEnable(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <pulseEnable+0x4c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a11      	ldr	r2, [pc, #68]	; (8000818 <pulseEnable+0x50>)
 80007d2:	8811      	ldrh	r1, [r2, #0]
 80007d4:	2200      	movs	r2, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 feb2 	bl	8002540 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 80007dc:	2001      	movs	r0, #1
 80007de:	f001 fb71 	bl	8001ec4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <pulseEnable+0x4c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <pulseEnable+0x50>)
 80007e8:	8811      	ldrh	r1, [r2, #0]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fea7 	bl	8002540 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 80007f2:	2001      	movs	r0, #1
 80007f4:	f001 fb66 	bl	8001ec4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <pulseEnable+0x4c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <pulseEnable+0x50>)
 80007fe:	8811      	ldrh	r1, [r2, #0]
 8000800:	2200      	movs	r2, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fe9c 	bl	8002540 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8000808:	2001      	movs	r0, #1
 800080a:	f001 fb5b 	bl	8001ec4 <HAL_Delay>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000e8 	.word	0x200000e8
 8000818:	200000d6 	.word	0x200000d6

0800081c <write4bits>:

void write4bits(uint8_t value) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e013      	b.n	8000854 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <write4bits+0x4c>)
 800082e:	6818      	ldr	r0, [r3, #0]
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <write4bits+0x50>)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	fa42 f303 	asr.w	r3, r2, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	461a      	mov	r2, r3
 800084a:	f001 fe79 	bl	8002540 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3301      	adds	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2b03      	cmp	r3, #3
 8000858:	dde8      	ble.n	800082c <write4bits+0x10>
  }

  pulseEnable();
 800085a:	f7ff ffb5 	bl	80007c8 <pulseEnable>
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000e8 	.word	0x200000e8
 800086c:	200000d8 	.word	0x200000d8

08000870 <write8bits>:

void write8bits(uint8_t value) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e013      	b.n	80008a8 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <write8bits+0x4c>)
 8000882:	6818      	ldr	r0, [r3, #0]
 8000884:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <write8bits+0x50>)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800088c:	79fa      	ldrb	r2, [r7, #7]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	fa42 f303 	asr.w	r3, r2, r3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	461a      	mov	r2, r3
 800089e:	f001 fe4f 	bl	8002540 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3301      	adds	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2b07      	cmp	r3, #7
 80008ac:	dde8      	ble.n	8000880 <write8bits+0x10>
  }
  
  pulseEnable();
 80008ae:	f7ff ff8b 	bl	80007c8 <pulseEnable>
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000e8 	.word	0x200000e8
 80008c0:	200000d8 	.word	0x200000d8

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f001 fa96 	bl	8001df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f832 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 f9de 	bl	8000c90 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008d4:	f000 f896 	bl	8000a04 <MX_I2C1_Init>
  MX_SPI1_Init();
 80008d8:	f000 f8fa 	bl	8000ad0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80008dc:	f000 f9b6 	bl	8000c4c <MX_USB_PCD_Init>
  MX_RTC_Init();
 80008e0:	f000 f8d0 	bl	8000a84 <MX_RTC_Init>
  MX_TIM4_Init();
 80008e4:	f000 f932 	bl	8000b4c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80008e8:	f000 f980 	bl	8000bec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80008ec:	480f      	ldr	r0, [pc, #60]	; (800092c <main+0x68>)
 80008ee:	f003 ffc9 	bl	8004884 <HAL_TIM_Base_Start_IT>
  programInit();
 80008f2:	f000 fcd5 	bl	80012a0 <programInit>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <main+0x6c>)
 80008fe:	f001 fe1f 	bl	8002540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <main+0x6c>)
 800090a:	f001 fe19 	bl	8002540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000914:	4806      	ldr	r0, [pc, #24]	; (8000930 <main+0x6c>)
 8000916:	f001 fe13 	bl	8002540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <main+0x6c>)
 8000922:	f001 fe0d 	bl	8002540 <HAL_GPIO_WritePin>
  uart_rx_enable_it();
 8000926:	f000 ffe5 	bl	80018f4 <uart_rx_enable_it>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800092a:	e7fe      	b.n	800092a <main+0x66>
 800092c:	200001cc 	.word	0x200001cc
 8000930:	48000c00 	.word	0x48000c00

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b09e      	sub	sp, #120	; 0x78
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800093e:	2228      	movs	r2, #40	; 0x28
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f005 fe68 	bl	8006618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000958:	463b      	mov	r3, r7
 800095a:	223c      	movs	r2, #60	; 0x3c
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f005 fe5a 	bl	8006618 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000964:	230b      	movs	r3, #11
 8000966:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000968:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800096c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000972:	2301      	movs	r3, #1
 8000974:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000976:	2310      	movs	r3, #16
 8000978:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800097a:	2301      	movs	r3, #1
 800097c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097e:	2302      	movs	r3, #2
 8000980:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000986:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000988:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800098c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000992:	4618      	mov	r0, r3
 8000994:	f002 f816 	bl	80029c4 <HAL_RCC_OscConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800099e:	f000 fa87 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	230f      	movs	r3, #15
 80009a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009bc:	2101      	movs	r1, #1
 80009be:	4618      	mov	r0, r3
 80009c0:	f003 f83e 	bl	8003a40 <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009ca:	f000 fa71 	bl	8000eb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <SystemClock_Config+0xcc>)
 80009d0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80009e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009e4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 fa5f 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009f4:	f000 fa5c 	bl	8000eb0 <Error_Handler>
  }
}
 80009f8:	bf00      	nop
 80009fa:	3778      	adds	r7, #120	; 0x78
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	00030021 	.word	0x00030021

08000a04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <MX_I2C1_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <MX_I2C1_Init+0x7c>)
 8000a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3e:	480e      	ldr	r0, [pc, #56]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a40:	f001 fdc8 	bl	80025d4 <HAL_I2C_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a4a:	f000 fa31 	bl	8000eb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a52:	f001 fe4e 	bl	80026f2 <HAL_I2CEx_ConfigAnalogFilter>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a5c:	f000 fa28 	bl	8000eb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a60:	2100      	movs	r1, #0
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a64:	f001 fe90 	bl	8002788 <HAL_I2CEx_ConfigDigitalFilter>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 fa1f 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200000f4 	.word	0x200000f4
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	2000090e 	.word	0x2000090e

08000a84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_RTC_Init+0x44>)
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <MX_RTC_Init+0x48>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_RTC_Init+0x44>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_RTC_Init+0x44>)
 8000a96:	2227      	movs	r2, #39	; 0x27
 8000a98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_RTC_Init+0x44>)
 8000a9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_RTC_Init+0x44>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <MX_RTC_Init+0x44>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_RTC_Init+0x44>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_RTC_Init+0x44>)
 8000ab6:	f003 fba9 	bl	800420c <HAL_RTC_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8000ac0:	f000 f9f6 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000148 	.word	0x20000148
 8000acc:	40002800 	.word	0x40002800

08000ad0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <MX_SPI1_Init+0x78>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000adc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000aea:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000b06:	2208      	movs	r2, #8
 8000b08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000b1e:	2207      	movs	r2, #7
 8000b20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_SPI1_Init+0x74>)
 8000b30:	f003 fda6 	bl	8004680 <HAL_SPI_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b3a:	f000 f9b9 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000168 	.word	0x20000168
 8000b48:	40013000 	.word	0x40013000

08000b4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_TIM4_Init+0x98>)
 8000b6c:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <MX_TIM4_Init+0x9c>)
 8000b6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 8000b70:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <MX_TIM4_Init+0x98>)
 8000b72:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000b76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_TIM4_Init+0x98>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <MX_TIM4_Init+0x98>)
 8000b80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_TIM4_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_TIM4_Init+0x98>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b92:	4814      	ldr	r0, [pc, #80]	; (8000be4 <MX_TIM4_Init+0x98>)
 8000b94:	f003 fe1f 	bl	80047d6 <HAL_TIM_Base_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000b9e:	f000 f987 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	480d      	ldr	r0, [pc, #52]	; (8000be4 <MX_TIM4_Init+0x98>)
 8000bb0:	f003 fff1 	bl	8004b96 <HAL_TIM_ConfigClockSource>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000bba:	f000 f979 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MX_TIM4_Init+0x98>)
 8000bcc:	f004 f9fe 	bl	8004fcc <HAL_TIMEx_MasterConfigSynchronization>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000bd6:	f000 f96b 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200001cc 	.word	0x200001cc
 8000be8:	40000800 	.word	0x40000800

08000bec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_USART1_UART_Init+0x58>)
 8000bf2:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <MX_USART1_UART_Init+0x5c>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_USART1_UART_Init+0x58>)
 8000bf8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000bfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_USART1_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_USART1_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_USART1_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USART1_UART_Init+0x58>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_USART1_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_USART1_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_USART1_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USART1_UART_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_USART1_UART_Init+0x58>)
 8000c30:	f004 fa6a 	bl	8005108 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c3a:	f000 f939 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000218 	.word	0x20000218
 8000c48:	40013800 	.word	0x40013800

08000c4c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <MX_USB_PCD_Init+0x3c>)
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <MX_USB_PCD_Init+0x40>)
 8000c54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USB_PCD_Init+0x3c>)
 8000c58:	2208      	movs	r2, #8
 8000c5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MX_USB_PCD_Init+0x3c>)
 8000c5e:	2202      	movs	r2, #2
 8000c60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USB_PCD_Init+0x3c>)
 8000c64:	2202      	movs	r2, #2
 8000c66:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MX_USB_PCD_Init+0x3c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USB_PCD_Init+0x3c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_USB_PCD_Init+0x3c>)
 8000c76:	f001 fdd3 	bl	8002820 <HAL_PCD_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000c80:	f000 f916 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200002a0 	.word	0x200002a0
 8000c8c:	40005c00 	.word	0x40005c00

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca6:	4b7d      	ldr	r3, [pc, #500]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	4a7c      	ldr	r2, [pc, #496]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000cac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb0:	6153      	str	r3, [r2, #20]
 8000cb2:	4b7a      	ldr	r3, [pc, #488]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b77      	ldr	r3, [pc, #476]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	4a76      	ldr	r2, [pc, #472]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000cc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cc8:	6153      	str	r3, [r2, #20]
 8000cca:	4b74      	ldr	r3, [pc, #464]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd6:	4b71      	ldr	r3, [pc, #452]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a70      	ldr	r2, [pc, #448]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000cdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce0:	6153      	str	r3, [r2, #20]
 8000ce2:	4b6e      	ldr	r3, [pc, #440]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b6b      	ldr	r3, [pc, #428]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a6a      	ldr	r2, [pc, #424]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf8:	6153      	str	r3, [r2, #20]
 8000cfa:	4b68      	ldr	r3, [pc, #416]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b65      	ldr	r3, [pc, #404]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	4a64      	ldr	r2, [pc, #400]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d10:	6153      	str	r3, [r2, #20]
 8000d12:	4b62      	ldr	r3, [pc, #392]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b5f      	ldr	r3, [pc, #380]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	4a5e      	ldr	r2, [pc, #376]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d28:	6153      	str	r3, [r2, #20]
 8000d2a:	4b5c      	ldr	r3, [pc, #368]	; (8000e9c <MX_GPIO_Init+0x20c>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000d36:	2200      	movs	r2, #0
 8000d38:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000d3c:	4858      	ldr	r0, [pc, #352]	; (8000ea0 <MX_GPIO_Init+0x210>)
 8000d3e:	f001 fbff 	bl	8002540 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2110      	movs	r1, #16
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4a:	f001 fbf9 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2150      	movs	r1, #80	; 0x50
 8000d52:	4854      	ldr	r0, [pc, #336]	; (8000ea4 <MX_GPIO_Init+0x214>)
 8000d54:	f001 fbf4 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f242 0105 	movw	r1, #8197	; 0x2005
 8000d5e:	4852      	ldr	r0, [pc, #328]	; (8000ea8 <MX_GPIO_Init+0x218>)
 8000d60:	f001 fbee 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 413e 	mov.w	r1, #48640	; 0xbe00
 8000d6a:	4850      	ldr	r0, [pc, #320]	; (8000eac <MX_GPIO_Init+0x21c>)
 8000d6c:	f001 fbe8 	bl	8002540 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000d70:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000d74:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4845      	ldr	r0, [pc, #276]	; (8000ea0 <MX_GPIO_Init+0x210>)
 8000d8a:	f001 fa47 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8000d8e:	2320      	movs	r3, #32
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d92:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	483f      	ldr	r0, [pc, #252]	; (8000ea0 <MX_GPIO_Init+0x210>)
 8000da4:	f001 fa3a 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbe:	f001 fa2d 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f001 fa1e 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000de0:	2350      	movs	r3, #80	; 0x50
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	482b      	ldr	r0, [pc, #172]	; (8000ea4 <MX_GPIO_Init+0x214>)
 8000df8:	f001 fa10 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 8000dfc:	f242 0305 	movw	r3, #8197	; 0x2005
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4824      	ldr	r0, [pc, #144]	; (8000ea8 <MX_GPIO_Init+0x218>)
 8000e16:	f001 fa01 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000e1a:	f44f 433e 	mov.w	r3, #48640	; 0xbe00
 8000e1e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	481e      	ldr	r0, [pc, #120]	; (8000eac <MX_GPIO_Init+0x21c>)
 8000e34:	f001 f9f2 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e38:	230f      	movs	r3, #15
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e42:	2302      	movs	r3, #2
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4817      	ldr	r0, [pc, #92]	; (8000eac <MX_GPIO_Init+0x21c>)
 8000e4e:	f001 f9e5 	bl	800221c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	2006      	movs	r0, #6
 8000e58:	f001 f933 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e5c:	2006      	movs	r0, #6
 8000e5e:	f001 f94c 	bl	80020fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2007      	movs	r0, #7
 8000e68:	f001 f92b 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e6c:	2007      	movs	r0, #7
 8000e6e:	f001 f944 	bl	80020fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2008      	movs	r0, #8
 8000e78:	f001 f923 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000e7c:	2008      	movs	r0, #8
 8000e7e:	f001 f93c 	bl	80020fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2009      	movs	r0, #9
 8000e88:	f001 f91b 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e8c:	2009      	movs	r0, #9
 8000e8e:	f001 f934 	bl	80020fa <HAL_NVIC_EnableIRQ>

}
 8000e92:	bf00      	nop
 8000e94:	3730      	adds	r7, #48	; 0x30
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48001000 	.word	0x48001000
 8000ea4:	48000800 	.word	0x48000800
 8000ea8:	48000400 	.word	0x48000400
 8000eac:	48000c00 	.word	0x48000c00

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <set_start_time>:

extern RTC_HandleTypeDef hrtc;

RTC_TimeTypeDef mytime ;

void set_start_time(int hour, int minute, int second){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]

	RTC_TimeTypeDef start_t ;

	start_t.Hours = 20;
 8000ec8:	2314      	movs	r3, #20
 8000eca:	753b      	strb	r3, [r7, #20]
	start_t.Minutes = 20;
 8000ecc:	2314      	movs	r3, #20
 8000ece:	757b      	strb	r3, [r7, #21]
	start_t.Seconds = 20;
 8000ed0:	2314      	movs	r3, #20
 8000ed2:	75bb      	strb	r3, [r7, #22]

    HAL_RTC_SetTime(&hrtc, &start_t, RTC_FORMAT_BIN);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4619      	mov	r1, r3
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <set_start_time+0x30>)
 8000ede:	f003 fa18 	bl	8004312 <HAL_RTC_SetTime>
}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000148 	.word	0x20000148

08000ef0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
  if (last_gpio_exti + 70 > HAL_GetTick()) // Simple button debouncing
 8000efa:	4bbd      	ldr	r3, [pc, #756]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x300>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f103 0446 	add.w	r4, r3, #70	; 0x46
 8000f02:	f000 ffd3 	bl	8001eac <HAL_GetTick>
 8000f06:	4603      	mov	r3, r0
 8000f08:	429c      	cmp	r4, r3
 8000f0a:	f200 81b1 	bhi.w	8001270 <HAL_GPIO_EXTI_Callback+0x380>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 8000f0e:	f000 ffcd 	bl	8001eac <HAL_GetTick>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4ab6      	ldr	r2, [pc, #728]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x300>)
 8000f16:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 8000f18:	23ff      	movs	r3, #255	; 0xff
 8000f1a:	73fb      	strb	r3, [r7, #15]
  int8_t column_number = -1;
 8000f1c:	23ff      	movs	r3, #255	; 0xff
 8000f1e:	73bb      	strb	r3, [r7, #14]
  {
    // blue_button_pressed = 1;
    // return;
  }

  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000f20:	2300      	movs	r3, #0
 8000f22:	737b      	strb	r3, [r7, #13]
 8000f24:	e00b      	b.n	8000f3e <HAL_GPIO_EXTI_Callback+0x4e>
  {
    if (GPIO_Pin == Row_pins[row])
 8000f26:	7b7b      	ldrb	r3, [r7, #13]
 8000f28:	4ab2      	ldr	r2, [pc, #712]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x304>)
 8000f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f2e:	88fa      	ldrh	r2, [r7, #6]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d101      	bne.n	8000f38 <HAL_GPIO_EXTI_Callback+0x48>
    {
      row_number = row;
 8000f34:	7b7b      	ldrb	r3, [r7, #13]
 8000f36:	73fb      	strb	r3, [r7, #15]
  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000f38:	7b7b      	ldrb	r3, [r7, #13]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	737b      	strb	r3, [r7, #13]
 8000f3e:	7b7b      	ldrb	r3, [r7, #13]
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d9f0      	bls.n	8000f26 <HAL_GPIO_EXTI_Callback+0x36>
    }
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8000f44:	4bac      	ldr	r3, [pc, #688]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x308>)
 8000f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 faf7 	bl	8002540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8000f52:	4ba9      	ldr	r3, [pc, #676]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x308>)
 8000f54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 faf0 	bl	8002540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8000f60:	4ba5      	ldr	r3, [pc, #660]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x308>)
 8000f62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f66:	2200      	movs	r2, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f001 fae9 	bl	8002540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000f6e:	4ba2      	ldr	r3, [pc, #648]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x308>)
 8000f70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f74:	2200      	movs	r2, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 fae2 	bl	8002540 <HAL_GPIO_WritePin>

  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	733b      	strb	r3, [r7, #12]
 8000f80:	e02d      	b.n	8000fde <HAL_GPIO_EXTI_Callback+0xee>
  {
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8000f82:	7b3b      	ldrb	r3, [r7, #12]
 8000f84:	4a9d      	ldr	r2, [pc, #628]	; (80011fc <HAL_GPIO_EXTI_Callback+0x30c>)
 8000f86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f8a:	7b3b      	ldrb	r3, [r7, #12]
 8000f8c:	4a9c      	ldr	r2, [pc, #624]	; (8001200 <HAL_GPIO_EXTI_Callback+0x310>)
 8000f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f92:	2201      	movs	r2, #1
 8000f94:	4619      	mov	r1, r3
 8000f96:	f001 fad3 	bl	8002540 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number]))
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4a99      	ldr	r2, [pc, #612]	; (8001204 <HAL_GPIO_EXTI_Callback+0x314>)
 8000fa0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa8:	4992      	ldr	r1, [pc, #584]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x304>)
 8000faa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	f001 faad 	bl	8002510 <HAL_GPIO_ReadPin>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_GPIO_EXTI_Callback+0xd0>
    {
      column_number = col;
 8000fbc:	7b3b      	ldrb	r3, [r7, #12]
 8000fbe:	73bb      	strb	r3, [r7, #14]
    }
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8000fc0:	7b3b      	ldrb	r3, [r7, #12]
 8000fc2:	4a8e      	ldr	r2, [pc, #568]	; (80011fc <HAL_GPIO_EXTI_Callback+0x30c>)
 8000fc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fc8:	7b3b      	ldrb	r3, [r7, #12]
 8000fca:	4a8d      	ldr	r2, [pc, #564]	; (8001200 <HAL_GPIO_EXTI_Callback+0x310>)
 8000fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f001 fab4 	bl	8002540 <HAL_GPIO_WritePin>
  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000fd8:	7b3b      	ldrb	r3, [r7, #12]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	733b      	strb	r3, [r7, #12]
 8000fde:	7b3b      	ldrb	r3, [r7, #12]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d9ce      	bls.n	8000f82 <HAL_GPIO_EXTI_Callback+0x92>
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8000fe4:	4b84      	ldr	r3, [pc, #528]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x308>)
 8000fe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fea:	2201      	movs	r2, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 faa7 	bl	8002540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8000ff2:	4b81      	ldr	r3, [pc, #516]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x308>)
 8000ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 faa0 	bl	8002540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8001000:	4b7d      	ldr	r3, [pc, #500]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x308>)
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	2201      	movs	r2, #1
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fa99 	bl	8002540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 800100e:	4b7a      	ldr	r3, [pc, #488]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x308>)
 8001010:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001014:	2201      	movs	r2, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f001 fa92 	bl	8002540 <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 800101c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001024:	f000 8126 	beq.w	8001274 <HAL_GPIO_EXTI_Callback+0x384>
 8001028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800102c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001030:	f000 8120 	beq.w	8001274 <HAL_GPIO_EXTI_Callback+0x384>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	b2da      	uxtb	r2, r3
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	4413      	add	r3, r2
 800103e:	b2db      	uxtb	r3, r3
 8001040:	3301      	adds	r3, #1
 8001042:	72fb      	strb	r3, [r7, #11]
  switch (button_number){
 8001044:	7afb      	ldrb	r3, [r7, #11]
 8001046:	3b01      	subs	r3, #1
 8001048:	2b0f      	cmp	r3, #15
 800104a:	f200 8115 	bhi.w	8001278 <HAL_GPIO_EXTI_Callback+0x388>
 800104e:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <HAL_GPIO_EXTI_Callback+0x164>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	08001095 	.word	0x08001095
 8001058:	080010a9 	.word	0x080010a9
 800105c:	080010bd 	.word	0x080010bd
 8001060:	080010cb 	.word	0x080010cb
 8001064:	080010d9 	.word	0x080010d9
 8001068:	080010ed 	.word	0x080010ed
 800106c:	080010fb 	.word	0x080010fb
 8001070:	08001109 	.word	0x08001109
 8001074:	08001117 	.word	0x08001117
 8001078:	08001143 	.word	0x08001143
 800107c:	0800116f 	.word	0x0800116f
 8001080:	0800117d 	.word	0x0800117d
 8001084:	08001191 	.word	0x08001191
 8001088:	080011c1 	.word	0x080011c1
 800108c:	08001249 	.word	0x08001249
 8001090:	0800125d 	.word	0x0800125d
  case 1: //move	//1
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109a:	485b      	ldr	r0, [pc, #364]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 800109c:	f001 fa50 	bl	8002540 <HAL_GPIO_WritePin>
	move(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f000 f9ed 	bl	8001480 <move>

    break;
 80010a6:	e0f0      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
  case 2: //boom 	//2
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	4856      	ldr	r0, [pc, #344]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 80010b0:	f001 fa46 	bl	8002540 <HAL_GPIO_WritePin>
	boom(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f000 f9d3 	bl	8001460 <boom>
    break;
 80010ba:	e0e6      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
  case 3:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c2:	4851      	ldr	r0, [pc, #324]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 80010c4:	f001 fa3c 	bl	8002540 <HAL_GPIO_WritePin>
    break;
 80010c8:	e0df      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
  case 4:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d0:	484d      	ldr	r0, [pc, #308]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 80010d2:	f001 fa35 	bl	8002540 <HAL_GPIO_WritePin>
    break;
 80010d6:	e0d8      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
  case 5: //dir	 	//4
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 80010d8:	2201      	movs	r2, #1
 80010da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010de:	484a      	ldr	r0, [pc, #296]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 80010e0:	f001 fa2e 	bl	8002540 <HAL_GPIO_WritePin>
	 change_dir(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f000 f971 	bl	80013cc <change_dir>
    break;
 80010ea:	e0ce      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
  case 6:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f2:	4845      	ldr	r0, [pc, #276]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 80010f4:	f001 fa24 	bl	8002540 <HAL_GPIO_WritePin>
    break;
 80010f8:	e0c7      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
  case 7:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001100:	4841      	ldr	r0, [pc, #260]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 8001102:	f001 fa1d 	bl	8002540 <HAL_GPIO_WritePin>
    break;
 8001106:	e0c0      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
  case 8:
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110e:	483e      	ldr	r0, [pc, #248]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 8001110:	f001 fa16 	bl	8002540 <HAL_GPIO_WritePin>
    break;
 8001114:	e0b9      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
  case 9: // menu curser up
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111c:	483a      	ldr	r0, [pc, #232]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 800111e:	f001 fa0f 	bl	8002540 <HAL_GPIO_WritePin>
		if(pageflag==1){
 8001122:	4b3a      	ldr	r3, [pc, #232]	; (800120c <HAL_GPIO_EXTI_Callback+0x31c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	f040 80a8 	bne.w	800127c <HAL_GPIO_EXTI_Callback+0x38c>
			if (menu_curser_r > 1){
 800112c:	4b38      	ldr	r3, [pc, #224]	; (8001210 <HAL_GPIO_EXTI_Callback+0x320>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	f340 80a3 	ble.w	800127c <HAL_GPIO_EXTI_Callback+0x38c>
				menu_curser_r -= 1;
 8001136:	4b36      	ldr	r3, [pc, #216]	; (8001210 <HAL_GPIO_EXTI_Callback+0x320>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3b01      	subs	r3, #1
 800113c:	4a34      	ldr	r2, [pc, #208]	; (8001210 <HAL_GPIO_EXTI_Callback+0x320>)
 800113e:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 8001140:	e09c      	b.n	800127c <HAL_GPIO_EXTI_Callback+0x38c>
  case 10: // menu cursor down
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001148:	482f      	ldr	r0, [pc, #188]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 800114a:	f001 f9f9 	bl	8002540 <HAL_GPIO_WritePin>
		if(pageflag==1){
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <HAL_GPIO_EXTI_Callback+0x31c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	f040 8094 	bne.w	8001280 <HAL_GPIO_EXTI_Callback+0x390>
			if (menu_curser_r  < 3){
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_GPIO_EXTI_Callback+0x320>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b02      	cmp	r3, #2
 800115e:	f300 808f 	bgt.w	8001280 <HAL_GPIO_EXTI_Callback+0x390>
				menu_curser_r +=1;
 8001162:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <HAL_GPIO_EXTI_Callback+0x320>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	4a29      	ldr	r2, [pc, #164]	; (8001210 <HAL_GPIO_EXTI_Callback+0x320>)
 800116a:	6013      	str	r3, [r2, #0]
			}
		}
    break;
 800116c:	e088      	b.n	8001280 <HAL_GPIO_EXTI_Callback+0x390>
  case 11:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001174:	4824      	ldr	r0, [pc, #144]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 8001176:	f001 f9e3 	bl	8002540 <HAL_GPIO_WritePin>
    break;
 800117a:	e086      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
  case 12: //Dir	//C
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001182:	4821      	ldr	r0, [pc, #132]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 8001184:	f001 f9dc 	bl	8002540 <HAL_GPIO_WritePin>
		change_dir(2);
 8001188:	2002      	movs	r0, #2
 800118a:	f000 f91f 	bl	80013cc <change_dir>
    break;
 800118e:	e07c      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
  case 13: //goto menu
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8001190:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001194:	481c      	ldr	r0, [pc, #112]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 8001196:	f001 f9eb 	bl	8002570 <HAL_GPIO_TogglePin>
		if(pageflag == 0 || pageflag == 3 || pageflag == 4){
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_GPIO_EXTI_Callback+0x31c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_EXTI_Callback+0x2c2>
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <HAL_GPIO_EXTI_Callback+0x31c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_EXTI_Callback+0x2c2>
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_GPIO_EXTI_Callback+0x31c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d168      	bne.n	8001284 <HAL_GPIO_EXTI_Callback+0x394>
			change_page = 1;
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_GPIO_EXTI_Callback+0x324>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
			pageflag = 1;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_GPIO_EXTI_Callback+0x31c>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
		}
    break;
 80011be:	e061      	b.n	8001284 <HAL_GPIO_EXTI_Callback+0x394>
  case 14: // select in menu
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c6:	4810      	ldr	r0, [pc, #64]	; (8001208 <HAL_GPIO_EXTI_Callback+0x318>)
 80011c8:	f001 f9ba 	bl	8002540 <HAL_GPIO_WritePin>
		if(pageflag == 1){
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_GPIO_EXTI_Callback+0x31c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d159      	bne.n	8001288 <HAL_GPIO_EXTI_Callback+0x398>
			if(menu_curser_r == 1){
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_GPIO_EXTI_Callback+0x320>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d11f      	bne.n	800121c <HAL_GPIO_EXTI_Callback+0x32c>
				pageflag = 2;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_GPIO_EXTI_Callback+0x31c>)
 80011de:	2202      	movs	r2, #2
 80011e0:	601a      	str	r2, [r3, #0]
				change_page = 1;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_GPIO_EXTI_Callback+0x324>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
				game_started = 1;
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_GPIO_EXTI_Callback+0x328>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
				change_page = 1;

			}
		}

    break;
 80011ee:	e04b      	b.n	8001288 <HAL_GPIO_EXTI_Callback+0x398>
 80011f0:	20000594 	.word	0x20000594
 80011f4:	08006650 	.word	0x08006650
 80011f8:	48000c00 	.word	0x48000c00
 80011fc:	08006658 	.word	0x08006658
 8001200:	08006668 	.word	0x08006668
 8001204:	08006640 	.word	0x08006640
 8001208:	48001000 	.word	0x48001000
 800120c:	2000058c 	.word	0x2000058c
 8001210:	20000004 	.word	0x20000004
 8001214:	20000598 	.word	0x20000598
 8001218:	20000590 	.word	0x20000590
			else if(menu_curser_r == 2){
 800121c:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_GPIO_EXTI_Callback+0x3a0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d106      	bne.n	8001232 <HAL_GPIO_EXTI_Callback+0x342>
				pageflag = 3;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001226:	2203      	movs	r2, #3
 8001228:	601a      	str	r2, [r3, #0]
				change_page = 1;
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_GPIO_EXTI_Callback+0x3a8>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]
    break;
 8001230:	e02a      	b.n	8001288 <HAL_GPIO_EXTI_Callback+0x398>
			else if(menu_curser_r == 3){
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d126      	bne.n	8001288 <HAL_GPIO_EXTI_Callback+0x398>
				pageflag = 4;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_GPIO_EXTI_Callback+0x3a4>)
 800123c:	2204      	movs	r2, #4
 800123e:	601a      	str	r2, [r3, #0]
				change_page = 1;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_GPIO_EXTI_Callback+0x3a8>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]
    break;
 8001246:	e01f      	b.n	8001288 <HAL_GPIO_EXTI_Callback+0x398>
  case 15: //Boom	//#
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124e:	4813      	ldr	r0, [pc, #76]	; (800129c <HAL_GPIO_EXTI_Callback+0x3ac>)
 8001250:	f001 f976 	bl	8002540 <HAL_GPIO_WritePin>
		boom(2);
 8001254:	2002      	movs	r0, #2
 8001256:	f000 f903 	bl	8001460 <boom>
    break;
 800125a:	e016      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
  case 16: //move	//D
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001262:	480e      	ldr	r0, [pc, #56]	; (800129c <HAL_GPIO_EXTI_Callback+0x3ac>)
 8001264:	f001 f96c 	bl	8002540 <HAL_GPIO_WritePin>
		move(2);
 8001268:	2002      	movs	r0, #2
 800126a:	f000 f909 	bl	8001480 <move>
    break;
 800126e:	e00c      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
    return;
 8001270:	bf00      	nop
 8001272:	e00a      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
    return; // Reject invalid scan
 8001274:	bf00      	nop
 8001276:	e008      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>

  default:
    break;
 8001278:	bf00      	nop
 800127a:	e006      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
    break;
 800127c:	bf00      	nop
 800127e:	e004      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
    break;
 8001280:	bf00      	nop
 8001282:	e002      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
    break;
 8001284:	bf00      	nop
 8001286:	e000      	b.n	800128a <HAL_GPIO_EXTI_Callback+0x39a>
    break;
 8001288:	bf00      	nop
  }
}
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	bd90      	pop	{r4, r7, pc}
 8001290:	20000004 	.word	0x20000004
 8001294:	2000058c 	.word	0x2000058c
 8001298:	20000598 	.word	0x20000598
 800129c:	48001000 	.word	0x48001000

080012a0 <programInit>:

}



void programInit() {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af04      	add	r7, sp, #16
	LiquidCrystal(GPIOC, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_7);
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	9303      	str	r3, [sp, #12]
 80012aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	2308      	movs	r3, #8
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2304      	movs	r3, #4
 80012bc:	2202      	movs	r2, #2
 80012be:	2101      	movs	r1, #1
 80012c0:	4820      	ldr	r0, [pc, #128]	; (8001344 <programInit+0xa4>)
 80012c2:	f7fe ff81 	bl	80001c8 <LiquidCrystal>
	begin(20, 4);
 80012c6:	2104      	movs	r1, #4
 80012c8:	2014      	movs	r0, #20
 80012ca:	f7ff f815 	bl	80002f8 <begin>
//	int n = sprintf(data, "Salammmmm");
//	setCursor(5, 1);
	//	print(data);


	set_start_time(20, 20, 20);
 80012ce:	2214      	movs	r2, #20
 80012d0:	2114      	movs	r1, #20
 80012d2:	2014      	movs	r0, #20
 80012d4:	f7ff fdf2 	bl	8000ebc <set_start_time>
	createChar(num_tank_right, tank_right);
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <programInit+0xa8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	491b      	ldr	r1, [pc, #108]	; (800134c <programInit+0xac>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f9ee 	bl	80006c0 <createChar>
	createChar(num_tank_up, tank_up);
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <programInit+0xb0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	491a      	ldr	r1, [pc, #104]	; (8001354 <programInit+0xb4>)
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f9e8 	bl	80006c0 <createChar>
	createChar(num_tank_down, tank_down);
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <programInit+0xb8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4919      	ldr	r1, [pc, #100]	; (800135c <programInit+0xbc>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f9e2 	bl	80006c0 <createChar>
	createChar(num_tank_left, tank_left);
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <programInit+0xc0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4918      	ldr	r1, [pc, #96]	; (8001364 <programInit+0xc4>)
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f9dc 	bl	80006c0 <createChar>
	createChar(num_extra_bullet, extra_bullet);
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <programInit+0xc8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4917      	ldr	r1, [pc, #92]	; (800136c <programInit+0xcc>)
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f9d6 	bl	80006c0 <createChar>
	createChar(num_chance, chance);
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <programInit+0xd0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4916      	ldr	r1, [pc, #88]	; (8001374 <programInit+0xd4>)
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f9d0 	bl	80006c0 <createChar>
	createChar(num_health, health);
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <programInit+0xd8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4915      	ldr	r1, [pc, #84]	; (800137c <programInit+0xdc>)
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f9ca 	bl	80006c0 <createChar>
	createChar(num_arrow, arrow);
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <programInit+0xe0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4914      	ldr	r1, [pc, #80]	; (8001384 <programInit+0xe4>)
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f9c4 	bl	80006c0 <createChar>
//	starter();
	pageflag=0;
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <programInit+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]

//	init_board();


}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	48000800 	.word	0x48000800
 8001348:	20000088 	.word	0x20000088
 800134c:	20000028 	.word	0x20000028
 8001350:	20000084 	.word	0x20000084
 8001354:	20000018 	.word	0x20000018
 8001358:	2000008c 	.word	0x2000008c
 800135c:	20000038 	.word	0x20000038
 8001360:	20000080 	.word	0x20000080
 8001364:	20000020 	.word	0x20000020
 8001368:	20000090 	.word	0x20000090
 800136c:	20000008 	.word	0x20000008
 8001370:	20000094 	.word	0x20000094
 8001374:	20000010 	.word	0x20000010
 8001378:	20000098 	.word	0x20000098
 800137c:	20000030 	.word	0x20000030
 8001380:	2000009c 	.word	0x2000009c
 8001384:	20000040 	.word	0x20000040
 8001388:	2000058c 	.word	0x2000058c

0800138c <HAL_TIM_PeriodElapsedCallback>:
void programLoop() {
    seven_segment_refresh();
    setNumber(1234);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4) {
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10e      	bne.n	80013bc <HAL_TIM_PeriodElapsedCallback+0x30>
//		update_lcd();
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 800139e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a2:	4809      	ldr	r0, [pc, #36]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013a4:	f001 f8e4 	bl	8002570 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 80013a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ac:	4806      	ldr	r0, [pc, #24]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013ae:	f001 f8df 	bl	8002570 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80013b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b6:	4804      	ldr	r0, [pc, #16]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013b8:	f001 f8da 	bl	8002570 <HAL_GPIO_TogglePin>
	}

}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40000800 	.word	0x40000800
 80013c8:	48001000 	.word	0x48001000

080013cc <change_dir>:


void change_dir(int player){
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	if (player == 1){
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d119      	bne.n	800140e <change_dir+0x42>
		int new_dir = player1.direction + 1;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <change_dir+0x88>)
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	3301      	adds	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
		if(new_dir == 5){
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d101      	bne.n	80013ec <change_dir+0x20>
			new_dir = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
		}
		player1.direction = new_dir;
 80013ec:	4a19      	ldr	r2, [pc, #100]	; (8001454 <change_dir+0x88>)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	60d3      	str	r3, [r2, #12]
		lcd[player1.position_x][player1.position_y] = player1.direction;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <change_dir+0x88>)
 80013f4:	68d9      	ldr	r1, [r3, #12]
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <change_dir+0x88>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <change_dir+0x88>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	b2c8      	uxtb	r0, r1
 8001400:	4915      	ldr	r1, [pc, #84]	; (8001458 <change_dir+0x8c>)
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	440a      	add	r2, r1
 8001406:	4413      	add	r3, r2
 8001408:	4602      	mov	r2, r0
 800140a:	701a      	strb	r2, [r3, #0]
		}
		player2.direction = new_dir;
		lcd[player2.position_x][player2.position_y] = player2.direction;

	}
}
 800140c:	e01b      	b.n	8001446 <change_dir+0x7a>
	}else if (player == 2){
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d118      	bne.n	8001446 <change_dir+0x7a>
		int new_dir = player2.direction + 1;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <change_dir+0x90>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
		if(new_dir == 5){
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b05      	cmp	r3, #5
 8001420:	d101      	bne.n	8001426 <change_dir+0x5a>
			new_dir = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
		player2.direction = new_dir;
 8001426:	4a0d      	ldr	r2, [pc, #52]	; (800145c <change_dir+0x90>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
		lcd[player2.position_x][player2.position_y] = player2.direction;
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <change_dir+0x90>)
 800142e:	68d9      	ldr	r1, [r3, #12]
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <change_dir+0x90>)
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <change_dir+0x90>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	b2c8      	uxtb	r0, r1
 800143a:	4907      	ldr	r1, [pc, #28]	; (8001458 <change_dir+0x8c>)
 800143c:	0092      	lsls	r2, r2, #2
 800143e:	440a      	add	r2, r1
 8001440:	4413      	add	r3, r2
 8001442:	4602      	mov	r2, r0
 8001444:	701a      	strb	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000048 	.word	0x20000048
 8001458:	200005b0 	.word	0x200005b0
 800145c:	20000064 	.word	0x20000064

08001460 <boom>:

void boom(int player){
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0); //Temp
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800146e:	4803      	ldr	r0, [pc, #12]	; (800147c <boom+0x1c>)
 8001470:	f001 f866 	bl	8002540 <HAL_GPIO_WritePin>
	//TODO

}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	48001000 	.word	0x48001000

08001480 <move>:

void move(int player){
 8001480:	b480      	push	{r7}
 8001482:	b095      	sub	sp, #84	; 0x54
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	int dir;

	if (player == 1){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b01      	cmp	r3, #1
 800148c:	f040 8118 	bne.w	80016c0 <move+0x240>
		dir = player1.direction;
 8001490:	4b87      	ldr	r3, [pc, #540]	; (80016b0 <move+0x230>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 8001496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001498:	2b01      	cmp	r3, #1
 800149a:	d13f      	bne.n	800151c <move+0x9c>
			int curr_col = player1.position_x;
 800149c:	4b84      	ldr	r3, [pc, #528]	; (80016b0 <move+0x230>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	613b      	str	r3, [r7, #16]
			int curr_row = player1.position_y;
 80014a2:	4b83      	ldr	r3, [pc, #524]	; (80016b0 <move+0x230>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	60fb      	str	r3, [r7, #12]
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f340 8214 	ble.w	80018d8 <move+0x458>
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	4a7f      	ldr	r2, [pc, #508]	; (80016b4 <move+0x234>)
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	441a      	add	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b7d      	ldr	r3, [pc, #500]	; (80016b8 <move+0x238>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	f000 8206 	beq.w	80018d8 <move+0x458>
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	4a78      	ldr	r2, [pc, #480]	; (80016b4 <move+0x234>)
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	441a      	add	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4413      	add	r3, r2
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b77      	ldr	r3, [pc, #476]	; (80016bc <move+0x23c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	f000 81f8 	beq.w	80018d8 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 80014e8:	4a72      	ldr	r2, [pc, #456]	; (80016b4 <move+0x234>)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	441a      	add	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player1.direction;
 80014f8:	4b6d      	ldr	r3, [pc, #436]	; (80016b0 <move+0x230>)
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	3b01      	subs	r3, #1
 8001500:	b2d1      	uxtb	r1, r2
 8001502:	4a6c      	ldr	r2, [pc, #432]	; (80016b4 <move+0x234>)
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	441a      	add	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	460a      	mov	r2, r1
 800150e:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x - 1;
 8001510:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <move+0x230>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	3b01      	subs	r3, #1
 8001516:	4a66      	ldr	r2, [pc, #408]	; (80016b0 <move+0x230>)
 8001518:	6053      	str	r3, [r2, #4]
			}
		}
	}


}
 800151a:	e1dd      	b.n	80018d8 <move+0x458>
		}else if (dir == 2){
 800151c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800151e:	2b02      	cmp	r3, #2
 8001520:	d13f      	bne.n	80015a2 <move+0x122>
			int curr_col = player1.position_x;
 8001522:	4b63      	ldr	r3, [pc, #396]	; (80016b0 <move+0x230>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	61bb      	str	r3, [r7, #24]
			int curr_row = player1.position_y;
 8001528:	4b61      	ldr	r3, [pc, #388]	; (80016b0 <move+0x230>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	617b      	str	r3, [r7, #20]
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b00      	cmp	r3, #0
 8001532:	f340 81d1 	ble.w	80018d8 <move+0x458>
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3b01      	subs	r3, #1
 800153a:	495e      	ldr	r1, [pc, #376]	; (80016b4 <move+0x234>)
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	440a      	add	r2, r1
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	4b5b      	ldr	r3, [pc, #364]	; (80016b8 <move+0x238>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	f000 81c3 	beq.w	80018d8 <move+0x458>
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3b01      	subs	r3, #1
 8001556:	4957      	ldr	r1, [pc, #348]	; (80016b4 <move+0x234>)
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	0092      	lsls	r2, r2, #2
 800155c:	440a      	add	r2, r1
 800155e:	4413      	add	r3, r2
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	4b55      	ldr	r3, [pc, #340]	; (80016bc <move+0x23c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	f000 81b5 	beq.w	80018d8 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 800156e:	4a51      	ldr	r2, [pc, #324]	; (80016b4 <move+0x234>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	441a      	add	r2, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	4413      	add	r3, r2
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player1.direction;
 800157e:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <move+0x230>)
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3b01      	subs	r3, #1
 8001586:	b2d0      	uxtb	r0, r2
 8001588:	494a      	ldr	r1, [pc, #296]	; (80016b4 <move+0x234>)
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	440a      	add	r2, r1
 8001590:	4413      	add	r3, r2
 8001592:	4602      	mov	r2, r0
 8001594:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y - 1;
 8001596:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <move+0x230>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	3b01      	subs	r3, #1
 800159c:	4a44      	ldr	r2, [pc, #272]	; (80016b0 <move+0x230>)
 800159e:	6093      	str	r3, [r2, #8]
}
 80015a0:	e19a      	b.n	80018d8 <move+0x458>
		}else if (dir == 3){
 80015a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d13f      	bne.n	8001628 <move+0x1a8>
			int curr_col = player1.position_x;
 80015a8:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <move+0x230>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	623b      	str	r3, [r7, #32]
			int curr_row = player1.position_y;
 80015ae:	4b40      	ldr	r3, [pc, #256]	; (80016b0 <move+0x230>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	61fb      	str	r3, [r7, #28]
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	2b12      	cmp	r3, #18
 80015b8:	f300 818e 	bgt.w	80018d8 <move+0x458>
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a3c      	ldr	r2, [pc, #240]	; (80016b4 <move+0x234>)
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	441a      	add	r2, r3
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <move+0x238>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	f000 8180 	beq.w	80018d8 <move+0x458>
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a35      	ldr	r2, [pc, #212]	; (80016b4 <move+0x234>)
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	441a      	add	r2, r3
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	4413      	add	r3, r2
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b34      	ldr	r3, [pc, #208]	; (80016bc <move+0x23c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	f000 8172 	beq.w	80018d8 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 80015f4:	4a2f      	ldr	r2, [pc, #188]	; (80016b4 <move+0x234>)
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	441a      	add	r2, r3
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player1.direction;
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <move+0x230>)
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	3301      	adds	r3, #1
 800160c:	b2d1      	uxtb	r1, r2
 800160e:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <move+0x234>)
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	441a      	add	r2, r3
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	4413      	add	r3, r2
 8001618:	460a      	mov	r2, r1
 800161a:	701a      	strb	r2, [r3, #0]
				player1.position_x = player1.position_x + 1;
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <move+0x230>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	3301      	adds	r3, #1
 8001622:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <move+0x230>)
 8001624:	6053      	str	r3, [r2, #4]
}
 8001626:	e157      	b.n	80018d8 <move+0x458>
		}else if (dir == 4){
 8001628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800162a:	2b04      	cmp	r3, #4
 800162c:	f040 8154 	bne.w	80018d8 <move+0x458>
			int curr_col = player1.position_x;
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <move+0x230>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
			int curr_row = player1.position_y;
 8001636:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <move+0x230>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	2b02      	cmp	r3, #2
 8001640:	f300 814a 	bgt.w	80018d8 <move+0x458>
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	3301      	adds	r3, #1
 8001648:	491a      	ldr	r1, [pc, #104]	; (80016b4 <move+0x234>)
 800164a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	440a      	add	r2, r1
 8001650:	4413      	add	r3, r2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <move+0x238>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	f000 813c 	beq.w	80018d8 <move+0x458>
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	3301      	adds	r3, #1
 8001664:	4913      	ldr	r1, [pc, #76]	; (80016b4 <move+0x234>)
 8001666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	440a      	add	r2, r1
 800166c:	4413      	add	r3, r2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <move+0x23c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	f000 812e 	beq.w	80018d8 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <move+0x234>)
 800167e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	441a      	add	r2, r3
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	4413      	add	r3, r2
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player1.direction;
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <move+0x230>)
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	3301      	adds	r3, #1
 8001694:	b2d0      	uxtb	r0, r2
 8001696:	4907      	ldr	r1, [pc, #28]	; (80016b4 <move+0x234>)
 8001698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800169a:	0092      	lsls	r2, r2, #2
 800169c:	440a      	add	r2, r1
 800169e:	4413      	add	r3, r2
 80016a0:	4602      	mov	r2, r0
 80016a2:	701a      	strb	r2, [r3, #0]
				player1.position_y = player1.position_y + 1;
 80016a4:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <move+0x230>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	3301      	adds	r3, #1
 80016aa:	4a01      	ldr	r2, [pc, #4]	; (80016b0 <move+0x230>)
 80016ac:	6093      	str	r3, [r2, #8]
}
 80016ae:	e113      	b.n	80018d8 <move+0x458>
 80016b0:	20000048 	.word	0x20000048
 80016b4:	200005b0 	.word	0x200005b0
 80016b8:	200000a4 	.word	0x200000a4
 80016bc:	200000a0 	.word	0x200000a0
	}else if (player == 2){
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	f040 8108 	bne.w	80018d8 <move+0x458>
		dir = player2.direction;
 80016c8:	4b86      	ldr	r3, [pc, #536]	; (80018e4 <move+0x464>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (dir == 1){
 80016ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d13f      	bne.n	8001754 <move+0x2d4>
			int curr_col = player2.position_x;
 80016d4:	4b83      	ldr	r3, [pc, #524]	; (80018e4 <move+0x464>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
			int curr_row = player2.position_y;
 80016da:	4b82      	ldr	r3, [pc, #520]	; (80018e4 <move+0x464>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(curr_col - 1 >= 0 && lcd[curr_col - 1][curr_row] != num_obstacle && lcd[curr_col - 1][curr_row] != num_wall){
 80016e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f340 80f8 	ble.w	80018d8 <move+0x458>
 80016e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ea:	3b01      	subs	r3, #1
 80016ec:	4a7e      	ldr	r2, [pc, #504]	; (80018e8 <move+0x468>)
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	441a      	add	r2, r3
 80016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f4:	4413      	add	r3, r2
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b7c      	ldr	r3, [pc, #496]	; (80018ec <move+0x46c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	f000 80ea 	beq.w	80018d8 <move+0x458>
 8001704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001706:	3b01      	subs	r3, #1
 8001708:	4a77      	ldr	r2, [pc, #476]	; (80018e8 <move+0x468>)
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	441a      	add	r2, r3
 800170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001710:	4413      	add	r3, r2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <move+0x470>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	f000 80dc 	beq.w	80018d8 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 8001720:	4a71      	ldr	r2, [pc, #452]	; (80018e8 <move+0x468>)
 8001722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	441a      	add	r2, r3
 8001728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172a:	4413      	add	r3, r2
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
				lcd[curr_col - 1][curr_row] = player2.direction;
 8001730:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <move+0x464>)
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001736:	3b01      	subs	r3, #1
 8001738:	b2d1      	uxtb	r1, r2
 800173a:	4a6b      	ldr	r2, [pc, #428]	; (80018e8 <move+0x468>)
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	441a      	add	r2, r3
 8001740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001742:	4413      	add	r3, r2
 8001744:	460a      	mov	r2, r1
 8001746:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x - 1;
 8001748:	4b66      	ldr	r3, [pc, #408]	; (80018e4 <move+0x464>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	3b01      	subs	r3, #1
 800174e:	4a65      	ldr	r2, [pc, #404]	; (80018e4 <move+0x464>)
 8001750:	6053      	str	r3, [r2, #4]
}
 8001752:	e0c1      	b.n	80018d8 <move+0x458>
		}else if (dir == 2){
 8001754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001756:	2b02      	cmp	r3, #2
 8001758:	d13f      	bne.n	80017da <move+0x35a>
			int curr_col = player2.position_x;
 800175a:	4b62      	ldr	r3, [pc, #392]	; (80018e4 <move+0x464>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
			int curr_row = player2.position_y;
 8001760:	4b60      	ldr	r3, [pc, #384]	; (80018e4 <move+0x464>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
			if(curr_row - 1 >= 0 && lcd[curr_col][curr_row - 1] != num_obstacle && lcd[curr_col][curr_row - 1] != num_wall){
 8001766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001768:	2b00      	cmp	r3, #0
 800176a:	f340 80b5 	ble.w	80018d8 <move+0x458>
 800176e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001770:	3b01      	subs	r3, #1
 8001772:	495d      	ldr	r1, [pc, #372]	; (80018e8 <move+0x468>)
 8001774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001776:	0092      	lsls	r2, r2, #2
 8001778:	440a      	add	r2, r1
 800177a:	4413      	add	r3, r2
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	4b5a      	ldr	r3, [pc, #360]	; (80018ec <move+0x46c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	f000 80a7 	beq.w	80018d8 <move+0x458>
 800178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178c:	3b01      	subs	r3, #1
 800178e:	4956      	ldr	r1, [pc, #344]	; (80018e8 <move+0x468>)
 8001790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	440a      	add	r2, r1
 8001796:	4413      	add	r3, r2
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	4b54      	ldr	r3, [pc, #336]	; (80018f0 <move+0x470>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f000 8099 	beq.w	80018d8 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 80017a6:	4a50      	ldr	r2, [pc, #320]	; (80018e8 <move+0x468>)
 80017a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	441a      	add	r2, r3
 80017ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b0:	4413      	add	r3, r2
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row - 1] = player2.direction;
 80017b6:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <move+0x464>)
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017bc:	3b01      	subs	r3, #1
 80017be:	b2d0      	uxtb	r0, r2
 80017c0:	4949      	ldr	r1, [pc, #292]	; (80018e8 <move+0x468>)
 80017c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	440a      	add	r2, r1
 80017c8:	4413      	add	r3, r2
 80017ca:	4602      	mov	r2, r0
 80017cc:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y - 1;
 80017ce:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <move+0x464>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	4a43      	ldr	r2, [pc, #268]	; (80018e4 <move+0x464>)
 80017d6:	6093      	str	r3, [r2, #8]
}
 80017d8:	e07e      	b.n	80018d8 <move+0x458>
		}else if (dir == 3){
 80017da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d13c      	bne.n	800185a <move+0x3da>
			int curr_col = player2.position_x;
 80017e0:	4b40      	ldr	r3, [pc, #256]	; (80018e4 <move+0x464>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	643b      	str	r3, [r7, #64]	; 0x40
			int curr_row = player2.position_y;
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <move+0x464>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(curr_col + 1 <= 19 && lcd[curr_col + 1][curr_row] != num_obstacle && lcd[curr_col + 1][curr_row] != num_wall){
 80017ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017ee:	2b12      	cmp	r3, #18
 80017f0:	dc72      	bgt.n	80018d8 <move+0x458>
 80017f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017f4:	3301      	adds	r3, #1
 80017f6:	4a3c      	ldr	r2, [pc, #240]	; (80018e8 <move+0x468>)
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	441a      	add	r2, r3
 80017fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	4b39      	ldr	r3, [pc, #228]	; (80018ec <move+0x46c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d065      	beq.n	80018d8 <move+0x458>
 800180c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800180e:	3301      	adds	r3, #1
 8001810:	4a35      	ldr	r2, [pc, #212]	; (80018e8 <move+0x468>)
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	441a      	add	r2, r3
 8001816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <move+0x470>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d058      	beq.n	80018d8 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 8001826:	4a30      	ldr	r2, [pc, #192]	; (80018e8 <move+0x468>)
 8001828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	441a      	add	r2, r3
 800182e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001830:	4413      	add	r3, r2
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
				lcd[curr_col + 1][curr_row] = player2.direction;
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <move+0x464>)
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800183c:	3301      	adds	r3, #1
 800183e:	b2d1      	uxtb	r1, r2
 8001840:	4a29      	ldr	r2, [pc, #164]	; (80018e8 <move+0x468>)
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	441a      	add	r2, r3
 8001846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001848:	4413      	add	r3, r2
 800184a:	460a      	mov	r2, r1
 800184c:	701a      	strb	r2, [r3, #0]
				player2.position_x = player2.position_x + 1;
 800184e:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <move+0x464>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	3301      	adds	r3, #1
 8001854:	4a23      	ldr	r2, [pc, #140]	; (80018e4 <move+0x464>)
 8001856:	6053      	str	r3, [r2, #4]
}
 8001858:	e03e      	b.n	80018d8 <move+0x458>
		}else if (dir == 4){
 800185a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800185c:	2b04      	cmp	r3, #4
 800185e:	d13b      	bne.n	80018d8 <move+0x458>
			int curr_col = player2.position_x;
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <move+0x464>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	64bb      	str	r3, [r7, #72]	; 0x48
			int curr_row = player2.position_y;
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <move+0x464>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	647b      	str	r3, [r7, #68]	; 0x44
			if(curr_row + 1 <= 3 && lcd[curr_col][curr_row + 1] != num_obstacle && lcd[curr_col][curr_row + 1] != num_wall){
 800186c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800186e:	2b02      	cmp	r3, #2
 8001870:	dc32      	bgt.n	80018d8 <move+0x458>
 8001872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001874:	3301      	adds	r3, #1
 8001876:	491c      	ldr	r1, [pc, #112]	; (80018e8 <move+0x468>)
 8001878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800187a:	0092      	lsls	r2, r2, #2
 800187c:	440a      	add	r2, r1
 800187e:	4413      	add	r3, r2
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <move+0x46c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d025      	beq.n	80018d8 <move+0x458>
 800188c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800188e:	3301      	adds	r3, #1
 8001890:	4915      	ldr	r1, [pc, #84]	; (80018e8 <move+0x468>)
 8001892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	440a      	add	r2, r1
 8001898:	4413      	add	r3, r2
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <move+0x470>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d018      	beq.n	80018d8 <move+0x458>
				lcd[curr_col][curr_row] = 0; //TODO add prizes
 80018a6:	4a10      	ldr	r2, [pc, #64]	; (80018e8 <move+0x468>)
 80018a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	441a      	add	r2, r3
 80018ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b0:	4413      	add	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
				lcd[curr_col][curr_row + 1] = player2.direction;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <move+0x464>)
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018bc:	3301      	adds	r3, #1
 80018be:	b2d0      	uxtb	r0, r2
 80018c0:	4909      	ldr	r1, [pc, #36]	; (80018e8 <move+0x468>)
 80018c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	440a      	add	r2, r1
 80018c8:	4413      	add	r3, r2
 80018ca:	4602      	mov	r2, r0
 80018cc:	701a      	strb	r2, [r3, #0]
				player2.position_y = player2.position_y + 1;
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <move+0x464>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	3301      	adds	r3, #1
 80018d4:	4a03      	ldr	r2, [pc, #12]	; (80018e4 <move+0x464>)
 80018d6:	6093      	str	r3, [r2, #8]
}
 80018d8:	bf00      	nop
 80018da:	3754      	adds	r7, #84	; 0x54
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	20000064 	.word	0x20000064
 80018e8:	200005b0 	.word	0x200005b0
 80018ec:	200000a4 	.word	0x200000a4
 80018f0:	200000a0 	.word	0x200000a0

080018f4 <uart_rx_enable_it>:
char character;
char input[50];
int  index_arr = 0;
extern UART_HandleTypeDef huart1;

void uart_rx_enable_it(void) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &character, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	4903      	ldr	r1, [pc, #12]	; (8001908 <uart_rx_enable_it+0x14>)
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <uart_rx_enable_it+0x18>)
 80018fe:	f003 fc51 	bl	80051a4 <HAL_UART_Receive_IT>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000600 	.word	0x20000600
 800190c:	20000218 	.word	0x20000218

08001910 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001910:	b580      	push	{r7, lr}
 8001912:	b09c      	sub	sp, #112	; 0x70
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	char data[100];

    if (huart->Instance == USART1){
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a13      	ldr	r2, [pc, #76]	; (800196c <HAL_UART_RxCpltCallback+0x5c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d11f      	bne.n	8001962 <HAL_UART_RxCpltCallback+0x52>
    	if(character != 10){
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_UART_RxCpltCallback+0x60>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b0a      	cmp	r3, #10
 8001928:	d009      	beq.n	800193e <HAL_UART_RxCpltCallback+0x2e>
    		input[index_arr++] = character;
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_UART_RxCpltCallback+0x64>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	4910      	ldr	r1, [pc, #64]	; (8001974 <HAL_UART_RxCpltCallback+0x64>)
 8001932:	600a      	str	r2, [r1, #0]
 8001934:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <HAL_UART_RxCpltCallback+0x60>)
 8001936:	7811      	ldrb	r1, [r2, #0]
 8001938:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <HAL_UART_RxCpltCallback+0x68>)
 800193a:	54d1      	strb	r1, [r2, r3]
 800193c:	e00f      	b.n	800195e <HAL_UART_RxCpltCallback+0x4e>
    	}else{
			input[index_arr++] = '\0';
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <HAL_UART_RxCpltCallback+0x64>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	490b      	ldr	r1, [pc, #44]	; (8001974 <HAL_UART_RxCpltCallback+0x64>)
 8001946:	600a      	str	r2, [r1, #0]
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <HAL_UART_RxCpltCallback+0x68>)
 800194a:	2100      	movs	r1, #0
 800194c:	54d1      	strb	r1, [r2, r3]
			index_arr = 0;
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_UART_RxCpltCallback+0x64>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
			int value;
			HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001954:	2200      	movs	r2, #0
 8001956:	4909      	ldr	r1, [pc, #36]	; (800197c <HAL_UART_RxCpltCallback+0x6c>)
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <HAL_UART_RxCpltCallback+0x70>)
 800195a:	f002 fd74 	bl	8004446 <HAL_RTC_GetTime>
//			sprintf(timeStr, "%02d:%02d:%02d", mytime.Hours, mytime.Minutes, mytime.Seconds);
		}
		uart_rx_enable_it();
 800195e:	f7ff ffc9 	bl	80018f4 <uart_rx_enable_it>
    }
}
 8001962:	bf00      	nop
 8001964:	3770      	adds	r7, #112	; 0x70
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40013800 	.word	0x40013800
 8001970:	20000600 	.word	0x20000600
 8001974:	20000638 	.word	0x20000638
 8001978:	20000604 	.word	0x20000604
 800197c:	2000059c 	.word	0x2000059c
 8001980:	20000148 	.word	0x20000148

08001984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_MspInit+0x44>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <HAL_MspInit+0x44>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6193      	str	r3, [r2, #24]
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_MspInit+0x44>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_MspInit+0x44>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <HAL_MspInit+0x44>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ac:	61d3      	str	r3, [r2, #28]
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_MspInit+0x44>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ba:	2007      	movs	r0, #7
 80019bc:	f000 fb76 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000

080019cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_I2C_MspInit+0x7c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d127      	bne.n	8001a3e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_I2C_MspInit+0x80>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	4a16      	ldr	r2, [pc, #88]	; (8001a4c <HAL_I2C_MspInit+0x80>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	6153      	str	r3, [r2, #20]
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_I2C_MspInit+0x80>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001a06:	23c0      	movs	r3, #192	; 0xc0
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0a:	2312      	movs	r3, #18
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a16:	2304      	movs	r3, #4
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480b      	ldr	r0, [pc, #44]	; (8001a50 <HAL_I2C_MspInit+0x84>)
 8001a22:	f000 fbfb 	bl	800221c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_I2C_MspInit+0x80>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_I2C_MspInit+0x80>)
 8001a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_I2C_MspInit+0x80>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40005400 	.word	0x40005400
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	48000400 	.word	0x48000400

08001a54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <HAL_RTC_MspInit+0x44>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d111      	bne.n	8001a8a <HAL_RTC_MspInit+0x36>
 8001a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a6a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a74:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_RTC_MspInit+0x48>)
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	461a      	mov	r2, r3
 8001a86:	2301      	movs	r3, #1
 8001a88:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40002800 	.word	0x40002800
 8001a9c:	10908100 	.word	0x10908100

08001aa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_SPI_MspInit+0x7c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d128      	bne.n	8001b14 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_SPI_MspInit+0x80>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	4a16      	ldr	r2, [pc, #88]	; (8001b20 <HAL_SPI_MspInit+0x80>)
 8001ac8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001acc:	6193      	str	r3, [r2, #24]
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_SPI_MspInit+0x80>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_SPI_MspInit+0x80>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_SPI_MspInit+0x80>)
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	6153      	str	r3, [r2, #20]
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_SPI_MspInit+0x80>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001af2:	23e0      	movs	r3, #224	; 0xe0
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b02:	2305      	movs	r3, #5
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b10:	f000 fb84 	bl	800221c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40013000 	.word	0x40013000
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <HAL_TIM_Base_MspInit+0x44>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d113      	bne.n	8001b5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <HAL_TIM_Base_MspInit+0x48>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <HAL_TIM_Base_MspInit+0x48>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	61d3      	str	r3, [r2, #28]
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_TIM_Base_MspInit+0x48>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	201e      	movs	r0, #30
 8001b54:	f000 fab5 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b58:	201e      	movs	r0, #30
 8001b5a:	f000 face 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40000800 	.word	0x40000800
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2a      	ldr	r2, [pc, #168]	; (8001c38 <HAL_UART_MspInit+0xc8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d14d      	bne.n	8001c2e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_UART_MspInit+0xcc>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <HAL_UART_MspInit+0xcc>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9c:	6193      	str	r3, [r2, #24]
 8001b9e:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_UART_MspInit+0xcc>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_UART_MspInit+0xcc>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <HAL_UART_MspInit+0xcc>)
 8001bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bb4:	6153      	str	r3, [r2, #20]
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_UART_MspInit+0xcc>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_UART_MspInit+0xcc>)
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_UART_MspInit+0xcc>)
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bcc:	6153      	str	r3, [r2, #20]
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_UART_MspInit+0xcc>)
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC5     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bda:	2320      	movs	r3, #32
 8001bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bea:	2307      	movs	r3, #7
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4812      	ldr	r0, [pc, #72]	; (8001c40 <HAL_UART_MspInit+0xd0>)
 8001bf6:	f000 fb11 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1a:	f000 faff 	bl	800221c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2025      	movs	r0, #37	; 0x25
 8001c24:	f000 fa4d 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c28:	2025      	movs	r0, #37	; 0x25
 8001c2a:	f000 fa66 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c2e:	bf00      	nop
 8001c30:	3728      	adds	r7, #40	; 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40013800 	.word	0x40013800
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	48000800 	.word	0x48000800

08001c44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <HAL_PCD_MspInit+0x80>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d129      	bne.n	8001cba <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_PCD_MspInit+0x84>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	4a17      	ldr	r2, [pc, #92]	; (8001cc8 <HAL_PCD_MspInit+0x84>)
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	6153      	str	r3, [r2, #20]
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_PCD_MspInit+0x84>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001c7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001c90:	230e      	movs	r3, #14
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9e:	f000 fabd 	bl	800221c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_PCD_MspInit+0x84>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <HAL_PCD_MspInit+0x84>)
 8001ca8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_PCD_MspInit+0x84>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40005c00 	.word	0x40005c00
 8001cc8:	40021000 	.word	0x40021000

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <MemManage_Handler+0x4>

08001cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d18:	f000 f8b4 	bl	8001e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f000 fc3d 	bl	80025a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d32:	2002      	movs	r0, #2
 8001d34:	f000 fc36 	bl	80025a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001d40:	2004      	movs	r0, #4
 8001d42:	f000 fc2f 	bl	80025a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001d4e:	2008      	movs	r0, #8
 8001d50:	f000 fc28 	bl	80025a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <TIM4_IRQHandler+0x10>)
 8001d5e:	f002 fdfb 	bl	8004958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200001cc 	.word	0x200001cc

08001d6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <USART1_IRQHandler+0x10>)
 8001d72:	f003 fa5b 	bl	800522c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000218 	.word	0x20000218

08001d80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <SystemInit+0x20>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <SystemInit+0x20>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ddc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da8:	f7ff ffea 	bl	8001d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dae:	490d      	ldr	r1, [pc, #52]	; (8001de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001db0:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <LoopForever+0xe>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db4:	e002      	b.n	8001dbc <LoopCopyDataInit>

08001db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dba:	3304      	adds	r3, #4

08001dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc0:	d3f9      	bcc.n	8001db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc4:	4c0a      	ldr	r4, [pc, #40]	; (8001df0 <LoopForever+0x16>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc8:	e001      	b.n	8001dce <LoopFillZerobss>

08001dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dcc:	3204      	adds	r2, #4

08001dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd0:	d3fb      	bcc.n	8001dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f004 fbfd 	bl	80065d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dd6:	f7fe fd75 	bl	80008c4 <main>

08001dda <LoopForever>:

LoopForever:
    b LoopForever
 8001dda:	e7fe      	b.n	8001dda <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ddc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de4:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001de8:	080066b0 	.word	0x080066b0
  ldr r2, =_sbss
 8001dec:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001df0:	20000640 	.word	0x20000640

08001df4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <ADC1_2_IRQHandler>
	...

08001df8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <HAL_Init+0x28>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <HAL_Init+0x28>)
 8001e02:	f043 0310 	orr.w	r3, r3, #16
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e08:	2003      	movs	r0, #3
 8001e0a:	f000 f94f 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f000 f808 	bl	8001e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e14:	f7ff fdb6 	bl	8001984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40022000 	.word	0x40022000

08001e24 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_InitTick+0x54>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_InitTick+0x58>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f967 	bl	8002116 <HAL_SYSTICK_Config>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00e      	b.n	8001e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b0f      	cmp	r3, #15
 8001e56:	d80a      	bhi.n	8001e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e60:	f000 f92f 	bl	80020c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e64:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <HAL_InitTick+0x5c>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200000a8 	.word	0x200000a8
 8001e7c:	200000b0 	.word	0x200000b0
 8001e80:	200000ac 	.word	0x200000ac

08001e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x20>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	200000b0 	.word	0x200000b0
 8001ea8:	2000063c 	.word	0x2000063c

08001eac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;  
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_GetTick+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	2000063c 	.word	0x2000063c

08001ec4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff ffee 	bl	8001eac <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001edc:	d005      	beq.n	8001eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_Delay+0x44>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001eea:	bf00      	nop
 8001eec:	f7ff ffde 	bl	8001eac <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d8f7      	bhi.n	8001eec <HAL_Delay+0x28>
  {
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200000b0 	.word	0x200000b0

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800208c:	f7ff ff8e 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff29 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff3e 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff8e 	bl	8002000 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5d 	bl	8001fac <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff31 	bl	8001f70 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffa2 	bl	8002068 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800213c:	2b02      	cmp	r3, #2
 800213e:	d008      	beq.n	8002152 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2204      	movs	r2, #4
 8002144:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e020      	b.n	8002194 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 020e 	bic.w	r2, r2, #14
 8002160:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d005      	beq.n	80021c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2204      	movs	r2, #4
 80021ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e027      	b.n	8002212 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 020e 	bic.w	r2, r2, #14
 80021d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ea:	2101      	movs	r1, #1
 80021ec:	fa01 f202 	lsl.w	r2, r1, r2
 80021f0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
    } 
  }
  return status;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222a:	e154      	b.n	80024d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	4013      	ands	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8146 	beq.w	80024d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b01      	cmp	r3, #1
 800224e:	d005      	beq.n	800225c <HAL_GPIO_Init+0x40>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d130      	bne.n	80022be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002292:	2201      	movs	r2, #1
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	f003 0201 	and.w	r2, r3, #1
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d017      	beq.n	80022fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	2203      	movs	r2, #3
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d123      	bne.n	800234e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	08da      	lsrs	r2, r3, #3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3208      	adds	r2, #8
 8002348:	6939      	ldr	r1, [r7, #16]
 800234a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	2203      	movs	r2, #3
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0203 	and.w	r2, r3, #3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 80a0 	beq.w	80024d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002390:	4b58      	ldr	r3, [pc, #352]	; (80024f4 <HAL_GPIO_Init+0x2d8>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a57      	ldr	r2, [pc, #348]	; (80024f4 <HAL_GPIO_Init+0x2d8>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b55      	ldr	r3, [pc, #340]	; (80024f4 <HAL_GPIO_Init+0x2d8>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023a8:	4a53      	ldr	r2, [pc, #332]	; (80024f8 <HAL_GPIO_Init+0x2dc>)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	3302      	adds	r3, #2
 80023b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	220f      	movs	r2, #15
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023d2:	d019      	beq.n	8002408 <HAL_GPIO_Init+0x1ec>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a49      	ldr	r2, [pc, #292]	; (80024fc <HAL_GPIO_Init+0x2e0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d013      	beq.n	8002404 <HAL_GPIO_Init+0x1e8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a48      	ldr	r2, [pc, #288]	; (8002500 <HAL_GPIO_Init+0x2e4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00d      	beq.n	8002400 <HAL_GPIO_Init+0x1e4>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a47      	ldr	r2, [pc, #284]	; (8002504 <HAL_GPIO_Init+0x2e8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d007      	beq.n	80023fc <HAL_GPIO_Init+0x1e0>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a46      	ldr	r2, [pc, #280]	; (8002508 <HAL_GPIO_Init+0x2ec>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_GPIO_Init+0x1dc>
 80023f4:	2304      	movs	r3, #4
 80023f6:	e008      	b.n	800240a <HAL_GPIO_Init+0x1ee>
 80023f8:	2305      	movs	r3, #5
 80023fa:	e006      	b.n	800240a <HAL_GPIO_Init+0x1ee>
 80023fc:	2303      	movs	r3, #3
 80023fe:	e004      	b.n	800240a <HAL_GPIO_Init+0x1ee>
 8002400:	2302      	movs	r3, #2
 8002402:	e002      	b.n	800240a <HAL_GPIO_Init+0x1ee>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_GPIO_Init+0x1ee>
 8002408:	2300      	movs	r3, #0
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	f002 0203 	and.w	r2, r2, #3
 8002410:	0092      	lsls	r2, r2, #2
 8002412:	4093      	lsls	r3, r2
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800241a:	4937      	ldr	r1, [pc, #220]	; (80024f8 <HAL_GPIO_Init+0x2dc>)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	3302      	adds	r3, #2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002428:	4b38      	ldr	r3, [pc, #224]	; (800250c <HAL_GPIO_Init+0x2f0>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800244c:	4a2f      	ldr	r2, [pc, #188]	; (800250c <HAL_GPIO_Init+0x2f0>)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002452:	4b2e      	ldr	r3, [pc, #184]	; (800250c <HAL_GPIO_Init+0x2f0>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002476:	4a25      	ldr	r2, [pc, #148]	; (800250c <HAL_GPIO_Init+0x2f0>)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_GPIO_Init+0x2f0>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024a0:	4a1a      	ldr	r2, [pc, #104]	; (800250c <HAL_GPIO_Init+0x2f0>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_GPIO_Init+0x2f0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024ca:	4a10      	ldr	r2, [pc, #64]	; (800250c <HAL_GPIO_Init+0x2f0>)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f47f aea3 	bne.w	800222c <HAL_GPIO_Init+0x10>
  }
}
 80024e6:	bf00      	nop
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010000 	.word	0x40010000
 80024fc:	48000400 	.word	0x48000400
 8002500:	48000800 	.word	0x48000800
 8002504:	48000c00 	.word	0x48000c00
 8002508:	48001000 	.word	0x48001000
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	887b      	ldrh	r3, [r7, #2]
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	e001      	b.n	8002532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800255c:	e002      	b.n	8002564 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002582:	887a      	ldrh	r2, [r7, #2]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4013      	ands	r3, r2
 8002588:	041a      	lsls	r2, r3, #16
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	43d9      	mvns	r1, r3
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	400b      	ands	r3, r1
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fc94 	bl	8000ef0 <HAL_GPIO_EXTI_Callback>
  }
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40010400 	.word	0x40010400

080025d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e081      	b.n	80026ea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff f9e6 	bl	80019cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2224      	movs	r2, #36	; 0x24
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002624:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002634:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d107      	bne.n	800264e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	e006      	b.n	800265c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800265a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d104      	bne.n	800266e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800266c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800267c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002680:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002690:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69d9      	ldr	r1, [r3, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1a      	ldr	r2, [r3, #32]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b20      	cmp	r3, #32
 8002706:	d138      	bne.n	800277a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002712:	2302      	movs	r3, #2
 8002714:	e032      	b.n	800277c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2224      	movs	r2, #36	; 0x24
 8002722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002744:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6819      	ldr	r1, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800277a:	2302      	movs	r3, #2
  }
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b20      	cmp	r3, #32
 800279c:	d139      	bne.n	8002812 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e033      	b.n	8002814 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2224      	movs	r2, #36	; 0x24
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0201 	orr.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002812:	2302      	movs	r3, #2
  }
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002822:	b08b      	sub	sp, #44	; 0x2c
 8002824:	af06      	add	r7, sp, #24
 8002826:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0c4      	b.n	80029bc <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff f9fc 	bl	8001c44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2203      	movs	r2, #3
 8002850:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f003 fe7d 	bl	8006558 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	e040      	b.n	80028e6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	3301      	adds	r3, #1
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	3303      	adds	r3, #3
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	3338      	adds	r3, #56	; 0x38
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	333c      	adds	r3, #60	; 0x3c
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	3340      	adds	r3, #64	; 0x40
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	3301      	adds	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d3b9      	bcc.n	8002864 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e044      	b.n	8002980 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	440b      	add	r3, r1
 800291a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	3301      	adds	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	429a      	cmp	r2, r3
 8002988:	d3b5      	bcc.n	80028f6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	687e      	ldr	r6, [r7, #4]
 8002992:	466d      	mov	r5, sp
 8002994:	f106 0410 	add.w	r4, r6, #16
 8002998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	602b      	str	r3, [r5, #0]
 80029a0:	1d33      	adds	r3, r6, #4
 80029a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029a4:	6838      	ldr	r0, [r7, #0]
 80029a6:	f003 fdf2 	bl	800658e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f001 b823 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 817d 	beq.w	8002cfa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a00:	4bbc      	ldr	r3, [pc, #752]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d00c      	beq.n	8002a26 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a0c:	4bb9      	ldr	r3, [pc, #740]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d15c      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x10e>
 8002a18:	4bb6      	ldr	r3, [pc, #728]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a24:	d155      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x10e>
 8002a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8002a3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_OscConfig+0x94>
 8002a52:	4ba8      	ldr	r3, [pc, #672]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	e015      	b.n	8002a84 <HAL_RCC_OscConfig+0xc0>
 8002a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a74:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a80:	4b9c      	ldr	r3, [pc, #624]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a88:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a90:	fa92 f2a2 	rbit	r2, r2
 8002a94:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a98:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a9c:	fab2 f282 	clz	r2, r2
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f042 0220 	orr.w	r2, r2, #32
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	f002 021f 	and.w	r2, r2, #31
 8002aac:	2101      	movs	r1, #1
 8002aae:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 811f 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x334>
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 8116 	bne.w	8002cf8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f000 bfaf 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x12e>
 8002ae4:	4b83      	ldr	r3, [pc, #524]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a82      	ldr	r2, [pc, #520]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	e036      	b.n	8002b60 <HAL_RCC_OscConfig+0x19c>
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x158>
 8002b02:	4b7c      	ldr	r3, [pc, #496]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a7b      	ldr	r2, [pc, #492]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b79      	ldr	r3, [pc, #484]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a78      	ldr	r2, [pc, #480]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e021      	b.n	8002b60 <HAL_RCC_OscConfig+0x19c>
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x184>
 8002b2e:	4b71      	ldr	r3, [pc, #452]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a70      	ldr	r2, [pc, #448]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b6e      	ldr	r3, [pc, #440]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a6d      	ldr	r2, [pc, #436]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0x19c>
 8002b48:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a69      	ldr	r2, [pc, #420]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b67      	ldr	r3, [pc, #412]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a66      	ldr	r2, [pc, #408]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b60:	4b64      	ldr	r3, [pc, #400]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	f023 020f 	bic.w	r2, r3, #15
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	495f      	ldr	r1, [pc, #380]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d059      	beq.n	8002c3e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7ff f98f 	bl	8001eac <HAL_GetTick>
 8002b8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b94:	f7ff f98a 	bl	8001eac <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b64      	cmp	r3, #100	; 0x64
 8002ba2:	d902      	bls.n	8002baa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f000 bf43 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
 8002baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002bbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d102      	bne.n	8002bdc <HAL_RCC_OscConfig+0x218>
 8002bd6:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	e015      	b.n	8002c08 <HAL_RCC_OscConfig+0x244>
 8002bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bf8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002c04:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c0c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c10:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c14:	fa92 f2a2 	rbit	r2, r2
 8002c18:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c1c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c20:	fab2 f282 	clz	r2, r2
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	f042 0220 	orr.w	r2, r2, #32
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	f002 021f 	and.w	r2, r2, #31
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f202 	lsl.w	r2, r1, r2
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ab      	beq.n	8002b94 <HAL_RCC_OscConfig+0x1d0>
 8002c3c:	e05d      	b.n	8002cfa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7ff f935 	bl	8001eac <HAL_GetTick>
 8002c42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c48:	f7ff f930 	bl	8001eac <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b64      	cmp	r3, #100	; 0x64
 8002c56:	d902      	bls.n	8002c5e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	f000 bee9 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
 8002c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c62:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2cc>
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	e015      	b.n	8002cbc <HAL_RCC_OscConfig+0x2f8>
 8002c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c94:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ca4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002cac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cc0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002cc4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002cc8:	fa92 f2a2 	rbit	r2, r2
 8002ccc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002cd0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002cd4:	fab2 f282 	clz	r2, r2
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	f042 0220 	orr.w	r2, r2, #32
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	f002 021f 	and.w	r2, r2, #31
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ab      	bne.n	8002c48 <HAL_RCC_OscConfig+0x284>
 8002cf0:	e003      	b.n	8002cfa <HAL_RCC_OscConfig+0x336>
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 817d 	beq.w	800300a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d10:	4ba6      	ldr	r3, [pc, #664]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d1c:	4ba3      	ldr	r3, [pc, #652]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d172      	bne.n	8002e0e <HAL_RCC_OscConfig+0x44a>
 8002d28:	4ba0      	ldr	r3, [pc, #640]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d16c      	bne.n	8002e0e <HAL_RCC_OscConfig+0x44a>
 8002d34:	2302      	movs	r3, #2
 8002d36:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d46:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d102      	bne.n	8002d64 <HAL_RCC_OscConfig+0x3a0>
 8002d5e:	4b93      	ldr	r3, [pc, #588]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	e013      	b.n	8002d8c <HAL_RCC_OscConfig+0x3c8>
 8002d64:	2302      	movs	r3, #2
 8002d66:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d76:	2302      	movs	r3, #2
 8002d78:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d88:	4b88      	ldr	r3, [pc, #544]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d92:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d96:	fa92 f2a2 	rbit	r2, r2
 8002d9a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d9e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002da2:	fab2 f282 	clz	r2, r2
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	f042 0220 	orr.w	r2, r2, #32
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	f002 021f 	and.w	r2, r2, #31
 8002db2:	2101      	movs	r1, #1
 8002db4:	fa01 f202 	lsl.w	r2, r1, r2
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x410>
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d002      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f000 be2e 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	4b75      	ldr	r3, [pc, #468]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	21f8      	movs	r1, #248	; 0xf8
 8002dea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002df2:	fa91 f1a1 	rbit	r1, r1
 8002df6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002dfa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002dfe:	fab1 f181 	clz	r1, r1
 8002e02:	b2c9      	uxtb	r1, r1
 8002e04:	408b      	lsls	r3, r1
 8002e06:	4969      	ldr	r1, [pc, #420]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0c:	e0fd      	b.n	800300a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8088 	beq.w	8002f30 <HAL_RCC_OscConfig+0x56c>
 8002e20:	2301      	movs	r3, #1
 8002e22:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	461a      	mov	r2, r3
 8002e48:	2301      	movs	r3, #1
 8002e4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7ff f82e 	bl	8001eac <HAL_GetTick>
 8002e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e56:	f7ff f829 	bl	8001eac <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d902      	bls.n	8002e6c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	f000 bde2 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_RCC_OscConfig+0x4d8>
 8002e96:	4b45      	ldr	r3, [pc, #276]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	e013      	b.n	8002ec4 <HAL_RCC_OscConfig+0x500>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002eae:	2302      	movs	r3, #2
 8002eb0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002eb4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ec0:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002eca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ece:	fa92 f2a2 	rbit	r2, r2
 8002ed2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ed6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002eda:	fab2 f282 	clz	r2, r2
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f042 0220 	orr.w	r2, r2, #32
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f002 021f 	and.w	r2, r2, #31
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0af      	beq.n	8002e56 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	21f8      	movs	r1, #248	; 0xf8
 8002f0c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002f14:	fa91 f1a1 	rbit	r1, r1
 8002f18:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002f1c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002f20:	fab1 f181 	clz	r1, r1
 8002f24:	b2c9      	uxtb	r1, r1
 8002f26:	408b      	lsls	r3, r1
 8002f28:	4920      	ldr	r1, [pc, #128]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
 8002f2e:	e06c      	b.n	800300a <HAL_RCC_OscConfig+0x646>
 8002f30:	2301      	movs	r3, #1
 8002f32:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	461a      	mov	r2, r3
 8002f58:	2300      	movs	r3, #0
 8002f5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe ffa6 	bl	8001eac <HAL_GetTick>
 8002f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f66:	f7fe ffa1 	bl	8001eac <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d902      	bls.n	8002f7c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	f000 bd5a 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d104      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x5ec>
 8002fa6:	4b01      	ldr	r3, [pc, #4]	; (8002fac <HAL_RCC_OscConfig+0x5e8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	e015      	b.n	8002fd8 <HAL_RCC_OscConfig+0x614>
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002fc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002fd4:	4bc8      	ldr	r3, [pc, #800]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002fde:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002fe2:	fa92 f2a2 	rbit	r2, r2
 8002fe6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002fea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002fee:	fab2 f282 	clz	r2, r2
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	f042 0220 	orr.w	r2, r2, #32
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	f002 021f 	and.w	r2, r2, #31
 8002ffe:	2101      	movs	r1, #1
 8003000:	fa01 f202 	lsl.w	r2, r1, r2
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1ad      	bne.n	8002f66 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8110 	beq.w	8003240 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003024:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d079      	beq.n	8003124 <HAL_RCC_OscConfig+0x760>
 8003030:	2301      	movs	r3, #1
 8003032:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	4bab      	ldr	r3, [pc, #684]	; (80032fc <HAL_RCC_OscConfig+0x938>)
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	461a      	mov	r2, r3
 8003056:	2301      	movs	r3, #1
 8003058:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305a:	f7fe ff27 	bl	8001eac <HAL_GetTick>
 800305e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003064:	f7fe ff22 	bl	8001eac <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d902      	bls.n	800307a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	f000 bcdb 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
 800307a:	2302      	movs	r3, #2
 800307c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003094:	2202      	movs	r2, #2
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	fa93 f2a3 	rbit	r2, r3
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030b8:	2202      	movs	r2, #2
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	fa93 f2a3 	rbit	r2, r3
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d4:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 80030d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030e0:	2102      	movs	r1, #2
 80030e2:	6019      	str	r1, [r3, #0]
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	fa93 f1a3 	rbit	r1, r3
 80030f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030fa:	6019      	str	r1, [r3, #0]
  return result;
 80030fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003100:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0a0      	beq.n	8003064 <HAL_RCC_OscConfig+0x6a0>
 8003122:	e08d      	b.n	8003240 <HAL_RCC_OscConfig+0x87c>
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	fa93 f2a3 	rbit	r2, r3
 800313e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003142:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003146:	601a      	str	r2, [r3, #0]
  return result;
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003150:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	4b68      	ldr	r3, [pc, #416]	; (80032fc <HAL_RCC_OscConfig+0x938>)
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	461a      	mov	r2, r3
 8003162:	2300      	movs	r3, #0
 8003164:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7fe fea1 	bl	8001eac <HAL_GetTick>
 800316a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003170:	f7fe fe9c 	bl	8001eac <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d902      	bls.n	8003186 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	f000 bc55 	b.w	8003a30 <HAL_RCC_OscConfig+0x106c>
 8003186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800318e:	2202      	movs	r2, #2
 8003190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	fa93 f2a3 	rbit	r2, r3
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031b2:	2202      	movs	r2, #2
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	fa93 f2a3 	rbit	r2, r3
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031d6:	2202      	movs	r2, #2
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	fa93 f2a3 	rbit	r2, r3
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f2:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 80031f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031fe:	2102      	movs	r1, #2
 8003200:	6019      	str	r1, [r3, #0]
 8003202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003206:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	fa93 f1a3 	rbit	r1, r3
 8003210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003214:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003218:	6019      	str	r1, [r3, #0]
  return result;
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	2101      	movs	r1, #1
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d197      	bne.n	8003170 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 81a1 	beq.w	8003598 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325c:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d116      	bne.n	8003296 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003272:	61d3      	str	r3, [r2, #28]
 8003274:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800327c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003280:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800328e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <HAL_RCC_OscConfig+0x93c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d11a      	bne.n	80032d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <HAL_RCC_OscConfig+0x93c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a16      	ldr	r2, [pc, #88]	; (8003300 <HAL_RCC_OscConfig+0x93c>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ae:	f7fe fdfd 	bl	8001eac <HAL_GetTick>
 80032b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b6:	e009      	b.n	80032cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b8:	f7fe fdf8 	bl	8001eac <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b64      	cmp	r3, #100	; 0x64
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e3b1      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_RCC_OscConfig+0x93c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ef      	beq.n	80032b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d10d      	bne.n	8003304 <HAL_RCC_OscConfig+0x940>
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4a02      	ldr	r2, [pc, #8]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6213      	str	r3, [r2, #32]
 80032f4:	e03c      	b.n	8003370 <HAL_RCC_OscConfig+0x9ac>
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000
 80032fc:	10908120 	.word	0x10908120
 8003300:	40007000 	.word	0x40007000
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10c      	bne.n	800332e <HAL_RCC_OscConfig+0x96a>
 8003314:	4bc1      	ldr	r3, [pc, #772]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4ac0      	ldr	r2, [pc, #768]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6213      	str	r3, [r2, #32]
 8003320:	4bbe      	ldr	r3, [pc, #760]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	4abd      	ldr	r2, [pc, #756]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003326:	f023 0304 	bic.w	r3, r3, #4
 800332a:	6213      	str	r3, [r2, #32]
 800332c:	e020      	b.n	8003370 <HAL_RCC_OscConfig+0x9ac>
 800332e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b05      	cmp	r3, #5
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x994>
 800333e:	4bb7      	ldr	r3, [pc, #732]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4ab6      	ldr	r2, [pc, #728]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003344:	f043 0304 	orr.w	r3, r3, #4
 8003348:	6213      	str	r3, [r2, #32]
 800334a:	4bb4      	ldr	r3, [pc, #720]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	4ab3      	ldr	r2, [pc, #716]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6213      	str	r3, [r2, #32]
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0x9ac>
 8003358:	4bb0      	ldr	r3, [pc, #704]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	4aaf      	ldr	r2, [pc, #700]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	6213      	str	r3, [r2, #32]
 8003364:	4bad      	ldr	r3, [pc, #692]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4aac      	ldr	r2, [pc, #688]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800336a:	f023 0304 	bic.w	r3, r3, #4
 800336e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003374:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8081 	beq.w	8003484 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003382:	f7fe fd93 	bl	8001eac <HAL_GetTick>
 8003386:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338c:	f7fe fd8e 	bl	8001eac <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	; 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e345      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033ac:	2202      	movs	r2, #2
 80033ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	fa93 f2a3 	rbit	r2, r3
 80033be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033d0:	2202      	movs	r2, #2
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	fa93 f2a3 	rbit	r2, r3
 80033e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033ea:	601a      	str	r2, [r3, #0]
  return result;
 80033ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d102      	bne.n	8003410 <HAL_RCC_OscConfig+0xa4c>
 800340a:	4b84      	ldr	r3, [pc, #528]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	e013      	b.n	8003438 <HAL_RCC_OscConfig+0xa74>
 8003410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003414:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003418:	2202      	movs	r2, #2
 800341a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003420:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f2a3 	rbit	r2, r3
 800342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	4b79      	ldr	r3, [pc, #484]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800343c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003440:	2102      	movs	r1, #2
 8003442:	6011      	str	r1, [r2, #0]
 8003444:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003448:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	fa92 f1a2 	rbit	r1, r2
 8003452:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003456:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800345a:	6011      	str	r1, [r2, #0]
  return result;
 800345c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003460:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	fab2 f282 	clz	r2, r2
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	f002 021f 	and.w	r2, r2, #31
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d084      	beq.n	800338c <HAL_RCC_OscConfig+0x9c8>
 8003482:	e07f      	b.n	8003584 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003484:	f7fe fd12 	bl	8001eac <HAL_GetTick>
 8003488:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348c:	e00b      	b.n	80034a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe fd0d 	bl	8001eac <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e2c4      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034ae:	2202      	movs	r2, #2
 80034b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	fa93 f2a3 	rbit	r2, r3
 80034c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034d2:	2202      	movs	r2, #2
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	fa93 f2a3 	rbit	r2, r3
 80034e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034ec:	601a      	str	r2, [r3, #0]
  return result;
 80034ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f8:	fab3 f383 	clz	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f043 0302 	orr.w	r3, r3, #2
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d102      	bne.n	8003512 <HAL_RCC_OscConfig+0xb4e>
 800350c:	4b43      	ldr	r3, [pc, #268]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	e013      	b.n	800353a <HAL_RCC_OscConfig+0xb76>
 8003512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003516:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800351a:	2202      	movs	r2, #2
 800351c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003522:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	fa93 f2a3 	rbit	r2, r3
 800352c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003530:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	4b39      	ldr	r3, [pc, #228]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800353e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003542:	2102      	movs	r1, #2
 8003544:	6011      	str	r1, [r2, #0]
 8003546:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800354a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	fa92 f1a2 	rbit	r1, r2
 8003554:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003558:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800355c:	6011      	str	r1, [r2, #0]
  return result;
 800355e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003562:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	fab2 f282 	clz	r2, r2
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	f002 021f 	and.w	r2, r2, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f202 	lsl.w	r2, r1, r2
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d184      	bne.n	800348e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003584:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4b23      	ldr	r3, [pc, #140]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	4a22      	ldr	r2, [pc, #136]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003596:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8242 	beq.w	8003a2e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_RCC_OscConfig+0xc58>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	f000 8213 	beq.w	80039de <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	f040 8162 	bne.w	800388e <HAL_RCC_OscConfig+0xeca>
 80035ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	fa93 f2a3 	rbit	r2, r3
 80035e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035ee:	601a      	str	r2, [r3, #0]
  return result;
 80035f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003604:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	461a      	mov	r2, r3
 800360c:	2300      	movs	r3, #0
 800360e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe fc4c 	bl	8001eac <HAL_GetTick>
 8003614:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e00c      	b.n	8003634 <HAL_RCC_OscConfig+0xc70>
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003620:	f7fe fc44 	bl	8001eac <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e1fd      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
 8003634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003638:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800363c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003646:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	fa93 f2a3 	rbit	r2, r3
 8003650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003654:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003658:	601a      	str	r2, [r3, #0]
  return result;
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003662:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003664:	fab3 f383 	clz	r3, r3
 8003668:	b2db      	uxtb	r3, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d102      	bne.n	800367e <HAL_RCC_OscConfig+0xcba>
 8003678:	4bb0      	ldr	r3, [pc, #704]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	e027      	b.n	80036ce <HAL_RCC_OscConfig+0xd0a>
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800368a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003690:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	fa93 f2a3 	rbit	r2, r3
 800369a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	fa93 f2a3 	rbit	r2, r3
 80036c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	4b9c      	ldr	r3, [pc, #624]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036d2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80036d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036da:	6011      	str	r1, [r2, #0]
 80036dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036e0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	fa92 f1a2 	rbit	r1, r2
 80036ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036f2:	6011      	str	r1, [r2, #0]
  return result;
 80036f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	fab2 f282 	clz	r2, r2
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	f042 0220 	orr.w	r2, r2, #32
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	f002 021f 	and.w	r2, r2, #31
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f202 	lsl.w	r2, r1, r2
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d182      	bne.n	8003620 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800371a:	4b88      	ldr	r3, [pc, #544]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800372e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	430b      	orrs	r3, r1
 800373c:	497f      	ldr	r1, [pc, #508]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
 8003742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003746:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800374a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800374e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	fa93 f2a3 	rbit	r2, r3
 800375e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003762:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003766:	601a      	str	r2, [r3, #0]
  return result;
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003770:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800377c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	461a      	mov	r2, r3
 8003784:	2301      	movs	r3, #1
 8003786:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe fb90 	bl	8001eac <HAL_GetTick>
 800378c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003790:	e009      	b.n	80037a6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003792:	f7fe fb8b 	bl	8001eac <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e144      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
 80037a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	fa93 f2a3 	rbit	r2, r3
 80037c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037ca:	601a      	str	r2, [r3, #0]
  return result;
 80037cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d102      	bne.n	80037f0 <HAL_RCC_OscConfig+0xe2c>
 80037ea:	4b54      	ldr	r3, [pc, #336]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	e027      	b.n	8003840 <HAL_RCC_OscConfig+0xe7c>
 80037f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	fa93 f2a3 	rbit	r2, r3
 800380c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003810:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800381e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003828:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	fa93 f2a3 	rbit	r2, r3
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	4b3f      	ldr	r3, [pc, #252]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003844:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003848:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800384c:	6011      	str	r1, [r2, #0]
 800384e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003852:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	fa92 f1a2 	rbit	r1, r2
 800385c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003860:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003864:	6011      	str	r1, [r2, #0]
  return result;
 8003866:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800386a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	fab2 f282 	clz	r2, r2
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	f042 0220 	orr.w	r2, r2, #32
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	f002 021f 	and.w	r2, r2, #31
 8003880:	2101      	movs	r1, #1
 8003882:	fa01 f202 	lsl.w	r2, r1, r2
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d082      	beq.n	8003792 <HAL_RCC_OscConfig+0xdce>
 800388c:	e0cf      	b.n	8003a2e <HAL_RCC_OscConfig+0x106a>
 800388e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003892:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003896:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800389a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	fa93 f2a3 	rbit	r2, r3
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038b2:	601a      	str	r2, [r3, #0]
  return result;
 80038b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	461a      	mov	r2, r3
 80038d0:	2300      	movs	r3, #0
 80038d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fe faea 	bl	8001eac <HAL_GetTick>
 80038d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038dc:	e009      	b.n	80038f2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038de:	f7fe fae5 	bl	8001eac <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e09e      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003904:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	fa93 f2a3 	rbit	r2, r3
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003916:	601a      	str	r2, [r3, #0]
  return result;
 8003918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003920:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d104      	bne.n	8003940 <HAL_RCC_OscConfig+0xf7c>
 8003936:	4b01      	ldr	r3, [pc, #4]	; (800393c <HAL_RCC_OscConfig+0xf78>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	e029      	b.n	8003990 <HAL_RCC_OscConfig+0xfcc>
 800393c:	40021000 	.word	0x40021000
 8003940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003944:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	fa93 f2a3 	rbit	r2, r3
 800395c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003960:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800396e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003978:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	fa93 f2a3 	rbit	r2, r3
 8003982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003986:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <HAL_RCC_OscConfig+0x1078>)
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003994:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003998:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800399c:	6011      	str	r1, [r2, #0]
 800399e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039a2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	fa92 f1a2 	rbit	r1, r2
 80039ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039b0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039b4:	6011      	str	r1, [r2, #0]
  return result;
 80039b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	fab2 f282 	clz	r2, r2
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	f042 0220 	orr.w	r2, r2, #32
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	f002 021f 	and.w	r2, r2, #31
 80039d0:	2101      	movs	r1, #1
 80039d2:	fa01 f202 	lsl.w	r2, r1, r2
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d180      	bne.n	80038de <HAL_RCC_OscConfig+0xf1a>
 80039dc:	e027      	b.n	8003a2e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e01e      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_RCC_OscConfig+0x1078>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d10b      	bne.n	8003a2a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000

08003a40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b09e      	sub	sp, #120	; 0x78
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e162      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a58:	4b90      	ldr	r3, [pc, #576]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d910      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b8d      	ldr	r3, [pc, #564]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 0207 	bic.w	r2, r3, #7
 8003a6e:	498b      	ldr	r1, [pc, #556]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b89      	ldr	r3, [pc, #548]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e14a      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4b82      	ldr	r3, [pc, #520]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	497f      	ldr	r1, [pc, #508]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80dc 	beq.w	8003c6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d13c      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xf6>
 8003abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ac0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003acc:	fab3 f383 	clz	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d102      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xa6>
 8003ae0:	4b6f      	ldr	r3, [pc, #444]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	e00f      	b.n	8003b06 <HAL_RCC_ClockConfig+0xc6>
 8003ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	667b      	str	r3, [r7, #100]	; 0x64
 8003af4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003af8:	663b      	str	r3, [r7, #96]	; 0x60
 8003afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003afc:	fa93 f3a3 	rbit	r3, r3
 8003b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b02:	4b67      	ldr	r3, [pc, #412]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b0e:	fa92 f2a2 	rbit	r2, r2
 8003b12:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b16:	fab2 f282 	clz	r2, r2
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	f042 0220 	orr.w	r2, r2, #32
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	f002 021f 	and.w	r2, r2, #31
 8003b26:	2101      	movs	r1, #1
 8003b28:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d17b      	bne.n	8003c2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e0f3      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d13c      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x178>
 8003b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b46:	fa93 f3a3 	rbit	r3, r3
 8003b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	fab3 f383 	clz	r3, r3
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d102      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x128>
 8003b62:	4b4f      	ldr	r3, [pc, #316]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	e00f      	b.n	8003b88 <HAL_RCC_ClockConfig+0x148>
 8003b68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	647b      	str	r3, [r7, #68]	; 0x44
 8003b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b84:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b90:	fa92 f2a2 	rbit	r2, r2
 8003b94:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b98:	fab2 f282 	clz	r2, r2
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	f042 0220 	orr.w	r2, r2, #32
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	f002 021f 	and.w	r2, r2, #31
 8003ba8:	2101      	movs	r1, #1
 8003baa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d13a      	bne.n	8003c2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0b2      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d102      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x1a0>
 8003bda:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	e00d      	b.n	8003bfc <HAL_RCC_ClockConfig+0x1bc>
 8003be0:	2302      	movs	r3, #2
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
 8003bec:	2302      	movs	r3, #2
 8003bee:	623b      	str	r3, [r7, #32]
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	61ba      	str	r2, [r7, #24]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	fa92 f2a2 	rbit	r2, r2
 8003c06:	617a      	str	r2, [r7, #20]
  return result;
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	fab2 f282 	clz	r2, r2
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	f042 0220 	orr.w	r2, r2, #32
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	f002 021f 	and.w	r2, r2, #31
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e079      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f023 0203 	bic.w	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	491a      	ldr	r1, [pc, #104]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c3c:	f7fe f936 	bl	8001eac <HAL_GetTick>
 8003c40:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c44:	f7fe f932 	bl	8001eac <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e061      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5a:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 020c 	and.w	r2, r3, #12
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d1eb      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d214      	bcs.n	8003ca4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 0207 	bic.w	r2, r3, #7
 8003c82:	4906      	ldr	r1, [pc, #24]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <HAL_RCC_ClockConfig+0x25c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e040      	b.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
 8003c9c:	40022000 	.word	0x40022000
 8003ca0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_RCC_ClockConfig+0x2e8>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	491a      	ldr	r1, [pc, #104]	; (8003d28 <HAL_RCC_ClockConfig+0x2e8>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cce:	4b16      	ldr	r3, [pc, #88]	; (8003d28 <HAL_RCC_ClockConfig+0x2e8>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4912      	ldr	r1, [pc, #72]	; (8003d28 <HAL_RCC_ClockConfig+0x2e8>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ce2:	f000 f829 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <HAL_RCC_ClockConfig+0x2e8>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf0:	22f0      	movs	r2, #240	; 0xf0
 8003cf2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	fa92 f2a2 	rbit	r2, r2
 8003cfa:	60fa      	str	r2, [r7, #12]
  return result;
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	fab2 f282 	clz	r2, r2
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	40d3      	lsrs	r3, r2
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <HAL_RCC_ClockConfig+0x2ec>)
 8003d08:	5cd3      	ldrb	r3, [r2, r3]
 8003d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d0e:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <HAL_RCC_ClockConfig+0x2f0>)
 8003d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d12:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <HAL_RCC_ClockConfig+0x2f4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe f884 	bl	8001e24 <HAL_InitTick>
  
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3778      	adds	r7, #120	; 0x78
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	08006670 	.word	0x08006670
 8003d30:	200000a8 	.word	0x200000a8
 8003d34:	200000ac 	.word	0x200000ac

08003d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b08b      	sub	sp, #44	; 0x2c
 8003d3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	2300      	movs	r3, #0
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d52:	4b29      	ldr	r3, [pc, #164]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d002      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x30>
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d003      	beq.n	8003d6e <HAL_RCC_GetSysClockFreq+0x36>
 8003d66:	e03c      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d68:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d6a:	623b      	str	r3, [r7, #32]
      break;
 8003d6c:	e03c      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d74:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d78:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	fa92 f2a2 	rbit	r2, r2
 8003d80:	607a      	str	r2, [r7, #4]
  return result;
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	fab2 f282 	clz	r2, r2
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	40d3      	lsrs	r3, r2
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d8e:	5cd3      	ldrb	r3, [r2, r3]
 8003d90:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d92:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	fa92 f2a2 	rbit	r2, r2
 8003da4:	60fa      	str	r2, [r7, #12]
  return result;
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	fab2 f282 	clz	r2, r2
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	40d3      	lsrs	r3, r2
 8003db0:	4a14      	ldr	r2, [pc, #80]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003db2:	5cd3      	ldrb	r3, [r2, r3]
 8003db4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dc0:	4a0e      	ldr	r2, [pc, #56]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd0:	e004      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	4a0c      	ldr	r2, [pc, #48]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	623b      	str	r3, [r7, #32]
      break;
 8003de0:	e002      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003de4:	623b      	str	r3, [r7, #32]
      break;
 8003de6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003de8:	6a3b      	ldr	r3, [r7, #32]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	372c      	adds	r7, #44	; 0x2c
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	007a1200 	.word	0x007a1200
 8003e00:	08006688 	.word	0x08006688
 8003e04:	08006698 	.word	0x08006698
 8003e08:	003d0900 	.word	0x003d0900

08003e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	200000a8 	.word	0x200000a8

08003e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e2a:	f7ff ffef 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e2e:	4601      	mov	r1, r0
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e38:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	fa92 f2a2 	rbit	r2, r2
 8003e44:	603a      	str	r2, [r7, #0]
  return result;
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	fab2 f282 	clz	r2, r2
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	40d3      	lsrs	r3, r2
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	08006680 	.word	0x08006680

08003e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e6e:	f7ff ffcd 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e72:	4601      	mov	r1, r0
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003e80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	fa92 f2a2 	rbit	r2, r2
 8003e88:	603a      	str	r2, [r7, #0]
  return result;
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	fab2 f282 	clz	r2, r2
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	40d3      	lsrs	r3, r2
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e96:	5cd3      	ldrb	r3, [r2, r3]
 8003e98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	08006680 	.word	0x08006680

08003eac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b092      	sub	sp, #72	; 0x48
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80d4 	beq.w	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed0:	4b4e      	ldr	r3, [pc, #312]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10e      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003edc:	4b4b      	ldr	r3, [pc, #300]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	4a4a      	ldr	r2, [pc, #296]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	61d3      	str	r3, [r2, #28]
 8003ee8:	4b48      	ldr	r3, [pc, #288]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efa:	4b45      	ldr	r3, [pc, #276]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d118      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f06:	4b42      	ldr	r3, [pc, #264]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a41      	ldr	r2, [pc, #260]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f12:	f7fd ffcb 	bl	8001eac <HAL_GetTick>
 8003f16:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	e008      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1a:	f7fd ffc7 	bl	8001eac <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b64      	cmp	r3, #100	; 0x64
 8003f26:	d901      	bls.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e169      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2c:	4b38      	ldr	r3, [pc, #224]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f38:	4b34      	ldr	r3, [pc, #208]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8084 	beq.w	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d07c      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f58:	4b2c      	ldr	r3, [pc, #176]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f72:	fab3 f383 	clz	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b26      	ldr	r3, [pc, #152]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	461a      	mov	r2, r3
 8003f82:	2301      	movs	r3, #1
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003faa:	4a18      	ldr	r2, [pc, #96]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04b      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7fd ff77 	bl	8001eac <HAL_GetTick>
 8003fbe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fd ff73 	bl	8001eac <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e113      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	623b      	str	r3, [r7, #32]
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	fa93 f3a3 	rbit	r3, r3
 8003fee:	61fb      	str	r3, [r7, #28]
  return result;
 8003ff0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f043 0302 	orr.w	r3, r3, #2
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d108      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004006:	4b01      	ldr	r3, [pc, #4]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	e00d      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800400c:	40021000 	.word	0x40021000
 8004010:	40007000 	.word	0x40007000
 8004014:	10908100 	.word	0x10908100
 8004018:	2302      	movs	r3, #2
 800401a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	4b78      	ldr	r3, [pc, #480]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2202      	movs	r2, #2
 800402a:	613a      	str	r2, [r7, #16]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	fa92 f2a2 	rbit	r2, r2
 8004032:	60fa      	str	r2, [r7, #12]
  return result;
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	fab2 f282 	clz	r2, r2
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	f002 021f 	and.w	r2, r2, #31
 8004046:	2101      	movs	r1, #1
 8004048:	fa01 f202 	lsl.w	r2, r1, r2
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0b7      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004052:	4b6d      	ldr	r3, [pc, #436]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	496a      	ldr	r1, [pc, #424]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004060:	4313      	orrs	r3, r2
 8004062:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004064:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004068:	2b01      	cmp	r3, #1
 800406a:	d105      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800406c:	4b66      	ldr	r3, [pc, #408]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	4a65      	ldr	r2, [pc, #404]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004076:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004084:	4b60      	ldr	r3, [pc, #384]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	f023 0203 	bic.w	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	495d      	ldr	r1, [pc, #372]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004092:	4313      	orrs	r3, r2
 8004094:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040a2:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	4956      	ldr	r1, [pc, #344]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040c0:	4b51      	ldr	r3, [pc, #324]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	494e      	ldr	r1, [pc, #312]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040de:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f023 0210 	bic.w	r2, r3, #16
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	4947      	ldr	r1, [pc, #284]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80040fc:	4b42      	ldr	r3, [pc, #264]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	493f      	ldr	r1, [pc, #252]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800410a:	4313      	orrs	r3, r2
 800410c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d008      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800411a:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f023 0220 	bic.w	r2, r3, #32
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	4938      	ldr	r1, [pc, #224]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004128:	4313      	orrs	r3, r2
 800412a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004138:	4b33      	ldr	r3, [pc, #204]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	4930      	ldr	r1, [pc, #192]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004146:	4313      	orrs	r3, r2
 8004148:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004156:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	4929      	ldr	r1, [pc, #164]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004164:	4313      	orrs	r3, r2
 8004166:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004174:	4b24      	ldr	r3, [pc, #144]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	4921      	ldr	r1, [pc, #132]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	491a      	ldr	r1, [pc, #104]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80041b0:	4b15      	ldr	r3, [pc, #84]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	4912      	ldr	r1, [pc, #72]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041ce:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	490b      	ldr	r1, [pc, #44]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f8:	4903      	ldr	r1, [pc, #12]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3748      	adds	r7, #72	; 0x48
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000

0800420c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e073      	b.n	800430a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	7f5b      	ldrb	r3, [r3, #29]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fd fc0e 	bl	8001a54 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b10      	cmp	r3, #16
 800424a:	d055      	beq.n	80042f8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	22ca      	movs	r2, #202	; 0xca
 8004252:	625a      	str	r2, [r3, #36]	; 0x24
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2253      	movs	r2, #83	; 0x53
 800425a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f977 	bl	8004550 <RTC_EnterInitMode>
 8004262:	4603      	mov	r3, r0
 8004264:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d12c      	bne.n	80042c6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800427a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6899      	ldr	r1, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68d2      	ldr	r2, [r2, #12]
 80042a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6919      	ldr	r1, [r3, #16]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	041a      	lsls	r2, r3, #16
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f97e 	bl	80045be <RTC_ExitInitMode>
 80042c2:	4603      	mov	r3, r0
 80042c4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d110      	bne.n	80042ee <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042da:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	22ff      	movs	r2, #255	; 0xff
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24
 80042f6:	e001      	b.n	80042fc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004308:	7bfb      	ldrb	r3, [r7, #15]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004312:	b590      	push	{r4, r7, lr}
 8004314:	b087      	sub	sp, #28
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	7f1b      	ldrb	r3, [r3, #28]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_RTC_SetTime+0x1c>
 800432a:	2302      	movs	r3, #2
 800432c:	e087      	b.n	800443e <HAL_RTC_SetTime+0x12c>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2202      	movs	r2, #2
 8004338:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d126      	bne.n	800438e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f000 f955 	bl	8004608 <RTC_ByteToBcd2>
 800435e:	4603      	mov	r3, r0
 8004360:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	785b      	ldrb	r3, [r3, #1]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f94e 	bl	8004608 <RTC_ByteToBcd2>
 800436c:	4603      	mov	r3, r0
 800436e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004370:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	789b      	ldrb	r3, [r3, #2]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 f946 	bl	8004608 <RTC_ByteToBcd2>
 800437c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800437e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	78db      	ldrb	r3, [r3, #3]
 8004386:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	e018      	b.n	80043c0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2200      	movs	r2, #0
 80043a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80043ae:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80043b4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	78db      	ldrb	r3, [r3, #3]
 80043ba:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	22ca      	movs	r2, #202	; 0xca
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2253      	movs	r2, #83	; 0x53
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f8bd 	bl	8004550 <RTC_EnterInitMode>
 80043d6:	4603      	mov	r3, r0
 80043d8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d120      	bne.n	8004422 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80043ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80043ee:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6899      	ldr	r1, [r3, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	431a      	orrs	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f8d0 	bl	80045be <RTC_ExitInitMode>
 800441e:	4603      	mov	r3, r0
 8004420:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004422:	7cfb      	ldrb	r3, [r7, #19]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d102      	bne.n	800442e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	22ff      	movs	r2, #255	; 0xff
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]

  return status;
 800443c:	7cfb      	ldrb	r3, [r7, #19]
}
 800443e:	4618      	mov	r0, r3
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd90      	pop	{r4, r7, pc}

08004446 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004478:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800447c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004488:	b2da      	uxtb	r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	b2db      	uxtb	r3, r3
 8004494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004498:	b2da      	uxtb	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	0d9b      	lsrs	r3, r3, #22
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d11a      	bne.n	80044f8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f8bc 	bl	8004644 <RTC_Bcd2ToByte>
 80044cc:	4603      	mov	r3, r0
 80044ce:	461a      	mov	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	785b      	ldrb	r3, [r3, #1]
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 f8b3 	bl	8004644 <RTC_Bcd2ToByte>
 80044de:	4603      	mov	r3, r0
 80044e0:	461a      	mov	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	789b      	ldrb	r3, [r3, #2]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f8aa 	bl	8004644 <RTC_Bcd2ToByte>
 80044f0:	4603      	mov	r3, r0
 80044f2:	461a      	mov	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a0d      	ldr	r2, [pc, #52]	; (800454c <HAL_RTC_WaitForSynchro+0x48>)
 8004516:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004518:	f7fd fcc8 	bl	8001eac <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800451e:	e009      	b.n	8004534 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004520:	f7fd fcc4 	bl	8001eac <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800452e:	d901      	bls.n	8004534 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e007      	b.n	8004544 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0ee      	beq.n	8004520 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	0001ff5f 	.word	0x0001ff5f

08004550 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d122      	bne.n	80045b4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800457c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800457e:	f7fd fc95 	bl	8001eac <HAL_GetTick>
 8004582:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004584:	e00c      	b.n	80045a0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004586:	f7fd fc91 	bl	8001eac <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004594:	d904      	bls.n	80045a0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2204      	movs	r2, #4
 800459a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <RTC_EnterInitMode+0x64>
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d1e8      	bne.n	8004586 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045d8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0320 	and.w	r3, r3, #32
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff ff8b 	bl	8004504 <HAL_RTC_WaitForSynchro>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d004      	beq.n	80045fe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2204      	movs	r2, #4
 80045f8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004616:	e005      	b.n	8004624 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3301      	adds	r3, #1
 800461c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	3b0a      	subs	r3, #10
 8004622:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	2b09      	cmp	r3, #9
 8004628:	d8f6      	bhi.n	8004618 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	b2da      	uxtb	r2, r3
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	4313      	orrs	r3, r2
 8004636:	b2db      	uxtb	r3, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	b2db      	uxtb	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	b2db      	uxtb	r3, r3
 8004670:	4413      	add	r3, r2
 8004672:	b2db      	uxtb	r3, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e09d      	b.n	80047ce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d108      	bne.n	80046ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a2:	d009      	beq.n	80046b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	61da      	str	r2, [r3, #28]
 80046aa:	e005      	b.n	80046b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fd f9e4 	bl	8001aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046f8:	d902      	bls.n	8004700 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	e002      	b.n	8004706 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004704:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800470e:	d007      	beq.n	8004720 <HAL_SPI_Init+0xa0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004718:	d002      	beq.n	8004720 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	ea42 0103 	orr.w	r1, r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	0c1b      	lsrs	r3, r3, #16
 800477c:	f003 0204 	and.w	r2, r3, #4
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800479c:	ea42 0103 	orr.w	r1, r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e049      	b.n	800487c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7fd f991 	bl	8001b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2202      	movs	r2, #2
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f000 faaf 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	d001      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e04a      	b.n	8004932 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a21      	ldr	r2, [pc, #132]	; (8004940 <HAL_TIM_Base_Start_IT+0xbc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x6c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c6:	d013      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x6c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <HAL_TIM_Base_Start_IT+0xc0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x6c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <HAL_TIM_Base_Start_IT+0xc4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x6c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1a      	ldr	r2, [pc, #104]	; (800494c <HAL_TIM_Base_Start_IT+0xc8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x6c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a19      	ldr	r2, [pc, #100]	; (8004950 <HAL_TIM_Base_Start_IT+0xcc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d115      	bne.n	800491c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	4b17      	ldr	r3, [pc, #92]	; (8004954 <HAL_TIM_Base_Start_IT+0xd0>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d015      	beq.n	800492e <HAL_TIM_Base_Start_IT+0xaa>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004908:	d011      	beq.n	800492e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0201 	orr.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491a:	e008      	b.n	800492e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e000      	b.n	8004930 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40012c00 	.word	0x40012c00
 8004944:	40000400 	.word	0x40000400
 8004948:	40000800 	.word	0x40000800
 800494c:	40013400 	.word	0x40013400
 8004950:	40014000 	.word	0x40014000
 8004954:	00010007 	.word	0x00010007

08004958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b02      	cmp	r3, #2
 800496c:	d122      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b02      	cmp	r3, #2
 800497a:	d11b      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0202 	mvn.w	r2, #2
 8004984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f9ce 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 80049a0:	e005      	b.n	80049ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f9c0 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f9d1 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d122      	bne.n	8004a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d11b      	bne.n	8004a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f06f 0204 	mvn.w	r2, #4
 80049d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2202      	movs	r2, #2
 80049de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f9a4 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 80049f4:	e005      	b.n	8004a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f996 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f9a7 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d122      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d11b      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0208 	mvn.w	r2, #8
 8004a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2204      	movs	r2, #4
 8004a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f97a 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 8004a48:	e005      	b.n	8004a56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f96c 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f97d 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0310 	and.w	r3, r3, #16
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d122      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d11b      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0210 	mvn.w	r2, #16
 8004a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2208      	movs	r2, #8
 8004a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f950 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 8004a9c:	e005      	b.n	8004aaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f942 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f953 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d10e      	bne.n	8004adc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d107      	bne.n	8004adc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0201 	mvn.w	r2, #1
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fc fc58 	bl	800138c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b80      	cmp	r3, #128	; 0x80
 8004ae8:	d10e      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af4:	2b80      	cmp	r3, #128	; 0x80
 8004af6:	d107      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 faec 	bl	80050e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b16:	d10e      	bne.n	8004b36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b22:	2b80      	cmp	r3, #128	; 0x80
 8004b24:	d107      	bne.n	8004b36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fadf 	bl	80050f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b40:	2b40      	cmp	r3, #64	; 0x40
 8004b42:	d10e      	bne.n	8004b62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4e:	2b40      	cmp	r3, #64	; 0x40
 8004b50:	d107      	bne.n	8004b62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f901 	bl	8004d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d10e      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d107      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f06f 0220 	mvn.w	r2, #32
 8004b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fa9f 	bl	80050cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_TIM_ConfigClockSource+0x1c>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e0b6      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x18a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bd4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bdc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bee:	d03e      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0xd8>
 8004bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf4:	f200 8087 	bhi.w	8004d06 <HAL_TIM_ConfigClockSource+0x170>
 8004bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfc:	f000 8086 	beq.w	8004d0c <HAL_TIM_ConfigClockSource+0x176>
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c04:	d87f      	bhi.n	8004d06 <HAL_TIM_ConfigClockSource+0x170>
 8004c06:	2b70      	cmp	r3, #112	; 0x70
 8004c08:	d01a      	beq.n	8004c40 <HAL_TIM_ConfigClockSource+0xaa>
 8004c0a:	2b70      	cmp	r3, #112	; 0x70
 8004c0c:	d87b      	bhi.n	8004d06 <HAL_TIM_ConfigClockSource+0x170>
 8004c0e:	2b60      	cmp	r3, #96	; 0x60
 8004c10:	d050      	beq.n	8004cb4 <HAL_TIM_ConfigClockSource+0x11e>
 8004c12:	2b60      	cmp	r3, #96	; 0x60
 8004c14:	d877      	bhi.n	8004d06 <HAL_TIM_ConfigClockSource+0x170>
 8004c16:	2b50      	cmp	r3, #80	; 0x50
 8004c18:	d03c      	beq.n	8004c94 <HAL_TIM_ConfigClockSource+0xfe>
 8004c1a:	2b50      	cmp	r3, #80	; 0x50
 8004c1c:	d873      	bhi.n	8004d06 <HAL_TIM_ConfigClockSource+0x170>
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d058      	beq.n	8004cd4 <HAL_TIM_ConfigClockSource+0x13e>
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d86f      	bhi.n	8004d06 <HAL_TIM_ConfigClockSource+0x170>
 8004c26:	2b30      	cmp	r3, #48	; 0x30
 8004c28:	d064      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0x15e>
 8004c2a:	2b30      	cmp	r3, #48	; 0x30
 8004c2c:	d86b      	bhi.n	8004d06 <HAL_TIM_ConfigClockSource+0x170>
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d060      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0x15e>
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d867      	bhi.n	8004d06 <HAL_TIM_ConfigClockSource+0x170>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d05c      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0x15e>
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d05a      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0x15e>
 8004c3e:	e062      	b.n	8004d06 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	6899      	ldr	r1, [r3, #8]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f000 f99c 	bl	8004f8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c62:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	609a      	str	r2, [r3, #8]
      break;
 8004c6c:	e04f      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6899      	ldr	r1, [r3, #8]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f000 f985 	bl	8004f8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c90:	609a      	str	r2, [r3, #8]
      break;
 8004c92:	e03c      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	6859      	ldr	r1, [r3, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f000 f8f9 	bl	8004e98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2150      	movs	r1, #80	; 0x50
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 f952 	bl	8004f56 <TIM_ITRx_SetConfig>
      break;
 8004cb2:	e02c      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6859      	ldr	r1, [r3, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f000 f918 	bl	8004ef6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2160      	movs	r1, #96	; 0x60
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 f942 	bl	8004f56 <TIM_ITRx_SetConfig>
      break;
 8004cd2:	e01c      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	6859      	ldr	r1, [r3, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f000 f8d9 	bl	8004e98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2140      	movs	r1, #64	; 0x40
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 f932 	bl	8004f56 <TIM_ITRx_SetConfig>
      break;
 8004cf2:	e00c      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	f000 f929 	bl	8004f56 <TIM_ITRx_SetConfig>
      break;
 8004d04:	e003      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0a:	e000      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004d0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a3c      	ldr	r2, [pc, #240]	; (8004e7c <TIM_Base_SetConfig+0x104>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00f      	beq.n	8004db0 <TIM_Base_SetConfig+0x38>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d96:	d00b      	beq.n	8004db0 <TIM_Base_SetConfig+0x38>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a39      	ldr	r2, [pc, #228]	; (8004e80 <TIM_Base_SetConfig+0x108>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d007      	beq.n	8004db0 <TIM_Base_SetConfig+0x38>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a38      	ldr	r2, [pc, #224]	; (8004e84 <TIM_Base_SetConfig+0x10c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d003      	beq.n	8004db0 <TIM_Base_SetConfig+0x38>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a37      	ldr	r2, [pc, #220]	; (8004e88 <TIM_Base_SetConfig+0x110>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d108      	bne.n	8004dc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2d      	ldr	r2, [pc, #180]	; (8004e7c <TIM_Base_SetConfig+0x104>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d01b      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd0:	d017      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a2a      	ldr	r2, [pc, #168]	; (8004e80 <TIM_Base_SetConfig+0x108>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a29      	ldr	r2, [pc, #164]	; (8004e84 <TIM_Base_SetConfig+0x10c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00f      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a28      	ldr	r2, [pc, #160]	; (8004e88 <TIM_Base_SetConfig+0x110>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00b      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a27      	ldr	r2, [pc, #156]	; (8004e8c <TIM_Base_SetConfig+0x114>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d007      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <TIM_Base_SetConfig+0x118>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d003      	beq.n	8004e02 <TIM_Base_SetConfig+0x8a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a25      	ldr	r2, [pc, #148]	; (8004e94 <TIM_Base_SetConfig+0x11c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d108      	bne.n	8004e14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a10      	ldr	r2, [pc, #64]	; (8004e7c <TIM_Base_SetConfig+0x104>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00f      	beq.n	8004e60 <TIM_Base_SetConfig+0xe8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a11      	ldr	r2, [pc, #68]	; (8004e88 <TIM_Base_SetConfig+0x110>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <TIM_Base_SetConfig+0xe8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a10      	ldr	r2, [pc, #64]	; (8004e8c <TIM_Base_SetConfig+0x114>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <TIM_Base_SetConfig+0xe8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a0f      	ldr	r2, [pc, #60]	; (8004e90 <TIM_Base_SetConfig+0x118>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_Base_SetConfig+0xe8>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a0e      	ldr	r2, [pc, #56]	; (8004e94 <TIM_Base_SetConfig+0x11c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d103      	bne.n	8004e68 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	615a      	str	r2, [r3, #20]
}
 8004e6e:	bf00      	nop
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40013400 	.word	0x40013400
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40014400 	.word	0x40014400
 8004e94:	40014800 	.word	0x40014800

08004e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	f023 0201 	bic.w	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f023 030a 	bic.w	r3, r3, #10
 8004ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b087      	sub	sp, #28
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f023 0210 	bic.w	r2, r3, #16
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	031b      	lsls	r3, r3, #12
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f043 0307 	orr.w	r3, r3, #7
 8004f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	609a      	str	r2, [r3, #8]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	021a      	lsls	r2, r3, #8
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	609a      	str	r2, [r3, #8]
}
 8004fc0:	bf00      	nop
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e063      	b.n	80050ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a2b      	ldr	r2, [pc, #172]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d004      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a2a      	ldr	r2, [pc, #168]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d108      	bne.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800501e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005030:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d018      	beq.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005056:	d013      	beq.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a18      	ldr	r2, [pc, #96]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00e      	beq.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a17      	ldr	r2, [pc, #92]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d009      	beq.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a12      	ldr	r2, [pc, #72]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10c      	bne.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005086:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	4313      	orrs	r3, r2
 8005090:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	40012c00 	.word	0x40012c00
 80050bc:	40013400 	.word	0x40013400
 80050c0:	40000400 	.word	0x40000400
 80050c4:	40000800 	.word	0x40000800
 80050c8:	40014000 	.word	0x40014000

080050cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e040      	b.n	800519c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fc fd20 	bl	8001b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2224      	movs	r2, #36	; 0x24
 8005134:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0201 	bic.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fb76 	bl	8005838 <UART_SetConfig>
 800514c:	4603      	mov	r3, r0
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e022      	b.n	800519c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fd3e 	bl	8005be0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005172:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005182:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fdc5 	bl	8005d24 <UART_CheckIdleState>
 800519a:	4603      	mov	r3, r0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	; 0x28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d132      	bne.n	8005222 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <HAL_UART_Receive_IT+0x24>
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e02b      	b.n	8005224 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d018      	beq.n	8005212 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	613b      	str	r3, [r7, #16]
   return(result);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	623b      	str	r3, [r7, #32]
 8005200:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	69f9      	ldr	r1, [r7, #28]
 8005204:	6a3a      	ldr	r2, [r7, #32]
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	61bb      	str	r3, [r7, #24]
   return(result);
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e6      	bne.n	80051e0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	461a      	mov	r2, r3
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fe93 	bl	8005f44 <UART_Start_Receive_IT>
 800521e:	4603      	mov	r3, r0
 8005220:	e000      	b.n	8005224 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005222:	2302      	movs	r3, #2
  }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3728      	adds	r7, #40	; 0x28
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b0ba      	sub	sp, #232	; 0xe8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005252:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005256:	f640 030f 	movw	r3, #2063	; 0x80f
 800525a:	4013      	ands	r3, r2
 800525c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d115      	bne.n	8005294 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00f      	beq.n	8005294 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005278:	f003 0320 	and.w	r3, r3, #32
 800527c:	2b00      	cmp	r3, #0
 800527e:	d009      	beq.n	8005294 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 82ab 	beq.w	80057e0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	4798      	blx	r3
      }
      return;
 8005292:	e2a5      	b.n	80057e0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8117 	beq.w	80054cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800529e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80052ae:	4b85      	ldr	r3, [pc, #532]	; (80054c4 <HAL_UART_IRQHandler+0x298>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 810a 	beq.w	80054cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d011      	beq.n	80052e8 <HAL_UART_IRQHandler+0xbc>
 80052c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2201      	movs	r2, #1
 80052d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052de:	f043 0201 	orr.w	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d011      	beq.n	8005318 <HAL_UART_IRQHandler+0xec>
 80052f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00b      	beq.n	8005318 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2202      	movs	r2, #2
 8005306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800530e:	f043 0204 	orr.w	r2, r3, #4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d011      	beq.n	8005348 <HAL_UART_IRQHandler+0x11c>
 8005324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00b      	beq.n	8005348 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2204      	movs	r2, #4
 8005336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533e:	f043 0202 	orr.w	r2, r3, #2
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d017      	beq.n	8005384 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d105      	bne.n	800536c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005364:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00b      	beq.n	8005384 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2208      	movs	r2, #8
 8005372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800537a:	f043 0208 	orr.w	r2, r3, #8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800538c:	2b00      	cmp	r3, #0
 800538e:	d012      	beq.n	80053b6 <HAL_UART_IRQHandler+0x18a>
 8005390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00c      	beq.n	80053b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ac:	f043 0220 	orr.w	r2, r3, #32
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8211 	beq.w	80057e4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00d      	beq.n	80053ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	d005      	beq.n	800540e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005406:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800540a:	2b00      	cmp	r3, #0
 800540c:	d04f      	beq.n	80054ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fe4c 	bl	80060ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b40      	cmp	r3, #64	; 0x40
 8005420:	d141      	bne.n	80054a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3308      	adds	r3, #8
 8005428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800543c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3308      	adds	r3, #8
 800544a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800544e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800545a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800545e:	e841 2300 	strex	r3, r2, [r1]
 8005462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1d9      	bne.n	8005422 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005472:	2b00      	cmp	r3, #0
 8005474:	d013      	beq.n	800549e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547a:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <HAL_UART_IRQHandler+0x29c>)
 800547c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005482:	4618      	mov	r0, r3
 8005484:	f7fc fe8c 	bl	80021a0 <HAL_DMA_Abort_IT>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d017      	beq.n	80054be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005498:	4610      	mov	r0, r2
 800549a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549c:	e00f      	b.n	80054be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f9b4 	bl	800580c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a4:	e00b      	b.n	80054be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f9b0 	bl	800580c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ac:	e007      	b.n	80054be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f9ac 	bl	800580c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80054bc:	e192      	b.n	80057e4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054be:	bf00      	nop
    return;
 80054c0:	e190      	b.n	80057e4 <HAL_UART_IRQHandler+0x5b8>
 80054c2:	bf00      	nop
 80054c4:	04000120 	.word	0x04000120
 80054c8:	08006175 	.word	0x08006175

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	f040 814b 	bne.w	800576c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 8144 	beq.w	800576c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 813d 	beq.w	800576c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2210      	movs	r2, #16
 80054f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b40      	cmp	r3, #64	; 0x40
 8005506:	f040 80b5 	bne.w	8005674 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005516:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 8164 	beq.w	80057e8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800552a:	429a      	cmp	r2, r3
 800552c:	f080 815c 	bcs.w	80057e8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005536:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	2b20      	cmp	r3, #32
 8005542:	f000 8086 	beq.w	8005652 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800555a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800555e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005562:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005570:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005574:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800557c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005588:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1da      	bne.n	8005546 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3308      	adds	r3, #8
 80055b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e1      	bne.n	8005590 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3308      	adds	r3, #8
 80055d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3308      	adds	r3, #8
 80055ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055f8:	e841 2300 	strex	r3, r2, [r1]
 80055fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e3      	bne.n	80055cc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005622:	f023 0310 	bic.w	r3, r3, #16
 8005626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005634:	65bb      	str	r3, [r7, #88]	; 0x58
 8005636:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800563a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e4      	bne.n	8005612 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564c:	4618      	mov	r0, r3
 800564e:	f7fc fd6e 	bl	800212e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2202      	movs	r2, #2
 8005656:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005664:	b29b      	uxth	r3, r3
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	b29b      	uxth	r3, r3
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f8d7 	bl	8005820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005672:	e0b9      	b.n	80057e8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005680:	b29b      	uxth	r3, r3
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80ab 	beq.w	80057ec <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005696:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 80a6 	beq.w	80057ec <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056c2:	647b      	str	r3, [r7, #68]	; 0x44
 80056c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e4      	bne.n	80056a0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3308      	adds	r3, #8
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	623b      	str	r3, [r7, #32]
   return(result);
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3308      	adds	r3, #8
 80056f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056fa:	633a      	str	r2, [r7, #48]	; 0x30
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e3      	bne.n	80056d6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0310 	bic.w	r3, r3, #16
 8005736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	69b9      	ldr	r1, [r7, #24]
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	617b      	str	r3, [r7, #20]
   return(result);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e4      	bne.n	8005722 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800575e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f85b 	bl	8005820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800576a:	e03f      	b.n	80057ec <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800576c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00e      	beq.n	8005796 <HAL_UART_IRQHandler+0x56a>
 8005778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800577c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800578c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fed8 	bl	8006544 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005794:	e02d      	b.n	80057f2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00e      	beq.n	80057c0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01c      	beq.n	80057f0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
    }
    return;
 80057be:	e017      	b.n	80057f0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d012      	beq.n	80057f2 <HAL_UART_IRQHandler+0x5c6>
 80057cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00c      	beq.n	80057f2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fce1 	bl	80061a0 <UART_EndTransmit_IT>
    return;
 80057de:	e008      	b.n	80057f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80057e0:	bf00      	nop
 80057e2:	e006      	b.n	80057f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80057e4:	bf00      	nop
 80057e6:	e004      	b.n	80057f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80057e8:	bf00      	nop
 80057ea:	e002      	b.n	80057f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80057ec:	bf00      	nop
 80057ee:	e000      	b.n	80057f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80057f0:	bf00      	nop
  }

}
 80057f2:	37e8      	adds	r7, #232	; 0xe8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005866:	f023 030c 	bic.w	r3, r3, #12
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	6979      	ldr	r1, [r7, #20]
 8005870:	430b      	orrs	r3, r1
 8005872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4aa7      	ldr	r2, [pc, #668]	; (8005b50 <UART_SetConfig+0x318>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d120      	bne.n	80058fa <UART_SetConfig+0xc2>
 80058b8:	4ba6      	ldr	r3, [pc, #664]	; (8005b54 <UART_SetConfig+0x31c>)
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d817      	bhi.n	80058f4 <UART_SetConfig+0xbc>
 80058c4:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <UART_SetConfig+0x94>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	080058dd 	.word	0x080058dd
 80058d0:	080058e9 	.word	0x080058e9
 80058d4:	080058ef 	.word	0x080058ef
 80058d8:	080058e3 	.word	0x080058e3
 80058dc:	2301      	movs	r3, #1
 80058de:	77fb      	strb	r3, [r7, #31]
 80058e0:	e0b5      	b.n	8005a4e <UART_SetConfig+0x216>
 80058e2:	2302      	movs	r3, #2
 80058e4:	77fb      	strb	r3, [r7, #31]
 80058e6:	e0b2      	b.n	8005a4e <UART_SetConfig+0x216>
 80058e8:	2304      	movs	r3, #4
 80058ea:	77fb      	strb	r3, [r7, #31]
 80058ec:	e0af      	b.n	8005a4e <UART_SetConfig+0x216>
 80058ee:	2308      	movs	r3, #8
 80058f0:	77fb      	strb	r3, [r7, #31]
 80058f2:	e0ac      	b.n	8005a4e <UART_SetConfig+0x216>
 80058f4:	2310      	movs	r3, #16
 80058f6:	77fb      	strb	r3, [r7, #31]
 80058f8:	e0a9      	b.n	8005a4e <UART_SetConfig+0x216>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a96      	ldr	r2, [pc, #600]	; (8005b58 <UART_SetConfig+0x320>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d124      	bne.n	800594e <UART_SetConfig+0x116>
 8005904:	4b93      	ldr	r3, [pc, #588]	; (8005b54 <UART_SetConfig+0x31c>)
 8005906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800590c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005910:	d011      	beq.n	8005936 <UART_SetConfig+0xfe>
 8005912:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005916:	d817      	bhi.n	8005948 <UART_SetConfig+0x110>
 8005918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800591c:	d011      	beq.n	8005942 <UART_SetConfig+0x10a>
 800591e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005922:	d811      	bhi.n	8005948 <UART_SetConfig+0x110>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <UART_SetConfig+0xf8>
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592c:	d006      	beq.n	800593c <UART_SetConfig+0x104>
 800592e:	e00b      	b.n	8005948 <UART_SetConfig+0x110>
 8005930:	2300      	movs	r3, #0
 8005932:	77fb      	strb	r3, [r7, #31]
 8005934:	e08b      	b.n	8005a4e <UART_SetConfig+0x216>
 8005936:	2302      	movs	r3, #2
 8005938:	77fb      	strb	r3, [r7, #31]
 800593a:	e088      	b.n	8005a4e <UART_SetConfig+0x216>
 800593c:	2304      	movs	r3, #4
 800593e:	77fb      	strb	r3, [r7, #31]
 8005940:	e085      	b.n	8005a4e <UART_SetConfig+0x216>
 8005942:	2308      	movs	r3, #8
 8005944:	77fb      	strb	r3, [r7, #31]
 8005946:	e082      	b.n	8005a4e <UART_SetConfig+0x216>
 8005948:	2310      	movs	r3, #16
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e07f      	b.n	8005a4e <UART_SetConfig+0x216>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a82      	ldr	r2, [pc, #520]	; (8005b5c <UART_SetConfig+0x324>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d124      	bne.n	80059a2 <UART_SetConfig+0x16a>
 8005958:	4b7e      	ldr	r3, [pc, #504]	; (8005b54 <UART_SetConfig+0x31c>)
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005960:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005964:	d011      	beq.n	800598a <UART_SetConfig+0x152>
 8005966:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800596a:	d817      	bhi.n	800599c <UART_SetConfig+0x164>
 800596c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005970:	d011      	beq.n	8005996 <UART_SetConfig+0x15e>
 8005972:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005976:	d811      	bhi.n	800599c <UART_SetConfig+0x164>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <UART_SetConfig+0x14c>
 800597c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005980:	d006      	beq.n	8005990 <UART_SetConfig+0x158>
 8005982:	e00b      	b.n	800599c <UART_SetConfig+0x164>
 8005984:	2300      	movs	r3, #0
 8005986:	77fb      	strb	r3, [r7, #31]
 8005988:	e061      	b.n	8005a4e <UART_SetConfig+0x216>
 800598a:	2302      	movs	r3, #2
 800598c:	77fb      	strb	r3, [r7, #31]
 800598e:	e05e      	b.n	8005a4e <UART_SetConfig+0x216>
 8005990:	2304      	movs	r3, #4
 8005992:	77fb      	strb	r3, [r7, #31]
 8005994:	e05b      	b.n	8005a4e <UART_SetConfig+0x216>
 8005996:	2308      	movs	r3, #8
 8005998:	77fb      	strb	r3, [r7, #31]
 800599a:	e058      	b.n	8005a4e <UART_SetConfig+0x216>
 800599c:	2310      	movs	r3, #16
 800599e:	77fb      	strb	r3, [r7, #31]
 80059a0:	e055      	b.n	8005a4e <UART_SetConfig+0x216>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a6e      	ldr	r2, [pc, #440]	; (8005b60 <UART_SetConfig+0x328>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d124      	bne.n	80059f6 <UART_SetConfig+0x1be>
 80059ac:	4b69      	ldr	r3, [pc, #420]	; (8005b54 <UART_SetConfig+0x31c>)
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80059b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059b8:	d011      	beq.n	80059de <UART_SetConfig+0x1a6>
 80059ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059be:	d817      	bhi.n	80059f0 <UART_SetConfig+0x1b8>
 80059c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059c4:	d011      	beq.n	80059ea <UART_SetConfig+0x1b2>
 80059c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059ca:	d811      	bhi.n	80059f0 <UART_SetConfig+0x1b8>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <UART_SetConfig+0x1a0>
 80059d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059d4:	d006      	beq.n	80059e4 <UART_SetConfig+0x1ac>
 80059d6:	e00b      	b.n	80059f0 <UART_SetConfig+0x1b8>
 80059d8:	2300      	movs	r3, #0
 80059da:	77fb      	strb	r3, [r7, #31]
 80059dc:	e037      	b.n	8005a4e <UART_SetConfig+0x216>
 80059de:	2302      	movs	r3, #2
 80059e0:	77fb      	strb	r3, [r7, #31]
 80059e2:	e034      	b.n	8005a4e <UART_SetConfig+0x216>
 80059e4:	2304      	movs	r3, #4
 80059e6:	77fb      	strb	r3, [r7, #31]
 80059e8:	e031      	b.n	8005a4e <UART_SetConfig+0x216>
 80059ea:	2308      	movs	r3, #8
 80059ec:	77fb      	strb	r3, [r7, #31]
 80059ee:	e02e      	b.n	8005a4e <UART_SetConfig+0x216>
 80059f0:	2310      	movs	r3, #16
 80059f2:	77fb      	strb	r3, [r7, #31]
 80059f4:	e02b      	b.n	8005a4e <UART_SetConfig+0x216>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a5a      	ldr	r2, [pc, #360]	; (8005b64 <UART_SetConfig+0x32c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d124      	bne.n	8005a4a <UART_SetConfig+0x212>
 8005a00:	4b54      	ldr	r3, [pc, #336]	; (8005b54 <UART_SetConfig+0x31c>)
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005a08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a0c:	d011      	beq.n	8005a32 <UART_SetConfig+0x1fa>
 8005a0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a12:	d817      	bhi.n	8005a44 <UART_SetConfig+0x20c>
 8005a14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a18:	d011      	beq.n	8005a3e <UART_SetConfig+0x206>
 8005a1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a1e:	d811      	bhi.n	8005a44 <UART_SetConfig+0x20c>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <UART_SetConfig+0x1f4>
 8005a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a28:	d006      	beq.n	8005a38 <UART_SetConfig+0x200>
 8005a2a:	e00b      	b.n	8005a44 <UART_SetConfig+0x20c>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	77fb      	strb	r3, [r7, #31]
 8005a30:	e00d      	b.n	8005a4e <UART_SetConfig+0x216>
 8005a32:	2302      	movs	r3, #2
 8005a34:	77fb      	strb	r3, [r7, #31]
 8005a36:	e00a      	b.n	8005a4e <UART_SetConfig+0x216>
 8005a38:	2304      	movs	r3, #4
 8005a3a:	77fb      	strb	r3, [r7, #31]
 8005a3c:	e007      	b.n	8005a4e <UART_SetConfig+0x216>
 8005a3e:	2308      	movs	r3, #8
 8005a40:	77fb      	strb	r3, [r7, #31]
 8005a42:	e004      	b.n	8005a4e <UART_SetConfig+0x216>
 8005a44:	2310      	movs	r3, #16
 8005a46:	77fb      	strb	r3, [r7, #31]
 8005a48:	e001      	b.n	8005a4e <UART_SetConfig+0x216>
 8005a4a:	2310      	movs	r3, #16
 8005a4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a56:	d15b      	bne.n	8005b10 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005a58:	7ffb      	ldrb	r3, [r7, #31]
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d827      	bhi.n	8005aae <UART_SetConfig+0x276>
 8005a5e:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <UART_SetConfig+0x22c>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005a91 	.word	0x08005a91
 8005a6c:	08005a99 	.word	0x08005a99
 8005a70:	08005aaf 	.word	0x08005aaf
 8005a74:	08005a9f 	.word	0x08005a9f
 8005a78:	08005aaf 	.word	0x08005aaf
 8005a7c:	08005aaf 	.word	0x08005aaf
 8005a80:	08005aaf 	.word	0x08005aaf
 8005a84:	08005aa7 	.word	0x08005aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a88:	f7fe f9cc 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 8005a8c:	61b8      	str	r0, [r7, #24]
        break;
 8005a8e:	e013      	b.n	8005ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a90:	f7fe f9ea 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 8005a94:	61b8      	str	r0, [r7, #24]
        break;
 8005a96:	e00f      	b.n	8005ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a98:	4b33      	ldr	r3, [pc, #204]	; (8005b68 <UART_SetConfig+0x330>)
 8005a9a:	61bb      	str	r3, [r7, #24]
        break;
 8005a9c:	e00c      	b.n	8005ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a9e:	f7fe f94b 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8005aa2:	61b8      	str	r0, [r7, #24]
        break;
 8005aa4:	e008      	b.n	8005ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aaa:	61bb      	str	r3, [r7, #24]
        break;
 8005aac:	e004      	b.n	8005ab8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ab6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 8082 	beq.w	8005bc4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	005a      	lsls	r2, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	441a      	add	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b0f      	cmp	r3, #15
 8005ada:	d916      	bls.n	8005b0a <UART_SetConfig+0x2d2>
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae2:	d212      	bcs.n	8005b0a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f023 030f 	bic.w	r3, r3, #15
 8005aec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	89fb      	ldrh	r3, [r7, #14]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	89fa      	ldrh	r2, [r7, #14]
 8005b06:	60da      	str	r2, [r3, #12]
 8005b08:	e05c      	b.n	8005bc4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	77bb      	strb	r3, [r7, #30]
 8005b0e:	e059      	b.n	8005bc4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b10:	7ffb      	ldrb	r3, [r7, #31]
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d835      	bhi.n	8005b82 <UART_SetConfig+0x34a>
 8005b16:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <UART_SetConfig+0x2e4>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	08005b6d 	.word	0x08005b6d
 8005b28:	08005b83 	.word	0x08005b83
 8005b2c:	08005b73 	.word	0x08005b73
 8005b30:	08005b83 	.word	0x08005b83
 8005b34:	08005b83 	.word	0x08005b83
 8005b38:	08005b83 	.word	0x08005b83
 8005b3c:	08005b7b 	.word	0x08005b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b40:	f7fe f970 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 8005b44:	61b8      	str	r0, [r7, #24]
        break;
 8005b46:	e021      	b.n	8005b8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b48:	f7fe f98e 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 8005b4c:	61b8      	str	r0, [r7, #24]
        break;
 8005b4e:	e01d      	b.n	8005b8c <UART_SetConfig+0x354>
 8005b50:	40013800 	.word	0x40013800
 8005b54:	40021000 	.word	0x40021000
 8005b58:	40004400 	.word	0x40004400
 8005b5c:	40004800 	.word	0x40004800
 8005b60:	40004c00 	.word	0x40004c00
 8005b64:	40005000 	.word	0x40005000
 8005b68:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b6c:	4b1b      	ldr	r3, [pc, #108]	; (8005bdc <UART_SetConfig+0x3a4>)
 8005b6e:	61bb      	str	r3, [r7, #24]
        break;
 8005b70:	e00c      	b.n	8005b8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b72:	f7fe f8e1 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8005b76:	61b8      	str	r0, [r7, #24]
        break;
 8005b78:	e008      	b.n	8005b8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b7e:	61bb      	str	r3, [r7, #24]
        break;
 8005b80:	e004      	b.n	8005b8c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	77bb      	strb	r3, [r7, #30]
        break;
 8005b8a:	bf00      	nop
    }

    if (pclk != 0U)
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d018      	beq.n	8005bc4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	085a      	lsrs	r2, r3, #1
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	441a      	add	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b0f      	cmp	r3, #15
 8005baa:	d909      	bls.n	8005bc0 <UART_SetConfig+0x388>
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb2:	d205      	bcs.n	8005bc0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	60da      	str	r2, [r3, #12]
 8005bbe:	e001      	b.n	8005bc4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005bd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	007a1200 	.word	0x007a1200

08005be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01a      	beq.n	8005cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cde:	d10a      	bne.n	8005cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	605a      	str	r2, [r3, #4]
  }
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b098      	sub	sp, #96	; 0x60
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d34:	f7fc f8ba 	bl	8001eac <HAL_GetTick>
 8005d38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d12e      	bne.n	8005da6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d50:	2200      	movs	r2, #0
 8005d52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f88c 	bl	8005e74 <UART_WaitOnFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d021      	beq.n	8005da6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d76:	653b      	str	r3, [r7, #80]	; 0x50
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d80:	647b      	str	r3, [r7, #68]	; 0x44
 8005d82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e6      	bne.n	8005d62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e062      	b.n	8005e6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d149      	bne.n	8005e48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f856 	bl	8005e74 <UART_WaitOnFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d03c      	beq.n	8005e48 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	623b      	str	r3, [r7, #32]
   return(result);
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dec:	633b      	str	r3, [r7, #48]	; 0x30
 8005dee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e6      	bne.n	8005dce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3308      	adds	r3, #8
 8005e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0301 	bic.w	r3, r3, #1
 8005e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e20:	61fa      	str	r2, [r7, #28]
 8005e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	69b9      	ldr	r1, [r7, #24]
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e5      	bne.n	8005e00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e011      	b.n	8005e6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3758      	adds	r7, #88	; 0x58
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	4613      	mov	r3, r2
 8005e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e84:	e049      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e8c:	d045      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e8e:	f7fc f80d 	bl	8001eac <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d302      	bcc.n	8005ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e048      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d031      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d110      	bne.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2208      	movs	r2, #8
 8005eca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f8ed 	bl	80060ac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e029      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef4:	d111      	bne.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005efe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f8d3 	bl	80060ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e00f      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4013      	ands	r3, r2
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	bf0c      	ite	eq
 8005f2a:	2301      	moveq	r3, #1
 8005f2c:	2300      	movne	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	79fb      	ldrb	r3, [r7, #7]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d0a6      	beq.n	8005e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b097      	sub	sp, #92	; 0x5c
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	88fa      	ldrh	r2, [r7, #6]
 8005f64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f76:	d10e      	bne.n	8005f96 <UART_Start_Receive_IT+0x52>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d105      	bne.n	8005f8c <UART_Start_Receive_IT+0x48>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005f86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f8a:	e01a      	b.n	8005fc2 <UART_Start_Receive_IT+0x7e>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	22ff      	movs	r2, #255	; 0xff
 8005f90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f94:	e015      	b.n	8005fc2 <UART_Start_Receive_IT+0x7e>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10d      	bne.n	8005fba <UART_Start_Receive_IT+0x76>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d104      	bne.n	8005fb0 <UART_Start_Receive_IT+0x6c>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	22ff      	movs	r2, #255	; 0xff
 8005faa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fae:	e008      	b.n	8005fc2 <UART_Start_Receive_IT+0x7e>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	227f      	movs	r2, #127	; 0x7f
 8005fb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fb8:	e003      	b.n	8005fc2 <UART_Start_Receive_IT+0x7e>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2222      	movs	r2, #34	; 0x22
 8005fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	657b      	str	r3, [r7, #84]	; 0x54
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3308      	adds	r3, #8
 8005ff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ff2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ff4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e5      	bne.n	8005fd2 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600e:	d107      	bne.n	8006020 <UART_Start_Receive_IT+0xdc>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d103      	bne.n	8006020 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4a22      	ldr	r2, [pc, #136]	; (80060a4 <UART_Start_Receive_IT+0x160>)
 800601c:	669a      	str	r2, [r3, #104]	; 0x68
 800601e:	e002      	b.n	8006026 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <UART_Start_Receive_IT+0x164>)
 8006024:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d019      	beq.n	8006062 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800604c:	637b      	str	r3, [r7, #52]	; 0x34
 800604e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e6      	bne.n	800602e <UART_Start_Receive_IT+0xea>
 8006060:	e018      	b.n	8006094 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	613b      	str	r3, [r7, #16]
   return(result);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f043 0320 	orr.w	r3, r3, #32
 8006076:	653b      	str	r3, [r7, #80]	; 0x50
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006080:	623b      	str	r3, [r7, #32]
 8006082:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	69f9      	ldr	r1, [r7, #28]
 8006086:	6a3a      	ldr	r2, [r7, #32]
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	61bb      	str	r3, [r7, #24]
   return(result);
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e6      	bne.n	8006062 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	375c      	adds	r7, #92	; 0x5c
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	0800639d 	.word	0x0800639d
 80060a8:	080061f5 	.word	0x080061f5

080060ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b095      	sub	sp, #84	; 0x54
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d2:	643b      	str	r3, [r7, #64]	; 0x40
 80060d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e6      	bne.n	80060b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3308      	adds	r3, #8
 80060ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	f023 0301 	bic.w	r3, r3, #1
 80060fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3308      	adds	r3, #8
 8006104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006108:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800610c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e5      	bne.n	80060e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800611e:	2b01      	cmp	r3, #1
 8006120:	d118      	bne.n	8006154 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0310 	bic.w	r3, r3, #16
 8006136:	647b      	str	r3, [r7, #68]	; 0x44
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6979      	ldr	r1, [r7, #20]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	613b      	str	r3, [r7, #16]
   return(result);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e6      	bne.n	8006122 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006168:	bf00      	nop
 800616a:	3754      	adds	r7, #84	; 0x54
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff fb3a 	bl	800580c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006198:	bf00      	nop
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6979      	ldr	r1, [r7, #20]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	613b      	str	r3, [r7, #16]
   return(result);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e6      	bne.n	80061a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff fb06 	bl	80057f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ec:	bf00      	nop
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b09c      	sub	sp, #112	; 0x70
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006202:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800620c:	2b22      	cmp	r3, #34	; 0x22
 800620e:	f040 80b9 	bne.w	8006384 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006218:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800621c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006220:	b2d9      	uxtb	r1, r3
 8006222:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006226:	b2da      	uxtb	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622c:	400a      	ands	r2, r1
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	f040 809c 	bne.w	8006394 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800626a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800626c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006270:	66bb      	str	r3, [r7, #104]	; 0x68
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800627a:	65bb      	str	r3, [r7, #88]	; 0x58
 800627c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006280:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e6      	bne.n	800625c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3308      	adds	r3, #8
 8006294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	f023 0301 	bic.w	r3, r3, #1
 80062a4:	667b      	str	r3, [r7, #100]	; 0x64
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3308      	adds	r3, #8
 80062ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80062ae:	647a      	str	r2, [r7, #68]	; 0x44
 80062b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e5      	bne.n	800628e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d018      	beq.n	8006316 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	623b      	str	r3, [r7, #32]
   return(result);
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062f8:	663b      	str	r3, [r7, #96]	; 0x60
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006302:	633b      	str	r3, [r7, #48]	; 0x30
 8006304:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e6      	bne.n	80062e4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631a:	2b01      	cmp	r3, #1
 800631c:	d12e      	bne.n	800637c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	60fb      	str	r3, [r7, #12]
   return(result);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f023 0310 	bic.w	r3, r3, #16
 8006338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006342:	61fb      	str	r3, [r7, #28]
 8006344:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	69b9      	ldr	r1, [r7, #24]
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	617b      	str	r3, [r7, #20]
   return(result);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e6      	bne.n	8006324 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	2b10      	cmp	r3, #16
 8006362:	d103      	bne.n	800636c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2210      	movs	r2, #16
 800636a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7ff fa53 	bl	8005820 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800637a:	e00b      	b.n	8006394 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7fb fac7 	bl	8001910 <HAL_UART_RxCpltCallback>
}
 8006382:	e007      	b.n	8006394 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0208 	orr.w	r2, r2, #8
 8006392:	619a      	str	r2, [r3, #24]
}
 8006394:	bf00      	nop
 8006396:	3770      	adds	r7, #112	; 0x70
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b09c      	sub	sp, #112	; 0x70
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063b4:	2b22      	cmp	r3, #34	; 0x22
 80063b6:	f040 80b9 	bne.w	800652c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80063c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80063ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80063ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80063d2:	4013      	ands	r3, r2
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063de:	1c9a      	adds	r2, r3, #2
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f040 809c 	bne.w	800653c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006414:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006418:	667b      	str	r3, [r7, #100]	; 0x64
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006422:	657b      	str	r3, [r7, #84]	; 0x54
 8006424:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006428:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e6      	bne.n	8006404 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3308      	adds	r3, #8
 800643c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	f023 0301 	bic.w	r3, r3, #1
 800644c:	663b      	str	r3, [r7, #96]	; 0x60
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3308      	adds	r3, #8
 8006454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006456:	643a      	str	r2, [r7, #64]	; 0x40
 8006458:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800645c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e5      	bne.n	8006436 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d018      	beq.n	80064be <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	61fb      	str	r3, [r7, #28]
   return(result);
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e6      	bne.n	800648c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d12e      	bne.n	8006524 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f023 0310 	bic.w	r3, r3, #16
 80064e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6979      	ldr	r1, [r7, #20]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	613b      	str	r3, [r7, #16]
   return(result);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e6      	bne.n	80064cc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b10      	cmp	r3, #16
 800650a:	d103      	bne.n	8006514 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2210      	movs	r2, #16
 8006512:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff f97f 	bl	8005820 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006522:	e00b      	b.n	800653c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fb f9f3 	bl	8001910 <HAL_UART_RxCpltCallback>
}
 800652a:	e007      	b.n	800653c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0208 	orr.w	r2, r2, #8
 800653a:	619a      	str	r2, [r3, #24]
}
 800653c:	bf00      	nop
 800653e:	3770      	adds	r7, #112	; 0x70
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006560:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006564:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	b29b      	uxth	r3, r3
 8006572:	43db      	mvns	r3, r3
 8006574:	b29b      	uxth	r3, r3
 8006576:	4013      	ands	r3, r2
 8006578:	b29a      	uxth	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800658e:	b084      	sub	sp, #16
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	f107 0014 	add.w	r0, r7, #20
 800659c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	b004      	add	sp, #16
 80065ce:	4770      	bx	lr

080065d0 <__libc_init_array>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	4d0d      	ldr	r5, [pc, #52]	; (8006608 <__libc_init_array+0x38>)
 80065d4:	4c0d      	ldr	r4, [pc, #52]	; (800660c <__libc_init_array+0x3c>)
 80065d6:	1b64      	subs	r4, r4, r5
 80065d8:	10a4      	asrs	r4, r4, #2
 80065da:	2600      	movs	r6, #0
 80065dc:	42a6      	cmp	r6, r4
 80065de:	d109      	bne.n	80065f4 <__libc_init_array+0x24>
 80065e0:	4d0b      	ldr	r5, [pc, #44]	; (8006610 <__libc_init_array+0x40>)
 80065e2:	4c0c      	ldr	r4, [pc, #48]	; (8006614 <__libc_init_array+0x44>)
 80065e4:	f000 f820 	bl	8006628 <_init>
 80065e8:	1b64      	subs	r4, r4, r5
 80065ea:	10a4      	asrs	r4, r4, #2
 80065ec:	2600      	movs	r6, #0
 80065ee:	42a6      	cmp	r6, r4
 80065f0:	d105      	bne.n	80065fe <__libc_init_array+0x2e>
 80065f2:	bd70      	pop	{r4, r5, r6, pc}
 80065f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f8:	4798      	blx	r3
 80065fa:	3601      	adds	r6, #1
 80065fc:	e7ee      	b.n	80065dc <__libc_init_array+0xc>
 80065fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006602:	4798      	blx	r3
 8006604:	3601      	adds	r6, #1
 8006606:	e7f2      	b.n	80065ee <__libc_init_array+0x1e>
 8006608:	080066a8 	.word	0x080066a8
 800660c:	080066a8 	.word	0x080066a8
 8006610:	080066a8 	.word	0x080066a8
 8006614:	080066ac 	.word	0x080066ac

08006618 <memset>:
 8006618:	4402      	add	r2, r0
 800661a:	4603      	mov	r3, r0
 800661c:	4293      	cmp	r3, r2
 800661e:	d100      	bne.n	8006622 <memset+0xa>
 8006620:	4770      	bx	lr
 8006622:	f803 1b01 	strb.w	r1, [r3], #1
 8006626:	e7f9      	b.n	800661c <memset+0x4>

08006628 <_init>:
 8006628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662a:	bf00      	nop
 800662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662e:	bc08      	pop	{r3}
 8006630:	469e      	mov	lr, r3
 8006632:	4770      	bx	lr

08006634 <_fini>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	bf00      	nop
 8006638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663a:	bc08      	pop	{r3}
 800663c:	469e      	mov	lr, r3
 800663e:	4770      	bx	lr
